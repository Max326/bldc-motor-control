
bldc-motor-control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086cc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000080c  08008870  08008870  00018870  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800907c  0800907c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800907c  0800907c  0001907c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009084  08009084  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009084  08009084  00019084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009088  08009088  00019088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800908c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  200001e0  0800926c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c0  0800926c  000203c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f6ec  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000212b  00000000  00000000  0002f8fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df8  00000000  00000000  00031a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d30  00000000  00000000  00032820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000186f4  00000000  00000000  00033550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f3b8  00000000  00000000  0004bc44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bb6e  00000000  00000000  0005affc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f6b6a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d7c  00000000  00000000  000f6bbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008854 	.word	0x08008854

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	08008854 	.word	0x08008854

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b088      	sub	sp, #32
 8000f60:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f62:	f001 f8e9 	bl	8002138 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f66:	f000 f899 	bl	800109c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f6a:	f000 faff 	bl	800156c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000f6e:	f000 f8fd 	bl	800116c <MX_ADC1_Init>
  MX_USART6_UART_Init();
 8000f72:	f000 fad1 	bl	8001518 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 8000f76:	f000 f94b 	bl	8001210 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000f7a:	f000 fa75 	bl	8001468 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000f7e:	f000 f9e5 	bl	800134c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  uint32_t dir = CW;
 8000f82:	2301      	movs	r3, #1
 8000f84:	61fb      	str	r3, [r7, #28]
  volatile uint32_t torque = 70;
 8000f86:	2346      	movs	r3, #70	; 0x46
 8000f88:	607b      	str	r3, [r7, #4]
  uint32_t max_torque = 20000;
 8000f8a:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000f8e:	61bb      	str	r3, [r7, #24]
  float max_step_size = 0.5;
 8000f90:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8000f94:	617b      	str	r3, [r7, #20]

  uint32_t pot_max = 4095;
 8000f96:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000f9a:	613b      	str	r3, [r7, #16]
//  uint32_t time = HAL_GetTick();
//  uint32_t max_time = 3000;


  wasButtonPressed = false;
 8000f9c:	4b36      	ldr	r3, [pc, #216]	; (8001078 <main+0x11c>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	701a      	strb	r2, [r3, #0]

  MotorInit(&htim1, &htim3);
 8000fa2:	4936      	ldr	r1, [pc, #216]	; (800107c <main+0x120>)
 8000fa4:	4836      	ldr	r0, [pc, #216]	; (8001080 <main+0x124>)
 8000fa6:	f000 fba5 	bl	80016f4 <MotorInit>
  MotorSetTorque(torque);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4618      	mov	r0, r3
 8000fae:	f000 fbeb 	bl	8001788 <MotorSetTorque>
  MotorSetDir(dir);
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f000 fc06 	bl	80017c8 <MotorSetDir>
  MotorSetStepSize(step_size);
 8000fbc:	4b31      	ldr	r3, [pc, #196]	; (8001084 <main+0x128>)
 8000fbe:	edd3 7a00 	vldr	s15, [r3]
 8000fc2:	eeb0 0a67 	vmov.f32	s0, s15
 8000fc6:	f000 fcbd 	bl	8001944 <MotorSetStepSize>


  printf("motor initialized\n");
 8000fca:	482f      	ldr	r0, [pc, #188]	; (8001088 <main+0x12c>)
 8000fcc:	f004 fe34 	bl	8005c38 <puts>

  MotorStart(torque);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f000 fc26 	bl	8001824 <MotorStart>
//    	printf("New speed: %i\n", newSpeed);
//    }

//	MotorSixStepAlgorithm();

	HAL_GPIO_TogglePin(LDN_GPIO_Port, LDN_Pin);
 8000fd8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fdc:	482b      	ldr	r0, [pc, #172]	; (800108c <main+0x130>)
 8000fde:	f001 ffc6 	bl	8002f6e <HAL_GPIO_TogglePin>

	HAL_ADC_Start(&hadc1);
 8000fe2:	482b      	ldr	r0, [pc, #172]	; (8001090 <main+0x134>)
 8000fe4:	f001 f982 	bl	80022ec <HAL_ADC_Start>


	if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 8000fe8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fec:	4828      	ldr	r0, [pc, #160]	; (8001090 <main+0x134>)
 8000fee:	f001 fa31 	bl	8002454 <HAL_ADC_PollForConversion>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d106      	bne.n	8001006 <main+0xaa>
		pot = HAL_ADC_GetValue(&hadc1);
 8000ff8:	4825      	ldr	r0, [pc, #148]	; (8001090 <main+0x134>)
 8000ffa:	f001 fab6 	bl	800256a <HAL_ADC_GetValue>
 8000ffe:	4603      	mov	r3, r0
 8001000:	4a24      	ldr	r2, [pc, #144]	; (8001094 <main+0x138>)
 8001002:	6013      	str	r3, [r2, #0]
 8001004:	e002      	b.n	800100c <main+0xb0>
//		printf("Potentiometer value: %lu\n", pot);
	} else {
		printf("ADC PollForConversion failed\n");
 8001006:	4824      	ldr	r0, [pc, #144]	; (8001098 <main+0x13c>)
 8001008:	f004 fe16 	bl	8005c38 <puts>
	}


	float pot_ratio = (float)pot / (float)pot_max;
 800100c:	4b21      	ldr	r3, [pc, #132]	; (8001094 <main+0x138>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	ee07 3a90 	vmov	s15, r3
 8001014:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	ee07 3a90 	vmov	s15, r3
 800101e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001022:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001026:	edc7 7a03 	vstr	s15, [r7, #12]
//	int new_torque = (int)(pot_ratio * max_torque);
	int new_torque = (int)(pot_ratio * max_torque);
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	ee07 3a90 	vmov	s15, r3
 8001030:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001034:	edd7 7a03 	vldr	s15, [r7, #12]
 8001038:	ee67 7a27 	vmul.f32	s15, s14, s15
 800103c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001040:	ee17 3a90 	vmov	r3, s15
 8001044:	60bb      	str	r3, [r7, #8]

	volatile float new_step_size = (pot_ratio * max_step_size);
 8001046:	ed97 7a03 	vldr	s14, [r7, #12]
 800104a:	edd7 7a05 	vldr	s15, [r7, #20]
 800104e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001052:	edc7 7a00 	vstr	s15, [r7]

//	printf("Calculated new torque: %d\n", new_torque);

	MotorSetStepSize(new_step_size);
 8001056:	edd7 7a00 	vldr	s15, [r7]
 800105a:	eeb0 0a67 	vmov.f32	s0, s15
 800105e:	f000 fc71 	bl	8001944 <MotorSetStepSize>

	CheckButtonPress();
 8001062:	f000 fc43 	bl	80018ec <CheckButtonPress>

	if (wasButtonPressed)
 8001066:	4b04      	ldr	r3, [pc, #16]	; (8001078 <main+0x11c>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <main+0x116>
	{
		MotorDirChange();
 800106e:	f000 fbf5 	bl	800185c <MotorDirChange>
//        printf("New torque: %i\n", new_torque);
//    } else {
//        printf("Torque did not change: %i\n", new_torque);
//    }

	MotorSine();
 8001072:	f000 fc81 	bl	8001978 <MotorSine>
  {
 8001076:	e7af      	b.n	8000fd8 <main+0x7c>
 8001078:	200003a0 	.word	0x200003a0
 800107c:	200002d4 	.word	0x200002d4
 8001080:	20000244 	.word	0x20000244
 8001084:	20000000 	.word	0x20000000
 8001088:	08008870 	.word	0x08008870
 800108c:	40020c00 	.word	0x40020c00
 8001090:	200001fc 	.word	0x200001fc
 8001094:	20000360 	.word	0x20000360
 8001098:	08008884 	.word	0x08008884

0800109c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b094      	sub	sp, #80	; 0x50
 80010a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010a2:	f107 0320 	add.w	r3, r7, #32
 80010a6:	2230      	movs	r2, #48	; 0x30
 80010a8:	2100      	movs	r1, #0
 80010aa:	4618      	mov	r0, r3
 80010ac:	f004 f8cc 	bl	8005248 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010b0:	f107 030c 	add.w	r3, r7, #12
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c0:	2300      	movs	r3, #0
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	4b27      	ldr	r3, [pc, #156]	; (8001164 <SystemClock_Config+0xc8>)
 80010c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c8:	4a26      	ldr	r2, [pc, #152]	; (8001164 <SystemClock_Config+0xc8>)
 80010ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ce:	6413      	str	r3, [r2, #64]	; 0x40
 80010d0:	4b24      	ldr	r3, [pc, #144]	; (8001164 <SystemClock_Config+0xc8>)
 80010d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d8:	60bb      	str	r3, [r7, #8]
 80010da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010dc:	2300      	movs	r3, #0
 80010de:	607b      	str	r3, [r7, #4]
 80010e0:	4b21      	ldr	r3, [pc, #132]	; (8001168 <SystemClock_Config+0xcc>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a20      	ldr	r2, [pc, #128]	; (8001168 <SystemClock_Config+0xcc>)
 80010e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010ea:	6013      	str	r3, [r2, #0]
 80010ec:	4b1e      	ldr	r3, [pc, #120]	; (8001168 <SystemClock_Config+0xcc>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010f4:	607b      	str	r3, [r7, #4]
 80010f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010f8:	2302      	movs	r3, #2
 80010fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010fc:	2301      	movs	r3, #1
 80010fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001100:	2310      	movs	r3, #16
 8001102:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001104:	2302      	movs	r3, #2
 8001106:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001108:	2300      	movs	r3, #0
 800110a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800110c:	2308      	movs	r3, #8
 800110e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001110:	2354      	movs	r3, #84	; 0x54
 8001112:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001114:	2302      	movs	r3, #2
 8001116:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001118:	2304      	movs	r3, #4
 800111a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800111c:	f107 0320 	add.w	r3, r7, #32
 8001120:	4618      	mov	r0, r3
 8001122:	f001 ff3f 	bl	8002fa4 <HAL_RCC_OscConfig>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800112c:	f000 fadc 	bl	80016e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001130:	230f      	movs	r3, #15
 8001132:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001134:	2302      	movs	r3, #2
 8001136:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800113c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001140:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001142:	2300      	movs	r3, #0
 8001144:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001146:	f107 030c 	add.w	r3, r7, #12
 800114a:	2102      	movs	r1, #2
 800114c:	4618      	mov	r0, r3
 800114e:	f002 f9a1 	bl	8003494 <HAL_RCC_ClockConfig>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001158:	f000 fac6 	bl	80016e8 <Error_Handler>
  }
}
 800115c:	bf00      	nop
 800115e:	3750      	adds	r7, #80	; 0x50
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40023800 	.word	0x40023800
 8001168:	40007000 	.word	0x40007000

0800116c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001172:	463b      	mov	r3, r7
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800117e:	4b21      	ldr	r3, [pc, #132]	; (8001204 <MX_ADC1_Init+0x98>)
 8001180:	4a21      	ldr	r2, [pc, #132]	; (8001208 <MX_ADC1_Init+0x9c>)
 8001182:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001184:	4b1f      	ldr	r3, [pc, #124]	; (8001204 <MX_ADC1_Init+0x98>)
 8001186:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800118a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800118c:	4b1d      	ldr	r3, [pc, #116]	; (8001204 <MX_ADC1_Init+0x98>)
 800118e:	2200      	movs	r2, #0
 8001190:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001192:	4b1c      	ldr	r3, [pc, #112]	; (8001204 <MX_ADC1_Init+0x98>)
 8001194:	2200      	movs	r2, #0
 8001196:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001198:	4b1a      	ldr	r3, [pc, #104]	; (8001204 <MX_ADC1_Init+0x98>)
 800119a:	2201      	movs	r2, #1
 800119c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800119e:	4b19      	ldr	r3, [pc, #100]	; (8001204 <MX_ADC1_Init+0x98>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011a6:	4b17      	ldr	r3, [pc, #92]	; (8001204 <MX_ADC1_Init+0x98>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011ac:	4b15      	ldr	r3, [pc, #84]	; (8001204 <MX_ADC1_Init+0x98>)
 80011ae:	4a17      	ldr	r2, [pc, #92]	; (800120c <MX_ADC1_Init+0xa0>)
 80011b0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011b2:	4b14      	ldr	r3, [pc, #80]	; (8001204 <MX_ADC1_Init+0x98>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80011b8:	4b12      	ldr	r3, [pc, #72]	; (8001204 <MX_ADC1_Init+0x98>)
 80011ba:	2201      	movs	r2, #1
 80011bc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011be:	4b11      	ldr	r3, [pc, #68]	; (8001204 <MX_ADC1_Init+0x98>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011c6:	4b0f      	ldr	r3, [pc, #60]	; (8001204 <MX_ADC1_Init+0x98>)
 80011c8:	2201      	movs	r2, #1
 80011ca:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011cc:	480d      	ldr	r0, [pc, #52]	; (8001204 <MX_ADC1_Init+0x98>)
 80011ce:	f001 f849 	bl	8002264 <HAL_ADC_Init>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80011d8:	f000 fa86 	bl	80016e8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80011dc:	2306      	movs	r3, #6
 80011de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011e0:	2301      	movs	r3, #1
 80011e2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80011e4:	2300      	movs	r3, #0
 80011e6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011e8:	463b      	mov	r3, r7
 80011ea:	4619      	mov	r1, r3
 80011ec:	4805      	ldr	r0, [pc, #20]	; (8001204 <MX_ADC1_Init+0x98>)
 80011ee:	f001 f9c9 	bl	8002584 <HAL_ADC_ConfigChannel>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80011f8:	f000 fa76 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011fc:	bf00      	nop
 80011fe:	3710      	adds	r7, #16
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	200001fc 	.word	0x200001fc
 8001208:	40012000 	.word	0x40012000
 800120c:	0f000001 	.word	0x0f000001

08001210 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b092      	sub	sp, #72	; 0x48
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001216:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001220:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	611a      	str	r2, [r3, #16]
 8001230:	615a      	str	r2, [r3, #20]
 8001232:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001234:	1d3b      	adds	r3, r7, #4
 8001236:	2220      	movs	r2, #32
 8001238:	2100      	movs	r1, #0
 800123a:	4618      	mov	r0, r3
 800123c:	f004 f804 	bl	8005248 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001240:	4b40      	ldr	r3, [pc, #256]	; (8001344 <MX_TIM1_Init+0x134>)
 8001242:	4a41      	ldr	r2, [pc, #260]	; (8001348 <MX_TIM1_Init+0x138>)
 8001244:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 42-1;
 8001246:	4b3f      	ldr	r3, [pc, #252]	; (8001344 <MX_TIM1_Init+0x134>)
 8001248:	2229      	movs	r2, #41	; 0x29
 800124a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124c:	4b3d      	ldr	r3, [pc, #244]	; (8001344 <MX_TIM1_Init+0x134>)
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8001252:	4b3c      	ldr	r3, [pc, #240]	; (8001344 <MX_TIM1_Init+0x134>)
 8001254:	2263      	movs	r2, #99	; 0x63
 8001256:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001258:	4b3a      	ldr	r3, [pc, #232]	; (8001344 <MX_TIM1_Init+0x134>)
 800125a:	2200      	movs	r2, #0
 800125c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800125e:	4b39      	ldr	r3, [pc, #228]	; (8001344 <MX_TIM1_Init+0x134>)
 8001260:	2200      	movs	r2, #0
 8001262:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001264:	4b37      	ldr	r3, [pc, #220]	; (8001344 <MX_TIM1_Init+0x134>)
 8001266:	2200      	movs	r2, #0
 8001268:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800126a:	4836      	ldr	r0, [pc, #216]	; (8001344 <MX_TIM1_Init+0x134>)
 800126c:	f002 fbeb 	bl	8003a46 <HAL_TIM_PWM_Init>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8001276:	f000 fa37 	bl	80016e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800127a:	2300      	movs	r3, #0
 800127c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800127e:	2300      	movs	r3, #0
 8001280:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001282:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001286:	4619      	mov	r1, r3
 8001288:	482e      	ldr	r0, [pc, #184]	; (8001344 <MX_TIM1_Init+0x134>)
 800128a:	f003 fb27 	bl	80048dc <HAL_TIMEx_MasterConfigSynchronization>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8001294:	f000 fa28 	bl	80016e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001298:	2360      	movs	r3, #96	; 0x60
 800129a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800129c:	2300      	movs	r3, #0
 800129e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012a0:	2300      	movs	r3, #0
 80012a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012a4:	2300      	movs	r3, #0
 80012a6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012a8:	2300      	movs	r3, #0
 80012aa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012ac:	2300      	movs	r3, #0
 80012ae:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012b0:	2300      	movs	r3, #0
 80012b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012b8:	2200      	movs	r2, #0
 80012ba:	4619      	mov	r1, r3
 80012bc:	4821      	ldr	r0, [pc, #132]	; (8001344 <MX_TIM1_Init+0x134>)
 80012be:	f002 fe25 	bl	8003f0c <HAL_TIM_PWM_ConfigChannel>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 80012c8:	f000 fa0e 	bl	80016e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d0:	2208      	movs	r2, #8
 80012d2:	4619      	mov	r1, r3
 80012d4:	481b      	ldr	r0, [pc, #108]	; (8001344 <MX_TIM1_Init+0x134>)
 80012d6:	f002 fe19 	bl	8003f0c <HAL_TIM_PWM_ConfigChannel>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 80012e0:	f000 fa02 	bl	80016e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80012e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012e8:	220c      	movs	r2, #12
 80012ea:	4619      	mov	r1, r3
 80012ec:	4815      	ldr	r0, [pc, #84]	; (8001344 <MX_TIM1_Init+0x134>)
 80012ee:	f002 fe0d 	bl	8003f0c <HAL_TIM_PWM_ConfigChannel>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 80012f8:	f000 f9f6 	bl	80016e8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 80012fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001300:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8001302:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001306:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001308:	2300      	movs	r3, #0
 800130a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8001310:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001314:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001316:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800131a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 800131c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001320:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001322:	1d3b      	adds	r3, r7, #4
 8001324:	4619      	mov	r1, r3
 8001326:	4807      	ldr	r0, [pc, #28]	; (8001344 <MX_TIM1_Init+0x134>)
 8001328:	f003 fb46 	bl	80049b8 <HAL_TIMEx_ConfigBreakDeadTime>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8001332:	f000 f9d9 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001336:	4803      	ldr	r0, [pc, #12]	; (8001344 <MX_TIM1_Init+0x134>)
 8001338:	f000 fd00 	bl	8001d3c <HAL_TIM_MspPostInit>

}
 800133c:	bf00      	nop
 800133e:	3748      	adds	r7, #72	; 0x48
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20000244 	.word	0x20000244
 8001348:	40010000 	.word	0x40010000

0800134c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08e      	sub	sp, #56	; 0x38
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001352:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]
 800135e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001360:	f107 0320 	add.w	r3, r7, #32
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800136a:	1d3b      	adds	r3, r7, #4
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]
 8001378:	615a      	str	r2, [r3, #20]
 800137a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800137c:	4b39      	ldr	r3, [pc, #228]	; (8001464 <MX_TIM2_Init+0x118>)
 800137e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001382:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001384:	4b37      	ldr	r3, [pc, #220]	; (8001464 <MX_TIM2_Init+0x118>)
 8001386:	2200      	movs	r2, #0
 8001388:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800138a:	4b36      	ldr	r3, [pc, #216]	; (8001464 <MX_TIM2_Init+0x118>)
 800138c:	2200      	movs	r2, #0
 800138e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001390:	4b34      	ldr	r3, [pc, #208]	; (8001464 <MX_TIM2_Init+0x118>)
 8001392:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001396:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001398:	4b32      	ldr	r3, [pc, #200]	; (8001464 <MX_TIM2_Init+0x118>)
 800139a:	2200      	movs	r2, #0
 800139c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800139e:	4b31      	ldr	r3, [pc, #196]	; (8001464 <MX_TIM2_Init+0x118>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013a4:	482f      	ldr	r0, [pc, #188]	; (8001464 <MX_TIM2_Init+0x118>)
 80013a6:	f002 fa55 	bl	8003854 <HAL_TIM_Base_Init>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80013b0:	f000 f99a 	bl	80016e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013b8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013be:	4619      	mov	r1, r3
 80013c0:	4828      	ldr	r0, [pc, #160]	; (8001464 <MX_TIM2_Init+0x118>)
 80013c2:	f002 fe65 	bl	8004090 <HAL_TIM_ConfigClockSource>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80013cc:	f000 f98c 	bl	80016e8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80013d0:	4824      	ldr	r0, [pc, #144]	; (8001464 <MX_TIM2_Init+0x118>)
 80013d2:	f002 fae9 	bl	80039a8 <HAL_TIM_OC_Init>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80013dc:	f000 f984 	bl	80016e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013e0:	2300      	movs	r3, #0
 80013e2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013e4:	2300      	movs	r3, #0
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013e8:	f107 0320 	add.w	r3, r7, #32
 80013ec:	4619      	mov	r1, r3
 80013ee:	481d      	ldr	r0, [pc, #116]	; (8001464 <MX_TIM2_Init+0x118>)
 80013f0:	f003 fa74 	bl	80048dc <HAL_TIMEx_MasterConfigSynchronization>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80013fa:	f000 f975 	bl	80016e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80013fe:	2330      	movs	r3, #48	; 0x30
 8001400:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001402:	2300      	movs	r3, #0
 8001404:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001406:	2300      	movs	r3, #0
 8001408:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800140a:	2300      	movs	r3, #0
 800140c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800140e:	1d3b      	adds	r3, r7, #4
 8001410:	2200      	movs	r2, #0
 8001412:	4619      	mov	r1, r3
 8001414:	4813      	ldr	r0, [pc, #76]	; (8001464 <MX_TIM2_Init+0x118>)
 8001416:	f002 fd1d 	bl	8003e54 <HAL_TIM_OC_ConfigChannel>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001420:	f000 f962 	bl	80016e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001424:	2300      	movs	r3, #0
 8001426:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001428:	1d3b      	adds	r3, r7, #4
 800142a:	2204      	movs	r2, #4
 800142c:	4619      	mov	r1, r3
 800142e:	480d      	ldr	r0, [pc, #52]	; (8001464 <MX_TIM2_Init+0x118>)
 8001430:	f002 fd10 	bl	8003e54 <HAL_TIM_OC_ConfigChannel>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 800143a:	f000 f955 	bl	80016e8 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800143e:	1d3b      	adds	r3, r7, #4
 8001440:	2208      	movs	r2, #8
 8001442:	4619      	mov	r1, r3
 8001444:	4807      	ldr	r0, [pc, #28]	; (8001464 <MX_TIM2_Init+0x118>)
 8001446:	f002 fd05 	bl	8003e54 <HAL_TIM_OC_ConfigChannel>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 8001450:	f000 f94a 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001454:	4803      	ldr	r0, [pc, #12]	; (8001464 <MX_TIM2_Init+0x118>)
 8001456:	f000 fc71 	bl	8001d3c <HAL_TIM_MspPostInit>

}
 800145a:	bf00      	nop
 800145c:	3738      	adds	r7, #56	; 0x38
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	2000028c 	.word	0x2000028c

08001468 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b08a      	sub	sp, #40	; 0x28
 800146c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800146e:	f107 0320 	add.w	r3, r7, #32
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001478:	1d3b      	adds	r3, r7, #4
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	605a      	str	r2, [r3, #4]
 8001480:	609a      	str	r2, [r3, #8]
 8001482:	60da      	str	r2, [r3, #12]
 8001484:	611a      	str	r2, [r3, #16]
 8001486:	615a      	str	r2, [r3, #20]
 8001488:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800148a:	4b21      	ldr	r3, [pc, #132]	; (8001510 <MX_TIM3_Init+0xa8>)
 800148c:	4a21      	ldr	r2, [pc, #132]	; (8001514 <MX_TIM3_Init+0xac>)
 800148e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2100-1;
 8001490:	4b1f      	ldr	r3, [pc, #124]	; (8001510 <MX_TIM3_Init+0xa8>)
 8001492:	f640 0233 	movw	r2, #2099	; 0x833
 8001496:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001498:	4b1d      	ldr	r3, [pc, #116]	; (8001510 <MX_TIM3_Init+0xa8>)
 800149a:	2200      	movs	r2, #0
 800149c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 800149e:	4b1c      	ldr	r3, [pc, #112]	; (8001510 <MX_TIM3_Init+0xa8>)
 80014a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014a4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014a6:	4b1a      	ldr	r3, [pc, #104]	; (8001510 <MX_TIM3_Init+0xa8>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ac:	4b18      	ldr	r3, [pc, #96]	; (8001510 <MX_TIM3_Init+0xa8>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80014b2:	4817      	ldr	r0, [pc, #92]	; (8001510 <MX_TIM3_Init+0xa8>)
 80014b4:	f002 fa78 	bl	80039a8 <HAL_TIM_OC_Init>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80014be:	f000 f913 	bl	80016e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80014c2:	2320      	movs	r3, #32
 80014c4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014c6:	2300      	movs	r3, #0
 80014c8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014ca:	f107 0320 	add.w	r3, r7, #32
 80014ce:	4619      	mov	r1, r3
 80014d0:	480f      	ldr	r0, [pc, #60]	; (8001510 <MX_TIM3_Init+0xa8>)
 80014d2:	f003 fa03 	bl	80048dc <HAL_TIMEx_MasterConfigSynchronization>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80014dc:	f000 f904 	bl	80016e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80014e0:	2300      	movs	r3, #0
 80014e2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014e4:	2300      	movs	r3, #0
 80014e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014e8:	2300      	movs	r3, #0
 80014ea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014f0:	1d3b      	adds	r3, r7, #4
 80014f2:	2200      	movs	r2, #0
 80014f4:	4619      	mov	r1, r3
 80014f6:	4806      	ldr	r0, [pc, #24]	; (8001510 <MX_TIM3_Init+0xa8>)
 80014f8:	f002 fcac 	bl	8003e54 <HAL_TIM_OC_ConfigChannel>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001502:	f000 f8f1 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001506:	bf00      	nop
 8001508:	3728      	adds	r7, #40	; 0x28
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	200002d4 	.word	0x200002d4
 8001514:	40000400 	.word	0x40000400

08001518 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800151c:	4b11      	ldr	r3, [pc, #68]	; (8001564 <MX_USART6_UART_Init+0x4c>)
 800151e:	4a12      	ldr	r2, [pc, #72]	; (8001568 <MX_USART6_UART_Init+0x50>)
 8001520:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001522:	4b10      	ldr	r3, [pc, #64]	; (8001564 <MX_USART6_UART_Init+0x4c>)
 8001524:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001528:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800152a:	4b0e      	ldr	r3, [pc, #56]	; (8001564 <MX_USART6_UART_Init+0x4c>)
 800152c:	2200      	movs	r2, #0
 800152e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001530:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <MX_USART6_UART_Init+0x4c>)
 8001532:	2200      	movs	r2, #0
 8001534:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001536:	4b0b      	ldr	r3, [pc, #44]	; (8001564 <MX_USART6_UART_Init+0x4c>)
 8001538:	2200      	movs	r2, #0
 800153a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800153c:	4b09      	ldr	r3, [pc, #36]	; (8001564 <MX_USART6_UART_Init+0x4c>)
 800153e:	220c      	movs	r2, #12
 8001540:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001542:	4b08      	ldr	r3, [pc, #32]	; (8001564 <MX_USART6_UART_Init+0x4c>)
 8001544:	2200      	movs	r2, #0
 8001546:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001548:	4b06      	ldr	r3, [pc, #24]	; (8001564 <MX_USART6_UART_Init+0x4c>)
 800154a:	2200      	movs	r2, #0
 800154c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800154e:	4805      	ldr	r0, [pc, #20]	; (8001564 <MX_USART6_UART_Init+0x4c>)
 8001550:	f003 fa8e 	bl	8004a70 <HAL_UART_Init>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800155a:	f000 f8c5 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	2000031c 	.word	0x2000031c
 8001568:	40011400 	.word	0x40011400

0800156c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b08a      	sub	sp, #40	; 0x28
 8001570:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001572:	f107 0314 	add.w	r3, r7, #20
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	605a      	str	r2, [r3, #4]
 800157c:	609a      	str	r2, [r3, #8]
 800157e:	60da      	str	r2, [r3, #12]
 8001580:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	613b      	str	r3, [r7, #16]
 8001586:	4b3f      	ldr	r3, [pc, #252]	; (8001684 <MX_GPIO_Init+0x118>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	4a3e      	ldr	r2, [pc, #248]	; (8001684 <MX_GPIO_Init+0x118>)
 800158c:	f043 0301 	orr.w	r3, r3, #1
 8001590:	6313      	str	r3, [r2, #48]	; 0x30
 8001592:	4b3c      	ldr	r3, [pc, #240]	; (8001684 <MX_GPIO_Init+0x118>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	613b      	str	r3, [r7, #16]
 800159c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	4b38      	ldr	r3, [pc, #224]	; (8001684 <MX_GPIO_Init+0x118>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	4a37      	ldr	r2, [pc, #220]	; (8001684 <MX_GPIO_Init+0x118>)
 80015a8:	f043 0310 	orr.w	r3, r3, #16
 80015ac:	6313      	str	r3, [r2, #48]	; 0x30
 80015ae:	4b35      	ldr	r3, [pc, #212]	; (8001684 <MX_GPIO_Init+0x118>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	f003 0310 	and.w	r3, r3, #16
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	60bb      	str	r3, [r7, #8]
 80015be:	4b31      	ldr	r3, [pc, #196]	; (8001684 <MX_GPIO_Init+0x118>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	4a30      	ldr	r2, [pc, #192]	; (8001684 <MX_GPIO_Init+0x118>)
 80015c4:	f043 0302 	orr.w	r3, r3, #2
 80015c8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ca:	4b2e      	ldr	r3, [pc, #184]	; (8001684 <MX_GPIO_Init+0x118>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	60bb      	str	r3, [r7, #8]
 80015d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	607b      	str	r3, [r7, #4]
 80015da:	4b2a      	ldr	r3, [pc, #168]	; (8001684 <MX_GPIO_Init+0x118>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	4a29      	ldr	r2, [pc, #164]	; (8001684 <MX_GPIO_Init+0x118>)
 80015e0:	f043 0308 	orr.w	r3, r3, #8
 80015e4:	6313      	str	r3, [r2, #48]	; 0x30
 80015e6:	4b27      	ldr	r3, [pc, #156]	; (8001684 <MX_GPIO_Init+0x118>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	f003 0308 	and.w	r3, r3, #8
 80015ee:	607b      	str	r3, [r7, #4]
 80015f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	603b      	str	r3, [r7, #0]
 80015f6:	4b23      	ldr	r3, [pc, #140]	; (8001684 <MX_GPIO_Init+0x118>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	4a22      	ldr	r2, [pc, #136]	; (8001684 <MX_GPIO_Init+0x118>)
 80015fc:	f043 0304 	orr.w	r3, r3, #4
 8001600:	6313      	str	r3, [r2, #48]	; 0x30
 8001602:	4b20      	ldr	r3, [pc, #128]	; (8001684 <MX_GPIO_Init+0x118>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	f003 0304 	and.w	r3, r3, #4
 800160a:	603b      	str	r3, [r7, #0]
 800160c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PWM1EN_Pin|PWM2EN_Pin|PWM3EN_Pin, GPIO_PIN_RESET);
 800160e:	2200      	movs	r2, #0
 8001610:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8001614:	481c      	ldr	r0, [pc, #112]	; (8001688 <MX_GPIO_Init+0x11c>)
 8001616:	f001 fc91 	bl	8002f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD3_Pin|LD4_Pin|LD5_Pin|LDN_Pin, GPIO_PIN_RESET);
 800161a:	2200      	movs	r2, #0
 800161c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001620:	481a      	ldr	r0, [pc, #104]	; (800168c <MX_GPIO_Init+0x120>)
 8001622:	f001 fc8b 	bl	8002f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001626:	2301      	movs	r3, #1
 8001628:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800162a:	2300      	movs	r3, #0
 800162c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	2300      	movs	r3, #0
 8001630:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001632:	f107 0314 	add.w	r3, r7, #20
 8001636:	4619      	mov	r1, r3
 8001638:	4815      	ldr	r0, [pc, #84]	; (8001690 <MX_GPIO_Init+0x124>)
 800163a:	f001 fae3 	bl	8002c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWM1EN_Pin PWM2EN_Pin PWM3EN_Pin */
  GPIO_InitStruct.Pin = PWM1EN_Pin|PWM2EN_Pin|PWM3EN_Pin;
 800163e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001642:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001644:	2301      	movs	r3, #1
 8001646:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164c:	2300      	movs	r3, #0
 800164e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001650:	f107 0314 	add.w	r3, r7, #20
 8001654:	4619      	mov	r1, r3
 8001656:	480c      	ldr	r0, [pc, #48]	; (8001688 <MX_GPIO_Init+0x11c>)
 8001658:	f001 fad4 	bl	8002c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin LD5_Pin LDN_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin|LD5_Pin|LDN_Pin;
 800165c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001660:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001662:	2301      	movs	r3, #1
 8001664:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800166a:	2302      	movs	r3, #2
 800166c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800166e:	f107 0314 	add.w	r3, r7, #20
 8001672:	4619      	mov	r1, r3
 8001674:	4805      	ldr	r0, [pc, #20]	; (800168c <MX_GPIO_Init+0x120>)
 8001676:	f001 fac5 	bl	8002c04 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800167a:	bf00      	nop
 800167c:	3728      	adds	r7, #40	; 0x28
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40023800 	.word	0x40023800
 8001688:	40020400 	.word	0x40020400
 800168c:	40020c00 	.word	0x40020c00
 8001690:	40020000 	.word	0x40020000

08001694 <HAL_TIMEx_CommutCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
//	MotorSixStepAlgorithm();
}
 800169c:	bf00      	nop
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <__io_putchar>:

int __io_putchar(int ch)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
    if (ch == '\n') {
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2b0a      	cmp	r3, #10
 80016b4:	d109      	bne.n	80016ca <__io_putchar+0x22>
        uint8_t ch6 = '\r';
 80016b6:	230d      	movs	r3, #13
 80016b8:	73fb      	strb	r3, [r7, #15]
        HAL_UART_Transmit(&huart6, &ch6, 1, HAL_MAX_DELAY);
 80016ba:	f107 010f 	add.w	r1, r7, #15
 80016be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016c2:	2201      	movs	r2, #1
 80016c4:	4807      	ldr	r0, [pc, #28]	; (80016e4 <__io_putchar+0x3c>)
 80016c6:	f003 fa20 	bl	8004b0a <HAL_UART_Transmit>
    }

    HAL_UART_Transmit(&huart6, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80016ca:	1d39      	adds	r1, r7, #4
 80016cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016d0:	2201      	movs	r2, #1
 80016d2:	4804      	ldr	r0, [pc, #16]	; (80016e4 <__io_putchar+0x3c>)
 80016d4:	f003 fa19 	bl	8004b0a <HAL_UART_Transmit>
    return 1;
 80016d8:	2301      	movs	r3, #1
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	2000031c 	.word	0x2000031c

080016e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016ec:	b672      	cpsid	i
}
 80016ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016f0:	e7fe      	b.n	80016f0 <Error_Handler+0x8>
	...

080016f4 <MotorInit>:

bool wasButtonPressed = false;


void MotorInit(TIM_HandleTypeDef *_tim_pwm, TIM_HandleTypeDef *_tim_com)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
	bldc.tim_pwm = _tim_pwm;
 80016fe:	4a20      	ldr	r2, [pc, #128]	; (8001780 <MotorInit+0x8c>)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	61d3      	str	r3, [r2, #28]
	bldc.tim_com = _tim_com;
 8001704:	4a1e      	ldr	r2, [pc, #120]	; (8001780 <MotorInit+0x8c>)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	6193      	str	r3, [r2, #24]

	bldc.step_number = 1;
 800170a:	4b1d      	ldr	r3, [pc, #116]	; (8001780 <MotorInit+0x8c>)
 800170c:	2201      	movs	r2, #1
 800170e:	701a      	strb	r2, [r3, #0]
	bldc.step_size = 2;
 8001710:	4b1b      	ldr	r3, [pc, #108]	; (8001780 <MotorInit+0x8c>)
 8001712:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001716:	605a      	str	r2, [r3, #4]
	bldc.torque = 0;
 8001718:	4b19      	ldr	r3, [pc, #100]	; (8001780 <MotorInit+0x8c>)
 800171a:	2200      	movs	r2, #0
 800171c:	609a      	str	r2, [r3, #8]
	bldc.speed = 0;
 800171e:	4b18      	ldr	r3, [pc, #96]	; (8001780 <MotorInit+0x8c>)
 8001720:	2200      	movs	r2, #0
 8001722:	611a      	str	r2, [r3, #16]
	bldc.dir = CW;
 8001724:	4b16      	ldr	r3, [pc, #88]	; (8001780 <MotorInit+0x8c>)
 8001726:	2201      	movs	r2, #1
 8001728:	60da      	str	r2, [r3, #12]
	bldc.speed_change_delay = 50;
 800172a:	4b15      	ldr	r3, [pc, #84]	; (8001780 <MotorInit+0x8c>)
 800172c:	2232      	movs	r2, #50	; 0x32
 800172e:	615a      	str	r2, [r3, #20]

	MotorConfigChannelInit();
 8001730:	f000 f85a 	bl	80017e8 <MotorConfigChannelInit>

	__HAL_TIM_SET_AUTORELOAD(bldc.tim_com, ARR_TIM3_VALUE);
 8001734:	4b12      	ldr	r3, [pc, #72]	; (8001780 <MotorInit+0x8c>)
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2264      	movs	r2, #100	; 0x64
 800173c:	62da      	str	r2, [r3, #44]	; 0x2c
 800173e:	4b10      	ldr	r3, [pc, #64]	; (8001780 <MotorInit+0x8c>)
 8001740:	699b      	ldr	r3, [r3, #24]
 8001742:	2264      	movs	r2, #100	; 0x64
 8001744:	60da      	str	r2, [r3, #12]

	HAL_TIM_Base_Start(bldc.tim_com);
 8001746:	4b0e      	ldr	r3, [pc, #56]	; (8001780 <MotorInit+0x8c>)
 8001748:	699b      	ldr	r3, [r3, #24]
 800174a:	4618      	mov	r0, r3
 800174c:	f002 f8d2 	bl	80038f4 <HAL_TIM_Base_Start>
	HAL_TIMEx_ConfigCommutationEvent_IT(bldc.tim_pwm, TIM_TS_ITR2, TIM_COMMUTATION_TRGI);
 8001750:	4b0b      	ldr	r3, [pc, #44]	; (8001780 <MotorInit+0x8c>)
 8001752:	69db      	ldr	r3, [r3, #28]
 8001754:	2204      	movs	r2, #4
 8001756:	2120      	movs	r1, #32
 8001758:	4618      	mov	r0, r3
 800175a:	f003 f85e 	bl	800481a <HAL_TIMEx_ConfigCommutEvent_IT>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800175e:	2100      	movs	r1, #0
 8001760:	4808      	ldr	r0, [pc, #32]	; (8001784 <MotorInit+0x90>)
 8001762:	f002 f9bf 	bl	8003ae4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001766:	210c      	movs	r1, #12
 8001768:	4806      	ldr	r0, [pc, #24]	; (8001784 <MotorInit+0x90>)
 800176a:	f002 f9bb 	bl	8003ae4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800176e:	2108      	movs	r1, #8
 8001770:	4804      	ldr	r0, [pc, #16]	; (8001784 <MotorInit+0x90>)
 8001772:	f002 f9b7 	bl	8003ae4 <HAL_TIM_PWM_Start>
}
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	20000364 	.word	0x20000364
 8001784:	20000244 	.word	0x20000244

08001788 <MotorSetTorque>:



bool MotorSetTorque(uint32_t torque)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
	bool isTorqueChanged = false;
 8001790:	2300      	movs	r3, #0
 8001792:	73fb      	strb	r3, [r7, #15]

	if(torque > BLDC_MOTOR_MAX_TORQUE)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2b64      	cmp	r3, #100	; 0x64
 8001798:	d903      	bls.n	80017a2 <MotorSetTorque+0x1a>
	{
		bldc.torque = BLDC_MOTOR_MAX_TORQUE;
 800179a:	4b0a      	ldr	r3, [pc, #40]	; (80017c4 <MotorSetTorque+0x3c>)
 800179c:	2264      	movs	r2, #100	; 0x64
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	e009      	b.n	80017b6 <MotorSetTorque+0x2e>
	}
	else
	{
		if (bldc.torque != torque){
 80017a2:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <MotorSetTorque+0x3c>)
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d001      	beq.n	80017b0 <MotorSetTorque+0x28>
			isTorqueChanged = true;
 80017ac:	2301      	movs	r3, #1
 80017ae:	73fb      	strb	r3, [r7, #15]
//			while (bldc.torque >= torque){
//				bldc.torque--;
//				HAL_Delay(bldc.torque_change_delay);
//			}
//		}
		bldc.torque = torque;
 80017b0:	4a04      	ldr	r2, [pc, #16]	; (80017c4 <MotorSetTorque+0x3c>)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6093      	str	r3, [r2, #8]
	}

	return isTorqueChanged;
 80017b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3714      	adds	r7, #20
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	20000364 	.word	0x20000364

080017c8 <MotorSetDir>:
	}

	return isSpeedChanged;
}

void MotorSetDir(direction dir){
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	71fb      	strb	r3, [r7, #7]
	bldc.dir = dir;
 80017d2:	79fb      	ldrb	r3, [r7, #7]
 80017d4:	4a03      	ldr	r2, [pc, #12]	; (80017e4 <MotorSetDir+0x1c>)
 80017d6:	60d3      	str	r3, [r2, #12]
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	20000364 	.word	0x20000364

080017e8 <MotorConfigChannelInit>:


void MotorConfigChannelInit(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
	bldc.sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017ec:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <MotorConfigChannelInit+0x38>)
 80017ee:	2260      	movs	r2, #96	; 0x60
 80017f0:	621a      	str	r2, [r3, #32]
	bldc.sConfigOC.Pulse = 0;
 80017f2:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <MotorConfigChannelInit+0x38>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	625a      	str	r2, [r3, #36]	; 0x24
	bldc.sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017f8:	4b09      	ldr	r3, [pc, #36]	; (8001820 <MotorConfigChannelInit+0x38>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	629a      	str	r2, [r3, #40]	; 0x28
	bldc.sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017fe:	4b08      	ldr	r3, [pc, #32]	; (8001820 <MotorConfigChannelInit+0x38>)
 8001800:	2200      	movs	r2, #0
 8001802:	62da      	str	r2, [r3, #44]	; 0x2c
	bldc.sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001804:	4b06      	ldr	r3, [pc, #24]	; (8001820 <MotorConfigChannelInit+0x38>)
 8001806:	2200      	movs	r2, #0
 8001808:	631a      	str	r2, [r3, #48]	; 0x30
	bldc.sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800180a:	4b05      	ldr	r3, [pc, #20]	; (8001820 <MotorConfigChannelInit+0x38>)
 800180c:	2200      	movs	r2, #0
 800180e:	635a      	str	r2, [r3, #52]	; 0x34
	bldc.sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001810:	4b03      	ldr	r3, [pc, #12]	; (8001820 <MotorConfigChannelInit+0x38>)
 8001812:	2200      	movs	r2, #0
 8001814:	639a      	str	r2, [r3, #56]	; 0x38

//	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1|TIM_IT_CC3|TIM_IT_CC4);

}
 8001816:	bf00      	nop
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	20000364 	.word	0x20000364

08001824 <MotorStart>:

    HAL_TIM_OC_Stop(bldc.tim_pwm, channel);
//	HAL_TIMEx_OCN_Start(bldc.tim_pwm, channel);
}

void MotorStart(int torque){
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
	int delay = 50;
 800182c:	2332      	movs	r3, #50	; 0x32
 800182e:	60fb      	str	r3, [r7, #12]
	while(bldc.torque <= torque){
 8001830:	e008      	b.n	8001844 <MotorStart+0x20>
		bldc.torque++;
 8001832:	4b09      	ldr	r3, [pc, #36]	; (8001858 <MotorStart+0x34>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	3301      	adds	r3, #1
 8001838:	4a07      	ldr	r2, [pc, #28]	; (8001858 <MotorStart+0x34>)
 800183a:	6093      	str	r3, [r2, #8]
		HAL_Delay(delay);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	4618      	mov	r0, r3
 8001840:	f000 fcec 	bl	800221c <HAL_Delay>
	while(bldc.torque <= torque){
 8001844:	4b04      	ldr	r3, [pc, #16]	; (8001858 <MotorStart+0x34>)
 8001846:	689a      	ldr	r2, [r3, #8]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	429a      	cmp	r2, r3
 800184c:	d9f1      	bls.n	8001832 <MotorStart+0xe>
	}
}
 800184e:	bf00      	nop
 8001850:	bf00      	nop
 8001852:	3710      	adds	r7, #16
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	20000364 	.word	0x20000364

0800185c <MotorDirChange>:

void MotorDirChange(){
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
	int old_torque = bldc.torque;
 8001862:	4b12      	ldr	r3, [pc, #72]	; (80018ac <MotorDirChange+0x50>)
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	607b      	str	r3, [r7, #4]
	int delay = 50;
 8001868:	2332      	movs	r3, #50	; 0x32
 800186a:	603b      	str	r3, [r7, #0]

	while(bldc.torque > 0){
 800186c:	e008      	b.n	8001880 <MotorDirChange+0x24>
		bldc.torque--;
 800186e:	4b0f      	ldr	r3, [pc, #60]	; (80018ac <MotorDirChange+0x50>)
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	3b01      	subs	r3, #1
 8001874:	4a0d      	ldr	r2, [pc, #52]	; (80018ac <MotorDirChange+0x50>)
 8001876:	6093      	str	r3, [r2, #8]
		HAL_Delay(delay);
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	4618      	mov	r0, r3
 800187c:	f000 fcce 	bl	800221c <HAL_Delay>
	while(bldc.torque > 0){
 8001880:	4b0a      	ldr	r3, [pc, #40]	; (80018ac <MotorDirChange+0x50>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d1f2      	bne.n	800186e <MotorDirChange+0x12>
	}
	if (bldc.dir == CW){
 8001888:	4b08      	ldr	r3, [pc, #32]	; (80018ac <MotorDirChange+0x50>)
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d103      	bne.n	8001898 <MotorDirChange+0x3c>
		bldc.dir = CCW;
 8001890:	4b06      	ldr	r3, [pc, #24]	; (80018ac <MotorDirChange+0x50>)
 8001892:	2200      	movs	r2, #0
 8001894:	60da      	str	r2, [r3, #12]
 8001896:	e002      	b.n	800189e <MotorDirChange+0x42>
	} else {
		bldc.dir = CW;
 8001898:	4b04      	ldr	r3, [pc, #16]	; (80018ac <MotorDirChange+0x50>)
 800189a:	2201      	movs	r2, #1
 800189c:	60da      	str	r2, [r3, #12]
	}
	MotorStart(old_torque);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f7ff ffc0 	bl	8001824 <MotorStart>
}
 80018a4:	bf00      	nop
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	20000364 	.word	0x20000364

080018b0 <MotorSetPWM>:



void MotorSetPWM(uint16_t torqueA, uint16_t torqueB, uint16_t torqueC)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4603      	mov	r3, r0
 80018b8:	80fb      	strh	r3, [r7, #6]
 80018ba:	460b      	mov	r3, r1
 80018bc:	80bb      	strh	r3, [r7, #4]
 80018be:	4613      	mov	r3, r2
 80018c0:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, torqueA);
 80018c2:	4b09      	ldr	r3, [pc, #36]	; (80018e8 <MotorSetPWM+0x38>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	88fa      	ldrh	r2, [r7, #6]
 80018c8:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, torqueB);
 80018ca:	4b07      	ldr	r3, [pc, #28]	; (80018e8 <MotorSetPWM+0x38>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	88ba      	ldrh	r2, [r7, #4]
 80018d0:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, torqueC);
 80018d2:	4b05      	ldr	r3, [pc, #20]	; (80018e8 <MotorSetPWM+0x38>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	887a      	ldrh	r2, [r7, #2]
 80018d8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80018da:	bf00      	nop
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	20000244 	.word	0x20000244

080018ec <CheckButtonPress>:


void CheckButtonPress() {
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
    static bool button_state = false;
    bool new_button_state = HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin);
 80018f2:	2101      	movs	r1, #1
 80018f4:	4810      	ldr	r0, [pc, #64]	; (8001938 <CheckButtonPress+0x4c>)
 80018f6:	f001 fb09 	bl	8002f0c <HAL_GPIO_ReadPin>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	bf14      	ite	ne
 8001900:	2301      	movne	r3, #1
 8001902:	2300      	moveq	r3, #0
 8001904:	71fb      	strb	r3, [r7, #7]

    if (new_button_state && !button_state) {
 8001906:	79fb      	ldrb	r3, [r7, #7]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d00a      	beq.n	8001922 <CheckButtonPress+0x36>
 800190c:	4b0b      	ldr	r3, [pc, #44]	; (800193c <CheckButtonPress+0x50>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	f083 0301 	eor.w	r3, r3, #1
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b00      	cmp	r3, #0
 8001918:	d003      	beq.n	8001922 <CheckButtonPress+0x36>
        wasButtonPressed = true;
 800191a:	4b09      	ldr	r3, [pc, #36]	; (8001940 <CheckButtonPress+0x54>)
 800191c:	2201      	movs	r2, #1
 800191e:	701a      	strb	r2, [r3, #0]
 8001920:	e002      	b.n	8001928 <CheckButtonPress+0x3c>
    } else {
        wasButtonPressed = false;
 8001922:	4b07      	ldr	r3, [pc, #28]	; (8001940 <CheckButtonPress+0x54>)
 8001924:	2200      	movs	r2, #0
 8001926:	701a      	strb	r2, [r3, #0]
    }

    button_state = new_button_state;
 8001928:	4a04      	ldr	r2, [pc, #16]	; (800193c <CheckButtonPress+0x50>)
 800192a:	79fb      	ldrb	r3, [r7, #7]
 800192c:	7013      	strb	r3, [r2, #0]
}
 800192e:	bf00      	nop
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40020000 	.word	0x40020000
 800193c:	200003a1 	.word	0x200003a1
 8001940:	200003a0 	.word	0x200003a0

08001944 <MotorSetStepSize>:

void MotorSetStepSize(volatile float newStepSize) {
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	ed87 0a01 	vstr	s0, [r7, #4]
    bldc.step_size = newStepSize;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a07      	ldr	r2, [pc, #28]	; (8001970 <MotorSetStepSize+0x2c>)
 8001952:	6053      	str	r3, [r2, #4]
    printf("Set Step Size: %.2f\n", bldc.step_size);  // Debug output
 8001954:	4b06      	ldr	r3, [pc, #24]	; (8001970 <MotorSetStepSize+0x2c>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	4618      	mov	r0, r3
 800195a:	f7fe fdfd 	bl	8000558 <__aeabi_f2d>
 800195e:	4602      	mov	r2, r0
 8001960:	460b      	mov	r3, r1
 8001962:	4804      	ldr	r0, [pc, #16]	; (8001974 <MotorSetStepSize+0x30>)
 8001964:	f004 f8e2 	bl	8005b2c <iprintf>
}
 8001968:	bf00      	nop
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	20000364 	.word	0x20000364
 8001974:	080088a4 	.word	0x080088a4

08001978 <MotorSine>:

void MotorSine(void) {
 8001978:	b580      	push	{r7, lr}
 800197a:	ed2d 8b02 	vpush	{d8}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
    static float phase = 0.0;
    float torqueA, torqueB, torqueC;

    // Calculate sine wave values for each phase
    torqueA = bldc.torque * sinf(phase);
 8001982:	4b7f      	ldr	r3, [pc, #508]	; (8001b80 <MotorSine+0x208>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	ee07 3a90 	vmov	s15, r3
 800198a:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800198e:	4b7d      	ldr	r3, [pc, #500]	; (8001b84 <MotorSine+0x20c>)
 8001990:	edd3 7a00 	vldr	s15, [r3]
 8001994:	eeb0 0a67 	vmov.f32	s0, s15
 8001998:	f006 fa00 	bl	8007d9c <sinf>
 800199c:	eef0 7a40 	vmov.f32	s15, s0
 80019a0:	ee68 7a27 	vmul.f32	s15, s16, s15
 80019a4:	edc7 7a05 	vstr	s15, [r7, #20]
    torqueB = bldc.torque * sinf(phase + 2.0 * PI / 3.0);
 80019a8:	4b75      	ldr	r3, [pc, #468]	; (8001b80 <MotorSine+0x208>)
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	ee07 3a90 	vmov	s15, r3
 80019b0:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80019b4:	4b73      	ldr	r3, [pc, #460]	; (8001b84 <MotorSine+0x20c>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7fe fdcd 	bl	8000558 <__aeabi_f2d>
 80019be:	a36a      	add	r3, pc, #424	; (adr r3, 8001b68 <MotorSine+0x1f0>)
 80019c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c4:	f7fe fc6a 	bl	800029c <__adddf3>
 80019c8:	4602      	mov	r2, r0
 80019ca:	460b      	mov	r3, r1
 80019cc:	4610      	mov	r0, r2
 80019ce:	4619      	mov	r1, r3
 80019d0:	f7ff f8f2 	bl	8000bb8 <__aeabi_d2f>
 80019d4:	4603      	mov	r3, r0
 80019d6:	ee00 3a10 	vmov	s0, r3
 80019da:	f006 f9df 	bl	8007d9c <sinf>
 80019de:	eef0 7a40 	vmov.f32	s15, s0
 80019e2:	ee68 7a27 	vmul.f32	s15, s16, s15
 80019e6:	edc7 7a04 	vstr	s15, [r7, #16]
    torqueC = bldc.torque * sinf(phase + 4.0 * PI / 3.0);
 80019ea:	4b65      	ldr	r3, [pc, #404]	; (8001b80 <MotorSine+0x208>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	ee07 3a90 	vmov	s15, r3
 80019f2:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80019f6:	4b63      	ldr	r3, [pc, #396]	; (8001b84 <MotorSine+0x20c>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7fe fdac 	bl	8000558 <__aeabi_f2d>
 8001a00:	a35b      	add	r3, pc, #364	; (adr r3, 8001b70 <MotorSine+0x1f8>)
 8001a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a06:	f7fe fc49 	bl	800029c <__adddf3>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	4610      	mov	r0, r2
 8001a10:	4619      	mov	r1, r3
 8001a12:	f7ff f8d1 	bl	8000bb8 <__aeabi_d2f>
 8001a16:	4603      	mov	r3, r0
 8001a18:	ee00 3a10 	vmov	s0, r3
 8001a1c:	f006 f9be 	bl	8007d9c <sinf>
 8001a20:	eef0 7a40 	vmov.f32	s15, s0
 8001a24:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001a28:	edc7 7a03 	vstr	s15, [r7, #12]

    // Convert float torque values to uint16_t for PWM output (Assuming signed center-aligned PWM)
    uint16_t pwmA = (uint16_t)((torqueA + bldc.torque) / (2 * bldc.torque) * PWM_MAX_VALUE);
 8001a2c:	4b54      	ldr	r3, [pc, #336]	; (8001b80 <MotorSine+0x208>)
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	ee07 3a90 	vmov	s15, r3
 8001a34:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a38:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a3c:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001a40:	4b4f      	ldr	r3, [pc, #316]	; (8001b80 <MotorSine+0x208>)
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	ee07 3a90 	vmov	s15, r3
 8001a4a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a52:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8001b88 <MotorSine+0x210>
 8001a56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a5e:	ee17 3a90 	vmov	r3, s15
 8001a62:	817b      	strh	r3, [r7, #10]
    uint16_t pwmB = (uint16_t)((torqueB + bldc.torque) / (2 * bldc.torque) * PWM_MAX_VALUE);
 8001a64:	4b46      	ldr	r3, [pc, #280]	; (8001b80 <MotorSine+0x208>)
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	ee07 3a90 	vmov	s15, r3
 8001a6c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a70:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a74:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001a78:	4b41      	ldr	r3, [pc, #260]	; (8001b80 <MotorSine+0x208>)
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	ee07 3a90 	vmov	s15, r3
 8001a82:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a8a:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8001b88 <MotorSine+0x210>
 8001a8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a96:	ee17 3a90 	vmov	r3, s15
 8001a9a:	813b      	strh	r3, [r7, #8]
    uint16_t pwmC = (uint16_t)((torqueC + bldc.torque) / (2 * bldc.torque) * PWM_MAX_VALUE);
 8001a9c:	4b38      	ldr	r3, [pc, #224]	; (8001b80 <MotorSine+0x208>)
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	ee07 3a90 	vmov	s15, r3
 8001aa4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001aa8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001aac:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001ab0:	4b33      	ldr	r3, [pc, #204]	; (8001b80 <MotorSine+0x208>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	ee07 3a90 	vmov	s15, r3
 8001aba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001abe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ac2:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8001b88 <MotorSine+0x210>
 8001ac6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001aca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ace:	ee17 3a90 	vmov	r3, s15
 8001ad2:	80fb      	strh	r3, [r7, #6]
//    printf("PWM A: %u, PWM B: %u, PWM C: %u\n", (unsigned int)(pwmA), (unsigned int)(pwmB), (unsigned int)(pwmC));

//    printf("Torque: %i, Step Size: %i\n", (int)(bldc.torque), (int)(bldc.step_size));

    // Set PWM values
    MotorSetPWM(pwmA, pwmB, pwmC);
 8001ad4:	88fa      	ldrh	r2, [r7, #6]
 8001ad6:	8939      	ldrh	r1, [r7, #8]
 8001ad8:	897b      	ldrh	r3, [r7, #10]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff fee8 	bl	80018b0 <MotorSetPWM>

    // Increment phase
    phase += bldc.step_size;
 8001ae0:	4b27      	ldr	r3, [pc, #156]	; (8001b80 <MotorSine+0x208>)
 8001ae2:	ed93 7a01 	vldr	s14, [r3, #4]
 8001ae6:	4b27      	ldr	r3, [pc, #156]	; (8001b84 <MotorSine+0x20c>)
 8001ae8:	edd3 7a00 	vldr	s15, [r3]
 8001aec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001af0:	4b24      	ldr	r3, [pc, #144]	; (8001b84 <MotorSine+0x20c>)
 8001af2:	edc3 7a00 	vstr	s15, [r3]

    // Keep the phase within the range of 0 to 2*PI
    if (phase >= 2.0 * PI) {
 8001af6:	4b23      	ldr	r3, [pc, #140]	; (8001b84 <MotorSine+0x20c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7fe fd2c 	bl	8000558 <__aeabi_f2d>
 8001b00:	a31d      	add	r3, pc, #116	; (adr r3, 8001b78 <MotorSine+0x200>)
 8001b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b06:	f7ff f805 	bl	8000b14 <__aeabi_dcmpge>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d012      	beq.n	8001b36 <MotorSine+0x1be>
        phase -= 2.0 * PI;
 8001b10:	4b1c      	ldr	r3, [pc, #112]	; (8001b84 <MotorSine+0x20c>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7fe fd1f 	bl	8000558 <__aeabi_f2d>
 8001b1a:	a317      	add	r3, pc, #92	; (adr r3, 8001b78 <MotorSine+0x200>)
 8001b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b20:	f7fe fbba 	bl	8000298 <__aeabi_dsub>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	4610      	mov	r0, r2
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	f7ff f844 	bl	8000bb8 <__aeabi_d2f>
 8001b30:	4603      	mov	r3, r0
 8001b32:	4a14      	ldr	r2, [pc, #80]	; (8001b84 <MotorSine+0x20c>)
 8001b34:	6013      	str	r3, [r2, #0]
    }

    HAL_GPIO_WritePin(PWM1EN_GPIO_Port, PWM1EN_Pin, GPIO_PIN_SET);
 8001b36:	2201      	movs	r2, #1
 8001b38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b3c:	4813      	ldr	r0, [pc, #76]	; (8001b8c <MotorSine+0x214>)
 8001b3e:	f001 f9fd 	bl	8002f3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PWM2EN_GPIO_Port, PWM2EN_Pin, GPIO_PIN_SET);
 8001b42:	2201      	movs	r2, #1
 8001b44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b48:	4810      	ldr	r0, [pc, #64]	; (8001b8c <MotorSine+0x214>)
 8001b4a:	f001 f9f7 	bl	8002f3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PWM3EN_GPIO_Port, PWM3EN_Pin, GPIO_PIN_SET);
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b54:	480d      	ldr	r0, [pc, #52]	; (8001b8c <MotorSine+0x214>)
 8001b56:	f001 f9f1 	bl	8002f3c <HAL_GPIO_WritePin>
}
 8001b5a:	bf00      	nop
 8001b5c:	3718      	adds	r7, #24
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	ecbd 8b02 	vpop	{d8}
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	382d7365 	.word	0x382d7365
 8001b6c:	4000c152 	.word	0x4000c152
 8001b70:	382d7365 	.word	0x382d7365
 8001b74:	4010c152 	.word	0x4010c152
 8001b78:	54442d18 	.word	0x54442d18
 8001b7c:	401921fb 	.word	0x401921fb
 8001b80:	20000364 	.word	0x20000364
 8001b84:	200003a4 	.word	0x200003a4
 8001b88:	45800000 	.word	0x45800000
 8001b8c:	40020400 	.word	0x40020400

08001b90 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b96:	2300      	movs	r3, #0
 8001b98:	607b      	str	r3, [r7, #4]
 8001b9a:	4b10      	ldr	r3, [pc, #64]	; (8001bdc <HAL_MspInit+0x4c>)
 8001b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9e:	4a0f      	ldr	r2, [pc, #60]	; (8001bdc <HAL_MspInit+0x4c>)
 8001ba0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ba4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ba6:	4b0d      	ldr	r3, [pc, #52]	; (8001bdc <HAL_MspInit+0x4c>)
 8001ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001baa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bae:	607b      	str	r3, [r7, #4]
 8001bb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	603b      	str	r3, [r7, #0]
 8001bb6:	4b09      	ldr	r3, [pc, #36]	; (8001bdc <HAL_MspInit+0x4c>)
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bba:	4a08      	ldr	r2, [pc, #32]	; (8001bdc <HAL_MspInit+0x4c>)
 8001bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bc0:	6413      	str	r3, [r2, #64]	; 0x40
 8001bc2:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <HAL_MspInit+0x4c>)
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bca:	603b      	str	r3, [r7, #0]
 8001bcc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bce:	bf00      	nop
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	40023800 	.word	0x40023800

08001be0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b08a      	sub	sp, #40	; 0x28
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be8:	f107 0314 	add.w	r3, r7, #20
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	60da      	str	r2, [r3, #12]
 8001bf6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a17      	ldr	r2, [pc, #92]	; (8001c5c <HAL_ADC_MspInit+0x7c>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d127      	bne.n	8001c52 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	613b      	str	r3, [r7, #16]
 8001c06:	4b16      	ldr	r3, [pc, #88]	; (8001c60 <HAL_ADC_MspInit+0x80>)
 8001c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0a:	4a15      	ldr	r2, [pc, #84]	; (8001c60 <HAL_ADC_MspInit+0x80>)
 8001c0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c10:	6453      	str	r3, [r2, #68]	; 0x44
 8001c12:	4b13      	ldr	r3, [pc, #76]	; (8001c60 <HAL_ADC_MspInit+0x80>)
 8001c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c1a:	613b      	str	r3, [r7, #16]
 8001c1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	60fb      	str	r3, [r7, #12]
 8001c22:	4b0f      	ldr	r3, [pc, #60]	; (8001c60 <HAL_ADC_MspInit+0x80>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	4a0e      	ldr	r2, [pc, #56]	; (8001c60 <HAL_ADC_MspInit+0x80>)
 8001c28:	f043 0301 	orr.w	r3, r3, #1
 8001c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2e:	4b0c      	ldr	r3, [pc, #48]	; (8001c60 <HAL_ADC_MspInit+0x80>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	60fb      	str	r3, [r7, #12]
 8001c38:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c3a:	2340      	movs	r3, #64	; 0x40
 8001c3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c42:	2300      	movs	r3, #0
 8001c44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c46:	f107 0314 	add.w	r3, r7, #20
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4805      	ldr	r0, [pc, #20]	; (8001c64 <HAL_ADC_MspInit+0x84>)
 8001c4e:	f000 ffd9 	bl	8002c04 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c52:	bf00      	nop
 8001c54:	3728      	adds	r7, #40	; 0x28
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40012000 	.word	0x40012000
 8001c60:	40023800 	.word	0x40023800
 8001c64:	40020000 	.word	0x40020000

08001c68 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a0e      	ldr	r2, [pc, #56]	; (8001cb0 <HAL_TIM_PWM_MspInit+0x48>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d115      	bne.n	8001ca6 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60fb      	str	r3, [r7, #12]
 8001c7e:	4b0d      	ldr	r3, [pc, #52]	; (8001cb4 <HAL_TIM_PWM_MspInit+0x4c>)
 8001c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c82:	4a0c      	ldr	r2, [pc, #48]	; (8001cb4 <HAL_TIM_PWM_MspInit+0x4c>)
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	6453      	str	r3, [r2, #68]	; 0x44
 8001c8a:	4b0a      	ldr	r3, [pc, #40]	; (8001cb4 <HAL_TIM_PWM_MspInit+0x4c>)
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001c96:	2200      	movs	r2, #0
 8001c98:	2100      	movs	r1, #0
 8001c9a:	201a      	movs	r0, #26
 8001c9c:	f000 ff7b 	bl	8002b96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001ca0:	201a      	movs	r0, #26
 8001ca2:	f000 ff94 	bl	8002bce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001ca6:	bf00      	nop
 8001ca8:	3710      	adds	r7, #16
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	40010000 	.word	0x40010000
 8001cb4:	40023800 	.word	0x40023800

08001cb8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cc8:	d10d      	bne.n	8001ce6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	60fb      	str	r3, [r7, #12]
 8001cce:	4b09      	ldr	r3, [pc, #36]	; (8001cf4 <HAL_TIM_Base_MspInit+0x3c>)
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd2:	4a08      	ldr	r2, [pc, #32]	; (8001cf4 <HAL_TIM_Base_MspInit+0x3c>)
 8001cd4:	f043 0301 	orr.w	r3, r3, #1
 8001cd8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cda:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <HAL_TIM_Base_MspInit+0x3c>)
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001ce6:	bf00      	nop
 8001ce8:	3714      	adds	r7, #20
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	40023800 	.word	0x40023800

08001cf8 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a0b      	ldr	r2, [pc, #44]	; (8001d34 <HAL_TIM_OC_MspInit+0x3c>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d10d      	bne.n	8001d26 <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	60fb      	str	r3, [r7, #12]
 8001d0e:	4b0a      	ldr	r3, [pc, #40]	; (8001d38 <HAL_TIM_OC_MspInit+0x40>)
 8001d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d12:	4a09      	ldr	r2, [pc, #36]	; (8001d38 <HAL_TIM_OC_MspInit+0x40>)
 8001d14:	f043 0302 	orr.w	r3, r3, #2
 8001d18:	6413      	str	r3, [r2, #64]	; 0x40
 8001d1a:	4b07      	ldr	r3, [pc, #28]	; (8001d38 <HAL_TIM_OC_MspInit+0x40>)
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001d26:	bf00      	nop
 8001d28:	3714      	adds	r7, #20
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	40000400 	.word	0x40000400
 8001d38:	40023800 	.word	0x40023800

08001d3c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b08a      	sub	sp, #40	; 0x28
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d44:	f107 0314 	add.w	r3, r7, #20
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	605a      	str	r2, [r3, #4]
 8001d4e:	609a      	str	r2, [r3, #8]
 8001d50:	60da      	str	r2, [r3, #12]
 8001d52:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a34      	ldr	r2, [pc, #208]	; (8001e2c <HAL_TIM_MspPostInit+0xf0>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d13e      	bne.n	8001ddc <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	613b      	str	r3, [r7, #16]
 8001d62:	4b33      	ldr	r3, [pc, #204]	; (8001e30 <HAL_TIM_MspPostInit+0xf4>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	4a32      	ldr	r2, [pc, #200]	; (8001e30 <HAL_TIM_MspPostInit+0xf4>)
 8001d68:	f043 0310 	orr.w	r3, r3, #16
 8001d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6e:	4b30      	ldr	r3, [pc, #192]	; (8001e30 <HAL_TIM_MspPostInit+0xf4>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	f003 0310 	and.w	r3, r3, #16
 8001d76:	613b      	str	r3, [r7, #16]
 8001d78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	4b2c      	ldr	r3, [pc, #176]	; (8001e30 <HAL_TIM_MspPostInit+0xf4>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	4a2b      	ldr	r2, [pc, #172]	; (8001e30 <HAL_TIM_MspPostInit+0xf4>)
 8001d84:	f043 0301 	orr.w	r3, r3, #1
 8001d88:	6313      	str	r3, [r2, #48]	; 0x30
 8001d8a:	4b29      	ldr	r3, [pc, #164]	; (8001e30 <HAL_TIM_MspPostInit+0xf4>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001d96:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da0:	2300      	movs	r3, #0
 8001da2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da4:	2300      	movs	r3, #0
 8001da6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001da8:	2301      	movs	r3, #1
 8001daa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001dac:	f107 0314 	add.w	r3, r7, #20
 8001db0:	4619      	mov	r1, r3
 8001db2:	4820      	ldr	r0, [pc, #128]	; (8001e34 <HAL_TIM_MspPostInit+0xf8>)
 8001db4:	f000 ff26 	bl	8002c04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8001db8:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001dbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dce:	f107 0314 	add.w	r3, r7, #20
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	4818      	ldr	r0, [pc, #96]	; (8001e38 <HAL_TIM_MspPostInit+0xfc>)
 8001dd6:	f000 ff15 	bl	8002c04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001dda:	e022      	b.n	8001e22 <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM2)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001de4:	d11d      	bne.n	8001e22 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	60bb      	str	r3, [r7, #8]
 8001dea:	4b11      	ldr	r3, [pc, #68]	; (8001e30 <HAL_TIM_MspPostInit+0xf4>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	4a10      	ldr	r2, [pc, #64]	; (8001e30 <HAL_TIM_MspPostInit+0xf4>)
 8001df0:	f043 0301 	orr.w	r3, r3, #1
 8001df4:	6313      	str	r3, [r2, #48]	; 0x30
 8001df6:	4b0e      	ldr	r3, [pc, #56]	; (8001e30 <HAL_TIM_MspPostInit+0xf4>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	60bb      	str	r3, [r7, #8]
 8001e00:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_5;
 8001e02:	2326      	movs	r3, #38	; 0x26
 8001e04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e06:	2302      	movs	r3, #2
 8001e08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e12:	2301      	movs	r3, #1
 8001e14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e16:	f107 0314 	add.w	r3, r7, #20
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	4806      	ldr	r0, [pc, #24]	; (8001e38 <HAL_TIM_MspPostInit+0xfc>)
 8001e1e:	f000 fef1 	bl	8002c04 <HAL_GPIO_Init>
}
 8001e22:	bf00      	nop
 8001e24:	3728      	adds	r7, #40	; 0x28
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	40010000 	.word	0x40010000
 8001e30:	40023800 	.word	0x40023800
 8001e34:	40021000 	.word	0x40021000
 8001e38:	40020000 	.word	0x40020000

08001e3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b08a      	sub	sp, #40	; 0x28
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e44:	f107 0314 	add.w	r3, r7, #20
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	605a      	str	r2, [r3, #4]
 8001e4e:	609a      	str	r2, [r3, #8]
 8001e50:	60da      	str	r2, [r3, #12]
 8001e52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a19      	ldr	r2, [pc, #100]	; (8001ec0 <HAL_UART_MspInit+0x84>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d12b      	bne.n	8001eb6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	613b      	str	r3, [r7, #16]
 8001e62:	4b18      	ldr	r3, [pc, #96]	; (8001ec4 <HAL_UART_MspInit+0x88>)
 8001e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e66:	4a17      	ldr	r2, [pc, #92]	; (8001ec4 <HAL_UART_MspInit+0x88>)
 8001e68:	f043 0320 	orr.w	r3, r3, #32
 8001e6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e6e:	4b15      	ldr	r3, [pc, #84]	; (8001ec4 <HAL_UART_MspInit+0x88>)
 8001e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e72:	f003 0320 	and.w	r3, r3, #32
 8001e76:	613b      	str	r3, [r7, #16]
 8001e78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	60fb      	str	r3, [r7, #12]
 8001e7e:	4b11      	ldr	r3, [pc, #68]	; (8001ec4 <HAL_UART_MspInit+0x88>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	4a10      	ldr	r2, [pc, #64]	; (8001ec4 <HAL_UART_MspInit+0x88>)
 8001e84:	f043 0304 	orr.w	r3, r3, #4
 8001e88:	6313      	str	r3, [r2, #48]	; 0x30
 8001e8a:	4b0e      	ldr	r3, [pc, #56]	; (8001ec4 <HAL_UART_MspInit+0x88>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	f003 0304 	and.w	r3, r3, #4
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e96:	23c0      	movs	r3, #192	; 0xc0
 8001e98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001ea6:	2308      	movs	r3, #8
 8001ea8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eaa:	f107 0314 	add.w	r3, r7, #20
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4805      	ldr	r0, [pc, #20]	; (8001ec8 <HAL_UART_MspInit+0x8c>)
 8001eb2:	f000 fea7 	bl	8002c04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001eb6:	bf00      	nop
 8001eb8:	3728      	adds	r7, #40	; 0x28
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40011400 	.word	0x40011400
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	40020800 	.word	0x40020800

08001ecc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ed0:	e7fe      	b.n	8001ed0 <NMI_Handler+0x4>

08001ed2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ed6:	e7fe      	b.n	8001ed6 <HardFault_Handler+0x4>

08001ed8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001edc:	e7fe      	b.n	8001edc <MemManage_Handler+0x4>

08001ede <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ee2:	e7fe      	b.n	8001ee2 <BusFault_Handler+0x4>

08001ee4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ee8:	e7fe      	b.n	8001ee8 <UsageFault_Handler+0x4>

08001eea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001eea:	b480      	push	{r7}
 8001eec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001eee:	bf00      	nop
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001efc:	bf00      	nop
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr

08001f06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f06:	b480      	push	{r7}
 8001f08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f0a:	bf00      	nop
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f18:	f000 f960 	bl	80021dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f1c:	bf00      	nop
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f24:	4802      	ldr	r0, [pc, #8]	; (8001f30 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001f26:	f001 fe8d 	bl	8003c44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001f2a:	bf00      	nop
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	20000244 	.word	0x20000244

08001f34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  return 1;
 8001f38:	2301      	movs	r3, #1
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <_kill>:

int _kill(int pid, int sig)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f4e:	f003 f951 	bl	80051f4 <__errno>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2216      	movs	r2, #22
 8001f56:	601a      	str	r2, [r3, #0]
  return -1;
 8001f58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3708      	adds	r7, #8
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <_exit>:

void _exit (int status)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f7ff ffe7 	bl	8001f44 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f76:	e7fe      	b.n	8001f76 <_exit+0x12>

08001f78 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f84:	2300      	movs	r3, #0
 8001f86:	617b      	str	r3, [r7, #20]
 8001f88:	e00a      	b.n	8001fa0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f8a:	f3af 8000 	nop.w
 8001f8e:	4601      	mov	r1, r0
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	1c5a      	adds	r2, r3, #1
 8001f94:	60ba      	str	r2, [r7, #8]
 8001f96:	b2ca      	uxtb	r2, r1
 8001f98:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	617b      	str	r3, [r7, #20]
 8001fa0:	697a      	ldr	r2, [r7, #20]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	dbf0      	blt.n	8001f8a <_read+0x12>
  }

  return len;
 8001fa8:	687b      	ldr	r3, [r7, #4]
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3718      	adds	r7, #24
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b086      	sub	sp, #24
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	60f8      	str	r0, [r7, #12]
 8001fba:	60b9      	str	r1, [r7, #8]
 8001fbc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	617b      	str	r3, [r7, #20]
 8001fc2:	e009      	b.n	8001fd8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	1c5a      	adds	r2, r3, #1
 8001fc8:	60ba      	str	r2, [r7, #8]
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff fb6b 	bl	80016a8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	617b      	str	r3, [r7, #20]
 8001fd8:	697a      	ldr	r2, [r7, #20]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	dbf1      	blt.n	8001fc4 <_write+0x12>
  }
  return len;
 8001fe0:	687b      	ldr	r3, [r7, #4]
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3718      	adds	r7, #24
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <_close>:

int _close(int file)
{
 8001fea:	b480      	push	{r7}
 8001fec:	b083      	sub	sp, #12
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ff2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr

08002002 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002002:	b480      	push	{r7}
 8002004:	b083      	sub	sp, #12
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
 800200a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002012:	605a      	str	r2, [r3, #4]
  return 0;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <_isatty>:

int _isatty(int file)
{
 8002022:	b480      	push	{r7}
 8002024:	b083      	sub	sp, #12
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800202a:	2301      	movs	r3, #1
}
 800202c:	4618      	mov	r0, r3
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3714      	adds	r7, #20
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
	...

08002054 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800205c:	4a14      	ldr	r2, [pc, #80]	; (80020b0 <_sbrk+0x5c>)
 800205e:	4b15      	ldr	r3, [pc, #84]	; (80020b4 <_sbrk+0x60>)
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002068:	4b13      	ldr	r3, [pc, #76]	; (80020b8 <_sbrk+0x64>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d102      	bne.n	8002076 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002070:	4b11      	ldr	r3, [pc, #68]	; (80020b8 <_sbrk+0x64>)
 8002072:	4a12      	ldr	r2, [pc, #72]	; (80020bc <_sbrk+0x68>)
 8002074:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002076:	4b10      	ldr	r3, [pc, #64]	; (80020b8 <_sbrk+0x64>)
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4413      	add	r3, r2
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	429a      	cmp	r2, r3
 8002082:	d207      	bcs.n	8002094 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002084:	f003 f8b6 	bl	80051f4 <__errno>
 8002088:	4603      	mov	r3, r0
 800208a:	220c      	movs	r2, #12
 800208c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800208e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002092:	e009      	b.n	80020a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002094:	4b08      	ldr	r3, [pc, #32]	; (80020b8 <_sbrk+0x64>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800209a:	4b07      	ldr	r3, [pc, #28]	; (80020b8 <_sbrk+0x64>)
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4413      	add	r3, r2
 80020a2:	4a05      	ldr	r2, [pc, #20]	; (80020b8 <_sbrk+0x64>)
 80020a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020a6:	68fb      	ldr	r3, [r7, #12]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3718      	adds	r7, #24
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	20020000 	.word	0x20020000
 80020b4:	00000400 	.word	0x00000400
 80020b8:	200003a8 	.word	0x200003a8
 80020bc:	200003c0 	.word	0x200003c0

080020c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020c4:	4b06      	ldr	r3, [pc, #24]	; (80020e0 <SystemInit+0x20>)
 80020c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ca:	4a05      	ldr	r2, [pc, #20]	; (80020e0 <SystemInit+0x20>)
 80020cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020d4:	bf00      	nop
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	e000ed00 	.word	0xe000ed00

080020e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80020e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800211c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020e8:	480d      	ldr	r0, [pc, #52]	; (8002120 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80020ea:	490e      	ldr	r1, [pc, #56]	; (8002124 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80020ec:	4a0e      	ldr	r2, [pc, #56]	; (8002128 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020f0:	e002      	b.n	80020f8 <LoopCopyDataInit>

080020f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020f6:	3304      	adds	r3, #4

080020f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020fc:	d3f9      	bcc.n	80020f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020fe:	4a0b      	ldr	r2, [pc, #44]	; (800212c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002100:	4c0b      	ldr	r4, [pc, #44]	; (8002130 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002102:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002104:	e001      	b.n	800210a <LoopFillZerobss>

08002106 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002106:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002108:	3204      	adds	r2, #4

0800210a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800210a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800210c:	d3fb      	bcc.n	8002106 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800210e:	f7ff ffd7 	bl	80020c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002112:	f003 f875 	bl	8005200 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002116:	f7fe ff21 	bl	8000f5c <main>
  bx  lr    
 800211a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800211c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002120:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002124:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002128:	0800908c 	.word	0x0800908c
  ldr r2, =_sbss
 800212c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002130:	200003c0 	.word	0x200003c0

08002134 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002134:	e7fe      	b.n	8002134 <ADC_IRQHandler>
	...

08002138 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800213c:	4b0e      	ldr	r3, [pc, #56]	; (8002178 <HAL_Init+0x40>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a0d      	ldr	r2, [pc, #52]	; (8002178 <HAL_Init+0x40>)
 8002142:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002146:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002148:	4b0b      	ldr	r3, [pc, #44]	; (8002178 <HAL_Init+0x40>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a0a      	ldr	r2, [pc, #40]	; (8002178 <HAL_Init+0x40>)
 800214e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002152:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002154:	4b08      	ldr	r3, [pc, #32]	; (8002178 <HAL_Init+0x40>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a07      	ldr	r2, [pc, #28]	; (8002178 <HAL_Init+0x40>)
 800215a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800215e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002160:	2003      	movs	r0, #3
 8002162:	f000 fd0d 	bl	8002b80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002166:	200f      	movs	r0, #15
 8002168:	f000 f808 	bl	800217c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800216c:	f7ff fd10 	bl	8001b90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	40023c00 	.word	0x40023c00

0800217c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002184:	4b12      	ldr	r3, [pc, #72]	; (80021d0 <HAL_InitTick+0x54>)
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	4b12      	ldr	r3, [pc, #72]	; (80021d4 <HAL_InitTick+0x58>)
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	4619      	mov	r1, r3
 800218e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002192:	fbb3 f3f1 	udiv	r3, r3, r1
 8002196:	fbb2 f3f3 	udiv	r3, r2, r3
 800219a:	4618      	mov	r0, r3
 800219c:	f000 fd25 	bl	8002bea <HAL_SYSTICK_Config>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e00e      	b.n	80021c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2b0f      	cmp	r3, #15
 80021ae:	d80a      	bhi.n	80021c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021b0:	2200      	movs	r2, #0
 80021b2:	6879      	ldr	r1, [r7, #4]
 80021b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021b8:	f000 fced 	bl	8002b96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021bc:	4a06      	ldr	r2, [pc, #24]	; (80021d8 <HAL_InitTick+0x5c>)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021c2:	2300      	movs	r3, #0
 80021c4:	e000      	b.n	80021c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	20000004 	.word	0x20000004
 80021d4:	2000000c 	.word	0x2000000c
 80021d8:	20000008 	.word	0x20000008

080021dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021e0:	4b06      	ldr	r3, [pc, #24]	; (80021fc <HAL_IncTick+0x20>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	461a      	mov	r2, r3
 80021e6:	4b06      	ldr	r3, [pc, #24]	; (8002200 <HAL_IncTick+0x24>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4413      	add	r3, r2
 80021ec:	4a04      	ldr	r2, [pc, #16]	; (8002200 <HAL_IncTick+0x24>)
 80021ee:	6013      	str	r3, [r2, #0]
}
 80021f0:	bf00      	nop
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	2000000c 	.word	0x2000000c
 8002200:	200003ac 	.word	0x200003ac

08002204 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  return uwTick;
 8002208:	4b03      	ldr	r3, [pc, #12]	; (8002218 <HAL_GetTick+0x14>)
 800220a:	681b      	ldr	r3, [r3, #0]
}
 800220c:	4618      	mov	r0, r3
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	200003ac 	.word	0x200003ac

0800221c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002224:	f7ff ffee 	bl	8002204 <HAL_GetTick>
 8002228:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002234:	d005      	beq.n	8002242 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002236:	4b0a      	ldr	r3, [pc, #40]	; (8002260 <HAL_Delay+0x44>)
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	461a      	mov	r2, r3
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	4413      	add	r3, r2
 8002240:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002242:	bf00      	nop
 8002244:	f7ff ffde 	bl	8002204 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	429a      	cmp	r2, r3
 8002252:	d8f7      	bhi.n	8002244 <HAL_Delay+0x28>
  {
  }
}
 8002254:	bf00      	nop
 8002256:	bf00      	nop
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	2000000c 	.word	0x2000000c

08002264 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800226c:	2300      	movs	r3, #0
 800226e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d101      	bne.n	800227a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e033      	b.n	80022e2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	2b00      	cmp	r3, #0
 8002280:	d109      	bne.n	8002296 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f7ff fcac 	bl	8001be0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	f003 0310 	and.w	r3, r3, #16
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d118      	bne.n	80022d4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80022aa:	f023 0302 	bic.w	r3, r3, #2
 80022ae:	f043 0202 	orr.w	r2, r3, #2
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 fa96 	bl	80027e8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c6:	f023 0303 	bic.w	r3, r3, #3
 80022ca:	f043 0201 	orr.w	r2, r3, #1
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	641a      	str	r2, [r3, #64]	; 0x40
 80022d2:	e001      	b.n	80022d8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80022e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
	...

080022ec <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80022f4:	2300      	movs	r3, #0
 80022f6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d101      	bne.n	8002306 <HAL_ADC_Start+0x1a>
 8002302:	2302      	movs	r3, #2
 8002304:	e097      	b.n	8002436 <HAL_ADC_Start+0x14a>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2201      	movs	r2, #1
 800230a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f003 0301 	and.w	r3, r3, #1
 8002318:	2b01      	cmp	r3, #1
 800231a:	d018      	beq.n	800234e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	689a      	ldr	r2, [r3, #8]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f042 0201 	orr.w	r2, r2, #1
 800232a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800232c:	4b45      	ldr	r3, [pc, #276]	; (8002444 <HAL_ADC_Start+0x158>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a45      	ldr	r2, [pc, #276]	; (8002448 <HAL_ADC_Start+0x15c>)
 8002332:	fba2 2303 	umull	r2, r3, r2, r3
 8002336:	0c9a      	lsrs	r2, r3, #18
 8002338:	4613      	mov	r3, r2
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	4413      	add	r3, r2
 800233e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002340:	e002      	b.n	8002348 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	3b01      	subs	r3, #1
 8002346:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1f9      	bne.n	8002342 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f003 0301 	and.w	r3, r3, #1
 8002358:	2b01      	cmp	r3, #1
 800235a:	d15f      	bne.n	800241c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002360:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002364:	f023 0301 	bic.w	r3, r3, #1
 8002368:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800237a:	2b00      	cmp	r3, #0
 800237c:	d007      	beq.n	800238e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002382:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002386:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002392:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002396:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800239a:	d106      	bne.n	80023aa <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a0:	f023 0206 	bic.w	r2, r3, #6
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	645a      	str	r2, [r3, #68]	; 0x44
 80023a8:	e002      	b.n	80023b0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023b8:	4b24      	ldr	r3, [pc, #144]	; (800244c <HAL_ADC_Start+0x160>)
 80023ba:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80023c4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f003 031f 	and.w	r3, r3, #31
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d10f      	bne.n	80023f2 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d129      	bne.n	8002434 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	689a      	ldr	r2, [r3, #8]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80023ee:	609a      	str	r2, [r3, #8]
 80023f0:	e020      	b.n	8002434 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a16      	ldr	r2, [pc, #88]	; (8002450 <HAL_ADC_Start+0x164>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d11b      	bne.n	8002434 <HAL_ADC_Start+0x148>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d114      	bne.n	8002434 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	689a      	ldr	r2, [r3, #8]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002418:	609a      	str	r2, [r3, #8]
 800241a:	e00b      	b.n	8002434 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002420:	f043 0210 	orr.w	r2, r3, #16
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242c:	f043 0201 	orr.w	r2, r3, #1
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3714      	adds	r7, #20
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	20000004 	.word	0x20000004
 8002448:	431bde83 	.word	0x431bde83
 800244c:	40012300 	.word	0x40012300
 8002450:	40012000 	.word	0x40012000

08002454 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800245e:	2300      	movs	r3, #0
 8002460:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800246c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002470:	d113      	bne.n	800249a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800247c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002480:	d10b      	bne.n	800249a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002486:	f043 0220 	orr.w	r2, r3, #32
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e063      	b.n	8002562 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800249a:	f7ff feb3 	bl	8002204 <HAL_GetTick>
 800249e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80024a0:	e021      	b.n	80024e6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024a8:	d01d      	beq.n	80024e6 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d007      	beq.n	80024c0 <HAL_ADC_PollForConversion+0x6c>
 80024b0:	f7ff fea8 	bl	8002204 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	683a      	ldr	r2, [r7, #0]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d212      	bcs.n	80024e6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d00b      	beq.n	80024e6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d2:	f043 0204 	orr.w	r2, r3, #4
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e03d      	b.n	8002562 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d1d6      	bne.n	80024a2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f06f 0212 	mvn.w	r2, #18
 80024fc:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002502:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d123      	bne.n	8002560 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800251c:	2b00      	cmp	r3, #0
 800251e:	d11f      	bne.n	8002560 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002526:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800252a:	2b00      	cmp	r3, #0
 800252c:	d006      	beq.n	800253c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002538:	2b00      	cmp	r3, #0
 800253a:	d111      	bne.n	8002560 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002540:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d105      	bne.n	8002560 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002558:	f043 0201 	orr.w	r2, r3, #1
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3710      	adds	r7, #16
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800256a:	b480      	push	{r7}
 800256c:	b083      	sub	sp, #12
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002578:	4618      	mov	r0, r3
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002584:	b480      	push	{r7}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800258e:	2300      	movs	r3, #0
 8002590:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002598:	2b01      	cmp	r3, #1
 800259a:	d101      	bne.n	80025a0 <HAL_ADC_ConfigChannel+0x1c>
 800259c:	2302      	movs	r3, #2
 800259e:	e113      	b.n	80027c8 <HAL_ADC_ConfigChannel+0x244>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2b09      	cmp	r3, #9
 80025ae:	d925      	bls.n	80025fc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68d9      	ldr	r1, [r3, #12]
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	461a      	mov	r2, r3
 80025be:	4613      	mov	r3, r2
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	4413      	add	r3, r2
 80025c4:	3b1e      	subs	r3, #30
 80025c6:	2207      	movs	r2, #7
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	43da      	mvns	r2, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	400a      	ands	r2, r1
 80025d4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68d9      	ldr	r1, [r3, #12]
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	689a      	ldr	r2, [r3, #8]
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	4618      	mov	r0, r3
 80025e8:	4603      	mov	r3, r0
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	4403      	add	r3, r0
 80025ee:	3b1e      	subs	r3, #30
 80025f0:	409a      	lsls	r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	430a      	orrs	r2, r1
 80025f8:	60da      	str	r2, [r3, #12]
 80025fa:	e022      	b.n	8002642 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	6919      	ldr	r1, [r3, #16]
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	b29b      	uxth	r3, r3
 8002608:	461a      	mov	r2, r3
 800260a:	4613      	mov	r3, r2
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	4413      	add	r3, r2
 8002610:	2207      	movs	r2, #7
 8002612:	fa02 f303 	lsl.w	r3, r2, r3
 8002616:	43da      	mvns	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	400a      	ands	r2, r1
 800261e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	6919      	ldr	r1, [r3, #16]
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	689a      	ldr	r2, [r3, #8]
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	b29b      	uxth	r3, r3
 8002630:	4618      	mov	r0, r3
 8002632:	4603      	mov	r3, r0
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	4403      	add	r3, r0
 8002638:	409a      	lsls	r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	430a      	orrs	r2, r1
 8002640:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	2b06      	cmp	r3, #6
 8002648:	d824      	bhi.n	8002694 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685a      	ldr	r2, [r3, #4]
 8002654:	4613      	mov	r3, r2
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	4413      	add	r3, r2
 800265a:	3b05      	subs	r3, #5
 800265c:	221f      	movs	r2, #31
 800265e:	fa02 f303 	lsl.w	r3, r2, r3
 8002662:	43da      	mvns	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	400a      	ands	r2, r1
 800266a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	b29b      	uxth	r3, r3
 8002678:	4618      	mov	r0, r3
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	685a      	ldr	r2, [r3, #4]
 800267e:	4613      	mov	r3, r2
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	4413      	add	r3, r2
 8002684:	3b05      	subs	r3, #5
 8002686:	fa00 f203 	lsl.w	r2, r0, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	430a      	orrs	r2, r1
 8002690:	635a      	str	r2, [r3, #52]	; 0x34
 8002692:	e04c      	b.n	800272e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	2b0c      	cmp	r3, #12
 800269a:	d824      	bhi.n	80026e6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685a      	ldr	r2, [r3, #4]
 80026a6:	4613      	mov	r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	4413      	add	r3, r2
 80026ac:	3b23      	subs	r3, #35	; 0x23
 80026ae:	221f      	movs	r2, #31
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	43da      	mvns	r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	400a      	ands	r2, r1
 80026bc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	4618      	mov	r0, r3
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685a      	ldr	r2, [r3, #4]
 80026d0:	4613      	mov	r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	4413      	add	r3, r2
 80026d6:	3b23      	subs	r3, #35	; 0x23
 80026d8:	fa00 f203 	lsl.w	r2, r0, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	430a      	orrs	r2, r1
 80026e2:	631a      	str	r2, [r3, #48]	; 0x30
 80026e4:	e023      	b.n	800272e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685a      	ldr	r2, [r3, #4]
 80026f0:	4613      	mov	r3, r2
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	4413      	add	r3, r2
 80026f6:	3b41      	subs	r3, #65	; 0x41
 80026f8:	221f      	movs	r2, #31
 80026fa:	fa02 f303 	lsl.w	r3, r2, r3
 80026fe:	43da      	mvns	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	400a      	ands	r2, r1
 8002706:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	b29b      	uxth	r3, r3
 8002714:	4618      	mov	r0, r3
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	685a      	ldr	r2, [r3, #4]
 800271a:	4613      	mov	r3, r2
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	4413      	add	r3, r2
 8002720:	3b41      	subs	r3, #65	; 0x41
 8002722:	fa00 f203 	lsl.w	r2, r0, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	430a      	orrs	r2, r1
 800272c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800272e:	4b29      	ldr	r3, [pc, #164]	; (80027d4 <HAL_ADC_ConfigChannel+0x250>)
 8002730:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a28      	ldr	r2, [pc, #160]	; (80027d8 <HAL_ADC_ConfigChannel+0x254>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d10f      	bne.n	800275c <HAL_ADC_ConfigChannel+0x1d8>
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2b12      	cmp	r3, #18
 8002742:	d10b      	bne.n	800275c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a1d      	ldr	r2, [pc, #116]	; (80027d8 <HAL_ADC_ConfigChannel+0x254>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d12b      	bne.n	80027be <HAL_ADC_ConfigChannel+0x23a>
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a1c      	ldr	r2, [pc, #112]	; (80027dc <HAL_ADC_ConfigChannel+0x258>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d003      	beq.n	8002778 <HAL_ADC_ConfigChannel+0x1f4>
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2b11      	cmp	r3, #17
 8002776:	d122      	bne.n	80027be <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a11      	ldr	r2, [pc, #68]	; (80027dc <HAL_ADC_ConfigChannel+0x258>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d111      	bne.n	80027be <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800279a:	4b11      	ldr	r3, [pc, #68]	; (80027e0 <HAL_ADC_ConfigChannel+0x25c>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a11      	ldr	r2, [pc, #68]	; (80027e4 <HAL_ADC_ConfigChannel+0x260>)
 80027a0:	fba2 2303 	umull	r2, r3, r2, r3
 80027a4:	0c9a      	lsrs	r2, r3, #18
 80027a6:	4613      	mov	r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	4413      	add	r3, r2
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80027b0:	e002      	b.n	80027b8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	3b01      	subs	r3, #1
 80027b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1f9      	bne.n	80027b2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80027c6:	2300      	movs	r3, #0
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3714      	adds	r7, #20
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr
 80027d4:	40012300 	.word	0x40012300
 80027d8:	40012000 	.word	0x40012000
 80027dc:	10000012 	.word	0x10000012
 80027e0:	20000004 	.word	0x20000004
 80027e4:	431bde83 	.word	0x431bde83

080027e8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b085      	sub	sp, #20
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027f0:	4b79      	ldr	r3, [pc, #484]	; (80029d8 <ADC_Init+0x1f0>)
 80027f2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	685a      	ldr	r2, [r3, #4]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	431a      	orrs	r2, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	685a      	ldr	r2, [r3, #4]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800281c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	6859      	ldr	r1, [r3, #4]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	021a      	lsls	r2, r3, #8
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	430a      	orrs	r2, r1
 8002830:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	685a      	ldr	r2, [r3, #4]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002840:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	6859      	ldr	r1, [r3, #4]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689a      	ldr	r2, [r3, #8]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	430a      	orrs	r2, r1
 8002852:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	689a      	ldr	r2, [r3, #8]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002862:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	6899      	ldr	r1, [r3, #8]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	68da      	ldr	r2, [r3, #12]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	430a      	orrs	r2, r1
 8002874:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287a:	4a58      	ldr	r2, [pc, #352]	; (80029dc <ADC_Init+0x1f4>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d022      	beq.n	80028c6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	689a      	ldr	r2, [r3, #8]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800288e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	6899      	ldr	r1, [r3, #8]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	430a      	orrs	r2, r1
 80028a0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	689a      	ldr	r2, [r3, #8]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80028b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	6899      	ldr	r1, [r3, #8]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	430a      	orrs	r2, r1
 80028c2:	609a      	str	r2, [r3, #8]
 80028c4:	e00f      	b.n	80028e6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	689a      	ldr	r2, [r3, #8]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	689a      	ldr	r2, [r3, #8]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80028e4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	689a      	ldr	r2, [r3, #8]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f022 0202 	bic.w	r2, r2, #2
 80028f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	6899      	ldr	r1, [r3, #8]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	7e1b      	ldrb	r3, [r3, #24]
 8002900:	005a      	lsls	r2, r3, #1
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	430a      	orrs	r2, r1
 8002908:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d01b      	beq.n	800294c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	685a      	ldr	r2, [r3, #4]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002922:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	685a      	ldr	r2, [r3, #4]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002932:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	6859      	ldr	r1, [r3, #4]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293e:	3b01      	subs	r3, #1
 8002940:	035a      	lsls	r2, r3, #13
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	430a      	orrs	r2, r1
 8002948:	605a      	str	r2, [r3, #4]
 800294a:	e007      	b.n	800295c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	685a      	ldr	r2, [r3, #4]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800295a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800296a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	69db      	ldr	r3, [r3, #28]
 8002976:	3b01      	subs	r3, #1
 8002978:	051a      	lsls	r2, r3, #20
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	430a      	orrs	r2, r1
 8002980:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	689a      	ldr	r2, [r3, #8]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002990:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	6899      	ldr	r1, [r3, #8]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800299e:	025a      	lsls	r2, r3, #9
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	430a      	orrs	r2, r1
 80029a6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	689a      	ldr	r2, [r3, #8]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	6899      	ldr	r1, [r3, #8]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	695b      	ldr	r3, [r3, #20]
 80029c2:	029a      	lsls	r2, r3, #10
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	430a      	orrs	r2, r1
 80029ca:	609a      	str	r2, [r3, #8]
}
 80029cc:	bf00      	nop
 80029ce:	3714      	adds	r7, #20
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr
 80029d8:	40012300 	.word	0x40012300
 80029dc:	0f000001 	.word	0x0f000001

080029e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f003 0307 	and.w	r3, r3, #7
 80029ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029f0:	4b0c      	ldr	r3, [pc, #48]	; (8002a24 <__NVIC_SetPriorityGrouping+0x44>)
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029f6:	68ba      	ldr	r2, [r7, #8]
 80029f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029fc:	4013      	ands	r3, r2
 80029fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a12:	4a04      	ldr	r2, [pc, #16]	; (8002a24 <__NVIC_SetPriorityGrouping+0x44>)
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	60d3      	str	r3, [r2, #12]
}
 8002a18:	bf00      	nop
 8002a1a:	3714      	adds	r7, #20
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr
 8002a24:	e000ed00 	.word	0xe000ed00

08002a28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a2c:	4b04      	ldr	r3, [pc, #16]	; (8002a40 <__NVIC_GetPriorityGrouping+0x18>)
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	0a1b      	lsrs	r3, r3, #8
 8002a32:	f003 0307 	and.w	r3, r3, #7
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr
 8002a40:	e000ed00 	.word	0xe000ed00

08002a44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	db0b      	blt.n	8002a6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a56:	79fb      	ldrb	r3, [r7, #7]
 8002a58:	f003 021f 	and.w	r2, r3, #31
 8002a5c:	4907      	ldr	r1, [pc, #28]	; (8002a7c <__NVIC_EnableIRQ+0x38>)
 8002a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a62:	095b      	lsrs	r3, r3, #5
 8002a64:	2001      	movs	r0, #1
 8002a66:	fa00 f202 	lsl.w	r2, r0, r2
 8002a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a6e:	bf00      	nop
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	e000e100 	.word	0xe000e100

08002a80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	4603      	mov	r3, r0
 8002a88:	6039      	str	r1, [r7, #0]
 8002a8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	db0a      	blt.n	8002aaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	b2da      	uxtb	r2, r3
 8002a98:	490c      	ldr	r1, [pc, #48]	; (8002acc <__NVIC_SetPriority+0x4c>)
 8002a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a9e:	0112      	lsls	r2, r2, #4
 8002aa0:	b2d2      	uxtb	r2, r2
 8002aa2:	440b      	add	r3, r1
 8002aa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002aa8:	e00a      	b.n	8002ac0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	b2da      	uxtb	r2, r3
 8002aae:	4908      	ldr	r1, [pc, #32]	; (8002ad0 <__NVIC_SetPriority+0x50>)
 8002ab0:	79fb      	ldrb	r3, [r7, #7]
 8002ab2:	f003 030f 	and.w	r3, r3, #15
 8002ab6:	3b04      	subs	r3, #4
 8002ab8:	0112      	lsls	r2, r2, #4
 8002aba:	b2d2      	uxtb	r2, r2
 8002abc:	440b      	add	r3, r1
 8002abe:	761a      	strb	r2, [r3, #24]
}
 8002ac0:	bf00      	nop
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr
 8002acc:	e000e100 	.word	0xe000e100
 8002ad0:	e000ed00 	.word	0xe000ed00

08002ad4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b089      	sub	sp, #36	; 0x24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f003 0307 	and.w	r3, r3, #7
 8002ae6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	f1c3 0307 	rsb	r3, r3, #7
 8002aee:	2b04      	cmp	r3, #4
 8002af0:	bf28      	it	cs
 8002af2:	2304      	movcs	r3, #4
 8002af4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	3304      	adds	r3, #4
 8002afa:	2b06      	cmp	r3, #6
 8002afc:	d902      	bls.n	8002b04 <NVIC_EncodePriority+0x30>
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	3b03      	subs	r3, #3
 8002b02:	e000      	b.n	8002b06 <NVIC_EncodePriority+0x32>
 8002b04:	2300      	movs	r3, #0
 8002b06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b12:	43da      	mvns	r2, r3
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	401a      	ands	r2, r3
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	fa01 f303 	lsl.w	r3, r1, r3
 8002b26:	43d9      	mvns	r1, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b2c:	4313      	orrs	r3, r2
         );
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3724      	adds	r7, #36	; 0x24
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
	...

08002b3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	3b01      	subs	r3, #1
 8002b48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b4c:	d301      	bcc.n	8002b52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e00f      	b.n	8002b72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b52:	4a0a      	ldr	r2, [pc, #40]	; (8002b7c <SysTick_Config+0x40>)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	3b01      	subs	r3, #1
 8002b58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b5a:	210f      	movs	r1, #15
 8002b5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b60:	f7ff ff8e 	bl	8002a80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b64:	4b05      	ldr	r3, [pc, #20]	; (8002b7c <SysTick_Config+0x40>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b6a:	4b04      	ldr	r3, [pc, #16]	; (8002b7c <SysTick_Config+0x40>)
 8002b6c:	2207      	movs	r2, #7
 8002b6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	e000e010 	.word	0xe000e010

08002b80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f7ff ff29 	bl	80029e0 <__NVIC_SetPriorityGrouping>
}
 8002b8e:	bf00      	nop
 8002b90:	3708      	adds	r7, #8
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b086      	sub	sp, #24
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	60b9      	str	r1, [r7, #8]
 8002ba0:	607a      	str	r2, [r7, #4]
 8002ba2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ba8:	f7ff ff3e 	bl	8002a28 <__NVIC_GetPriorityGrouping>
 8002bac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	68b9      	ldr	r1, [r7, #8]
 8002bb2:	6978      	ldr	r0, [r7, #20]
 8002bb4:	f7ff ff8e 	bl	8002ad4 <NVIC_EncodePriority>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bbe:	4611      	mov	r1, r2
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7ff ff5d 	bl	8002a80 <__NVIC_SetPriority>
}
 8002bc6:	bf00      	nop
 8002bc8:	3718      	adds	r7, #24
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b082      	sub	sp, #8
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7ff ff31 	bl	8002a44 <__NVIC_EnableIRQ>
}
 8002be2:	bf00      	nop
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b082      	sub	sp, #8
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f7ff ffa2 	bl	8002b3c <SysTick_Config>
 8002bf8:	4603      	mov	r3, r0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
	...

08002c04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b089      	sub	sp, #36	; 0x24
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c12:	2300      	movs	r3, #0
 8002c14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c16:	2300      	movs	r3, #0
 8002c18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	61fb      	str	r3, [r7, #28]
 8002c1e:	e159      	b.n	8002ed4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c20:	2201      	movs	r2, #1
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	fa02 f303 	lsl.w	r3, r2, r3
 8002c28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	4013      	ands	r3, r2
 8002c32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c34:	693a      	ldr	r2, [r7, #16]
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	f040 8148 	bne.w	8002ece <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f003 0303 	and.w	r3, r3, #3
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d005      	beq.n	8002c56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d130      	bne.n	8002cb8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	2203      	movs	r2, #3
 8002c62:	fa02 f303 	lsl.w	r3, r2, r3
 8002c66:	43db      	mvns	r3, r3
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	68da      	ldr	r2, [r3, #12]
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	69ba      	ldr	r2, [r7, #24]
 8002c84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	fa02 f303 	lsl.w	r3, r2, r3
 8002c94:	43db      	mvns	r3, r3
 8002c96:	69ba      	ldr	r2, [r7, #24]
 8002c98:	4013      	ands	r3, r2
 8002c9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	091b      	lsrs	r3, r3, #4
 8002ca2:	f003 0201 	and.w	r2, r3, #1
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f003 0303 	and.w	r3, r3, #3
 8002cc0:	2b03      	cmp	r3, #3
 8002cc2:	d017      	beq.n	8002cf4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	2203      	movs	r2, #3
 8002cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd4:	43db      	mvns	r3, r3
 8002cd6:	69ba      	ldr	r2, [r7, #24]
 8002cd8:	4013      	ands	r3, r2
 8002cda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	689a      	ldr	r2, [r3, #8]
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f003 0303 	and.w	r3, r3, #3
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d123      	bne.n	8002d48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	08da      	lsrs	r2, r3, #3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	3208      	adds	r2, #8
 8002d08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	f003 0307 	and.w	r3, r3, #7
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	220f      	movs	r2, #15
 8002d18:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1c:	43db      	mvns	r3, r3
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	4013      	ands	r3, r2
 8002d22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	691a      	ldr	r2, [r3, #16]
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	f003 0307 	and.w	r3, r3, #7
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	08da      	lsrs	r2, r3, #3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	3208      	adds	r2, #8
 8002d42:	69b9      	ldr	r1, [r7, #24]
 8002d44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	2203      	movs	r2, #3
 8002d54:	fa02 f303 	lsl.w	r3, r2, r3
 8002d58:	43db      	mvns	r3, r3
 8002d5a:	69ba      	ldr	r2, [r7, #24]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f003 0203 	and.w	r2, r3, #3
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	f000 80a2 	beq.w	8002ece <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	60fb      	str	r3, [r7, #12]
 8002d8e:	4b57      	ldr	r3, [pc, #348]	; (8002eec <HAL_GPIO_Init+0x2e8>)
 8002d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d92:	4a56      	ldr	r2, [pc, #344]	; (8002eec <HAL_GPIO_Init+0x2e8>)
 8002d94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d98:	6453      	str	r3, [r2, #68]	; 0x44
 8002d9a:	4b54      	ldr	r3, [pc, #336]	; (8002eec <HAL_GPIO_Init+0x2e8>)
 8002d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002da2:	60fb      	str	r3, [r7, #12]
 8002da4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002da6:	4a52      	ldr	r2, [pc, #328]	; (8002ef0 <HAL_GPIO_Init+0x2ec>)
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	089b      	lsrs	r3, r3, #2
 8002dac:	3302      	adds	r3, #2
 8002dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	f003 0303 	and.w	r3, r3, #3
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	220f      	movs	r2, #15
 8002dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc2:	43db      	mvns	r3, r3
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a49      	ldr	r2, [pc, #292]	; (8002ef4 <HAL_GPIO_Init+0x2f0>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d019      	beq.n	8002e06 <HAL_GPIO_Init+0x202>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a48      	ldr	r2, [pc, #288]	; (8002ef8 <HAL_GPIO_Init+0x2f4>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d013      	beq.n	8002e02 <HAL_GPIO_Init+0x1fe>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a47      	ldr	r2, [pc, #284]	; (8002efc <HAL_GPIO_Init+0x2f8>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d00d      	beq.n	8002dfe <HAL_GPIO_Init+0x1fa>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a46      	ldr	r2, [pc, #280]	; (8002f00 <HAL_GPIO_Init+0x2fc>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d007      	beq.n	8002dfa <HAL_GPIO_Init+0x1f6>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a45      	ldr	r2, [pc, #276]	; (8002f04 <HAL_GPIO_Init+0x300>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d101      	bne.n	8002df6 <HAL_GPIO_Init+0x1f2>
 8002df2:	2304      	movs	r3, #4
 8002df4:	e008      	b.n	8002e08 <HAL_GPIO_Init+0x204>
 8002df6:	2307      	movs	r3, #7
 8002df8:	e006      	b.n	8002e08 <HAL_GPIO_Init+0x204>
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e004      	b.n	8002e08 <HAL_GPIO_Init+0x204>
 8002dfe:	2302      	movs	r3, #2
 8002e00:	e002      	b.n	8002e08 <HAL_GPIO_Init+0x204>
 8002e02:	2301      	movs	r3, #1
 8002e04:	e000      	b.n	8002e08 <HAL_GPIO_Init+0x204>
 8002e06:	2300      	movs	r3, #0
 8002e08:	69fa      	ldr	r2, [r7, #28]
 8002e0a:	f002 0203 	and.w	r2, r2, #3
 8002e0e:	0092      	lsls	r2, r2, #2
 8002e10:	4093      	lsls	r3, r2
 8002e12:	69ba      	ldr	r2, [r7, #24]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e18:	4935      	ldr	r1, [pc, #212]	; (8002ef0 <HAL_GPIO_Init+0x2ec>)
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	089b      	lsrs	r3, r3, #2
 8002e1e:	3302      	adds	r3, #2
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e26:	4b38      	ldr	r3, [pc, #224]	; (8002f08 <HAL_GPIO_Init+0x304>)
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	43db      	mvns	r3, r3
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	4013      	ands	r3, r2
 8002e34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d003      	beq.n	8002e4a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002e42:	69ba      	ldr	r2, [r7, #24]
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e4a:	4a2f      	ldr	r2, [pc, #188]	; (8002f08 <HAL_GPIO_Init+0x304>)
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e50:	4b2d      	ldr	r3, [pc, #180]	; (8002f08 <HAL_GPIO_Init+0x304>)
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	43db      	mvns	r3, r3
 8002e5a:	69ba      	ldr	r2, [r7, #24]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d003      	beq.n	8002e74 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002e6c:	69ba      	ldr	r2, [r7, #24]
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e74:	4a24      	ldr	r2, [pc, #144]	; (8002f08 <HAL_GPIO_Init+0x304>)
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e7a:	4b23      	ldr	r3, [pc, #140]	; (8002f08 <HAL_GPIO_Init+0x304>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	43db      	mvns	r3, r3
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	4013      	ands	r3, r2
 8002e88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d003      	beq.n	8002e9e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002e96:	69ba      	ldr	r2, [r7, #24]
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e9e:	4a1a      	ldr	r2, [pc, #104]	; (8002f08 <HAL_GPIO_Init+0x304>)
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ea4:	4b18      	ldr	r3, [pc, #96]	; (8002f08 <HAL_GPIO_Init+0x304>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	43db      	mvns	r3, r3
 8002eae:	69ba      	ldr	r2, [r7, #24]
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d003      	beq.n	8002ec8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ec8:	4a0f      	ldr	r2, [pc, #60]	; (8002f08 <HAL_GPIO_Init+0x304>)
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	61fb      	str	r3, [r7, #28]
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	2b0f      	cmp	r3, #15
 8002ed8:	f67f aea2 	bls.w	8002c20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002edc:	bf00      	nop
 8002ede:	bf00      	nop
 8002ee0:	3724      	adds	r7, #36	; 0x24
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	40023800 	.word	0x40023800
 8002ef0:	40013800 	.word	0x40013800
 8002ef4:	40020000 	.word	0x40020000
 8002ef8:	40020400 	.word	0x40020400
 8002efc:	40020800 	.word	0x40020800
 8002f00:	40020c00 	.word	0x40020c00
 8002f04:	40021000 	.word	0x40021000
 8002f08:	40013c00 	.word	0x40013c00

08002f0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b085      	sub	sp, #20
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	460b      	mov	r3, r1
 8002f16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	691a      	ldr	r2, [r3, #16]
 8002f1c:	887b      	ldrh	r3, [r7, #2]
 8002f1e:	4013      	ands	r3, r2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d002      	beq.n	8002f2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f24:	2301      	movs	r3, #1
 8002f26:	73fb      	strb	r3, [r7, #15]
 8002f28:	e001      	b.n	8002f2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3714      	adds	r7, #20
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	460b      	mov	r3, r1
 8002f46:	807b      	strh	r3, [r7, #2]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f4c:	787b      	ldrb	r3, [r7, #1]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d003      	beq.n	8002f5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f52:	887a      	ldrh	r2, [r7, #2]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f58:	e003      	b.n	8002f62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f5a:	887b      	ldrh	r3, [r7, #2]
 8002f5c:	041a      	lsls	r2, r3, #16
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	619a      	str	r2, [r3, #24]
}
 8002f62:	bf00      	nop
 8002f64:	370c      	adds	r7, #12
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr

08002f6e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f6e:	b480      	push	{r7}
 8002f70:	b085      	sub	sp, #20
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
 8002f76:	460b      	mov	r3, r1
 8002f78:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f80:	887a      	ldrh	r2, [r7, #2]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	4013      	ands	r3, r2
 8002f86:	041a      	lsls	r2, r3, #16
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	43d9      	mvns	r1, r3
 8002f8c:	887b      	ldrh	r3, [r7, #2]
 8002f8e:	400b      	ands	r3, r1
 8002f90:	431a      	orrs	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	619a      	str	r2, [r3, #24]
}
 8002f96:	bf00      	nop
 8002f98:	3714      	adds	r7, #20
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
	...

08002fa4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b086      	sub	sp, #24
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d101      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e267      	b.n	8003486 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d075      	beq.n	80030ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fc2:	4b88      	ldr	r3, [pc, #544]	; (80031e4 <HAL_RCC_OscConfig+0x240>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f003 030c 	and.w	r3, r3, #12
 8002fca:	2b04      	cmp	r3, #4
 8002fcc:	d00c      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fce:	4b85      	ldr	r3, [pc, #532]	; (80031e4 <HAL_RCC_OscConfig+0x240>)
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fd6:	2b08      	cmp	r3, #8
 8002fd8:	d112      	bne.n	8003000 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fda:	4b82      	ldr	r3, [pc, #520]	; (80031e4 <HAL_RCC_OscConfig+0x240>)
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fe2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fe6:	d10b      	bne.n	8003000 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fe8:	4b7e      	ldr	r3, [pc, #504]	; (80031e4 <HAL_RCC_OscConfig+0x240>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d05b      	beq.n	80030ac <HAL_RCC_OscConfig+0x108>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d157      	bne.n	80030ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e242      	b.n	8003486 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003008:	d106      	bne.n	8003018 <HAL_RCC_OscConfig+0x74>
 800300a:	4b76      	ldr	r3, [pc, #472]	; (80031e4 <HAL_RCC_OscConfig+0x240>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a75      	ldr	r2, [pc, #468]	; (80031e4 <HAL_RCC_OscConfig+0x240>)
 8003010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003014:	6013      	str	r3, [r2, #0]
 8003016:	e01d      	b.n	8003054 <HAL_RCC_OscConfig+0xb0>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003020:	d10c      	bne.n	800303c <HAL_RCC_OscConfig+0x98>
 8003022:	4b70      	ldr	r3, [pc, #448]	; (80031e4 <HAL_RCC_OscConfig+0x240>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a6f      	ldr	r2, [pc, #444]	; (80031e4 <HAL_RCC_OscConfig+0x240>)
 8003028:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800302c:	6013      	str	r3, [r2, #0]
 800302e:	4b6d      	ldr	r3, [pc, #436]	; (80031e4 <HAL_RCC_OscConfig+0x240>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a6c      	ldr	r2, [pc, #432]	; (80031e4 <HAL_RCC_OscConfig+0x240>)
 8003034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003038:	6013      	str	r3, [r2, #0]
 800303a:	e00b      	b.n	8003054 <HAL_RCC_OscConfig+0xb0>
 800303c:	4b69      	ldr	r3, [pc, #420]	; (80031e4 <HAL_RCC_OscConfig+0x240>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a68      	ldr	r2, [pc, #416]	; (80031e4 <HAL_RCC_OscConfig+0x240>)
 8003042:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003046:	6013      	str	r3, [r2, #0]
 8003048:	4b66      	ldr	r3, [pc, #408]	; (80031e4 <HAL_RCC_OscConfig+0x240>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a65      	ldr	r2, [pc, #404]	; (80031e4 <HAL_RCC_OscConfig+0x240>)
 800304e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003052:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d013      	beq.n	8003084 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800305c:	f7ff f8d2 	bl	8002204 <HAL_GetTick>
 8003060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003062:	e008      	b.n	8003076 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003064:	f7ff f8ce 	bl	8002204 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	2b64      	cmp	r3, #100	; 0x64
 8003070:	d901      	bls.n	8003076 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e207      	b.n	8003486 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003076:	4b5b      	ldr	r3, [pc, #364]	; (80031e4 <HAL_RCC_OscConfig+0x240>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d0f0      	beq.n	8003064 <HAL_RCC_OscConfig+0xc0>
 8003082:	e014      	b.n	80030ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003084:	f7ff f8be 	bl	8002204 <HAL_GetTick>
 8003088:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800308a:	e008      	b.n	800309e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800308c:	f7ff f8ba 	bl	8002204 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b64      	cmp	r3, #100	; 0x64
 8003098:	d901      	bls.n	800309e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e1f3      	b.n	8003486 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800309e:	4b51      	ldr	r3, [pc, #324]	; (80031e4 <HAL_RCC_OscConfig+0x240>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1f0      	bne.n	800308c <HAL_RCC_OscConfig+0xe8>
 80030aa:	e000      	b.n	80030ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d063      	beq.n	8003182 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030ba:	4b4a      	ldr	r3, [pc, #296]	; (80031e4 <HAL_RCC_OscConfig+0x240>)
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f003 030c 	and.w	r3, r3, #12
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00b      	beq.n	80030de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030c6:	4b47      	ldr	r3, [pc, #284]	; (80031e4 <HAL_RCC_OscConfig+0x240>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030ce:	2b08      	cmp	r3, #8
 80030d0:	d11c      	bne.n	800310c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030d2:	4b44      	ldr	r3, [pc, #272]	; (80031e4 <HAL_RCC_OscConfig+0x240>)
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d116      	bne.n	800310c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030de:	4b41      	ldr	r3, [pc, #260]	; (80031e4 <HAL_RCC_OscConfig+0x240>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d005      	beq.n	80030f6 <HAL_RCC_OscConfig+0x152>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d001      	beq.n	80030f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e1c7      	b.n	8003486 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030f6:	4b3b      	ldr	r3, [pc, #236]	; (80031e4 <HAL_RCC_OscConfig+0x240>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	4937      	ldr	r1, [pc, #220]	; (80031e4 <HAL_RCC_OscConfig+0x240>)
 8003106:	4313      	orrs	r3, r2
 8003108:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800310a:	e03a      	b.n	8003182 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d020      	beq.n	8003156 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003114:	4b34      	ldr	r3, [pc, #208]	; (80031e8 <HAL_RCC_OscConfig+0x244>)
 8003116:	2201      	movs	r2, #1
 8003118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800311a:	f7ff f873 	bl	8002204 <HAL_GetTick>
 800311e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003120:	e008      	b.n	8003134 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003122:	f7ff f86f 	bl	8002204 <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	2b02      	cmp	r3, #2
 800312e:	d901      	bls.n	8003134 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e1a8      	b.n	8003486 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003134:	4b2b      	ldr	r3, [pc, #172]	; (80031e4 <HAL_RCC_OscConfig+0x240>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0302 	and.w	r3, r3, #2
 800313c:	2b00      	cmp	r3, #0
 800313e:	d0f0      	beq.n	8003122 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003140:	4b28      	ldr	r3, [pc, #160]	; (80031e4 <HAL_RCC_OscConfig+0x240>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	691b      	ldr	r3, [r3, #16]
 800314c:	00db      	lsls	r3, r3, #3
 800314e:	4925      	ldr	r1, [pc, #148]	; (80031e4 <HAL_RCC_OscConfig+0x240>)
 8003150:	4313      	orrs	r3, r2
 8003152:	600b      	str	r3, [r1, #0]
 8003154:	e015      	b.n	8003182 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003156:	4b24      	ldr	r3, [pc, #144]	; (80031e8 <HAL_RCC_OscConfig+0x244>)
 8003158:	2200      	movs	r2, #0
 800315a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800315c:	f7ff f852 	bl	8002204 <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003164:	f7ff f84e 	bl	8002204 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b02      	cmp	r3, #2
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e187      	b.n	8003486 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003176:	4b1b      	ldr	r3, [pc, #108]	; (80031e4 <HAL_RCC_OscConfig+0x240>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1f0      	bne.n	8003164 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0308 	and.w	r3, r3, #8
 800318a:	2b00      	cmp	r3, #0
 800318c:	d036      	beq.n	80031fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d016      	beq.n	80031c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003196:	4b15      	ldr	r3, [pc, #84]	; (80031ec <HAL_RCC_OscConfig+0x248>)
 8003198:	2201      	movs	r2, #1
 800319a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800319c:	f7ff f832 	bl	8002204 <HAL_GetTick>
 80031a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031a2:	e008      	b.n	80031b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031a4:	f7ff f82e 	bl	8002204 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e167      	b.n	8003486 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031b6:	4b0b      	ldr	r3, [pc, #44]	; (80031e4 <HAL_RCC_OscConfig+0x240>)
 80031b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d0f0      	beq.n	80031a4 <HAL_RCC_OscConfig+0x200>
 80031c2:	e01b      	b.n	80031fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031c4:	4b09      	ldr	r3, [pc, #36]	; (80031ec <HAL_RCC_OscConfig+0x248>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ca:	f7ff f81b 	bl	8002204 <HAL_GetTick>
 80031ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031d0:	e00e      	b.n	80031f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031d2:	f7ff f817 	bl	8002204 <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d907      	bls.n	80031f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	e150      	b.n	8003486 <HAL_RCC_OscConfig+0x4e2>
 80031e4:	40023800 	.word	0x40023800
 80031e8:	42470000 	.word	0x42470000
 80031ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031f0:	4b88      	ldr	r3, [pc, #544]	; (8003414 <HAL_RCC_OscConfig+0x470>)
 80031f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031f4:	f003 0302 	and.w	r3, r3, #2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d1ea      	bne.n	80031d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0304 	and.w	r3, r3, #4
 8003204:	2b00      	cmp	r3, #0
 8003206:	f000 8097 	beq.w	8003338 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800320a:	2300      	movs	r3, #0
 800320c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800320e:	4b81      	ldr	r3, [pc, #516]	; (8003414 <HAL_RCC_OscConfig+0x470>)
 8003210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d10f      	bne.n	800323a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800321a:	2300      	movs	r3, #0
 800321c:	60bb      	str	r3, [r7, #8]
 800321e:	4b7d      	ldr	r3, [pc, #500]	; (8003414 <HAL_RCC_OscConfig+0x470>)
 8003220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003222:	4a7c      	ldr	r2, [pc, #496]	; (8003414 <HAL_RCC_OscConfig+0x470>)
 8003224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003228:	6413      	str	r3, [r2, #64]	; 0x40
 800322a:	4b7a      	ldr	r3, [pc, #488]	; (8003414 <HAL_RCC_OscConfig+0x470>)
 800322c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003232:	60bb      	str	r3, [r7, #8]
 8003234:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003236:	2301      	movs	r3, #1
 8003238:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800323a:	4b77      	ldr	r3, [pc, #476]	; (8003418 <HAL_RCC_OscConfig+0x474>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003242:	2b00      	cmp	r3, #0
 8003244:	d118      	bne.n	8003278 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003246:	4b74      	ldr	r3, [pc, #464]	; (8003418 <HAL_RCC_OscConfig+0x474>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a73      	ldr	r2, [pc, #460]	; (8003418 <HAL_RCC_OscConfig+0x474>)
 800324c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003250:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003252:	f7fe ffd7 	bl	8002204 <HAL_GetTick>
 8003256:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003258:	e008      	b.n	800326c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800325a:	f7fe ffd3 	bl	8002204 <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	2b02      	cmp	r3, #2
 8003266:	d901      	bls.n	800326c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e10c      	b.n	8003486 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800326c:	4b6a      	ldr	r3, [pc, #424]	; (8003418 <HAL_RCC_OscConfig+0x474>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003274:	2b00      	cmp	r3, #0
 8003276:	d0f0      	beq.n	800325a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	2b01      	cmp	r3, #1
 800327e:	d106      	bne.n	800328e <HAL_RCC_OscConfig+0x2ea>
 8003280:	4b64      	ldr	r3, [pc, #400]	; (8003414 <HAL_RCC_OscConfig+0x470>)
 8003282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003284:	4a63      	ldr	r2, [pc, #396]	; (8003414 <HAL_RCC_OscConfig+0x470>)
 8003286:	f043 0301 	orr.w	r3, r3, #1
 800328a:	6713      	str	r3, [r2, #112]	; 0x70
 800328c:	e01c      	b.n	80032c8 <HAL_RCC_OscConfig+0x324>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	2b05      	cmp	r3, #5
 8003294:	d10c      	bne.n	80032b0 <HAL_RCC_OscConfig+0x30c>
 8003296:	4b5f      	ldr	r3, [pc, #380]	; (8003414 <HAL_RCC_OscConfig+0x470>)
 8003298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800329a:	4a5e      	ldr	r2, [pc, #376]	; (8003414 <HAL_RCC_OscConfig+0x470>)
 800329c:	f043 0304 	orr.w	r3, r3, #4
 80032a0:	6713      	str	r3, [r2, #112]	; 0x70
 80032a2:	4b5c      	ldr	r3, [pc, #368]	; (8003414 <HAL_RCC_OscConfig+0x470>)
 80032a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a6:	4a5b      	ldr	r2, [pc, #364]	; (8003414 <HAL_RCC_OscConfig+0x470>)
 80032a8:	f043 0301 	orr.w	r3, r3, #1
 80032ac:	6713      	str	r3, [r2, #112]	; 0x70
 80032ae:	e00b      	b.n	80032c8 <HAL_RCC_OscConfig+0x324>
 80032b0:	4b58      	ldr	r3, [pc, #352]	; (8003414 <HAL_RCC_OscConfig+0x470>)
 80032b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b4:	4a57      	ldr	r2, [pc, #348]	; (8003414 <HAL_RCC_OscConfig+0x470>)
 80032b6:	f023 0301 	bic.w	r3, r3, #1
 80032ba:	6713      	str	r3, [r2, #112]	; 0x70
 80032bc:	4b55      	ldr	r3, [pc, #340]	; (8003414 <HAL_RCC_OscConfig+0x470>)
 80032be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c0:	4a54      	ldr	r2, [pc, #336]	; (8003414 <HAL_RCC_OscConfig+0x470>)
 80032c2:	f023 0304 	bic.w	r3, r3, #4
 80032c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d015      	beq.n	80032fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d0:	f7fe ff98 	bl	8002204 <HAL_GetTick>
 80032d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032d6:	e00a      	b.n	80032ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032d8:	f7fe ff94 	bl	8002204 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e0cb      	b.n	8003486 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032ee:	4b49      	ldr	r3, [pc, #292]	; (8003414 <HAL_RCC_OscConfig+0x470>)
 80032f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d0ee      	beq.n	80032d8 <HAL_RCC_OscConfig+0x334>
 80032fa:	e014      	b.n	8003326 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032fc:	f7fe ff82 	bl	8002204 <HAL_GetTick>
 8003300:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003302:	e00a      	b.n	800331a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003304:	f7fe ff7e 	bl	8002204 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003312:	4293      	cmp	r3, r2
 8003314:	d901      	bls.n	800331a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e0b5      	b.n	8003486 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800331a:	4b3e      	ldr	r3, [pc, #248]	; (8003414 <HAL_RCC_OscConfig+0x470>)
 800331c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d1ee      	bne.n	8003304 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003326:	7dfb      	ldrb	r3, [r7, #23]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d105      	bne.n	8003338 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800332c:	4b39      	ldr	r3, [pc, #228]	; (8003414 <HAL_RCC_OscConfig+0x470>)
 800332e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003330:	4a38      	ldr	r2, [pc, #224]	; (8003414 <HAL_RCC_OscConfig+0x470>)
 8003332:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003336:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	2b00      	cmp	r3, #0
 800333e:	f000 80a1 	beq.w	8003484 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003342:	4b34      	ldr	r3, [pc, #208]	; (8003414 <HAL_RCC_OscConfig+0x470>)
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f003 030c 	and.w	r3, r3, #12
 800334a:	2b08      	cmp	r3, #8
 800334c:	d05c      	beq.n	8003408 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	2b02      	cmp	r3, #2
 8003354:	d141      	bne.n	80033da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003356:	4b31      	ldr	r3, [pc, #196]	; (800341c <HAL_RCC_OscConfig+0x478>)
 8003358:	2200      	movs	r2, #0
 800335a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800335c:	f7fe ff52 	bl	8002204 <HAL_GetTick>
 8003360:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003362:	e008      	b.n	8003376 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003364:	f7fe ff4e 	bl	8002204 <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	2b02      	cmp	r3, #2
 8003370:	d901      	bls.n	8003376 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e087      	b.n	8003486 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003376:	4b27      	ldr	r3, [pc, #156]	; (8003414 <HAL_RCC_OscConfig+0x470>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1f0      	bne.n	8003364 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	69da      	ldr	r2, [r3, #28]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	431a      	orrs	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003390:	019b      	lsls	r3, r3, #6
 8003392:	431a      	orrs	r2, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003398:	085b      	lsrs	r3, r3, #1
 800339a:	3b01      	subs	r3, #1
 800339c:	041b      	lsls	r3, r3, #16
 800339e:	431a      	orrs	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a4:	061b      	lsls	r3, r3, #24
 80033a6:	491b      	ldr	r1, [pc, #108]	; (8003414 <HAL_RCC_OscConfig+0x470>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033ac:	4b1b      	ldr	r3, [pc, #108]	; (800341c <HAL_RCC_OscConfig+0x478>)
 80033ae:	2201      	movs	r2, #1
 80033b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b2:	f7fe ff27 	bl	8002204 <HAL_GetTick>
 80033b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033b8:	e008      	b.n	80033cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033ba:	f7fe ff23 	bl	8002204 <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d901      	bls.n	80033cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e05c      	b.n	8003486 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033cc:	4b11      	ldr	r3, [pc, #68]	; (8003414 <HAL_RCC_OscConfig+0x470>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d0f0      	beq.n	80033ba <HAL_RCC_OscConfig+0x416>
 80033d8:	e054      	b.n	8003484 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033da:	4b10      	ldr	r3, [pc, #64]	; (800341c <HAL_RCC_OscConfig+0x478>)
 80033dc:	2200      	movs	r2, #0
 80033de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e0:	f7fe ff10 	bl	8002204 <HAL_GetTick>
 80033e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033e6:	e008      	b.n	80033fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033e8:	f7fe ff0c 	bl	8002204 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e045      	b.n	8003486 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033fa:	4b06      	ldr	r3, [pc, #24]	; (8003414 <HAL_RCC_OscConfig+0x470>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1f0      	bne.n	80033e8 <HAL_RCC_OscConfig+0x444>
 8003406:	e03d      	b.n	8003484 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d107      	bne.n	8003420 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e038      	b.n	8003486 <HAL_RCC_OscConfig+0x4e2>
 8003414:	40023800 	.word	0x40023800
 8003418:	40007000 	.word	0x40007000
 800341c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003420:	4b1b      	ldr	r3, [pc, #108]	; (8003490 <HAL_RCC_OscConfig+0x4ec>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	699b      	ldr	r3, [r3, #24]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d028      	beq.n	8003480 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003438:	429a      	cmp	r2, r3
 800343a:	d121      	bne.n	8003480 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003446:	429a      	cmp	r2, r3
 8003448:	d11a      	bne.n	8003480 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003450:	4013      	ands	r3, r2
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003456:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003458:	4293      	cmp	r3, r2
 800345a:	d111      	bne.n	8003480 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003466:	085b      	lsrs	r3, r3, #1
 8003468:	3b01      	subs	r3, #1
 800346a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800346c:	429a      	cmp	r2, r3
 800346e:	d107      	bne.n	8003480 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800347a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800347c:	429a      	cmp	r2, r3
 800347e:	d001      	beq.n	8003484 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e000      	b.n	8003486 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3718      	adds	r7, #24
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	40023800 	.word	0x40023800

08003494 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d101      	bne.n	80034a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e0cc      	b.n	8003642 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034a8:	4b68      	ldr	r3, [pc, #416]	; (800364c <HAL_RCC_ClockConfig+0x1b8>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0307 	and.w	r3, r3, #7
 80034b0:	683a      	ldr	r2, [r7, #0]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d90c      	bls.n	80034d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034b6:	4b65      	ldr	r3, [pc, #404]	; (800364c <HAL_RCC_ClockConfig+0x1b8>)
 80034b8:	683a      	ldr	r2, [r7, #0]
 80034ba:	b2d2      	uxtb	r2, r2
 80034bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034be:	4b63      	ldr	r3, [pc, #396]	; (800364c <HAL_RCC_ClockConfig+0x1b8>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0307 	and.w	r3, r3, #7
 80034c6:	683a      	ldr	r2, [r7, #0]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d001      	beq.n	80034d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e0b8      	b.n	8003642 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0302 	and.w	r3, r3, #2
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d020      	beq.n	800351e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0304 	and.w	r3, r3, #4
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d005      	beq.n	80034f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034e8:	4b59      	ldr	r3, [pc, #356]	; (8003650 <HAL_RCC_ClockConfig+0x1bc>)
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	4a58      	ldr	r2, [pc, #352]	; (8003650 <HAL_RCC_ClockConfig+0x1bc>)
 80034ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0308 	and.w	r3, r3, #8
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d005      	beq.n	800350c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003500:	4b53      	ldr	r3, [pc, #332]	; (8003650 <HAL_RCC_ClockConfig+0x1bc>)
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	4a52      	ldr	r2, [pc, #328]	; (8003650 <HAL_RCC_ClockConfig+0x1bc>)
 8003506:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800350a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800350c:	4b50      	ldr	r3, [pc, #320]	; (8003650 <HAL_RCC_ClockConfig+0x1bc>)
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	494d      	ldr	r1, [pc, #308]	; (8003650 <HAL_RCC_ClockConfig+0x1bc>)
 800351a:	4313      	orrs	r3, r2
 800351c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	2b00      	cmp	r3, #0
 8003528:	d044      	beq.n	80035b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d107      	bne.n	8003542 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003532:	4b47      	ldr	r3, [pc, #284]	; (8003650 <HAL_RCC_ClockConfig+0x1bc>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d119      	bne.n	8003572 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e07f      	b.n	8003642 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	2b02      	cmp	r3, #2
 8003548:	d003      	beq.n	8003552 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800354e:	2b03      	cmp	r3, #3
 8003550:	d107      	bne.n	8003562 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003552:	4b3f      	ldr	r3, [pc, #252]	; (8003650 <HAL_RCC_ClockConfig+0x1bc>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d109      	bne.n	8003572 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e06f      	b.n	8003642 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003562:	4b3b      	ldr	r3, [pc, #236]	; (8003650 <HAL_RCC_ClockConfig+0x1bc>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d101      	bne.n	8003572 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e067      	b.n	8003642 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003572:	4b37      	ldr	r3, [pc, #220]	; (8003650 <HAL_RCC_ClockConfig+0x1bc>)
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	f023 0203 	bic.w	r2, r3, #3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	4934      	ldr	r1, [pc, #208]	; (8003650 <HAL_RCC_ClockConfig+0x1bc>)
 8003580:	4313      	orrs	r3, r2
 8003582:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003584:	f7fe fe3e 	bl	8002204 <HAL_GetTick>
 8003588:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800358a:	e00a      	b.n	80035a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800358c:	f7fe fe3a 	bl	8002204 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	f241 3288 	movw	r2, #5000	; 0x1388
 800359a:	4293      	cmp	r3, r2
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e04f      	b.n	8003642 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035a2:	4b2b      	ldr	r3, [pc, #172]	; (8003650 <HAL_RCC_ClockConfig+0x1bc>)
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f003 020c 	and.w	r2, r3, #12
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d1eb      	bne.n	800358c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035b4:	4b25      	ldr	r3, [pc, #148]	; (800364c <HAL_RCC_ClockConfig+0x1b8>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0307 	and.w	r3, r3, #7
 80035bc:	683a      	ldr	r2, [r7, #0]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d20c      	bcs.n	80035dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035c2:	4b22      	ldr	r3, [pc, #136]	; (800364c <HAL_RCC_ClockConfig+0x1b8>)
 80035c4:	683a      	ldr	r2, [r7, #0]
 80035c6:	b2d2      	uxtb	r2, r2
 80035c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ca:	4b20      	ldr	r3, [pc, #128]	; (800364c <HAL_RCC_ClockConfig+0x1b8>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0307 	and.w	r3, r3, #7
 80035d2:	683a      	ldr	r2, [r7, #0]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d001      	beq.n	80035dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e032      	b.n	8003642 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0304 	and.w	r3, r3, #4
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d008      	beq.n	80035fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035e8:	4b19      	ldr	r3, [pc, #100]	; (8003650 <HAL_RCC_ClockConfig+0x1bc>)
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	4916      	ldr	r1, [pc, #88]	; (8003650 <HAL_RCC_ClockConfig+0x1bc>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0308 	and.w	r3, r3, #8
 8003602:	2b00      	cmp	r3, #0
 8003604:	d009      	beq.n	800361a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003606:	4b12      	ldr	r3, [pc, #72]	; (8003650 <HAL_RCC_ClockConfig+0x1bc>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	490e      	ldr	r1, [pc, #56]	; (8003650 <HAL_RCC_ClockConfig+0x1bc>)
 8003616:	4313      	orrs	r3, r2
 8003618:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800361a:	f000 f821 	bl	8003660 <HAL_RCC_GetSysClockFreq>
 800361e:	4602      	mov	r2, r0
 8003620:	4b0b      	ldr	r3, [pc, #44]	; (8003650 <HAL_RCC_ClockConfig+0x1bc>)
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	091b      	lsrs	r3, r3, #4
 8003626:	f003 030f 	and.w	r3, r3, #15
 800362a:	490a      	ldr	r1, [pc, #40]	; (8003654 <HAL_RCC_ClockConfig+0x1c0>)
 800362c:	5ccb      	ldrb	r3, [r1, r3]
 800362e:	fa22 f303 	lsr.w	r3, r2, r3
 8003632:	4a09      	ldr	r2, [pc, #36]	; (8003658 <HAL_RCC_ClockConfig+0x1c4>)
 8003634:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003636:	4b09      	ldr	r3, [pc, #36]	; (800365c <HAL_RCC_ClockConfig+0x1c8>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4618      	mov	r0, r3
 800363c:	f7fe fd9e 	bl	800217c <HAL_InitTick>

  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3710      	adds	r7, #16
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	40023c00 	.word	0x40023c00
 8003650:	40023800 	.word	0x40023800
 8003654:	080088bc 	.word	0x080088bc
 8003658:	20000004 	.word	0x20000004
 800365c:	20000008 	.word	0x20000008

08003660 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003660:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003664:	b090      	sub	sp, #64	; 0x40
 8003666:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003668:	2300      	movs	r3, #0
 800366a:	637b      	str	r3, [r7, #52]	; 0x34
 800366c:	2300      	movs	r3, #0
 800366e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003670:	2300      	movs	r3, #0
 8003672:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003674:	2300      	movs	r3, #0
 8003676:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003678:	4b59      	ldr	r3, [pc, #356]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	f003 030c 	and.w	r3, r3, #12
 8003680:	2b08      	cmp	r3, #8
 8003682:	d00d      	beq.n	80036a0 <HAL_RCC_GetSysClockFreq+0x40>
 8003684:	2b08      	cmp	r3, #8
 8003686:	f200 80a1 	bhi.w	80037cc <HAL_RCC_GetSysClockFreq+0x16c>
 800368a:	2b00      	cmp	r3, #0
 800368c:	d002      	beq.n	8003694 <HAL_RCC_GetSysClockFreq+0x34>
 800368e:	2b04      	cmp	r3, #4
 8003690:	d003      	beq.n	800369a <HAL_RCC_GetSysClockFreq+0x3a>
 8003692:	e09b      	b.n	80037cc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003694:	4b53      	ldr	r3, [pc, #332]	; (80037e4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003696:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003698:	e09b      	b.n	80037d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800369a:	4b53      	ldr	r3, [pc, #332]	; (80037e8 <HAL_RCC_GetSysClockFreq+0x188>)
 800369c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800369e:	e098      	b.n	80037d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036a0:	4b4f      	ldr	r3, [pc, #316]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036a8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036aa:	4b4d      	ldr	r3, [pc, #308]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d028      	beq.n	8003708 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036b6:	4b4a      	ldr	r3, [pc, #296]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	099b      	lsrs	r3, r3, #6
 80036bc:	2200      	movs	r2, #0
 80036be:	623b      	str	r3, [r7, #32]
 80036c0:	627a      	str	r2, [r7, #36]	; 0x24
 80036c2:	6a3b      	ldr	r3, [r7, #32]
 80036c4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80036c8:	2100      	movs	r1, #0
 80036ca:	4b47      	ldr	r3, [pc, #284]	; (80037e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80036cc:	fb03 f201 	mul.w	r2, r3, r1
 80036d0:	2300      	movs	r3, #0
 80036d2:	fb00 f303 	mul.w	r3, r0, r3
 80036d6:	4413      	add	r3, r2
 80036d8:	4a43      	ldr	r2, [pc, #268]	; (80037e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80036da:	fba0 1202 	umull	r1, r2, r0, r2
 80036de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036e0:	460a      	mov	r2, r1
 80036e2:	62ba      	str	r2, [r7, #40]	; 0x28
 80036e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036e6:	4413      	add	r3, r2
 80036e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036ec:	2200      	movs	r2, #0
 80036ee:	61bb      	str	r3, [r7, #24]
 80036f0:	61fa      	str	r2, [r7, #28]
 80036f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80036fa:	f7fd faad 	bl	8000c58 <__aeabi_uldivmod>
 80036fe:	4602      	mov	r2, r0
 8003700:	460b      	mov	r3, r1
 8003702:	4613      	mov	r3, r2
 8003704:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003706:	e053      	b.n	80037b0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003708:	4b35      	ldr	r3, [pc, #212]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	099b      	lsrs	r3, r3, #6
 800370e:	2200      	movs	r2, #0
 8003710:	613b      	str	r3, [r7, #16]
 8003712:	617a      	str	r2, [r7, #20]
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800371a:	f04f 0b00 	mov.w	fp, #0
 800371e:	4652      	mov	r2, sl
 8003720:	465b      	mov	r3, fp
 8003722:	f04f 0000 	mov.w	r0, #0
 8003726:	f04f 0100 	mov.w	r1, #0
 800372a:	0159      	lsls	r1, r3, #5
 800372c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003730:	0150      	lsls	r0, r2, #5
 8003732:	4602      	mov	r2, r0
 8003734:	460b      	mov	r3, r1
 8003736:	ebb2 080a 	subs.w	r8, r2, sl
 800373a:	eb63 090b 	sbc.w	r9, r3, fp
 800373e:	f04f 0200 	mov.w	r2, #0
 8003742:	f04f 0300 	mov.w	r3, #0
 8003746:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800374a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800374e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003752:	ebb2 0408 	subs.w	r4, r2, r8
 8003756:	eb63 0509 	sbc.w	r5, r3, r9
 800375a:	f04f 0200 	mov.w	r2, #0
 800375e:	f04f 0300 	mov.w	r3, #0
 8003762:	00eb      	lsls	r3, r5, #3
 8003764:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003768:	00e2      	lsls	r2, r4, #3
 800376a:	4614      	mov	r4, r2
 800376c:	461d      	mov	r5, r3
 800376e:	eb14 030a 	adds.w	r3, r4, sl
 8003772:	603b      	str	r3, [r7, #0]
 8003774:	eb45 030b 	adc.w	r3, r5, fp
 8003778:	607b      	str	r3, [r7, #4]
 800377a:	f04f 0200 	mov.w	r2, #0
 800377e:	f04f 0300 	mov.w	r3, #0
 8003782:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003786:	4629      	mov	r1, r5
 8003788:	028b      	lsls	r3, r1, #10
 800378a:	4621      	mov	r1, r4
 800378c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003790:	4621      	mov	r1, r4
 8003792:	028a      	lsls	r2, r1, #10
 8003794:	4610      	mov	r0, r2
 8003796:	4619      	mov	r1, r3
 8003798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800379a:	2200      	movs	r2, #0
 800379c:	60bb      	str	r3, [r7, #8]
 800379e:	60fa      	str	r2, [r7, #12]
 80037a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037a4:	f7fd fa58 	bl	8000c58 <__aeabi_uldivmod>
 80037a8:	4602      	mov	r2, r0
 80037aa:	460b      	mov	r3, r1
 80037ac:	4613      	mov	r3, r2
 80037ae:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80037b0:	4b0b      	ldr	r3, [pc, #44]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	0c1b      	lsrs	r3, r3, #16
 80037b6:	f003 0303 	and.w	r3, r3, #3
 80037ba:	3301      	adds	r3, #1
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80037c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80037c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80037ca:	e002      	b.n	80037d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037cc:	4b05      	ldr	r3, [pc, #20]	; (80037e4 <HAL_RCC_GetSysClockFreq+0x184>)
 80037ce:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80037d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3740      	adds	r7, #64	; 0x40
 80037d8:	46bd      	mov	sp, r7
 80037da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037de:	bf00      	nop
 80037e0:	40023800 	.word	0x40023800
 80037e4:	00f42400 	.word	0x00f42400
 80037e8:	017d7840 	.word	0x017d7840

080037ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037ec:	b480      	push	{r7}
 80037ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037f0:	4b03      	ldr	r3, [pc, #12]	; (8003800 <HAL_RCC_GetHCLKFreq+0x14>)
 80037f2:	681b      	ldr	r3, [r3, #0]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	20000004 	.word	0x20000004

08003804 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003808:	f7ff fff0 	bl	80037ec <HAL_RCC_GetHCLKFreq>
 800380c:	4602      	mov	r2, r0
 800380e:	4b05      	ldr	r3, [pc, #20]	; (8003824 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	0a9b      	lsrs	r3, r3, #10
 8003814:	f003 0307 	and.w	r3, r3, #7
 8003818:	4903      	ldr	r1, [pc, #12]	; (8003828 <HAL_RCC_GetPCLK1Freq+0x24>)
 800381a:	5ccb      	ldrb	r3, [r1, r3]
 800381c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003820:	4618      	mov	r0, r3
 8003822:	bd80      	pop	{r7, pc}
 8003824:	40023800 	.word	0x40023800
 8003828:	080088cc 	.word	0x080088cc

0800382c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003830:	f7ff ffdc 	bl	80037ec <HAL_RCC_GetHCLKFreq>
 8003834:	4602      	mov	r2, r0
 8003836:	4b05      	ldr	r3, [pc, #20]	; (800384c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	0b5b      	lsrs	r3, r3, #13
 800383c:	f003 0307 	and.w	r3, r3, #7
 8003840:	4903      	ldr	r1, [pc, #12]	; (8003850 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003842:	5ccb      	ldrb	r3, [r1, r3]
 8003844:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003848:	4618      	mov	r0, r3
 800384a:	bd80      	pop	{r7, pc}
 800384c:	40023800 	.word	0x40023800
 8003850:	080088cc 	.word	0x080088cc

08003854 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d101      	bne.n	8003866 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e041      	b.n	80038ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800386c:	b2db      	uxtb	r3, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d106      	bne.n	8003880 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f7fe fa1c 	bl	8001cb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2202      	movs	r2, #2
 8003884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	3304      	adds	r3, #4
 8003890:	4619      	mov	r1, r3
 8003892:	4610      	mov	r0, r2
 8003894:	f000 fcf6 	bl	8004284 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
	...

080038f4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003902:	b2db      	uxtb	r3, r3
 8003904:	2b01      	cmp	r3, #1
 8003906:	d001      	beq.n	800390c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e03c      	b.n	8003986 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2202      	movs	r2, #2
 8003910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a1e      	ldr	r2, [pc, #120]	; (8003994 <HAL_TIM_Base_Start+0xa0>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d018      	beq.n	8003950 <HAL_TIM_Base_Start+0x5c>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003926:	d013      	beq.n	8003950 <HAL_TIM_Base_Start+0x5c>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a1a      	ldr	r2, [pc, #104]	; (8003998 <HAL_TIM_Base_Start+0xa4>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d00e      	beq.n	8003950 <HAL_TIM_Base_Start+0x5c>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a19      	ldr	r2, [pc, #100]	; (800399c <HAL_TIM_Base_Start+0xa8>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d009      	beq.n	8003950 <HAL_TIM_Base_Start+0x5c>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a17      	ldr	r2, [pc, #92]	; (80039a0 <HAL_TIM_Base_Start+0xac>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d004      	beq.n	8003950 <HAL_TIM_Base_Start+0x5c>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a16      	ldr	r2, [pc, #88]	; (80039a4 <HAL_TIM_Base_Start+0xb0>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d111      	bne.n	8003974 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f003 0307 	and.w	r3, r3, #7
 800395a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2b06      	cmp	r3, #6
 8003960:	d010      	beq.n	8003984 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f042 0201 	orr.w	r2, r2, #1
 8003970:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003972:	e007      	b.n	8003984 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f042 0201 	orr.w	r2, r2, #1
 8003982:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3714      	adds	r7, #20
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop
 8003994:	40010000 	.word	0x40010000
 8003998:	40000400 	.word	0x40000400
 800399c:	40000800 	.word	0x40000800
 80039a0:	40000c00 	.word	0x40000c00
 80039a4:	40014000 	.word	0x40014000

080039a8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d101      	bne.n	80039ba <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e041      	b.n	8003a3e <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d106      	bne.n	80039d4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f7fe f992 	bl	8001cf8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2202      	movs	r2, #2
 80039d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	3304      	adds	r3, #4
 80039e4:	4619      	mov	r1, r3
 80039e6:	4610      	mov	r0, r2
 80039e8:	f000 fc4c 	bl	8004284 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3708      	adds	r7, #8
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}

08003a46 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a46:	b580      	push	{r7, lr}
 8003a48:	b082      	sub	sp, #8
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d101      	bne.n	8003a58 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e041      	b.n	8003adc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d106      	bne.n	8003a72 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f7fe f8fb 	bl	8001c68 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2202      	movs	r2, #2
 8003a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	3304      	adds	r3, #4
 8003a82:	4619      	mov	r1, r3
 8003a84:	4610      	mov	r0, r2
 8003a86:	f000 fbfd 	bl	8004284 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2201      	movs	r2, #1
 8003a96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2201      	movs	r2, #1
 8003aae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2201      	movs	r2, #1
 8003abe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2201      	movs	r2, #1
 8003ace:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3708      	adds	r7, #8
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d109      	bne.n	8003b08 <HAL_TIM_PWM_Start+0x24>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	bf14      	ite	ne
 8003b00:	2301      	movne	r3, #1
 8003b02:	2300      	moveq	r3, #0
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	e022      	b.n	8003b4e <HAL_TIM_PWM_Start+0x6a>
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	2b04      	cmp	r3, #4
 8003b0c:	d109      	bne.n	8003b22 <HAL_TIM_PWM_Start+0x3e>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	bf14      	ite	ne
 8003b1a:	2301      	movne	r3, #1
 8003b1c:	2300      	moveq	r3, #0
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	e015      	b.n	8003b4e <HAL_TIM_PWM_Start+0x6a>
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	2b08      	cmp	r3, #8
 8003b26:	d109      	bne.n	8003b3c <HAL_TIM_PWM_Start+0x58>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	bf14      	ite	ne
 8003b34:	2301      	movne	r3, #1
 8003b36:	2300      	moveq	r3, #0
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	e008      	b.n	8003b4e <HAL_TIM_PWM_Start+0x6a>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	bf14      	ite	ne
 8003b48:	2301      	movne	r3, #1
 8003b4a:	2300      	moveq	r3, #0
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d001      	beq.n	8003b56 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e068      	b.n	8003c28 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d104      	bne.n	8003b66 <HAL_TIM_PWM_Start+0x82>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2202      	movs	r2, #2
 8003b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b64:	e013      	b.n	8003b8e <HAL_TIM_PWM_Start+0xaa>
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	2b04      	cmp	r3, #4
 8003b6a:	d104      	bne.n	8003b76 <HAL_TIM_PWM_Start+0x92>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2202      	movs	r2, #2
 8003b70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b74:	e00b      	b.n	8003b8e <HAL_TIM_PWM_Start+0xaa>
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	2b08      	cmp	r3, #8
 8003b7a:	d104      	bne.n	8003b86 <HAL_TIM_PWM_Start+0xa2>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2202      	movs	r2, #2
 8003b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b84:	e003      	b.n	8003b8e <HAL_TIM_PWM_Start+0xaa>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2202      	movs	r2, #2
 8003b8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2201      	movs	r2, #1
 8003b94:	6839      	ldr	r1, [r7, #0]
 8003b96:	4618      	mov	r0, r3
 8003b98:	f000 fe1a 	bl	80047d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a23      	ldr	r2, [pc, #140]	; (8003c30 <HAL_TIM_PWM_Start+0x14c>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d107      	bne.n	8003bb6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bb4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a1d      	ldr	r2, [pc, #116]	; (8003c30 <HAL_TIM_PWM_Start+0x14c>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d018      	beq.n	8003bf2 <HAL_TIM_PWM_Start+0x10e>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bc8:	d013      	beq.n	8003bf2 <HAL_TIM_PWM_Start+0x10e>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a19      	ldr	r2, [pc, #100]	; (8003c34 <HAL_TIM_PWM_Start+0x150>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d00e      	beq.n	8003bf2 <HAL_TIM_PWM_Start+0x10e>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a17      	ldr	r2, [pc, #92]	; (8003c38 <HAL_TIM_PWM_Start+0x154>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d009      	beq.n	8003bf2 <HAL_TIM_PWM_Start+0x10e>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a16      	ldr	r2, [pc, #88]	; (8003c3c <HAL_TIM_PWM_Start+0x158>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d004      	beq.n	8003bf2 <HAL_TIM_PWM_Start+0x10e>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a14      	ldr	r2, [pc, #80]	; (8003c40 <HAL_TIM_PWM_Start+0x15c>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d111      	bne.n	8003c16 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f003 0307 	and.w	r3, r3, #7
 8003bfc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2b06      	cmp	r3, #6
 8003c02:	d010      	beq.n	8003c26 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f042 0201 	orr.w	r2, r2, #1
 8003c12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c14:	e007      	b.n	8003c26 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f042 0201 	orr.w	r2, r2, #1
 8003c24:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3710      	adds	r7, #16
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	40010000 	.word	0x40010000
 8003c34:	40000400 	.word	0x40000400
 8003c38:	40000800 	.word	0x40000800
 8003c3c:	40000c00 	.word	0x40000c00
 8003c40:	40014000 	.word	0x40014000

08003c44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d122      	bne.n	8003ca0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	f003 0302 	and.w	r3, r3, #2
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d11b      	bne.n	8003ca0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f06f 0202 	mvn.w	r2, #2
 8003c70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2201      	movs	r2, #1
 8003c76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	f003 0303 	and.w	r3, r3, #3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d003      	beq.n	8003c8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 fadd 	bl	8004246 <HAL_TIM_IC_CaptureCallback>
 8003c8c:	e005      	b.n	8003c9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 facf 	bl	8004232 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f000 fae0 	bl	800425a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	f003 0304 	and.w	r3, r3, #4
 8003caa:	2b04      	cmp	r3, #4
 8003cac:	d122      	bne.n	8003cf4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	f003 0304 	and.w	r3, r3, #4
 8003cb8:	2b04      	cmp	r3, #4
 8003cba:	d11b      	bne.n	8003cf4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f06f 0204 	mvn.w	r2, #4
 8003cc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2202      	movs	r2, #2
 8003cca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	699b      	ldr	r3, [r3, #24]
 8003cd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d003      	beq.n	8003ce2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 fab3 	bl	8004246 <HAL_TIM_IC_CaptureCallback>
 8003ce0:	e005      	b.n	8003cee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 faa5 	bl	8004232 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f000 fab6 	bl	800425a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	f003 0308 	and.w	r3, r3, #8
 8003cfe:	2b08      	cmp	r3, #8
 8003d00:	d122      	bne.n	8003d48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	f003 0308 	and.w	r3, r3, #8
 8003d0c:	2b08      	cmp	r3, #8
 8003d0e:	d11b      	bne.n	8003d48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f06f 0208 	mvn.w	r2, #8
 8003d18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2204      	movs	r2, #4
 8003d1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	69db      	ldr	r3, [r3, #28]
 8003d26:	f003 0303 	and.w	r3, r3, #3
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d003      	beq.n	8003d36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 fa89 	bl	8004246 <HAL_TIM_IC_CaptureCallback>
 8003d34:	e005      	b.n	8003d42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 fa7b 	bl	8004232 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f000 fa8c 	bl	800425a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	f003 0310 	and.w	r3, r3, #16
 8003d52:	2b10      	cmp	r3, #16
 8003d54:	d122      	bne.n	8003d9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	f003 0310 	and.w	r3, r3, #16
 8003d60:	2b10      	cmp	r3, #16
 8003d62:	d11b      	bne.n	8003d9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f06f 0210 	mvn.w	r2, #16
 8003d6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2208      	movs	r2, #8
 8003d72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	69db      	ldr	r3, [r3, #28]
 8003d7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d003      	beq.n	8003d8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 fa5f 	bl	8004246 <HAL_TIM_IC_CaptureCallback>
 8003d88:	e005      	b.n	8003d96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 fa51 	bl	8004232 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f000 fa62 	bl	800425a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d10e      	bne.n	8003dc8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	f003 0301 	and.w	r3, r3, #1
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d107      	bne.n	8003dc8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f06f 0201 	mvn.w	r2, #1
 8003dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 fa2b 	bl	800421e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dd2:	2b80      	cmp	r3, #128	; 0x80
 8003dd4:	d10e      	bne.n	8003df4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003de0:	2b80      	cmp	r3, #128	; 0x80
 8003de2:	d107      	bne.n	8003df4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003dec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 fe34 	bl	8004a5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dfe:	2b40      	cmp	r3, #64	; 0x40
 8003e00:	d10e      	bne.n	8003e20 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e0c:	2b40      	cmp	r3, #64	; 0x40
 8003e0e:	d107      	bne.n	8003e20 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 fa27 	bl	800426e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	f003 0320 	and.w	r3, r3, #32
 8003e2a:	2b20      	cmp	r3, #32
 8003e2c:	d10e      	bne.n	8003e4c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	f003 0320 	and.w	r3, r3, #32
 8003e38:	2b20      	cmp	r3, #32
 8003e3a:	d107      	bne.n	8003e4c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f06f 0220 	mvn.w	r2, #32
 8003e44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f7fd fc24 	bl	8001694 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e4c:	bf00      	nop
 8003e4e:	3708      	adds	r7, #8
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b086      	sub	sp, #24
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e60:	2300      	movs	r3, #0
 8003e62:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d101      	bne.n	8003e72 <HAL_TIM_OC_ConfigChannel+0x1e>
 8003e6e:	2302      	movs	r3, #2
 8003e70:	e048      	b.n	8003f04 <HAL_TIM_OC_ConfigChannel+0xb0>
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2201      	movs	r2, #1
 8003e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2b0c      	cmp	r3, #12
 8003e7e:	d839      	bhi.n	8003ef4 <HAL_TIM_OC_ConfigChannel+0xa0>
 8003e80:	a201      	add	r2, pc, #4	; (adr r2, 8003e88 <HAL_TIM_OC_ConfigChannel+0x34>)
 8003e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e86:	bf00      	nop
 8003e88:	08003ebd 	.word	0x08003ebd
 8003e8c:	08003ef5 	.word	0x08003ef5
 8003e90:	08003ef5 	.word	0x08003ef5
 8003e94:	08003ef5 	.word	0x08003ef5
 8003e98:	08003ecb 	.word	0x08003ecb
 8003e9c:	08003ef5 	.word	0x08003ef5
 8003ea0:	08003ef5 	.word	0x08003ef5
 8003ea4:	08003ef5 	.word	0x08003ef5
 8003ea8:	08003ed9 	.word	0x08003ed9
 8003eac:	08003ef5 	.word	0x08003ef5
 8003eb0:	08003ef5 	.word	0x08003ef5
 8003eb4:	08003ef5 	.word	0x08003ef5
 8003eb8:	08003ee7 	.word	0x08003ee7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68b9      	ldr	r1, [r7, #8]
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f000 fa5e 	bl	8004384 <TIM_OC1_SetConfig>
      break;
 8003ec8:	e017      	b.n	8003efa <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68b9      	ldr	r1, [r7, #8]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f000 fabd 	bl	8004450 <TIM_OC2_SetConfig>
      break;
 8003ed6:	e010      	b.n	8003efa <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68b9      	ldr	r1, [r7, #8]
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f000 fb22 	bl	8004528 <TIM_OC3_SetConfig>
      break;
 8003ee4:	e009      	b.n	8003efa <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68b9      	ldr	r1, [r7, #8]
 8003eec:	4618      	mov	r0, r3
 8003eee:	f000 fb85 	bl	80045fc <TIM_OC4_SetConfig>
      break;
 8003ef2:	e002      	b.n	8003efa <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	75fb      	strb	r3, [r7, #23]
      break;
 8003ef8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f02:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3718      	adds	r7, #24
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b086      	sub	sp, #24
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d101      	bne.n	8003f2a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003f26:	2302      	movs	r3, #2
 8003f28:	e0ae      	b.n	8004088 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2b0c      	cmp	r3, #12
 8003f36:	f200 809f 	bhi.w	8004078 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003f3a:	a201      	add	r2, pc, #4	; (adr r2, 8003f40 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f40:	08003f75 	.word	0x08003f75
 8003f44:	08004079 	.word	0x08004079
 8003f48:	08004079 	.word	0x08004079
 8003f4c:	08004079 	.word	0x08004079
 8003f50:	08003fb5 	.word	0x08003fb5
 8003f54:	08004079 	.word	0x08004079
 8003f58:	08004079 	.word	0x08004079
 8003f5c:	08004079 	.word	0x08004079
 8003f60:	08003ff7 	.word	0x08003ff7
 8003f64:	08004079 	.word	0x08004079
 8003f68:	08004079 	.word	0x08004079
 8003f6c:	08004079 	.word	0x08004079
 8003f70:	08004037 	.word	0x08004037
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68b9      	ldr	r1, [r7, #8]
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f000 fa02 	bl	8004384 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	699a      	ldr	r2, [r3, #24]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f042 0208 	orr.w	r2, r2, #8
 8003f8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	699a      	ldr	r2, [r3, #24]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f022 0204 	bic.w	r2, r2, #4
 8003f9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	6999      	ldr	r1, [r3, #24]
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	691a      	ldr	r2, [r3, #16]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	619a      	str	r2, [r3, #24]
      break;
 8003fb2:	e064      	b.n	800407e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68b9      	ldr	r1, [r7, #8]
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f000 fa48 	bl	8004450 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	699a      	ldr	r2, [r3, #24]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	699a      	ldr	r2, [r3, #24]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	6999      	ldr	r1, [r3, #24]
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	021a      	lsls	r2, r3, #8
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	430a      	orrs	r2, r1
 8003ff2:	619a      	str	r2, [r3, #24]
      break;
 8003ff4:	e043      	b.n	800407e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68b9      	ldr	r1, [r7, #8]
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f000 fa93 	bl	8004528 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	69da      	ldr	r2, [r3, #28]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f042 0208 	orr.w	r2, r2, #8
 8004010:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	69da      	ldr	r2, [r3, #28]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f022 0204 	bic.w	r2, r2, #4
 8004020:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	69d9      	ldr	r1, [r3, #28]
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	691a      	ldr	r2, [r3, #16]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	430a      	orrs	r2, r1
 8004032:	61da      	str	r2, [r3, #28]
      break;
 8004034:	e023      	b.n	800407e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68b9      	ldr	r1, [r7, #8]
 800403c:	4618      	mov	r0, r3
 800403e:	f000 fadd 	bl	80045fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	69da      	ldr	r2, [r3, #28]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004050:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	69da      	ldr	r2, [r3, #28]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004060:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	69d9      	ldr	r1, [r3, #28]
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	021a      	lsls	r2, r3, #8
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	430a      	orrs	r2, r1
 8004074:	61da      	str	r2, [r3, #28]
      break;
 8004076:	e002      	b.n	800407e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	75fb      	strb	r3, [r7, #23]
      break;
 800407c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004086:	7dfb      	ldrb	r3, [r7, #23]
}
 8004088:	4618      	mov	r0, r3
 800408a:	3718      	adds	r7, #24
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800409a:	2300      	movs	r3, #0
 800409c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d101      	bne.n	80040ac <HAL_TIM_ConfigClockSource+0x1c>
 80040a8:	2302      	movs	r3, #2
 80040aa:	e0b4      	b.n	8004216 <HAL_TIM_ConfigClockSource+0x186>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2202      	movs	r2, #2
 80040b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80040ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68ba      	ldr	r2, [r7, #8]
 80040da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040e4:	d03e      	beq.n	8004164 <HAL_TIM_ConfigClockSource+0xd4>
 80040e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040ea:	f200 8087 	bhi.w	80041fc <HAL_TIM_ConfigClockSource+0x16c>
 80040ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040f2:	f000 8086 	beq.w	8004202 <HAL_TIM_ConfigClockSource+0x172>
 80040f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040fa:	d87f      	bhi.n	80041fc <HAL_TIM_ConfigClockSource+0x16c>
 80040fc:	2b70      	cmp	r3, #112	; 0x70
 80040fe:	d01a      	beq.n	8004136 <HAL_TIM_ConfigClockSource+0xa6>
 8004100:	2b70      	cmp	r3, #112	; 0x70
 8004102:	d87b      	bhi.n	80041fc <HAL_TIM_ConfigClockSource+0x16c>
 8004104:	2b60      	cmp	r3, #96	; 0x60
 8004106:	d050      	beq.n	80041aa <HAL_TIM_ConfigClockSource+0x11a>
 8004108:	2b60      	cmp	r3, #96	; 0x60
 800410a:	d877      	bhi.n	80041fc <HAL_TIM_ConfigClockSource+0x16c>
 800410c:	2b50      	cmp	r3, #80	; 0x50
 800410e:	d03c      	beq.n	800418a <HAL_TIM_ConfigClockSource+0xfa>
 8004110:	2b50      	cmp	r3, #80	; 0x50
 8004112:	d873      	bhi.n	80041fc <HAL_TIM_ConfigClockSource+0x16c>
 8004114:	2b40      	cmp	r3, #64	; 0x40
 8004116:	d058      	beq.n	80041ca <HAL_TIM_ConfigClockSource+0x13a>
 8004118:	2b40      	cmp	r3, #64	; 0x40
 800411a:	d86f      	bhi.n	80041fc <HAL_TIM_ConfigClockSource+0x16c>
 800411c:	2b30      	cmp	r3, #48	; 0x30
 800411e:	d064      	beq.n	80041ea <HAL_TIM_ConfigClockSource+0x15a>
 8004120:	2b30      	cmp	r3, #48	; 0x30
 8004122:	d86b      	bhi.n	80041fc <HAL_TIM_ConfigClockSource+0x16c>
 8004124:	2b20      	cmp	r3, #32
 8004126:	d060      	beq.n	80041ea <HAL_TIM_ConfigClockSource+0x15a>
 8004128:	2b20      	cmp	r3, #32
 800412a:	d867      	bhi.n	80041fc <HAL_TIM_ConfigClockSource+0x16c>
 800412c:	2b00      	cmp	r3, #0
 800412e:	d05c      	beq.n	80041ea <HAL_TIM_ConfigClockSource+0x15a>
 8004130:	2b10      	cmp	r3, #16
 8004132:	d05a      	beq.n	80041ea <HAL_TIM_ConfigClockSource+0x15a>
 8004134:	e062      	b.n	80041fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6818      	ldr	r0, [r3, #0]
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	6899      	ldr	r1, [r3, #8]
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	685a      	ldr	r2, [r3, #4]
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	f000 fb23 	bl	8004790 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004158:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	68ba      	ldr	r2, [r7, #8]
 8004160:	609a      	str	r2, [r3, #8]
      break;
 8004162:	e04f      	b.n	8004204 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6818      	ldr	r0, [r3, #0]
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	6899      	ldr	r1, [r3, #8]
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	685a      	ldr	r2, [r3, #4]
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	f000 fb0c 	bl	8004790 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	689a      	ldr	r2, [r3, #8]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004186:	609a      	str	r2, [r3, #8]
      break;
 8004188:	e03c      	b.n	8004204 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6818      	ldr	r0, [r3, #0]
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	6859      	ldr	r1, [r3, #4]
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	461a      	mov	r2, r3
 8004198:	f000 fa80 	bl	800469c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2150      	movs	r1, #80	; 0x50
 80041a2:	4618      	mov	r0, r3
 80041a4:	f000 fad9 	bl	800475a <TIM_ITRx_SetConfig>
      break;
 80041a8:	e02c      	b.n	8004204 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6818      	ldr	r0, [r3, #0]
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	6859      	ldr	r1, [r3, #4]
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	461a      	mov	r2, r3
 80041b8:	f000 fa9f 	bl	80046fa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2160      	movs	r1, #96	; 0x60
 80041c2:	4618      	mov	r0, r3
 80041c4:	f000 fac9 	bl	800475a <TIM_ITRx_SetConfig>
      break;
 80041c8:	e01c      	b.n	8004204 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6818      	ldr	r0, [r3, #0]
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	6859      	ldr	r1, [r3, #4]
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	461a      	mov	r2, r3
 80041d8:	f000 fa60 	bl	800469c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2140      	movs	r1, #64	; 0x40
 80041e2:	4618      	mov	r0, r3
 80041e4:	f000 fab9 	bl	800475a <TIM_ITRx_SetConfig>
      break;
 80041e8:	e00c      	b.n	8004204 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4619      	mov	r1, r3
 80041f4:	4610      	mov	r0, r2
 80041f6:	f000 fab0 	bl	800475a <TIM_ITRx_SetConfig>
      break;
 80041fa:	e003      	b.n	8004204 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	73fb      	strb	r3, [r7, #15]
      break;
 8004200:	e000      	b.n	8004204 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004202:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004214:	7bfb      	ldrb	r3, [r7, #15]
}
 8004216:	4618      	mov	r0, r3
 8004218:	3710      	adds	r7, #16
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}

0800421e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800421e:	b480      	push	{r7}
 8004220:	b083      	sub	sp, #12
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004226:	bf00      	nop
 8004228:	370c      	adds	r7, #12
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr

08004232 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004232:	b480      	push	{r7}
 8004234:	b083      	sub	sp, #12
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800423a:	bf00      	nop
 800423c:	370c      	adds	r7, #12
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr

08004246 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004246:	b480      	push	{r7}
 8004248:	b083      	sub	sp, #12
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800424e:	bf00      	nop
 8004250:	370c      	adds	r7, #12
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr

0800425a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800425a:	b480      	push	{r7}
 800425c:	b083      	sub	sp, #12
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004262:	bf00      	nop
 8004264:	370c      	adds	r7, #12
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr

0800426e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800426e:	b480      	push	{r7}
 8004270:	b083      	sub	sp, #12
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004276:	bf00      	nop
 8004278:	370c      	adds	r7, #12
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
	...

08004284 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a34      	ldr	r2, [pc, #208]	; (8004368 <TIM_Base_SetConfig+0xe4>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d00f      	beq.n	80042bc <TIM_Base_SetConfig+0x38>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042a2:	d00b      	beq.n	80042bc <TIM_Base_SetConfig+0x38>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a31      	ldr	r2, [pc, #196]	; (800436c <TIM_Base_SetConfig+0xe8>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d007      	beq.n	80042bc <TIM_Base_SetConfig+0x38>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a30      	ldr	r2, [pc, #192]	; (8004370 <TIM_Base_SetConfig+0xec>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d003      	beq.n	80042bc <TIM_Base_SetConfig+0x38>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a2f      	ldr	r2, [pc, #188]	; (8004374 <TIM_Base_SetConfig+0xf0>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d108      	bne.n	80042ce <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	68fa      	ldr	r2, [r7, #12]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a25      	ldr	r2, [pc, #148]	; (8004368 <TIM_Base_SetConfig+0xe4>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d01b      	beq.n	800430e <TIM_Base_SetConfig+0x8a>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042dc:	d017      	beq.n	800430e <TIM_Base_SetConfig+0x8a>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a22      	ldr	r2, [pc, #136]	; (800436c <TIM_Base_SetConfig+0xe8>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d013      	beq.n	800430e <TIM_Base_SetConfig+0x8a>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a21      	ldr	r2, [pc, #132]	; (8004370 <TIM_Base_SetConfig+0xec>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d00f      	beq.n	800430e <TIM_Base_SetConfig+0x8a>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a20      	ldr	r2, [pc, #128]	; (8004374 <TIM_Base_SetConfig+0xf0>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d00b      	beq.n	800430e <TIM_Base_SetConfig+0x8a>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a1f      	ldr	r2, [pc, #124]	; (8004378 <TIM_Base_SetConfig+0xf4>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d007      	beq.n	800430e <TIM_Base_SetConfig+0x8a>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a1e      	ldr	r2, [pc, #120]	; (800437c <TIM_Base_SetConfig+0xf8>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d003      	beq.n	800430e <TIM_Base_SetConfig+0x8a>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a1d      	ldr	r2, [pc, #116]	; (8004380 <TIM_Base_SetConfig+0xfc>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d108      	bne.n	8004320 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004314:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	68fa      	ldr	r2, [r7, #12]
 800431c:	4313      	orrs	r3, r2
 800431e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	4313      	orrs	r3, r2
 800432c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	689a      	ldr	r2, [r3, #8]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a08      	ldr	r2, [pc, #32]	; (8004368 <TIM_Base_SetConfig+0xe4>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d103      	bne.n	8004354 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	691a      	ldr	r2, [r3, #16]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	615a      	str	r2, [r3, #20]
}
 800435a:	bf00      	nop
 800435c:	3714      	adds	r7, #20
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop
 8004368:	40010000 	.word	0x40010000
 800436c:	40000400 	.word	0x40000400
 8004370:	40000800 	.word	0x40000800
 8004374:	40000c00 	.word	0x40000c00
 8004378:	40014000 	.word	0x40014000
 800437c:	40014400 	.word	0x40014400
 8004380:	40014800 	.word	0x40014800

08004384 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004384:	b480      	push	{r7}
 8004386:	b087      	sub	sp, #28
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a1b      	ldr	r3, [r3, #32]
 8004392:	f023 0201 	bic.w	r2, r3, #1
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a1b      	ldr	r3, [r3, #32]
 800439e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	699b      	ldr	r3, [r3, #24]
 80043aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f023 0303 	bic.w	r3, r3, #3
 80043ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	f023 0302 	bic.w	r3, r3, #2
 80043cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	697a      	ldr	r2, [r7, #20]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4a1c      	ldr	r2, [pc, #112]	; (800444c <TIM_OC1_SetConfig+0xc8>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d10c      	bne.n	80043fa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	f023 0308 	bic.w	r3, r3, #8
 80043e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	697a      	ldr	r2, [r7, #20]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	f023 0304 	bic.w	r3, r3, #4
 80043f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a13      	ldr	r2, [pc, #76]	; (800444c <TIM_OC1_SetConfig+0xc8>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d111      	bne.n	8004426 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004408:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004410:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	695b      	ldr	r3, [r3, #20]
 8004416:	693a      	ldr	r2, [r7, #16]
 8004418:	4313      	orrs	r3, r2
 800441a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	699b      	ldr	r3, [r3, #24]
 8004420:	693a      	ldr	r2, [r7, #16]
 8004422:	4313      	orrs	r3, r2
 8004424:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	693a      	ldr	r2, [r7, #16]
 800442a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	68fa      	ldr	r2, [r7, #12]
 8004430:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	685a      	ldr	r2, [r3, #4]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	697a      	ldr	r2, [r7, #20]
 800443e:	621a      	str	r2, [r3, #32]
}
 8004440:	bf00      	nop
 8004442:	371c      	adds	r7, #28
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr
 800444c:	40010000 	.word	0x40010000

08004450 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004450:	b480      	push	{r7}
 8004452:	b087      	sub	sp, #28
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a1b      	ldr	r3, [r3, #32]
 800445e:	f023 0210 	bic.w	r2, r3, #16
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a1b      	ldr	r3, [r3, #32]
 800446a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800447e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004486:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	021b      	lsls	r3, r3, #8
 800448e:	68fa      	ldr	r2, [r7, #12]
 8004490:	4313      	orrs	r3, r2
 8004492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	f023 0320 	bic.w	r3, r3, #32
 800449a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	011b      	lsls	r3, r3, #4
 80044a2:	697a      	ldr	r2, [r7, #20]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	4a1e      	ldr	r2, [pc, #120]	; (8004524 <TIM_OC2_SetConfig+0xd4>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d10d      	bne.n	80044cc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	011b      	lsls	r3, r3, #4
 80044be:	697a      	ldr	r2, [r7, #20]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4a15      	ldr	r2, [pc, #84]	; (8004524 <TIM_OC2_SetConfig+0xd4>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d113      	bne.n	80044fc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80044da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80044e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	695b      	ldr	r3, [r3, #20]
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	693a      	ldr	r2, [r7, #16]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	693a      	ldr	r2, [r7, #16]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	693a      	ldr	r2, [r7, #16]
 8004500:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	685a      	ldr	r2, [r3, #4]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	697a      	ldr	r2, [r7, #20]
 8004514:	621a      	str	r2, [r3, #32]
}
 8004516:	bf00      	nop
 8004518:	371c      	adds	r7, #28
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	40010000 	.word	0x40010000

08004528 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004528:	b480      	push	{r7}
 800452a:	b087      	sub	sp, #28
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a1b      	ldr	r3, [r3, #32]
 8004536:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a1b      	ldr	r3, [r3, #32]
 8004542:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	69db      	ldr	r3, [r3, #28]
 800454e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004556:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f023 0303 	bic.w	r3, r3, #3
 800455e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	4313      	orrs	r3, r2
 8004568:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004570:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	021b      	lsls	r3, r3, #8
 8004578:	697a      	ldr	r2, [r7, #20]
 800457a:	4313      	orrs	r3, r2
 800457c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a1d      	ldr	r2, [pc, #116]	; (80045f8 <TIM_OC3_SetConfig+0xd0>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d10d      	bne.n	80045a2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800458c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	021b      	lsls	r3, r3, #8
 8004594:	697a      	ldr	r2, [r7, #20]
 8004596:	4313      	orrs	r3, r2
 8004598:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a14      	ldr	r2, [pc, #80]	; (80045f8 <TIM_OC3_SetConfig+0xd0>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d113      	bne.n	80045d2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	011b      	lsls	r3, r3, #4
 80045c0:	693a      	ldr	r2, [r7, #16]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	011b      	lsls	r3, r3, #4
 80045cc:	693a      	ldr	r2, [r7, #16]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	693a      	ldr	r2, [r7, #16]
 80045d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	685a      	ldr	r2, [r3, #4]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	697a      	ldr	r2, [r7, #20]
 80045ea:	621a      	str	r2, [r3, #32]
}
 80045ec:	bf00      	nop
 80045ee:	371c      	adds	r7, #28
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr
 80045f8:	40010000 	.word	0x40010000

080045fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b087      	sub	sp, #28
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a1b      	ldr	r3, [r3, #32]
 800460a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a1b      	ldr	r3, [r3, #32]
 8004616:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	69db      	ldr	r3, [r3, #28]
 8004622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800462a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004632:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	021b      	lsls	r3, r3, #8
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	4313      	orrs	r3, r2
 800463e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004646:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	031b      	lsls	r3, r3, #12
 800464e:	693a      	ldr	r2, [r7, #16]
 8004650:	4313      	orrs	r3, r2
 8004652:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	4a10      	ldr	r2, [pc, #64]	; (8004698 <TIM_OC4_SetConfig+0x9c>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d109      	bne.n	8004670 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004662:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	695b      	ldr	r3, [r3, #20]
 8004668:	019b      	lsls	r3, r3, #6
 800466a:	697a      	ldr	r2, [r7, #20]
 800466c:	4313      	orrs	r3, r2
 800466e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	697a      	ldr	r2, [r7, #20]
 8004674:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	68fa      	ldr	r2, [r7, #12]
 800467a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	685a      	ldr	r2, [r3, #4]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	693a      	ldr	r2, [r7, #16]
 8004688:	621a      	str	r2, [r3, #32]
}
 800468a:	bf00      	nop
 800468c:	371c      	adds	r7, #28
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	40010000 	.word	0x40010000

0800469c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800469c:	b480      	push	{r7}
 800469e:	b087      	sub	sp, #28
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6a1b      	ldr	r3, [r3, #32]
 80046ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6a1b      	ldr	r3, [r3, #32]
 80046b2:	f023 0201 	bic.w	r2, r3, #1
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	699b      	ldr	r3, [r3, #24]
 80046be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	011b      	lsls	r3, r3, #4
 80046cc:	693a      	ldr	r2, [r7, #16]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	f023 030a 	bic.w	r3, r3, #10
 80046d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046da:	697a      	ldr	r2, [r7, #20]
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	4313      	orrs	r3, r2
 80046e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	697a      	ldr	r2, [r7, #20]
 80046ec:	621a      	str	r2, [r3, #32]
}
 80046ee:	bf00      	nop
 80046f0:	371c      	adds	r7, #28
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr

080046fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046fa:	b480      	push	{r7}
 80046fc:	b087      	sub	sp, #28
 80046fe:	af00      	add	r7, sp, #0
 8004700:	60f8      	str	r0, [r7, #12]
 8004702:	60b9      	str	r1, [r7, #8]
 8004704:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6a1b      	ldr	r3, [r3, #32]
 800470a:	f023 0210 	bic.w	r2, r3, #16
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6a1b      	ldr	r3, [r3, #32]
 800471c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004724:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	031b      	lsls	r3, r3, #12
 800472a:	697a      	ldr	r2, [r7, #20]
 800472c:	4313      	orrs	r3, r2
 800472e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004736:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	011b      	lsls	r3, r3, #4
 800473c:	693a      	ldr	r2, [r7, #16]
 800473e:	4313      	orrs	r3, r2
 8004740:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	697a      	ldr	r2, [r7, #20]
 8004746:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	621a      	str	r2, [r3, #32]
}
 800474e:	bf00      	nop
 8004750:	371c      	adds	r7, #28
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr

0800475a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800475a:	b480      	push	{r7}
 800475c:	b085      	sub	sp, #20
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
 8004762:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004770:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004772:	683a      	ldr	r2, [r7, #0]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	4313      	orrs	r3, r2
 8004778:	f043 0307 	orr.w	r3, r3, #7
 800477c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	68fa      	ldr	r2, [r7, #12]
 8004782:	609a      	str	r2, [r3, #8]
}
 8004784:	bf00      	nop
 8004786:	3714      	adds	r7, #20
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004790:	b480      	push	{r7}
 8004792:	b087      	sub	sp, #28
 8004794:	af00      	add	r7, sp, #0
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	60b9      	str	r1, [r7, #8]
 800479a:	607a      	str	r2, [r7, #4]
 800479c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	021a      	lsls	r2, r3, #8
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	431a      	orrs	r2, r3
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	697a      	ldr	r2, [r7, #20]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	697a      	ldr	r2, [r7, #20]
 80047c2:	609a      	str	r2, [r3, #8]
}
 80047c4:	bf00      	nop
 80047c6:	371c      	adds	r7, #28
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b087      	sub	sp, #28
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	60b9      	str	r1, [r7, #8]
 80047da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	f003 031f 	and.w	r3, r3, #31
 80047e2:	2201      	movs	r2, #1
 80047e4:	fa02 f303 	lsl.w	r3, r2, r3
 80047e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6a1a      	ldr	r2, [r3, #32]
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	43db      	mvns	r3, r3
 80047f2:	401a      	ands	r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6a1a      	ldr	r2, [r3, #32]
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	f003 031f 	and.w	r3, r3, #31
 8004802:	6879      	ldr	r1, [r7, #4]
 8004804:	fa01 f303 	lsl.w	r3, r1, r3
 8004808:	431a      	orrs	r2, r3
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	621a      	str	r2, [r3, #32]
}
 800480e:	bf00      	nop
 8004810:	371c      	adds	r7, #28
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr

0800481a <HAL_TIMEx_ConfigCommutEvent_IT>:
  *            @arg TIM_COMMUTATION_SOFTWARE:  Commutation source is set by software using the COMG bit
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigCommutEvent_IT(TIM_HandleTypeDef *htim, uint32_t  InputTrigger,
                                                 uint32_t  CommutationSource)
{
 800481a:	b480      	push	{r7}
 800481c:	b085      	sub	sp, #20
 800481e:	af00      	add	r7, sp, #0
 8004820:	60f8      	str	r0, [r7, #12]
 8004822:	60b9      	str	r1, [r7, #8]
 8004824:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_COMMUTATION_EVENT_INSTANCE(htim->Instance));
  assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));

  __HAL_LOCK(htim);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800482c:	2b01      	cmp	r3, #1
 800482e:	d101      	bne.n	8004834 <HAL_TIMEx_ConfigCommutEvent_IT+0x1a>
 8004830:	2302      	movs	r3, #2
 8004832:	e04c      	b.n	80048ce <HAL_TIMEx_ConfigCommutEvent_IT+0xb4>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d008      	beq.n	8004854 <HAL_TIMEx_ConfigCommutEvent_IT+0x3a>
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	2b10      	cmp	r3, #16
 8004846:	d005      	beq.n	8004854 <HAL_TIMEx_ConfigCommutEvent_IT+0x3a>
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	2b20      	cmp	r3, #32
 800484c:	d002      	beq.n	8004854 <HAL_TIMEx_ConfigCommutEvent_IT+0x3a>
      (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	2b30      	cmp	r3, #48	; 0x30
 8004852:	d10f      	bne.n	8004874 <HAL_TIMEx_ConfigCommutEvent_IT+0x5a>
  {
    /* Select the Input trigger */
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	689a      	ldr	r2, [r3, #8]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004862:	609a      	str	r2, [r3, #8]
    htim->Instance->SMCR |= InputTrigger;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	6899      	ldr	r1, [r3, #8]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68ba      	ldr	r2, [r7, #8]
 8004870:	430a      	orrs	r2, r1
 8004872:	609a      	str	r2, [r3, #8]
  }

  /* Select the Capture Compare preload feature */
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	685a      	ldr	r2, [r3, #4]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f042 0201 	orr.w	r2, r2, #1
 8004882:	605a      	str	r2, [r3, #4]
  /* Select the Commutation event source */
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	685a      	ldr	r2, [r3, #4]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f022 0204 	bic.w	r2, r2, #4
 8004892:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= CommutationSource;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	6859      	ldr	r1, [r3, #4]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	430a      	orrs	r2, r1
 80048a2:	605a      	str	r2, [r3, #4]

  /* Disable Commutation DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_COM);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68da      	ldr	r2, [r3, #12]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048b2:	60da      	str	r2, [r3, #12]

  /* Enable the Commutation Interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_COM);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68da      	ldr	r2, [r3, #12]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f042 0220 	orr.w	r2, r2, #32
 80048c2:	60da      	str	r2, [r3, #12]

  __HAL_UNLOCK(htim);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3714      	adds	r7, #20
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
	...

080048dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d101      	bne.n	80048f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048f0:	2302      	movs	r3, #2
 80048f2:	e050      	b.n	8004996 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2202      	movs	r2, #2
 8004900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800491a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	4313      	orrs	r3, r2
 8004924:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68fa      	ldr	r2, [r7, #12]
 800492c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a1c      	ldr	r2, [pc, #112]	; (80049a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d018      	beq.n	800496a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004940:	d013      	beq.n	800496a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a18      	ldr	r2, [pc, #96]	; (80049a8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d00e      	beq.n	800496a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a16      	ldr	r2, [pc, #88]	; (80049ac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d009      	beq.n	800496a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a15      	ldr	r2, [pc, #84]	; (80049b0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d004      	beq.n	800496a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a13      	ldr	r2, [pc, #76]	; (80049b4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d10c      	bne.n	8004984 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004970:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	68ba      	ldr	r2, [r7, #8]
 8004978:	4313      	orrs	r3, r2
 800497a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68ba      	ldr	r2, [r7, #8]
 8004982:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3714      	adds	r7, #20
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	40010000 	.word	0x40010000
 80049a8:	40000400 	.word	0x40000400
 80049ac:	40000800 	.word	0x40000800
 80049b0:	40000c00 	.word	0x40000c00
 80049b4:	40014000 	.word	0x40014000

080049b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b085      	sub	sp, #20
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80049c2:	2300      	movs	r3, #0
 80049c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d101      	bne.n	80049d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80049d0:	2302      	movs	r3, #2
 80049d2:	e03d      	b.n	8004a50 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	695b      	ldr	r3, [r3, #20]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	69db      	ldr	r3, [r3, #28]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a4e:	2300      	movs	r3, #0
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3714      	adds	r7, #20
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a64:	bf00      	nop
 8004a66:	370c      	adds	r7, #12
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b082      	sub	sp, #8
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d101      	bne.n	8004a82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e03f      	b.n	8004b02 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d106      	bne.n	8004a9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f7fd f9d0 	bl	8001e3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2224      	movs	r2, #36	; 0x24
 8004aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68da      	ldr	r2, [r3, #12]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ab2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f000 f929 	bl	8004d0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	691a      	ldr	r2, [r3, #16]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ac8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	695a      	ldr	r2, [r3, #20]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ad8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68da      	ldr	r2, [r3, #12]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ae8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2220      	movs	r2, #32
 8004af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2220      	movs	r2, #32
 8004afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3708      	adds	r7, #8
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}

08004b0a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b0a:	b580      	push	{r7, lr}
 8004b0c:	b08a      	sub	sp, #40	; 0x28
 8004b0e:	af02      	add	r7, sp, #8
 8004b10:	60f8      	str	r0, [r7, #12]
 8004b12:	60b9      	str	r1, [r7, #8]
 8004b14:	603b      	str	r3, [r7, #0]
 8004b16:	4613      	mov	r3, r2
 8004b18:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	2b20      	cmp	r3, #32
 8004b28:	d17c      	bne.n	8004c24 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d002      	beq.n	8004b36 <HAL_UART_Transmit+0x2c>
 8004b30:	88fb      	ldrh	r3, [r7, #6]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d101      	bne.n	8004b3a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e075      	b.n	8004c26 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d101      	bne.n	8004b48 <HAL_UART_Transmit+0x3e>
 8004b44:	2302      	movs	r3, #2
 8004b46:	e06e      	b.n	8004c26 <HAL_UART_Transmit+0x11c>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2200      	movs	r2, #0
 8004b54:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2221      	movs	r2, #33	; 0x21
 8004b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b5e:	f7fd fb51 	bl	8002204 <HAL_GetTick>
 8004b62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	88fa      	ldrh	r2, [r7, #6]
 8004b68:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	88fa      	ldrh	r2, [r7, #6]
 8004b6e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b78:	d108      	bne.n	8004b8c <HAL_UART_Transmit+0x82>
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d104      	bne.n	8004b8c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004b82:	2300      	movs	r3, #0
 8004b84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	61bb      	str	r3, [r7, #24]
 8004b8a:	e003      	b.n	8004b94 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b90:	2300      	movs	r3, #0
 8004b92:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004b9c:	e02a      	b.n	8004bf4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	9300      	str	r3, [sp, #0]
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	2180      	movs	r1, #128	; 0x80
 8004ba8:	68f8      	ldr	r0, [r7, #12]
 8004baa:	f000 f840 	bl	8004c2e <UART_WaitOnFlagUntilTimeout>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d001      	beq.n	8004bb8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e036      	b.n	8004c26 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004bb8:	69fb      	ldr	r3, [r7, #28]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d10b      	bne.n	8004bd6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	881b      	ldrh	r3, [r3, #0]
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bcc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	3302      	adds	r3, #2
 8004bd2:	61bb      	str	r3, [r7, #24]
 8004bd4:	e007      	b.n	8004be6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	781a      	ldrb	r2, [r3, #0]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	3301      	adds	r3, #1
 8004be4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	3b01      	subs	r3, #1
 8004bee:	b29a      	uxth	r2, r3
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1cf      	bne.n	8004b9e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	9300      	str	r3, [sp, #0]
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	2200      	movs	r2, #0
 8004c06:	2140      	movs	r1, #64	; 0x40
 8004c08:	68f8      	ldr	r0, [r7, #12]
 8004c0a:	f000 f810 	bl	8004c2e <UART_WaitOnFlagUntilTimeout>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d001      	beq.n	8004c18 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	e006      	b.n	8004c26 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2220      	movs	r2, #32
 8004c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004c20:	2300      	movs	r3, #0
 8004c22:	e000      	b.n	8004c26 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004c24:	2302      	movs	r3, #2
  }
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3720      	adds	r7, #32
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}

08004c2e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004c2e:	b580      	push	{r7, lr}
 8004c30:	b090      	sub	sp, #64	; 0x40
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	60f8      	str	r0, [r7, #12]
 8004c36:	60b9      	str	r1, [r7, #8]
 8004c38:	603b      	str	r3, [r7, #0]
 8004c3a:	4613      	mov	r3, r2
 8004c3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c3e:	e050      	b.n	8004ce2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c46:	d04c      	beq.n	8004ce2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004c48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d007      	beq.n	8004c5e <UART_WaitOnFlagUntilTimeout+0x30>
 8004c4e:	f7fd fad9 	bl	8002204 <HAL_GetTick>
 8004c52:	4602      	mov	r2, r0
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d241      	bcs.n	8004ce2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	330c      	adds	r3, #12
 8004c64:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c68:	e853 3f00 	ldrex	r3, [r3]
 8004c6c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c70:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	330c      	adds	r3, #12
 8004c7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c7e:	637a      	str	r2, [r7, #52]	; 0x34
 8004c80:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c82:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c86:	e841 2300 	strex	r3, r2, [r1]
 8004c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1e5      	bne.n	8004c5e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	3314      	adds	r3, #20
 8004c98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	e853 3f00 	ldrex	r3, [r3]
 8004ca0:	613b      	str	r3, [r7, #16]
   return(result);
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	f023 0301 	bic.w	r3, r3, #1
 8004ca8:	63bb      	str	r3, [r7, #56]	; 0x38
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	3314      	adds	r3, #20
 8004cb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004cb2:	623a      	str	r2, [r7, #32]
 8004cb4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb6:	69f9      	ldr	r1, [r7, #28]
 8004cb8:	6a3a      	ldr	r2, [r7, #32]
 8004cba:	e841 2300 	strex	r3, r2, [r1]
 8004cbe:	61bb      	str	r3, [r7, #24]
   return(result);
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d1e5      	bne.n	8004c92 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2220      	movs	r2, #32
 8004cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2220      	movs	r2, #32
 8004cd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e00f      	b.n	8004d02 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	4013      	ands	r3, r2
 8004cec:	68ba      	ldr	r2, [r7, #8]
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	bf0c      	ite	eq
 8004cf2:	2301      	moveq	r3, #1
 8004cf4:	2300      	movne	r3, #0
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	79fb      	ldrb	r3, [r7, #7]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d09f      	beq.n	8004c40 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3740      	adds	r7, #64	; 0x40
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
	...

08004d0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d10:	b0c0      	sub	sp, #256	; 0x100
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	691b      	ldr	r3, [r3, #16]
 8004d20:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d28:	68d9      	ldr	r1, [r3, #12]
 8004d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	ea40 0301 	orr.w	r3, r0, r1
 8004d34:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d3a:	689a      	ldr	r2, [r3, #8]
 8004d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	431a      	orrs	r2, r3
 8004d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d48:	695b      	ldr	r3, [r3, #20]
 8004d4a:	431a      	orrs	r2, r3
 8004d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d50:	69db      	ldr	r3, [r3, #28]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004d64:	f021 010c 	bic.w	r1, r1, #12
 8004d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004d72:	430b      	orrs	r3, r1
 8004d74:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	695b      	ldr	r3, [r3, #20]
 8004d7e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d86:	6999      	ldr	r1, [r3, #24]
 8004d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	ea40 0301 	orr.w	r3, r0, r1
 8004d92:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	4b8f      	ldr	r3, [pc, #572]	; (8004fd8 <UART_SetConfig+0x2cc>)
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d005      	beq.n	8004dac <UART_SetConfig+0xa0>
 8004da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	4b8d      	ldr	r3, [pc, #564]	; (8004fdc <UART_SetConfig+0x2d0>)
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d104      	bne.n	8004db6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004dac:	f7fe fd3e 	bl	800382c <HAL_RCC_GetPCLK2Freq>
 8004db0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004db4:	e003      	b.n	8004dbe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004db6:	f7fe fd25 	bl	8003804 <HAL_RCC_GetPCLK1Freq>
 8004dba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dc2:	69db      	ldr	r3, [r3, #28]
 8004dc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dc8:	f040 810c 	bne.w	8004fe4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004dcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004dd6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004dda:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004dde:	4622      	mov	r2, r4
 8004de0:	462b      	mov	r3, r5
 8004de2:	1891      	adds	r1, r2, r2
 8004de4:	65b9      	str	r1, [r7, #88]	; 0x58
 8004de6:	415b      	adcs	r3, r3
 8004de8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004dea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004dee:	4621      	mov	r1, r4
 8004df0:	eb12 0801 	adds.w	r8, r2, r1
 8004df4:	4629      	mov	r1, r5
 8004df6:	eb43 0901 	adc.w	r9, r3, r1
 8004dfa:	f04f 0200 	mov.w	r2, #0
 8004dfe:	f04f 0300 	mov.w	r3, #0
 8004e02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e0e:	4690      	mov	r8, r2
 8004e10:	4699      	mov	r9, r3
 8004e12:	4623      	mov	r3, r4
 8004e14:	eb18 0303 	adds.w	r3, r8, r3
 8004e18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004e1c:	462b      	mov	r3, r5
 8004e1e:	eb49 0303 	adc.w	r3, r9, r3
 8004e22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004e26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004e32:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004e36:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004e3a:	460b      	mov	r3, r1
 8004e3c:	18db      	adds	r3, r3, r3
 8004e3e:	653b      	str	r3, [r7, #80]	; 0x50
 8004e40:	4613      	mov	r3, r2
 8004e42:	eb42 0303 	adc.w	r3, r2, r3
 8004e46:	657b      	str	r3, [r7, #84]	; 0x54
 8004e48:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004e4c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004e50:	f7fb ff02 	bl	8000c58 <__aeabi_uldivmod>
 8004e54:	4602      	mov	r2, r0
 8004e56:	460b      	mov	r3, r1
 8004e58:	4b61      	ldr	r3, [pc, #388]	; (8004fe0 <UART_SetConfig+0x2d4>)
 8004e5a:	fba3 2302 	umull	r2, r3, r3, r2
 8004e5e:	095b      	lsrs	r3, r3, #5
 8004e60:	011c      	lsls	r4, r3, #4
 8004e62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e66:	2200      	movs	r2, #0
 8004e68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e6c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004e70:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004e74:	4642      	mov	r2, r8
 8004e76:	464b      	mov	r3, r9
 8004e78:	1891      	adds	r1, r2, r2
 8004e7a:	64b9      	str	r1, [r7, #72]	; 0x48
 8004e7c:	415b      	adcs	r3, r3
 8004e7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e80:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004e84:	4641      	mov	r1, r8
 8004e86:	eb12 0a01 	adds.w	sl, r2, r1
 8004e8a:	4649      	mov	r1, r9
 8004e8c:	eb43 0b01 	adc.w	fp, r3, r1
 8004e90:	f04f 0200 	mov.w	r2, #0
 8004e94:	f04f 0300 	mov.w	r3, #0
 8004e98:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004e9c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004ea0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ea4:	4692      	mov	sl, r2
 8004ea6:	469b      	mov	fp, r3
 8004ea8:	4643      	mov	r3, r8
 8004eaa:	eb1a 0303 	adds.w	r3, sl, r3
 8004eae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004eb2:	464b      	mov	r3, r9
 8004eb4:	eb4b 0303 	adc.w	r3, fp, r3
 8004eb8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ec8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004ecc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004ed0:	460b      	mov	r3, r1
 8004ed2:	18db      	adds	r3, r3, r3
 8004ed4:	643b      	str	r3, [r7, #64]	; 0x40
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	eb42 0303 	adc.w	r3, r2, r3
 8004edc:	647b      	str	r3, [r7, #68]	; 0x44
 8004ede:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004ee2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004ee6:	f7fb feb7 	bl	8000c58 <__aeabi_uldivmod>
 8004eea:	4602      	mov	r2, r0
 8004eec:	460b      	mov	r3, r1
 8004eee:	4611      	mov	r1, r2
 8004ef0:	4b3b      	ldr	r3, [pc, #236]	; (8004fe0 <UART_SetConfig+0x2d4>)
 8004ef2:	fba3 2301 	umull	r2, r3, r3, r1
 8004ef6:	095b      	lsrs	r3, r3, #5
 8004ef8:	2264      	movs	r2, #100	; 0x64
 8004efa:	fb02 f303 	mul.w	r3, r2, r3
 8004efe:	1acb      	subs	r3, r1, r3
 8004f00:	00db      	lsls	r3, r3, #3
 8004f02:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004f06:	4b36      	ldr	r3, [pc, #216]	; (8004fe0 <UART_SetConfig+0x2d4>)
 8004f08:	fba3 2302 	umull	r2, r3, r3, r2
 8004f0c:	095b      	lsrs	r3, r3, #5
 8004f0e:	005b      	lsls	r3, r3, #1
 8004f10:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004f14:	441c      	add	r4, r3
 8004f16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f20:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004f24:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004f28:	4642      	mov	r2, r8
 8004f2a:	464b      	mov	r3, r9
 8004f2c:	1891      	adds	r1, r2, r2
 8004f2e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004f30:	415b      	adcs	r3, r3
 8004f32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f34:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004f38:	4641      	mov	r1, r8
 8004f3a:	1851      	adds	r1, r2, r1
 8004f3c:	6339      	str	r1, [r7, #48]	; 0x30
 8004f3e:	4649      	mov	r1, r9
 8004f40:	414b      	adcs	r3, r1
 8004f42:	637b      	str	r3, [r7, #52]	; 0x34
 8004f44:	f04f 0200 	mov.w	r2, #0
 8004f48:	f04f 0300 	mov.w	r3, #0
 8004f4c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004f50:	4659      	mov	r1, fp
 8004f52:	00cb      	lsls	r3, r1, #3
 8004f54:	4651      	mov	r1, sl
 8004f56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f5a:	4651      	mov	r1, sl
 8004f5c:	00ca      	lsls	r2, r1, #3
 8004f5e:	4610      	mov	r0, r2
 8004f60:	4619      	mov	r1, r3
 8004f62:	4603      	mov	r3, r0
 8004f64:	4642      	mov	r2, r8
 8004f66:	189b      	adds	r3, r3, r2
 8004f68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f6c:	464b      	mov	r3, r9
 8004f6e:	460a      	mov	r2, r1
 8004f70:	eb42 0303 	adc.w	r3, r2, r3
 8004f74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004f84:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004f88:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004f8c:	460b      	mov	r3, r1
 8004f8e:	18db      	adds	r3, r3, r3
 8004f90:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f92:	4613      	mov	r3, r2
 8004f94:	eb42 0303 	adc.w	r3, r2, r3
 8004f98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f9e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004fa2:	f7fb fe59 	bl	8000c58 <__aeabi_uldivmod>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	460b      	mov	r3, r1
 8004faa:	4b0d      	ldr	r3, [pc, #52]	; (8004fe0 <UART_SetConfig+0x2d4>)
 8004fac:	fba3 1302 	umull	r1, r3, r3, r2
 8004fb0:	095b      	lsrs	r3, r3, #5
 8004fb2:	2164      	movs	r1, #100	; 0x64
 8004fb4:	fb01 f303 	mul.w	r3, r1, r3
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	00db      	lsls	r3, r3, #3
 8004fbc:	3332      	adds	r3, #50	; 0x32
 8004fbe:	4a08      	ldr	r2, [pc, #32]	; (8004fe0 <UART_SetConfig+0x2d4>)
 8004fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8004fc4:	095b      	lsrs	r3, r3, #5
 8004fc6:	f003 0207 	and.w	r2, r3, #7
 8004fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4422      	add	r2, r4
 8004fd2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004fd4:	e105      	b.n	80051e2 <UART_SetConfig+0x4d6>
 8004fd6:	bf00      	nop
 8004fd8:	40011000 	.word	0x40011000
 8004fdc:	40011400 	.word	0x40011400
 8004fe0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004fe4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004fee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004ff2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004ff6:	4642      	mov	r2, r8
 8004ff8:	464b      	mov	r3, r9
 8004ffa:	1891      	adds	r1, r2, r2
 8004ffc:	6239      	str	r1, [r7, #32]
 8004ffe:	415b      	adcs	r3, r3
 8005000:	627b      	str	r3, [r7, #36]	; 0x24
 8005002:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005006:	4641      	mov	r1, r8
 8005008:	1854      	adds	r4, r2, r1
 800500a:	4649      	mov	r1, r9
 800500c:	eb43 0501 	adc.w	r5, r3, r1
 8005010:	f04f 0200 	mov.w	r2, #0
 8005014:	f04f 0300 	mov.w	r3, #0
 8005018:	00eb      	lsls	r3, r5, #3
 800501a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800501e:	00e2      	lsls	r2, r4, #3
 8005020:	4614      	mov	r4, r2
 8005022:	461d      	mov	r5, r3
 8005024:	4643      	mov	r3, r8
 8005026:	18e3      	adds	r3, r4, r3
 8005028:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800502c:	464b      	mov	r3, r9
 800502e:	eb45 0303 	adc.w	r3, r5, r3
 8005032:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005042:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005046:	f04f 0200 	mov.w	r2, #0
 800504a:	f04f 0300 	mov.w	r3, #0
 800504e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005052:	4629      	mov	r1, r5
 8005054:	008b      	lsls	r3, r1, #2
 8005056:	4621      	mov	r1, r4
 8005058:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800505c:	4621      	mov	r1, r4
 800505e:	008a      	lsls	r2, r1, #2
 8005060:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005064:	f7fb fdf8 	bl	8000c58 <__aeabi_uldivmod>
 8005068:	4602      	mov	r2, r0
 800506a:	460b      	mov	r3, r1
 800506c:	4b60      	ldr	r3, [pc, #384]	; (80051f0 <UART_SetConfig+0x4e4>)
 800506e:	fba3 2302 	umull	r2, r3, r3, r2
 8005072:	095b      	lsrs	r3, r3, #5
 8005074:	011c      	lsls	r4, r3, #4
 8005076:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800507a:	2200      	movs	r2, #0
 800507c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005080:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005084:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005088:	4642      	mov	r2, r8
 800508a:	464b      	mov	r3, r9
 800508c:	1891      	adds	r1, r2, r2
 800508e:	61b9      	str	r1, [r7, #24]
 8005090:	415b      	adcs	r3, r3
 8005092:	61fb      	str	r3, [r7, #28]
 8005094:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005098:	4641      	mov	r1, r8
 800509a:	1851      	adds	r1, r2, r1
 800509c:	6139      	str	r1, [r7, #16]
 800509e:	4649      	mov	r1, r9
 80050a0:	414b      	adcs	r3, r1
 80050a2:	617b      	str	r3, [r7, #20]
 80050a4:	f04f 0200 	mov.w	r2, #0
 80050a8:	f04f 0300 	mov.w	r3, #0
 80050ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80050b0:	4659      	mov	r1, fp
 80050b2:	00cb      	lsls	r3, r1, #3
 80050b4:	4651      	mov	r1, sl
 80050b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050ba:	4651      	mov	r1, sl
 80050bc:	00ca      	lsls	r2, r1, #3
 80050be:	4610      	mov	r0, r2
 80050c0:	4619      	mov	r1, r3
 80050c2:	4603      	mov	r3, r0
 80050c4:	4642      	mov	r2, r8
 80050c6:	189b      	adds	r3, r3, r2
 80050c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80050cc:	464b      	mov	r3, r9
 80050ce:	460a      	mov	r2, r1
 80050d0:	eb42 0303 	adc.w	r3, r2, r3
 80050d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80050d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	2200      	movs	r2, #0
 80050e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80050e2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80050e4:	f04f 0200 	mov.w	r2, #0
 80050e8:	f04f 0300 	mov.w	r3, #0
 80050ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80050f0:	4649      	mov	r1, r9
 80050f2:	008b      	lsls	r3, r1, #2
 80050f4:	4641      	mov	r1, r8
 80050f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050fa:	4641      	mov	r1, r8
 80050fc:	008a      	lsls	r2, r1, #2
 80050fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005102:	f7fb fda9 	bl	8000c58 <__aeabi_uldivmod>
 8005106:	4602      	mov	r2, r0
 8005108:	460b      	mov	r3, r1
 800510a:	4b39      	ldr	r3, [pc, #228]	; (80051f0 <UART_SetConfig+0x4e4>)
 800510c:	fba3 1302 	umull	r1, r3, r3, r2
 8005110:	095b      	lsrs	r3, r3, #5
 8005112:	2164      	movs	r1, #100	; 0x64
 8005114:	fb01 f303 	mul.w	r3, r1, r3
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	011b      	lsls	r3, r3, #4
 800511c:	3332      	adds	r3, #50	; 0x32
 800511e:	4a34      	ldr	r2, [pc, #208]	; (80051f0 <UART_SetConfig+0x4e4>)
 8005120:	fba2 2303 	umull	r2, r3, r2, r3
 8005124:	095b      	lsrs	r3, r3, #5
 8005126:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800512a:	441c      	add	r4, r3
 800512c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005130:	2200      	movs	r2, #0
 8005132:	673b      	str	r3, [r7, #112]	; 0x70
 8005134:	677a      	str	r2, [r7, #116]	; 0x74
 8005136:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800513a:	4642      	mov	r2, r8
 800513c:	464b      	mov	r3, r9
 800513e:	1891      	adds	r1, r2, r2
 8005140:	60b9      	str	r1, [r7, #8]
 8005142:	415b      	adcs	r3, r3
 8005144:	60fb      	str	r3, [r7, #12]
 8005146:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800514a:	4641      	mov	r1, r8
 800514c:	1851      	adds	r1, r2, r1
 800514e:	6039      	str	r1, [r7, #0]
 8005150:	4649      	mov	r1, r9
 8005152:	414b      	adcs	r3, r1
 8005154:	607b      	str	r3, [r7, #4]
 8005156:	f04f 0200 	mov.w	r2, #0
 800515a:	f04f 0300 	mov.w	r3, #0
 800515e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005162:	4659      	mov	r1, fp
 8005164:	00cb      	lsls	r3, r1, #3
 8005166:	4651      	mov	r1, sl
 8005168:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800516c:	4651      	mov	r1, sl
 800516e:	00ca      	lsls	r2, r1, #3
 8005170:	4610      	mov	r0, r2
 8005172:	4619      	mov	r1, r3
 8005174:	4603      	mov	r3, r0
 8005176:	4642      	mov	r2, r8
 8005178:	189b      	adds	r3, r3, r2
 800517a:	66bb      	str	r3, [r7, #104]	; 0x68
 800517c:	464b      	mov	r3, r9
 800517e:	460a      	mov	r2, r1
 8005180:	eb42 0303 	adc.w	r3, r2, r3
 8005184:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	663b      	str	r3, [r7, #96]	; 0x60
 8005190:	667a      	str	r2, [r7, #100]	; 0x64
 8005192:	f04f 0200 	mov.w	r2, #0
 8005196:	f04f 0300 	mov.w	r3, #0
 800519a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800519e:	4649      	mov	r1, r9
 80051a0:	008b      	lsls	r3, r1, #2
 80051a2:	4641      	mov	r1, r8
 80051a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051a8:	4641      	mov	r1, r8
 80051aa:	008a      	lsls	r2, r1, #2
 80051ac:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80051b0:	f7fb fd52 	bl	8000c58 <__aeabi_uldivmod>
 80051b4:	4602      	mov	r2, r0
 80051b6:	460b      	mov	r3, r1
 80051b8:	4b0d      	ldr	r3, [pc, #52]	; (80051f0 <UART_SetConfig+0x4e4>)
 80051ba:	fba3 1302 	umull	r1, r3, r3, r2
 80051be:	095b      	lsrs	r3, r3, #5
 80051c0:	2164      	movs	r1, #100	; 0x64
 80051c2:	fb01 f303 	mul.w	r3, r1, r3
 80051c6:	1ad3      	subs	r3, r2, r3
 80051c8:	011b      	lsls	r3, r3, #4
 80051ca:	3332      	adds	r3, #50	; 0x32
 80051cc:	4a08      	ldr	r2, [pc, #32]	; (80051f0 <UART_SetConfig+0x4e4>)
 80051ce:	fba2 2303 	umull	r2, r3, r2, r3
 80051d2:	095b      	lsrs	r3, r3, #5
 80051d4:	f003 020f 	and.w	r2, r3, #15
 80051d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4422      	add	r2, r4
 80051e0:	609a      	str	r2, [r3, #8]
}
 80051e2:	bf00      	nop
 80051e4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80051e8:	46bd      	mov	sp, r7
 80051ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051ee:	bf00      	nop
 80051f0:	51eb851f 	.word	0x51eb851f

080051f4 <__errno>:
 80051f4:	4b01      	ldr	r3, [pc, #4]	; (80051fc <__errno+0x8>)
 80051f6:	6818      	ldr	r0, [r3, #0]
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	20000010 	.word	0x20000010

08005200 <__libc_init_array>:
 8005200:	b570      	push	{r4, r5, r6, lr}
 8005202:	4d0d      	ldr	r5, [pc, #52]	; (8005238 <__libc_init_array+0x38>)
 8005204:	4c0d      	ldr	r4, [pc, #52]	; (800523c <__libc_init_array+0x3c>)
 8005206:	1b64      	subs	r4, r4, r5
 8005208:	10a4      	asrs	r4, r4, #2
 800520a:	2600      	movs	r6, #0
 800520c:	42a6      	cmp	r6, r4
 800520e:	d109      	bne.n	8005224 <__libc_init_array+0x24>
 8005210:	4d0b      	ldr	r5, [pc, #44]	; (8005240 <__libc_init_array+0x40>)
 8005212:	4c0c      	ldr	r4, [pc, #48]	; (8005244 <__libc_init_array+0x44>)
 8005214:	f003 fb1e 	bl	8008854 <_init>
 8005218:	1b64      	subs	r4, r4, r5
 800521a:	10a4      	asrs	r4, r4, #2
 800521c:	2600      	movs	r6, #0
 800521e:	42a6      	cmp	r6, r4
 8005220:	d105      	bne.n	800522e <__libc_init_array+0x2e>
 8005222:	bd70      	pop	{r4, r5, r6, pc}
 8005224:	f855 3b04 	ldr.w	r3, [r5], #4
 8005228:	4798      	blx	r3
 800522a:	3601      	adds	r6, #1
 800522c:	e7ee      	b.n	800520c <__libc_init_array+0xc>
 800522e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005232:	4798      	blx	r3
 8005234:	3601      	adds	r6, #1
 8005236:	e7f2      	b.n	800521e <__libc_init_array+0x1e>
 8005238:	08009084 	.word	0x08009084
 800523c:	08009084 	.word	0x08009084
 8005240:	08009084 	.word	0x08009084
 8005244:	08009088 	.word	0x08009088

08005248 <memset>:
 8005248:	4402      	add	r2, r0
 800524a:	4603      	mov	r3, r0
 800524c:	4293      	cmp	r3, r2
 800524e:	d100      	bne.n	8005252 <memset+0xa>
 8005250:	4770      	bx	lr
 8005252:	f803 1b01 	strb.w	r1, [r3], #1
 8005256:	e7f9      	b.n	800524c <memset+0x4>

08005258 <__cvt>:
 8005258:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800525c:	ec55 4b10 	vmov	r4, r5, d0
 8005260:	2d00      	cmp	r5, #0
 8005262:	460e      	mov	r6, r1
 8005264:	4619      	mov	r1, r3
 8005266:	462b      	mov	r3, r5
 8005268:	bfbb      	ittet	lt
 800526a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800526e:	461d      	movlt	r5, r3
 8005270:	2300      	movge	r3, #0
 8005272:	232d      	movlt	r3, #45	; 0x2d
 8005274:	700b      	strb	r3, [r1, #0]
 8005276:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005278:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800527c:	4691      	mov	r9, r2
 800527e:	f023 0820 	bic.w	r8, r3, #32
 8005282:	bfbc      	itt	lt
 8005284:	4622      	movlt	r2, r4
 8005286:	4614      	movlt	r4, r2
 8005288:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800528c:	d005      	beq.n	800529a <__cvt+0x42>
 800528e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005292:	d100      	bne.n	8005296 <__cvt+0x3e>
 8005294:	3601      	adds	r6, #1
 8005296:	2102      	movs	r1, #2
 8005298:	e000      	b.n	800529c <__cvt+0x44>
 800529a:	2103      	movs	r1, #3
 800529c:	ab03      	add	r3, sp, #12
 800529e:	9301      	str	r3, [sp, #4]
 80052a0:	ab02      	add	r3, sp, #8
 80052a2:	9300      	str	r3, [sp, #0]
 80052a4:	ec45 4b10 	vmov	d0, r4, r5
 80052a8:	4653      	mov	r3, sl
 80052aa:	4632      	mov	r2, r6
 80052ac:	f000 fe18 	bl	8005ee0 <_dtoa_r>
 80052b0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80052b4:	4607      	mov	r7, r0
 80052b6:	d102      	bne.n	80052be <__cvt+0x66>
 80052b8:	f019 0f01 	tst.w	r9, #1
 80052bc:	d022      	beq.n	8005304 <__cvt+0xac>
 80052be:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80052c2:	eb07 0906 	add.w	r9, r7, r6
 80052c6:	d110      	bne.n	80052ea <__cvt+0x92>
 80052c8:	783b      	ldrb	r3, [r7, #0]
 80052ca:	2b30      	cmp	r3, #48	; 0x30
 80052cc:	d10a      	bne.n	80052e4 <__cvt+0x8c>
 80052ce:	2200      	movs	r2, #0
 80052d0:	2300      	movs	r3, #0
 80052d2:	4620      	mov	r0, r4
 80052d4:	4629      	mov	r1, r5
 80052d6:	f7fb fbff 	bl	8000ad8 <__aeabi_dcmpeq>
 80052da:	b918      	cbnz	r0, 80052e4 <__cvt+0x8c>
 80052dc:	f1c6 0601 	rsb	r6, r6, #1
 80052e0:	f8ca 6000 	str.w	r6, [sl]
 80052e4:	f8da 3000 	ldr.w	r3, [sl]
 80052e8:	4499      	add	r9, r3
 80052ea:	2200      	movs	r2, #0
 80052ec:	2300      	movs	r3, #0
 80052ee:	4620      	mov	r0, r4
 80052f0:	4629      	mov	r1, r5
 80052f2:	f7fb fbf1 	bl	8000ad8 <__aeabi_dcmpeq>
 80052f6:	b108      	cbz	r0, 80052fc <__cvt+0xa4>
 80052f8:	f8cd 900c 	str.w	r9, [sp, #12]
 80052fc:	2230      	movs	r2, #48	; 0x30
 80052fe:	9b03      	ldr	r3, [sp, #12]
 8005300:	454b      	cmp	r3, r9
 8005302:	d307      	bcc.n	8005314 <__cvt+0xbc>
 8005304:	9b03      	ldr	r3, [sp, #12]
 8005306:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005308:	1bdb      	subs	r3, r3, r7
 800530a:	4638      	mov	r0, r7
 800530c:	6013      	str	r3, [r2, #0]
 800530e:	b004      	add	sp, #16
 8005310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005314:	1c59      	adds	r1, r3, #1
 8005316:	9103      	str	r1, [sp, #12]
 8005318:	701a      	strb	r2, [r3, #0]
 800531a:	e7f0      	b.n	80052fe <__cvt+0xa6>

0800531c <__exponent>:
 800531c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800531e:	4603      	mov	r3, r0
 8005320:	2900      	cmp	r1, #0
 8005322:	bfb8      	it	lt
 8005324:	4249      	neglt	r1, r1
 8005326:	f803 2b02 	strb.w	r2, [r3], #2
 800532a:	bfb4      	ite	lt
 800532c:	222d      	movlt	r2, #45	; 0x2d
 800532e:	222b      	movge	r2, #43	; 0x2b
 8005330:	2909      	cmp	r1, #9
 8005332:	7042      	strb	r2, [r0, #1]
 8005334:	dd2a      	ble.n	800538c <__exponent+0x70>
 8005336:	f10d 0407 	add.w	r4, sp, #7
 800533a:	46a4      	mov	ip, r4
 800533c:	270a      	movs	r7, #10
 800533e:	46a6      	mov	lr, r4
 8005340:	460a      	mov	r2, r1
 8005342:	fb91 f6f7 	sdiv	r6, r1, r7
 8005346:	fb07 1516 	mls	r5, r7, r6, r1
 800534a:	3530      	adds	r5, #48	; 0x30
 800534c:	2a63      	cmp	r2, #99	; 0x63
 800534e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8005352:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005356:	4631      	mov	r1, r6
 8005358:	dcf1      	bgt.n	800533e <__exponent+0x22>
 800535a:	3130      	adds	r1, #48	; 0x30
 800535c:	f1ae 0502 	sub.w	r5, lr, #2
 8005360:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005364:	1c44      	adds	r4, r0, #1
 8005366:	4629      	mov	r1, r5
 8005368:	4561      	cmp	r1, ip
 800536a:	d30a      	bcc.n	8005382 <__exponent+0x66>
 800536c:	f10d 0209 	add.w	r2, sp, #9
 8005370:	eba2 020e 	sub.w	r2, r2, lr
 8005374:	4565      	cmp	r5, ip
 8005376:	bf88      	it	hi
 8005378:	2200      	movhi	r2, #0
 800537a:	4413      	add	r3, r2
 800537c:	1a18      	subs	r0, r3, r0
 800537e:	b003      	add	sp, #12
 8005380:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005382:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005386:	f804 2f01 	strb.w	r2, [r4, #1]!
 800538a:	e7ed      	b.n	8005368 <__exponent+0x4c>
 800538c:	2330      	movs	r3, #48	; 0x30
 800538e:	3130      	adds	r1, #48	; 0x30
 8005390:	7083      	strb	r3, [r0, #2]
 8005392:	70c1      	strb	r1, [r0, #3]
 8005394:	1d03      	adds	r3, r0, #4
 8005396:	e7f1      	b.n	800537c <__exponent+0x60>

08005398 <_printf_float>:
 8005398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800539c:	ed2d 8b02 	vpush	{d8}
 80053a0:	b08d      	sub	sp, #52	; 0x34
 80053a2:	460c      	mov	r4, r1
 80053a4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80053a8:	4616      	mov	r6, r2
 80053aa:	461f      	mov	r7, r3
 80053ac:	4605      	mov	r5, r0
 80053ae:	f001 fd3d 	bl	8006e2c <_localeconv_r>
 80053b2:	f8d0 a000 	ldr.w	sl, [r0]
 80053b6:	4650      	mov	r0, sl
 80053b8:	f7fa ff12 	bl	80001e0 <strlen>
 80053bc:	2300      	movs	r3, #0
 80053be:	930a      	str	r3, [sp, #40]	; 0x28
 80053c0:	6823      	ldr	r3, [r4, #0]
 80053c2:	9305      	str	r3, [sp, #20]
 80053c4:	f8d8 3000 	ldr.w	r3, [r8]
 80053c8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80053cc:	3307      	adds	r3, #7
 80053ce:	f023 0307 	bic.w	r3, r3, #7
 80053d2:	f103 0208 	add.w	r2, r3, #8
 80053d6:	f8c8 2000 	str.w	r2, [r8]
 80053da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053de:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80053e2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80053e6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80053ea:	9307      	str	r3, [sp, #28]
 80053ec:	f8cd 8018 	str.w	r8, [sp, #24]
 80053f0:	ee08 0a10 	vmov	s16, r0
 80053f4:	4b9f      	ldr	r3, [pc, #636]	; (8005674 <_printf_float+0x2dc>)
 80053f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80053fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80053fe:	f7fb fb9d 	bl	8000b3c <__aeabi_dcmpun>
 8005402:	bb88      	cbnz	r0, 8005468 <_printf_float+0xd0>
 8005404:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005408:	4b9a      	ldr	r3, [pc, #616]	; (8005674 <_printf_float+0x2dc>)
 800540a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800540e:	f7fb fb77 	bl	8000b00 <__aeabi_dcmple>
 8005412:	bb48      	cbnz	r0, 8005468 <_printf_float+0xd0>
 8005414:	2200      	movs	r2, #0
 8005416:	2300      	movs	r3, #0
 8005418:	4640      	mov	r0, r8
 800541a:	4649      	mov	r1, r9
 800541c:	f7fb fb66 	bl	8000aec <__aeabi_dcmplt>
 8005420:	b110      	cbz	r0, 8005428 <_printf_float+0x90>
 8005422:	232d      	movs	r3, #45	; 0x2d
 8005424:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005428:	4b93      	ldr	r3, [pc, #588]	; (8005678 <_printf_float+0x2e0>)
 800542a:	4894      	ldr	r0, [pc, #592]	; (800567c <_printf_float+0x2e4>)
 800542c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005430:	bf94      	ite	ls
 8005432:	4698      	movls	r8, r3
 8005434:	4680      	movhi	r8, r0
 8005436:	2303      	movs	r3, #3
 8005438:	6123      	str	r3, [r4, #16]
 800543a:	9b05      	ldr	r3, [sp, #20]
 800543c:	f023 0204 	bic.w	r2, r3, #4
 8005440:	6022      	str	r2, [r4, #0]
 8005442:	f04f 0900 	mov.w	r9, #0
 8005446:	9700      	str	r7, [sp, #0]
 8005448:	4633      	mov	r3, r6
 800544a:	aa0b      	add	r2, sp, #44	; 0x2c
 800544c:	4621      	mov	r1, r4
 800544e:	4628      	mov	r0, r5
 8005450:	f000 f9d8 	bl	8005804 <_printf_common>
 8005454:	3001      	adds	r0, #1
 8005456:	f040 8090 	bne.w	800557a <_printf_float+0x1e2>
 800545a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800545e:	b00d      	add	sp, #52	; 0x34
 8005460:	ecbd 8b02 	vpop	{d8}
 8005464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005468:	4642      	mov	r2, r8
 800546a:	464b      	mov	r3, r9
 800546c:	4640      	mov	r0, r8
 800546e:	4649      	mov	r1, r9
 8005470:	f7fb fb64 	bl	8000b3c <__aeabi_dcmpun>
 8005474:	b140      	cbz	r0, 8005488 <_printf_float+0xf0>
 8005476:	464b      	mov	r3, r9
 8005478:	2b00      	cmp	r3, #0
 800547a:	bfbc      	itt	lt
 800547c:	232d      	movlt	r3, #45	; 0x2d
 800547e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005482:	487f      	ldr	r0, [pc, #508]	; (8005680 <_printf_float+0x2e8>)
 8005484:	4b7f      	ldr	r3, [pc, #508]	; (8005684 <_printf_float+0x2ec>)
 8005486:	e7d1      	b.n	800542c <_printf_float+0x94>
 8005488:	6863      	ldr	r3, [r4, #4]
 800548a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800548e:	9206      	str	r2, [sp, #24]
 8005490:	1c5a      	adds	r2, r3, #1
 8005492:	d13f      	bne.n	8005514 <_printf_float+0x17c>
 8005494:	2306      	movs	r3, #6
 8005496:	6063      	str	r3, [r4, #4]
 8005498:	9b05      	ldr	r3, [sp, #20]
 800549a:	6861      	ldr	r1, [r4, #4]
 800549c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80054a0:	2300      	movs	r3, #0
 80054a2:	9303      	str	r3, [sp, #12]
 80054a4:	ab0a      	add	r3, sp, #40	; 0x28
 80054a6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80054aa:	ab09      	add	r3, sp, #36	; 0x24
 80054ac:	ec49 8b10 	vmov	d0, r8, r9
 80054b0:	9300      	str	r3, [sp, #0]
 80054b2:	6022      	str	r2, [r4, #0]
 80054b4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80054b8:	4628      	mov	r0, r5
 80054ba:	f7ff fecd 	bl	8005258 <__cvt>
 80054be:	9b06      	ldr	r3, [sp, #24]
 80054c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80054c2:	2b47      	cmp	r3, #71	; 0x47
 80054c4:	4680      	mov	r8, r0
 80054c6:	d108      	bne.n	80054da <_printf_float+0x142>
 80054c8:	1cc8      	adds	r0, r1, #3
 80054ca:	db02      	blt.n	80054d2 <_printf_float+0x13a>
 80054cc:	6863      	ldr	r3, [r4, #4]
 80054ce:	4299      	cmp	r1, r3
 80054d0:	dd41      	ble.n	8005556 <_printf_float+0x1be>
 80054d2:	f1ab 0b02 	sub.w	fp, fp, #2
 80054d6:	fa5f fb8b 	uxtb.w	fp, fp
 80054da:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80054de:	d820      	bhi.n	8005522 <_printf_float+0x18a>
 80054e0:	3901      	subs	r1, #1
 80054e2:	465a      	mov	r2, fp
 80054e4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80054e8:	9109      	str	r1, [sp, #36]	; 0x24
 80054ea:	f7ff ff17 	bl	800531c <__exponent>
 80054ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80054f0:	1813      	adds	r3, r2, r0
 80054f2:	2a01      	cmp	r2, #1
 80054f4:	4681      	mov	r9, r0
 80054f6:	6123      	str	r3, [r4, #16]
 80054f8:	dc02      	bgt.n	8005500 <_printf_float+0x168>
 80054fa:	6822      	ldr	r2, [r4, #0]
 80054fc:	07d2      	lsls	r2, r2, #31
 80054fe:	d501      	bpl.n	8005504 <_printf_float+0x16c>
 8005500:	3301      	adds	r3, #1
 8005502:	6123      	str	r3, [r4, #16]
 8005504:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005508:	2b00      	cmp	r3, #0
 800550a:	d09c      	beq.n	8005446 <_printf_float+0xae>
 800550c:	232d      	movs	r3, #45	; 0x2d
 800550e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005512:	e798      	b.n	8005446 <_printf_float+0xae>
 8005514:	9a06      	ldr	r2, [sp, #24]
 8005516:	2a47      	cmp	r2, #71	; 0x47
 8005518:	d1be      	bne.n	8005498 <_printf_float+0x100>
 800551a:	2b00      	cmp	r3, #0
 800551c:	d1bc      	bne.n	8005498 <_printf_float+0x100>
 800551e:	2301      	movs	r3, #1
 8005520:	e7b9      	b.n	8005496 <_printf_float+0xfe>
 8005522:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005526:	d118      	bne.n	800555a <_printf_float+0x1c2>
 8005528:	2900      	cmp	r1, #0
 800552a:	6863      	ldr	r3, [r4, #4]
 800552c:	dd0b      	ble.n	8005546 <_printf_float+0x1ae>
 800552e:	6121      	str	r1, [r4, #16]
 8005530:	b913      	cbnz	r3, 8005538 <_printf_float+0x1a0>
 8005532:	6822      	ldr	r2, [r4, #0]
 8005534:	07d0      	lsls	r0, r2, #31
 8005536:	d502      	bpl.n	800553e <_printf_float+0x1a6>
 8005538:	3301      	adds	r3, #1
 800553a:	440b      	add	r3, r1
 800553c:	6123      	str	r3, [r4, #16]
 800553e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005540:	f04f 0900 	mov.w	r9, #0
 8005544:	e7de      	b.n	8005504 <_printf_float+0x16c>
 8005546:	b913      	cbnz	r3, 800554e <_printf_float+0x1b6>
 8005548:	6822      	ldr	r2, [r4, #0]
 800554a:	07d2      	lsls	r2, r2, #31
 800554c:	d501      	bpl.n	8005552 <_printf_float+0x1ba>
 800554e:	3302      	adds	r3, #2
 8005550:	e7f4      	b.n	800553c <_printf_float+0x1a4>
 8005552:	2301      	movs	r3, #1
 8005554:	e7f2      	b.n	800553c <_printf_float+0x1a4>
 8005556:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800555a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800555c:	4299      	cmp	r1, r3
 800555e:	db05      	blt.n	800556c <_printf_float+0x1d4>
 8005560:	6823      	ldr	r3, [r4, #0]
 8005562:	6121      	str	r1, [r4, #16]
 8005564:	07d8      	lsls	r0, r3, #31
 8005566:	d5ea      	bpl.n	800553e <_printf_float+0x1a6>
 8005568:	1c4b      	adds	r3, r1, #1
 800556a:	e7e7      	b.n	800553c <_printf_float+0x1a4>
 800556c:	2900      	cmp	r1, #0
 800556e:	bfd4      	ite	le
 8005570:	f1c1 0202 	rsble	r2, r1, #2
 8005574:	2201      	movgt	r2, #1
 8005576:	4413      	add	r3, r2
 8005578:	e7e0      	b.n	800553c <_printf_float+0x1a4>
 800557a:	6823      	ldr	r3, [r4, #0]
 800557c:	055a      	lsls	r2, r3, #21
 800557e:	d407      	bmi.n	8005590 <_printf_float+0x1f8>
 8005580:	6923      	ldr	r3, [r4, #16]
 8005582:	4642      	mov	r2, r8
 8005584:	4631      	mov	r1, r6
 8005586:	4628      	mov	r0, r5
 8005588:	47b8      	blx	r7
 800558a:	3001      	adds	r0, #1
 800558c:	d12c      	bne.n	80055e8 <_printf_float+0x250>
 800558e:	e764      	b.n	800545a <_printf_float+0xc2>
 8005590:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005594:	f240 80e0 	bls.w	8005758 <_printf_float+0x3c0>
 8005598:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800559c:	2200      	movs	r2, #0
 800559e:	2300      	movs	r3, #0
 80055a0:	f7fb fa9a 	bl	8000ad8 <__aeabi_dcmpeq>
 80055a4:	2800      	cmp	r0, #0
 80055a6:	d034      	beq.n	8005612 <_printf_float+0x27a>
 80055a8:	4a37      	ldr	r2, [pc, #220]	; (8005688 <_printf_float+0x2f0>)
 80055aa:	2301      	movs	r3, #1
 80055ac:	4631      	mov	r1, r6
 80055ae:	4628      	mov	r0, r5
 80055b0:	47b8      	blx	r7
 80055b2:	3001      	adds	r0, #1
 80055b4:	f43f af51 	beq.w	800545a <_printf_float+0xc2>
 80055b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80055bc:	429a      	cmp	r2, r3
 80055be:	db02      	blt.n	80055c6 <_printf_float+0x22e>
 80055c0:	6823      	ldr	r3, [r4, #0]
 80055c2:	07d8      	lsls	r0, r3, #31
 80055c4:	d510      	bpl.n	80055e8 <_printf_float+0x250>
 80055c6:	ee18 3a10 	vmov	r3, s16
 80055ca:	4652      	mov	r2, sl
 80055cc:	4631      	mov	r1, r6
 80055ce:	4628      	mov	r0, r5
 80055d0:	47b8      	blx	r7
 80055d2:	3001      	adds	r0, #1
 80055d4:	f43f af41 	beq.w	800545a <_printf_float+0xc2>
 80055d8:	f04f 0800 	mov.w	r8, #0
 80055dc:	f104 091a 	add.w	r9, r4, #26
 80055e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055e2:	3b01      	subs	r3, #1
 80055e4:	4543      	cmp	r3, r8
 80055e6:	dc09      	bgt.n	80055fc <_printf_float+0x264>
 80055e8:	6823      	ldr	r3, [r4, #0]
 80055ea:	079b      	lsls	r3, r3, #30
 80055ec:	f100 8105 	bmi.w	80057fa <_printf_float+0x462>
 80055f0:	68e0      	ldr	r0, [r4, #12]
 80055f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055f4:	4298      	cmp	r0, r3
 80055f6:	bfb8      	it	lt
 80055f8:	4618      	movlt	r0, r3
 80055fa:	e730      	b.n	800545e <_printf_float+0xc6>
 80055fc:	2301      	movs	r3, #1
 80055fe:	464a      	mov	r2, r9
 8005600:	4631      	mov	r1, r6
 8005602:	4628      	mov	r0, r5
 8005604:	47b8      	blx	r7
 8005606:	3001      	adds	r0, #1
 8005608:	f43f af27 	beq.w	800545a <_printf_float+0xc2>
 800560c:	f108 0801 	add.w	r8, r8, #1
 8005610:	e7e6      	b.n	80055e0 <_printf_float+0x248>
 8005612:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005614:	2b00      	cmp	r3, #0
 8005616:	dc39      	bgt.n	800568c <_printf_float+0x2f4>
 8005618:	4a1b      	ldr	r2, [pc, #108]	; (8005688 <_printf_float+0x2f0>)
 800561a:	2301      	movs	r3, #1
 800561c:	4631      	mov	r1, r6
 800561e:	4628      	mov	r0, r5
 8005620:	47b8      	blx	r7
 8005622:	3001      	adds	r0, #1
 8005624:	f43f af19 	beq.w	800545a <_printf_float+0xc2>
 8005628:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800562c:	4313      	orrs	r3, r2
 800562e:	d102      	bne.n	8005636 <_printf_float+0x29e>
 8005630:	6823      	ldr	r3, [r4, #0]
 8005632:	07d9      	lsls	r1, r3, #31
 8005634:	d5d8      	bpl.n	80055e8 <_printf_float+0x250>
 8005636:	ee18 3a10 	vmov	r3, s16
 800563a:	4652      	mov	r2, sl
 800563c:	4631      	mov	r1, r6
 800563e:	4628      	mov	r0, r5
 8005640:	47b8      	blx	r7
 8005642:	3001      	adds	r0, #1
 8005644:	f43f af09 	beq.w	800545a <_printf_float+0xc2>
 8005648:	f04f 0900 	mov.w	r9, #0
 800564c:	f104 0a1a 	add.w	sl, r4, #26
 8005650:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005652:	425b      	negs	r3, r3
 8005654:	454b      	cmp	r3, r9
 8005656:	dc01      	bgt.n	800565c <_printf_float+0x2c4>
 8005658:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800565a:	e792      	b.n	8005582 <_printf_float+0x1ea>
 800565c:	2301      	movs	r3, #1
 800565e:	4652      	mov	r2, sl
 8005660:	4631      	mov	r1, r6
 8005662:	4628      	mov	r0, r5
 8005664:	47b8      	blx	r7
 8005666:	3001      	adds	r0, #1
 8005668:	f43f aef7 	beq.w	800545a <_printf_float+0xc2>
 800566c:	f109 0901 	add.w	r9, r9, #1
 8005670:	e7ee      	b.n	8005650 <_printf_float+0x2b8>
 8005672:	bf00      	nop
 8005674:	7fefffff 	.word	0x7fefffff
 8005678:	080088d8 	.word	0x080088d8
 800567c:	080088dc 	.word	0x080088dc
 8005680:	080088e4 	.word	0x080088e4
 8005684:	080088e0 	.word	0x080088e0
 8005688:	080088e8 	.word	0x080088e8
 800568c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800568e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005690:	429a      	cmp	r2, r3
 8005692:	bfa8      	it	ge
 8005694:	461a      	movge	r2, r3
 8005696:	2a00      	cmp	r2, #0
 8005698:	4691      	mov	r9, r2
 800569a:	dc37      	bgt.n	800570c <_printf_float+0x374>
 800569c:	f04f 0b00 	mov.w	fp, #0
 80056a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80056a4:	f104 021a 	add.w	r2, r4, #26
 80056a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80056aa:	9305      	str	r3, [sp, #20]
 80056ac:	eba3 0309 	sub.w	r3, r3, r9
 80056b0:	455b      	cmp	r3, fp
 80056b2:	dc33      	bgt.n	800571c <_printf_float+0x384>
 80056b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80056b8:	429a      	cmp	r2, r3
 80056ba:	db3b      	blt.n	8005734 <_printf_float+0x39c>
 80056bc:	6823      	ldr	r3, [r4, #0]
 80056be:	07da      	lsls	r2, r3, #31
 80056c0:	d438      	bmi.n	8005734 <_printf_float+0x39c>
 80056c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056c4:	9a05      	ldr	r2, [sp, #20]
 80056c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80056c8:	1a9a      	subs	r2, r3, r2
 80056ca:	eba3 0901 	sub.w	r9, r3, r1
 80056ce:	4591      	cmp	r9, r2
 80056d0:	bfa8      	it	ge
 80056d2:	4691      	movge	r9, r2
 80056d4:	f1b9 0f00 	cmp.w	r9, #0
 80056d8:	dc35      	bgt.n	8005746 <_printf_float+0x3ae>
 80056da:	f04f 0800 	mov.w	r8, #0
 80056de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80056e2:	f104 0a1a 	add.w	sl, r4, #26
 80056e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80056ea:	1a9b      	subs	r3, r3, r2
 80056ec:	eba3 0309 	sub.w	r3, r3, r9
 80056f0:	4543      	cmp	r3, r8
 80056f2:	f77f af79 	ble.w	80055e8 <_printf_float+0x250>
 80056f6:	2301      	movs	r3, #1
 80056f8:	4652      	mov	r2, sl
 80056fa:	4631      	mov	r1, r6
 80056fc:	4628      	mov	r0, r5
 80056fe:	47b8      	blx	r7
 8005700:	3001      	adds	r0, #1
 8005702:	f43f aeaa 	beq.w	800545a <_printf_float+0xc2>
 8005706:	f108 0801 	add.w	r8, r8, #1
 800570a:	e7ec      	b.n	80056e6 <_printf_float+0x34e>
 800570c:	4613      	mov	r3, r2
 800570e:	4631      	mov	r1, r6
 8005710:	4642      	mov	r2, r8
 8005712:	4628      	mov	r0, r5
 8005714:	47b8      	blx	r7
 8005716:	3001      	adds	r0, #1
 8005718:	d1c0      	bne.n	800569c <_printf_float+0x304>
 800571a:	e69e      	b.n	800545a <_printf_float+0xc2>
 800571c:	2301      	movs	r3, #1
 800571e:	4631      	mov	r1, r6
 8005720:	4628      	mov	r0, r5
 8005722:	9205      	str	r2, [sp, #20]
 8005724:	47b8      	blx	r7
 8005726:	3001      	adds	r0, #1
 8005728:	f43f ae97 	beq.w	800545a <_printf_float+0xc2>
 800572c:	9a05      	ldr	r2, [sp, #20]
 800572e:	f10b 0b01 	add.w	fp, fp, #1
 8005732:	e7b9      	b.n	80056a8 <_printf_float+0x310>
 8005734:	ee18 3a10 	vmov	r3, s16
 8005738:	4652      	mov	r2, sl
 800573a:	4631      	mov	r1, r6
 800573c:	4628      	mov	r0, r5
 800573e:	47b8      	blx	r7
 8005740:	3001      	adds	r0, #1
 8005742:	d1be      	bne.n	80056c2 <_printf_float+0x32a>
 8005744:	e689      	b.n	800545a <_printf_float+0xc2>
 8005746:	9a05      	ldr	r2, [sp, #20]
 8005748:	464b      	mov	r3, r9
 800574a:	4442      	add	r2, r8
 800574c:	4631      	mov	r1, r6
 800574e:	4628      	mov	r0, r5
 8005750:	47b8      	blx	r7
 8005752:	3001      	adds	r0, #1
 8005754:	d1c1      	bne.n	80056da <_printf_float+0x342>
 8005756:	e680      	b.n	800545a <_printf_float+0xc2>
 8005758:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800575a:	2a01      	cmp	r2, #1
 800575c:	dc01      	bgt.n	8005762 <_printf_float+0x3ca>
 800575e:	07db      	lsls	r3, r3, #31
 8005760:	d538      	bpl.n	80057d4 <_printf_float+0x43c>
 8005762:	2301      	movs	r3, #1
 8005764:	4642      	mov	r2, r8
 8005766:	4631      	mov	r1, r6
 8005768:	4628      	mov	r0, r5
 800576a:	47b8      	blx	r7
 800576c:	3001      	adds	r0, #1
 800576e:	f43f ae74 	beq.w	800545a <_printf_float+0xc2>
 8005772:	ee18 3a10 	vmov	r3, s16
 8005776:	4652      	mov	r2, sl
 8005778:	4631      	mov	r1, r6
 800577a:	4628      	mov	r0, r5
 800577c:	47b8      	blx	r7
 800577e:	3001      	adds	r0, #1
 8005780:	f43f ae6b 	beq.w	800545a <_printf_float+0xc2>
 8005784:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005788:	2200      	movs	r2, #0
 800578a:	2300      	movs	r3, #0
 800578c:	f7fb f9a4 	bl	8000ad8 <__aeabi_dcmpeq>
 8005790:	b9d8      	cbnz	r0, 80057ca <_printf_float+0x432>
 8005792:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005794:	f108 0201 	add.w	r2, r8, #1
 8005798:	3b01      	subs	r3, #1
 800579a:	4631      	mov	r1, r6
 800579c:	4628      	mov	r0, r5
 800579e:	47b8      	blx	r7
 80057a0:	3001      	adds	r0, #1
 80057a2:	d10e      	bne.n	80057c2 <_printf_float+0x42a>
 80057a4:	e659      	b.n	800545a <_printf_float+0xc2>
 80057a6:	2301      	movs	r3, #1
 80057a8:	4652      	mov	r2, sl
 80057aa:	4631      	mov	r1, r6
 80057ac:	4628      	mov	r0, r5
 80057ae:	47b8      	blx	r7
 80057b0:	3001      	adds	r0, #1
 80057b2:	f43f ae52 	beq.w	800545a <_printf_float+0xc2>
 80057b6:	f108 0801 	add.w	r8, r8, #1
 80057ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057bc:	3b01      	subs	r3, #1
 80057be:	4543      	cmp	r3, r8
 80057c0:	dcf1      	bgt.n	80057a6 <_printf_float+0x40e>
 80057c2:	464b      	mov	r3, r9
 80057c4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80057c8:	e6dc      	b.n	8005584 <_printf_float+0x1ec>
 80057ca:	f04f 0800 	mov.w	r8, #0
 80057ce:	f104 0a1a 	add.w	sl, r4, #26
 80057d2:	e7f2      	b.n	80057ba <_printf_float+0x422>
 80057d4:	2301      	movs	r3, #1
 80057d6:	4642      	mov	r2, r8
 80057d8:	e7df      	b.n	800579a <_printf_float+0x402>
 80057da:	2301      	movs	r3, #1
 80057dc:	464a      	mov	r2, r9
 80057de:	4631      	mov	r1, r6
 80057e0:	4628      	mov	r0, r5
 80057e2:	47b8      	blx	r7
 80057e4:	3001      	adds	r0, #1
 80057e6:	f43f ae38 	beq.w	800545a <_printf_float+0xc2>
 80057ea:	f108 0801 	add.w	r8, r8, #1
 80057ee:	68e3      	ldr	r3, [r4, #12]
 80057f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80057f2:	1a5b      	subs	r3, r3, r1
 80057f4:	4543      	cmp	r3, r8
 80057f6:	dcf0      	bgt.n	80057da <_printf_float+0x442>
 80057f8:	e6fa      	b.n	80055f0 <_printf_float+0x258>
 80057fa:	f04f 0800 	mov.w	r8, #0
 80057fe:	f104 0919 	add.w	r9, r4, #25
 8005802:	e7f4      	b.n	80057ee <_printf_float+0x456>

08005804 <_printf_common>:
 8005804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005808:	4616      	mov	r6, r2
 800580a:	4699      	mov	r9, r3
 800580c:	688a      	ldr	r2, [r1, #8]
 800580e:	690b      	ldr	r3, [r1, #16]
 8005810:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005814:	4293      	cmp	r3, r2
 8005816:	bfb8      	it	lt
 8005818:	4613      	movlt	r3, r2
 800581a:	6033      	str	r3, [r6, #0]
 800581c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005820:	4607      	mov	r7, r0
 8005822:	460c      	mov	r4, r1
 8005824:	b10a      	cbz	r2, 800582a <_printf_common+0x26>
 8005826:	3301      	adds	r3, #1
 8005828:	6033      	str	r3, [r6, #0]
 800582a:	6823      	ldr	r3, [r4, #0]
 800582c:	0699      	lsls	r1, r3, #26
 800582e:	bf42      	ittt	mi
 8005830:	6833      	ldrmi	r3, [r6, #0]
 8005832:	3302      	addmi	r3, #2
 8005834:	6033      	strmi	r3, [r6, #0]
 8005836:	6825      	ldr	r5, [r4, #0]
 8005838:	f015 0506 	ands.w	r5, r5, #6
 800583c:	d106      	bne.n	800584c <_printf_common+0x48>
 800583e:	f104 0a19 	add.w	sl, r4, #25
 8005842:	68e3      	ldr	r3, [r4, #12]
 8005844:	6832      	ldr	r2, [r6, #0]
 8005846:	1a9b      	subs	r3, r3, r2
 8005848:	42ab      	cmp	r3, r5
 800584a:	dc26      	bgt.n	800589a <_printf_common+0x96>
 800584c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005850:	1e13      	subs	r3, r2, #0
 8005852:	6822      	ldr	r2, [r4, #0]
 8005854:	bf18      	it	ne
 8005856:	2301      	movne	r3, #1
 8005858:	0692      	lsls	r2, r2, #26
 800585a:	d42b      	bmi.n	80058b4 <_printf_common+0xb0>
 800585c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005860:	4649      	mov	r1, r9
 8005862:	4638      	mov	r0, r7
 8005864:	47c0      	blx	r8
 8005866:	3001      	adds	r0, #1
 8005868:	d01e      	beq.n	80058a8 <_printf_common+0xa4>
 800586a:	6823      	ldr	r3, [r4, #0]
 800586c:	68e5      	ldr	r5, [r4, #12]
 800586e:	6832      	ldr	r2, [r6, #0]
 8005870:	f003 0306 	and.w	r3, r3, #6
 8005874:	2b04      	cmp	r3, #4
 8005876:	bf08      	it	eq
 8005878:	1aad      	subeq	r5, r5, r2
 800587a:	68a3      	ldr	r3, [r4, #8]
 800587c:	6922      	ldr	r2, [r4, #16]
 800587e:	bf0c      	ite	eq
 8005880:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005884:	2500      	movne	r5, #0
 8005886:	4293      	cmp	r3, r2
 8005888:	bfc4      	itt	gt
 800588a:	1a9b      	subgt	r3, r3, r2
 800588c:	18ed      	addgt	r5, r5, r3
 800588e:	2600      	movs	r6, #0
 8005890:	341a      	adds	r4, #26
 8005892:	42b5      	cmp	r5, r6
 8005894:	d11a      	bne.n	80058cc <_printf_common+0xc8>
 8005896:	2000      	movs	r0, #0
 8005898:	e008      	b.n	80058ac <_printf_common+0xa8>
 800589a:	2301      	movs	r3, #1
 800589c:	4652      	mov	r2, sl
 800589e:	4649      	mov	r1, r9
 80058a0:	4638      	mov	r0, r7
 80058a2:	47c0      	blx	r8
 80058a4:	3001      	adds	r0, #1
 80058a6:	d103      	bne.n	80058b0 <_printf_common+0xac>
 80058a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058b0:	3501      	adds	r5, #1
 80058b2:	e7c6      	b.n	8005842 <_printf_common+0x3e>
 80058b4:	18e1      	adds	r1, r4, r3
 80058b6:	1c5a      	adds	r2, r3, #1
 80058b8:	2030      	movs	r0, #48	; 0x30
 80058ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80058be:	4422      	add	r2, r4
 80058c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80058c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80058c8:	3302      	adds	r3, #2
 80058ca:	e7c7      	b.n	800585c <_printf_common+0x58>
 80058cc:	2301      	movs	r3, #1
 80058ce:	4622      	mov	r2, r4
 80058d0:	4649      	mov	r1, r9
 80058d2:	4638      	mov	r0, r7
 80058d4:	47c0      	blx	r8
 80058d6:	3001      	adds	r0, #1
 80058d8:	d0e6      	beq.n	80058a8 <_printf_common+0xa4>
 80058da:	3601      	adds	r6, #1
 80058dc:	e7d9      	b.n	8005892 <_printf_common+0x8e>
	...

080058e0 <_printf_i>:
 80058e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058e4:	7e0f      	ldrb	r7, [r1, #24]
 80058e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80058e8:	2f78      	cmp	r7, #120	; 0x78
 80058ea:	4691      	mov	r9, r2
 80058ec:	4680      	mov	r8, r0
 80058ee:	460c      	mov	r4, r1
 80058f0:	469a      	mov	sl, r3
 80058f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80058f6:	d807      	bhi.n	8005908 <_printf_i+0x28>
 80058f8:	2f62      	cmp	r7, #98	; 0x62
 80058fa:	d80a      	bhi.n	8005912 <_printf_i+0x32>
 80058fc:	2f00      	cmp	r7, #0
 80058fe:	f000 80d8 	beq.w	8005ab2 <_printf_i+0x1d2>
 8005902:	2f58      	cmp	r7, #88	; 0x58
 8005904:	f000 80a3 	beq.w	8005a4e <_printf_i+0x16e>
 8005908:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800590c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005910:	e03a      	b.n	8005988 <_printf_i+0xa8>
 8005912:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005916:	2b15      	cmp	r3, #21
 8005918:	d8f6      	bhi.n	8005908 <_printf_i+0x28>
 800591a:	a101      	add	r1, pc, #4	; (adr r1, 8005920 <_printf_i+0x40>)
 800591c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005920:	08005979 	.word	0x08005979
 8005924:	0800598d 	.word	0x0800598d
 8005928:	08005909 	.word	0x08005909
 800592c:	08005909 	.word	0x08005909
 8005930:	08005909 	.word	0x08005909
 8005934:	08005909 	.word	0x08005909
 8005938:	0800598d 	.word	0x0800598d
 800593c:	08005909 	.word	0x08005909
 8005940:	08005909 	.word	0x08005909
 8005944:	08005909 	.word	0x08005909
 8005948:	08005909 	.word	0x08005909
 800594c:	08005a99 	.word	0x08005a99
 8005950:	080059bd 	.word	0x080059bd
 8005954:	08005a7b 	.word	0x08005a7b
 8005958:	08005909 	.word	0x08005909
 800595c:	08005909 	.word	0x08005909
 8005960:	08005abb 	.word	0x08005abb
 8005964:	08005909 	.word	0x08005909
 8005968:	080059bd 	.word	0x080059bd
 800596c:	08005909 	.word	0x08005909
 8005970:	08005909 	.word	0x08005909
 8005974:	08005a83 	.word	0x08005a83
 8005978:	682b      	ldr	r3, [r5, #0]
 800597a:	1d1a      	adds	r2, r3, #4
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	602a      	str	r2, [r5, #0]
 8005980:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005984:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005988:	2301      	movs	r3, #1
 800598a:	e0a3      	b.n	8005ad4 <_printf_i+0x1f4>
 800598c:	6820      	ldr	r0, [r4, #0]
 800598e:	6829      	ldr	r1, [r5, #0]
 8005990:	0606      	lsls	r6, r0, #24
 8005992:	f101 0304 	add.w	r3, r1, #4
 8005996:	d50a      	bpl.n	80059ae <_printf_i+0xce>
 8005998:	680e      	ldr	r6, [r1, #0]
 800599a:	602b      	str	r3, [r5, #0]
 800599c:	2e00      	cmp	r6, #0
 800599e:	da03      	bge.n	80059a8 <_printf_i+0xc8>
 80059a0:	232d      	movs	r3, #45	; 0x2d
 80059a2:	4276      	negs	r6, r6
 80059a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059a8:	485e      	ldr	r0, [pc, #376]	; (8005b24 <_printf_i+0x244>)
 80059aa:	230a      	movs	r3, #10
 80059ac:	e019      	b.n	80059e2 <_printf_i+0x102>
 80059ae:	680e      	ldr	r6, [r1, #0]
 80059b0:	602b      	str	r3, [r5, #0]
 80059b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80059b6:	bf18      	it	ne
 80059b8:	b236      	sxthne	r6, r6
 80059ba:	e7ef      	b.n	800599c <_printf_i+0xbc>
 80059bc:	682b      	ldr	r3, [r5, #0]
 80059be:	6820      	ldr	r0, [r4, #0]
 80059c0:	1d19      	adds	r1, r3, #4
 80059c2:	6029      	str	r1, [r5, #0]
 80059c4:	0601      	lsls	r1, r0, #24
 80059c6:	d501      	bpl.n	80059cc <_printf_i+0xec>
 80059c8:	681e      	ldr	r6, [r3, #0]
 80059ca:	e002      	b.n	80059d2 <_printf_i+0xf2>
 80059cc:	0646      	lsls	r6, r0, #25
 80059ce:	d5fb      	bpl.n	80059c8 <_printf_i+0xe8>
 80059d0:	881e      	ldrh	r6, [r3, #0]
 80059d2:	4854      	ldr	r0, [pc, #336]	; (8005b24 <_printf_i+0x244>)
 80059d4:	2f6f      	cmp	r7, #111	; 0x6f
 80059d6:	bf0c      	ite	eq
 80059d8:	2308      	moveq	r3, #8
 80059da:	230a      	movne	r3, #10
 80059dc:	2100      	movs	r1, #0
 80059de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80059e2:	6865      	ldr	r5, [r4, #4]
 80059e4:	60a5      	str	r5, [r4, #8]
 80059e6:	2d00      	cmp	r5, #0
 80059e8:	bfa2      	ittt	ge
 80059ea:	6821      	ldrge	r1, [r4, #0]
 80059ec:	f021 0104 	bicge.w	r1, r1, #4
 80059f0:	6021      	strge	r1, [r4, #0]
 80059f2:	b90e      	cbnz	r6, 80059f8 <_printf_i+0x118>
 80059f4:	2d00      	cmp	r5, #0
 80059f6:	d04d      	beq.n	8005a94 <_printf_i+0x1b4>
 80059f8:	4615      	mov	r5, r2
 80059fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80059fe:	fb03 6711 	mls	r7, r3, r1, r6
 8005a02:	5dc7      	ldrb	r7, [r0, r7]
 8005a04:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005a08:	4637      	mov	r7, r6
 8005a0a:	42bb      	cmp	r3, r7
 8005a0c:	460e      	mov	r6, r1
 8005a0e:	d9f4      	bls.n	80059fa <_printf_i+0x11a>
 8005a10:	2b08      	cmp	r3, #8
 8005a12:	d10b      	bne.n	8005a2c <_printf_i+0x14c>
 8005a14:	6823      	ldr	r3, [r4, #0]
 8005a16:	07de      	lsls	r6, r3, #31
 8005a18:	d508      	bpl.n	8005a2c <_printf_i+0x14c>
 8005a1a:	6923      	ldr	r3, [r4, #16]
 8005a1c:	6861      	ldr	r1, [r4, #4]
 8005a1e:	4299      	cmp	r1, r3
 8005a20:	bfde      	ittt	le
 8005a22:	2330      	movle	r3, #48	; 0x30
 8005a24:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a28:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005a2c:	1b52      	subs	r2, r2, r5
 8005a2e:	6122      	str	r2, [r4, #16]
 8005a30:	f8cd a000 	str.w	sl, [sp]
 8005a34:	464b      	mov	r3, r9
 8005a36:	aa03      	add	r2, sp, #12
 8005a38:	4621      	mov	r1, r4
 8005a3a:	4640      	mov	r0, r8
 8005a3c:	f7ff fee2 	bl	8005804 <_printf_common>
 8005a40:	3001      	adds	r0, #1
 8005a42:	d14c      	bne.n	8005ade <_printf_i+0x1fe>
 8005a44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a48:	b004      	add	sp, #16
 8005a4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a4e:	4835      	ldr	r0, [pc, #212]	; (8005b24 <_printf_i+0x244>)
 8005a50:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005a54:	6829      	ldr	r1, [r5, #0]
 8005a56:	6823      	ldr	r3, [r4, #0]
 8005a58:	f851 6b04 	ldr.w	r6, [r1], #4
 8005a5c:	6029      	str	r1, [r5, #0]
 8005a5e:	061d      	lsls	r5, r3, #24
 8005a60:	d514      	bpl.n	8005a8c <_printf_i+0x1ac>
 8005a62:	07df      	lsls	r7, r3, #31
 8005a64:	bf44      	itt	mi
 8005a66:	f043 0320 	orrmi.w	r3, r3, #32
 8005a6a:	6023      	strmi	r3, [r4, #0]
 8005a6c:	b91e      	cbnz	r6, 8005a76 <_printf_i+0x196>
 8005a6e:	6823      	ldr	r3, [r4, #0]
 8005a70:	f023 0320 	bic.w	r3, r3, #32
 8005a74:	6023      	str	r3, [r4, #0]
 8005a76:	2310      	movs	r3, #16
 8005a78:	e7b0      	b.n	80059dc <_printf_i+0xfc>
 8005a7a:	6823      	ldr	r3, [r4, #0]
 8005a7c:	f043 0320 	orr.w	r3, r3, #32
 8005a80:	6023      	str	r3, [r4, #0]
 8005a82:	2378      	movs	r3, #120	; 0x78
 8005a84:	4828      	ldr	r0, [pc, #160]	; (8005b28 <_printf_i+0x248>)
 8005a86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005a8a:	e7e3      	b.n	8005a54 <_printf_i+0x174>
 8005a8c:	0659      	lsls	r1, r3, #25
 8005a8e:	bf48      	it	mi
 8005a90:	b2b6      	uxthmi	r6, r6
 8005a92:	e7e6      	b.n	8005a62 <_printf_i+0x182>
 8005a94:	4615      	mov	r5, r2
 8005a96:	e7bb      	b.n	8005a10 <_printf_i+0x130>
 8005a98:	682b      	ldr	r3, [r5, #0]
 8005a9a:	6826      	ldr	r6, [r4, #0]
 8005a9c:	6961      	ldr	r1, [r4, #20]
 8005a9e:	1d18      	adds	r0, r3, #4
 8005aa0:	6028      	str	r0, [r5, #0]
 8005aa2:	0635      	lsls	r5, r6, #24
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	d501      	bpl.n	8005aac <_printf_i+0x1cc>
 8005aa8:	6019      	str	r1, [r3, #0]
 8005aaa:	e002      	b.n	8005ab2 <_printf_i+0x1d2>
 8005aac:	0670      	lsls	r0, r6, #25
 8005aae:	d5fb      	bpl.n	8005aa8 <_printf_i+0x1c8>
 8005ab0:	8019      	strh	r1, [r3, #0]
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	6123      	str	r3, [r4, #16]
 8005ab6:	4615      	mov	r5, r2
 8005ab8:	e7ba      	b.n	8005a30 <_printf_i+0x150>
 8005aba:	682b      	ldr	r3, [r5, #0]
 8005abc:	1d1a      	adds	r2, r3, #4
 8005abe:	602a      	str	r2, [r5, #0]
 8005ac0:	681d      	ldr	r5, [r3, #0]
 8005ac2:	6862      	ldr	r2, [r4, #4]
 8005ac4:	2100      	movs	r1, #0
 8005ac6:	4628      	mov	r0, r5
 8005ac8:	f7fa fb92 	bl	80001f0 <memchr>
 8005acc:	b108      	cbz	r0, 8005ad2 <_printf_i+0x1f2>
 8005ace:	1b40      	subs	r0, r0, r5
 8005ad0:	6060      	str	r0, [r4, #4]
 8005ad2:	6863      	ldr	r3, [r4, #4]
 8005ad4:	6123      	str	r3, [r4, #16]
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005adc:	e7a8      	b.n	8005a30 <_printf_i+0x150>
 8005ade:	6923      	ldr	r3, [r4, #16]
 8005ae0:	462a      	mov	r2, r5
 8005ae2:	4649      	mov	r1, r9
 8005ae4:	4640      	mov	r0, r8
 8005ae6:	47d0      	blx	sl
 8005ae8:	3001      	adds	r0, #1
 8005aea:	d0ab      	beq.n	8005a44 <_printf_i+0x164>
 8005aec:	6823      	ldr	r3, [r4, #0]
 8005aee:	079b      	lsls	r3, r3, #30
 8005af0:	d413      	bmi.n	8005b1a <_printf_i+0x23a>
 8005af2:	68e0      	ldr	r0, [r4, #12]
 8005af4:	9b03      	ldr	r3, [sp, #12]
 8005af6:	4298      	cmp	r0, r3
 8005af8:	bfb8      	it	lt
 8005afa:	4618      	movlt	r0, r3
 8005afc:	e7a4      	b.n	8005a48 <_printf_i+0x168>
 8005afe:	2301      	movs	r3, #1
 8005b00:	4632      	mov	r2, r6
 8005b02:	4649      	mov	r1, r9
 8005b04:	4640      	mov	r0, r8
 8005b06:	47d0      	blx	sl
 8005b08:	3001      	adds	r0, #1
 8005b0a:	d09b      	beq.n	8005a44 <_printf_i+0x164>
 8005b0c:	3501      	adds	r5, #1
 8005b0e:	68e3      	ldr	r3, [r4, #12]
 8005b10:	9903      	ldr	r1, [sp, #12]
 8005b12:	1a5b      	subs	r3, r3, r1
 8005b14:	42ab      	cmp	r3, r5
 8005b16:	dcf2      	bgt.n	8005afe <_printf_i+0x21e>
 8005b18:	e7eb      	b.n	8005af2 <_printf_i+0x212>
 8005b1a:	2500      	movs	r5, #0
 8005b1c:	f104 0619 	add.w	r6, r4, #25
 8005b20:	e7f5      	b.n	8005b0e <_printf_i+0x22e>
 8005b22:	bf00      	nop
 8005b24:	080088ea 	.word	0x080088ea
 8005b28:	080088fb 	.word	0x080088fb

08005b2c <iprintf>:
 8005b2c:	b40f      	push	{r0, r1, r2, r3}
 8005b2e:	4b0a      	ldr	r3, [pc, #40]	; (8005b58 <iprintf+0x2c>)
 8005b30:	b513      	push	{r0, r1, r4, lr}
 8005b32:	681c      	ldr	r4, [r3, #0]
 8005b34:	b124      	cbz	r4, 8005b40 <iprintf+0x14>
 8005b36:	69a3      	ldr	r3, [r4, #24]
 8005b38:	b913      	cbnz	r3, 8005b40 <iprintf+0x14>
 8005b3a:	4620      	mov	r0, r4
 8005b3c:	f001 f8d8 	bl	8006cf0 <__sinit>
 8005b40:	ab05      	add	r3, sp, #20
 8005b42:	9a04      	ldr	r2, [sp, #16]
 8005b44:	68a1      	ldr	r1, [r4, #8]
 8005b46:	9301      	str	r3, [sp, #4]
 8005b48:	4620      	mov	r0, r4
 8005b4a:	f001 fe95 	bl	8007878 <_vfiprintf_r>
 8005b4e:	b002      	add	sp, #8
 8005b50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b54:	b004      	add	sp, #16
 8005b56:	4770      	bx	lr
 8005b58:	20000010 	.word	0x20000010

08005b5c <_puts_r>:
 8005b5c:	b570      	push	{r4, r5, r6, lr}
 8005b5e:	460e      	mov	r6, r1
 8005b60:	4605      	mov	r5, r0
 8005b62:	b118      	cbz	r0, 8005b6c <_puts_r+0x10>
 8005b64:	6983      	ldr	r3, [r0, #24]
 8005b66:	b90b      	cbnz	r3, 8005b6c <_puts_r+0x10>
 8005b68:	f001 f8c2 	bl	8006cf0 <__sinit>
 8005b6c:	69ab      	ldr	r3, [r5, #24]
 8005b6e:	68ac      	ldr	r4, [r5, #8]
 8005b70:	b913      	cbnz	r3, 8005b78 <_puts_r+0x1c>
 8005b72:	4628      	mov	r0, r5
 8005b74:	f001 f8bc 	bl	8006cf0 <__sinit>
 8005b78:	4b2c      	ldr	r3, [pc, #176]	; (8005c2c <_puts_r+0xd0>)
 8005b7a:	429c      	cmp	r4, r3
 8005b7c:	d120      	bne.n	8005bc0 <_puts_r+0x64>
 8005b7e:	686c      	ldr	r4, [r5, #4]
 8005b80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b82:	07db      	lsls	r3, r3, #31
 8005b84:	d405      	bmi.n	8005b92 <_puts_r+0x36>
 8005b86:	89a3      	ldrh	r3, [r4, #12]
 8005b88:	0598      	lsls	r0, r3, #22
 8005b8a:	d402      	bmi.n	8005b92 <_puts_r+0x36>
 8005b8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b8e:	f001 f952 	bl	8006e36 <__retarget_lock_acquire_recursive>
 8005b92:	89a3      	ldrh	r3, [r4, #12]
 8005b94:	0719      	lsls	r1, r3, #28
 8005b96:	d51d      	bpl.n	8005bd4 <_puts_r+0x78>
 8005b98:	6923      	ldr	r3, [r4, #16]
 8005b9a:	b1db      	cbz	r3, 8005bd4 <_puts_r+0x78>
 8005b9c:	3e01      	subs	r6, #1
 8005b9e:	68a3      	ldr	r3, [r4, #8]
 8005ba0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005ba4:	3b01      	subs	r3, #1
 8005ba6:	60a3      	str	r3, [r4, #8]
 8005ba8:	bb39      	cbnz	r1, 8005bfa <_puts_r+0x9e>
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	da38      	bge.n	8005c20 <_puts_r+0xc4>
 8005bae:	4622      	mov	r2, r4
 8005bb0:	210a      	movs	r1, #10
 8005bb2:	4628      	mov	r0, r5
 8005bb4:	f000 f848 	bl	8005c48 <__swbuf_r>
 8005bb8:	3001      	adds	r0, #1
 8005bba:	d011      	beq.n	8005be0 <_puts_r+0x84>
 8005bbc:	250a      	movs	r5, #10
 8005bbe:	e011      	b.n	8005be4 <_puts_r+0x88>
 8005bc0:	4b1b      	ldr	r3, [pc, #108]	; (8005c30 <_puts_r+0xd4>)
 8005bc2:	429c      	cmp	r4, r3
 8005bc4:	d101      	bne.n	8005bca <_puts_r+0x6e>
 8005bc6:	68ac      	ldr	r4, [r5, #8]
 8005bc8:	e7da      	b.n	8005b80 <_puts_r+0x24>
 8005bca:	4b1a      	ldr	r3, [pc, #104]	; (8005c34 <_puts_r+0xd8>)
 8005bcc:	429c      	cmp	r4, r3
 8005bce:	bf08      	it	eq
 8005bd0:	68ec      	ldreq	r4, [r5, #12]
 8005bd2:	e7d5      	b.n	8005b80 <_puts_r+0x24>
 8005bd4:	4621      	mov	r1, r4
 8005bd6:	4628      	mov	r0, r5
 8005bd8:	f000 f888 	bl	8005cec <__swsetup_r>
 8005bdc:	2800      	cmp	r0, #0
 8005bde:	d0dd      	beq.n	8005b9c <_puts_r+0x40>
 8005be0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005be4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005be6:	07da      	lsls	r2, r3, #31
 8005be8:	d405      	bmi.n	8005bf6 <_puts_r+0x9a>
 8005bea:	89a3      	ldrh	r3, [r4, #12]
 8005bec:	059b      	lsls	r3, r3, #22
 8005bee:	d402      	bmi.n	8005bf6 <_puts_r+0x9a>
 8005bf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005bf2:	f001 f921 	bl	8006e38 <__retarget_lock_release_recursive>
 8005bf6:	4628      	mov	r0, r5
 8005bf8:	bd70      	pop	{r4, r5, r6, pc}
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	da04      	bge.n	8005c08 <_puts_r+0xac>
 8005bfe:	69a2      	ldr	r2, [r4, #24]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	dc06      	bgt.n	8005c12 <_puts_r+0xb6>
 8005c04:	290a      	cmp	r1, #10
 8005c06:	d004      	beq.n	8005c12 <_puts_r+0xb6>
 8005c08:	6823      	ldr	r3, [r4, #0]
 8005c0a:	1c5a      	adds	r2, r3, #1
 8005c0c:	6022      	str	r2, [r4, #0]
 8005c0e:	7019      	strb	r1, [r3, #0]
 8005c10:	e7c5      	b.n	8005b9e <_puts_r+0x42>
 8005c12:	4622      	mov	r2, r4
 8005c14:	4628      	mov	r0, r5
 8005c16:	f000 f817 	bl	8005c48 <__swbuf_r>
 8005c1a:	3001      	adds	r0, #1
 8005c1c:	d1bf      	bne.n	8005b9e <_puts_r+0x42>
 8005c1e:	e7df      	b.n	8005be0 <_puts_r+0x84>
 8005c20:	6823      	ldr	r3, [r4, #0]
 8005c22:	250a      	movs	r5, #10
 8005c24:	1c5a      	adds	r2, r3, #1
 8005c26:	6022      	str	r2, [r4, #0]
 8005c28:	701d      	strb	r5, [r3, #0]
 8005c2a:	e7db      	b.n	8005be4 <_puts_r+0x88>
 8005c2c:	080089bc 	.word	0x080089bc
 8005c30:	080089dc 	.word	0x080089dc
 8005c34:	0800899c 	.word	0x0800899c

08005c38 <puts>:
 8005c38:	4b02      	ldr	r3, [pc, #8]	; (8005c44 <puts+0xc>)
 8005c3a:	4601      	mov	r1, r0
 8005c3c:	6818      	ldr	r0, [r3, #0]
 8005c3e:	f7ff bf8d 	b.w	8005b5c <_puts_r>
 8005c42:	bf00      	nop
 8005c44:	20000010 	.word	0x20000010

08005c48 <__swbuf_r>:
 8005c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c4a:	460e      	mov	r6, r1
 8005c4c:	4614      	mov	r4, r2
 8005c4e:	4605      	mov	r5, r0
 8005c50:	b118      	cbz	r0, 8005c5a <__swbuf_r+0x12>
 8005c52:	6983      	ldr	r3, [r0, #24]
 8005c54:	b90b      	cbnz	r3, 8005c5a <__swbuf_r+0x12>
 8005c56:	f001 f84b 	bl	8006cf0 <__sinit>
 8005c5a:	4b21      	ldr	r3, [pc, #132]	; (8005ce0 <__swbuf_r+0x98>)
 8005c5c:	429c      	cmp	r4, r3
 8005c5e:	d12b      	bne.n	8005cb8 <__swbuf_r+0x70>
 8005c60:	686c      	ldr	r4, [r5, #4]
 8005c62:	69a3      	ldr	r3, [r4, #24]
 8005c64:	60a3      	str	r3, [r4, #8]
 8005c66:	89a3      	ldrh	r3, [r4, #12]
 8005c68:	071a      	lsls	r2, r3, #28
 8005c6a:	d52f      	bpl.n	8005ccc <__swbuf_r+0x84>
 8005c6c:	6923      	ldr	r3, [r4, #16]
 8005c6e:	b36b      	cbz	r3, 8005ccc <__swbuf_r+0x84>
 8005c70:	6923      	ldr	r3, [r4, #16]
 8005c72:	6820      	ldr	r0, [r4, #0]
 8005c74:	1ac0      	subs	r0, r0, r3
 8005c76:	6963      	ldr	r3, [r4, #20]
 8005c78:	b2f6      	uxtb	r6, r6
 8005c7a:	4283      	cmp	r3, r0
 8005c7c:	4637      	mov	r7, r6
 8005c7e:	dc04      	bgt.n	8005c8a <__swbuf_r+0x42>
 8005c80:	4621      	mov	r1, r4
 8005c82:	4628      	mov	r0, r5
 8005c84:	f000 ffa0 	bl	8006bc8 <_fflush_r>
 8005c88:	bb30      	cbnz	r0, 8005cd8 <__swbuf_r+0x90>
 8005c8a:	68a3      	ldr	r3, [r4, #8]
 8005c8c:	3b01      	subs	r3, #1
 8005c8e:	60a3      	str	r3, [r4, #8]
 8005c90:	6823      	ldr	r3, [r4, #0]
 8005c92:	1c5a      	adds	r2, r3, #1
 8005c94:	6022      	str	r2, [r4, #0]
 8005c96:	701e      	strb	r6, [r3, #0]
 8005c98:	6963      	ldr	r3, [r4, #20]
 8005c9a:	3001      	adds	r0, #1
 8005c9c:	4283      	cmp	r3, r0
 8005c9e:	d004      	beq.n	8005caa <__swbuf_r+0x62>
 8005ca0:	89a3      	ldrh	r3, [r4, #12]
 8005ca2:	07db      	lsls	r3, r3, #31
 8005ca4:	d506      	bpl.n	8005cb4 <__swbuf_r+0x6c>
 8005ca6:	2e0a      	cmp	r6, #10
 8005ca8:	d104      	bne.n	8005cb4 <__swbuf_r+0x6c>
 8005caa:	4621      	mov	r1, r4
 8005cac:	4628      	mov	r0, r5
 8005cae:	f000 ff8b 	bl	8006bc8 <_fflush_r>
 8005cb2:	b988      	cbnz	r0, 8005cd8 <__swbuf_r+0x90>
 8005cb4:	4638      	mov	r0, r7
 8005cb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cb8:	4b0a      	ldr	r3, [pc, #40]	; (8005ce4 <__swbuf_r+0x9c>)
 8005cba:	429c      	cmp	r4, r3
 8005cbc:	d101      	bne.n	8005cc2 <__swbuf_r+0x7a>
 8005cbe:	68ac      	ldr	r4, [r5, #8]
 8005cc0:	e7cf      	b.n	8005c62 <__swbuf_r+0x1a>
 8005cc2:	4b09      	ldr	r3, [pc, #36]	; (8005ce8 <__swbuf_r+0xa0>)
 8005cc4:	429c      	cmp	r4, r3
 8005cc6:	bf08      	it	eq
 8005cc8:	68ec      	ldreq	r4, [r5, #12]
 8005cca:	e7ca      	b.n	8005c62 <__swbuf_r+0x1a>
 8005ccc:	4621      	mov	r1, r4
 8005cce:	4628      	mov	r0, r5
 8005cd0:	f000 f80c 	bl	8005cec <__swsetup_r>
 8005cd4:	2800      	cmp	r0, #0
 8005cd6:	d0cb      	beq.n	8005c70 <__swbuf_r+0x28>
 8005cd8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005cdc:	e7ea      	b.n	8005cb4 <__swbuf_r+0x6c>
 8005cde:	bf00      	nop
 8005ce0:	080089bc 	.word	0x080089bc
 8005ce4:	080089dc 	.word	0x080089dc
 8005ce8:	0800899c 	.word	0x0800899c

08005cec <__swsetup_r>:
 8005cec:	4b32      	ldr	r3, [pc, #200]	; (8005db8 <__swsetup_r+0xcc>)
 8005cee:	b570      	push	{r4, r5, r6, lr}
 8005cf0:	681d      	ldr	r5, [r3, #0]
 8005cf2:	4606      	mov	r6, r0
 8005cf4:	460c      	mov	r4, r1
 8005cf6:	b125      	cbz	r5, 8005d02 <__swsetup_r+0x16>
 8005cf8:	69ab      	ldr	r3, [r5, #24]
 8005cfa:	b913      	cbnz	r3, 8005d02 <__swsetup_r+0x16>
 8005cfc:	4628      	mov	r0, r5
 8005cfe:	f000 fff7 	bl	8006cf0 <__sinit>
 8005d02:	4b2e      	ldr	r3, [pc, #184]	; (8005dbc <__swsetup_r+0xd0>)
 8005d04:	429c      	cmp	r4, r3
 8005d06:	d10f      	bne.n	8005d28 <__swsetup_r+0x3c>
 8005d08:	686c      	ldr	r4, [r5, #4]
 8005d0a:	89a3      	ldrh	r3, [r4, #12]
 8005d0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d10:	0719      	lsls	r1, r3, #28
 8005d12:	d42c      	bmi.n	8005d6e <__swsetup_r+0x82>
 8005d14:	06dd      	lsls	r5, r3, #27
 8005d16:	d411      	bmi.n	8005d3c <__swsetup_r+0x50>
 8005d18:	2309      	movs	r3, #9
 8005d1a:	6033      	str	r3, [r6, #0]
 8005d1c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005d20:	81a3      	strh	r3, [r4, #12]
 8005d22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d26:	e03e      	b.n	8005da6 <__swsetup_r+0xba>
 8005d28:	4b25      	ldr	r3, [pc, #148]	; (8005dc0 <__swsetup_r+0xd4>)
 8005d2a:	429c      	cmp	r4, r3
 8005d2c:	d101      	bne.n	8005d32 <__swsetup_r+0x46>
 8005d2e:	68ac      	ldr	r4, [r5, #8]
 8005d30:	e7eb      	b.n	8005d0a <__swsetup_r+0x1e>
 8005d32:	4b24      	ldr	r3, [pc, #144]	; (8005dc4 <__swsetup_r+0xd8>)
 8005d34:	429c      	cmp	r4, r3
 8005d36:	bf08      	it	eq
 8005d38:	68ec      	ldreq	r4, [r5, #12]
 8005d3a:	e7e6      	b.n	8005d0a <__swsetup_r+0x1e>
 8005d3c:	0758      	lsls	r0, r3, #29
 8005d3e:	d512      	bpl.n	8005d66 <__swsetup_r+0x7a>
 8005d40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d42:	b141      	cbz	r1, 8005d56 <__swsetup_r+0x6a>
 8005d44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d48:	4299      	cmp	r1, r3
 8005d4a:	d002      	beq.n	8005d52 <__swsetup_r+0x66>
 8005d4c:	4630      	mov	r0, r6
 8005d4e:	f001 fc89 	bl	8007664 <_free_r>
 8005d52:	2300      	movs	r3, #0
 8005d54:	6363      	str	r3, [r4, #52]	; 0x34
 8005d56:	89a3      	ldrh	r3, [r4, #12]
 8005d58:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005d5c:	81a3      	strh	r3, [r4, #12]
 8005d5e:	2300      	movs	r3, #0
 8005d60:	6063      	str	r3, [r4, #4]
 8005d62:	6923      	ldr	r3, [r4, #16]
 8005d64:	6023      	str	r3, [r4, #0]
 8005d66:	89a3      	ldrh	r3, [r4, #12]
 8005d68:	f043 0308 	orr.w	r3, r3, #8
 8005d6c:	81a3      	strh	r3, [r4, #12]
 8005d6e:	6923      	ldr	r3, [r4, #16]
 8005d70:	b94b      	cbnz	r3, 8005d86 <__swsetup_r+0x9a>
 8005d72:	89a3      	ldrh	r3, [r4, #12]
 8005d74:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005d78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d7c:	d003      	beq.n	8005d86 <__swsetup_r+0x9a>
 8005d7e:	4621      	mov	r1, r4
 8005d80:	4630      	mov	r0, r6
 8005d82:	f001 f87f 	bl	8006e84 <__smakebuf_r>
 8005d86:	89a0      	ldrh	r0, [r4, #12]
 8005d88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d8c:	f010 0301 	ands.w	r3, r0, #1
 8005d90:	d00a      	beq.n	8005da8 <__swsetup_r+0xbc>
 8005d92:	2300      	movs	r3, #0
 8005d94:	60a3      	str	r3, [r4, #8]
 8005d96:	6963      	ldr	r3, [r4, #20]
 8005d98:	425b      	negs	r3, r3
 8005d9a:	61a3      	str	r3, [r4, #24]
 8005d9c:	6923      	ldr	r3, [r4, #16]
 8005d9e:	b943      	cbnz	r3, 8005db2 <__swsetup_r+0xc6>
 8005da0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005da4:	d1ba      	bne.n	8005d1c <__swsetup_r+0x30>
 8005da6:	bd70      	pop	{r4, r5, r6, pc}
 8005da8:	0781      	lsls	r1, r0, #30
 8005daa:	bf58      	it	pl
 8005dac:	6963      	ldrpl	r3, [r4, #20]
 8005dae:	60a3      	str	r3, [r4, #8]
 8005db0:	e7f4      	b.n	8005d9c <__swsetup_r+0xb0>
 8005db2:	2000      	movs	r0, #0
 8005db4:	e7f7      	b.n	8005da6 <__swsetup_r+0xba>
 8005db6:	bf00      	nop
 8005db8:	20000010 	.word	0x20000010
 8005dbc:	080089bc 	.word	0x080089bc
 8005dc0:	080089dc 	.word	0x080089dc
 8005dc4:	0800899c 	.word	0x0800899c

08005dc8 <quorem>:
 8005dc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dcc:	6903      	ldr	r3, [r0, #16]
 8005dce:	690c      	ldr	r4, [r1, #16]
 8005dd0:	42a3      	cmp	r3, r4
 8005dd2:	4607      	mov	r7, r0
 8005dd4:	f2c0 8081 	blt.w	8005eda <quorem+0x112>
 8005dd8:	3c01      	subs	r4, #1
 8005dda:	f101 0814 	add.w	r8, r1, #20
 8005dde:	f100 0514 	add.w	r5, r0, #20
 8005de2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005de6:	9301      	str	r3, [sp, #4]
 8005de8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005dec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005df0:	3301      	adds	r3, #1
 8005df2:	429a      	cmp	r2, r3
 8005df4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005df8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005dfc:	fbb2 f6f3 	udiv	r6, r2, r3
 8005e00:	d331      	bcc.n	8005e66 <quorem+0x9e>
 8005e02:	f04f 0e00 	mov.w	lr, #0
 8005e06:	4640      	mov	r0, r8
 8005e08:	46ac      	mov	ip, r5
 8005e0a:	46f2      	mov	sl, lr
 8005e0c:	f850 2b04 	ldr.w	r2, [r0], #4
 8005e10:	b293      	uxth	r3, r2
 8005e12:	fb06 e303 	mla	r3, r6, r3, lr
 8005e16:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	ebaa 0303 	sub.w	r3, sl, r3
 8005e20:	f8dc a000 	ldr.w	sl, [ip]
 8005e24:	0c12      	lsrs	r2, r2, #16
 8005e26:	fa13 f38a 	uxtah	r3, r3, sl
 8005e2a:	fb06 e202 	mla	r2, r6, r2, lr
 8005e2e:	9300      	str	r3, [sp, #0]
 8005e30:	9b00      	ldr	r3, [sp, #0]
 8005e32:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005e36:	b292      	uxth	r2, r2
 8005e38:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005e3c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005e40:	f8bd 3000 	ldrh.w	r3, [sp]
 8005e44:	4581      	cmp	r9, r0
 8005e46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e4a:	f84c 3b04 	str.w	r3, [ip], #4
 8005e4e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005e52:	d2db      	bcs.n	8005e0c <quorem+0x44>
 8005e54:	f855 300b 	ldr.w	r3, [r5, fp]
 8005e58:	b92b      	cbnz	r3, 8005e66 <quorem+0x9e>
 8005e5a:	9b01      	ldr	r3, [sp, #4]
 8005e5c:	3b04      	subs	r3, #4
 8005e5e:	429d      	cmp	r5, r3
 8005e60:	461a      	mov	r2, r3
 8005e62:	d32e      	bcc.n	8005ec2 <quorem+0xfa>
 8005e64:	613c      	str	r4, [r7, #16]
 8005e66:	4638      	mov	r0, r7
 8005e68:	f001 fae4 	bl	8007434 <__mcmp>
 8005e6c:	2800      	cmp	r0, #0
 8005e6e:	db24      	blt.n	8005eba <quorem+0xf2>
 8005e70:	3601      	adds	r6, #1
 8005e72:	4628      	mov	r0, r5
 8005e74:	f04f 0c00 	mov.w	ip, #0
 8005e78:	f858 2b04 	ldr.w	r2, [r8], #4
 8005e7c:	f8d0 e000 	ldr.w	lr, [r0]
 8005e80:	b293      	uxth	r3, r2
 8005e82:	ebac 0303 	sub.w	r3, ip, r3
 8005e86:	0c12      	lsrs	r2, r2, #16
 8005e88:	fa13 f38e 	uxtah	r3, r3, lr
 8005e8c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005e90:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e9a:	45c1      	cmp	r9, r8
 8005e9c:	f840 3b04 	str.w	r3, [r0], #4
 8005ea0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005ea4:	d2e8      	bcs.n	8005e78 <quorem+0xb0>
 8005ea6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005eaa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005eae:	b922      	cbnz	r2, 8005eba <quorem+0xf2>
 8005eb0:	3b04      	subs	r3, #4
 8005eb2:	429d      	cmp	r5, r3
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	d30a      	bcc.n	8005ece <quorem+0x106>
 8005eb8:	613c      	str	r4, [r7, #16]
 8005eba:	4630      	mov	r0, r6
 8005ebc:	b003      	add	sp, #12
 8005ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ec2:	6812      	ldr	r2, [r2, #0]
 8005ec4:	3b04      	subs	r3, #4
 8005ec6:	2a00      	cmp	r2, #0
 8005ec8:	d1cc      	bne.n	8005e64 <quorem+0x9c>
 8005eca:	3c01      	subs	r4, #1
 8005ecc:	e7c7      	b.n	8005e5e <quorem+0x96>
 8005ece:	6812      	ldr	r2, [r2, #0]
 8005ed0:	3b04      	subs	r3, #4
 8005ed2:	2a00      	cmp	r2, #0
 8005ed4:	d1f0      	bne.n	8005eb8 <quorem+0xf0>
 8005ed6:	3c01      	subs	r4, #1
 8005ed8:	e7eb      	b.n	8005eb2 <quorem+0xea>
 8005eda:	2000      	movs	r0, #0
 8005edc:	e7ee      	b.n	8005ebc <quorem+0xf4>
	...

08005ee0 <_dtoa_r>:
 8005ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ee4:	ed2d 8b04 	vpush	{d8-d9}
 8005ee8:	ec57 6b10 	vmov	r6, r7, d0
 8005eec:	b093      	sub	sp, #76	; 0x4c
 8005eee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005ef0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005ef4:	9106      	str	r1, [sp, #24]
 8005ef6:	ee10 aa10 	vmov	sl, s0
 8005efa:	4604      	mov	r4, r0
 8005efc:	9209      	str	r2, [sp, #36]	; 0x24
 8005efe:	930c      	str	r3, [sp, #48]	; 0x30
 8005f00:	46bb      	mov	fp, r7
 8005f02:	b975      	cbnz	r5, 8005f22 <_dtoa_r+0x42>
 8005f04:	2010      	movs	r0, #16
 8005f06:	f000 fffd 	bl	8006f04 <malloc>
 8005f0a:	4602      	mov	r2, r0
 8005f0c:	6260      	str	r0, [r4, #36]	; 0x24
 8005f0e:	b920      	cbnz	r0, 8005f1a <_dtoa_r+0x3a>
 8005f10:	4ba7      	ldr	r3, [pc, #668]	; (80061b0 <_dtoa_r+0x2d0>)
 8005f12:	21ea      	movs	r1, #234	; 0xea
 8005f14:	48a7      	ldr	r0, [pc, #668]	; (80061b4 <_dtoa_r+0x2d4>)
 8005f16:	f001 fe45 	bl	8007ba4 <__assert_func>
 8005f1a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005f1e:	6005      	str	r5, [r0, #0]
 8005f20:	60c5      	str	r5, [r0, #12]
 8005f22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f24:	6819      	ldr	r1, [r3, #0]
 8005f26:	b151      	cbz	r1, 8005f3e <_dtoa_r+0x5e>
 8005f28:	685a      	ldr	r2, [r3, #4]
 8005f2a:	604a      	str	r2, [r1, #4]
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	4093      	lsls	r3, r2
 8005f30:	608b      	str	r3, [r1, #8]
 8005f32:	4620      	mov	r0, r4
 8005f34:	f001 f83c 	bl	8006fb0 <_Bfree>
 8005f38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	601a      	str	r2, [r3, #0]
 8005f3e:	1e3b      	subs	r3, r7, #0
 8005f40:	bfaa      	itet	ge
 8005f42:	2300      	movge	r3, #0
 8005f44:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005f48:	f8c8 3000 	strge.w	r3, [r8]
 8005f4c:	4b9a      	ldr	r3, [pc, #616]	; (80061b8 <_dtoa_r+0x2d8>)
 8005f4e:	bfbc      	itt	lt
 8005f50:	2201      	movlt	r2, #1
 8005f52:	f8c8 2000 	strlt.w	r2, [r8]
 8005f56:	ea33 030b 	bics.w	r3, r3, fp
 8005f5a:	d11b      	bne.n	8005f94 <_dtoa_r+0xb4>
 8005f5c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005f5e:	f242 730f 	movw	r3, #9999	; 0x270f
 8005f62:	6013      	str	r3, [r2, #0]
 8005f64:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005f68:	4333      	orrs	r3, r6
 8005f6a:	f000 8592 	beq.w	8006a92 <_dtoa_r+0xbb2>
 8005f6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f70:	b963      	cbnz	r3, 8005f8c <_dtoa_r+0xac>
 8005f72:	4b92      	ldr	r3, [pc, #584]	; (80061bc <_dtoa_r+0x2dc>)
 8005f74:	e022      	b.n	8005fbc <_dtoa_r+0xdc>
 8005f76:	4b92      	ldr	r3, [pc, #584]	; (80061c0 <_dtoa_r+0x2e0>)
 8005f78:	9301      	str	r3, [sp, #4]
 8005f7a:	3308      	adds	r3, #8
 8005f7c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005f7e:	6013      	str	r3, [r2, #0]
 8005f80:	9801      	ldr	r0, [sp, #4]
 8005f82:	b013      	add	sp, #76	; 0x4c
 8005f84:	ecbd 8b04 	vpop	{d8-d9}
 8005f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f8c:	4b8b      	ldr	r3, [pc, #556]	; (80061bc <_dtoa_r+0x2dc>)
 8005f8e:	9301      	str	r3, [sp, #4]
 8005f90:	3303      	adds	r3, #3
 8005f92:	e7f3      	b.n	8005f7c <_dtoa_r+0x9c>
 8005f94:	2200      	movs	r2, #0
 8005f96:	2300      	movs	r3, #0
 8005f98:	4650      	mov	r0, sl
 8005f9a:	4659      	mov	r1, fp
 8005f9c:	f7fa fd9c 	bl	8000ad8 <__aeabi_dcmpeq>
 8005fa0:	ec4b ab19 	vmov	d9, sl, fp
 8005fa4:	4680      	mov	r8, r0
 8005fa6:	b158      	cbz	r0, 8005fc0 <_dtoa_r+0xe0>
 8005fa8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005faa:	2301      	movs	r3, #1
 8005fac:	6013      	str	r3, [r2, #0]
 8005fae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	f000 856b 	beq.w	8006a8c <_dtoa_r+0xbac>
 8005fb6:	4883      	ldr	r0, [pc, #524]	; (80061c4 <_dtoa_r+0x2e4>)
 8005fb8:	6018      	str	r0, [r3, #0]
 8005fba:	1e43      	subs	r3, r0, #1
 8005fbc:	9301      	str	r3, [sp, #4]
 8005fbe:	e7df      	b.n	8005f80 <_dtoa_r+0xa0>
 8005fc0:	ec4b ab10 	vmov	d0, sl, fp
 8005fc4:	aa10      	add	r2, sp, #64	; 0x40
 8005fc6:	a911      	add	r1, sp, #68	; 0x44
 8005fc8:	4620      	mov	r0, r4
 8005fca:	f001 fad9 	bl	8007580 <__d2b>
 8005fce:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005fd2:	ee08 0a10 	vmov	s16, r0
 8005fd6:	2d00      	cmp	r5, #0
 8005fd8:	f000 8084 	beq.w	80060e4 <_dtoa_r+0x204>
 8005fdc:	ee19 3a90 	vmov	r3, s19
 8005fe0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005fe4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005fe8:	4656      	mov	r6, sl
 8005fea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005fee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005ff2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005ff6:	4b74      	ldr	r3, [pc, #464]	; (80061c8 <_dtoa_r+0x2e8>)
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	4630      	mov	r0, r6
 8005ffc:	4639      	mov	r1, r7
 8005ffe:	f7fa f94b 	bl	8000298 <__aeabi_dsub>
 8006002:	a365      	add	r3, pc, #404	; (adr r3, 8006198 <_dtoa_r+0x2b8>)
 8006004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006008:	f7fa fafe 	bl	8000608 <__aeabi_dmul>
 800600c:	a364      	add	r3, pc, #400	; (adr r3, 80061a0 <_dtoa_r+0x2c0>)
 800600e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006012:	f7fa f943 	bl	800029c <__adddf3>
 8006016:	4606      	mov	r6, r0
 8006018:	4628      	mov	r0, r5
 800601a:	460f      	mov	r7, r1
 800601c:	f7fa fa8a 	bl	8000534 <__aeabi_i2d>
 8006020:	a361      	add	r3, pc, #388	; (adr r3, 80061a8 <_dtoa_r+0x2c8>)
 8006022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006026:	f7fa faef 	bl	8000608 <__aeabi_dmul>
 800602a:	4602      	mov	r2, r0
 800602c:	460b      	mov	r3, r1
 800602e:	4630      	mov	r0, r6
 8006030:	4639      	mov	r1, r7
 8006032:	f7fa f933 	bl	800029c <__adddf3>
 8006036:	4606      	mov	r6, r0
 8006038:	460f      	mov	r7, r1
 800603a:	f7fa fd95 	bl	8000b68 <__aeabi_d2iz>
 800603e:	2200      	movs	r2, #0
 8006040:	9000      	str	r0, [sp, #0]
 8006042:	2300      	movs	r3, #0
 8006044:	4630      	mov	r0, r6
 8006046:	4639      	mov	r1, r7
 8006048:	f7fa fd50 	bl	8000aec <__aeabi_dcmplt>
 800604c:	b150      	cbz	r0, 8006064 <_dtoa_r+0x184>
 800604e:	9800      	ldr	r0, [sp, #0]
 8006050:	f7fa fa70 	bl	8000534 <__aeabi_i2d>
 8006054:	4632      	mov	r2, r6
 8006056:	463b      	mov	r3, r7
 8006058:	f7fa fd3e 	bl	8000ad8 <__aeabi_dcmpeq>
 800605c:	b910      	cbnz	r0, 8006064 <_dtoa_r+0x184>
 800605e:	9b00      	ldr	r3, [sp, #0]
 8006060:	3b01      	subs	r3, #1
 8006062:	9300      	str	r3, [sp, #0]
 8006064:	9b00      	ldr	r3, [sp, #0]
 8006066:	2b16      	cmp	r3, #22
 8006068:	d85a      	bhi.n	8006120 <_dtoa_r+0x240>
 800606a:	9a00      	ldr	r2, [sp, #0]
 800606c:	4b57      	ldr	r3, [pc, #348]	; (80061cc <_dtoa_r+0x2ec>)
 800606e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006076:	ec51 0b19 	vmov	r0, r1, d9
 800607a:	f7fa fd37 	bl	8000aec <__aeabi_dcmplt>
 800607e:	2800      	cmp	r0, #0
 8006080:	d050      	beq.n	8006124 <_dtoa_r+0x244>
 8006082:	9b00      	ldr	r3, [sp, #0]
 8006084:	3b01      	subs	r3, #1
 8006086:	9300      	str	r3, [sp, #0]
 8006088:	2300      	movs	r3, #0
 800608a:	930b      	str	r3, [sp, #44]	; 0x2c
 800608c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800608e:	1b5d      	subs	r5, r3, r5
 8006090:	1e6b      	subs	r3, r5, #1
 8006092:	9305      	str	r3, [sp, #20]
 8006094:	bf45      	ittet	mi
 8006096:	f1c5 0301 	rsbmi	r3, r5, #1
 800609a:	9304      	strmi	r3, [sp, #16]
 800609c:	2300      	movpl	r3, #0
 800609e:	2300      	movmi	r3, #0
 80060a0:	bf4c      	ite	mi
 80060a2:	9305      	strmi	r3, [sp, #20]
 80060a4:	9304      	strpl	r3, [sp, #16]
 80060a6:	9b00      	ldr	r3, [sp, #0]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	db3d      	blt.n	8006128 <_dtoa_r+0x248>
 80060ac:	9b05      	ldr	r3, [sp, #20]
 80060ae:	9a00      	ldr	r2, [sp, #0]
 80060b0:	920a      	str	r2, [sp, #40]	; 0x28
 80060b2:	4413      	add	r3, r2
 80060b4:	9305      	str	r3, [sp, #20]
 80060b6:	2300      	movs	r3, #0
 80060b8:	9307      	str	r3, [sp, #28]
 80060ba:	9b06      	ldr	r3, [sp, #24]
 80060bc:	2b09      	cmp	r3, #9
 80060be:	f200 8089 	bhi.w	80061d4 <_dtoa_r+0x2f4>
 80060c2:	2b05      	cmp	r3, #5
 80060c4:	bfc4      	itt	gt
 80060c6:	3b04      	subgt	r3, #4
 80060c8:	9306      	strgt	r3, [sp, #24]
 80060ca:	9b06      	ldr	r3, [sp, #24]
 80060cc:	f1a3 0302 	sub.w	r3, r3, #2
 80060d0:	bfcc      	ite	gt
 80060d2:	2500      	movgt	r5, #0
 80060d4:	2501      	movle	r5, #1
 80060d6:	2b03      	cmp	r3, #3
 80060d8:	f200 8087 	bhi.w	80061ea <_dtoa_r+0x30a>
 80060dc:	e8df f003 	tbb	[pc, r3]
 80060e0:	59383a2d 	.word	0x59383a2d
 80060e4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80060e8:	441d      	add	r5, r3
 80060ea:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80060ee:	2b20      	cmp	r3, #32
 80060f0:	bfc1      	itttt	gt
 80060f2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80060f6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80060fa:	fa0b f303 	lslgt.w	r3, fp, r3
 80060fe:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006102:	bfda      	itte	le
 8006104:	f1c3 0320 	rsble	r3, r3, #32
 8006108:	fa06 f003 	lslle.w	r0, r6, r3
 800610c:	4318      	orrgt	r0, r3
 800610e:	f7fa fa01 	bl	8000514 <__aeabi_ui2d>
 8006112:	2301      	movs	r3, #1
 8006114:	4606      	mov	r6, r0
 8006116:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800611a:	3d01      	subs	r5, #1
 800611c:	930e      	str	r3, [sp, #56]	; 0x38
 800611e:	e76a      	b.n	8005ff6 <_dtoa_r+0x116>
 8006120:	2301      	movs	r3, #1
 8006122:	e7b2      	b.n	800608a <_dtoa_r+0x1aa>
 8006124:	900b      	str	r0, [sp, #44]	; 0x2c
 8006126:	e7b1      	b.n	800608c <_dtoa_r+0x1ac>
 8006128:	9b04      	ldr	r3, [sp, #16]
 800612a:	9a00      	ldr	r2, [sp, #0]
 800612c:	1a9b      	subs	r3, r3, r2
 800612e:	9304      	str	r3, [sp, #16]
 8006130:	4253      	negs	r3, r2
 8006132:	9307      	str	r3, [sp, #28]
 8006134:	2300      	movs	r3, #0
 8006136:	930a      	str	r3, [sp, #40]	; 0x28
 8006138:	e7bf      	b.n	80060ba <_dtoa_r+0x1da>
 800613a:	2300      	movs	r3, #0
 800613c:	9308      	str	r3, [sp, #32]
 800613e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006140:	2b00      	cmp	r3, #0
 8006142:	dc55      	bgt.n	80061f0 <_dtoa_r+0x310>
 8006144:	2301      	movs	r3, #1
 8006146:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800614a:	461a      	mov	r2, r3
 800614c:	9209      	str	r2, [sp, #36]	; 0x24
 800614e:	e00c      	b.n	800616a <_dtoa_r+0x28a>
 8006150:	2301      	movs	r3, #1
 8006152:	e7f3      	b.n	800613c <_dtoa_r+0x25c>
 8006154:	2300      	movs	r3, #0
 8006156:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006158:	9308      	str	r3, [sp, #32]
 800615a:	9b00      	ldr	r3, [sp, #0]
 800615c:	4413      	add	r3, r2
 800615e:	9302      	str	r3, [sp, #8]
 8006160:	3301      	adds	r3, #1
 8006162:	2b01      	cmp	r3, #1
 8006164:	9303      	str	r3, [sp, #12]
 8006166:	bfb8      	it	lt
 8006168:	2301      	movlt	r3, #1
 800616a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800616c:	2200      	movs	r2, #0
 800616e:	6042      	str	r2, [r0, #4]
 8006170:	2204      	movs	r2, #4
 8006172:	f102 0614 	add.w	r6, r2, #20
 8006176:	429e      	cmp	r6, r3
 8006178:	6841      	ldr	r1, [r0, #4]
 800617a:	d93d      	bls.n	80061f8 <_dtoa_r+0x318>
 800617c:	4620      	mov	r0, r4
 800617e:	f000 fed7 	bl	8006f30 <_Balloc>
 8006182:	9001      	str	r0, [sp, #4]
 8006184:	2800      	cmp	r0, #0
 8006186:	d13b      	bne.n	8006200 <_dtoa_r+0x320>
 8006188:	4b11      	ldr	r3, [pc, #68]	; (80061d0 <_dtoa_r+0x2f0>)
 800618a:	4602      	mov	r2, r0
 800618c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006190:	e6c0      	b.n	8005f14 <_dtoa_r+0x34>
 8006192:	2301      	movs	r3, #1
 8006194:	e7df      	b.n	8006156 <_dtoa_r+0x276>
 8006196:	bf00      	nop
 8006198:	636f4361 	.word	0x636f4361
 800619c:	3fd287a7 	.word	0x3fd287a7
 80061a0:	8b60c8b3 	.word	0x8b60c8b3
 80061a4:	3fc68a28 	.word	0x3fc68a28
 80061a8:	509f79fb 	.word	0x509f79fb
 80061ac:	3fd34413 	.word	0x3fd34413
 80061b0:	08008919 	.word	0x08008919
 80061b4:	08008930 	.word	0x08008930
 80061b8:	7ff00000 	.word	0x7ff00000
 80061bc:	08008915 	.word	0x08008915
 80061c0:	0800890c 	.word	0x0800890c
 80061c4:	080088e9 	.word	0x080088e9
 80061c8:	3ff80000 	.word	0x3ff80000
 80061cc:	08008a80 	.word	0x08008a80
 80061d0:	0800898b 	.word	0x0800898b
 80061d4:	2501      	movs	r5, #1
 80061d6:	2300      	movs	r3, #0
 80061d8:	9306      	str	r3, [sp, #24]
 80061da:	9508      	str	r5, [sp, #32]
 80061dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80061e0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80061e4:	2200      	movs	r2, #0
 80061e6:	2312      	movs	r3, #18
 80061e8:	e7b0      	b.n	800614c <_dtoa_r+0x26c>
 80061ea:	2301      	movs	r3, #1
 80061ec:	9308      	str	r3, [sp, #32]
 80061ee:	e7f5      	b.n	80061dc <_dtoa_r+0x2fc>
 80061f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061f2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80061f6:	e7b8      	b.n	800616a <_dtoa_r+0x28a>
 80061f8:	3101      	adds	r1, #1
 80061fa:	6041      	str	r1, [r0, #4]
 80061fc:	0052      	lsls	r2, r2, #1
 80061fe:	e7b8      	b.n	8006172 <_dtoa_r+0x292>
 8006200:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006202:	9a01      	ldr	r2, [sp, #4]
 8006204:	601a      	str	r2, [r3, #0]
 8006206:	9b03      	ldr	r3, [sp, #12]
 8006208:	2b0e      	cmp	r3, #14
 800620a:	f200 809d 	bhi.w	8006348 <_dtoa_r+0x468>
 800620e:	2d00      	cmp	r5, #0
 8006210:	f000 809a 	beq.w	8006348 <_dtoa_r+0x468>
 8006214:	9b00      	ldr	r3, [sp, #0]
 8006216:	2b00      	cmp	r3, #0
 8006218:	dd32      	ble.n	8006280 <_dtoa_r+0x3a0>
 800621a:	4ab7      	ldr	r2, [pc, #732]	; (80064f8 <_dtoa_r+0x618>)
 800621c:	f003 030f 	and.w	r3, r3, #15
 8006220:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006224:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006228:	9b00      	ldr	r3, [sp, #0]
 800622a:	05d8      	lsls	r0, r3, #23
 800622c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006230:	d516      	bpl.n	8006260 <_dtoa_r+0x380>
 8006232:	4bb2      	ldr	r3, [pc, #712]	; (80064fc <_dtoa_r+0x61c>)
 8006234:	ec51 0b19 	vmov	r0, r1, d9
 8006238:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800623c:	f7fa fb0e 	bl	800085c <__aeabi_ddiv>
 8006240:	f007 070f 	and.w	r7, r7, #15
 8006244:	4682      	mov	sl, r0
 8006246:	468b      	mov	fp, r1
 8006248:	2503      	movs	r5, #3
 800624a:	4eac      	ldr	r6, [pc, #688]	; (80064fc <_dtoa_r+0x61c>)
 800624c:	b957      	cbnz	r7, 8006264 <_dtoa_r+0x384>
 800624e:	4642      	mov	r2, r8
 8006250:	464b      	mov	r3, r9
 8006252:	4650      	mov	r0, sl
 8006254:	4659      	mov	r1, fp
 8006256:	f7fa fb01 	bl	800085c <__aeabi_ddiv>
 800625a:	4682      	mov	sl, r0
 800625c:	468b      	mov	fp, r1
 800625e:	e028      	b.n	80062b2 <_dtoa_r+0x3d2>
 8006260:	2502      	movs	r5, #2
 8006262:	e7f2      	b.n	800624a <_dtoa_r+0x36a>
 8006264:	07f9      	lsls	r1, r7, #31
 8006266:	d508      	bpl.n	800627a <_dtoa_r+0x39a>
 8006268:	4640      	mov	r0, r8
 800626a:	4649      	mov	r1, r9
 800626c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006270:	f7fa f9ca 	bl	8000608 <__aeabi_dmul>
 8006274:	3501      	adds	r5, #1
 8006276:	4680      	mov	r8, r0
 8006278:	4689      	mov	r9, r1
 800627a:	107f      	asrs	r7, r7, #1
 800627c:	3608      	adds	r6, #8
 800627e:	e7e5      	b.n	800624c <_dtoa_r+0x36c>
 8006280:	f000 809b 	beq.w	80063ba <_dtoa_r+0x4da>
 8006284:	9b00      	ldr	r3, [sp, #0]
 8006286:	4f9d      	ldr	r7, [pc, #628]	; (80064fc <_dtoa_r+0x61c>)
 8006288:	425e      	negs	r6, r3
 800628a:	4b9b      	ldr	r3, [pc, #620]	; (80064f8 <_dtoa_r+0x618>)
 800628c:	f006 020f 	and.w	r2, r6, #15
 8006290:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006298:	ec51 0b19 	vmov	r0, r1, d9
 800629c:	f7fa f9b4 	bl	8000608 <__aeabi_dmul>
 80062a0:	1136      	asrs	r6, r6, #4
 80062a2:	4682      	mov	sl, r0
 80062a4:	468b      	mov	fp, r1
 80062a6:	2300      	movs	r3, #0
 80062a8:	2502      	movs	r5, #2
 80062aa:	2e00      	cmp	r6, #0
 80062ac:	d17a      	bne.n	80063a4 <_dtoa_r+0x4c4>
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d1d3      	bne.n	800625a <_dtoa_r+0x37a>
 80062b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	f000 8082 	beq.w	80063be <_dtoa_r+0x4de>
 80062ba:	4b91      	ldr	r3, [pc, #580]	; (8006500 <_dtoa_r+0x620>)
 80062bc:	2200      	movs	r2, #0
 80062be:	4650      	mov	r0, sl
 80062c0:	4659      	mov	r1, fp
 80062c2:	f7fa fc13 	bl	8000aec <__aeabi_dcmplt>
 80062c6:	2800      	cmp	r0, #0
 80062c8:	d079      	beq.n	80063be <_dtoa_r+0x4de>
 80062ca:	9b03      	ldr	r3, [sp, #12]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d076      	beq.n	80063be <_dtoa_r+0x4de>
 80062d0:	9b02      	ldr	r3, [sp, #8]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	dd36      	ble.n	8006344 <_dtoa_r+0x464>
 80062d6:	9b00      	ldr	r3, [sp, #0]
 80062d8:	4650      	mov	r0, sl
 80062da:	4659      	mov	r1, fp
 80062dc:	1e5f      	subs	r7, r3, #1
 80062de:	2200      	movs	r2, #0
 80062e0:	4b88      	ldr	r3, [pc, #544]	; (8006504 <_dtoa_r+0x624>)
 80062e2:	f7fa f991 	bl	8000608 <__aeabi_dmul>
 80062e6:	9e02      	ldr	r6, [sp, #8]
 80062e8:	4682      	mov	sl, r0
 80062ea:	468b      	mov	fp, r1
 80062ec:	3501      	adds	r5, #1
 80062ee:	4628      	mov	r0, r5
 80062f0:	f7fa f920 	bl	8000534 <__aeabi_i2d>
 80062f4:	4652      	mov	r2, sl
 80062f6:	465b      	mov	r3, fp
 80062f8:	f7fa f986 	bl	8000608 <__aeabi_dmul>
 80062fc:	4b82      	ldr	r3, [pc, #520]	; (8006508 <_dtoa_r+0x628>)
 80062fe:	2200      	movs	r2, #0
 8006300:	f7f9 ffcc 	bl	800029c <__adddf3>
 8006304:	46d0      	mov	r8, sl
 8006306:	46d9      	mov	r9, fp
 8006308:	4682      	mov	sl, r0
 800630a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800630e:	2e00      	cmp	r6, #0
 8006310:	d158      	bne.n	80063c4 <_dtoa_r+0x4e4>
 8006312:	4b7e      	ldr	r3, [pc, #504]	; (800650c <_dtoa_r+0x62c>)
 8006314:	2200      	movs	r2, #0
 8006316:	4640      	mov	r0, r8
 8006318:	4649      	mov	r1, r9
 800631a:	f7f9 ffbd 	bl	8000298 <__aeabi_dsub>
 800631e:	4652      	mov	r2, sl
 8006320:	465b      	mov	r3, fp
 8006322:	4680      	mov	r8, r0
 8006324:	4689      	mov	r9, r1
 8006326:	f7fa fbff 	bl	8000b28 <__aeabi_dcmpgt>
 800632a:	2800      	cmp	r0, #0
 800632c:	f040 8295 	bne.w	800685a <_dtoa_r+0x97a>
 8006330:	4652      	mov	r2, sl
 8006332:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006336:	4640      	mov	r0, r8
 8006338:	4649      	mov	r1, r9
 800633a:	f7fa fbd7 	bl	8000aec <__aeabi_dcmplt>
 800633e:	2800      	cmp	r0, #0
 8006340:	f040 8289 	bne.w	8006856 <_dtoa_r+0x976>
 8006344:	ec5b ab19 	vmov	sl, fp, d9
 8006348:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800634a:	2b00      	cmp	r3, #0
 800634c:	f2c0 8148 	blt.w	80065e0 <_dtoa_r+0x700>
 8006350:	9a00      	ldr	r2, [sp, #0]
 8006352:	2a0e      	cmp	r2, #14
 8006354:	f300 8144 	bgt.w	80065e0 <_dtoa_r+0x700>
 8006358:	4b67      	ldr	r3, [pc, #412]	; (80064f8 <_dtoa_r+0x618>)
 800635a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800635e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006362:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006364:	2b00      	cmp	r3, #0
 8006366:	f280 80d5 	bge.w	8006514 <_dtoa_r+0x634>
 800636a:	9b03      	ldr	r3, [sp, #12]
 800636c:	2b00      	cmp	r3, #0
 800636e:	f300 80d1 	bgt.w	8006514 <_dtoa_r+0x634>
 8006372:	f040 826f 	bne.w	8006854 <_dtoa_r+0x974>
 8006376:	4b65      	ldr	r3, [pc, #404]	; (800650c <_dtoa_r+0x62c>)
 8006378:	2200      	movs	r2, #0
 800637a:	4640      	mov	r0, r8
 800637c:	4649      	mov	r1, r9
 800637e:	f7fa f943 	bl	8000608 <__aeabi_dmul>
 8006382:	4652      	mov	r2, sl
 8006384:	465b      	mov	r3, fp
 8006386:	f7fa fbc5 	bl	8000b14 <__aeabi_dcmpge>
 800638a:	9e03      	ldr	r6, [sp, #12]
 800638c:	4637      	mov	r7, r6
 800638e:	2800      	cmp	r0, #0
 8006390:	f040 8245 	bne.w	800681e <_dtoa_r+0x93e>
 8006394:	9d01      	ldr	r5, [sp, #4]
 8006396:	2331      	movs	r3, #49	; 0x31
 8006398:	f805 3b01 	strb.w	r3, [r5], #1
 800639c:	9b00      	ldr	r3, [sp, #0]
 800639e:	3301      	adds	r3, #1
 80063a0:	9300      	str	r3, [sp, #0]
 80063a2:	e240      	b.n	8006826 <_dtoa_r+0x946>
 80063a4:	07f2      	lsls	r2, r6, #31
 80063a6:	d505      	bpl.n	80063b4 <_dtoa_r+0x4d4>
 80063a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063ac:	f7fa f92c 	bl	8000608 <__aeabi_dmul>
 80063b0:	3501      	adds	r5, #1
 80063b2:	2301      	movs	r3, #1
 80063b4:	1076      	asrs	r6, r6, #1
 80063b6:	3708      	adds	r7, #8
 80063b8:	e777      	b.n	80062aa <_dtoa_r+0x3ca>
 80063ba:	2502      	movs	r5, #2
 80063bc:	e779      	b.n	80062b2 <_dtoa_r+0x3d2>
 80063be:	9f00      	ldr	r7, [sp, #0]
 80063c0:	9e03      	ldr	r6, [sp, #12]
 80063c2:	e794      	b.n	80062ee <_dtoa_r+0x40e>
 80063c4:	9901      	ldr	r1, [sp, #4]
 80063c6:	4b4c      	ldr	r3, [pc, #304]	; (80064f8 <_dtoa_r+0x618>)
 80063c8:	4431      	add	r1, r6
 80063ca:	910d      	str	r1, [sp, #52]	; 0x34
 80063cc:	9908      	ldr	r1, [sp, #32]
 80063ce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80063d2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80063d6:	2900      	cmp	r1, #0
 80063d8:	d043      	beq.n	8006462 <_dtoa_r+0x582>
 80063da:	494d      	ldr	r1, [pc, #308]	; (8006510 <_dtoa_r+0x630>)
 80063dc:	2000      	movs	r0, #0
 80063de:	f7fa fa3d 	bl	800085c <__aeabi_ddiv>
 80063e2:	4652      	mov	r2, sl
 80063e4:	465b      	mov	r3, fp
 80063e6:	f7f9 ff57 	bl	8000298 <__aeabi_dsub>
 80063ea:	9d01      	ldr	r5, [sp, #4]
 80063ec:	4682      	mov	sl, r0
 80063ee:	468b      	mov	fp, r1
 80063f0:	4649      	mov	r1, r9
 80063f2:	4640      	mov	r0, r8
 80063f4:	f7fa fbb8 	bl	8000b68 <__aeabi_d2iz>
 80063f8:	4606      	mov	r6, r0
 80063fa:	f7fa f89b 	bl	8000534 <__aeabi_i2d>
 80063fe:	4602      	mov	r2, r0
 8006400:	460b      	mov	r3, r1
 8006402:	4640      	mov	r0, r8
 8006404:	4649      	mov	r1, r9
 8006406:	f7f9 ff47 	bl	8000298 <__aeabi_dsub>
 800640a:	3630      	adds	r6, #48	; 0x30
 800640c:	f805 6b01 	strb.w	r6, [r5], #1
 8006410:	4652      	mov	r2, sl
 8006412:	465b      	mov	r3, fp
 8006414:	4680      	mov	r8, r0
 8006416:	4689      	mov	r9, r1
 8006418:	f7fa fb68 	bl	8000aec <__aeabi_dcmplt>
 800641c:	2800      	cmp	r0, #0
 800641e:	d163      	bne.n	80064e8 <_dtoa_r+0x608>
 8006420:	4642      	mov	r2, r8
 8006422:	464b      	mov	r3, r9
 8006424:	4936      	ldr	r1, [pc, #216]	; (8006500 <_dtoa_r+0x620>)
 8006426:	2000      	movs	r0, #0
 8006428:	f7f9 ff36 	bl	8000298 <__aeabi_dsub>
 800642c:	4652      	mov	r2, sl
 800642e:	465b      	mov	r3, fp
 8006430:	f7fa fb5c 	bl	8000aec <__aeabi_dcmplt>
 8006434:	2800      	cmp	r0, #0
 8006436:	f040 80b5 	bne.w	80065a4 <_dtoa_r+0x6c4>
 800643a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800643c:	429d      	cmp	r5, r3
 800643e:	d081      	beq.n	8006344 <_dtoa_r+0x464>
 8006440:	4b30      	ldr	r3, [pc, #192]	; (8006504 <_dtoa_r+0x624>)
 8006442:	2200      	movs	r2, #0
 8006444:	4650      	mov	r0, sl
 8006446:	4659      	mov	r1, fp
 8006448:	f7fa f8de 	bl	8000608 <__aeabi_dmul>
 800644c:	4b2d      	ldr	r3, [pc, #180]	; (8006504 <_dtoa_r+0x624>)
 800644e:	4682      	mov	sl, r0
 8006450:	468b      	mov	fp, r1
 8006452:	4640      	mov	r0, r8
 8006454:	4649      	mov	r1, r9
 8006456:	2200      	movs	r2, #0
 8006458:	f7fa f8d6 	bl	8000608 <__aeabi_dmul>
 800645c:	4680      	mov	r8, r0
 800645e:	4689      	mov	r9, r1
 8006460:	e7c6      	b.n	80063f0 <_dtoa_r+0x510>
 8006462:	4650      	mov	r0, sl
 8006464:	4659      	mov	r1, fp
 8006466:	f7fa f8cf 	bl	8000608 <__aeabi_dmul>
 800646a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800646c:	9d01      	ldr	r5, [sp, #4]
 800646e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006470:	4682      	mov	sl, r0
 8006472:	468b      	mov	fp, r1
 8006474:	4649      	mov	r1, r9
 8006476:	4640      	mov	r0, r8
 8006478:	f7fa fb76 	bl	8000b68 <__aeabi_d2iz>
 800647c:	4606      	mov	r6, r0
 800647e:	f7fa f859 	bl	8000534 <__aeabi_i2d>
 8006482:	3630      	adds	r6, #48	; 0x30
 8006484:	4602      	mov	r2, r0
 8006486:	460b      	mov	r3, r1
 8006488:	4640      	mov	r0, r8
 800648a:	4649      	mov	r1, r9
 800648c:	f7f9 ff04 	bl	8000298 <__aeabi_dsub>
 8006490:	f805 6b01 	strb.w	r6, [r5], #1
 8006494:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006496:	429d      	cmp	r5, r3
 8006498:	4680      	mov	r8, r0
 800649a:	4689      	mov	r9, r1
 800649c:	f04f 0200 	mov.w	r2, #0
 80064a0:	d124      	bne.n	80064ec <_dtoa_r+0x60c>
 80064a2:	4b1b      	ldr	r3, [pc, #108]	; (8006510 <_dtoa_r+0x630>)
 80064a4:	4650      	mov	r0, sl
 80064a6:	4659      	mov	r1, fp
 80064a8:	f7f9 fef8 	bl	800029c <__adddf3>
 80064ac:	4602      	mov	r2, r0
 80064ae:	460b      	mov	r3, r1
 80064b0:	4640      	mov	r0, r8
 80064b2:	4649      	mov	r1, r9
 80064b4:	f7fa fb38 	bl	8000b28 <__aeabi_dcmpgt>
 80064b8:	2800      	cmp	r0, #0
 80064ba:	d173      	bne.n	80065a4 <_dtoa_r+0x6c4>
 80064bc:	4652      	mov	r2, sl
 80064be:	465b      	mov	r3, fp
 80064c0:	4913      	ldr	r1, [pc, #76]	; (8006510 <_dtoa_r+0x630>)
 80064c2:	2000      	movs	r0, #0
 80064c4:	f7f9 fee8 	bl	8000298 <__aeabi_dsub>
 80064c8:	4602      	mov	r2, r0
 80064ca:	460b      	mov	r3, r1
 80064cc:	4640      	mov	r0, r8
 80064ce:	4649      	mov	r1, r9
 80064d0:	f7fa fb0c 	bl	8000aec <__aeabi_dcmplt>
 80064d4:	2800      	cmp	r0, #0
 80064d6:	f43f af35 	beq.w	8006344 <_dtoa_r+0x464>
 80064da:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80064dc:	1e6b      	subs	r3, r5, #1
 80064de:	930f      	str	r3, [sp, #60]	; 0x3c
 80064e0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80064e4:	2b30      	cmp	r3, #48	; 0x30
 80064e6:	d0f8      	beq.n	80064da <_dtoa_r+0x5fa>
 80064e8:	9700      	str	r7, [sp, #0]
 80064ea:	e049      	b.n	8006580 <_dtoa_r+0x6a0>
 80064ec:	4b05      	ldr	r3, [pc, #20]	; (8006504 <_dtoa_r+0x624>)
 80064ee:	f7fa f88b 	bl	8000608 <__aeabi_dmul>
 80064f2:	4680      	mov	r8, r0
 80064f4:	4689      	mov	r9, r1
 80064f6:	e7bd      	b.n	8006474 <_dtoa_r+0x594>
 80064f8:	08008a80 	.word	0x08008a80
 80064fc:	08008a58 	.word	0x08008a58
 8006500:	3ff00000 	.word	0x3ff00000
 8006504:	40240000 	.word	0x40240000
 8006508:	401c0000 	.word	0x401c0000
 800650c:	40140000 	.word	0x40140000
 8006510:	3fe00000 	.word	0x3fe00000
 8006514:	9d01      	ldr	r5, [sp, #4]
 8006516:	4656      	mov	r6, sl
 8006518:	465f      	mov	r7, fp
 800651a:	4642      	mov	r2, r8
 800651c:	464b      	mov	r3, r9
 800651e:	4630      	mov	r0, r6
 8006520:	4639      	mov	r1, r7
 8006522:	f7fa f99b 	bl	800085c <__aeabi_ddiv>
 8006526:	f7fa fb1f 	bl	8000b68 <__aeabi_d2iz>
 800652a:	4682      	mov	sl, r0
 800652c:	f7fa f802 	bl	8000534 <__aeabi_i2d>
 8006530:	4642      	mov	r2, r8
 8006532:	464b      	mov	r3, r9
 8006534:	f7fa f868 	bl	8000608 <__aeabi_dmul>
 8006538:	4602      	mov	r2, r0
 800653a:	460b      	mov	r3, r1
 800653c:	4630      	mov	r0, r6
 800653e:	4639      	mov	r1, r7
 8006540:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006544:	f7f9 fea8 	bl	8000298 <__aeabi_dsub>
 8006548:	f805 6b01 	strb.w	r6, [r5], #1
 800654c:	9e01      	ldr	r6, [sp, #4]
 800654e:	9f03      	ldr	r7, [sp, #12]
 8006550:	1bae      	subs	r6, r5, r6
 8006552:	42b7      	cmp	r7, r6
 8006554:	4602      	mov	r2, r0
 8006556:	460b      	mov	r3, r1
 8006558:	d135      	bne.n	80065c6 <_dtoa_r+0x6e6>
 800655a:	f7f9 fe9f 	bl	800029c <__adddf3>
 800655e:	4642      	mov	r2, r8
 8006560:	464b      	mov	r3, r9
 8006562:	4606      	mov	r6, r0
 8006564:	460f      	mov	r7, r1
 8006566:	f7fa fadf 	bl	8000b28 <__aeabi_dcmpgt>
 800656a:	b9d0      	cbnz	r0, 80065a2 <_dtoa_r+0x6c2>
 800656c:	4642      	mov	r2, r8
 800656e:	464b      	mov	r3, r9
 8006570:	4630      	mov	r0, r6
 8006572:	4639      	mov	r1, r7
 8006574:	f7fa fab0 	bl	8000ad8 <__aeabi_dcmpeq>
 8006578:	b110      	cbz	r0, 8006580 <_dtoa_r+0x6a0>
 800657a:	f01a 0f01 	tst.w	sl, #1
 800657e:	d110      	bne.n	80065a2 <_dtoa_r+0x6c2>
 8006580:	4620      	mov	r0, r4
 8006582:	ee18 1a10 	vmov	r1, s16
 8006586:	f000 fd13 	bl	8006fb0 <_Bfree>
 800658a:	2300      	movs	r3, #0
 800658c:	9800      	ldr	r0, [sp, #0]
 800658e:	702b      	strb	r3, [r5, #0]
 8006590:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006592:	3001      	adds	r0, #1
 8006594:	6018      	str	r0, [r3, #0]
 8006596:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006598:	2b00      	cmp	r3, #0
 800659a:	f43f acf1 	beq.w	8005f80 <_dtoa_r+0xa0>
 800659e:	601d      	str	r5, [r3, #0]
 80065a0:	e4ee      	b.n	8005f80 <_dtoa_r+0xa0>
 80065a2:	9f00      	ldr	r7, [sp, #0]
 80065a4:	462b      	mov	r3, r5
 80065a6:	461d      	mov	r5, r3
 80065a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80065ac:	2a39      	cmp	r2, #57	; 0x39
 80065ae:	d106      	bne.n	80065be <_dtoa_r+0x6de>
 80065b0:	9a01      	ldr	r2, [sp, #4]
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d1f7      	bne.n	80065a6 <_dtoa_r+0x6c6>
 80065b6:	9901      	ldr	r1, [sp, #4]
 80065b8:	2230      	movs	r2, #48	; 0x30
 80065ba:	3701      	adds	r7, #1
 80065bc:	700a      	strb	r2, [r1, #0]
 80065be:	781a      	ldrb	r2, [r3, #0]
 80065c0:	3201      	adds	r2, #1
 80065c2:	701a      	strb	r2, [r3, #0]
 80065c4:	e790      	b.n	80064e8 <_dtoa_r+0x608>
 80065c6:	4ba6      	ldr	r3, [pc, #664]	; (8006860 <_dtoa_r+0x980>)
 80065c8:	2200      	movs	r2, #0
 80065ca:	f7fa f81d 	bl	8000608 <__aeabi_dmul>
 80065ce:	2200      	movs	r2, #0
 80065d0:	2300      	movs	r3, #0
 80065d2:	4606      	mov	r6, r0
 80065d4:	460f      	mov	r7, r1
 80065d6:	f7fa fa7f 	bl	8000ad8 <__aeabi_dcmpeq>
 80065da:	2800      	cmp	r0, #0
 80065dc:	d09d      	beq.n	800651a <_dtoa_r+0x63a>
 80065de:	e7cf      	b.n	8006580 <_dtoa_r+0x6a0>
 80065e0:	9a08      	ldr	r2, [sp, #32]
 80065e2:	2a00      	cmp	r2, #0
 80065e4:	f000 80d7 	beq.w	8006796 <_dtoa_r+0x8b6>
 80065e8:	9a06      	ldr	r2, [sp, #24]
 80065ea:	2a01      	cmp	r2, #1
 80065ec:	f300 80ba 	bgt.w	8006764 <_dtoa_r+0x884>
 80065f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80065f2:	2a00      	cmp	r2, #0
 80065f4:	f000 80b2 	beq.w	800675c <_dtoa_r+0x87c>
 80065f8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80065fc:	9e07      	ldr	r6, [sp, #28]
 80065fe:	9d04      	ldr	r5, [sp, #16]
 8006600:	9a04      	ldr	r2, [sp, #16]
 8006602:	441a      	add	r2, r3
 8006604:	9204      	str	r2, [sp, #16]
 8006606:	9a05      	ldr	r2, [sp, #20]
 8006608:	2101      	movs	r1, #1
 800660a:	441a      	add	r2, r3
 800660c:	4620      	mov	r0, r4
 800660e:	9205      	str	r2, [sp, #20]
 8006610:	f000 fd86 	bl	8007120 <__i2b>
 8006614:	4607      	mov	r7, r0
 8006616:	2d00      	cmp	r5, #0
 8006618:	dd0c      	ble.n	8006634 <_dtoa_r+0x754>
 800661a:	9b05      	ldr	r3, [sp, #20]
 800661c:	2b00      	cmp	r3, #0
 800661e:	dd09      	ble.n	8006634 <_dtoa_r+0x754>
 8006620:	42ab      	cmp	r3, r5
 8006622:	9a04      	ldr	r2, [sp, #16]
 8006624:	bfa8      	it	ge
 8006626:	462b      	movge	r3, r5
 8006628:	1ad2      	subs	r2, r2, r3
 800662a:	9204      	str	r2, [sp, #16]
 800662c:	9a05      	ldr	r2, [sp, #20]
 800662e:	1aed      	subs	r5, r5, r3
 8006630:	1ad3      	subs	r3, r2, r3
 8006632:	9305      	str	r3, [sp, #20]
 8006634:	9b07      	ldr	r3, [sp, #28]
 8006636:	b31b      	cbz	r3, 8006680 <_dtoa_r+0x7a0>
 8006638:	9b08      	ldr	r3, [sp, #32]
 800663a:	2b00      	cmp	r3, #0
 800663c:	f000 80af 	beq.w	800679e <_dtoa_r+0x8be>
 8006640:	2e00      	cmp	r6, #0
 8006642:	dd13      	ble.n	800666c <_dtoa_r+0x78c>
 8006644:	4639      	mov	r1, r7
 8006646:	4632      	mov	r2, r6
 8006648:	4620      	mov	r0, r4
 800664a:	f000 fe29 	bl	80072a0 <__pow5mult>
 800664e:	ee18 2a10 	vmov	r2, s16
 8006652:	4601      	mov	r1, r0
 8006654:	4607      	mov	r7, r0
 8006656:	4620      	mov	r0, r4
 8006658:	f000 fd78 	bl	800714c <__multiply>
 800665c:	ee18 1a10 	vmov	r1, s16
 8006660:	4680      	mov	r8, r0
 8006662:	4620      	mov	r0, r4
 8006664:	f000 fca4 	bl	8006fb0 <_Bfree>
 8006668:	ee08 8a10 	vmov	s16, r8
 800666c:	9b07      	ldr	r3, [sp, #28]
 800666e:	1b9a      	subs	r2, r3, r6
 8006670:	d006      	beq.n	8006680 <_dtoa_r+0x7a0>
 8006672:	ee18 1a10 	vmov	r1, s16
 8006676:	4620      	mov	r0, r4
 8006678:	f000 fe12 	bl	80072a0 <__pow5mult>
 800667c:	ee08 0a10 	vmov	s16, r0
 8006680:	2101      	movs	r1, #1
 8006682:	4620      	mov	r0, r4
 8006684:	f000 fd4c 	bl	8007120 <__i2b>
 8006688:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800668a:	2b00      	cmp	r3, #0
 800668c:	4606      	mov	r6, r0
 800668e:	f340 8088 	ble.w	80067a2 <_dtoa_r+0x8c2>
 8006692:	461a      	mov	r2, r3
 8006694:	4601      	mov	r1, r0
 8006696:	4620      	mov	r0, r4
 8006698:	f000 fe02 	bl	80072a0 <__pow5mult>
 800669c:	9b06      	ldr	r3, [sp, #24]
 800669e:	2b01      	cmp	r3, #1
 80066a0:	4606      	mov	r6, r0
 80066a2:	f340 8081 	ble.w	80067a8 <_dtoa_r+0x8c8>
 80066a6:	f04f 0800 	mov.w	r8, #0
 80066aa:	6933      	ldr	r3, [r6, #16]
 80066ac:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80066b0:	6918      	ldr	r0, [r3, #16]
 80066b2:	f000 fce5 	bl	8007080 <__hi0bits>
 80066b6:	f1c0 0020 	rsb	r0, r0, #32
 80066ba:	9b05      	ldr	r3, [sp, #20]
 80066bc:	4418      	add	r0, r3
 80066be:	f010 001f 	ands.w	r0, r0, #31
 80066c2:	f000 8092 	beq.w	80067ea <_dtoa_r+0x90a>
 80066c6:	f1c0 0320 	rsb	r3, r0, #32
 80066ca:	2b04      	cmp	r3, #4
 80066cc:	f340 808a 	ble.w	80067e4 <_dtoa_r+0x904>
 80066d0:	f1c0 001c 	rsb	r0, r0, #28
 80066d4:	9b04      	ldr	r3, [sp, #16]
 80066d6:	4403      	add	r3, r0
 80066d8:	9304      	str	r3, [sp, #16]
 80066da:	9b05      	ldr	r3, [sp, #20]
 80066dc:	4403      	add	r3, r0
 80066de:	4405      	add	r5, r0
 80066e0:	9305      	str	r3, [sp, #20]
 80066e2:	9b04      	ldr	r3, [sp, #16]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	dd07      	ble.n	80066f8 <_dtoa_r+0x818>
 80066e8:	ee18 1a10 	vmov	r1, s16
 80066ec:	461a      	mov	r2, r3
 80066ee:	4620      	mov	r0, r4
 80066f0:	f000 fe30 	bl	8007354 <__lshift>
 80066f4:	ee08 0a10 	vmov	s16, r0
 80066f8:	9b05      	ldr	r3, [sp, #20]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	dd05      	ble.n	800670a <_dtoa_r+0x82a>
 80066fe:	4631      	mov	r1, r6
 8006700:	461a      	mov	r2, r3
 8006702:	4620      	mov	r0, r4
 8006704:	f000 fe26 	bl	8007354 <__lshift>
 8006708:	4606      	mov	r6, r0
 800670a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800670c:	2b00      	cmp	r3, #0
 800670e:	d06e      	beq.n	80067ee <_dtoa_r+0x90e>
 8006710:	ee18 0a10 	vmov	r0, s16
 8006714:	4631      	mov	r1, r6
 8006716:	f000 fe8d 	bl	8007434 <__mcmp>
 800671a:	2800      	cmp	r0, #0
 800671c:	da67      	bge.n	80067ee <_dtoa_r+0x90e>
 800671e:	9b00      	ldr	r3, [sp, #0]
 8006720:	3b01      	subs	r3, #1
 8006722:	ee18 1a10 	vmov	r1, s16
 8006726:	9300      	str	r3, [sp, #0]
 8006728:	220a      	movs	r2, #10
 800672a:	2300      	movs	r3, #0
 800672c:	4620      	mov	r0, r4
 800672e:	f000 fc61 	bl	8006ff4 <__multadd>
 8006732:	9b08      	ldr	r3, [sp, #32]
 8006734:	ee08 0a10 	vmov	s16, r0
 8006738:	2b00      	cmp	r3, #0
 800673a:	f000 81b1 	beq.w	8006aa0 <_dtoa_r+0xbc0>
 800673e:	2300      	movs	r3, #0
 8006740:	4639      	mov	r1, r7
 8006742:	220a      	movs	r2, #10
 8006744:	4620      	mov	r0, r4
 8006746:	f000 fc55 	bl	8006ff4 <__multadd>
 800674a:	9b02      	ldr	r3, [sp, #8]
 800674c:	2b00      	cmp	r3, #0
 800674e:	4607      	mov	r7, r0
 8006750:	f300 808e 	bgt.w	8006870 <_dtoa_r+0x990>
 8006754:	9b06      	ldr	r3, [sp, #24]
 8006756:	2b02      	cmp	r3, #2
 8006758:	dc51      	bgt.n	80067fe <_dtoa_r+0x91e>
 800675a:	e089      	b.n	8006870 <_dtoa_r+0x990>
 800675c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800675e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006762:	e74b      	b.n	80065fc <_dtoa_r+0x71c>
 8006764:	9b03      	ldr	r3, [sp, #12]
 8006766:	1e5e      	subs	r6, r3, #1
 8006768:	9b07      	ldr	r3, [sp, #28]
 800676a:	42b3      	cmp	r3, r6
 800676c:	bfbf      	itttt	lt
 800676e:	9b07      	ldrlt	r3, [sp, #28]
 8006770:	9607      	strlt	r6, [sp, #28]
 8006772:	1af2      	sublt	r2, r6, r3
 8006774:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006776:	bfb6      	itet	lt
 8006778:	189b      	addlt	r3, r3, r2
 800677a:	1b9e      	subge	r6, r3, r6
 800677c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800677e:	9b03      	ldr	r3, [sp, #12]
 8006780:	bfb8      	it	lt
 8006782:	2600      	movlt	r6, #0
 8006784:	2b00      	cmp	r3, #0
 8006786:	bfb7      	itett	lt
 8006788:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800678c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006790:	1a9d      	sublt	r5, r3, r2
 8006792:	2300      	movlt	r3, #0
 8006794:	e734      	b.n	8006600 <_dtoa_r+0x720>
 8006796:	9e07      	ldr	r6, [sp, #28]
 8006798:	9d04      	ldr	r5, [sp, #16]
 800679a:	9f08      	ldr	r7, [sp, #32]
 800679c:	e73b      	b.n	8006616 <_dtoa_r+0x736>
 800679e:	9a07      	ldr	r2, [sp, #28]
 80067a0:	e767      	b.n	8006672 <_dtoa_r+0x792>
 80067a2:	9b06      	ldr	r3, [sp, #24]
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	dc18      	bgt.n	80067da <_dtoa_r+0x8fa>
 80067a8:	f1ba 0f00 	cmp.w	sl, #0
 80067ac:	d115      	bne.n	80067da <_dtoa_r+0x8fa>
 80067ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80067b2:	b993      	cbnz	r3, 80067da <_dtoa_r+0x8fa>
 80067b4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80067b8:	0d1b      	lsrs	r3, r3, #20
 80067ba:	051b      	lsls	r3, r3, #20
 80067bc:	b183      	cbz	r3, 80067e0 <_dtoa_r+0x900>
 80067be:	9b04      	ldr	r3, [sp, #16]
 80067c0:	3301      	adds	r3, #1
 80067c2:	9304      	str	r3, [sp, #16]
 80067c4:	9b05      	ldr	r3, [sp, #20]
 80067c6:	3301      	adds	r3, #1
 80067c8:	9305      	str	r3, [sp, #20]
 80067ca:	f04f 0801 	mov.w	r8, #1
 80067ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	f47f af6a 	bne.w	80066aa <_dtoa_r+0x7ca>
 80067d6:	2001      	movs	r0, #1
 80067d8:	e76f      	b.n	80066ba <_dtoa_r+0x7da>
 80067da:	f04f 0800 	mov.w	r8, #0
 80067de:	e7f6      	b.n	80067ce <_dtoa_r+0x8ee>
 80067e0:	4698      	mov	r8, r3
 80067e2:	e7f4      	b.n	80067ce <_dtoa_r+0x8ee>
 80067e4:	f43f af7d 	beq.w	80066e2 <_dtoa_r+0x802>
 80067e8:	4618      	mov	r0, r3
 80067ea:	301c      	adds	r0, #28
 80067ec:	e772      	b.n	80066d4 <_dtoa_r+0x7f4>
 80067ee:	9b03      	ldr	r3, [sp, #12]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	dc37      	bgt.n	8006864 <_dtoa_r+0x984>
 80067f4:	9b06      	ldr	r3, [sp, #24]
 80067f6:	2b02      	cmp	r3, #2
 80067f8:	dd34      	ble.n	8006864 <_dtoa_r+0x984>
 80067fa:	9b03      	ldr	r3, [sp, #12]
 80067fc:	9302      	str	r3, [sp, #8]
 80067fe:	9b02      	ldr	r3, [sp, #8]
 8006800:	b96b      	cbnz	r3, 800681e <_dtoa_r+0x93e>
 8006802:	4631      	mov	r1, r6
 8006804:	2205      	movs	r2, #5
 8006806:	4620      	mov	r0, r4
 8006808:	f000 fbf4 	bl	8006ff4 <__multadd>
 800680c:	4601      	mov	r1, r0
 800680e:	4606      	mov	r6, r0
 8006810:	ee18 0a10 	vmov	r0, s16
 8006814:	f000 fe0e 	bl	8007434 <__mcmp>
 8006818:	2800      	cmp	r0, #0
 800681a:	f73f adbb 	bgt.w	8006394 <_dtoa_r+0x4b4>
 800681e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006820:	9d01      	ldr	r5, [sp, #4]
 8006822:	43db      	mvns	r3, r3
 8006824:	9300      	str	r3, [sp, #0]
 8006826:	f04f 0800 	mov.w	r8, #0
 800682a:	4631      	mov	r1, r6
 800682c:	4620      	mov	r0, r4
 800682e:	f000 fbbf 	bl	8006fb0 <_Bfree>
 8006832:	2f00      	cmp	r7, #0
 8006834:	f43f aea4 	beq.w	8006580 <_dtoa_r+0x6a0>
 8006838:	f1b8 0f00 	cmp.w	r8, #0
 800683c:	d005      	beq.n	800684a <_dtoa_r+0x96a>
 800683e:	45b8      	cmp	r8, r7
 8006840:	d003      	beq.n	800684a <_dtoa_r+0x96a>
 8006842:	4641      	mov	r1, r8
 8006844:	4620      	mov	r0, r4
 8006846:	f000 fbb3 	bl	8006fb0 <_Bfree>
 800684a:	4639      	mov	r1, r7
 800684c:	4620      	mov	r0, r4
 800684e:	f000 fbaf 	bl	8006fb0 <_Bfree>
 8006852:	e695      	b.n	8006580 <_dtoa_r+0x6a0>
 8006854:	2600      	movs	r6, #0
 8006856:	4637      	mov	r7, r6
 8006858:	e7e1      	b.n	800681e <_dtoa_r+0x93e>
 800685a:	9700      	str	r7, [sp, #0]
 800685c:	4637      	mov	r7, r6
 800685e:	e599      	b.n	8006394 <_dtoa_r+0x4b4>
 8006860:	40240000 	.word	0x40240000
 8006864:	9b08      	ldr	r3, [sp, #32]
 8006866:	2b00      	cmp	r3, #0
 8006868:	f000 80ca 	beq.w	8006a00 <_dtoa_r+0xb20>
 800686c:	9b03      	ldr	r3, [sp, #12]
 800686e:	9302      	str	r3, [sp, #8]
 8006870:	2d00      	cmp	r5, #0
 8006872:	dd05      	ble.n	8006880 <_dtoa_r+0x9a0>
 8006874:	4639      	mov	r1, r7
 8006876:	462a      	mov	r2, r5
 8006878:	4620      	mov	r0, r4
 800687a:	f000 fd6b 	bl	8007354 <__lshift>
 800687e:	4607      	mov	r7, r0
 8006880:	f1b8 0f00 	cmp.w	r8, #0
 8006884:	d05b      	beq.n	800693e <_dtoa_r+0xa5e>
 8006886:	6879      	ldr	r1, [r7, #4]
 8006888:	4620      	mov	r0, r4
 800688a:	f000 fb51 	bl	8006f30 <_Balloc>
 800688e:	4605      	mov	r5, r0
 8006890:	b928      	cbnz	r0, 800689e <_dtoa_r+0x9be>
 8006892:	4b87      	ldr	r3, [pc, #540]	; (8006ab0 <_dtoa_r+0xbd0>)
 8006894:	4602      	mov	r2, r0
 8006896:	f240 21ea 	movw	r1, #746	; 0x2ea
 800689a:	f7ff bb3b 	b.w	8005f14 <_dtoa_r+0x34>
 800689e:	693a      	ldr	r2, [r7, #16]
 80068a0:	3202      	adds	r2, #2
 80068a2:	0092      	lsls	r2, r2, #2
 80068a4:	f107 010c 	add.w	r1, r7, #12
 80068a8:	300c      	adds	r0, #12
 80068aa:	f000 fb33 	bl	8006f14 <memcpy>
 80068ae:	2201      	movs	r2, #1
 80068b0:	4629      	mov	r1, r5
 80068b2:	4620      	mov	r0, r4
 80068b4:	f000 fd4e 	bl	8007354 <__lshift>
 80068b8:	9b01      	ldr	r3, [sp, #4]
 80068ba:	f103 0901 	add.w	r9, r3, #1
 80068be:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80068c2:	4413      	add	r3, r2
 80068c4:	9305      	str	r3, [sp, #20]
 80068c6:	f00a 0301 	and.w	r3, sl, #1
 80068ca:	46b8      	mov	r8, r7
 80068cc:	9304      	str	r3, [sp, #16]
 80068ce:	4607      	mov	r7, r0
 80068d0:	4631      	mov	r1, r6
 80068d2:	ee18 0a10 	vmov	r0, s16
 80068d6:	f7ff fa77 	bl	8005dc8 <quorem>
 80068da:	4641      	mov	r1, r8
 80068dc:	9002      	str	r0, [sp, #8]
 80068de:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80068e2:	ee18 0a10 	vmov	r0, s16
 80068e6:	f000 fda5 	bl	8007434 <__mcmp>
 80068ea:	463a      	mov	r2, r7
 80068ec:	9003      	str	r0, [sp, #12]
 80068ee:	4631      	mov	r1, r6
 80068f0:	4620      	mov	r0, r4
 80068f2:	f000 fdbb 	bl	800746c <__mdiff>
 80068f6:	68c2      	ldr	r2, [r0, #12]
 80068f8:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 80068fc:	4605      	mov	r5, r0
 80068fe:	bb02      	cbnz	r2, 8006942 <_dtoa_r+0xa62>
 8006900:	4601      	mov	r1, r0
 8006902:	ee18 0a10 	vmov	r0, s16
 8006906:	f000 fd95 	bl	8007434 <__mcmp>
 800690a:	4602      	mov	r2, r0
 800690c:	4629      	mov	r1, r5
 800690e:	4620      	mov	r0, r4
 8006910:	9207      	str	r2, [sp, #28]
 8006912:	f000 fb4d 	bl	8006fb0 <_Bfree>
 8006916:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800691a:	ea43 0102 	orr.w	r1, r3, r2
 800691e:	9b04      	ldr	r3, [sp, #16]
 8006920:	430b      	orrs	r3, r1
 8006922:	464d      	mov	r5, r9
 8006924:	d10f      	bne.n	8006946 <_dtoa_r+0xa66>
 8006926:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800692a:	d02a      	beq.n	8006982 <_dtoa_r+0xaa2>
 800692c:	9b03      	ldr	r3, [sp, #12]
 800692e:	2b00      	cmp	r3, #0
 8006930:	dd02      	ble.n	8006938 <_dtoa_r+0xa58>
 8006932:	9b02      	ldr	r3, [sp, #8]
 8006934:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006938:	f88b a000 	strb.w	sl, [fp]
 800693c:	e775      	b.n	800682a <_dtoa_r+0x94a>
 800693e:	4638      	mov	r0, r7
 8006940:	e7ba      	b.n	80068b8 <_dtoa_r+0x9d8>
 8006942:	2201      	movs	r2, #1
 8006944:	e7e2      	b.n	800690c <_dtoa_r+0xa2c>
 8006946:	9b03      	ldr	r3, [sp, #12]
 8006948:	2b00      	cmp	r3, #0
 800694a:	db04      	blt.n	8006956 <_dtoa_r+0xa76>
 800694c:	9906      	ldr	r1, [sp, #24]
 800694e:	430b      	orrs	r3, r1
 8006950:	9904      	ldr	r1, [sp, #16]
 8006952:	430b      	orrs	r3, r1
 8006954:	d122      	bne.n	800699c <_dtoa_r+0xabc>
 8006956:	2a00      	cmp	r2, #0
 8006958:	ddee      	ble.n	8006938 <_dtoa_r+0xa58>
 800695a:	ee18 1a10 	vmov	r1, s16
 800695e:	2201      	movs	r2, #1
 8006960:	4620      	mov	r0, r4
 8006962:	f000 fcf7 	bl	8007354 <__lshift>
 8006966:	4631      	mov	r1, r6
 8006968:	ee08 0a10 	vmov	s16, r0
 800696c:	f000 fd62 	bl	8007434 <__mcmp>
 8006970:	2800      	cmp	r0, #0
 8006972:	dc03      	bgt.n	800697c <_dtoa_r+0xa9c>
 8006974:	d1e0      	bne.n	8006938 <_dtoa_r+0xa58>
 8006976:	f01a 0f01 	tst.w	sl, #1
 800697a:	d0dd      	beq.n	8006938 <_dtoa_r+0xa58>
 800697c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006980:	d1d7      	bne.n	8006932 <_dtoa_r+0xa52>
 8006982:	2339      	movs	r3, #57	; 0x39
 8006984:	f88b 3000 	strb.w	r3, [fp]
 8006988:	462b      	mov	r3, r5
 800698a:	461d      	mov	r5, r3
 800698c:	3b01      	subs	r3, #1
 800698e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006992:	2a39      	cmp	r2, #57	; 0x39
 8006994:	d071      	beq.n	8006a7a <_dtoa_r+0xb9a>
 8006996:	3201      	adds	r2, #1
 8006998:	701a      	strb	r2, [r3, #0]
 800699a:	e746      	b.n	800682a <_dtoa_r+0x94a>
 800699c:	2a00      	cmp	r2, #0
 800699e:	dd07      	ble.n	80069b0 <_dtoa_r+0xad0>
 80069a0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80069a4:	d0ed      	beq.n	8006982 <_dtoa_r+0xaa2>
 80069a6:	f10a 0301 	add.w	r3, sl, #1
 80069aa:	f88b 3000 	strb.w	r3, [fp]
 80069ae:	e73c      	b.n	800682a <_dtoa_r+0x94a>
 80069b0:	9b05      	ldr	r3, [sp, #20]
 80069b2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80069b6:	4599      	cmp	r9, r3
 80069b8:	d047      	beq.n	8006a4a <_dtoa_r+0xb6a>
 80069ba:	ee18 1a10 	vmov	r1, s16
 80069be:	2300      	movs	r3, #0
 80069c0:	220a      	movs	r2, #10
 80069c2:	4620      	mov	r0, r4
 80069c4:	f000 fb16 	bl	8006ff4 <__multadd>
 80069c8:	45b8      	cmp	r8, r7
 80069ca:	ee08 0a10 	vmov	s16, r0
 80069ce:	f04f 0300 	mov.w	r3, #0
 80069d2:	f04f 020a 	mov.w	r2, #10
 80069d6:	4641      	mov	r1, r8
 80069d8:	4620      	mov	r0, r4
 80069da:	d106      	bne.n	80069ea <_dtoa_r+0xb0a>
 80069dc:	f000 fb0a 	bl	8006ff4 <__multadd>
 80069e0:	4680      	mov	r8, r0
 80069e2:	4607      	mov	r7, r0
 80069e4:	f109 0901 	add.w	r9, r9, #1
 80069e8:	e772      	b.n	80068d0 <_dtoa_r+0x9f0>
 80069ea:	f000 fb03 	bl	8006ff4 <__multadd>
 80069ee:	4639      	mov	r1, r7
 80069f0:	4680      	mov	r8, r0
 80069f2:	2300      	movs	r3, #0
 80069f4:	220a      	movs	r2, #10
 80069f6:	4620      	mov	r0, r4
 80069f8:	f000 fafc 	bl	8006ff4 <__multadd>
 80069fc:	4607      	mov	r7, r0
 80069fe:	e7f1      	b.n	80069e4 <_dtoa_r+0xb04>
 8006a00:	9b03      	ldr	r3, [sp, #12]
 8006a02:	9302      	str	r3, [sp, #8]
 8006a04:	9d01      	ldr	r5, [sp, #4]
 8006a06:	ee18 0a10 	vmov	r0, s16
 8006a0a:	4631      	mov	r1, r6
 8006a0c:	f7ff f9dc 	bl	8005dc8 <quorem>
 8006a10:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006a14:	9b01      	ldr	r3, [sp, #4]
 8006a16:	f805 ab01 	strb.w	sl, [r5], #1
 8006a1a:	1aea      	subs	r2, r5, r3
 8006a1c:	9b02      	ldr	r3, [sp, #8]
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	dd09      	ble.n	8006a36 <_dtoa_r+0xb56>
 8006a22:	ee18 1a10 	vmov	r1, s16
 8006a26:	2300      	movs	r3, #0
 8006a28:	220a      	movs	r2, #10
 8006a2a:	4620      	mov	r0, r4
 8006a2c:	f000 fae2 	bl	8006ff4 <__multadd>
 8006a30:	ee08 0a10 	vmov	s16, r0
 8006a34:	e7e7      	b.n	8006a06 <_dtoa_r+0xb26>
 8006a36:	9b02      	ldr	r3, [sp, #8]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	bfc8      	it	gt
 8006a3c:	461d      	movgt	r5, r3
 8006a3e:	9b01      	ldr	r3, [sp, #4]
 8006a40:	bfd8      	it	le
 8006a42:	2501      	movle	r5, #1
 8006a44:	441d      	add	r5, r3
 8006a46:	f04f 0800 	mov.w	r8, #0
 8006a4a:	ee18 1a10 	vmov	r1, s16
 8006a4e:	2201      	movs	r2, #1
 8006a50:	4620      	mov	r0, r4
 8006a52:	f000 fc7f 	bl	8007354 <__lshift>
 8006a56:	4631      	mov	r1, r6
 8006a58:	ee08 0a10 	vmov	s16, r0
 8006a5c:	f000 fcea 	bl	8007434 <__mcmp>
 8006a60:	2800      	cmp	r0, #0
 8006a62:	dc91      	bgt.n	8006988 <_dtoa_r+0xaa8>
 8006a64:	d102      	bne.n	8006a6c <_dtoa_r+0xb8c>
 8006a66:	f01a 0f01 	tst.w	sl, #1
 8006a6a:	d18d      	bne.n	8006988 <_dtoa_r+0xaa8>
 8006a6c:	462b      	mov	r3, r5
 8006a6e:	461d      	mov	r5, r3
 8006a70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a74:	2a30      	cmp	r2, #48	; 0x30
 8006a76:	d0fa      	beq.n	8006a6e <_dtoa_r+0xb8e>
 8006a78:	e6d7      	b.n	800682a <_dtoa_r+0x94a>
 8006a7a:	9a01      	ldr	r2, [sp, #4]
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d184      	bne.n	800698a <_dtoa_r+0xaaa>
 8006a80:	9b00      	ldr	r3, [sp, #0]
 8006a82:	3301      	adds	r3, #1
 8006a84:	9300      	str	r3, [sp, #0]
 8006a86:	2331      	movs	r3, #49	; 0x31
 8006a88:	7013      	strb	r3, [r2, #0]
 8006a8a:	e6ce      	b.n	800682a <_dtoa_r+0x94a>
 8006a8c:	4b09      	ldr	r3, [pc, #36]	; (8006ab4 <_dtoa_r+0xbd4>)
 8006a8e:	f7ff ba95 	b.w	8005fbc <_dtoa_r+0xdc>
 8006a92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	f47f aa6e 	bne.w	8005f76 <_dtoa_r+0x96>
 8006a9a:	4b07      	ldr	r3, [pc, #28]	; (8006ab8 <_dtoa_r+0xbd8>)
 8006a9c:	f7ff ba8e 	b.w	8005fbc <_dtoa_r+0xdc>
 8006aa0:	9b02      	ldr	r3, [sp, #8]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	dcae      	bgt.n	8006a04 <_dtoa_r+0xb24>
 8006aa6:	9b06      	ldr	r3, [sp, #24]
 8006aa8:	2b02      	cmp	r3, #2
 8006aaa:	f73f aea8 	bgt.w	80067fe <_dtoa_r+0x91e>
 8006aae:	e7a9      	b.n	8006a04 <_dtoa_r+0xb24>
 8006ab0:	0800898b 	.word	0x0800898b
 8006ab4:	080088e8 	.word	0x080088e8
 8006ab8:	0800890c 	.word	0x0800890c

08006abc <__sflush_r>:
 8006abc:	898a      	ldrh	r2, [r1, #12]
 8006abe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ac2:	4605      	mov	r5, r0
 8006ac4:	0710      	lsls	r0, r2, #28
 8006ac6:	460c      	mov	r4, r1
 8006ac8:	d458      	bmi.n	8006b7c <__sflush_r+0xc0>
 8006aca:	684b      	ldr	r3, [r1, #4]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	dc05      	bgt.n	8006adc <__sflush_r+0x20>
 8006ad0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	dc02      	bgt.n	8006adc <__sflush_r+0x20>
 8006ad6:	2000      	movs	r0, #0
 8006ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006adc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006ade:	2e00      	cmp	r6, #0
 8006ae0:	d0f9      	beq.n	8006ad6 <__sflush_r+0x1a>
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006ae8:	682f      	ldr	r7, [r5, #0]
 8006aea:	602b      	str	r3, [r5, #0]
 8006aec:	d032      	beq.n	8006b54 <__sflush_r+0x98>
 8006aee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006af0:	89a3      	ldrh	r3, [r4, #12]
 8006af2:	075a      	lsls	r2, r3, #29
 8006af4:	d505      	bpl.n	8006b02 <__sflush_r+0x46>
 8006af6:	6863      	ldr	r3, [r4, #4]
 8006af8:	1ac0      	subs	r0, r0, r3
 8006afa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006afc:	b10b      	cbz	r3, 8006b02 <__sflush_r+0x46>
 8006afe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006b00:	1ac0      	subs	r0, r0, r3
 8006b02:	2300      	movs	r3, #0
 8006b04:	4602      	mov	r2, r0
 8006b06:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b08:	6a21      	ldr	r1, [r4, #32]
 8006b0a:	4628      	mov	r0, r5
 8006b0c:	47b0      	blx	r6
 8006b0e:	1c43      	adds	r3, r0, #1
 8006b10:	89a3      	ldrh	r3, [r4, #12]
 8006b12:	d106      	bne.n	8006b22 <__sflush_r+0x66>
 8006b14:	6829      	ldr	r1, [r5, #0]
 8006b16:	291d      	cmp	r1, #29
 8006b18:	d82c      	bhi.n	8006b74 <__sflush_r+0xb8>
 8006b1a:	4a2a      	ldr	r2, [pc, #168]	; (8006bc4 <__sflush_r+0x108>)
 8006b1c:	40ca      	lsrs	r2, r1
 8006b1e:	07d6      	lsls	r6, r2, #31
 8006b20:	d528      	bpl.n	8006b74 <__sflush_r+0xb8>
 8006b22:	2200      	movs	r2, #0
 8006b24:	6062      	str	r2, [r4, #4]
 8006b26:	04d9      	lsls	r1, r3, #19
 8006b28:	6922      	ldr	r2, [r4, #16]
 8006b2a:	6022      	str	r2, [r4, #0]
 8006b2c:	d504      	bpl.n	8006b38 <__sflush_r+0x7c>
 8006b2e:	1c42      	adds	r2, r0, #1
 8006b30:	d101      	bne.n	8006b36 <__sflush_r+0x7a>
 8006b32:	682b      	ldr	r3, [r5, #0]
 8006b34:	b903      	cbnz	r3, 8006b38 <__sflush_r+0x7c>
 8006b36:	6560      	str	r0, [r4, #84]	; 0x54
 8006b38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b3a:	602f      	str	r7, [r5, #0]
 8006b3c:	2900      	cmp	r1, #0
 8006b3e:	d0ca      	beq.n	8006ad6 <__sflush_r+0x1a>
 8006b40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b44:	4299      	cmp	r1, r3
 8006b46:	d002      	beq.n	8006b4e <__sflush_r+0x92>
 8006b48:	4628      	mov	r0, r5
 8006b4a:	f000 fd8b 	bl	8007664 <_free_r>
 8006b4e:	2000      	movs	r0, #0
 8006b50:	6360      	str	r0, [r4, #52]	; 0x34
 8006b52:	e7c1      	b.n	8006ad8 <__sflush_r+0x1c>
 8006b54:	6a21      	ldr	r1, [r4, #32]
 8006b56:	2301      	movs	r3, #1
 8006b58:	4628      	mov	r0, r5
 8006b5a:	47b0      	blx	r6
 8006b5c:	1c41      	adds	r1, r0, #1
 8006b5e:	d1c7      	bne.n	8006af0 <__sflush_r+0x34>
 8006b60:	682b      	ldr	r3, [r5, #0]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d0c4      	beq.n	8006af0 <__sflush_r+0x34>
 8006b66:	2b1d      	cmp	r3, #29
 8006b68:	d001      	beq.n	8006b6e <__sflush_r+0xb2>
 8006b6a:	2b16      	cmp	r3, #22
 8006b6c:	d101      	bne.n	8006b72 <__sflush_r+0xb6>
 8006b6e:	602f      	str	r7, [r5, #0]
 8006b70:	e7b1      	b.n	8006ad6 <__sflush_r+0x1a>
 8006b72:	89a3      	ldrh	r3, [r4, #12]
 8006b74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b78:	81a3      	strh	r3, [r4, #12]
 8006b7a:	e7ad      	b.n	8006ad8 <__sflush_r+0x1c>
 8006b7c:	690f      	ldr	r7, [r1, #16]
 8006b7e:	2f00      	cmp	r7, #0
 8006b80:	d0a9      	beq.n	8006ad6 <__sflush_r+0x1a>
 8006b82:	0793      	lsls	r3, r2, #30
 8006b84:	680e      	ldr	r6, [r1, #0]
 8006b86:	bf08      	it	eq
 8006b88:	694b      	ldreq	r3, [r1, #20]
 8006b8a:	600f      	str	r7, [r1, #0]
 8006b8c:	bf18      	it	ne
 8006b8e:	2300      	movne	r3, #0
 8006b90:	eba6 0807 	sub.w	r8, r6, r7
 8006b94:	608b      	str	r3, [r1, #8]
 8006b96:	f1b8 0f00 	cmp.w	r8, #0
 8006b9a:	dd9c      	ble.n	8006ad6 <__sflush_r+0x1a>
 8006b9c:	6a21      	ldr	r1, [r4, #32]
 8006b9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006ba0:	4643      	mov	r3, r8
 8006ba2:	463a      	mov	r2, r7
 8006ba4:	4628      	mov	r0, r5
 8006ba6:	47b0      	blx	r6
 8006ba8:	2800      	cmp	r0, #0
 8006baa:	dc06      	bgt.n	8006bba <__sflush_r+0xfe>
 8006bac:	89a3      	ldrh	r3, [r4, #12]
 8006bae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bb2:	81a3      	strh	r3, [r4, #12]
 8006bb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006bb8:	e78e      	b.n	8006ad8 <__sflush_r+0x1c>
 8006bba:	4407      	add	r7, r0
 8006bbc:	eba8 0800 	sub.w	r8, r8, r0
 8006bc0:	e7e9      	b.n	8006b96 <__sflush_r+0xda>
 8006bc2:	bf00      	nop
 8006bc4:	20400001 	.word	0x20400001

08006bc8 <_fflush_r>:
 8006bc8:	b538      	push	{r3, r4, r5, lr}
 8006bca:	690b      	ldr	r3, [r1, #16]
 8006bcc:	4605      	mov	r5, r0
 8006bce:	460c      	mov	r4, r1
 8006bd0:	b913      	cbnz	r3, 8006bd8 <_fflush_r+0x10>
 8006bd2:	2500      	movs	r5, #0
 8006bd4:	4628      	mov	r0, r5
 8006bd6:	bd38      	pop	{r3, r4, r5, pc}
 8006bd8:	b118      	cbz	r0, 8006be2 <_fflush_r+0x1a>
 8006bda:	6983      	ldr	r3, [r0, #24]
 8006bdc:	b90b      	cbnz	r3, 8006be2 <_fflush_r+0x1a>
 8006bde:	f000 f887 	bl	8006cf0 <__sinit>
 8006be2:	4b14      	ldr	r3, [pc, #80]	; (8006c34 <_fflush_r+0x6c>)
 8006be4:	429c      	cmp	r4, r3
 8006be6:	d11b      	bne.n	8006c20 <_fflush_r+0x58>
 8006be8:	686c      	ldr	r4, [r5, #4]
 8006bea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d0ef      	beq.n	8006bd2 <_fflush_r+0xa>
 8006bf2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006bf4:	07d0      	lsls	r0, r2, #31
 8006bf6:	d404      	bmi.n	8006c02 <_fflush_r+0x3a>
 8006bf8:	0599      	lsls	r1, r3, #22
 8006bfa:	d402      	bmi.n	8006c02 <_fflush_r+0x3a>
 8006bfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006bfe:	f000 f91a 	bl	8006e36 <__retarget_lock_acquire_recursive>
 8006c02:	4628      	mov	r0, r5
 8006c04:	4621      	mov	r1, r4
 8006c06:	f7ff ff59 	bl	8006abc <__sflush_r>
 8006c0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c0c:	07da      	lsls	r2, r3, #31
 8006c0e:	4605      	mov	r5, r0
 8006c10:	d4e0      	bmi.n	8006bd4 <_fflush_r+0xc>
 8006c12:	89a3      	ldrh	r3, [r4, #12]
 8006c14:	059b      	lsls	r3, r3, #22
 8006c16:	d4dd      	bmi.n	8006bd4 <_fflush_r+0xc>
 8006c18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c1a:	f000 f90d 	bl	8006e38 <__retarget_lock_release_recursive>
 8006c1e:	e7d9      	b.n	8006bd4 <_fflush_r+0xc>
 8006c20:	4b05      	ldr	r3, [pc, #20]	; (8006c38 <_fflush_r+0x70>)
 8006c22:	429c      	cmp	r4, r3
 8006c24:	d101      	bne.n	8006c2a <_fflush_r+0x62>
 8006c26:	68ac      	ldr	r4, [r5, #8]
 8006c28:	e7df      	b.n	8006bea <_fflush_r+0x22>
 8006c2a:	4b04      	ldr	r3, [pc, #16]	; (8006c3c <_fflush_r+0x74>)
 8006c2c:	429c      	cmp	r4, r3
 8006c2e:	bf08      	it	eq
 8006c30:	68ec      	ldreq	r4, [r5, #12]
 8006c32:	e7da      	b.n	8006bea <_fflush_r+0x22>
 8006c34:	080089bc 	.word	0x080089bc
 8006c38:	080089dc 	.word	0x080089dc
 8006c3c:	0800899c 	.word	0x0800899c

08006c40 <std>:
 8006c40:	2300      	movs	r3, #0
 8006c42:	b510      	push	{r4, lr}
 8006c44:	4604      	mov	r4, r0
 8006c46:	e9c0 3300 	strd	r3, r3, [r0]
 8006c4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c4e:	6083      	str	r3, [r0, #8]
 8006c50:	8181      	strh	r1, [r0, #12]
 8006c52:	6643      	str	r3, [r0, #100]	; 0x64
 8006c54:	81c2      	strh	r2, [r0, #14]
 8006c56:	6183      	str	r3, [r0, #24]
 8006c58:	4619      	mov	r1, r3
 8006c5a:	2208      	movs	r2, #8
 8006c5c:	305c      	adds	r0, #92	; 0x5c
 8006c5e:	f7fe faf3 	bl	8005248 <memset>
 8006c62:	4b05      	ldr	r3, [pc, #20]	; (8006c78 <std+0x38>)
 8006c64:	6263      	str	r3, [r4, #36]	; 0x24
 8006c66:	4b05      	ldr	r3, [pc, #20]	; (8006c7c <std+0x3c>)
 8006c68:	62a3      	str	r3, [r4, #40]	; 0x28
 8006c6a:	4b05      	ldr	r3, [pc, #20]	; (8006c80 <std+0x40>)
 8006c6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006c6e:	4b05      	ldr	r3, [pc, #20]	; (8006c84 <std+0x44>)
 8006c70:	6224      	str	r4, [r4, #32]
 8006c72:	6323      	str	r3, [r4, #48]	; 0x30
 8006c74:	bd10      	pop	{r4, pc}
 8006c76:	bf00      	nop
 8006c78:	08007af9 	.word	0x08007af9
 8006c7c:	08007b1b 	.word	0x08007b1b
 8006c80:	08007b53 	.word	0x08007b53
 8006c84:	08007b77 	.word	0x08007b77

08006c88 <_cleanup_r>:
 8006c88:	4901      	ldr	r1, [pc, #4]	; (8006c90 <_cleanup_r+0x8>)
 8006c8a:	f000 b8af 	b.w	8006dec <_fwalk_reent>
 8006c8e:	bf00      	nop
 8006c90:	08006bc9 	.word	0x08006bc9

08006c94 <__sfmoreglue>:
 8006c94:	b570      	push	{r4, r5, r6, lr}
 8006c96:	2268      	movs	r2, #104	; 0x68
 8006c98:	1e4d      	subs	r5, r1, #1
 8006c9a:	4355      	muls	r5, r2
 8006c9c:	460e      	mov	r6, r1
 8006c9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006ca2:	f000 fd4b 	bl	800773c <_malloc_r>
 8006ca6:	4604      	mov	r4, r0
 8006ca8:	b140      	cbz	r0, 8006cbc <__sfmoreglue+0x28>
 8006caa:	2100      	movs	r1, #0
 8006cac:	e9c0 1600 	strd	r1, r6, [r0]
 8006cb0:	300c      	adds	r0, #12
 8006cb2:	60a0      	str	r0, [r4, #8]
 8006cb4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006cb8:	f7fe fac6 	bl	8005248 <memset>
 8006cbc:	4620      	mov	r0, r4
 8006cbe:	bd70      	pop	{r4, r5, r6, pc}

08006cc0 <__sfp_lock_acquire>:
 8006cc0:	4801      	ldr	r0, [pc, #4]	; (8006cc8 <__sfp_lock_acquire+0x8>)
 8006cc2:	f000 b8b8 	b.w	8006e36 <__retarget_lock_acquire_recursive>
 8006cc6:	bf00      	nop
 8006cc8:	200003b1 	.word	0x200003b1

08006ccc <__sfp_lock_release>:
 8006ccc:	4801      	ldr	r0, [pc, #4]	; (8006cd4 <__sfp_lock_release+0x8>)
 8006cce:	f000 b8b3 	b.w	8006e38 <__retarget_lock_release_recursive>
 8006cd2:	bf00      	nop
 8006cd4:	200003b1 	.word	0x200003b1

08006cd8 <__sinit_lock_acquire>:
 8006cd8:	4801      	ldr	r0, [pc, #4]	; (8006ce0 <__sinit_lock_acquire+0x8>)
 8006cda:	f000 b8ac 	b.w	8006e36 <__retarget_lock_acquire_recursive>
 8006cde:	bf00      	nop
 8006ce0:	200003b2 	.word	0x200003b2

08006ce4 <__sinit_lock_release>:
 8006ce4:	4801      	ldr	r0, [pc, #4]	; (8006cec <__sinit_lock_release+0x8>)
 8006ce6:	f000 b8a7 	b.w	8006e38 <__retarget_lock_release_recursive>
 8006cea:	bf00      	nop
 8006cec:	200003b2 	.word	0x200003b2

08006cf0 <__sinit>:
 8006cf0:	b510      	push	{r4, lr}
 8006cf2:	4604      	mov	r4, r0
 8006cf4:	f7ff fff0 	bl	8006cd8 <__sinit_lock_acquire>
 8006cf8:	69a3      	ldr	r3, [r4, #24]
 8006cfa:	b11b      	cbz	r3, 8006d04 <__sinit+0x14>
 8006cfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d00:	f7ff bff0 	b.w	8006ce4 <__sinit_lock_release>
 8006d04:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006d08:	6523      	str	r3, [r4, #80]	; 0x50
 8006d0a:	4b13      	ldr	r3, [pc, #76]	; (8006d58 <__sinit+0x68>)
 8006d0c:	4a13      	ldr	r2, [pc, #76]	; (8006d5c <__sinit+0x6c>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	62a2      	str	r2, [r4, #40]	; 0x28
 8006d12:	42a3      	cmp	r3, r4
 8006d14:	bf04      	itt	eq
 8006d16:	2301      	moveq	r3, #1
 8006d18:	61a3      	streq	r3, [r4, #24]
 8006d1a:	4620      	mov	r0, r4
 8006d1c:	f000 f820 	bl	8006d60 <__sfp>
 8006d20:	6060      	str	r0, [r4, #4]
 8006d22:	4620      	mov	r0, r4
 8006d24:	f000 f81c 	bl	8006d60 <__sfp>
 8006d28:	60a0      	str	r0, [r4, #8]
 8006d2a:	4620      	mov	r0, r4
 8006d2c:	f000 f818 	bl	8006d60 <__sfp>
 8006d30:	2200      	movs	r2, #0
 8006d32:	60e0      	str	r0, [r4, #12]
 8006d34:	2104      	movs	r1, #4
 8006d36:	6860      	ldr	r0, [r4, #4]
 8006d38:	f7ff ff82 	bl	8006c40 <std>
 8006d3c:	68a0      	ldr	r0, [r4, #8]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	2109      	movs	r1, #9
 8006d42:	f7ff ff7d 	bl	8006c40 <std>
 8006d46:	68e0      	ldr	r0, [r4, #12]
 8006d48:	2202      	movs	r2, #2
 8006d4a:	2112      	movs	r1, #18
 8006d4c:	f7ff ff78 	bl	8006c40 <std>
 8006d50:	2301      	movs	r3, #1
 8006d52:	61a3      	str	r3, [r4, #24]
 8006d54:	e7d2      	b.n	8006cfc <__sinit+0xc>
 8006d56:	bf00      	nop
 8006d58:	080088d4 	.word	0x080088d4
 8006d5c:	08006c89 	.word	0x08006c89

08006d60 <__sfp>:
 8006d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d62:	4607      	mov	r7, r0
 8006d64:	f7ff ffac 	bl	8006cc0 <__sfp_lock_acquire>
 8006d68:	4b1e      	ldr	r3, [pc, #120]	; (8006de4 <__sfp+0x84>)
 8006d6a:	681e      	ldr	r6, [r3, #0]
 8006d6c:	69b3      	ldr	r3, [r6, #24]
 8006d6e:	b913      	cbnz	r3, 8006d76 <__sfp+0x16>
 8006d70:	4630      	mov	r0, r6
 8006d72:	f7ff ffbd 	bl	8006cf0 <__sinit>
 8006d76:	3648      	adds	r6, #72	; 0x48
 8006d78:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006d7c:	3b01      	subs	r3, #1
 8006d7e:	d503      	bpl.n	8006d88 <__sfp+0x28>
 8006d80:	6833      	ldr	r3, [r6, #0]
 8006d82:	b30b      	cbz	r3, 8006dc8 <__sfp+0x68>
 8006d84:	6836      	ldr	r6, [r6, #0]
 8006d86:	e7f7      	b.n	8006d78 <__sfp+0x18>
 8006d88:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006d8c:	b9d5      	cbnz	r5, 8006dc4 <__sfp+0x64>
 8006d8e:	4b16      	ldr	r3, [pc, #88]	; (8006de8 <__sfp+0x88>)
 8006d90:	60e3      	str	r3, [r4, #12]
 8006d92:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006d96:	6665      	str	r5, [r4, #100]	; 0x64
 8006d98:	f000 f84c 	bl	8006e34 <__retarget_lock_init_recursive>
 8006d9c:	f7ff ff96 	bl	8006ccc <__sfp_lock_release>
 8006da0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006da4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006da8:	6025      	str	r5, [r4, #0]
 8006daa:	61a5      	str	r5, [r4, #24]
 8006dac:	2208      	movs	r2, #8
 8006dae:	4629      	mov	r1, r5
 8006db0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006db4:	f7fe fa48 	bl	8005248 <memset>
 8006db8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006dbc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006dc0:	4620      	mov	r0, r4
 8006dc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006dc4:	3468      	adds	r4, #104	; 0x68
 8006dc6:	e7d9      	b.n	8006d7c <__sfp+0x1c>
 8006dc8:	2104      	movs	r1, #4
 8006dca:	4638      	mov	r0, r7
 8006dcc:	f7ff ff62 	bl	8006c94 <__sfmoreglue>
 8006dd0:	4604      	mov	r4, r0
 8006dd2:	6030      	str	r0, [r6, #0]
 8006dd4:	2800      	cmp	r0, #0
 8006dd6:	d1d5      	bne.n	8006d84 <__sfp+0x24>
 8006dd8:	f7ff ff78 	bl	8006ccc <__sfp_lock_release>
 8006ddc:	230c      	movs	r3, #12
 8006dde:	603b      	str	r3, [r7, #0]
 8006de0:	e7ee      	b.n	8006dc0 <__sfp+0x60>
 8006de2:	bf00      	nop
 8006de4:	080088d4 	.word	0x080088d4
 8006de8:	ffff0001 	.word	0xffff0001

08006dec <_fwalk_reent>:
 8006dec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006df0:	4606      	mov	r6, r0
 8006df2:	4688      	mov	r8, r1
 8006df4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006df8:	2700      	movs	r7, #0
 8006dfa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006dfe:	f1b9 0901 	subs.w	r9, r9, #1
 8006e02:	d505      	bpl.n	8006e10 <_fwalk_reent+0x24>
 8006e04:	6824      	ldr	r4, [r4, #0]
 8006e06:	2c00      	cmp	r4, #0
 8006e08:	d1f7      	bne.n	8006dfa <_fwalk_reent+0xe>
 8006e0a:	4638      	mov	r0, r7
 8006e0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e10:	89ab      	ldrh	r3, [r5, #12]
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d907      	bls.n	8006e26 <_fwalk_reent+0x3a>
 8006e16:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	d003      	beq.n	8006e26 <_fwalk_reent+0x3a>
 8006e1e:	4629      	mov	r1, r5
 8006e20:	4630      	mov	r0, r6
 8006e22:	47c0      	blx	r8
 8006e24:	4307      	orrs	r7, r0
 8006e26:	3568      	adds	r5, #104	; 0x68
 8006e28:	e7e9      	b.n	8006dfe <_fwalk_reent+0x12>
	...

08006e2c <_localeconv_r>:
 8006e2c:	4800      	ldr	r0, [pc, #0]	; (8006e30 <_localeconv_r+0x4>)
 8006e2e:	4770      	bx	lr
 8006e30:	20000164 	.word	0x20000164

08006e34 <__retarget_lock_init_recursive>:
 8006e34:	4770      	bx	lr

08006e36 <__retarget_lock_acquire_recursive>:
 8006e36:	4770      	bx	lr

08006e38 <__retarget_lock_release_recursive>:
 8006e38:	4770      	bx	lr

08006e3a <__swhatbuf_r>:
 8006e3a:	b570      	push	{r4, r5, r6, lr}
 8006e3c:	460e      	mov	r6, r1
 8006e3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e42:	2900      	cmp	r1, #0
 8006e44:	b096      	sub	sp, #88	; 0x58
 8006e46:	4614      	mov	r4, r2
 8006e48:	461d      	mov	r5, r3
 8006e4a:	da08      	bge.n	8006e5e <__swhatbuf_r+0x24>
 8006e4c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006e50:	2200      	movs	r2, #0
 8006e52:	602a      	str	r2, [r5, #0]
 8006e54:	061a      	lsls	r2, r3, #24
 8006e56:	d410      	bmi.n	8006e7a <__swhatbuf_r+0x40>
 8006e58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e5c:	e00e      	b.n	8006e7c <__swhatbuf_r+0x42>
 8006e5e:	466a      	mov	r2, sp
 8006e60:	f000 fee0 	bl	8007c24 <_fstat_r>
 8006e64:	2800      	cmp	r0, #0
 8006e66:	dbf1      	blt.n	8006e4c <__swhatbuf_r+0x12>
 8006e68:	9a01      	ldr	r2, [sp, #4]
 8006e6a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006e6e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006e72:	425a      	negs	r2, r3
 8006e74:	415a      	adcs	r2, r3
 8006e76:	602a      	str	r2, [r5, #0]
 8006e78:	e7ee      	b.n	8006e58 <__swhatbuf_r+0x1e>
 8006e7a:	2340      	movs	r3, #64	; 0x40
 8006e7c:	2000      	movs	r0, #0
 8006e7e:	6023      	str	r3, [r4, #0]
 8006e80:	b016      	add	sp, #88	; 0x58
 8006e82:	bd70      	pop	{r4, r5, r6, pc}

08006e84 <__smakebuf_r>:
 8006e84:	898b      	ldrh	r3, [r1, #12]
 8006e86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006e88:	079d      	lsls	r5, r3, #30
 8006e8a:	4606      	mov	r6, r0
 8006e8c:	460c      	mov	r4, r1
 8006e8e:	d507      	bpl.n	8006ea0 <__smakebuf_r+0x1c>
 8006e90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006e94:	6023      	str	r3, [r4, #0]
 8006e96:	6123      	str	r3, [r4, #16]
 8006e98:	2301      	movs	r3, #1
 8006e9a:	6163      	str	r3, [r4, #20]
 8006e9c:	b002      	add	sp, #8
 8006e9e:	bd70      	pop	{r4, r5, r6, pc}
 8006ea0:	ab01      	add	r3, sp, #4
 8006ea2:	466a      	mov	r2, sp
 8006ea4:	f7ff ffc9 	bl	8006e3a <__swhatbuf_r>
 8006ea8:	9900      	ldr	r1, [sp, #0]
 8006eaa:	4605      	mov	r5, r0
 8006eac:	4630      	mov	r0, r6
 8006eae:	f000 fc45 	bl	800773c <_malloc_r>
 8006eb2:	b948      	cbnz	r0, 8006ec8 <__smakebuf_r+0x44>
 8006eb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006eb8:	059a      	lsls	r2, r3, #22
 8006eba:	d4ef      	bmi.n	8006e9c <__smakebuf_r+0x18>
 8006ebc:	f023 0303 	bic.w	r3, r3, #3
 8006ec0:	f043 0302 	orr.w	r3, r3, #2
 8006ec4:	81a3      	strh	r3, [r4, #12]
 8006ec6:	e7e3      	b.n	8006e90 <__smakebuf_r+0xc>
 8006ec8:	4b0d      	ldr	r3, [pc, #52]	; (8006f00 <__smakebuf_r+0x7c>)
 8006eca:	62b3      	str	r3, [r6, #40]	; 0x28
 8006ecc:	89a3      	ldrh	r3, [r4, #12]
 8006ece:	6020      	str	r0, [r4, #0]
 8006ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ed4:	81a3      	strh	r3, [r4, #12]
 8006ed6:	9b00      	ldr	r3, [sp, #0]
 8006ed8:	6163      	str	r3, [r4, #20]
 8006eda:	9b01      	ldr	r3, [sp, #4]
 8006edc:	6120      	str	r0, [r4, #16]
 8006ede:	b15b      	cbz	r3, 8006ef8 <__smakebuf_r+0x74>
 8006ee0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ee4:	4630      	mov	r0, r6
 8006ee6:	f000 feaf 	bl	8007c48 <_isatty_r>
 8006eea:	b128      	cbz	r0, 8006ef8 <__smakebuf_r+0x74>
 8006eec:	89a3      	ldrh	r3, [r4, #12]
 8006eee:	f023 0303 	bic.w	r3, r3, #3
 8006ef2:	f043 0301 	orr.w	r3, r3, #1
 8006ef6:	81a3      	strh	r3, [r4, #12]
 8006ef8:	89a0      	ldrh	r0, [r4, #12]
 8006efa:	4305      	orrs	r5, r0
 8006efc:	81a5      	strh	r5, [r4, #12]
 8006efe:	e7cd      	b.n	8006e9c <__smakebuf_r+0x18>
 8006f00:	08006c89 	.word	0x08006c89

08006f04 <malloc>:
 8006f04:	4b02      	ldr	r3, [pc, #8]	; (8006f10 <malloc+0xc>)
 8006f06:	4601      	mov	r1, r0
 8006f08:	6818      	ldr	r0, [r3, #0]
 8006f0a:	f000 bc17 	b.w	800773c <_malloc_r>
 8006f0e:	bf00      	nop
 8006f10:	20000010 	.word	0x20000010

08006f14 <memcpy>:
 8006f14:	440a      	add	r2, r1
 8006f16:	4291      	cmp	r1, r2
 8006f18:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006f1c:	d100      	bne.n	8006f20 <memcpy+0xc>
 8006f1e:	4770      	bx	lr
 8006f20:	b510      	push	{r4, lr}
 8006f22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f2a:	4291      	cmp	r1, r2
 8006f2c:	d1f9      	bne.n	8006f22 <memcpy+0xe>
 8006f2e:	bd10      	pop	{r4, pc}

08006f30 <_Balloc>:
 8006f30:	b570      	push	{r4, r5, r6, lr}
 8006f32:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006f34:	4604      	mov	r4, r0
 8006f36:	460d      	mov	r5, r1
 8006f38:	b976      	cbnz	r6, 8006f58 <_Balloc+0x28>
 8006f3a:	2010      	movs	r0, #16
 8006f3c:	f7ff ffe2 	bl	8006f04 <malloc>
 8006f40:	4602      	mov	r2, r0
 8006f42:	6260      	str	r0, [r4, #36]	; 0x24
 8006f44:	b920      	cbnz	r0, 8006f50 <_Balloc+0x20>
 8006f46:	4b18      	ldr	r3, [pc, #96]	; (8006fa8 <_Balloc+0x78>)
 8006f48:	4818      	ldr	r0, [pc, #96]	; (8006fac <_Balloc+0x7c>)
 8006f4a:	2166      	movs	r1, #102	; 0x66
 8006f4c:	f000 fe2a 	bl	8007ba4 <__assert_func>
 8006f50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f54:	6006      	str	r6, [r0, #0]
 8006f56:	60c6      	str	r6, [r0, #12]
 8006f58:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006f5a:	68f3      	ldr	r3, [r6, #12]
 8006f5c:	b183      	cbz	r3, 8006f80 <_Balloc+0x50>
 8006f5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f60:	68db      	ldr	r3, [r3, #12]
 8006f62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006f66:	b9b8      	cbnz	r0, 8006f98 <_Balloc+0x68>
 8006f68:	2101      	movs	r1, #1
 8006f6a:	fa01 f605 	lsl.w	r6, r1, r5
 8006f6e:	1d72      	adds	r2, r6, #5
 8006f70:	0092      	lsls	r2, r2, #2
 8006f72:	4620      	mov	r0, r4
 8006f74:	f000 fb60 	bl	8007638 <_calloc_r>
 8006f78:	b160      	cbz	r0, 8006f94 <_Balloc+0x64>
 8006f7a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006f7e:	e00e      	b.n	8006f9e <_Balloc+0x6e>
 8006f80:	2221      	movs	r2, #33	; 0x21
 8006f82:	2104      	movs	r1, #4
 8006f84:	4620      	mov	r0, r4
 8006f86:	f000 fb57 	bl	8007638 <_calloc_r>
 8006f8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f8c:	60f0      	str	r0, [r6, #12]
 8006f8e:	68db      	ldr	r3, [r3, #12]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d1e4      	bne.n	8006f5e <_Balloc+0x2e>
 8006f94:	2000      	movs	r0, #0
 8006f96:	bd70      	pop	{r4, r5, r6, pc}
 8006f98:	6802      	ldr	r2, [r0, #0]
 8006f9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006fa4:	e7f7      	b.n	8006f96 <_Balloc+0x66>
 8006fa6:	bf00      	nop
 8006fa8:	08008919 	.word	0x08008919
 8006fac:	080089fc 	.word	0x080089fc

08006fb0 <_Bfree>:
 8006fb0:	b570      	push	{r4, r5, r6, lr}
 8006fb2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006fb4:	4605      	mov	r5, r0
 8006fb6:	460c      	mov	r4, r1
 8006fb8:	b976      	cbnz	r6, 8006fd8 <_Bfree+0x28>
 8006fba:	2010      	movs	r0, #16
 8006fbc:	f7ff ffa2 	bl	8006f04 <malloc>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	6268      	str	r0, [r5, #36]	; 0x24
 8006fc4:	b920      	cbnz	r0, 8006fd0 <_Bfree+0x20>
 8006fc6:	4b09      	ldr	r3, [pc, #36]	; (8006fec <_Bfree+0x3c>)
 8006fc8:	4809      	ldr	r0, [pc, #36]	; (8006ff0 <_Bfree+0x40>)
 8006fca:	218a      	movs	r1, #138	; 0x8a
 8006fcc:	f000 fdea 	bl	8007ba4 <__assert_func>
 8006fd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006fd4:	6006      	str	r6, [r0, #0]
 8006fd6:	60c6      	str	r6, [r0, #12]
 8006fd8:	b13c      	cbz	r4, 8006fea <_Bfree+0x3a>
 8006fda:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006fdc:	6862      	ldr	r2, [r4, #4]
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006fe4:	6021      	str	r1, [r4, #0]
 8006fe6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006fea:	bd70      	pop	{r4, r5, r6, pc}
 8006fec:	08008919 	.word	0x08008919
 8006ff0:	080089fc 	.word	0x080089fc

08006ff4 <__multadd>:
 8006ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ff8:	690d      	ldr	r5, [r1, #16]
 8006ffa:	4607      	mov	r7, r0
 8006ffc:	460c      	mov	r4, r1
 8006ffe:	461e      	mov	r6, r3
 8007000:	f101 0c14 	add.w	ip, r1, #20
 8007004:	2000      	movs	r0, #0
 8007006:	f8dc 3000 	ldr.w	r3, [ip]
 800700a:	b299      	uxth	r1, r3
 800700c:	fb02 6101 	mla	r1, r2, r1, r6
 8007010:	0c1e      	lsrs	r6, r3, #16
 8007012:	0c0b      	lsrs	r3, r1, #16
 8007014:	fb02 3306 	mla	r3, r2, r6, r3
 8007018:	b289      	uxth	r1, r1
 800701a:	3001      	adds	r0, #1
 800701c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007020:	4285      	cmp	r5, r0
 8007022:	f84c 1b04 	str.w	r1, [ip], #4
 8007026:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800702a:	dcec      	bgt.n	8007006 <__multadd+0x12>
 800702c:	b30e      	cbz	r6, 8007072 <__multadd+0x7e>
 800702e:	68a3      	ldr	r3, [r4, #8]
 8007030:	42ab      	cmp	r3, r5
 8007032:	dc19      	bgt.n	8007068 <__multadd+0x74>
 8007034:	6861      	ldr	r1, [r4, #4]
 8007036:	4638      	mov	r0, r7
 8007038:	3101      	adds	r1, #1
 800703a:	f7ff ff79 	bl	8006f30 <_Balloc>
 800703e:	4680      	mov	r8, r0
 8007040:	b928      	cbnz	r0, 800704e <__multadd+0x5a>
 8007042:	4602      	mov	r2, r0
 8007044:	4b0c      	ldr	r3, [pc, #48]	; (8007078 <__multadd+0x84>)
 8007046:	480d      	ldr	r0, [pc, #52]	; (800707c <__multadd+0x88>)
 8007048:	21b5      	movs	r1, #181	; 0xb5
 800704a:	f000 fdab 	bl	8007ba4 <__assert_func>
 800704e:	6922      	ldr	r2, [r4, #16]
 8007050:	3202      	adds	r2, #2
 8007052:	f104 010c 	add.w	r1, r4, #12
 8007056:	0092      	lsls	r2, r2, #2
 8007058:	300c      	adds	r0, #12
 800705a:	f7ff ff5b 	bl	8006f14 <memcpy>
 800705e:	4621      	mov	r1, r4
 8007060:	4638      	mov	r0, r7
 8007062:	f7ff ffa5 	bl	8006fb0 <_Bfree>
 8007066:	4644      	mov	r4, r8
 8007068:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800706c:	3501      	adds	r5, #1
 800706e:	615e      	str	r6, [r3, #20]
 8007070:	6125      	str	r5, [r4, #16]
 8007072:	4620      	mov	r0, r4
 8007074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007078:	0800898b 	.word	0x0800898b
 800707c:	080089fc 	.word	0x080089fc

08007080 <__hi0bits>:
 8007080:	0c03      	lsrs	r3, r0, #16
 8007082:	041b      	lsls	r3, r3, #16
 8007084:	b9d3      	cbnz	r3, 80070bc <__hi0bits+0x3c>
 8007086:	0400      	lsls	r0, r0, #16
 8007088:	2310      	movs	r3, #16
 800708a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800708e:	bf04      	itt	eq
 8007090:	0200      	lsleq	r0, r0, #8
 8007092:	3308      	addeq	r3, #8
 8007094:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007098:	bf04      	itt	eq
 800709a:	0100      	lsleq	r0, r0, #4
 800709c:	3304      	addeq	r3, #4
 800709e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80070a2:	bf04      	itt	eq
 80070a4:	0080      	lsleq	r0, r0, #2
 80070a6:	3302      	addeq	r3, #2
 80070a8:	2800      	cmp	r0, #0
 80070aa:	db05      	blt.n	80070b8 <__hi0bits+0x38>
 80070ac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80070b0:	f103 0301 	add.w	r3, r3, #1
 80070b4:	bf08      	it	eq
 80070b6:	2320      	moveq	r3, #32
 80070b8:	4618      	mov	r0, r3
 80070ba:	4770      	bx	lr
 80070bc:	2300      	movs	r3, #0
 80070be:	e7e4      	b.n	800708a <__hi0bits+0xa>

080070c0 <__lo0bits>:
 80070c0:	6803      	ldr	r3, [r0, #0]
 80070c2:	f013 0207 	ands.w	r2, r3, #7
 80070c6:	4601      	mov	r1, r0
 80070c8:	d00b      	beq.n	80070e2 <__lo0bits+0x22>
 80070ca:	07da      	lsls	r2, r3, #31
 80070cc:	d423      	bmi.n	8007116 <__lo0bits+0x56>
 80070ce:	0798      	lsls	r0, r3, #30
 80070d0:	bf49      	itett	mi
 80070d2:	085b      	lsrmi	r3, r3, #1
 80070d4:	089b      	lsrpl	r3, r3, #2
 80070d6:	2001      	movmi	r0, #1
 80070d8:	600b      	strmi	r3, [r1, #0]
 80070da:	bf5c      	itt	pl
 80070dc:	600b      	strpl	r3, [r1, #0]
 80070de:	2002      	movpl	r0, #2
 80070e0:	4770      	bx	lr
 80070e2:	b298      	uxth	r0, r3
 80070e4:	b9a8      	cbnz	r0, 8007112 <__lo0bits+0x52>
 80070e6:	0c1b      	lsrs	r3, r3, #16
 80070e8:	2010      	movs	r0, #16
 80070ea:	b2da      	uxtb	r2, r3
 80070ec:	b90a      	cbnz	r2, 80070f2 <__lo0bits+0x32>
 80070ee:	3008      	adds	r0, #8
 80070f0:	0a1b      	lsrs	r3, r3, #8
 80070f2:	071a      	lsls	r2, r3, #28
 80070f4:	bf04      	itt	eq
 80070f6:	091b      	lsreq	r3, r3, #4
 80070f8:	3004      	addeq	r0, #4
 80070fa:	079a      	lsls	r2, r3, #30
 80070fc:	bf04      	itt	eq
 80070fe:	089b      	lsreq	r3, r3, #2
 8007100:	3002      	addeq	r0, #2
 8007102:	07da      	lsls	r2, r3, #31
 8007104:	d403      	bmi.n	800710e <__lo0bits+0x4e>
 8007106:	085b      	lsrs	r3, r3, #1
 8007108:	f100 0001 	add.w	r0, r0, #1
 800710c:	d005      	beq.n	800711a <__lo0bits+0x5a>
 800710e:	600b      	str	r3, [r1, #0]
 8007110:	4770      	bx	lr
 8007112:	4610      	mov	r0, r2
 8007114:	e7e9      	b.n	80070ea <__lo0bits+0x2a>
 8007116:	2000      	movs	r0, #0
 8007118:	4770      	bx	lr
 800711a:	2020      	movs	r0, #32
 800711c:	4770      	bx	lr
	...

08007120 <__i2b>:
 8007120:	b510      	push	{r4, lr}
 8007122:	460c      	mov	r4, r1
 8007124:	2101      	movs	r1, #1
 8007126:	f7ff ff03 	bl	8006f30 <_Balloc>
 800712a:	4602      	mov	r2, r0
 800712c:	b928      	cbnz	r0, 800713a <__i2b+0x1a>
 800712e:	4b05      	ldr	r3, [pc, #20]	; (8007144 <__i2b+0x24>)
 8007130:	4805      	ldr	r0, [pc, #20]	; (8007148 <__i2b+0x28>)
 8007132:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007136:	f000 fd35 	bl	8007ba4 <__assert_func>
 800713a:	2301      	movs	r3, #1
 800713c:	6144      	str	r4, [r0, #20]
 800713e:	6103      	str	r3, [r0, #16]
 8007140:	bd10      	pop	{r4, pc}
 8007142:	bf00      	nop
 8007144:	0800898b 	.word	0x0800898b
 8007148:	080089fc 	.word	0x080089fc

0800714c <__multiply>:
 800714c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007150:	4691      	mov	r9, r2
 8007152:	690a      	ldr	r2, [r1, #16]
 8007154:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007158:	429a      	cmp	r2, r3
 800715a:	bfb8      	it	lt
 800715c:	460b      	movlt	r3, r1
 800715e:	460c      	mov	r4, r1
 8007160:	bfbc      	itt	lt
 8007162:	464c      	movlt	r4, r9
 8007164:	4699      	movlt	r9, r3
 8007166:	6927      	ldr	r7, [r4, #16]
 8007168:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800716c:	68a3      	ldr	r3, [r4, #8]
 800716e:	6861      	ldr	r1, [r4, #4]
 8007170:	eb07 060a 	add.w	r6, r7, sl
 8007174:	42b3      	cmp	r3, r6
 8007176:	b085      	sub	sp, #20
 8007178:	bfb8      	it	lt
 800717a:	3101      	addlt	r1, #1
 800717c:	f7ff fed8 	bl	8006f30 <_Balloc>
 8007180:	b930      	cbnz	r0, 8007190 <__multiply+0x44>
 8007182:	4602      	mov	r2, r0
 8007184:	4b44      	ldr	r3, [pc, #272]	; (8007298 <__multiply+0x14c>)
 8007186:	4845      	ldr	r0, [pc, #276]	; (800729c <__multiply+0x150>)
 8007188:	f240 115d 	movw	r1, #349	; 0x15d
 800718c:	f000 fd0a 	bl	8007ba4 <__assert_func>
 8007190:	f100 0514 	add.w	r5, r0, #20
 8007194:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007198:	462b      	mov	r3, r5
 800719a:	2200      	movs	r2, #0
 800719c:	4543      	cmp	r3, r8
 800719e:	d321      	bcc.n	80071e4 <__multiply+0x98>
 80071a0:	f104 0314 	add.w	r3, r4, #20
 80071a4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80071a8:	f109 0314 	add.w	r3, r9, #20
 80071ac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80071b0:	9202      	str	r2, [sp, #8]
 80071b2:	1b3a      	subs	r2, r7, r4
 80071b4:	3a15      	subs	r2, #21
 80071b6:	f022 0203 	bic.w	r2, r2, #3
 80071ba:	3204      	adds	r2, #4
 80071bc:	f104 0115 	add.w	r1, r4, #21
 80071c0:	428f      	cmp	r7, r1
 80071c2:	bf38      	it	cc
 80071c4:	2204      	movcc	r2, #4
 80071c6:	9201      	str	r2, [sp, #4]
 80071c8:	9a02      	ldr	r2, [sp, #8]
 80071ca:	9303      	str	r3, [sp, #12]
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d80c      	bhi.n	80071ea <__multiply+0x9e>
 80071d0:	2e00      	cmp	r6, #0
 80071d2:	dd03      	ble.n	80071dc <__multiply+0x90>
 80071d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d05a      	beq.n	8007292 <__multiply+0x146>
 80071dc:	6106      	str	r6, [r0, #16]
 80071de:	b005      	add	sp, #20
 80071e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071e4:	f843 2b04 	str.w	r2, [r3], #4
 80071e8:	e7d8      	b.n	800719c <__multiply+0x50>
 80071ea:	f8b3 a000 	ldrh.w	sl, [r3]
 80071ee:	f1ba 0f00 	cmp.w	sl, #0
 80071f2:	d024      	beq.n	800723e <__multiply+0xf2>
 80071f4:	f104 0e14 	add.w	lr, r4, #20
 80071f8:	46a9      	mov	r9, r5
 80071fa:	f04f 0c00 	mov.w	ip, #0
 80071fe:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007202:	f8d9 1000 	ldr.w	r1, [r9]
 8007206:	fa1f fb82 	uxth.w	fp, r2
 800720a:	b289      	uxth	r1, r1
 800720c:	fb0a 110b 	mla	r1, sl, fp, r1
 8007210:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007214:	f8d9 2000 	ldr.w	r2, [r9]
 8007218:	4461      	add	r1, ip
 800721a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800721e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007222:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007226:	b289      	uxth	r1, r1
 8007228:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800722c:	4577      	cmp	r7, lr
 800722e:	f849 1b04 	str.w	r1, [r9], #4
 8007232:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007236:	d8e2      	bhi.n	80071fe <__multiply+0xb2>
 8007238:	9a01      	ldr	r2, [sp, #4]
 800723a:	f845 c002 	str.w	ip, [r5, r2]
 800723e:	9a03      	ldr	r2, [sp, #12]
 8007240:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007244:	3304      	adds	r3, #4
 8007246:	f1b9 0f00 	cmp.w	r9, #0
 800724a:	d020      	beq.n	800728e <__multiply+0x142>
 800724c:	6829      	ldr	r1, [r5, #0]
 800724e:	f104 0c14 	add.w	ip, r4, #20
 8007252:	46ae      	mov	lr, r5
 8007254:	f04f 0a00 	mov.w	sl, #0
 8007258:	f8bc b000 	ldrh.w	fp, [ip]
 800725c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007260:	fb09 220b 	mla	r2, r9, fp, r2
 8007264:	4492      	add	sl, r2
 8007266:	b289      	uxth	r1, r1
 8007268:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800726c:	f84e 1b04 	str.w	r1, [lr], #4
 8007270:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007274:	f8be 1000 	ldrh.w	r1, [lr]
 8007278:	0c12      	lsrs	r2, r2, #16
 800727a:	fb09 1102 	mla	r1, r9, r2, r1
 800727e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007282:	4567      	cmp	r7, ip
 8007284:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007288:	d8e6      	bhi.n	8007258 <__multiply+0x10c>
 800728a:	9a01      	ldr	r2, [sp, #4]
 800728c:	50a9      	str	r1, [r5, r2]
 800728e:	3504      	adds	r5, #4
 8007290:	e79a      	b.n	80071c8 <__multiply+0x7c>
 8007292:	3e01      	subs	r6, #1
 8007294:	e79c      	b.n	80071d0 <__multiply+0x84>
 8007296:	bf00      	nop
 8007298:	0800898b 	.word	0x0800898b
 800729c:	080089fc 	.word	0x080089fc

080072a0 <__pow5mult>:
 80072a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072a4:	4615      	mov	r5, r2
 80072a6:	f012 0203 	ands.w	r2, r2, #3
 80072aa:	4606      	mov	r6, r0
 80072ac:	460f      	mov	r7, r1
 80072ae:	d007      	beq.n	80072c0 <__pow5mult+0x20>
 80072b0:	4c25      	ldr	r4, [pc, #148]	; (8007348 <__pow5mult+0xa8>)
 80072b2:	3a01      	subs	r2, #1
 80072b4:	2300      	movs	r3, #0
 80072b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80072ba:	f7ff fe9b 	bl	8006ff4 <__multadd>
 80072be:	4607      	mov	r7, r0
 80072c0:	10ad      	asrs	r5, r5, #2
 80072c2:	d03d      	beq.n	8007340 <__pow5mult+0xa0>
 80072c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80072c6:	b97c      	cbnz	r4, 80072e8 <__pow5mult+0x48>
 80072c8:	2010      	movs	r0, #16
 80072ca:	f7ff fe1b 	bl	8006f04 <malloc>
 80072ce:	4602      	mov	r2, r0
 80072d0:	6270      	str	r0, [r6, #36]	; 0x24
 80072d2:	b928      	cbnz	r0, 80072e0 <__pow5mult+0x40>
 80072d4:	4b1d      	ldr	r3, [pc, #116]	; (800734c <__pow5mult+0xac>)
 80072d6:	481e      	ldr	r0, [pc, #120]	; (8007350 <__pow5mult+0xb0>)
 80072d8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80072dc:	f000 fc62 	bl	8007ba4 <__assert_func>
 80072e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80072e4:	6004      	str	r4, [r0, #0]
 80072e6:	60c4      	str	r4, [r0, #12]
 80072e8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80072ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80072f0:	b94c      	cbnz	r4, 8007306 <__pow5mult+0x66>
 80072f2:	f240 2171 	movw	r1, #625	; 0x271
 80072f6:	4630      	mov	r0, r6
 80072f8:	f7ff ff12 	bl	8007120 <__i2b>
 80072fc:	2300      	movs	r3, #0
 80072fe:	f8c8 0008 	str.w	r0, [r8, #8]
 8007302:	4604      	mov	r4, r0
 8007304:	6003      	str	r3, [r0, #0]
 8007306:	f04f 0900 	mov.w	r9, #0
 800730a:	07eb      	lsls	r3, r5, #31
 800730c:	d50a      	bpl.n	8007324 <__pow5mult+0x84>
 800730e:	4639      	mov	r1, r7
 8007310:	4622      	mov	r2, r4
 8007312:	4630      	mov	r0, r6
 8007314:	f7ff ff1a 	bl	800714c <__multiply>
 8007318:	4639      	mov	r1, r7
 800731a:	4680      	mov	r8, r0
 800731c:	4630      	mov	r0, r6
 800731e:	f7ff fe47 	bl	8006fb0 <_Bfree>
 8007322:	4647      	mov	r7, r8
 8007324:	106d      	asrs	r5, r5, #1
 8007326:	d00b      	beq.n	8007340 <__pow5mult+0xa0>
 8007328:	6820      	ldr	r0, [r4, #0]
 800732a:	b938      	cbnz	r0, 800733c <__pow5mult+0x9c>
 800732c:	4622      	mov	r2, r4
 800732e:	4621      	mov	r1, r4
 8007330:	4630      	mov	r0, r6
 8007332:	f7ff ff0b 	bl	800714c <__multiply>
 8007336:	6020      	str	r0, [r4, #0]
 8007338:	f8c0 9000 	str.w	r9, [r0]
 800733c:	4604      	mov	r4, r0
 800733e:	e7e4      	b.n	800730a <__pow5mult+0x6a>
 8007340:	4638      	mov	r0, r7
 8007342:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007346:	bf00      	nop
 8007348:	08008b48 	.word	0x08008b48
 800734c:	08008919 	.word	0x08008919
 8007350:	080089fc 	.word	0x080089fc

08007354 <__lshift>:
 8007354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007358:	460c      	mov	r4, r1
 800735a:	6849      	ldr	r1, [r1, #4]
 800735c:	6923      	ldr	r3, [r4, #16]
 800735e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007362:	68a3      	ldr	r3, [r4, #8]
 8007364:	4607      	mov	r7, r0
 8007366:	4691      	mov	r9, r2
 8007368:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800736c:	f108 0601 	add.w	r6, r8, #1
 8007370:	42b3      	cmp	r3, r6
 8007372:	db0b      	blt.n	800738c <__lshift+0x38>
 8007374:	4638      	mov	r0, r7
 8007376:	f7ff fddb 	bl	8006f30 <_Balloc>
 800737a:	4605      	mov	r5, r0
 800737c:	b948      	cbnz	r0, 8007392 <__lshift+0x3e>
 800737e:	4602      	mov	r2, r0
 8007380:	4b2a      	ldr	r3, [pc, #168]	; (800742c <__lshift+0xd8>)
 8007382:	482b      	ldr	r0, [pc, #172]	; (8007430 <__lshift+0xdc>)
 8007384:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007388:	f000 fc0c 	bl	8007ba4 <__assert_func>
 800738c:	3101      	adds	r1, #1
 800738e:	005b      	lsls	r3, r3, #1
 8007390:	e7ee      	b.n	8007370 <__lshift+0x1c>
 8007392:	2300      	movs	r3, #0
 8007394:	f100 0114 	add.w	r1, r0, #20
 8007398:	f100 0210 	add.w	r2, r0, #16
 800739c:	4618      	mov	r0, r3
 800739e:	4553      	cmp	r3, sl
 80073a0:	db37      	blt.n	8007412 <__lshift+0xbe>
 80073a2:	6920      	ldr	r0, [r4, #16]
 80073a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80073a8:	f104 0314 	add.w	r3, r4, #20
 80073ac:	f019 091f 	ands.w	r9, r9, #31
 80073b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80073b4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80073b8:	d02f      	beq.n	800741a <__lshift+0xc6>
 80073ba:	f1c9 0e20 	rsb	lr, r9, #32
 80073be:	468a      	mov	sl, r1
 80073c0:	f04f 0c00 	mov.w	ip, #0
 80073c4:	681a      	ldr	r2, [r3, #0]
 80073c6:	fa02 f209 	lsl.w	r2, r2, r9
 80073ca:	ea42 020c 	orr.w	r2, r2, ip
 80073ce:	f84a 2b04 	str.w	r2, [sl], #4
 80073d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80073d6:	4298      	cmp	r0, r3
 80073d8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80073dc:	d8f2      	bhi.n	80073c4 <__lshift+0x70>
 80073de:	1b03      	subs	r3, r0, r4
 80073e0:	3b15      	subs	r3, #21
 80073e2:	f023 0303 	bic.w	r3, r3, #3
 80073e6:	3304      	adds	r3, #4
 80073e8:	f104 0215 	add.w	r2, r4, #21
 80073ec:	4290      	cmp	r0, r2
 80073ee:	bf38      	it	cc
 80073f0:	2304      	movcc	r3, #4
 80073f2:	f841 c003 	str.w	ip, [r1, r3]
 80073f6:	f1bc 0f00 	cmp.w	ip, #0
 80073fa:	d001      	beq.n	8007400 <__lshift+0xac>
 80073fc:	f108 0602 	add.w	r6, r8, #2
 8007400:	3e01      	subs	r6, #1
 8007402:	4638      	mov	r0, r7
 8007404:	612e      	str	r6, [r5, #16]
 8007406:	4621      	mov	r1, r4
 8007408:	f7ff fdd2 	bl	8006fb0 <_Bfree>
 800740c:	4628      	mov	r0, r5
 800740e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007412:	f842 0f04 	str.w	r0, [r2, #4]!
 8007416:	3301      	adds	r3, #1
 8007418:	e7c1      	b.n	800739e <__lshift+0x4a>
 800741a:	3904      	subs	r1, #4
 800741c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007420:	f841 2f04 	str.w	r2, [r1, #4]!
 8007424:	4298      	cmp	r0, r3
 8007426:	d8f9      	bhi.n	800741c <__lshift+0xc8>
 8007428:	e7ea      	b.n	8007400 <__lshift+0xac>
 800742a:	bf00      	nop
 800742c:	0800898b 	.word	0x0800898b
 8007430:	080089fc 	.word	0x080089fc

08007434 <__mcmp>:
 8007434:	b530      	push	{r4, r5, lr}
 8007436:	6902      	ldr	r2, [r0, #16]
 8007438:	690c      	ldr	r4, [r1, #16]
 800743a:	1b12      	subs	r2, r2, r4
 800743c:	d10e      	bne.n	800745c <__mcmp+0x28>
 800743e:	f100 0314 	add.w	r3, r0, #20
 8007442:	3114      	adds	r1, #20
 8007444:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007448:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800744c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007450:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007454:	42a5      	cmp	r5, r4
 8007456:	d003      	beq.n	8007460 <__mcmp+0x2c>
 8007458:	d305      	bcc.n	8007466 <__mcmp+0x32>
 800745a:	2201      	movs	r2, #1
 800745c:	4610      	mov	r0, r2
 800745e:	bd30      	pop	{r4, r5, pc}
 8007460:	4283      	cmp	r3, r0
 8007462:	d3f3      	bcc.n	800744c <__mcmp+0x18>
 8007464:	e7fa      	b.n	800745c <__mcmp+0x28>
 8007466:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800746a:	e7f7      	b.n	800745c <__mcmp+0x28>

0800746c <__mdiff>:
 800746c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007470:	460c      	mov	r4, r1
 8007472:	4606      	mov	r6, r0
 8007474:	4611      	mov	r1, r2
 8007476:	4620      	mov	r0, r4
 8007478:	4690      	mov	r8, r2
 800747a:	f7ff ffdb 	bl	8007434 <__mcmp>
 800747e:	1e05      	subs	r5, r0, #0
 8007480:	d110      	bne.n	80074a4 <__mdiff+0x38>
 8007482:	4629      	mov	r1, r5
 8007484:	4630      	mov	r0, r6
 8007486:	f7ff fd53 	bl	8006f30 <_Balloc>
 800748a:	b930      	cbnz	r0, 800749a <__mdiff+0x2e>
 800748c:	4b3a      	ldr	r3, [pc, #232]	; (8007578 <__mdiff+0x10c>)
 800748e:	4602      	mov	r2, r0
 8007490:	f240 2132 	movw	r1, #562	; 0x232
 8007494:	4839      	ldr	r0, [pc, #228]	; (800757c <__mdiff+0x110>)
 8007496:	f000 fb85 	bl	8007ba4 <__assert_func>
 800749a:	2301      	movs	r3, #1
 800749c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80074a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074a4:	bfa4      	itt	ge
 80074a6:	4643      	movge	r3, r8
 80074a8:	46a0      	movge	r8, r4
 80074aa:	4630      	mov	r0, r6
 80074ac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80074b0:	bfa6      	itte	ge
 80074b2:	461c      	movge	r4, r3
 80074b4:	2500      	movge	r5, #0
 80074b6:	2501      	movlt	r5, #1
 80074b8:	f7ff fd3a 	bl	8006f30 <_Balloc>
 80074bc:	b920      	cbnz	r0, 80074c8 <__mdiff+0x5c>
 80074be:	4b2e      	ldr	r3, [pc, #184]	; (8007578 <__mdiff+0x10c>)
 80074c0:	4602      	mov	r2, r0
 80074c2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80074c6:	e7e5      	b.n	8007494 <__mdiff+0x28>
 80074c8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80074cc:	6926      	ldr	r6, [r4, #16]
 80074ce:	60c5      	str	r5, [r0, #12]
 80074d0:	f104 0914 	add.w	r9, r4, #20
 80074d4:	f108 0514 	add.w	r5, r8, #20
 80074d8:	f100 0e14 	add.w	lr, r0, #20
 80074dc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80074e0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80074e4:	f108 0210 	add.w	r2, r8, #16
 80074e8:	46f2      	mov	sl, lr
 80074ea:	2100      	movs	r1, #0
 80074ec:	f859 3b04 	ldr.w	r3, [r9], #4
 80074f0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80074f4:	fa1f f883 	uxth.w	r8, r3
 80074f8:	fa11 f18b 	uxtah	r1, r1, fp
 80074fc:	0c1b      	lsrs	r3, r3, #16
 80074fe:	eba1 0808 	sub.w	r8, r1, r8
 8007502:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007506:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800750a:	fa1f f888 	uxth.w	r8, r8
 800750e:	1419      	asrs	r1, r3, #16
 8007510:	454e      	cmp	r6, r9
 8007512:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007516:	f84a 3b04 	str.w	r3, [sl], #4
 800751a:	d8e7      	bhi.n	80074ec <__mdiff+0x80>
 800751c:	1b33      	subs	r3, r6, r4
 800751e:	3b15      	subs	r3, #21
 8007520:	f023 0303 	bic.w	r3, r3, #3
 8007524:	3304      	adds	r3, #4
 8007526:	3415      	adds	r4, #21
 8007528:	42a6      	cmp	r6, r4
 800752a:	bf38      	it	cc
 800752c:	2304      	movcc	r3, #4
 800752e:	441d      	add	r5, r3
 8007530:	4473      	add	r3, lr
 8007532:	469e      	mov	lr, r3
 8007534:	462e      	mov	r6, r5
 8007536:	4566      	cmp	r6, ip
 8007538:	d30e      	bcc.n	8007558 <__mdiff+0xec>
 800753a:	f10c 0203 	add.w	r2, ip, #3
 800753e:	1b52      	subs	r2, r2, r5
 8007540:	f022 0203 	bic.w	r2, r2, #3
 8007544:	3d03      	subs	r5, #3
 8007546:	45ac      	cmp	ip, r5
 8007548:	bf38      	it	cc
 800754a:	2200      	movcc	r2, #0
 800754c:	441a      	add	r2, r3
 800754e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007552:	b17b      	cbz	r3, 8007574 <__mdiff+0x108>
 8007554:	6107      	str	r7, [r0, #16]
 8007556:	e7a3      	b.n	80074a0 <__mdiff+0x34>
 8007558:	f856 8b04 	ldr.w	r8, [r6], #4
 800755c:	fa11 f288 	uxtah	r2, r1, r8
 8007560:	1414      	asrs	r4, r2, #16
 8007562:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007566:	b292      	uxth	r2, r2
 8007568:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800756c:	f84e 2b04 	str.w	r2, [lr], #4
 8007570:	1421      	asrs	r1, r4, #16
 8007572:	e7e0      	b.n	8007536 <__mdiff+0xca>
 8007574:	3f01      	subs	r7, #1
 8007576:	e7ea      	b.n	800754e <__mdiff+0xe2>
 8007578:	0800898b 	.word	0x0800898b
 800757c:	080089fc 	.word	0x080089fc

08007580 <__d2b>:
 8007580:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007584:	4689      	mov	r9, r1
 8007586:	2101      	movs	r1, #1
 8007588:	ec57 6b10 	vmov	r6, r7, d0
 800758c:	4690      	mov	r8, r2
 800758e:	f7ff fccf 	bl	8006f30 <_Balloc>
 8007592:	4604      	mov	r4, r0
 8007594:	b930      	cbnz	r0, 80075a4 <__d2b+0x24>
 8007596:	4602      	mov	r2, r0
 8007598:	4b25      	ldr	r3, [pc, #148]	; (8007630 <__d2b+0xb0>)
 800759a:	4826      	ldr	r0, [pc, #152]	; (8007634 <__d2b+0xb4>)
 800759c:	f240 310a 	movw	r1, #778	; 0x30a
 80075a0:	f000 fb00 	bl	8007ba4 <__assert_func>
 80075a4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80075a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80075ac:	bb35      	cbnz	r5, 80075fc <__d2b+0x7c>
 80075ae:	2e00      	cmp	r6, #0
 80075b0:	9301      	str	r3, [sp, #4]
 80075b2:	d028      	beq.n	8007606 <__d2b+0x86>
 80075b4:	4668      	mov	r0, sp
 80075b6:	9600      	str	r6, [sp, #0]
 80075b8:	f7ff fd82 	bl	80070c0 <__lo0bits>
 80075bc:	9900      	ldr	r1, [sp, #0]
 80075be:	b300      	cbz	r0, 8007602 <__d2b+0x82>
 80075c0:	9a01      	ldr	r2, [sp, #4]
 80075c2:	f1c0 0320 	rsb	r3, r0, #32
 80075c6:	fa02 f303 	lsl.w	r3, r2, r3
 80075ca:	430b      	orrs	r3, r1
 80075cc:	40c2      	lsrs	r2, r0
 80075ce:	6163      	str	r3, [r4, #20]
 80075d0:	9201      	str	r2, [sp, #4]
 80075d2:	9b01      	ldr	r3, [sp, #4]
 80075d4:	61a3      	str	r3, [r4, #24]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	bf14      	ite	ne
 80075da:	2202      	movne	r2, #2
 80075dc:	2201      	moveq	r2, #1
 80075de:	6122      	str	r2, [r4, #16]
 80075e0:	b1d5      	cbz	r5, 8007618 <__d2b+0x98>
 80075e2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80075e6:	4405      	add	r5, r0
 80075e8:	f8c9 5000 	str.w	r5, [r9]
 80075ec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80075f0:	f8c8 0000 	str.w	r0, [r8]
 80075f4:	4620      	mov	r0, r4
 80075f6:	b003      	add	sp, #12
 80075f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80075fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007600:	e7d5      	b.n	80075ae <__d2b+0x2e>
 8007602:	6161      	str	r1, [r4, #20]
 8007604:	e7e5      	b.n	80075d2 <__d2b+0x52>
 8007606:	a801      	add	r0, sp, #4
 8007608:	f7ff fd5a 	bl	80070c0 <__lo0bits>
 800760c:	9b01      	ldr	r3, [sp, #4]
 800760e:	6163      	str	r3, [r4, #20]
 8007610:	2201      	movs	r2, #1
 8007612:	6122      	str	r2, [r4, #16]
 8007614:	3020      	adds	r0, #32
 8007616:	e7e3      	b.n	80075e0 <__d2b+0x60>
 8007618:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800761c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007620:	f8c9 0000 	str.w	r0, [r9]
 8007624:	6918      	ldr	r0, [r3, #16]
 8007626:	f7ff fd2b 	bl	8007080 <__hi0bits>
 800762a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800762e:	e7df      	b.n	80075f0 <__d2b+0x70>
 8007630:	0800898b 	.word	0x0800898b
 8007634:	080089fc 	.word	0x080089fc

08007638 <_calloc_r>:
 8007638:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800763a:	fba1 2402 	umull	r2, r4, r1, r2
 800763e:	b94c      	cbnz	r4, 8007654 <_calloc_r+0x1c>
 8007640:	4611      	mov	r1, r2
 8007642:	9201      	str	r2, [sp, #4]
 8007644:	f000 f87a 	bl	800773c <_malloc_r>
 8007648:	9a01      	ldr	r2, [sp, #4]
 800764a:	4605      	mov	r5, r0
 800764c:	b930      	cbnz	r0, 800765c <_calloc_r+0x24>
 800764e:	4628      	mov	r0, r5
 8007650:	b003      	add	sp, #12
 8007652:	bd30      	pop	{r4, r5, pc}
 8007654:	220c      	movs	r2, #12
 8007656:	6002      	str	r2, [r0, #0]
 8007658:	2500      	movs	r5, #0
 800765a:	e7f8      	b.n	800764e <_calloc_r+0x16>
 800765c:	4621      	mov	r1, r4
 800765e:	f7fd fdf3 	bl	8005248 <memset>
 8007662:	e7f4      	b.n	800764e <_calloc_r+0x16>

08007664 <_free_r>:
 8007664:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007666:	2900      	cmp	r1, #0
 8007668:	d044      	beq.n	80076f4 <_free_r+0x90>
 800766a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800766e:	9001      	str	r0, [sp, #4]
 8007670:	2b00      	cmp	r3, #0
 8007672:	f1a1 0404 	sub.w	r4, r1, #4
 8007676:	bfb8      	it	lt
 8007678:	18e4      	addlt	r4, r4, r3
 800767a:	f000 fb19 	bl	8007cb0 <__malloc_lock>
 800767e:	4a1e      	ldr	r2, [pc, #120]	; (80076f8 <_free_r+0x94>)
 8007680:	9801      	ldr	r0, [sp, #4]
 8007682:	6813      	ldr	r3, [r2, #0]
 8007684:	b933      	cbnz	r3, 8007694 <_free_r+0x30>
 8007686:	6063      	str	r3, [r4, #4]
 8007688:	6014      	str	r4, [r2, #0]
 800768a:	b003      	add	sp, #12
 800768c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007690:	f000 bb14 	b.w	8007cbc <__malloc_unlock>
 8007694:	42a3      	cmp	r3, r4
 8007696:	d908      	bls.n	80076aa <_free_r+0x46>
 8007698:	6825      	ldr	r5, [r4, #0]
 800769a:	1961      	adds	r1, r4, r5
 800769c:	428b      	cmp	r3, r1
 800769e:	bf01      	itttt	eq
 80076a0:	6819      	ldreq	r1, [r3, #0]
 80076a2:	685b      	ldreq	r3, [r3, #4]
 80076a4:	1949      	addeq	r1, r1, r5
 80076a6:	6021      	streq	r1, [r4, #0]
 80076a8:	e7ed      	b.n	8007686 <_free_r+0x22>
 80076aa:	461a      	mov	r2, r3
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	b10b      	cbz	r3, 80076b4 <_free_r+0x50>
 80076b0:	42a3      	cmp	r3, r4
 80076b2:	d9fa      	bls.n	80076aa <_free_r+0x46>
 80076b4:	6811      	ldr	r1, [r2, #0]
 80076b6:	1855      	adds	r5, r2, r1
 80076b8:	42a5      	cmp	r5, r4
 80076ba:	d10b      	bne.n	80076d4 <_free_r+0x70>
 80076bc:	6824      	ldr	r4, [r4, #0]
 80076be:	4421      	add	r1, r4
 80076c0:	1854      	adds	r4, r2, r1
 80076c2:	42a3      	cmp	r3, r4
 80076c4:	6011      	str	r1, [r2, #0]
 80076c6:	d1e0      	bne.n	800768a <_free_r+0x26>
 80076c8:	681c      	ldr	r4, [r3, #0]
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	6053      	str	r3, [r2, #4]
 80076ce:	4421      	add	r1, r4
 80076d0:	6011      	str	r1, [r2, #0]
 80076d2:	e7da      	b.n	800768a <_free_r+0x26>
 80076d4:	d902      	bls.n	80076dc <_free_r+0x78>
 80076d6:	230c      	movs	r3, #12
 80076d8:	6003      	str	r3, [r0, #0]
 80076da:	e7d6      	b.n	800768a <_free_r+0x26>
 80076dc:	6825      	ldr	r5, [r4, #0]
 80076de:	1961      	adds	r1, r4, r5
 80076e0:	428b      	cmp	r3, r1
 80076e2:	bf04      	itt	eq
 80076e4:	6819      	ldreq	r1, [r3, #0]
 80076e6:	685b      	ldreq	r3, [r3, #4]
 80076e8:	6063      	str	r3, [r4, #4]
 80076ea:	bf04      	itt	eq
 80076ec:	1949      	addeq	r1, r1, r5
 80076ee:	6021      	streq	r1, [r4, #0]
 80076f0:	6054      	str	r4, [r2, #4]
 80076f2:	e7ca      	b.n	800768a <_free_r+0x26>
 80076f4:	b003      	add	sp, #12
 80076f6:	bd30      	pop	{r4, r5, pc}
 80076f8:	200003b4 	.word	0x200003b4

080076fc <sbrk_aligned>:
 80076fc:	b570      	push	{r4, r5, r6, lr}
 80076fe:	4e0e      	ldr	r6, [pc, #56]	; (8007738 <sbrk_aligned+0x3c>)
 8007700:	460c      	mov	r4, r1
 8007702:	6831      	ldr	r1, [r6, #0]
 8007704:	4605      	mov	r5, r0
 8007706:	b911      	cbnz	r1, 800770e <sbrk_aligned+0x12>
 8007708:	f000 f9e6 	bl	8007ad8 <_sbrk_r>
 800770c:	6030      	str	r0, [r6, #0]
 800770e:	4621      	mov	r1, r4
 8007710:	4628      	mov	r0, r5
 8007712:	f000 f9e1 	bl	8007ad8 <_sbrk_r>
 8007716:	1c43      	adds	r3, r0, #1
 8007718:	d00a      	beq.n	8007730 <sbrk_aligned+0x34>
 800771a:	1cc4      	adds	r4, r0, #3
 800771c:	f024 0403 	bic.w	r4, r4, #3
 8007720:	42a0      	cmp	r0, r4
 8007722:	d007      	beq.n	8007734 <sbrk_aligned+0x38>
 8007724:	1a21      	subs	r1, r4, r0
 8007726:	4628      	mov	r0, r5
 8007728:	f000 f9d6 	bl	8007ad8 <_sbrk_r>
 800772c:	3001      	adds	r0, #1
 800772e:	d101      	bne.n	8007734 <sbrk_aligned+0x38>
 8007730:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007734:	4620      	mov	r0, r4
 8007736:	bd70      	pop	{r4, r5, r6, pc}
 8007738:	200003b8 	.word	0x200003b8

0800773c <_malloc_r>:
 800773c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007740:	1ccd      	adds	r5, r1, #3
 8007742:	f025 0503 	bic.w	r5, r5, #3
 8007746:	3508      	adds	r5, #8
 8007748:	2d0c      	cmp	r5, #12
 800774a:	bf38      	it	cc
 800774c:	250c      	movcc	r5, #12
 800774e:	2d00      	cmp	r5, #0
 8007750:	4607      	mov	r7, r0
 8007752:	db01      	blt.n	8007758 <_malloc_r+0x1c>
 8007754:	42a9      	cmp	r1, r5
 8007756:	d905      	bls.n	8007764 <_malloc_r+0x28>
 8007758:	230c      	movs	r3, #12
 800775a:	603b      	str	r3, [r7, #0]
 800775c:	2600      	movs	r6, #0
 800775e:	4630      	mov	r0, r6
 8007760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007764:	4e2e      	ldr	r6, [pc, #184]	; (8007820 <_malloc_r+0xe4>)
 8007766:	f000 faa3 	bl	8007cb0 <__malloc_lock>
 800776a:	6833      	ldr	r3, [r6, #0]
 800776c:	461c      	mov	r4, r3
 800776e:	bb34      	cbnz	r4, 80077be <_malloc_r+0x82>
 8007770:	4629      	mov	r1, r5
 8007772:	4638      	mov	r0, r7
 8007774:	f7ff ffc2 	bl	80076fc <sbrk_aligned>
 8007778:	1c43      	adds	r3, r0, #1
 800777a:	4604      	mov	r4, r0
 800777c:	d14d      	bne.n	800781a <_malloc_r+0xde>
 800777e:	6834      	ldr	r4, [r6, #0]
 8007780:	4626      	mov	r6, r4
 8007782:	2e00      	cmp	r6, #0
 8007784:	d140      	bne.n	8007808 <_malloc_r+0xcc>
 8007786:	6823      	ldr	r3, [r4, #0]
 8007788:	4631      	mov	r1, r6
 800778a:	4638      	mov	r0, r7
 800778c:	eb04 0803 	add.w	r8, r4, r3
 8007790:	f000 f9a2 	bl	8007ad8 <_sbrk_r>
 8007794:	4580      	cmp	r8, r0
 8007796:	d13a      	bne.n	800780e <_malloc_r+0xd2>
 8007798:	6821      	ldr	r1, [r4, #0]
 800779a:	3503      	adds	r5, #3
 800779c:	1a6d      	subs	r5, r5, r1
 800779e:	f025 0503 	bic.w	r5, r5, #3
 80077a2:	3508      	adds	r5, #8
 80077a4:	2d0c      	cmp	r5, #12
 80077a6:	bf38      	it	cc
 80077a8:	250c      	movcc	r5, #12
 80077aa:	4629      	mov	r1, r5
 80077ac:	4638      	mov	r0, r7
 80077ae:	f7ff ffa5 	bl	80076fc <sbrk_aligned>
 80077b2:	3001      	adds	r0, #1
 80077b4:	d02b      	beq.n	800780e <_malloc_r+0xd2>
 80077b6:	6823      	ldr	r3, [r4, #0]
 80077b8:	442b      	add	r3, r5
 80077ba:	6023      	str	r3, [r4, #0]
 80077bc:	e00e      	b.n	80077dc <_malloc_r+0xa0>
 80077be:	6822      	ldr	r2, [r4, #0]
 80077c0:	1b52      	subs	r2, r2, r5
 80077c2:	d41e      	bmi.n	8007802 <_malloc_r+0xc6>
 80077c4:	2a0b      	cmp	r2, #11
 80077c6:	d916      	bls.n	80077f6 <_malloc_r+0xba>
 80077c8:	1961      	adds	r1, r4, r5
 80077ca:	42a3      	cmp	r3, r4
 80077cc:	6025      	str	r5, [r4, #0]
 80077ce:	bf18      	it	ne
 80077d0:	6059      	strne	r1, [r3, #4]
 80077d2:	6863      	ldr	r3, [r4, #4]
 80077d4:	bf08      	it	eq
 80077d6:	6031      	streq	r1, [r6, #0]
 80077d8:	5162      	str	r2, [r4, r5]
 80077da:	604b      	str	r3, [r1, #4]
 80077dc:	4638      	mov	r0, r7
 80077de:	f104 060b 	add.w	r6, r4, #11
 80077e2:	f000 fa6b 	bl	8007cbc <__malloc_unlock>
 80077e6:	f026 0607 	bic.w	r6, r6, #7
 80077ea:	1d23      	adds	r3, r4, #4
 80077ec:	1af2      	subs	r2, r6, r3
 80077ee:	d0b6      	beq.n	800775e <_malloc_r+0x22>
 80077f0:	1b9b      	subs	r3, r3, r6
 80077f2:	50a3      	str	r3, [r4, r2]
 80077f4:	e7b3      	b.n	800775e <_malloc_r+0x22>
 80077f6:	6862      	ldr	r2, [r4, #4]
 80077f8:	42a3      	cmp	r3, r4
 80077fa:	bf0c      	ite	eq
 80077fc:	6032      	streq	r2, [r6, #0]
 80077fe:	605a      	strne	r2, [r3, #4]
 8007800:	e7ec      	b.n	80077dc <_malloc_r+0xa0>
 8007802:	4623      	mov	r3, r4
 8007804:	6864      	ldr	r4, [r4, #4]
 8007806:	e7b2      	b.n	800776e <_malloc_r+0x32>
 8007808:	4634      	mov	r4, r6
 800780a:	6876      	ldr	r6, [r6, #4]
 800780c:	e7b9      	b.n	8007782 <_malloc_r+0x46>
 800780e:	230c      	movs	r3, #12
 8007810:	603b      	str	r3, [r7, #0]
 8007812:	4638      	mov	r0, r7
 8007814:	f000 fa52 	bl	8007cbc <__malloc_unlock>
 8007818:	e7a1      	b.n	800775e <_malloc_r+0x22>
 800781a:	6025      	str	r5, [r4, #0]
 800781c:	e7de      	b.n	80077dc <_malloc_r+0xa0>
 800781e:	bf00      	nop
 8007820:	200003b4 	.word	0x200003b4

08007824 <__sfputc_r>:
 8007824:	6893      	ldr	r3, [r2, #8]
 8007826:	3b01      	subs	r3, #1
 8007828:	2b00      	cmp	r3, #0
 800782a:	b410      	push	{r4}
 800782c:	6093      	str	r3, [r2, #8]
 800782e:	da08      	bge.n	8007842 <__sfputc_r+0x1e>
 8007830:	6994      	ldr	r4, [r2, #24]
 8007832:	42a3      	cmp	r3, r4
 8007834:	db01      	blt.n	800783a <__sfputc_r+0x16>
 8007836:	290a      	cmp	r1, #10
 8007838:	d103      	bne.n	8007842 <__sfputc_r+0x1e>
 800783a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800783e:	f7fe ba03 	b.w	8005c48 <__swbuf_r>
 8007842:	6813      	ldr	r3, [r2, #0]
 8007844:	1c58      	adds	r0, r3, #1
 8007846:	6010      	str	r0, [r2, #0]
 8007848:	7019      	strb	r1, [r3, #0]
 800784a:	4608      	mov	r0, r1
 800784c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007850:	4770      	bx	lr

08007852 <__sfputs_r>:
 8007852:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007854:	4606      	mov	r6, r0
 8007856:	460f      	mov	r7, r1
 8007858:	4614      	mov	r4, r2
 800785a:	18d5      	adds	r5, r2, r3
 800785c:	42ac      	cmp	r4, r5
 800785e:	d101      	bne.n	8007864 <__sfputs_r+0x12>
 8007860:	2000      	movs	r0, #0
 8007862:	e007      	b.n	8007874 <__sfputs_r+0x22>
 8007864:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007868:	463a      	mov	r2, r7
 800786a:	4630      	mov	r0, r6
 800786c:	f7ff ffda 	bl	8007824 <__sfputc_r>
 8007870:	1c43      	adds	r3, r0, #1
 8007872:	d1f3      	bne.n	800785c <__sfputs_r+0xa>
 8007874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007878 <_vfiprintf_r>:
 8007878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800787c:	460d      	mov	r5, r1
 800787e:	b09d      	sub	sp, #116	; 0x74
 8007880:	4614      	mov	r4, r2
 8007882:	4698      	mov	r8, r3
 8007884:	4606      	mov	r6, r0
 8007886:	b118      	cbz	r0, 8007890 <_vfiprintf_r+0x18>
 8007888:	6983      	ldr	r3, [r0, #24]
 800788a:	b90b      	cbnz	r3, 8007890 <_vfiprintf_r+0x18>
 800788c:	f7ff fa30 	bl	8006cf0 <__sinit>
 8007890:	4b89      	ldr	r3, [pc, #548]	; (8007ab8 <_vfiprintf_r+0x240>)
 8007892:	429d      	cmp	r5, r3
 8007894:	d11b      	bne.n	80078ce <_vfiprintf_r+0x56>
 8007896:	6875      	ldr	r5, [r6, #4]
 8007898:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800789a:	07d9      	lsls	r1, r3, #31
 800789c:	d405      	bmi.n	80078aa <_vfiprintf_r+0x32>
 800789e:	89ab      	ldrh	r3, [r5, #12]
 80078a0:	059a      	lsls	r2, r3, #22
 80078a2:	d402      	bmi.n	80078aa <_vfiprintf_r+0x32>
 80078a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80078a6:	f7ff fac6 	bl	8006e36 <__retarget_lock_acquire_recursive>
 80078aa:	89ab      	ldrh	r3, [r5, #12]
 80078ac:	071b      	lsls	r3, r3, #28
 80078ae:	d501      	bpl.n	80078b4 <_vfiprintf_r+0x3c>
 80078b0:	692b      	ldr	r3, [r5, #16]
 80078b2:	b9eb      	cbnz	r3, 80078f0 <_vfiprintf_r+0x78>
 80078b4:	4629      	mov	r1, r5
 80078b6:	4630      	mov	r0, r6
 80078b8:	f7fe fa18 	bl	8005cec <__swsetup_r>
 80078bc:	b1c0      	cbz	r0, 80078f0 <_vfiprintf_r+0x78>
 80078be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80078c0:	07dc      	lsls	r4, r3, #31
 80078c2:	d50e      	bpl.n	80078e2 <_vfiprintf_r+0x6a>
 80078c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80078c8:	b01d      	add	sp, #116	; 0x74
 80078ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078ce:	4b7b      	ldr	r3, [pc, #492]	; (8007abc <_vfiprintf_r+0x244>)
 80078d0:	429d      	cmp	r5, r3
 80078d2:	d101      	bne.n	80078d8 <_vfiprintf_r+0x60>
 80078d4:	68b5      	ldr	r5, [r6, #8]
 80078d6:	e7df      	b.n	8007898 <_vfiprintf_r+0x20>
 80078d8:	4b79      	ldr	r3, [pc, #484]	; (8007ac0 <_vfiprintf_r+0x248>)
 80078da:	429d      	cmp	r5, r3
 80078dc:	bf08      	it	eq
 80078de:	68f5      	ldreq	r5, [r6, #12]
 80078e0:	e7da      	b.n	8007898 <_vfiprintf_r+0x20>
 80078e2:	89ab      	ldrh	r3, [r5, #12]
 80078e4:	0598      	lsls	r0, r3, #22
 80078e6:	d4ed      	bmi.n	80078c4 <_vfiprintf_r+0x4c>
 80078e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80078ea:	f7ff faa5 	bl	8006e38 <__retarget_lock_release_recursive>
 80078ee:	e7e9      	b.n	80078c4 <_vfiprintf_r+0x4c>
 80078f0:	2300      	movs	r3, #0
 80078f2:	9309      	str	r3, [sp, #36]	; 0x24
 80078f4:	2320      	movs	r3, #32
 80078f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80078fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80078fe:	2330      	movs	r3, #48	; 0x30
 8007900:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007ac4 <_vfiprintf_r+0x24c>
 8007904:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007908:	f04f 0901 	mov.w	r9, #1
 800790c:	4623      	mov	r3, r4
 800790e:	469a      	mov	sl, r3
 8007910:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007914:	b10a      	cbz	r2, 800791a <_vfiprintf_r+0xa2>
 8007916:	2a25      	cmp	r2, #37	; 0x25
 8007918:	d1f9      	bne.n	800790e <_vfiprintf_r+0x96>
 800791a:	ebba 0b04 	subs.w	fp, sl, r4
 800791e:	d00b      	beq.n	8007938 <_vfiprintf_r+0xc0>
 8007920:	465b      	mov	r3, fp
 8007922:	4622      	mov	r2, r4
 8007924:	4629      	mov	r1, r5
 8007926:	4630      	mov	r0, r6
 8007928:	f7ff ff93 	bl	8007852 <__sfputs_r>
 800792c:	3001      	adds	r0, #1
 800792e:	f000 80aa 	beq.w	8007a86 <_vfiprintf_r+0x20e>
 8007932:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007934:	445a      	add	r2, fp
 8007936:	9209      	str	r2, [sp, #36]	; 0x24
 8007938:	f89a 3000 	ldrb.w	r3, [sl]
 800793c:	2b00      	cmp	r3, #0
 800793e:	f000 80a2 	beq.w	8007a86 <_vfiprintf_r+0x20e>
 8007942:	2300      	movs	r3, #0
 8007944:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007948:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800794c:	f10a 0a01 	add.w	sl, sl, #1
 8007950:	9304      	str	r3, [sp, #16]
 8007952:	9307      	str	r3, [sp, #28]
 8007954:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007958:	931a      	str	r3, [sp, #104]	; 0x68
 800795a:	4654      	mov	r4, sl
 800795c:	2205      	movs	r2, #5
 800795e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007962:	4858      	ldr	r0, [pc, #352]	; (8007ac4 <_vfiprintf_r+0x24c>)
 8007964:	f7f8 fc44 	bl	80001f0 <memchr>
 8007968:	9a04      	ldr	r2, [sp, #16]
 800796a:	b9d8      	cbnz	r0, 80079a4 <_vfiprintf_r+0x12c>
 800796c:	06d1      	lsls	r1, r2, #27
 800796e:	bf44      	itt	mi
 8007970:	2320      	movmi	r3, #32
 8007972:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007976:	0713      	lsls	r3, r2, #28
 8007978:	bf44      	itt	mi
 800797a:	232b      	movmi	r3, #43	; 0x2b
 800797c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007980:	f89a 3000 	ldrb.w	r3, [sl]
 8007984:	2b2a      	cmp	r3, #42	; 0x2a
 8007986:	d015      	beq.n	80079b4 <_vfiprintf_r+0x13c>
 8007988:	9a07      	ldr	r2, [sp, #28]
 800798a:	4654      	mov	r4, sl
 800798c:	2000      	movs	r0, #0
 800798e:	f04f 0c0a 	mov.w	ip, #10
 8007992:	4621      	mov	r1, r4
 8007994:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007998:	3b30      	subs	r3, #48	; 0x30
 800799a:	2b09      	cmp	r3, #9
 800799c:	d94e      	bls.n	8007a3c <_vfiprintf_r+0x1c4>
 800799e:	b1b0      	cbz	r0, 80079ce <_vfiprintf_r+0x156>
 80079a0:	9207      	str	r2, [sp, #28]
 80079a2:	e014      	b.n	80079ce <_vfiprintf_r+0x156>
 80079a4:	eba0 0308 	sub.w	r3, r0, r8
 80079a8:	fa09 f303 	lsl.w	r3, r9, r3
 80079ac:	4313      	orrs	r3, r2
 80079ae:	9304      	str	r3, [sp, #16]
 80079b0:	46a2      	mov	sl, r4
 80079b2:	e7d2      	b.n	800795a <_vfiprintf_r+0xe2>
 80079b4:	9b03      	ldr	r3, [sp, #12]
 80079b6:	1d19      	adds	r1, r3, #4
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	9103      	str	r1, [sp, #12]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	bfbb      	ittet	lt
 80079c0:	425b      	neglt	r3, r3
 80079c2:	f042 0202 	orrlt.w	r2, r2, #2
 80079c6:	9307      	strge	r3, [sp, #28]
 80079c8:	9307      	strlt	r3, [sp, #28]
 80079ca:	bfb8      	it	lt
 80079cc:	9204      	strlt	r2, [sp, #16]
 80079ce:	7823      	ldrb	r3, [r4, #0]
 80079d0:	2b2e      	cmp	r3, #46	; 0x2e
 80079d2:	d10c      	bne.n	80079ee <_vfiprintf_r+0x176>
 80079d4:	7863      	ldrb	r3, [r4, #1]
 80079d6:	2b2a      	cmp	r3, #42	; 0x2a
 80079d8:	d135      	bne.n	8007a46 <_vfiprintf_r+0x1ce>
 80079da:	9b03      	ldr	r3, [sp, #12]
 80079dc:	1d1a      	adds	r2, r3, #4
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	9203      	str	r2, [sp, #12]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	bfb8      	it	lt
 80079e6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80079ea:	3402      	adds	r4, #2
 80079ec:	9305      	str	r3, [sp, #20]
 80079ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007ad4 <_vfiprintf_r+0x25c>
 80079f2:	7821      	ldrb	r1, [r4, #0]
 80079f4:	2203      	movs	r2, #3
 80079f6:	4650      	mov	r0, sl
 80079f8:	f7f8 fbfa 	bl	80001f0 <memchr>
 80079fc:	b140      	cbz	r0, 8007a10 <_vfiprintf_r+0x198>
 80079fe:	2340      	movs	r3, #64	; 0x40
 8007a00:	eba0 000a 	sub.w	r0, r0, sl
 8007a04:	fa03 f000 	lsl.w	r0, r3, r0
 8007a08:	9b04      	ldr	r3, [sp, #16]
 8007a0a:	4303      	orrs	r3, r0
 8007a0c:	3401      	adds	r4, #1
 8007a0e:	9304      	str	r3, [sp, #16]
 8007a10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a14:	482c      	ldr	r0, [pc, #176]	; (8007ac8 <_vfiprintf_r+0x250>)
 8007a16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a1a:	2206      	movs	r2, #6
 8007a1c:	f7f8 fbe8 	bl	80001f0 <memchr>
 8007a20:	2800      	cmp	r0, #0
 8007a22:	d03f      	beq.n	8007aa4 <_vfiprintf_r+0x22c>
 8007a24:	4b29      	ldr	r3, [pc, #164]	; (8007acc <_vfiprintf_r+0x254>)
 8007a26:	bb1b      	cbnz	r3, 8007a70 <_vfiprintf_r+0x1f8>
 8007a28:	9b03      	ldr	r3, [sp, #12]
 8007a2a:	3307      	adds	r3, #7
 8007a2c:	f023 0307 	bic.w	r3, r3, #7
 8007a30:	3308      	adds	r3, #8
 8007a32:	9303      	str	r3, [sp, #12]
 8007a34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a36:	443b      	add	r3, r7
 8007a38:	9309      	str	r3, [sp, #36]	; 0x24
 8007a3a:	e767      	b.n	800790c <_vfiprintf_r+0x94>
 8007a3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a40:	460c      	mov	r4, r1
 8007a42:	2001      	movs	r0, #1
 8007a44:	e7a5      	b.n	8007992 <_vfiprintf_r+0x11a>
 8007a46:	2300      	movs	r3, #0
 8007a48:	3401      	adds	r4, #1
 8007a4a:	9305      	str	r3, [sp, #20]
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	f04f 0c0a 	mov.w	ip, #10
 8007a52:	4620      	mov	r0, r4
 8007a54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a58:	3a30      	subs	r2, #48	; 0x30
 8007a5a:	2a09      	cmp	r2, #9
 8007a5c:	d903      	bls.n	8007a66 <_vfiprintf_r+0x1ee>
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d0c5      	beq.n	80079ee <_vfiprintf_r+0x176>
 8007a62:	9105      	str	r1, [sp, #20]
 8007a64:	e7c3      	b.n	80079ee <_vfiprintf_r+0x176>
 8007a66:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a6a:	4604      	mov	r4, r0
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	e7f0      	b.n	8007a52 <_vfiprintf_r+0x1da>
 8007a70:	ab03      	add	r3, sp, #12
 8007a72:	9300      	str	r3, [sp, #0]
 8007a74:	462a      	mov	r2, r5
 8007a76:	4b16      	ldr	r3, [pc, #88]	; (8007ad0 <_vfiprintf_r+0x258>)
 8007a78:	a904      	add	r1, sp, #16
 8007a7a:	4630      	mov	r0, r6
 8007a7c:	f7fd fc8c 	bl	8005398 <_printf_float>
 8007a80:	4607      	mov	r7, r0
 8007a82:	1c78      	adds	r0, r7, #1
 8007a84:	d1d6      	bne.n	8007a34 <_vfiprintf_r+0x1bc>
 8007a86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a88:	07d9      	lsls	r1, r3, #31
 8007a8a:	d405      	bmi.n	8007a98 <_vfiprintf_r+0x220>
 8007a8c:	89ab      	ldrh	r3, [r5, #12]
 8007a8e:	059a      	lsls	r2, r3, #22
 8007a90:	d402      	bmi.n	8007a98 <_vfiprintf_r+0x220>
 8007a92:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a94:	f7ff f9d0 	bl	8006e38 <__retarget_lock_release_recursive>
 8007a98:	89ab      	ldrh	r3, [r5, #12]
 8007a9a:	065b      	lsls	r3, r3, #25
 8007a9c:	f53f af12 	bmi.w	80078c4 <_vfiprintf_r+0x4c>
 8007aa0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007aa2:	e711      	b.n	80078c8 <_vfiprintf_r+0x50>
 8007aa4:	ab03      	add	r3, sp, #12
 8007aa6:	9300      	str	r3, [sp, #0]
 8007aa8:	462a      	mov	r2, r5
 8007aaa:	4b09      	ldr	r3, [pc, #36]	; (8007ad0 <_vfiprintf_r+0x258>)
 8007aac:	a904      	add	r1, sp, #16
 8007aae:	4630      	mov	r0, r6
 8007ab0:	f7fd ff16 	bl	80058e0 <_printf_i>
 8007ab4:	e7e4      	b.n	8007a80 <_vfiprintf_r+0x208>
 8007ab6:	bf00      	nop
 8007ab8:	080089bc 	.word	0x080089bc
 8007abc:	080089dc 	.word	0x080089dc
 8007ac0:	0800899c 	.word	0x0800899c
 8007ac4:	08008b54 	.word	0x08008b54
 8007ac8:	08008b5e 	.word	0x08008b5e
 8007acc:	08005399 	.word	0x08005399
 8007ad0:	08007853 	.word	0x08007853
 8007ad4:	08008b5a 	.word	0x08008b5a

08007ad8 <_sbrk_r>:
 8007ad8:	b538      	push	{r3, r4, r5, lr}
 8007ada:	4d06      	ldr	r5, [pc, #24]	; (8007af4 <_sbrk_r+0x1c>)
 8007adc:	2300      	movs	r3, #0
 8007ade:	4604      	mov	r4, r0
 8007ae0:	4608      	mov	r0, r1
 8007ae2:	602b      	str	r3, [r5, #0]
 8007ae4:	f7fa fab6 	bl	8002054 <_sbrk>
 8007ae8:	1c43      	adds	r3, r0, #1
 8007aea:	d102      	bne.n	8007af2 <_sbrk_r+0x1a>
 8007aec:	682b      	ldr	r3, [r5, #0]
 8007aee:	b103      	cbz	r3, 8007af2 <_sbrk_r+0x1a>
 8007af0:	6023      	str	r3, [r4, #0]
 8007af2:	bd38      	pop	{r3, r4, r5, pc}
 8007af4:	200003bc 	.word	0x200003bc

08007af8 <__sread>:
 8007af8:	b510      	push	{r4, lr}
 8007afa:	460c      	mov	r4, r1
 8007afc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b00:	f000 f8e2 	bl	8007cc8 <_read_r>
 8007b04:	2800      	cmp	r0, #0
 8007b06:	bfab      	itete	ge
 8007b08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007b0a:	89a3      	ldrhlt	r3, [r4, #12]
 8007b0c:	181b      	addge	r3, r3, r0
 8007b0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007b12:	bfac      	ite	ge
 8007b14:	6563      	strge	r3, [r4, #84]	; 0x54
 8007b16:	81a3      	strhlt	r3, [r4, #12]
 8007b18:	bd10      	pop	{r4, pc}

08007b1a <__swrite>:
 8007b1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b1e:	461f      	mov	r7, r3
 8007b20:	898b      	ldrh	r3, [r1, #12]
 8007b22:	05db      	lsls	r3, r3, #23
 8007b24:	4605      	mov	r5, r0
 8007b26:	460c      	mov	r4, r1
 8007b28:	4616      	mov	r6, r2
 8007b2a:	d505      	bpl.n	8007b38 <__swrite+0x1e>
 8007b2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b30:	2302      	movs	r3, #2
 8007b32:	2200      	movs	r2, #0
 8007b34:	f000 f898 	bl	8007c68 <_lseek_r>
 8007b38:	89a3      	ldrh	r3, [r4, #12]
 8007b3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b42:	81a3      	strh	r3, [r4, #12]
 8007b44:	4632      	mov	r2, r6
 8007b46:	463b      	mov	r3, r7
 8007b48:	4628      	mov	r0, r5
 8007b4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b4e:	f000 b817 	b.w	8007b80 <_write_r>

08007b52 <__sseek>:
 8007b52:	b510      	push	{r4, lr}
 8007b54:	460c      	mov	r4, r1
 8007b56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b5a:	f000 f885 	bl	8007c68 <_lseek_r>
 8007b5e:	1c43      	adds	r3, r0, #1
 8007b60:	89a3      	ldrh	r3, [r4, #12]
 8007b62:	bf15      	itete	ne
 8007b64:	6560      	strne	r0, [r4, #84]	; 0x54
 8007b66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007b6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007b6e:	81a3      	strheq	r3, [r4, #12]
 8007b70:	bf18      	it	ne
 8007b72:	81a3      	strhne	r3, [r4, #12]
 8007b74:	bd10      	pop	{r4, pc}

08007b76 <__sclose>:
 8007b76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b7a:	f000 b831 	b.w	8007be0 <_close_r>
	...

08007b80 <_write_r>:
 8007b80:	b538      	push	{r3, r4, r5, lr}
 8007b82:	4d07      	ldr	r5, [pc, #28]	; (8007ba0 <_write_r+0x20>)
 8007b84:	4604      	mov	r4, r0
 8007b86:	4608      	mov	r0, r1
 8007b88:	4611      	mov	r1, r2
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	602a      	str	r2, [r5, #0]
 8007b8e:	461a      	mov	r2, r3
 8007b90:	f7fa fa0f 	bl	8001fb2 <_write>
 8007b94:	1c43      	adds	r3, r0, #1
 8007b96:	d102      	bne.n	8007b9e <_write_r+0x1e>
 8007b98:	682b      	ldr	r3, [r5, #0]
 8007b9a:	b103      	cbz	r3, 8007b9e <_write_r+0x1e>
 8007b9c:	6023      	str	r3, [r4, #0]
 8007b9e:	bd38      	pop	{r3, r4, r5, pc}
 8007ba0:	200003bc 	.word	0x200003bc

08007ba4 <__assert_func>:
 8007ba4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007ba6:	4614      	mov	r4, r2
 8007ba8:	461a      	mov	r2, r3
 8007baa:	4b09      	ldr	r3, [pc, #36]	; (8007bd0 <__assert_func+0x2c>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4605      	mov	r5, r0
 8007bb0:	68d8      	ldr	r0, [r3, #12]
 8007bb2:	b14c      	cbz	r4, 8007bc8 <__assert_func+0x24>
 8007bb4:	4b07      	ldr	r3, [pc, #28]	; (8007bd4 <__assert_func+0x30>)
 8007bb6:	9100      	str	r1, [sp, #0]
 8007bb8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007bbc:	4906      	ldr	r1, [pc, #24]	; (8007bd8 <__assert_func+0x34>)
 8007bbe:	462b      	mov	r3, r5
 8007bc0:	f000 f81e 	bl	8007c00 <fiprintf>
 8007bc4:	f000 f89f 	bl	8007d06 <abort>
 8007bc8:	4b04      	ldr	r3, [pc, #16]	; (8007bdc <__assert_func+0x38>)
 8007bca:	461c      	mov	r4, r3
 8007bcc:	e7f3      	b.n	8007bb6 <__assert_func+0x12>
 8007bce:	bf00      	nop
 8007bd0:	20000010 	.word	0x20000010
 8007bd4:	08008b65 	.word	0x08008b65
 8007bd8:	08008b72 	.word	0x08008b72
 8007bdc:	08008ba0 	.word	0x08008ba0

08007be0 <_close_r>:
 8007be0:	b538      	push	{r3, r4, r5, lr}
 8007be2:	4d06      	ldr	r5, [pc, #24]	; (8007bfc <_close_r+0x1c>)
 8007be4:	2300      	movs	r3, #0
 8007be6:	4604      	mov	r4, r0
 8007be8:	4608      	mov	r0, r1
 8007bea:	602b      	str	r3, [r5, #0]
 8007bec:	f7fa f9fd 	bl	8001fea <_close>
 8007bf0:	1c43      	adds	r3, r0, #1
 8007bf2:	d102      	bne.n	8007bfa <_close_r+0x1a>
 8007bf4:	682b      	ldr	r3, [r5, #0]
 8007bf6:	b103      	cbz	r3, 8007bfa <_close_r+0x1a>
 8007bf8:	6023      	str	r3, [r4, #0]
 8007bfa:	bd38      	pop	{r3, r4, r5, pc}
 8007bfc:	200003bc 	.word	0x200003bc

08007c00 <fiprintf>:
 8007c00:	b40e      	push	{r1, r2, r3}
 8007c02:	b503      	push	{r0, r1, lr}
 8007c04:	4601      	mov	r1, r0
 8007c06:	ab03      	add	r3, sp, #12
 8007c08:	4805      	ldr	r0, [pc, #20]	; (8007c20 <fiprintf+0x20>)
 8007c0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c0e:	6800      	ldr	r0, [r0, #0]
 8007c10:	9301      	str	r3, [sp, #4]
 8007c12:	f7ff fe31 	bl	8007878 <_vfiprintf_r>
 8007c16:	b002      	add	sp, #8
 8007c18:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c1c:	b003      	add	sp, #12
 8007c1e:	4770      	bx	lr
 8007c20:	20000010 	.word	0x20000010

08007c24 <_fstat_r>:
 8007c24:	b538      	push	{r3, r4, r5, lr}
 8007c26:	4d07      	ldr	r5, [pc, #28]	; (8007c44 <_fstat_r+0x20>)
 8007c28:	2300      	movs	r3, #0
 8007c2a:	4604      	mov	r4, r0
 8007c2c:	4608      	mov	r0, r1
 8007c2e:	4611      	mov	r1, r2
 8007c30:	602b      	str	r3, [r5, #0]
 8007c32:	f7fa f9e6 	bl	8002002 <_fstat>
 8007c36:	1c43      	adds	r3, r0, #1
 8007c38:	d102      	bne.n	8007c40 <_fstat_r+0x1c>
 8007c3a:	682b      	ldr	r3, [r5, #0]
 8007c3c:	b103      	cbz	r3, 8007c40 <_fstat_r+0x1c>
 8007c3e:	6023      	str	r3, [r4, #0]
 8007c40:	bd38      	pop	{r3, r4, r5, pc}
 8007c42:	bf00      	nop
 8007c44:	200003bc 	.word	0x200003bc

08007c48 <_isatty_r>:
 8007c48:	b538      	push	{r3, r4, r5, lr}
 8007c4a:	4d06      	ldr	r5, [pc, #24]	; (8007c64 <_isatty_r+0x1c>)
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	4604      	mov	r4, r0
 8007c50:	4608      	mov	r0, r1
 8007c52:	602b      	str	r3, [r5, #0]
 8007c54:	f7fa f9e5 	bl	8002022 <_isatty>
 8007c58:	1c43      	adds	r3, r0, #1
 8007c5a:	d102      	bne.n	8007c62 <_isatty_r+0x1a>
 8007c5c:	682b      	ldr	r3, [r5, #0]
 8007c5e:	b103      	cbz	r3, 8007c62 <_isatty_r+0x1a>
 8007c60:	6023      	str	r3, [r4, #0]
 8007c62:	bd38      	pop	{r3, r4, r5, pc}
 8007c64:	200003bc 	.word	0x200003bc

08007c68 <_lseek_r>:
 8007c68:	b538      	push	{r3, r4, r5, lr}
 8007c6a:	4d07      	ldr	r5, [pc, #28]	; (8007c88 <_lseek_r+0x20>)
 8007c6c:	4604      	mov	r4, r0
 8007c6e:	4608      	mov	r0, r1
 8007c70:	4611      	mov	r1, r2
 8007c72:	2200      	movs	r2, #0
 8007c74:	602a      	str	r2, [r5, #0]
 8007c76:	461a      	mov	r2, r3
 8007c78:	f7fa f9de 	bl	8002038 <_lseek>
 8007c7c:	1c43      	adds	r3, r0, #1
 8007c7e:	d102      	bne.n	8007c86 <_lseek_r+0x1e>
 8007c80:	682b      	ldr	r3, [r5, #0]
 8007c82:	b103      	cbz	r3, 8007c86 <_lseek_r+0x1e>
 8007c84:	6023      	str	r3, [r4, #0]
 8007c86:	bd38      	pop	{r3, r4, r5, pc}
 8007c88:	200003bc 	.word	0x200003bc

08007c8c <__ascii_mbtowc>:
 8007c8c:	b082      	sub	sp, #8
 8007c8e:	b901      	cbnz	r1, 8007c92 <__ascii_mbtowc+0x6>
 8007c90:	a901      	add	r1, sp, #4
 8007c92:	b142      	cbz	r2, 8007ca6 <__ascii_mbtowc+0x1a>
 8007c94:	b14b      	cbz	r3, 8007caa <__ascii_mbtowc+0x1e>
 8007c96:	7813      	ldrb	r3, [r2, #0]
 8007c98:	600b      	str	r3, [r1, #0]
 8007c9a:	7812      	ldrb	r2, [r2, #0]
 8007c9c:	1e10      	subs	r0, r2, #0
 8007c9e:	bf18      	it	ne
 8007ca0:	2001      	movne	r0, #1
 8007ca2:	b002      	add	sp, #8
 8007ca4:	4770      	bx	lr
 8007ca6:	4610      	mov	r0, r2
 8007ca8:	e7fb      	b.n	8007ca2 <__ascii_mbtowc+0x16>
 8007caa:	f06f 0001 	mvn.w	r0, #1
 8007cae:	e7f8      	b.n	8007ca2 <__ascii_mbtowc+0x16>

08007cb0 <__malloc_lock>:
 8007cb0:	4801      	ldr	r0, [pc, #4]	; (8007cb8 <__malloc_lock+0x8>)
 8007cb2:	f7ff b8c0 	b.w	8006e36 <__retarget_lock_acquire_recursive>
 8007cb6:	bf00      	nop
 8007cb8:	200003b0 	.word	0x200003b0

08007cbc <__malloc_unlock>:
 8007cbc:	4801      	ldr	r0, [pc, #4]	; (8007cc4 <__malloc_unlock+0x8>)
 8007cbe:	f7ff b8bb 	b.w	8006e38 <__retarget_lock_release_recursive>
 8007cc2:	bf00      	nop
 8007cc4:	200003b0 	.word	0x200003b0

08007cc8 <_read_r>:
 8007cc8:	b538      	push	{r3, r4, r5, lr}
 8007cca:	4d07      	ldr	r5, [pc, #28]	; (8007ce8 <_read_r+0x20>)
 8007ccc:	4604      	mov	r4, r0
 8007cce:	4608      	mov	r0, r1
 8007cd0:	4611      	mov	r1, r2
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	602a      	str	r2, [r5, #0]
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	f7fa f94e 	bl	8001f78 <_read>
 8007cdc:	1c43      	adds	r3, r0, #1
 8007cde:	d102      	bne.n	8007ce6 <_read_r+0x1e>
 8007ce0:	682b      	ldr	r3, [r5, #0]
 8007ce2:	b103      	cbz	r3, 8007ce6 <_read_r+0x1e>
 8007ce4:	6023      	str	r3, [r4, #0]
 8007ce6:	bd38      	pop	{r3, r4, r5, pc}
 8007ce8:	200003bc 	.word	0x200003bc

08007cec <__ascii_wctomb>:
 8007cec:	b149      	cbz	r1, 8007d02 <__ascii_wctomb+0x16>
 8007cee:	2aff      	cmp	r2, #255	; 0xff
 8007cf0:	bf85      	ittet	hi
 8007cf2:	238a      	movhi	r3, #138	; 0x8a
 8007cf4:	6003      	strhi	r3, [r0, #0]
 8007cf6:	700a      	strbls	r2, [r1, #0]
 8007cf8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8007cfc:	bf98      	it	ls
 8007cfe:	2001      	movls	r0, #1
 8007d00:	4770      	bx	lr
 8007d02:	4608      	mov	r0, r1
 8007d04:	4770      	bx	lr

08007d06 <abort>:
 8007d06:	b508      	push	{r3, lr}
 8007d08:	2006      	movs	r0, #6
 8007d0a:	f000 f82b 	bl	8007d64 <raise>
 8007d0e:	2001      	movs	r0, #1
 8007d10:	f7fa f928 	bl	8001f64 <_exit>

08007d14 <_raise_r>:
 8007d14:	291f      	cmp	r1, #31
 8007d16:	b538      	push	{r3, r4, r5, lr}
 8007d18:	4604      	mov	r4, r0
 8007d1a:	460d      	mov	r5, r1
 8007d1c:	d904      	bls.n	8007d28 <_raise_r+0x14>
 8007d1e:	2316      	movs	r3, #22
 8007d20:	6003      	str	r3, [r0, #0]
 8007d22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d26:	bd38      	pop	{r3, r4, r5, pc}
 8007d28:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007d2a:	b112      	cbz	r2, 8007d32 <_raise_r+0x1e>
 8007d2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007d30:	b94b      	cbnz	r3, 8007d46 <_raise_r+0x32>
 8007d32:	4620      	mov	r0, r4
 8007d34:	f000 f830 	bl	8007d98 <_getpid_r>
 8007d38:	462a      	mov	r2, r5
 8007d3a:	4601      	mov	r1, r0
 8007d3c:	4620      	mov	r0, r4
 8007d3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d42:	f000 b817 	b.w	8007d74 <_kill_r>
 8007d46:	2b01      	cmp	r3, #1
 8007d48:	d00a      	beq.n	8007d60 <_raise_r+0x4c>
 8007d4a:	1c59      	adds	r1, r3, #1
 8007d4c:	d103      	bne.n	8007d56 <_raise_r+0x42>
 8007d4e:	2316      	movs	r3, #22
 8007d50:	6003      	str	r3, [r0, #0]
 8007d52:	2001      	movs	r0, #1
 8007d54:	e7e7      	b.n	8007d26 <_raise_r+0x12>
 8007d56:	2400      	movs	r4, #0
 8007d58:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007d5c:	4628      	mov	r0, r5
 8007d5e:	4798      	blx	r3
 8007d60:	2000      	movs	r0, #0
 8007d62:	e7e0      	b.n	8007d26 <_raise_r+0x12>

08007d64 <raise>:
 8007d64:	4b02      	ldr	r3, [pc, #8]	; (8007d70 <raise+0xc>)
 8007d66:	4601      	mov	r1, r0
 8007d68:	6818      	ldr	r0, [r3, #0]
 8007d6a:	f7ff bfd3 	b.w	8007d14 <_raise_r>
 8007d6e:	bf00      	nop
 8007d70:	20000010 	.word	0x20000010

08007d74 <_kill_r>:
 8007d74:	b538      	push	{r3, r4, r5, lr}
 8007d76:	4d07      	ldr	r5, [pc, #28]	; (8007d94 <_kill_r+0x20>)
 8007d78:	2300      	movs	r3, #0
 8007d7a:	4604      	mov	r4, r0
 8007d7c:	4608      	mov	r0, r1
 8007d7e:	4611      	mov	r1, r2
 8007d80:	602b      	str	r3, [r5, #0]
 8007d82:	f7fa f8df 	bl	8001f44 <_kill>
 8007d86:	1c43      	adds	r3, r0, #1
 8007d88:	d102      	bne.n	8007d90 <_kill_r+0x1c>
 8007d8a:	682b      	ldr	r3, [r5, #0]
 8007d8c:	b103      	cbz	r3, 8007d90 <_kill_r+0x1c>
 8007d8e:	6023      	str	r3, [r4, #0]
 8007d90:	bd38      	pop	{r3, r4, r5, pc}
 8007d92:	bf00      	nop
 8007d94:	200003bc 	.word	0x200003bc

08007d98 <_getpid_r>:
 8007d98:	f7fa b8cc 	b.w	8001f34 <_getpid>

08007d9c <sinf>:
 8007d9c:	ee10 3a10 	vmov	r3, s0
 8007da0:	b507      	push	{r0, r1, r2, lr}
 8007da2:	4a1f      	ldr	r2, [pc, #124]	; (8007e20 <sinf+0x84>)
 8007da4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007da8:	4293      	cmp	r3, r2
 8007daa:	dc07      	bgt.n	8007dbc <sinf+0x20>
 8007dac:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8007e24 <sinf+0x88>
 8007db0:	2000      	movs	r0, #0
 8007db2:	b003      	add	sp, #12
 8007db4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007db8:	f000 bc48 	b.w	800864c <__kernel_sinf>
 8007dbc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007dc0:	db04      	blt.n	8007dcc <sinf+0x30>
 8007dc2:	ee30 0a40 	vsub.f32	s0, s0, s0
 8007dc6:	b003      	add	sp, #12
 8007dc8:	f85d fb04 	ldr.w	pc, [sp], #4
 8007dcc:	4668      	mov	r0, sp
 8007dce:	f000 f82b 	bl	8007e28 <__ieee754_rem_pio2f>
 8007dd2:	f000 0003 	and.w	r0, r0, #3
 8007dd6:	2801      	cmp	r0, #1
 8007dd8:	d00a      	beq.n	8007df0 <sinf+0x54>
 8007dda:	2802      	cmp	r0, #2
 8007ddc:	d00f      	beq.n	8007dfe <sinf+0x62>
 8007dde:	b9c0      	cbnz	r0, 8007e12 <sinf+0x76>
 8007de0:	eddd 0a01 	vldr	s1, [sp, #4]
 8007de4:	ed9d 0a00 	vldr	s0, [sp]
 8007de8:	2001      	movs	r0, #1
 8007dea:	f000 fc2f 	bl	800864c <__kernel_sinf>
 8007dee:	e7ea      	b.n	8007dc6 <sinf+0x2a>
 8007df0:	eddd 0a01 	vldr	s1, [sp, #4]
 8007df4:	ed9d 0a00 	vldr	s0, [sp]
 8007df8:	f000 f952 	bl	80080a0 <__kernel_cosf>
 8007dfc:	e7e3      	b.n	8007dc6 <sinf+0x2a>
 8007dfe:	eddd 0a01 	vldr	s1, [sp, #4]
 8007e02:	ed9d 0a00 	vldr	s0, [sp]
 8007e06:	2001      	movs	r0, #1
 8007e08:	f000 fc20 	bl	800864c <__kernel_sinf>
 8007e0c:	eeb1 0a40 	vneg.f32	s0, s0
 8007e10:	e7d9      	b.n	8007dc6 <sinf+0x2a>
 8007e12:	eddd 0a01 	vldr	s1, [sp, #4]
 8007e16:	ed9d 0a00 	vldr	s0, [sp]
 8007e1a:	f000 f941 	bl	80080a0 <__kernel_cosf>
 8007e1e:	e7f5      	b.n	8007e0c <sinf+0x70>
 8007e20:	3f490fd8 	.word	0x3f490fd8
 8007e24:	00000000 	.word	0x00000000

08007e28 <__ieee754_rem_pio2f>:
 8007e28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e2a:	ee10 6a10 	vmov	r6, s0
 8007e2e:	4b8e      	ldr	r3, [pc, #568]	; (8008068 <__ieee754_rem_pio2f+0x240>)
 8007e30:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8007e34:	429d      	cmp	r5, r3
 8007e36:	b087      	sub	sp, #28
 8007e38:	eef0 7a40 	vmov.f32	s15, s0
 8007e3c:	4604      	mov	r4, r0
 8007e3e:	dc05      	bgt.n	8007e4c <__ieee754_rem_pio2f+0x24>
 8007e40:	2300      	movs	r3, #0
 8007e42:	ed80 0a00 	vstr	s0, [r0]
 8007e46:	6043      	str	r3, [r0, #4]
 8007e48:	2000      	movs	r0, #0
 8007e4a:	e01a      	b.n	8007e82 <__ieee754_rem_pio2f+0x5a>
 8007e4c:	4b87      	ldr	r3, [pc, #540]	; (800806c <__ieee754_rem_pio2f+0x244>)
 8007e4e:	429d      	cmp	r5, r3
 8007e50:	dc46      	bgt.n	8007ee0 <__ieee754_rem_pio2f+0xb8>
 8007e52:	2e00      	cmp	r6, #0
 8007e54:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8008070 <__ieee754_rem_pio2f+0x248>
 8007e58:	4b86      	ldr	r3, [pc, #536]	; (8008074 <__ieee754_rem_pio2f+0x24c>)
 8007e5a:	f025 050f 	bic.w	r5, r5, #15
 8007e5e:	dd1f      	ble.n	8007ea0 <__ieee754_rem_pio2f+0x78>
 8007e60:	429d      	cmp	r5, r3
 8007e62:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007e66:	d00e      	beq.n	8007e86 <__ieee754_rem_pio2f+0x5e>
 8007e68:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8008078 <__ieee754_rem_pio2f+0x250>
 8007e6c:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8007e70:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007e74:	ed80 0a00 	vstr	s0, [r0]
 8007e78:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007e7c:	2001      	movs	r0, #1
 8007e7e:	edc4 7a01 	vstr	s15, [r4, #4]
 8007e82:	b007      	add	sp, #28
 8007e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e86:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800807c <__ieee754_rem_pio2f+0x254>
 8007e8a:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8008080 <__ieee754_rem_pio2f+0x258>
 8007e8e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007e92:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8007e96:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007e9a:	edc0 6a00 	vstr	s13, [r0]
 8007e9e:	e7eb      	b.n	8007e78 <__ieee754_rem_pio2f+0x50>
 8007ea0:	429d      	cmp	r5, r3
 8007ea2:	ee77 7a80 	vadd.f32	s15, s15, s0
 8007ea6:	d00e      	beq.n	8007ec6 <__ieee754_rem_pio2f+0x9e>
 8007ea8:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8008078 <__ieee754_rem_pio2f+0x250>
 8007eac:	ee37 0a87 	vadd.f32	s0, s15, s14
 8007eb0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007eb4:	ed80 0a00 	vstr	s0, [r0]
 8007eb8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007ebc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ec0:	edc4 7a01 	vstr	s15, [r4, #4]
 8007ec4:	e7dd      	b.n	8007e82 <__ieee754_rem_pio2f+0x5a>
 8007ec6:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800807c <__ieee754_rem_pio2f+0x254>
 8007eca:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8008080 <__ieee754_rem_pio2f+0x258>
 8007ece:	ee77 7a80 	vadd.f32	s15, s15, s0
 8007ed2:	ee77 6a87 	vadd.f32	s13, s15, s14
 8007ed6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007eda:	edc0 6a00 	vstr	s13, [r0]
 8007ede:	e7eb      	b.n	8007eb8 <__ieee754_rem_pio2f+0x90>
 8007ee0:	4b68      	ldr	r3, [pc, #416]	; (8008084 <__ieee754_rem_pio2f+0x25c>)
 8007ee2:	429d      	cmp	r5, r3
 8007ee4:	dc72      	bgt.n	8007fcc <__ieee754_rem_pio2f+0x1a4>
 8007ee6:	f000 fbf9 	bl	80086dc <fabsf>
 8007eea:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8008088 <__ieee754_rem_pio2f+0x260>
 8007eee:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007ef2:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007ef6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007efa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007efe:	ee17 0a90 	vmov	r0, s15
 8007f02:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8008070 <__ieee754_rem_pio2f+0x248>
 8007f06:	eea7 0a67 	vfms.f32	s0, s14, s15
 8007f0a:	281f      	cmp	r0, #31
 8007f0c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8008078 <__ieee754_rem_pio2f+0x250>
 8007f10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f14:	eeb1 6a47 	vneg.f32	s12, s14
 8007f18:	ee70 6a67 	vsub.f32	s13, s0, s15
 8007f1c:	ee16 2a90 	vmov	r2, s13
 8007f20:	dc1c      	bgt.n	8007f5c <__ieee754_rem_pio2f+0x134>
 8007f22:	495a      	ldr	r1, [pc, #360]	; (800808c <__ieee754_rem_pio2f+0x264>)
 8007f24:	1e47      	subs	r7, r0, #1
 8007f26:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8007f2a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8007f2e:	428b      	cmp	r3, r1
 8007f30:	d014      	beq.n	8007f5c <__ieee754_rem_pio2f+0x134>
 8007f32:	6022      	str	r2, [r4, #0]
 8007f34:	ed94 7a00 	vldr	s14, [r4]
 8007f38:	ee30 0a47 	vsub.f32	s0, s0, s14
 8007f3c:	2e00      	cmp	r6, #0
 8007f3e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007f42:	ed84 0a01 	vstr	s0, [r4, #4]
 8007f46:	da9c      	bge.n	8007e82 <__ieee754_rem_pio2f+0x5a>
 8007f48:	eeb1 7a47 	vneg.f32	s14, s14
 8007f4c:	eeb1 0a40 	vneg.f32	s0, s0
 8007f50:	ed84 7a00 	vstr	s14, [r4]
 8007f54:	ed84 0a01 	vstr	s0, [r4, #4]
 8007f58:	4240      	negs	r0, r0
 8007f5a:	e792      	b.n	8007e82 <__ieee754_rem_pio2f+0x5a>
 8007f5c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8007f60:	15eb      	asrs	r3, r5, #23
 8007f62:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8007f66:	2d08      	cmp	r5, #8
 8007f68:	dde3      	ble.n	8007f32 <__ieee754_rem_pio2f+0x10a>
 8007f6a:	eddf 7a44 	vldr	s15, [pc, #272]	; 800807c <__ieee754_rem_pio2f+0x254>
 8007f6e:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008080 <__ieee754_rem_pio2f+0x258>
 8007f72:	eef0 6a40 	vmov.f32	s13, s0
 8007f76:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007f7a:	ee30 0a66 	vsub.f32	s0, s0, s13
 8007f7e:	eea6 0a27 	vfma.f32	s0, s12, s15
 8007f82:	eef0 7a40 	vmov.f32	s15, s0
 8007f86:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8007f8a:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8007f8e:	ee15 2a90 	vmov	r2, s11
 8007f92:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8007f96:	1a5b      	subs	r3, r3, r1
 8007f98:	2b19      	cmp	r3, #25
 8007f9a:	dc04      	bgt.n	8007fa6 <__ieee754_rem_pio2f+0x17e>
 8007f9c:	edc4 5a00 	vstr	s11, [r4]
 8007fa0:	eeb0 0a66 	vmov.f32	s0, s13
 8007fa4:	e7c6      	b.n	8007f34 <__ieee754_rem_pio2f+0x10c>
 8007fa6:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8008090 <__ieee754_rem_pio2f+0x268>
 8007faa:	eeb0 0a66 	vmov.f32	s0, s13
 8007fae:	eea6 0a25 	vfma.f32	s0, s12, s11
 8007fb2:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8007fb6:	eddf 6a37 	vldr	s13, [pc, #220]	; 8008094 <__ieee754_rem_pio2f+0x26c>
 8007fba:	eee6 7a25 	vfma.f32	s15, s12, s11
 8007fbe:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8007fc2:	ee30 7a67 	vsub.f32	s14, s0, s15
 8007fc6:	ed84 7a00 	vstr	s14, [r4]
 8007fca:	e7b3      	b.n	8007f34 <__ieee754_rem_pio2f+0x10c>
 8007fcc:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8007fd0:	db06      	blt.n	8007fe0 <__ieee754_rem_pio2f+0x1b8>
 8007fd2:	ee70 7a40 	vsub.f32	s15, s0, s0
 8007fd6:	edc0 7a01 	vstr	s15, [r0, #4]
 8007fda:	edc0 7a00 	vstr	s15, [r0]
 8007fde:	e733      	b.n	8007e48 <__ieee754_rem_pio2f+0x20>
 8007fe0:	15ea      	asrs	r2, r5, #23
 8007fe2:	3a86      	subs	r2, #134	; 0x86
 8007fe4:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8007fe8:	ee07 3a90 	vmov	s15, r3
 8007fec:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007ff0:	eddf 6a29 	vldr	s13, [pc, #164]	; 8008098 <__ieee754_rem_pio2f+0x270>
 8007ff4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007ff8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007ffc:	ed8d 7a03 	vstr	s14, [sp, #12]
 8008000:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008004:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008008:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800800c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008010:	ed8d 7a04 	vstr	s14, [sp, #16]
 8008014:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008018:	eef5 7a40 	vcmp.f32	s15, #0.0
 800801c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008020:	edcd 7a05 	vstr	s15, [sp, #20]
 8008024:	d11e      	bne.n	8008064 <__ieee754_rem_pio2f+0x23c>
 8008026:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800802a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800802e:	bf14      	ite	ne
 8008030:	2302      	movne	r3, #2
 8008032:	2301      	moveq	r3, #1
 8008034:	4919      	ldr	r1, [pc, #100]	; (800809c <__ieee754_rem_pio2f+0x274>)
 8008036:	9101      	str	r1, [sp, #4]
 8008038:	2102      	movs	r1, #2
 800803a:	9100      	str	r1, [sp, #0]
 800803c:	a803      	add	r0, sp, #12
 800803e:	4621      	mov	r1, r4
 8008040:	f000 f88e 	bl	8008160 <__kernel_rem_pio2f>
 8008044:	2e00      	cmp	r6, #0
 8008046:	f6bf af1c 	bge.w	8007e82 <__ieee754_rem_pio2f+0x5a>
 800804a:	edd4 7a00 	vldr	s15, [r4]
 800804e:	eef1 7a67 	vneg.f32	s15, s15
 8008052:	edc4 7a00 	vstr	s15, [r4]
 8008056:	edd4 7a01 	vldr	s15, [r4, #4]
 800805a:	eef1 7a67 	vneg.f32	s15, s15
 800805e:	edc4 7a01 	vstr	s15, [r4, #4]
 8008062:	e779      	b.n	8007f58 <__ieee754_rem_pio2f+0x130>
 8008064:	2303      	movs	r3, #3
 8008066:	e7e5      	b.n	8008034 <__ieee754_rem_pio2f+0x20c>
 8008068:	3f490fd8 	.word	0x3f490fd8
 800806c:	4016cbe3 	.word	0x4016cbe3
 8008070:	3fc90f80 	.word	0x3fc90f80
 8008074:	3fc90fd0 	.word	0x3fc90fd0
 8008078:	37354443 	.word	0x37354443
 800807c:	37354400 	.word	0x37354400
 8008080:	2e85a308 	.word	0x2e85a308
 8008084:	43490f80 	.word	0x43490f80
 8008088:	3f22f984 	.word	0x3f22f984
 800808c:	08008cac 	.word	0x08008cac
 8008090:	2e85a300 	.word	0x2e85a300
 8008094:	248d3132 	.word	0x248d3132
 8008098:	43800000 	.word	0x43800000
 800809c:	08008d2c 	.word	0x08008d2c

080080a0 <__kernel_cosf>:
 80080a0:	ee10 3a10 	vmov	r3, s0
 80080a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80080a8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80080ac:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80080b0:	da05      	bge.n	80080be <__kernel_cosf+0x1e>
 80080b2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80080b6:	ee17 2a90 	vmov	r2, s15
 80080ba:	2a00      	cmp	r2, #0
 80080bc:	d03d      	beq.n	800813a <__kernel_cosf+0x9a>
 80080be:	ee60 5a00 	vmul.f32	s11, s0, s0
 80080c2:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8008140 <__kernel_cosf+0xa0>
 80080c6:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8008144 <__kernel_cosf+0xa4>
 80080ca:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8008148 <__kernel_cosf+0xa8>
 80080ce:	4a1f      	ldr	r2, [pc, #124]	; (800814c <__kernel_cosf+0xac>)
 80080d0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80080d4:	4293      	cmp	r3, r2
 80080d6:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8008150 <__kernel_cosf+0xb0>
 80080da:	eee7 7a25 	vfma.f32	s15, s14, s11
 80080de:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8008154 <__kernel_cosf+0xb4>
 80080e2:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80080e6:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8008158 <__kernel_cosf+0xb8>
 80080ea:	eee7 7a25 	vfma.f32	s15, s14, s11
 80080ee:	eeb0 7a66 	vmov.f32	s14, s13
 80080f2:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80080f6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80080fa:	ee65 7aa6 	vmul.f32	s15, s11, s13
 80080fe:	ee67 6a25 	vmul.f32	s13, s14, s11
 8008102:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8008106:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800810a:	dc04      	bgt.n	8008116 <__kernel_cosf+0x76>
 800810c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8008110:	ee36 0a47 	vsub.f32	s0, s12, s14
 8008114:	4770      	bx	lr
 8008116:	4a11      	ldr	r2, [pc, #68]	; (800815c <__kernel_cosf+0xbc>)
 8008118:	4293      	cmp	r3, r2
 800811a:	bfda      	itte	le
 800811c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8008120:	ee06 3a90 	vmovle	s13, r3
 8008124:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8008128:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800812c:	ee36 0a66 	vsub.f32	s0, s12, s13
 8008130:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008134:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008138:	4770      	bx	lr
 800813a:	eeb0 0a46 	vmov.f32	s0, s12
 800813e:	4770      	bx	lr
 8008140:	ad47d74e 	.word	0xad47d74e
 8008144:	310f74f6 	.word	0x310f74f6
 8008148:	3d2aaaab 	.word	0x3d2aaaab
 800814c:	3e999999 	.word	0x3e999999
 8008150:	b493f27c 	.word	0xb493f27c
 8008154:	37d00d01 	.word	0x37d00d01
 8008158:	bab60b61 	.word	0xbab60b61
 800815c:	3f480000 	.word	0x3f480000

08008160 <__kernel_rem_pio2f>:
 8008160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008164:	ed2d 8b04 	vpush	{d8-d9}
 8008168:	b0d9      	sub	sp, #356	; 0x164
 800816a:	4688      	mov	r8, r1
 800816c:	9002      	str	r0, [sp, #8]
 800816e:	49bb      	ldr	r1, [pc, #748]	; (800845c <__kernel_rem_pio2f+0x2fc>)
 8008170:	9866      	ldr	r0, [sp, #408]	; 0x198
 8008172:	9301      	str	r3, [sp, #4]
 8008174:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8008178:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 800817c:	1e59      	subs	r1, r3, #1
 800817e:	1d13      	adds	r3, r2, #4
 8008180:	db27      	blt.n	80081d2 <__kernel_rem_pio2f+0x72>
 8008182:	f1b2 0b03 	subs.w	fp, r2, #3
 8008186:	bf48      	it	mi
 8008188:	f102 0b04 	addmi.w	fp, r2, #4
 800818c:	ea4f 00eb 	mov.w	r0, fp, asr #3
 8008190:	1c45      	adds	r5, r0, #1
 8008192:	00ec      	lsls	r4, r5, #3
 8008194:	1a47      	subs	r7, r0, r1
 8008196:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800846c <__kernel_rem_pio2f+0x30c>
 800819a:	9403      	str	r4, [sp, #12]
 800819c:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 80081a0:	eb0a 0c01 	add.w	ip, sl, r1
 80081a4:	ae1c      	add	r6, sp, #112	; 0x70
 80081a6:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 80081aa:	2400      	movs	r4, #0
 80081ac:	4564      	cmp	r4, ip
 80081ae:	dd12      	ble.n	80081d6 <__kernel_rem_pio2f+0x76>
 80081b0:	9b01      	ldr	r3, [sp, #4]
 80081b2:	ac1c      	add	r4, sp, #112	; 0x70
 80081b4:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80081b8:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 80081bc:	f04f 0c00 	mov.w	ip, #0
 80081c0:	45d4      	cmp	ip, sl
 80081c2:	dc27      	bgt.n	8008214 <__kernel_rem_pio2f+0xb4>
 80081c4:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80081c8:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800846c <__kernel_rem_pio2f+0x30c>
 80081cc:	4627      	mov	r7, r4
 80081ce:	2600      	movs	r6, #0
 80081d0:	e016      	b.n	8008200 <__kernel_rem_pio2f+0xa0>
 80081d2:	2000      	movs	r0, #0
 80081d4:	e7dc      	b.n	8008190 <__kernel_rem_pio2f+0x30>
 80081d6:	42e7      	cmn	r7, r4
 80081d8:	bf5d      	ittte	pl
 80081da:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 80081de:	ee07 3a90 	vmovpl	s15, r3
 80081e2:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80081e6:	eef0 7a47 	vmovmi.f32	s15, s14
 80081ea:	ece6 7a01 	vstmia	r6!, {s15}
 80081ee:	3401      	adds	r4, #1
 80081f0:	e7dc      	b.n	80081ac <__kernel_rem_pio2f+0x4c>
 80081f2:	ecf9 6a01 	vldmia	r9!, {s13}
 80081f6:	ed97 7a00 	vldr	s14, [r7]
 80081fa:	eee6 7a87 	vfma.f32	s15, s13, s14
 80081fe:	3601      	adds	r6, #1
 8008200:	428e      	cmp	r6, r1
 8008202:	f1a7 0704 	sub.w	r7, r7, #4
 8008206:	ddf4      	ble.n	80081f2 <__kernel_rem_pio2f+0x92>
 8008208:	eceb 7a01 	vstmia	fp!, {s15}
 800820c:	f10c 0c01 	add.w	ip, ip, #1
 8008210:	3404      	adds	r4, #4
 8008212:	e7d5      	b.n	80081c0 <__kernel_rem_pio2f+0x60>
 8008214:	ab08      	add	r3, sp, #32
 8008216:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800821a:	eddf 8a93 	vldr	s17, [pc, #588]	; 8008468 <__kernel_rem_pio2f+0x308>
 800821e:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8008464 <__kernel_rem_pio2f+0x304>
 8008222:	9304      	str	r3, [sp, #16]
 8008224:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 8008228:	4656      	mov	r6, sl
 800822a:	00b3      	lsls	r3, r6, #2
 800822c:	9305      	str	r3, [sp, #20]
 800822e:	ab58      	add	r3, sp, #352	; 0x160
 8008230:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8008234:	ac08      	add	r4, sp, #32
 8008236:	ab44      	add	r3, sp, #272	; 0x110
 8008238:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800823c:	46a4      	mov	ip, r4
 800823e:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8008242:	4637      	mov	r7, r6
 8008244:	2f00      	cmp	r7, #0
 8008246:	f1a0 0004 	sub.w	r0, r0, #4
 800824a:	dc4f      	bgt.n	80082ec <__kernel_rem_pio2f+0x18c>
 800824c:	4628      	mov	r0, r5
 800824e:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8008252:	f000 fa8d 	bl	8008770 <scalbnf>
 8008256:	eeb0 8a40 	vmov.f32	s16, s0
 800825a:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800825e:	ee28 0a00 	vmul.f32	s0, s16, s0
 8008262:	f000 fa43 	bl	80086ec <floorf>
 8008266:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800826a:	eea0 8a67 	vfms.f32	s16, s0, s15
 800826e:	2d00      	cmp	r5, #0
 8008270:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8008274:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8008278:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800827c:	ee17 9a90 	vmov	r9, s15
 8008280:	ee38 8a40 	vsub.f32	s16, s16, s0
 8008284:	dd44      	ble.n	8008310 <__kernel_rem_pio2f+0x1b0>
 8008286:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800828a:	ab08      	add	r3, sp, #32
 800828c:	f1c5 0e08 	rsb	lr, r5, #8
 8008290:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8008294:	fa47 f00e 	asr.w	r0, r7, lr
 8008298:	4481      	add	r9, r0
 800829a:	fa00 f00e 	lsl.w	r0, r0, lr
 800829e:	1a3f      	subs	r7, r7, r0
 80082a0:	f1c5 0007 	rsb	r0, r5, #7
 80082a4:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 80082a8:	4107      	asrs	r7, r0
 80082aa:	2f00      	cmp	r7, #0
 80082ac:	dd3f      	ble.n	800832e <__kernel_rem_pio2f+0x1ce>
 80082ae:	f04f 0e00 	mov.w	lr, #0
 80082b2:	f109 0901 	add.w	r9, r9, #1
 80082b6:	4673      	mov	r3, lr
 80082b8:	4576      	cmp	r6, lr
 80082ba:	dc6b      	bgt.n	8008394 <__kernel_rem_pio2f+0x234>
 80082bc:	2d00      	cmp	r5, #0
 80082be:	dd04      	ble.n	80082ca <__kernel_rem_pio2f+0x16a>
 80082c0:	2d01      	cmp	r5, #1
 80082c2:	d078      	beq.n	80083b6 <__kernel_rem_pio2f+0x256>
 80082c4:	2d02      	cmp	r5, #2
 80082c6:	f000 8081 	beq.w	80083cc <__kernel_rem_pio2f+0x26c>
 80082ca:	2f02      	cmp	r7, #2
 80082cc:	d12f      	bne.n	800832e <__kernel_rem_pio2f+0x1ce>
 80082ce:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80082d2:	ee30 8a48 	vsub.f32	s16, s0, s16
 80082d6:	b353      	cbz	r3, 800832e <__kernel_rem_pio2f+0x1ce>
 80082d8:	4628      	mov	r0, r5
 80082da:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80082de:	f000 fa47 	bl	8008770 <scalbnf>
 80082e2:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80082e6:	ee38 8a40 	vsub.f32	s16, s16, s0
 80082ea:	e020      	b.n	800832e <__kernel_rem_pio2f+0x1ce>
 80082ec:	ee60 7a28 	vmul.f32	s15, s0, s17
 80082f0:	3f01      	subs	r7, #1
 80082f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80082f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80082fa:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80082fe:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008302:	ecac 0a01 	vstmia	ip!, {s0}
 8008306:	ed90 0a00 	vldr	s0, [r0]
 800830a:	ee37 0a80 	vadd.f32	s0, s15, s0
 800830e:	e799      	b.n	8008244 <__kernel_rem_pio2f+0xe4>
 8008310:	d105      	bne.n	800831e <__kernel_rem_pio2f+0x1be>
 8008312:	1e70      	subs	r0, r6, #1
 8008314:	ab08      	add	r3, sp, #32
 8008316:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800831a:	11ff      	asrs	r7, r7, #7
 800831c:	e7c5      	b.n	80082aa <__kernel_rem_pio2f+0x14a>
 800831e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8008322:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8008326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800832a:	da31      	bge.n	8008390 <__kernel_rem_pio2f+0x230>
 800832c:	2700      	movs	r7, #0
 800832e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8008332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008336:	f040 809b 	bne.w	8008470 <__kernel_rem_pio2f+0x310>
 800833a:	1e74      	subs	r4, r6, #1
 800833c:	46a4      	mov	ip, r4
 800833e:	2000      	movs	r0, #0
 8008340:	45d4      	cmp	ip, sl
 8008342:	da4a      	bge.n	80083da <__kernel_rem_pio2f+0x27a>
 8008344:	2800      	cmp	r0, #0
 8008346:	d07a      	beq.n	800843e <__kernel_rem_pio2f+0x2de>
 8008348:	ab08      	add	r3, sp, #32
 800834a:	3d08      	subs	r5, #8
 800834c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008350:	2b00      	cmp	r3, #0
 8008352:	f000 8081 	beq.w	8008458 <__kernel_rem_pio2f+0x2f8>
 8008356:	4628      	mov	r0, r5
 8008358:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800835c:	00a5      	lsls	r5, r4, #2
 800835e:	f000 fa07 	bl	8008770 <scalbnf>
 8008362:	aa44      	add	r2, sp, #272	; 0x110
 8008364:	1d2b      	adds	r3, r5, #4
 8008366:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8008468 <__kernel_rem_pio2f+0x308>
 800836a:	18d1      	adds	r1, r2, r3
 800836c:	4622      	mov	r2, r4
 800836e:	2a00      	cmp	r2, #0
 8008370:	f280 80ae 	bge.w	80084d0 <__kernel_rem_pio2f+0x370>
 8008374:	4622      	mov	r2, r4
 8008376:	2a00      	cmp	r2, #0
 8008378:	f2c0 80cc 	blt.w	8008514 <__kernel_rem_pio2f+0x3b4>
 800837c:	a944      	add	r1, sp, #272	; 0x110
 800837e:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 8008382:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8008460 <__kernel_rem_pio2f+0x300>
 8008386:	eddf 7a39 	vldr	s15, [pc, #228]	; 800846c <__kernel_rem_pio2f+0x30c>
 800838a:	2000      	movs	r0, #0
 800838c:	1aa1      	subs	r1, r4, r2
 800838e:	e0b6      	b.n	80084fe <__kernel_rem_pio2f+0x39e>
 8008390:	2702      	movs	r7, #2
 8008392:	e78c      	b.n	80082ae <__kernel_rem_pio2f+0x14e>
 8008394:	6820      	ldr	r0, [r4, #0]
 8008396:	b94b      	cbnz	r3, 80083ac <__kernel_rem_pio2f+0x24c>
 8008398:	b118      	cbz	r0, 80083a2 <__kernel_rem_pio2f+0x242>
 800839a:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800839e:	6020      	str	r0, [r4, #0]
 80083a0:	2001      	movs	r0, #1
 80083a2:	f10e 0e01 	add.w	lr, lr, #1
 80083a6:	3404      	adds	r4, #4
 80083a8:	4603      	mov	r3, r0
 80083aa:	e785      	b.n	80082b8 <__kernel_rem_pio2f+0x158>
 80083ac:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 80083b0:	6020      	str	r0, [r4, #0]
 80083b2:	4618      	mov	r0, r3
 80083b4:	e7f5      	b.n	80083a2 <__kernel_rem_pio2f+0x242>
 80083b6:	1e74      	subs	r4, r6, #1
 80083b8:	a808      	add	r0, sp, #32
 80083ba:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80083be:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80083c2:	f10d 0c20 	add.w	ip, sp, #32
 80083c6:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 80083ca:	e77e      	b.n	80082ca <__kernel_rem_pio2f+0x16a>
 80083cc:	1e74      	subs	r4, r6, #1
 80083ce:	a808      	add	r0, sp, #32
 80083d0:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80083d4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80083d8:	e7f3      	b.n	80083c2 <__kernel_rem_pio2f+0x262>
 80083da:	ab08      	add	r3, sp, #32
 80083dc:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80083e0:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80083e4:	4318      	orrs	r0, r3
 80083e6:	e7ab      	b.n	8008340 <__kernel_rem_pio2f+0x1e0>
 80083e8:	f10c 0c01 	add.w	ip, ip, #1
 80083ec:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 80083f0:	2c00      	cmp	r4, #0
 80083f2:	d0f9      	beq.n	80083e8 <__kernel_rem_pio2f+0x288>
 80083f4:	9b05      	ldr	r3, [sp, #20]
 80083f6:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80083fa:	eb0d 0003 	add.w	r0, sp, r3
 80083fe:	9b01      	ldr	r3, [sp, #4]
 8008400:	18f4      	adds	r4, r6, r3
 8008402:	ab1c      	add	r3, sp, #112	; 0x70
 8008404:	1c77      	adds	r7, r6, #1
 8008406:	384c      	subs	r0, #76	; 0x4c
 8008408:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800840c:	4466      	add	r6, ip
 800840e:	42be      	cmp	r6, r7
 8008410:	f6ff af0b 	blt.w	800822a <__kernel_rem_pio2f+0xca>
 8008414:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8008418:	f8dd e008 	ldr.w	lr, [sp, #8]
 800841c:	ee07 3a90 	vmov	s15, r3
 8008420:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008424:	f04f 0c00 	mov.w	ip, #0
 8008428:	ece4 7a01 	vstmia	r4!, {s15}
 800842c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800846c <__kernel_rem_pio2f+0x30c>
 8008430:	46a1      	mov	r9, r4
 8008432:	458c      	cmp	ip, r1
 8008434:	dd07      	ble.n	8008446 <__kernel_rem_pio2f+0x2e6>
 8008436:	ece0 7a01 	vstmia	r0!, {s15}
 800843a:	3701      	adds	r7, #1
 800843c:	e7e7      	b.n	800840e <__kernel_rem_pio2f+0x2ae>
 800843e:	9804      	ldr	r0, [sp, #16]
 8008440:	f04f 0c01 	mov.w	ip, #1
 8008444:	e7d2      	b.n	80083ec <__kernel_rem_pio2f+0x28c>
 8008446:	ecfe 6a01 	vldmia	lr!, {s13}
 800844a:	ed39 7a01 	vldmdb	r9!, {s14}
 800844e:	f10c 0c01 	add.w	ip, ip, #1
 8008452:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008456:	e7ec      	b.n	8008432 <__kernel_rem_pio2f+0x2d2>
 8008458:	3c01      	subs	r4, #1
 800845a:	e775      	b.n	8008348 <__kernel_rem_pio2f+0x1e8>
 800845c:	08009070 	.word	0x08009070
 8008460:	08009044 	.word	0x08009044
 8008464:	43800000 	.word	0x43800000
 8008468:	3b800000 	.word	0x3b800000
 800846c:	00000000 	.word	0x00000000
 8008470:	9b03      	ldr	r3, [sp, #12]
 8008472:	eeb0 0a48 	vmov.f32	s0, s16
 8008476:	1a98      	subs	r0, r3, r2
 8008478:	f000 f97a 	bl	8008770 <scalbnf>
 800847c:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8008464 <__kernel_rem_pio2f+0x304>
 8008480:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8008484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008488:	db19      	blt.n	80084be <__kernel_rem_pio2f+0x35e>
 800848a:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8008468 <__kernel_rem_pio2f+0x308>
 800848e:	ee60 7a27 	vmul.f32	s15, s0, s15
 8008492:	aa08      	add	r2, sp, #32
 8008494:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008498:	1c74      	adds	r4, r6, #1
 800849a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800849e:	3508      	adds	r5, #8
 80084a0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80084a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80084a8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80084ac:	ee10 3a10 	vmov	r3, s0
 80084b0:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80084b4:	ee17 3a90 	vmov	r3, s15
 80084b8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80084bc:	e74b      	b.n	8008356 <__kernel_rem_pio2f+0x1f6>
 80084be:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80084c2:	aa08      	add	r2, sp, #32
 80084c4:	ee10 3a10 	vmov	r3, s0
 80084c8:	4634      	mov	r4, r6
 80084ca:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80084ce:	e742      	b.n	8008356 <__kernel_rem_pio2f+0x1f6>
 80084d0:	a808      	add	r0, sp, #32
 80084d2:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 80084d6:	9001      	str	r0, [sp, #4]
 80084d8:	ee07 0a90 	vmov	s15, r0
 80084dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80084e0:	3a01      	subs	r2, #1
 80084e2:	ee67 7a80 	vmul.f32	s15, s15, s0
 80084e6:	ee20 0a07 	vmul.f32	s0, s0, s14
 80084ea:	ed61 7a01 	vstmdb	r1!, {s15}
 80084ee:	e73e      	b.n	800836e <__kernel_rem_pio2f+0x20e>
 80084f0:	ecfc 6a01 	vldmia	ip!, {s13}
 80084f4:	ecb6 7a01 	vldmia	r6!, {s14}
 80084f8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80084fc:	3001      	adds	r0, #1
 80084fe:	4550      	cmp	r0, sl
 8008500:	dc01      	bgt.n	8008506 <__kernel_rem_pio2f+0x3a6>
 8008502:	4288      	cmp	r0, r1
 8008504:	ddf4      	ble.n	80084f0 <__kernel_rem_pio2f+0x390>
 8008506:	a858      	add	r0, sp, #352	; 0x160
 8008508:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800850c:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8008510:	3a01      	subs	r2, #1
 8008512:	e730      	b.n	8008376 <__kernel_rem_pio2f+0x216>
 8008514:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8008516:	2a02      	cmp	r2, #2
 8008518:	dc09      	bgt.n	800852e <__kernel_rem_pio2f+0x3ce>
 800851a:	2a00      	cmp	r2, #0
 800851c:	dc2a      	bgt.n	8008574 <__kernel_rem_pio2f+0x414>
 800851e:	d043      	beq.n	80085a8 <__kernel_rem_pio2f+0x448>
 8008520:	f009 0007 	and.w	r0, r9, #7
 8008524:	b059      	add	sp, #356	; 0x164
 8008526:	ecbd 8b04 	vpop	{d8-d9}
 800852a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800852e:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8008530:	2b03      	cmp	r3, #3
 8008532:	d1f5      	bne.n	8008520 <__kernel_rem_pio2f+0x3c0>
 8008534:	ab30      	add	r3, sp, #192	; 0xc0
 8008536:	442b      	add	r3, r5
 8008538:	461a      	mov	r2, r3
 800853a:	4619      	mov	r1, r3
 800853c:	4620      	mov	r0, r4
 800853e:	2800      	cmp	r0, #0
 8008540:	f1a1 0104 	sub.w	r1, r1, #4
 8008544:	dc51      	bgt.n	80085ea <__kernel_rem_pio2f+0x48a>
 8008546:	4621      	mov	r1, r4
 8008548:	2901      	cmp	r1, #1
 800854a:	f1a2 0204 	sub.w	r2, r2, #4
 800854e:	dc5c      	bgt.n	800860a <__kernel_rem_pio2f+0x4aa>
 8008550:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800846c <__kernel_rem_pio2f+0x30c>
 8008554:	3304      	adds	r3, #4
 8008556:	2c01      	cmp	r4, #1
 8008558:	dc67      	bgt.n	800862a <__kernel_rem_pio2f+0x4ca>
 800855a:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800855e:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8008562:	2f00      	cmp	r7, #0
 8008564:	d167      	bne.n	8008636 <__kernel_rem_pio2f+0x4d6>
 8008566:	edc8 6a00 	vstr	s13, [r8]
 800856a:	ed88 7a01 	vstr	s14, [r8, #4]
 800856e:	edc8 7a02 	vstr	s15, [r8, #8]
 8008572:	e7d5      	b.n	8008520 <__kernel_rem_pio2f+0x3c0>
 8008574:	aa30      	add	r2, sp, #192	; 0xc0
 8008576:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 800846c <__kernel_rem_pio2f+0x30c>
 800857a:	4413      	add	r3, r2
 800857c:	4622      	mov	r2, r4
 800857e:	2a00      	cmp	r2, #0
 8008580:	da24      	bge.n	80085cc <__kernel_rem_pio2f+0x46c>
 8008582:	b34f      	cbz	r7, 80085d8 <__kernel_rem_pio2f+0x478>
 8008584:	eef1 7a47 	vneg.f32	s15, s14
 8008588:	edc8 7a00 	vstr	s15, [r8]
 800858c:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8008590:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008594:	aa31      	add	r2, sp, #196	; 0xc4
 8008596:	2301      	movs	r3, #1
 8008598:	429c      	cmp	r4, r3
 800859a:	da20      	bge.n	80085de <__kernel_rem_pio2f+0x47e>
 800859c:	b10f      	cbz	r7, 80085a2 <__kernel_rem_pio2f+0x442>
 800859e:	eef1 7a67 	vneg.f32	s15, s15
 80085a2:	edc8 7a01 	vstr	s15, [r8, #4]
 80085a6:	e7bb      	b.n	8008520 <__kernel_rem_pio2f+0x3c0>
 80085a8:	aa30      	add	r2, sp, #192	; 0xc0
 80085aa:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 800846c <__kernel_rem_pio2f+0x30c>
 80085ae:	4413      	add	r3, r2
 80085b0:	2c00      	cmp	r4, #0
 80085b2:	da05      	bge.n	80085c0 <__kernel_rem_pio2f+0x460>
 80085b4:	b10f      	cbz	r7, 80085ba <__kernel_rem_pio2f+0x45a>
 80085b6:	eef1 7a67 	vneg.f32	s15, s15
 80085ba:	edc8 7a00 	vstr	s15, [r8]
 80085be:	e7af      	b.n	8008520 <__kernel_rem_pio2f+0x3c0>
 80085c0:	ed33 7a01 	vldmdb	r3!, {s14}
 80085c4:	3c01      	subs	r4, #1
 80085c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80085ca:	e7f1      	b.n	80085b0 <__kernel_rem_pio2f+0x450>
 80085cc:	ed73 7a01 	vldmdb	r3!, {s15}
 80085d0:	3a01      	subs	r2, #1
 80085d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80085d6:	e7d2      	b.n	800857e <__kernel_rem_pio2f+0x41e>
 80085d8:	eef0 7a47 	vmov.f32	s15, s14
 80085dc:	e7d4      	b.n	8008588 <__kernel_rem_pio2f+0x428>
 80085de:	ecb2 7a01 	vldmia	r2!, {s14}
 80085e2:	3301      	adds	r3, #1
 80085e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80085e8:	e7d6      	b.n	8008598 <__kernel_rem_pio2f+0x438>
 80085ea:	edd1 7a00 	vldr	s15, [r1]
 80085ee:	edd1 6a01 	vldr	s13, [r1, #4]
 80085f2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80085f6:	3801      	subs	r0, #1
 80085f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80085fc:	ed81 7a00 	vstr	s14, [r1]
 8008600:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008604:	edc1 7a01 	vstr	s15, [r1, #4]
 8008608:	e799      	b.n	800853e <__kernel_rem_pio2f+0x3de>
 800860a:	edd2 7a00 	vldr	s15, [r2]
 800860e:	edd2 6a01 	vldr	s13, [r2, #4]
 8008612:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008616:	3901      	subs	r1, #1
 8008618:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800861c:	ed82 7a00 	vstr	s14, [r2]
 8008620:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008624:	edc2 7a01 	vstr	s15, [r2, #4]
 8008628:	e78e      	b.n	8008548 <__kernel_rem_pio2f+0x3e8>
 800862a:	ed33 7a01 	vldmdb	r3!, {s14}
 800862e:	3c01      	subs	r4, #1
 8008630:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008634:	e78f      	b.n	8008556 <__kernel_rem_pio2f+0x3f6>
 8008636:	eef1 6a66 	vneg.f32	s13, s13
 800863a:	eeb1 7a47 	vneg.f32	s14, s14
 800863e:	edc8 6a00 	vstr	s13, [r8]
 8008642:	ed88 7a01 	vstr	s14, [r8, #4]
 8008646:	eef1 7a67 	vneg.f32	s15, s15
 800864a:	e790      	b.n	800856e <__kernel_rem_pio2f+0x40e>

0800864c <__kernel_sinf>:
 800864c:	ee10 3a10 	vmov	r3, s0
 8008650:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008654:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8008658:	da04      	bge.n	8008664 <__kernel_sinf+0x18>
 800865a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800865e:	ee17 3a90 	vmov	r3, s15
 8008662:	b35b      	cbz	r3, 80086bc <__kernel_sinf+0x70>
 8008664:	ee20 7a00 	vmul.f32	s14, s0, s0
 8008668:	eddf 7a15 	vldr	s15, [pc, #84]	; 80086c0 <__kernel_sinf+0x74>
 800866c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 80086c4 <__kernel_sinf+0x78>
 8008670:	eea7 6a27 	vfma.f32	s12, s14, s15
 8008674:	eddf 7a14 	vldr	s15, [pc, #80]	; 80086c8 <__kernel_sinf+0x7c>
 8008678:	eee6 7a07 	vfma.f32	s15, s12, s14
 800867c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 80086cc <__kernel_sinf+0x80>
 8008680:	eea7 6a87 	vfma.f32	s12, s15, s14
 8008684:	eddf 7a12 	vldr	s15, [pc, #72]	; 80086d0 <__kernel_sinf+0x84>
 8008688:	ee60 6a07 	vmul.f32	s13, s0, s14
 800868c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008690:	b930      	cbnz	r0, 80086a0 <__kernel_sinf+0x54>
 8008692:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80086d4 <__kernel_sinf+0x88>
 8008696:	eea7 6a27 	vfma.f32	s12, s14, s15
 800869a:	eea6 0a26 	vfma.f32	s0, s12, s13
 800869e:	4770      	bx	lr
 80086a0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80086a4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80086a8:	eee0 7a86 	vfma.f32	s15, s1, s12
 80086ac:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80086b0:	eddf 7a09 	vldr	s15, [pc, #36]	; 80086d8 <__kernel_sinf+0x8c>
 80086b4:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80086b8:	ee30 0a60 	vsub.f32	s0, s0, s1
 80086bc:	4770      	bx	lr
 80086be:	bf00      	nop
 80086c0:	2f2ec9d3 	.word	0x2f2ec9d3
 80086c4:	b2d72f34 	.word	0xb2d72f34
 80086c8:	3638ef1b 	.word	0x3638ef1b
 80086cc:	b9500d01 	.word	0xb9500d01
 80086d0:	3c088889 	.word	0x3c088889
 80086d4:	be2aaaab 	.word	0xbe2aaaab
 80086d8:	3e2aaaab 	.word	0x3e2aaaab

080086dc <fabsf>:
 80086dc:	ee10 3a10 	vmov	r3, s0
 80086e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80086e4:	ee00 3a10 	vmov	s0, r3
 80086e8:	4770      	bx	lr
	...

080086ec <floorf>:
 80086ec:	ee10 3a10 	vmov	r3, s0
 80086f0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80086f4:	3a7f      	subs	r2, #127	; 0x7f
 80086f6:	2a16      	cmp	r2, #22
 80086f8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80086fc:	dc2a      	bgt.n	8008754 <floorf+0x68>
 80086fe:	2a00      	cmp	r2, #0
 8008700:	da11      	bge.n	8008726 <floorf+0x3a>
 8008702:	eddf 7a18 	vldr	s15, [pc, #96]	; 8008764 <floorf+0x78>
 8008706:	ee30 0a27 	vadd.f32	s0, s0, s15
 800870a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800870e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008712:	dd05      	ble.n	8008720 <floorf+0x34>
 8008714:	2b00      	cmp	r3, #0
 8008716:	da23      	bge.n	8008760 <floorf+0x74>
 8008718:	4a13      	ldr	r2, [pc, #76]	; (8008768 <floorf+0x7c>)
 800871a:	2900      	cmp	r1, #0
 800871c:	bf18      	it	ne
 800871e:	4613      	movne	r3, r2
 8008720:	ee00 3a10 	vmov	s0, r3
 8008724:	4770      	bx	lr
 8008726:	4911      	ldr	r1, [pc, #68]	; (800876c <floorf+0x80>)
 8008728:	4111      	asrs	r1, r2
 800872a:	420b      	tst	r3, r1
 800872c:	d0fa      	beq.n	8008724 <floorf+0x38>
 800872e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8008764 <floorf+0x78>
 8008732:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008736:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800873a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800873e:	ddef      	ble.n	8008720 <floorf+0x34>
 8008740:	2b00      	cmp	r3, #0
 8008742:	bfbe      	ittt	lt
 8008744:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8008748:	fa40 f202 	asrlt.w	r2, r0, r2
 800874c:	189b      	addlt	r3, r3, r2
 800874e:	ea23 0301 	bic.w	r3, r3, r1
 8008752:	e7e5      	b.n	8008720 <floorf+0x34>
 8008754:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8008758:	d3e4      	bcc.n	8008724 <floorf+0x38>
 800875a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800875e:	4770      	bx	lr
 8008760:	2300      	movs	r3, #0
 8008762:	e7dd      	b.n	8008720 <floorf+0x34>
 8008764:	7149f2ca 	.word	0x7149f2ca
 8008768:	bf800000 	.word	0xbf800000
 800876c:	007fffff 	.word	0x007fffff

08008770 <scalbnf>:
 8008770:	ee10 3a10 	vmov	r3, s0
 8008774:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8008778:	d025      	beq.n	80087c6 <scalbnf+0x56>
 800877a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800877e:	d302      	bcc.n	8008786 <scalbnf+0x16>
 8008780:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008784:	4770      	bx	lr
 8008786:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800878a:	d122      	bne.n	80087d2 <scalbnf+0x62>
 800878c:	4b2a      	ldr	r3, [pc, #168]	; (8008838 <scalbnf+0xc8>)
 800878e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800883c <scalbnf+0xcc>
 8008792:	4298      	cmp	r0, r3
 8008794:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008798:	db16      	blt.n	80087c8 <scalbnf+0x58>
 800879a:	ee10 3a10 	vmov	r3, s0
 800879e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80087a2:	3a19      	subs	r2, #25
 80087a4:	4402      	add	r2, r0
 80087a6:	2afe      	cmp	r2, #254	; 0xfe
 80087a8:	dd15      	ble.n	80087d6 <scalbnf+0x66>
 80087aa:	ee10 3a10 	vmov	r3, s0
 80087ae:	eddf 7a24 	vldr	s15, [pc, #144]	; 8008840 <scalbnf+0xd0>
 80087b2:	eddf 6a24 	vldr	s13, [pc, #144]	; 8008844 <scalbnf+0xd4>
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	eeb0 7a67 	vmov.f32	s14, s15
 80087bc:	bfb8      	it	lt
 80087be:	eef0 7a66 	vmovlt.f32	s15, s13
 80087c2:	ee27 0a27 	vmul.f32	s0, s14, s15
 80087c6:	4770      	bx	lr
 80087c8:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8008848 <scalbnf+0xd8>
 80087cc:	ee20 0a27 	vmul.f32	s0, s0, s15
 80087d0:	4770      	bx	lr
 80087d2:	0dd2      	lsrs	r2, r2, #23
 80087d4:	e7e6      	b.n	80087a4 <scalbnf+0x34>
 80087d6:	2a00      	cmp	r2, #0
 80087d8:	dd06      	ble.n	80087e8 <scalbnf+0x78>
 80087da:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80087de:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80087e2:	ee00 3a10 	vmov	s0, r3
 80087e6:	4770      	bx	lr
 80087e8:	f112 0f16 	cmn.w	r2, #22
 80087ec:	da1a      	bge.n	8008824 <scalbnf+0xb4>
 80087ee:	f24c 3350 	movw	r3, #50000	; 0xc350
 80087f2:	4298      	cmp	r0, r3
 80087f4:	ee10 3a10 	vmov	r3, s0
 80087f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80087fc:	dd0a      	ble.n	8008814 <scalbnf+0xa4>
 80087fe:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8008840 <scalbnf+0xd0>
 8008802:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8008844 <scalbnf+0xd4>
 8008806:	eef0 7a40 	vmov.f32	s15, s0
 800880a:	2b00      	cmp	r3, #0
 800880c:	bf18      	it	ne
 800880e:	eeb0 0a47 	vmovne.f32	s0, s14
 8008812:	e7db      	b.n	80087cc <scalbnf+0x5c>
 8008814:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8008848 <scalbnf+0xd8>
 8008818:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800884c <scalbnf+0xdc>
 800881c:	eef0 7a40 	vmov.f32	s15, s0
 8008820:	2b00      	cmp	r3, #0
 8008822:	e7f3      	b.n	800880c <scalbnf+0x9c>
 8008824:	3219      	adds	r2, #25
 8008826:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800882a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800882e:	eddf 7a08 	vldr	s15, [pc, #32]	; 8008850 <scalbnf+0xe0>
 8008832:	ee07 3a10 	vmov	s14, r3
 8008836:	e7c4      	b.n	80087c2 <scalbnf+0x52>
 8008838:	ffff3cb0 	.word	0xffff3cb0
 800883c:	4c000000 	.word	0x4c000000
 8008840:	7149f2ca 	.word	0x7149f2ca
 8008844:	f149f2ca 	.word	0xf149f2ca
 8008848:	0da24260 	.word	0x0da24260
 800884c:	8da24260 	.word	0x8da24260
 8008850:	33000000 	.word	0x33000000

08008854 <_init>:
 8008854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008856:	bf00      	nop
 8008858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800885a:	bc08      	pop	{r3}
 800885c:	469e      	mov	lr, r3
 800885e:	4770      	bx	lr

08008860 <_fini>:
 8008860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008862:	bf00      	nop
 8008864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008866:	bc08      	pop	{r3}
 8008868:	469e      	mov	lr, r3
 800886a:	4770      	bx	lr
