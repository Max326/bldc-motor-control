
bldc-motor-control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c6ec  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008cc  0800c890  0800c890  0001c890  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d15c  0800d15c  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d15c  0800d15c  0001d15c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d164  0800d164  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d164  0800d164  0001d164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d168  0800d168  0001d168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800d16c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c1c  200001e8  0800d354  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004e04  0800d354  00024e04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d0c3  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000045a3  00000000  00000000  0003d2db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001868  00000000  00000000  00041880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001690  00000000  00000000  000430e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c7bd  00000000  00000000  00044778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d6dd  00000000  00000000  00060f35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a706d  00000000  00000000  0007e612  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012567f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007790  00000000  00000000  001256d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c874 	.word	0x0800c874

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800c874 	.word	0x0800c874

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f62:	463b      	mov	r3, r7
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f6e:	4b21      	ldr	r3, [pc, #132]	; (8000ff4 <MX_ADC1_Init+0x98>)
 8000f70:	4a21      	ldr	r2, [pc, #132]	; (8000ff8 <MX_ADC1_Init+0x9c>)
 8000f72:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000f74:	4b1f      	ldr	r3, [pc, #124]	; (8000ff4 <MX_ADC1_Init+0x98>)
 8000f76:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000f7a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f7c:	4b1d      	ldr	r3, [pc, #116]	; (8000ff4 <MX_ADC1_Init+0x98>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000f82:	4b1c      	ldr	r3, [pc, #112]	; (8000ff4 <MX_ADC1_Init+0x98>)
 8000f84:	2201      	movs	r2, #1
 8000f86:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f88:	4b1a      	ldr	r3, [pc, #104]	; (8000ff4 <MX_ADC1_Init+0x98>)
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f8e:	4b19      	ldr	r3, [pc, #100]	; (8000ff4 <MX_ADC1_Init+0x98>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f96:	4b17      	ldr	r3, [pc, #92]	; (8000ff4 <MX_ADC1_Init+0x98>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f9c:	4b15      	ldr	r3, [pc, #84]	; (8000ff4 <MX_ADC1_Init+0x98>)
 8000f9e:	4a17      	ldr	r2, [pc, #92]	; (8000ffc <MX_ADC1_Init+0xa0>)
 8000fa0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fa2:	4b14      	ldr	r3, [pc, #80]	; (8000ff4 <MX_ADC1_Init+0x98>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000fa8:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <MX_ADC1_Init+0x98>)
 8000faa:	2201      	movs	r2, #1
 8000fac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fae:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <MX_ADC1_Init+0x98>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fb6:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <MX_ADC1_Init+0x98>)
 8000fb8:	2201      	movs	r2, #1
 8000fba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fbc:	480d      	ldr	r0, [pc, #52]	; (8000ff4 <MX_ADC1_Init+0x98>)
 8000fbe:	f000 fe75 	bl	8001cac <HAL_ADC_Init>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000fc8:	f000 fa4a 	bl	8001460 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000fcc:	2306      	movs	r3, #6
 8000fce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fd8:	463b      	mov	r3, r7
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4805      	ldr	r0, [pc, #20]	; (8000ff4 <MX_ADC1_Init+0x98>)
 8000fde:	f001 f8c7 	bl	8002170 <HAL_ADC_ConfigChannel>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000fe8:	f000 fa3a 	bl	8001460 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fec:	bf00      	nop
 8000fee:	3710      	adds	r7, #16
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20000204 	.word	0x20000204
 8000ff8:	40012000 	.word	0x40012000
 8000ffc:	0f000001 	.word	0x0f000001

08001000 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08a      	sub	sp, #40	; 0x28
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001008:	f107 0314 	add.w	r3, r7, #20
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a33      	ldr	r2, [pc, #204]	; (80010ec <HAL_ADC_MspInit+0xec>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d15f      	bne.n	80010e2 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	613b      	str	r3, [r7, #16]
 8001026:	4b32      	ldr	r3, [pc, #200]	; (80010f0 <HAL_ADC_MspInit+0xf0>)
 8001028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102a:	4a31      	ldr	r2, [pc, #196]	; (80010f0 <HAL_ADC_MspInit+0xf0>)
 800102c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001030:	6453      	str	r3, [r2, #68]	; 0x44
 8001032:	4b2f      	ldr	r3, [pc, #188]	; (80010f0 <HAL_ADC_MspInit+0xf0>)
 8001034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800103a:	613b      	str	r3, [r7, #16]
 800103c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	4b2b      	ldr	r3, [pc, #172]	; (80010f0 <HAL_ADC_MspInit+0xf0>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	4a2a      	ldr	r2, [pc, #168]	; (80010f0 <HAL_ADC_MspInit+0xf0>)
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	6313      	str	r3, [r2, #48]	; 0x30
 800104e:	4b28      	ldr	r3, [pc, #160]	; (80010f0 <HAL_ADC_MspInit+0xf0>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800105a:	2340      	movs	r3, #64	; 0x40
 800105c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800105e:	2303      	movs	r3, #3
 8001060:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001066:	f107 0314 	add.w	r3, r7, #20
 800106a:	4619      	mov	r1, r3
 800106c:	4821      	ldr	r0, [pc, #132]	; (80010f4 <HAL_ADC_MspInit+0xf4>)
 800106e:	f002 f84d 	bl	800310c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001072:	4b21      	ldr	r3, [pc, #132]	; (80010f8 <HAL_ADC_MspInit+0xf8>)
 8001074:	4a21      	ldr	r2, [pc, #132]	; (80010fc <HAL_ADC_MspInit+0xfc>)
 8001076:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001078:	4b1f      	ldr	r3, [pc, #124]	; (80010f8 <HAL_ADC_MspInit+0xf8>)
 800107a:	2200      	movs	r2, #0
 800107c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800107e:	4b1e      	ldr	r3, [pc, #120]	; (80010f8 <HAL_ADC_MspInit+0xf8>)
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001084:	4b1c      	ldr	r3, [pc, #112]	; (80010f8 <HAL_ADC_MspInit+0xf8>)
 8001086:	2200      	movs	r2, #0
 8001088:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800108a:	4b1b      	ldr	r3, [pc, #108]	; (80010f8 <HAL_ADC_MspInit+0xf8>)
 800108c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001090:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001092:	4b19      	ldr	r3, [pc, #100]	; (80010f8 <HAL_ADC_MspInit+0xf8>)
 8001094:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001098:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800109a:	4b17      	ldr	r3, [pc, #92]	; (80010f8 <HAL_ADC_MspInit+0xf8>)
 800109c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010a0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80010a2:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <HAL_ADC_MspInit+0xf8>)
 80010a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010a8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80010aa:	4b13      	ldr	r3, [pc, #76]	; (80010f8 <HAL_ADC_MspInit+0xf8>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010b0:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <HAL_ADC_MspInit+0xf8>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80010b6:	4810      	ldr	r0, [pc, #64]	; (80010f8 <HAL_ADC_MspInit+0xf8>)
 80010b8:	f001 fc26 	bl	8002908 <HAL_DMA_Init>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80010c2:	f000 f9cd 	bl	8001460 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a0b      	ldr	r2, [pc, #44]	; (80010f8 <HAL_ADC_MspInit+0xf8>)
 80010ca:	639a      	str	r2, [r3, #56]	; 0x38
 80010cc:	4a0a      	ldr	r2, [pc, #40]	; (80010f8 <HAL_ADC_MspInit+0xf8>)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2105      	movs	r1, #5
 80010d6:	2012      	movs	r0, #18
 80010d8:	f001 fbdf 	bl	800289a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80010dc:	2012      	movs	r0, #18
 80010de:	f001 fbf8 	bl	80028d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80010e2:	bf00      	nop
 80010e4:	3728      	adds	r7, #40	; 0x28
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40012000 	.word	0x40012000
 80010f0:	40023800 	.word	0x40023800
 80010f4:	40020000 	.word	0x40020000
 80010f8:	2000024c 	.word	0x2000024c
 80010fc:	40026410 	.word	0x40026410

08001100 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	607b      	str	r3, [r7, #4]
 800110a:	4b14      	ldr	r3, [pc, #80]	; (800115c <MX_DMA_Init+0x5c>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	4a13      	ldr	r2, [pc, #76]	; (800115c <MX_DMA_Init+0x5c>)
 8001110:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001114:	6313      	str	r3, [r2, #48]	; 0x30
 8001116:	4b11      	ldr	r3, [pc, #68]	; (800115c <MX_DMA_Init+0x5c>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800111e:	607b      	str	r3, [r7, #4]
 8001120:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001122:	2200      	movs	r2, #0
 8001124:	2105      	movs	r1, #5
 8001126:	2038      	movs	r0, #56	; 0x38
 8001128:	f001 fbb7 	bl	800289a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800112c:	2038      	movs	r0, #56	; 0x38
 800112e:	f001 fbd0 	bl	80028d2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8001132:	2200      	movs	r2, #0
 8001134:	2105      	movs	r1, #5
 8001136:	2039      	movs	r0, #57	; 0x39
 8001138:	f001 fbaf 	bl	800289a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800113c:	2039      	movs	r0, #57	; 0x39
 800113e:	f001 fbc8 	bl	80028d2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8001142:	2200      	movs	r2, #0
 8001144:	2105      	movs	r1, #5
 8001146:	2045      	movs	r0, #69	; 0x45
 8001148:	f001 fba7 	bl	800289a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800114c:	2045      	movs	r0, #69	; 0x45
 800114e:	f001 fbc0 	bl	80028d2 <HAL_NVIC_EnableIRQ>

}
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40023800 	.word	0x40023800

08001160 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of MotorTask */
  MotorTaskHandle = osThreadNew(StartMotorTask, NULL, &MotorTask_attributes);
 8001164:	4a0c      	ldr	r2, [pc, #48]	; (8001198 <MX_FREERTOS_Init+0x38>)
 8001166:	2100      	movs	r1, #0
 8001168:	480c      	ldr	r0, [pc, #48]	; (800119c <MX_FREERTOS_Init+0x3c>)
 800116a:	f004 fdb7 	bl	8005cdc <osThreadNew>
 800116e:	4603      	mov	r3, r0
 8001170:	4a0b      	ldr	r2, [pc, #44]	; (80011a0 <MX_FREERTOS_Init+0x40>)
 8001172:	6013      	str	r3, [r2, #0]

  /* creation of PotTask */
  PotTaskHandle = osThreadNew(StartPotTask, NULL, &PotTask_attributes);
 8001174:	4a0b      	ldr	r2, [pc, #44]	; (80011a4 <MX_FREERTOS_Init+0x44>)
 8001176:	2100      	movs	r1, #0
 8001178:	480b      	ldr	r0, [pc, #44]	; (80011a8 <MX_FREERTOS_Init+0x48>)
 800117a:	f004 fdaf 	bl	8005cdc <osThreadNew>
 800117e:	4603      	mov	r3, r0
 8001180:	4a0a      	ldr	r2, [pc, #40]	; (80011ac <MX_FREERTOS_Init+0x4c>)
 8001182:	6013      	str	r3, [r2, #0]

  /* creation of ComTask */
  ComTaskHandle = osThreadNew(StartComTask, NULL, &ComTask_attributes);
 8001184:	4a0a      	ldr	r2, [pc, #40]	; (80011b0 <MX_FREERTOS_Init+0x50>)
 8001186:	2100      	movs	r1, #0
 8001188:	480a      	ldr	r0, [pc, #40]	; (80011b4 <MX_FREERTOS_Init+0x54>)
 800118a:	f004 fda7 	bl	8005cdc <osThreadNew>
 800118e:	4603      	mov	r3, r0
 8001190:	4a09      	ldr	r2, [pc, #36]	; (80011b8 <MX_FREERTOS_Init+0x58>)
 8001192:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001194:	bf00      	nop
 8001196:	bd80      	pop	{r7, pc}
 8001198:	0800c928 	.word	0x0800c928
 800119c:	080011bd 	.word	0x080011bd
 80011a0:	200002ac 	.word	0x200002ac
 80011a4:	0800c94c 	.word	0x0800c94c
 80011a8:	080011d1 	.word	0x080011d1
 80011ac:	200002b0 	.word	0x200002b0
 80011b0:	0800c970 	.word	0x0800c970
 80011b4:	080011e5 	.word	0x080011e5
 80011b8:	200002b4 	.word	0x200002b4

080011bc <StartMotorTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMotorTask */
void StartMotorTask(void *argument)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMotorTask */
  MotorControlTask();
 80011c4:	f007 fb50 	bl	8008868 <MotorControlTask>
  /* USER CODE END StartMotorTask */
}
 80011c8:	bf00      	nop
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <StartPotTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPotTask */
void StartPotTask(void *argument)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPotTask */
  PotTask();
 80011d8:	f007 fdfe 	bl	8008dd8 <PotTask>
  /* USER CODE END StartPotTask */
}
 80011dc:	bf00      	nop
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <StartComTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartComTask */
void StartComTask(void *argument)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartComTask */
  ComTask();
 80011ec:	f007 fa7e 	bl	80086ec <ComTask>
  /* USER CODE END StartComTask */
}
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08a      	sub	sp, #40	; 0x28
 80011fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fe:	f107 0314 	add.w	r3, r7, #20
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	609a      	str	r2, [r3, #8]
 800120a:	60da      	str	r2, [r3, #12]
 800120c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	613b      	str	r3, [r7, #16]
 8001212:	4b3f      	ldr	r3, [pc, #252]	; (8001310 <MX_GPIO_Init+0x118>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	4a3e      	ldr	r2, [pc, #248]	; (8001310 <MX_GPIO_Init+0x118>)
 8001218:	f043 0301 	orr.w	r3, r3, #1
 800121c:	6313      	str	r3, [r2, #48]	; 0x30
 800121e:	4b3c      	ldr	r3, [pc, #240]	; (8001310 <MX_GPIO_Init+0x118>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	613b      	str	r3, [r7, #16]
 8001228:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	60fb      	str	r3, [r7, #12]
 800122e:	4b38      	ldr	r3, [pc, #224]	; (8001310 <MX_GPIO_Init+0x118>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	4a37      	ldr	r2, [pc, #220]	; (8001310 <MX_GPIO_Init+0x118>)
 8001234:	f043 0310 	orr.w	r3, r3, #16
 8001238:	6313      	str	r3, [r2, #48]	; 0x30
 800123a:	4b35      	ldr	r3, [pc, #212]	; (8001310 <MX_GPIO_Init+0x118>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	f003 0310 	and.w	r3, r3, #16
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	60bb      	str	r3, [r7, #8]
 800124a:	4b31      	ldr	r3, [pc, #196]	; (8001310 <MX_GPIO_Init+0x118>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	4a30      	ldr	r2, [pc, #192]	; (8001310 <MX_GPIO_Init+0x118>)
 8001250:	f043 0302 	orr.w	r3, r3, #2
 8001254:	6313      	str	r3, [r2, #48]	; 0x30
 8001256:	4b2e      	ldr	r3, [pc, #184]	; (8001310 <MX_GPIO_Init+0x118>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	f003 0302 	and.w	r3, r3, #2
 800125e:	60bb      	str	r3, [r7, #8]
 8001260:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	607b      	str	r3, [r7, #4]
 8001266:	4b2a      	ldr	r3, [pc, #168]	; (8001310 <MX_GPIO_Init+0x118>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	4a29      	ldr	r2, [pc, #164]	; (8001310 <MX_GPIO_Init+0x118>)
 800126c:	f043 0308 	orr.w	r3, r3, #8
 8001270:	6313      	str	r3, [r2, #48]	; 0x30
 8001272:	4b27      	ldr	r3, [pc, #156]	; (8001310 <MX_GPIO_Init+0x118>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	f003 0308 	and.w	r3, r3, #8
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	603b      	str	r3, [r7, #0]
 8001282:	4b23      	ldr	r3, [pc, #140]	; (8001310 <MX_GPIO_Init+0x118>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	4a22      	ldr	r2, [pc, #136]	; (8001310 <MX_GPIO_Init+0x118>)
 8001288:	f043 0304 	orr.w	r3, r3, #4
 800128c:	6313      	str	r3, [r2, #48]	; 0x30
 800128e:	4b20      	ldr	r3, [pc, #128]	; (8001310 <MX_GPIO_Init+0x118>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	f003 0304 	and.w	r3, r3, #4
 8001296:	603b      	str	r3, [r7, #0]
 8001298:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PWM1EN_Pin|PWM2EN_Pin|PWM3EN_Pin, GPIO_PIN_RESET);
 800129a:	2200      	movs	r2, #0
 800129c:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 80012a0:	481c      	ldr	r0, [pc, #112]	; (8001314 <MX_GPIO_Init+0x11c>)
 80012a2:	f002 f8b7 	bl	8003414 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD3_Pin|LD4_Pin|LD5_Pin|LDN_Pin, GPIO_PIN_RESET);
 80012a6:	2200      	movs	r2, #0
 80012a8:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80012ac:	481a      	ldr	r0, [pc, #104]	; (8001318 <MX_GPIO_Init+0x120>)
 80012ae:	f002 f8b1 	bl	8003414 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80012b2:	2301      	movs	r3, #1
 80012b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80012be:	f107 0314 	add.w	r3, r7, #20
 80012c2:	4619      	mov	r1, r3
 80012c4:	4815      	ldr	r0, [pc, #84]	; (800131c <MX_GPIO_Init+0x124>)
 80012c6:	f001 ff21 	bl	800310c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = PWM1EN_Pin|PWM2EN_Pin|PWM3EN_Pin;
 80012ca:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80012ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d0:	2301      	movs	r3, #1
 80012d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d8:	2300      	movs	r3, #0
 80012da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012dc:	f107 0314 	add.w	r3, r7, #20
 80012e0:	4619      	mov	r1, r3
 80012e2:	480c      	ldr	r0, [pc, #48]	; (8001314 <MX_GPIO_Init+0x11c>)
 80012e4:	f001 ff12 	bl	800310c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin|LD5_Pin|LDN_Pin;
 80012e8:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80012ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ee:	2301      	movs	r3, #1
 80012f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012f6:	2302      	movs	r3, #2
 80012f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012fa:	f107 0314 	add.w	r3, r7, #20
 80012fe:	4619      	mov	r1, r3
 8001300:	4805      	ldr	r0, [pc, #20]	; (8001318 <MX_GPIO_Init+0x120>)
 8001302:	f001 ff03 	bl	800310c <HAL_GPIO_Init>

}
 8001306:	bf00      	nop
 8001308:	3728      	adds	r7, #40	; 0x28
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40023800 	.word	0x40023800
 8001314:	40020400 	.word	0x40020400
 8001318:	40020c00 	.word	0x40020c00
 800131c:	40020000 	.word	0x40020000

08001320 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001324:	f000 fc50 	bl	8001bc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001328:	f000 f812 	bl	8001350 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800132c:	f7ff ff64 	bl	80011f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001330:	f7ff fee6 	bl	8001100 <MX_DMA_Init>
  MX_ADC1_Init();
 8001334:	f7ff fe12 	bl	8000f5c <MX_ADC1_Init>
  MX_USART6_UART_Init();
 8001338:	f000 fb3e 	bl	80019b8 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 800133c:	f000 fa1e 	bl	800177c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001340:	f004 fc82 	bl	8005c48 <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001344:	f7ff ff0c 	bl	8001160 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001348:	f004 fca2 	bl	8005c90 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800134c:	e7fe      	b.n	800134c <main+0x2c>
	...

08001350 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b094      	sub	sp, #80	; 0x50
 8001354:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001356:	f107 0320 	add.w	r3, r7, #32
 800135a:	2230      	movs	r2, #48	; 0x30
 800135c:	2100      	movs	r1, #0
 800135e:	4618      	mov	r0, r3
 8001360:	f007 fdc0 	bl	8008ee4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001364:	f107 030c 	add.w	r3, r7, #12
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
 8001372:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001374:	2300      	movs	r3, #0
 8001376:	60bb      	str	r3, [r7, #8]
 8001378:	4b27      	ldr	r3, [pc, #156]	; (8001418 <SystemClock_Config+0xc8>)
 800137a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137c:	4a26      	ldr	r2, [pc, #152]	; (8001418 <SystemClock_Config+0xc8>)
 800137e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001382:	6413      	str	r3, [r2, #64]	; 0x40
 8001384:	4b24      	ldr	r3, [pc, #144]	; (8001418 <SystemClock_Config+0xc8>)
 8001386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001388:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800138c:	60bb      	str	r3, [r7, #8]
 800138e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001390:	2300      	movs	r3, #0
 8001392:	607b      	str	r3, [r7, #4]
 8001394:	4b21      	ldr	r3, [pc, #132]	; (800141c <SystemClock_Config+0xcc>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a20      	ldr	r2, [pc, #128]	; (800141c <SystemClock_Config+0xcc>)
 800139a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800139e:	6013      	str	r3, [r2, #0]
 80013a0:	4b1e      	ldr	r3, [pc, #120]	; (800141c <SystemClock_Config+0xcc>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013a8:	607b      	str	r3, [r7, #4]
 80013aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013ac:	2302      	movs	r3, #2
 80013ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013b0:	2301      	movs	r3, #1
 80013b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013b4:	2310      	movs	r3, #16
 80013b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013b8:	2302      	movs	r3, #2
 80013ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013bc:	2300      	movs	r3, #0
 80013be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013c0:	2308      	movs	r3, #8
 80013c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80013c4:	2364      	movs	r3, #100	; 0x64
 80013c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013c8:	2302      	movs	r3, #2
 80013ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013cc:	2304      	movs	r3, #4
 80013ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013d0:	f107 0320 	add.w	r3, r7, #32
 80013d4:	4618      	mov	r0, r3
 80013d6:	f002 f837 	bl	8003448 <HAL_RCC_OscConfig>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80013e0:	f000 f83e 	bl	8001460 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013e4:	230f      	movs	r3, #15
 80013e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013e8:	2302      	movs	r3, #2
 80013ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013ec:	2300      	movs	r3, #0
 80013ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013f6:	2300      	movs	r3, #0
 80013f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80013fa:	f107 030c 	add.w	r3, r7, #12
 80013fe:	2103      	movs	r1, #3
 8001400:	4618      	mov	r0, r3
 8001402:	f002 fa99 	bl	8003938 <HAL_RCC_ClockConfig>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800140c:	f000 f828 	bl	8001460 <Error_Handler>
  }
}
 8001410:	bf00      	nop
 8001412:	3750      	adds	r7, #80	; 0x50
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40023800 	.word	0x40023800
 800141c:	40007000 	.word	0x40007000

08001420 <__io_putchar>:

/* USER CODE BEGIN 4 */


int __io_putchar(int ch)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
    if (ch == '\n') {
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2b0a      	cmp	r3, #10
 800142c:	d109      	bne.n	8001442 <__io_putchar+0x22>
        uint8_t ch6 = '\r';
 800142e:	230d      	movs	r3, #13
 8001430:	73fb      	strb	r3, [r7, #15]
        HAL_UART_Transmit(&huart6, &ch6, 1, HAL_MAX_DELAY);
 8001432:	f107 010f 	add.w	r1, r7, #15
 8001436:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800143a:	2201      	movs	r2, #1
 800143c:	4807      	ldr	r0, [pc, #28]	; (800145c <__io_putchar+0x3c>)
 800143e:	f003 f96b 	bl	8004718 <HAL_UART_Transmit>
    }

    HAL_UART_Transmit(&huart6, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001442:	1d39      	adds	r1, r7, #4
 8001444:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001448:	2201      	movs	r2, #1
 800144a:	4804      	ldr	r0, [pc, #16]	; (800145c <__io_putchar+0x3c>)
 800144c:	f003 f964 	bl	8004718 <HAL_UART_Transmit>
    return 1;
 8001450:	2301      	movs	r3, #1
}
 8001452:	4618      	mov	r0, r3
 8001454:	3710      	adds	r7, #16
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20000304 	.word	0x20000304

08001460 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001464:	b672      	cpsid	i
}
 8001466:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001468:	e7fe      	b.n	8001468 <Error_Handler+0x8>
	...

0800146c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	607b      	str	r3, [r7, #4]
 8001476:	4b12      	ldr	r3, [pc, #72]	; (80014c0 <HAL_MspInit+0x54>)
 8001478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147a:	4a11      	ldr	r2, [pc, #68]	; (80014c0 <HAL_MspInit+0x54>)
 800147c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001480:	6453      	str	r3, [r2, #68]	; 0x44
 8001482:	4b0f      	ldr	r3, [pc, #60]	; (80014c0 <HAL_MspInit+0x54>)
 8001484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001486:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800148a:	607b      	str	r3, [r7, #4]
 800148c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	603b      	str	r3, [r7, #0]
 8001492:	4b0b      	ldr	r3, [pc, #44]	; (80014c0 <HAL_MspInit+0x54>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001496:	4a0a      	ldr	r2, [pc, #40]	; (80014c0 <HAL_MspInit+0x54>)
 8001498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800149c:	6413      	str	r3, [r2, #64]	; 0x40
 800149e:	4b08      	ldr	r3, [pc, #32]	; (80014c0 <HAL_MspInit+0x54>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a6:	603b      	str	r3, [r7, #0]
 80014a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014aa:	2200      	movs	r2, #0
 80014ac:	210f      	movs	r1, #15
 80014ae:	f06f 0001 	mvn.w	r0, #1
 80014b2:	f001 f9f2 	bl	800289a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40023800 	.word	0x40023800

080014c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014c8:	e7fe      	b.n	80014c8 <NMI_Handler+0x4>

080014ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ca:	b480      	push	{r7}
 80014cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ce:	e7fe      	b.n	80014ce <HardFault_Handler+0x4>

080014d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014d4:	e7fe      	b.n	80014d4 <MemManage_Handler+0x4>

080014d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014d6:	b480      	push	{r7}
 80014d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014da:	e7fe      	b.n	80014da <BusFault_Handler+0x4>

080014dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014e0:	e7fe      	b.n	80014e0 <UsageFault_Handler+0x4>

080014e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014e2:	b480      	push	{r7}
 80014e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014e6:	bf00      	nop
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014f4:	f000 fbba 	bl	8001c6c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80014f8:	f006 f890 	bl	800761c <xTaskGetSchedulerState>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d001      	beq.n	8001506 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001502:	f006 fe79 	bl	80081f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
	...

0800150c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001510:	4802      	ldr	r0, [pc, #8]	; (800151c <ADC_IRQHandler+0x10>)
 8001512:	f000 fc0e 	bl	8001d32 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	20000204 	.word	0x20000204

08001520 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001524:	4802      	ldr	r0, [pc, #8]	; (8001530 <DMA2_Stream0_IRQHandler+0x10>)
 8001526:	f001 fb87 	bl	8002c38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	2000024c 	.word	0x2000024c

08001534 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001538:	4802      	ldr	r0, [pc, #8]	; (8001544 <DMA2_Stream1_IRQHandler+0x10>)
 800153a:	f001 fb7d 	bl	8002c38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	2000034c 	.word	0x2000034c

08001548 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 800154c:	4802      	ldr	r0, [pc, #8]	; (8001558 <DMA2_Stream6_IRQHandler+0x10>)
 800154e:	f001 fb73 	bl	8002c38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	200003ac 	.word	0x200003ac

0800155c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001560:	4802      	ldr	r0, [pc, #8]	; (800156c <USART6_IRQHandler+0x10>)
 8001562:	f003 f9fb 	bl	800495c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20000304 	.word	0x20000304

08001570 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 1 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1) {
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a04      	ldr	r2, [pc, #16]	; (8001590 <HAL_ADC_ConvCpltCallback+0x20>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d101      	bne.n	8001586 <HAL_ADC_ConvCpltCallback+0x16>
		AdcConvCpltCallback();
 8001582:	f007 fc47 	bl	8008e14 <AdcConvCpltCallback>
	}
}
 8001586:	bf00      	nop
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40012000 	.word	0x40012000

08001594 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART6) {
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a04      	ldr	r2, [pc, #16]	; (80015b4 <HAL_UART_RxCpltCallback+0x20>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d101      	bne.n	80015aa <HAL_UART_RxCpltCallback+0x16>
		ComRxCpltCallback();
 80015a6:	f007 f8d7 	bl	8008758 <ComRxCpltCallback>
	}
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40011400 	.word	0x40011400

080015b8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]

}
 80015c0:	bf00      	nop
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  return 1;
 80015d0:	2301      	movs	r3, #1
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <_kill>:

int _kill(int pid, int sig)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015e6:	f007 fc45 	bl	8008e74 <__errno>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2216      	movs	r2, #22
 80015ee:	601a      	str	r2, [r3, #0]
  return -1;
 80015f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <_exit>:

void _exit (int status)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001604:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f7ff ffe7 	bl	80015dc <_kill>
  while (1) {}    /* Make sure we hang here */
 800160e:	e7fe      	b.n	800160e <_exit+0x12>

08001610 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]
 8001620:	e00a      	b.n	8001638 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001622:	f3af 8000 	nop.w
 8001626:	4601      	mov	r1, r0
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	1c5a      	adds	r2, r3, #1
 800162c:	60ba      	str	r2, [r7, #8]
 800162e:	b2ca      	uxtb	r2, r1
 8001630:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	3301      	adds	r3, #1
 8001636:	617b      	str	r3, [r7, #20]
 8001638:	697a      	ldr	r2, [r7, #20]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	429a      	cmp	r2, r3
 800163e:	dbf0      	blt.n	8001622 <_read+0x12>
  }

  return len;
 8001640:	687b      	ldr	r3, [r7, #4]
}
 8001642:	4618      	mov	r0, r3
 8001644:	3718      	adds	r7, #24
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b086      	sub	sp, #24
 800164e:	af00      	add	r7, sp, #0
 8001650:	60f8      	str	r0, [r7, #12]
 8001652:	60b9      	str	r1, [r7, #8]
 8001654:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001656:	2300      	movs	r3, #0
 8001658:	617b      	str	r3, [r7, #20]
 800165a:	e009      	b.n	8001670 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	1c5a      	adds	r2, r3, #1
 8001660:	60ba      	str	r2, [r7, #8]
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff fedb 	bl	8001420 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	3301      	adds	r3, #1
 800166e:	617b      	str	r3, [r7, #20]
 8001670:	697a      	ldr	r2, [r7, #20]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	429a      	cmp	r2, r3
 8001676:	dbf1      	blt.n	800165c <_write+0x12>
  }
  return len;
 8001678:	687b      	ldr	r3, [r7, #4]
}
 800167a:	4618      	mov	r0, r3
 800167c:	3718      	adds	r7, #24
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <_close>:

int _close(int file)
{
 8001682:	b480      	push	{r7}
 8001684:	b083      	sub	sp, #12
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800168a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800168e:	4618      	mov	r0, r3
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr

0800169a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800169a:	b480      	push	{r7}
 800169c:	b083      	sub	sp, #12
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
 80016a2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016aa:	605a      	str	r2, [r3, #4]
  return 0;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr

080016ba <_isatty>:

int _isatty(int file)
{
 80016ba:	b480      	push	{r7}
 80016bc:	b083      	sub	sp, #12
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016c2:	2301      	movs	r3, #1
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3714      	adds	r7, #20
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
	...

080016ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016f4:	4a14      	ldr	r2, [pc, #80]	; (8001748 <_sbrk+0x5c>)
 80016f6:	4b15      	ldr	r3, [pc, #84]	; (800174c <_sbrk+0x60>)
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001700:	4b13      	ldr	r3, [pc, #76]	; (8001750 <_sbrk+0x64>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d102      	bne.n	800170e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001708:	4b11      	ldr	r3, [pc, #68]	; (8001750 <_sbrk+0x64>)
 800170a:	4a12      	ldr	r2, [pc, #72]	; (8001754 <_sbrk+0x68>)
 800170c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800170e:	4b10      	ldr	r3, [pc, #64]	; (8001750 <_sbrk+0x64>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4413      	add	r3, r2
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	429a      	cmp	r2, r3
 800171a:	d207      	bcs.n	800172c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800171c:	f007 fbaa 	bl	8008e74 <__errno>
 8001720:	4603      	mov	r3, r0
 8001722:	220c      	movs	r2, #12
 8001724:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001726:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800172a:	e009      	b.n	8001740 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800172c:	4b08      	ldr	r3, [pc, #32]	; (8001750 <_sbrk+0x64>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001732:	4b07      	ldr	r3, [pc, #28]	; (8001750 <_sbrk+0x64>)
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4413      	add	r3, r2
 800173a:	4a05      	ldr	r2, [pc, #20]	; (8001750 <_sbrk+0x64>)
 800173c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800173e:	68fb      	ldr	r3, [r7, #12]
}
 8001740:	4618      	mov	r0, r3
 8001742:	3718      	adds	r7, #24
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	20020000 	.word	0x20020000
 800174c:	00000400 	.word	0x00000400
 8001750:	200002b8 	.word	0x200002b8
 8001754:	20004e08 	.word	0x20004e08

08001758 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800175c:	4b06      	ldr	r3, [pc, #24]	; (8001778 <SystemInit+0x20>)
 800175e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001762:	4a05      	ldr	r2, [pc, #20]	; (8001778 <SystemInit+0x20>)
 8001764:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001768:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	e000ed00 	.word	0xe000ed00

0800177c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b092      	sub	sp, #72	; 0x48
 8001780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001782:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800178c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	609a      	str	r2, [r3, #8]
 8001798:	60da      	str	r2, [r3, #12]
 800179a:	611a      	str	r2, [r3, #16]
 800179c:	615a      	str	r2, [r3, #20]
 800179e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017a0:	1d3b      	adds	r3, r7, #4
 80017a2:	2220      	movs	r2, #32
 80017a4:	2100      	movs	r1, #0
 80017a6:	4618      	mov	r0, r3
 80017a8:	f007 fb9c 	bl	8008ee4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017ac:	4b41      	ldr	r3, [pc, #260]	; (80018b4 <MX_TIM1_Init+0x138>)
 80017ae:	4a42      	ldr	r2, [pc, #264]	; (80018b8 <MX_TIM1_Init+0x13c>)
 80017b0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80017b2:	4b40      	ldr	r3, [pc, #256]	; (80018b4 <MX_TIM1_Init+0x138>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017b8:	4b3e      	ldr	r3, [pc, #248]	; (80018b4 <MX_TIM1_Init+0x138>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4999;
 80017be:	4b3d      	ldr	r3, [pc, #244]	; (80018b4 <MX_TIM1_Init+0x138>)
 80017c0:	f241 3287 	movw	r2, #4999	; 0x1387
 80017c4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017c6:	4b3b      	ldr	r3, [pc, #236]	; (80018b4 <MX_TIM1_Init+0x138>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017cc:	4b39      	ldr	r3, [pc, #228]	; (80018b4 <MX_TIM1_Init+0x138>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017d2:	4b38      	ldr	r3, [pc, #224]	; (80018b4 <MX_TIM1_Init+0x138>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80017d8:	4836      	ldr	r0, [pc, #216]	; (80018b4 <MX_TIM1_Init+0x138>)
 80017da:	f002 fa8d 	bl	8003cf8 <HAL_TIM_PWM_Init>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80017e4:	f7ff fe3c 	bl	8001460 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017e8:	2300      	movs	r3, #0
 80017ea:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ec:	2300      	movs	r3, #0
 80017ee:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017f4:	4619      	mov	r1, r3
 80017f6:	482f      	ldr	r0, [pc, #188]	; (80018b4 <MX_TIM1_Init+0x138>)
 80017f8:	f002 fe7e 	bl	80044f8 <HAL_TIMEx_MasterConfigSynchronization>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001802:	f7ff fe2d 	bl	8001460 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001806:	2360      	movs	r3, #96	; 0x60
 8001808:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800180a:	2300      	movs	r3, #0
 800180c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800180e:	2300      	movs	r3, #0
 8001810:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001812:	2300      	movs	r3, #0
 8001814:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001816:	2300      	movs	r3, #0
 8001818:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800181a:	2300      	movs	r3, #0
 800181c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800181e:	2300      	movs	r3, #0
 8001820:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001822:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001826:	2200      	movs	r2, #0
 8001828:	4619      	mov	r1, r3
 800182a:	4822      	ldr	r0, [pc, #136]	; (80018b4 <MX_TIM1_Init+0x138>)
 800182c:	f002 fb64 	bl	8003ef8 <HAL_TIM_PWM_ConfigChannel>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001836:	f7ff fe13 	bl	8001460 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800183a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800183e:	2208      	movs	r2, #8
 8001840:	4619      	mov	r1, r3
 8001842:	481c      	ldr	r0, [pc, #112]	; (80018b4 <MX_TIM1_Init+0x138>)
 8001844:	f002 fb58 	bl	8003ef8 <HAL_TIM_PWM_ConfigChannel>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800184e:	f7ff fe07 	bl	8001460 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001856:	220c      	movs	r2, #12
 8001858:	4619      	mov	r1, r3
 800185a:	4816      	ldr	r0, [pc, #88]	; (80018b4 <MX_TIM1_Init+0x138>)
 800185c:	f002 fb4c 	bl	8003ef8 <HAL_TIM_PWM_ConfigChannel>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8001866:	f7ff fdfb 	bl	8001460 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 800186a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800186e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8001870:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001874:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001876:	2300      	movs	r3, #0
 8001878:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800187a:	2300      	movs	r3, #0
 800187c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 800187e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001882:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001884:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001888:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 800188a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800188e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001890:	1d3b      	adds	r3, r7, #4
 8001892:	4619      	mov	r1, r3
 8001894:	4807      	ldr	r0, [pc, #28]	; (80018b4 <MX_TIM1_Init+0x138>)
 8001896:	f002 fe9d 	bl	80045d4 <HAL_TIMEx_ConfigBreakDeadTime>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80018a0:	f7ff fdde 	bl	8001460 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80018a4:	4803      	ldr	r0, [pc, #12]	; (80018b4 <MX_TIM1_Init+0x138>)
 80018a6:	f000 f82b 	bl	8001900 <HAL_TIM_MspPostInit>

}
 80018aa:	bf00      	nop
 80018ac:	3748      	adds	r7, #72	; 0x48
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	200002bc 	.word	0x200002bc
 80018b8:	40010000 	.word	0x40010000

080018bc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a0b      	ldr	r2, [pc, #44]	; (80018f8 <HAL_TIM_PWM_MspInit+0x3c>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d10d      	bne.n	80018ea <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	4b0a      	ldr	r3, [pc, #40]	; (80018fc <HAL_TIM_PWM_MspInit+0x40>)
 80018d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d6:	4a09      	ldr	r2, [pc, #36]	; (80018fc <HAL_TIM_PWM_MspInit+0x40>)
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	6453      	str	r3, [r2, #68]	; 0x44
 80018de:	4b07      	ldr	r3, [pc, #28]	; (80018fc <HAL_TIM_PWM_MspInit+0x40>)
 80018e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80018ea:	bf00      	nop
 80018ec:	3714      	adds	r7, #20
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	40010000 	.word	0x40010000
 80018fc:	40023800 	.word	0x40023800

08001900 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b08a      	sub	sp, #40	; 0x28
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001908:	f107 0314 	add.w	r3, r7, #20
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	605a      	str	r2, [r3, #4]
 8001912:	609a      	str	r2, [r3, #8]
 8001914:	60da      	str	r2, [r3, #12]
 8001916:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a22      	ldr	r2, [pc, #136]	; (80019a8 <HAL_TIM_MspPostInit+0xa8>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d13d      	bne.n	800199e <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	613b      	str	r3, [r7, #16]
 8001926:	4b21      	ldr	r3, [pc, #132]	; (80019ac <HAL_TIM_MspPostInit+0xac>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	4a20      	ldr	r2, [pc, #128]	; (80019ac <HAL_TIM_MspPostInit+0xac>)
 800192c:	f043 0310 	orr.w	r3, r3, #16
 8001930:	6313      	str	r3, [r2, #48]	; 0x30
 8001932:	4b1e      	ldr	r3, [pc, #120]	; (80019ac <HAL_TIM_MspPostInit+0xac>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	f003 0310 	and.w	r3, r3, #16
 800193a:	613b      	str	r3, [r7, #16]
 800193c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	60fb      	str	r3, [r7, #12]
 8001942:	4b1a      	ldr	r3, [pc, #104]	; (80019ac <HAL_TIM_MspPostInit+0xac>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	4a19      	ldr	r2, [pc, #100]	; (80019ac <HAL_TIM_MspPostInit+0xac>)
 8001948:	f043 0301 	orr.w	r3, r3, #1
 800194c:	6313      	str	r3, [r2, #48]	; 0x30
 800194e:	4b17      	ldr	r3, [pc, #92]	; (80019ac <HAL_TIM_MspPostInit+0xac>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800195a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800195e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001960:	2302      	movs	r3, #2
 8001962:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001968:	2300      	movs	r3, #0
 800196a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800196c:	2301      	movs	r3, #1
 800196e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001970:	f107 0314 	add.w	r3, r7, #20
 8001974:	4619      	mov	r1, r3
 8001976:	480e      	ldr	r0, [pc, #56]	; (80019b0 <HAL_TIM_MspPostInit+0xb0>)
 8001978:	f001 fbc8 	bl	800310c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 800197c:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001980:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001982:	2302      	movs	r3, #2
 8001984:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001986:	2300      	movs	r3, #0
 8001988:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198a:	2300      	movs	r3, #0
 800198c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800198e:	2301      	movs	r3, #1
 8001990:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001992:	f107 0314 	add.w	r3, r7, #20
 8001996:	4619      	mov	r1, r3
 8001998:	4806      	ldr	r0, [pc, #24]	; (80019b4 <HAL_TIM_MspPostInit+0xb4>)
 800199a:	f001 fbb7 	bl	800310c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800199e:	bf00      	nop
 80019a0:	3728      	adds	r7, #40	; 0x28
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40010000 	.word	0x40010000
 80019ac:	40023800 	.word	0x40023800
 80019b0:	40021000 	.word	0x40021000
 80019b4:	40020000 	.word	0x40020000

080019b8 <MX_USART6_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80019bc:	4b11      	ldr	r3, [pc, #68]	; (8001a04 <MX_USART6_UART_Init+0x4c>)
 80019be:	4a12      	ldr	r2, [pc, #72]	; (8001a08 <MX_USART6_UART_Init+0x50>)
 80019c0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80019c2:	4b10      	ldr	r3, [pc, #64]	; (8001a04 <MX_USART6_UART_Init+0x4c>)
 80019c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019c8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80019ca:	4b0e      	ldr	r3, [pc, #56]	; (8001a04 <MX_USART6_UART_Init+0x4c>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80019d0:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <MX_USART6_UART_Init+0x4c>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80019d6:	4b0b      	ldr	r3, [pc, #44]	; (8001a04 <MX_USART6_UART_Init+0x4c>)
 80019d8:	2200      	movs	r2, #0
 80019da:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80019dc:	4b09      	ldr	r3, [pc, #36]	; (8001a04 <MX_USART6_UART_Init+0x4c>)
 80019de:	220c      	movs	r2, #12
 80019e0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019e2:	4b08      	ldr	r3, [pc, #32]	; (8001a04 <MX_USART6_UART_Init+0x4c>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80019e8:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <MX_USART6_UART_Init+0x4c>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80019ee:	4805      	ldr	r0, [pc, #20]	; (8001a04 <MX_USART6_UART_Init+0x4c>)
 80019f0:	f002 fe42 	bl	8004678 <HAL_UART_Init>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80019fa:	f7ff fd31 	bl	8001460 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	20000304 	.word	0x20000304
 8001a08:	40011400 	.word	0x40011400

08001a0c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b08a      	sub	sp, #40	; 0x28
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a14:	f107 0314 	add.w	r3, r7, #20
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	609a      	str	r2, [r3, #8]
 8001a20:	60da      	str	r2, [r3, #12]
 8001a22:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a4b      	ldr	r2, [pc, #300]	; (8001b58 <HAL_UART_MspInit+0x14c>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	f040 8090 	bne.w	8001b50 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001a30:	2300      	movs	r3, #0
 8001a32:	613b      	str	r3, [r7, #16]
 8001a34:	4b49      	ldr	r3, [pc, #292]	; (8001b5c <HAL_UART_MspInit+0x150>)
 8001a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a38:	4a48      	ldr	r2, [pc, #288]	; (8001b5c <HAL_UART_MspInit+0x150>)
 8001a3a:	f043 0320 	orr.w	r3, r3, #32
 8001a3e:	6453      	str	r3, [r2, #68]	; 0x44
 8001a40:	4b46      	ldr	r3, [pc, #280]	; (8001b5c <HAL_UART_MspInit+0x150>)
 8001a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a44:	f003 0320 	and.w	r3, r3, #32
 8001a48:	613b      	str	r3, [r7, #16]
 8001a4a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	4b42      	ldr	r3, [pc, #264]	; (8001b5c <HAL_UART_MspInit+0x150>)
 8001a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a54:	4a41      	ldr	r2, [pc, #260]	; (8001b5c <HAL_UART_MspInit+0x150>)
 8001a56:	f043 0304 	orr.w	r3, r3, #4
 8001a5a:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5c:	4b3f      	ldr	r3, [pc, #252]	; (8001b5c <HAL_UART_MspInit+0x150>)
 8001a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a60:	f003 0304 	and.w	r3, r3, #4
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a68:	23c0      	movs	r3, #192	; 0xc0
 8001a6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a70:	2300      	movs	r3, #0
 8001a72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a74:	2303      	movs	r3, #3
 8001a76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001a78:	2308      	movs	r3, #8
 8001a7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a7c:	f107 0314 	add.w	r3, r7, #20
 8001a80:	4619      	mov	r1, r3
 8001a82:	4837      	ldr	r0, [pc, #220]	; (8001b60 <HAL_UART_MspInit+0x154>)
 8001a84:	f001 fb42 	bl	800310c <HAL_GPIO_Init>

    /* USART6 DMA Init */
    /* USART6_RX Init */
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8001a88:	4b36      	ldr	r3, [pc, #216]	; (8001b64 <HAL_UART_MspInit+0x158>)
 8001a8a:	4a37      	ldr	r2, [pc, #220]	; (8001b68 <HAL_UART_MspInit+0x15c>)
 8001a8c:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8001a8e:	4b35      	ldr	r3, [pc, #212]	; (8001b64 <HAL_UART_MspInit+0x158>)
 8001a90:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001a94:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a96:	4b33      	ldr	r3, [pc, #204]	; (8001b64 <HAL_UART_MspInit+0x158>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a9c:	4b31      	ldr	r3, [pc, #196]	; (8001b64 <HAL_UART_MspInit+0x158>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001aa2:	4b30      	ldr	r3, [pc, #192]	; (8001b64 <HAL_UART_MspInit+0x158>)
 8001aa4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001aa8:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001aaa:	4b2e      	ldr	r3, [pc, #184]	; (8001b64 <HAL_UART_MspInit+0x158>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ab0:	4b2c      	ldr	r3, [pc, #176]	; (8001b64 <HAL_UART_MspInit+0x158>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8001ab6:	4b2b      	ldr	r3, [pc, #172]	; (8001b64 <HAL_UART_MspInit+0x158>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001abc:	4b29      	ldr	r3, [pc, #164]	; (8001b64 <HAL_UART_MspInit+0x158>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ac2:	4b28      	ldr	r3, [pc, #160]	; (8001b64 <HAL_UART_MspInit+0x158>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8001ac8:	4826      	ldr	r0, [pc, #152]	; (8001b64 <HAL_UART_MspInit+0x158>)
 8001aca:	f000 ff1d 	bl	8002908 <HAL_DMA_Init>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001ad4:	f7ff fcc4 	bl	8001460 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	4a22      	ldr	r2, [pc, #136]	; (8001b64 <HAL_UART_MspInit+0x158>)
 8001adc:	63da      	str	r2, [r3, #60]	; 0x3c
 8001ade:	4a21      	ldr	r2, [pc, #132]	; (8001b64 <HAL_UART_MspInit+0x158>)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6_TX Init */
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8001ae4:	4b21      	ldr	r3, [pc, #132]	; (8001b6c <HAL_UART_MspInit+0x160>)
 8001ae6:	4a22      	ldr	r2, [pc, #136]	; (8001b70 <HAL_UART_MspInit+0x164>)
 8001ae8:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8001aea:	4b20      	ldr	r3, [pc, #128]	; (8001b6c <HAL_UART_MspInit+0x160>)
 8001aec:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001af0:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001af2:	4b1e      	ldr	r3, [pc, #120]	; (8001b6c <HAL_UART_MspInit+0x160>)
 8001af4:	2240      	movs	r2, #64	; 0x40
 8001af6:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001af8:	4b1c      	ldr	r3, [pc, #112]	; (8001b6c <HAL_UART_MspInit+0x160>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001afe:	4b1b      	ldr	r3, [pc, #108]	; (8001b6c <HAL_UART_MspInit+0x160>)
 8001b00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b04:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b06:	4b19      	ldr	r3, [pc, #100]	; (8001b6c <HAL_UART_MspInit+0x160>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b0c:	4b17      	ldr	r3, [pc, #92]	; (8001b6c <HAL_UART_MspInit+0x160>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8001b12:	4b16      	ldr	r3, [pc, #88]	; (8001b6c <HAL_UART_MspInit+0x160>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b18:	4b14      	ldr	r3, [pc, #80]	; (8001b6c <HAL_UART_MspInit+0x160>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b1e:	4b13      	ldr	r3, [pc, #76]	; (8001b6c <HAL_UART_MspInit+0x160>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8001b24:	4811      	ldr	r0, [pc, #68]	; (8001b6c <HAL_UART_MspInit+0x160>)
 8001b26:	f000 feef 	bl	8002908 <HAL_DMA_Init>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8001b30:	f7ff fc96 	bl	8001460 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	4a0d      	ldr	r2, [pc, #52]	; (8001b6c <HAL_UART_MspInit+0x160>)
 8001b38:	639a      	str	r2, [r3, #56]	; 0x38
 8001b3a:	4a0c      	ldr	r2, [pc, #48]	; (8001b6c <HAL_UART_MspInit+0x160>)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8001b40:	2200      	movs	r2, #0
 8001b42:	2105      	movs	r1, #5
 8001b44:	2047      	movs	r0, #71	; 0x47
 8001b46:	f000 fea8 	bl	800289a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001b4a:	2047      	movs	r0, #71	; 0x47
 8001b4c:	f000 fec1 	bl	80028d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001b50:	bf00      	nop
 8001b52:	3728      	adds	r7, #40	; 0x28
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40011400 	.word	0x40011400
 8001b5c:	40023800 	.word	0x40023800
 8001b60:	40020800 	.word	0x40020800
 8001b64:	2000034c 	.word	0x2000034c
 8001b68:	40026428 	.word	0x40026428
 8001b6c:	200003ac 	.word	0x200003ac
 8001b70:	400264a0 	.word	0x400264a0

08001b74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b78:	f7ff fdee 	bl	8001758 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b7c:	480c      	ldr	r0, [pc, #48]	; (8001bb0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b7e:	490d      	ldr	r1, [pc, #52]	; (8001bb4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b80:	4a0d      	ldr	r2, [pc, #52]	; (8001bb8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b84:	e002      	b.n	8001b8c <LoopCopyDataInit>

08001b86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b8a:	3304      	adds	r3, #4

08001b8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b90:	d3f9      	bcc.n	8001b86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b92:	4a0a      	ldr	r2, [pc, #40]	; (8001bbc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b94:	4c0a      	ldr	r4, [pc, #40]	; (8001bc0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b98:	e001      	b.n	8001b9e <LoopFillZerobss>

08001b9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b9c:	3204      	adds	r2, #4

08001b9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ba0:	d3fb      	bcc.n	8001b9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ba2:	f007 f96d 	bl	8008e80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ba6:	f7ff fbbb 	bl	8001320 <main>
  bx  lr    
 8001baa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001bac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bb4:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001bb8:	0800d16c 	.word	0x0800d16c
  ldr r2, =_sbss
 8001bbc:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001bc0:	20004e04 	.word	0x20004e04

08001bc4 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bc4:	e7fe      	b.n	8001bc4 <DMA1_Stream0_IRQHandler>
	...

08001bc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bcc:	4b0e      	ldr	r3, [pc, #56]	; (8001c08 <HAL_Init+0x40>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a0d      	ldr	r2, [pc, #52]	; (8001c08 <HAL_Init+0x40>)
 8001bd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bd8:	4b0b      	ldr	r3, [pc, #44]	; (8001c08 <HAL_Init+0x40>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a0a      	ldr	r2, [pc, #40]	; (8001c08 <HAL_Init+0x40>)
 8001bde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001be2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001be4:	4b08      	ldr	r3, [pc, #32]	; (8001c08 <HAL_Init+0x40>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a07      	ldr	r2, [pc, #28]	; (8001c08 <HAL_Init+0x40>)
 8001bea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bf0:	2003      	movs	r0, #3
 8001bf2:	f000 fe47 	bl	8002884 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bf6:	200f      	movs	r0, #15
 8001bf8:	f000 f808 	bl	8001c0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bfc:	f7ff fc36 	bl	800146c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	40023c00 	.word	0x40023c00

08001c0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c14:	4b12      	ldr	r3, [pc, #72]	; (8001c60 <HAL_InitTick+0x54>)
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	4b12      	ldr	r3, [pc, #72]	; (8001c64 <HAL_InitTick+0x58>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c22:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f000 fe5f 	bl	80028ee <HAL_SYSTICK_Config>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e00e      	b.n	8001c58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2b0f      	cmp	r3, #15
 8001c3e:	d80a      	bhi.n	8001c56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c40:	2200      	movs	r2, #0
 8001c42:	6879      	ldr	r1, [r7, #4]
 8001c44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c48:	f000 fe27 	bl	800289a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c4c:	4a06      	ldr	r2, [pc, #24]	; (8001c68 <HAL_InitTick+0x5c>)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c52:	2300      	movs	r3, #0
 8001c54:	e000      	b.n	8001c58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	20000000 	.word	0x20000000
 8001c64:	20000008 	.word	0x20000008
 8001c68:	20000004 	.word	0x20000004

08001c6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c70:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <HAL_IncTick+0x20>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	461a      	mov	r2, r3
 8001c76:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <HAL_IncTick+0x24>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	4a04      	ldr	r2, [pc, #16]	; (8001c90 <HAL_IncTick+0x24>)
 8001c7e:	6013      	str	r3, [r2, #0]
}
 8001c80:	bf00      	nop
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	20000008 	.word	0x20000008
 8001c90:	2000040c 	.word	0x2000040c

08001c94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  return uwTick;
 8001c98:	4b03      	ldr	r3, [pc, #12]	; (8001ca8 <HAL_GetTick+0x14>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	2000040c 	.word	0x2000040c

08001cac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d101      	bne.n	8001cc2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e033      	b.n	8001d2a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d109      	bne.n	8001cde <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f7ff f998 	bl	8001000 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce2:	f003 0310 	and.w	r3, r3, #16
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d118      	bne.n	8001d1c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001cf2:	f023 0302 	bic.w	r3, r3, #2
 8001cf6:	f043 0202 	orr.w	r2, r3, #2
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 fb68 	bl	80023d4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	f023 0303 	bic.w	r3, r3, #3
 8001d12:	f043 0201 	orr.w	r2, r3, #1
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	641a      	str	r2, [r3, #64]	; 0x40
 8001d1a:	e001      	b.n	8001d20 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3710      	adds	r7, #16
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b086      	sub	sp, #24
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	617b      	str	r3, [r7, #20]
 8001d3e:	2300      	movs	r3, #0
 8001d40:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	f003 0320 	and.w	r3, r3, #32
 8001d60:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d049      	beq.n	8001dfc <HAL_ADC_IRQHandler+0xca>
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d046      	beq.n	8001dfc <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	f003 0310 	and.w	r3, r3, #16
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d105      	bne.n	8001d86 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d12b      	bne.n	8001dec <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d127      	bne.n	8001dec <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d006      	beq.n	8001db8 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d119      	bne.n	8001dec <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	685a      	ldr	r2, [r3, #4]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f022 0220 	bic.w	r2, r2, #32
 8001dc6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dcc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d105      	bne.n	8001dec <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de4:	f043 0201 	orr.w	r2, r3, #1
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f7ff fbbf 	bl	8001570 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f06f 0212 	mvn.w	r2, #18
 8001dfa:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f003 0304 	and.w	r3, r3, #4
 8001e02:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e0a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d057      	beq.n	8001ec2 <HAL_ADC_IRQHandler+0x190>
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d054      	beq.n	8001ec2 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1c:	f003 0310 	and.w	r3, r3, #16
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d105      	bne.n	8001e30 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e28:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d139      	bne.n	8001eb2 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e44:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d006      	beq.n	8001e5a <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d12b      	bne.n	8001eb2 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d124      	bne.n	8001eb2 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d11d      	bne.n	8001eb2 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d119      	bne.n	8001eb2 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	685a      	ldr	r2, [r3, #4]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e8c:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d105      	bne.n	8001eb2 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eaa:	f043 0201 	orr.w	r2, r3, #1
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 fc0c 	bl	80026d0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f06f 020c 	mvn.w	r2, #12
 8001ec0:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ed0:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d017      	beq.n	8001f08 <HAL_ADC_IRQHandler+0x1d6>
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d014      	beq.n	8001f08 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0301 	and.w	r3, r3, #1
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d10d      	bne.n	8001f08 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f000 f925 	bl	8002148 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f06f 0201 	mvn.w	r2, #1
 8001f06:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f003 0320 	and.w	r3, r3, #32
 8001f0e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f16:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d015      	beq.n	8001f4a <HAL_ADC_IRQHandler+0x218>
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d012      	beq.n	8001f4a <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f28:	f043 0202 	orr.w	r2, r3, #2
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f06f 0220 	mvn.w	r2, #32
 8001f38:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f000 f90e 	bl	800215c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f06f 0220 	mvn.w	r2, #32
 8001f48:	601a      	str	r2, [r3, #0]
  }
}
 8001f4a:	bf00      	nop
 8001f4c:	3718      	adds	r7, #24
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
	...

08001f54 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001f60:	2300      	movs	r3, #0
 8001f62:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d101      	bne.n	8001f72 <HAL_ADC_Start_DMA+0x1e>
 8001f6e:	2302      	movs	r3, #2
 8001f70:	e0ce      	b.n	8002110 <HAL_ADC_Start_DMA+0x1bc>
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2201      	movs	r2, #1
 8001f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d018      	beq.n	8001fba <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	689a      	ldr	r2, [r3, #8]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f042 0201 	orr.w	r2, r2, #1
 8001f96:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f98:	4b5f      	ldr	r3, [pc, #380]	; (8002118 <HAL_ADC_Start_DMA+0x1c4>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a5f      	ldr	r2, [pc, #380]	; (800211c <HAL_ADC_Start_DMA+0x1c8>)
 8001f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa2:	0c9a      	lsrs	r2, r3, #18
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	4413      	add	r3, r2
 8001faa:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001fac:	e002      	b.n	8001fb4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	3b01      	subs	r3, #1
 8001fb2:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1f9      	bne.n	8001fae <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fc8:	d107      	bne.n	8001fda <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	689a      	ldr	r2, [r3, #8]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fd8:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f003 0301 	and.w	r3, r3, #1
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	f040 8086 	bne.w	80020f6 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fee:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001ff2:	f023 0301 	bic.w	r3, r3, #1
 8001ff6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002008:	2b00      	cmp	r3, #0
 800200a:	d007      	beq.n	800201c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002010:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002014:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002020:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002024:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002028:	d106      	bne.n	8002038 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202e:	f023 0206 	bic.w	r2, r3, #6
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	645a      	str	r2, [r3, #68]	; 0x44
 8002036:	e002      	b.n	800203e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2200      	movs	r2, #0
 800203c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002046:	4b36      	ldr	r3, [pc, #216]	; (8002120 <HAL_ADC_Start_DMA+0x1cc>)
 8002048:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800204e:	4a35      	ldr	r2, [pc, #212]	; (8002124 <HAL_ADC_Start_DMA+0x1d0>)
 8002050:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002056:	4a34      	ldr	r2, [pc, #208]	; (8002128 <HAL_ADC_Start_DMA+0x1d4>)
 8002058:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800205e:	4a33      	ldr	r2, [pc, #204]	; (800212c <HAL_ADC_Start_DMA+0x1d8>)
 8002060:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800206a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	685a      	ldr	r2, [r3, #4]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800207a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	689a      	ldr	r2, [r3, #8]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800208a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	334c      	adds	r3, #76	; 0x4c
 8002096:	4619      	mov	r1, r3
 8002098:	68ba      	ldr	r2, [r7, #8]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f000 fce2 	bl	8002a64 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f003 031f 	and.w	r3, r3, #31
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d10f      	bne.n	80020cc <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d129      	bne.n	800210e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	689a      	ldr	r2, [r3, #8]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80020c8:	609a      	str	r2, [r3, #8]
 80020ca:	e020      	b.n	800210e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a17      	ldr	r2, [pc, #92]	; (8002130 <HAL_ADC_Start_DMA+0x1dc>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d11b      	bne.n	800210e <HAL_ADC_Start_DMA+0x1ba>
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d114      	bne.n	800210e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	689a      	ldr	r2, [r3, #8]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80020f2:	609a      	str	r2, [r3, #8]
 80020f4:	e00b      	b.n	800210e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fa:	f043 0210 	orr.w	r2, r3, #16
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002106:	f043 0201 	orr.w	r2, r3, #1
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 800210e:	2300      	movs	r3, #0
}
 8002110:	4618      	mov	r0, r3
 8002112:	3718      	adds	r7, #24
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	20000000 	.word	0x20000000
 800211c:	431bde83 	.word	0x431bde83
 8002120:	40012300 	.word	0x40012300
 8002124:	080025cd 	.word	0x080025cd
 8002128:	08002687 	.word	0x08002687
 800212c:	080026a3 	.word	0x080026a3
 8002130:	40012000 	.word	0x40012000

08002134 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002164:	bf00      	nop
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800217a:	2300      	movs	r3, #0
 800217c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002184:	2b01      	cmp	r3, #1
 8002186:	d101      	bne.n	800218c <HAL_ADC_ConfigChannel+0x1c>
 8002188:	2302      	movs	r3, #2
 800218a:	e113      	b.n	80023b4 <HAL_ADC_ConfigChannel+0x244>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2b09      	cmp	r3, #9
 800219a:	d925      	bls.n	80021e8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	68d9      	ldr	r1, [r3, #12]
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	461a      	mov	r2, r3
 80021aa:	4613      	mov	r3, r2
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	4413      	add	r3, r2
 80021b0:	3b1e      	subs	r3, #30
 80021b2:	2207      	movs	r2, #7
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	43da      	mvns	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	400a      	ands	r2, r1
 80021c0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	68d9      	ldr	r1, [r3, #12]
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	4618      	mov	r0, r3
 80021d4:	4603      	mov	r3, r0
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	4403      	add	r3, r0
 80021da:	3b1e      	subs	r3, #30
 80021dc:	409a      	lsls	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	430a      	orrs	r2, r1
 80021e4:	60da      	str	r2, [r3, #12]
 80021e6:	e022      	b.n	800222e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	6919      	ldr	r1, [r3, #16]
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	461a      	mov	r2, r3
 80021f6:	4613      	mov	r3, r2
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	4413      	add	r3, r2
 80021fc:	2207      	movs	r2, #7
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	43da      	mvns	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	400a      	ands	r2, r1
 800220a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	6919      	ldr	r1, [r3, #16]
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	689a      	ldr	r2, [r3, #8]
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	b29b      	uxth	r3, r3
 800221c:	4618      	mov	r0, r3
 800221e:	4603      	mov	r3, r0
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	4403      	add	r3, r0
 8002224:	409a      	lsls	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	430a      	orrs	r2, r1
 800222c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	2b06      	cmp	r3, #6
 8002234:	d824      	bhi.n	8002280 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685a      	ldr	r2, [r3, #4]
 8002240:	4613      	mov	r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	4413      	add	r3, r2
 8002246:	3b05      	subs	r3, #5
 8002248:	221f      	movs	r2, #31
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	43da      	mvns	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	400a      	ands	r2, r1
 8002256:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	b29b      	uxth	r3, r3
 8002264:	4618      	mov	r0, r3
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685a      	ldr	r2, [r3, #4]
 800226a:	4613      	mov	r3, r2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	4413      	add	r3, r2
 8002270:	3b05      	subs	r3, #5
 8002272:	fa00 f203 	lsl.w	r2, r0, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	430a      	orrs	r2, r1
 800227c:	635a      	str	r2, [r3, #52]	; 0x34
 800227e:	e04c      	b.n	800231a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	2b0c      	cmp	r3, #12
 8002286:	d824      	bhi.n	80022d2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685a      	ldr	r2, [r3, #4]
 8002292:	4613      	mov	r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	4413      	add	r3, r2
 8002298:	3b23      	subs	r3, #35	; 0x23
 800229a:	221f      	movs	r2, #31
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	43da      	mvns	r2, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	400a      	ands	r2, r1
 80022a8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	4618      	mov	r0, r3
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685a      	ldr	r2, [r3, #4]
 80022bc:	4613      	mov	r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	4413      	add	r3, r2
 80022c2:	3b23      	subs	r3, #35	; 0x23
 80022c4:	fa00 f203 	lsl.w	r2, r0, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	430a      	orrs	r2, r1
 80022ce:	631a      	str	r2, [r3, #48]	; 0x30
 80022d0:	e023      	b.n	800231a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685a      	ldr	r2, [r3, #4]
 80022dc:	4613      	mov	r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	4413      	add	r3, r2
 80022e2:	3b41      	subs	r3, #65	; 0x41
 80022e4:	221f      	movs	r2, #31
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	43da      	mvns	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	400a      	ands	r2, r1
 80022f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	b29b      	uxth	r3, r3
 8002300:	4618      	mov	r0, r3
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685a      	ldr	r2, [r3, #4]
 8002306:	4613      	mov	r3, r2
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	4413      	add	r3, r2
 800230c:	3b41      	subs	r3, #65	; 0x41
 800230e:	fa00 f203 	lsl.w	r2, r0, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	430a      	orrs	r2, r1
 8002318:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800231a:	4b29      	ldr	r3, [pc, #164]	; (80023c0 <HAL_ADC_ConfigChannel+0x250>)
 800231c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a28      	ldr	r2, [pc, #160]	; (80023c4 <HAL_ADC_ConfigChannel+0x254>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d10f      	bne.n	8002348 <HAL_ADC_ConfigChannel+0x1d8>
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2b12      	cmp	r3, #18
 800232e:	d10b      	bne.n	8002348 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a1d      	ldr	r2, [pc, #116]	; (80023c4 <HAL_ADC_ConfigChannel+0x254>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d12b      	bne.n	80023aa <HAL_ADC_ConfigChannel+0x23a>
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a1c      	ldr	r2, [pc, #112]	; (80023c8 <HAL_ADC_ConfigChannel+0x258>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d003      	beq.n	8002364 <HAL_ADC_ConfigChannel+0x1f4>
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2b11      	cmp	r3, #17
 8002362:	d122      	bne.n	80023aa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a11      	ldr	r2, [pc, #68]	; (80023c8 <HAL_ADC_ConfigChannel+0x258>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d111      	bne.n	80023aa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002386:	4b11      	ldr	r3, [pc, #68]	; (80023cc <HAL_ADC_ConfigChannel+0x25c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a11      	ldr	r2, [pc, #68]	; (80023d0 <HAL_ADC_ConfigChannel+0x260>)
 800238c:	fba2 2303 	umull	r2, r3, r2, r3
 8002390:	0c9a      	lsrs	r2, r3, #18
 8002392:	4613      	mov	r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	4413      	add	r3, r2
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800239c:	e002      	b.n	80023a4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	3b01      	subs	r3, #1
 80023a2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1f9      	bne.n	800239e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3714      	adds	r7, #20
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	40012300 	.word	0x40012300
 80023c4:	40012000 	.word	0x40012000
 80023c8:	10000012 	.word	0x10000012
 80023cc:	20000000 	.word	0x20000000
 80023d0:	431bde83 	.word	0x431bde83

080023d4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023dc:	4b79      	ldr	r3, [pc, #484]	; (80025c4 <ADC_Init+0x1f0>)
 80023de:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	685a      	ldr	r2, [r3, #4]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	431a      	orrs	r2, r3
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	685a      	ldr	r2, [r3, #4]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002408:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	6859      	ldr	r1, [r3, #4]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	691b      	ldr	r3, [r3, #16]
 8002414:	021a      	lsls	r2, r3, #8
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	430a      	orrs	r2, r1
 800241c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	685a      	ldr	r2, [r3, #4]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800242c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	6859      	ldr	r1, [r3, #4]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	689a      	ldr	r2, [r3, #8]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	430a      	orrs	r2, r1
 800243e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	689a      	ldr	r2, [r3, #8]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800244e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	6899      	ldr	r1, [r3, #8]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	68da      	ldr	r2, [r3, #12]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	430a      	orrs	r2, r1
 8002460:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002466:	4a58      	ldr	r2, [pc, #352]	; (80025c8 <ADC_Init+0x1f4>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d022      	beq.n	80024b2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	689a      	ldr	r2, [r3, #8]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800247a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	6899      	ldr	r1, [r3, #8]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	430a      	orrs	r2, r1
 800248c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	689a      	ldr	r2, [r3, #8]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800249c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	6899      	ldr	r1, [r3, #8]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	430a      	orrs	r2, r1
 80024ae:	609a      	str	r2, [r3, #8]
 80024b0:	e00f      	b.n	80024d2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	689a      	ldr	r2, [r3, #8]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689a      	ldr	r2, [r3, #8]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80024d0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	689a      	ldr	r2, [r3, #8]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f022 0202 	bic.w	r2, r2, #2
 80024e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	6899      	ldr	r1, [r3, #8]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	7e1b      	ldrb	r3, [r3, #24]
 80024ec:	005a      	lsls	r2, r3, #1
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	430a      	orrs	r2, r1
 80024f4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d01b      	beq.n	8002538 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	685a      	ldr	r2, [r3, #4]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800250e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	685a      	ldr	r2, [r3, #4]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800251e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	6859      	ldr	r1, [r3, #4]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252a:	3b01      	subs	r3, #1
 800252c:	035a      	lsls	r2, r3, #13
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	430a      	orrs	r2, r1
 8002534:	605a      	str	r2, [r3, #4]
 8002536:	e007      	b.n	8002548 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	685a      	ldr	r2, [r3, #4]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002546:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002556:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	69db      	ldr	r3, [r3, #28]
 8002562:	3b01      	subs	r3, #1
 8002564:	051a      	lsls	r2, r3, #20
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	430a      	orrs	r2, r1
 800256c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	689a      	ldr	r2, [r3, #8]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800257c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	6899      	ldr	r1, [r3, #8]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800258a:	025a      	lsls	r2, r3, #9
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	430a      	orrs	r2, r1
 8002592:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	689a      	ldr	r2, [r3, #8]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	6899      	ldr	r1, [r3, #8]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	695b      	ldr	r3, [r3, #20]
 80025ae:	029a      	lsls	r2, r3, #10
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	430a      	orrs	r2, r1
 80025b6:	609a      	str	r2, [r3, #8]
}
 80025b8:	bf00      	nop
 80025ba:	3714      	adds	r7, #20
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr
 80025c4:	40012300 	.word	0x40012300
 80025c8:	0f000001 	.word	0x0f000001

080025cc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d13c      	bne.n	8002660 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d12b      	bne.n	8002658 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002604:	2b00      	cmp	r3, #0
 8002606:	d127      	bne.n	8002658 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002612:	2b00      	cmp	r3, #0
 8002614:	d006      	beq.n	8002624 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002620:	2b00      	cmp	r3, #0
 8002622:	d119      	bne.n	8002658 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	685a      	ldr	r2, [r3, #4]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f022 0220 	bic.w	r2, r2, #32
 8002632:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002638:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002644:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d105      	bne.n	8002658 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002650:	f043 0201 	orr.w	r2, r3, #1
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002658:	68f8      	ldr	r0, [r7, #12]
 800265a:	f7fe ff89 	bl	8001570 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800265e:	e00e      	b.n	800267e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002664:	f003 0310 	and.w	r3, r3, #16
 8002668:	2b00      	cmp	r3, #0
 800266a:	d003      	beq.n	8002674 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800266c:	68f8      	ldr	r0, [r7, #12]
 800266e:	f7ff fd75 	bl	800215c <HAL_ADC_ErrorCallback>
}
 8002672:	e004      	b.n	800267e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	4798      	blx	r3
}
 800267e:	bf00      	nop
 8002680:	3710      	adds	r7, #16
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002686:	b580      	push	{r7, lr}
 8002688:	b084      	sub	sp, #16
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002692:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002694:	68f8      	ldr	r0, [r7, #12]
 8002696:	f7ff fd4d 	bl	8002134 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800269a:	bf00      	nop
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b084      	sub	sp, #16
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ae:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2240      	movs	r2, #64	; 0x40
 80026b4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ba:	f043 0204 	orr.w	r2, r3, #4
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80026c2:	68f8      	ldr	r0, [r7, #12]
 80026c4:	f7ff fd4a 	bl	800215c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80026c8:	bf00      	nop
 80026ca:	3710      	adds	r7, #16
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f003 0307 	and.w	r3, r3, #7
 80026f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026f4:	4b0c      	ldr	r3, [pc, #48]	; (8002728 <__NVIC_SetPriorityGrouping+0x44>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026fa:	68ba      	ldr	r2, [r7, #8]
 80026fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002700:	4013      	ands	r3, r2
 8002702:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800270c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002714:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002716:	4a04      	ldr	r2, [pc, #16]	; (8002728 <__NVIC_SetPriorityGrouping+0x44>)
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	60d3      	str	r3, [r2, #12]
}
 800271c:	bf00      	nop
 800271e:	3714      	adds	r7, #20
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	e000ed00 	.word	0xe000ed00

0800272c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002730:	4b04      	ldr	r3, [pc, #16]	; (8002744 <__NVIC_GetPriorityGrouping+0x18>)
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	0a1b      	lsrs	r3, r3, #8
 8002736:	f003 0307 	and.w	r3, r3, #7
}
 800273a:	4618      	mov	r0, r3
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr
 8002744:	e000ed00 	.word	0xe000ed00

08002748 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	4603      	mov	r3, r0
 8002750:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002756:	2b00      	cmp	r3, #0
 8002758:	db0b      	blt.n	8002772 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800275a:	79fb      	ldrb	r3, [r7, #7]
 800275c:	f003 021f 	and.w	r2, r3, #31
 8002760:	4907      	ldr	r1, [pc, #28]	; (8002780 <__NVIC_EnableIRQ+0x38>)
 8002762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002766:	095b      	lsrs	r3, r3, #5
 8002768:	2001      	movs	r0, #1
 800276a:	fa00 f202 	lsl.w	r2, r0, r2
 800276e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002772:	bf00      	nop
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	e000e100 	.word	0xe000e100

08002784 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	4603      	mov	r3, r0
 800278c:	6039      	str	r1, [r7, #0]
 800278e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002794:	2b00      	cmp	r3, #0
 8002796:	db0a      	blt.n	80027ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	b2da      	uxtb	r2, r3
 800279c:	490c      	ldr	r1, [pc, #48]	; (80027d0 <__NVIC_SetPriority+0x4c>)
 800279e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a2:	0112      	lsls	r2, r2, #4
 80027a4:	b2d2      	uxtb	r2, r2
 80027a6:	440b      	add	r3, r1
 80027a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027ac:	e00a      	b.n	80027c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	b2da      	uxtb	r2, r3
 80027b2:	4908      	ldr	r1, [pc, #32]	; (80027d4 <__NVIC_SetPriority+0x50>)
 80027b4:	79fb      	ldrb	r3, [r7, #7]
 80027b6:	f003 030f 	and.w	r3, r3, #15
 80027ba:	3b04      	subs	r3, #4
 80027bc:	0112      	lsls	r2, r2, #4
 80027be:	b2d2      	uxtb	r2, r2
 80027c0:	440b      	add	r3, r1
 80027c2:	761a      	strb	r2, [r3, #24]
}
 80027c4:	bf00      	nop
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr
 80027d0:	e000e100 	.word	0xe000e100
 80027d4:	e000ed00 	.word	0xe000ed00

080027d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027d8:	b480      	push	{r7}
 80027da:	b089      	sub	sp, #36	; 0x24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f003 0307 	and.w	r3, r3, #7
 80027ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	f1c3 0307 	rsb	r3, r3, #7
 80027f2:	2b04      	cmp	r3, #4
 80027f4:	bf28      	it	cs
 80027f6:	2304      	movcs	r3, #4
 80027f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	3304      	adds	r3, #4
 80027fe:	2b06      	cmp	r3, #6
 8002800:	d902      	bls.n	8002808 <NVIC_EncodePriority+0x30>
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	3b03      	subs	r3, #3
 8002806:	e000      	b.n	800280a <NVIC_EncodePriority+0x32>
 8002808:	2300      	movs	r3, #0
 800280a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800280c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	fa02 f303 	lsl.w	r3, r2, r3
 8002816:	43da      	mvns	r2, r3
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	401a      	ands	r2, r3
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002820:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	fa01 f303 	lsl.w	r3, r1, r3
 800282a:	43d9      	mvns	r1, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002830:	4313      	orrs	r3, r2
         );
}
 8002832:	4618      	mov	r0, r3
 8002834:	3724      	adds	r7, #36	; 0x24
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
	...

08002840 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	3b01      	subs	r3, #1
 800284c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002850:	d301      	bcc.n	8002856 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002852:	2301      	movs	r3, #1
 8002854:	e00f      	b.n	8002876 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002856:	4a0a      	ldr	r2, [pc, #40]	; (8002880 <SysTick_Config+0x40>)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	3b01      	subs	r3, #1
 800285c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800285e:	210f      	movs	r1, #15
 8002860:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002864:	f7ff ff8e 	bl	8002784 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002868:	4b05      	ldr	r3, [pc, #20]	; (8002880 <SysTick_Config+0x40>)
 800286a:	2200      	movs	r2, #0
 800286c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800286e:	4b04      	ldr	r3, [pc, #16]	; (8002880 <SysTick_Config+0x40>)
 8002870:	2207      	movs	r2, #7
 8002872:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	e000e010 	.word	0xe000e010

08002884 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f7ff ff29 	bl	80026e4 <__NVIC_SetPriorityGrouping>
}
 8002892:	bf00      	nop
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800289a:	b580      	push	{r7, lr}
 800289c:	b086      	sub	sp, #24
 800289e:	af00      	add	r7, sp, #0
 80028a0:	4603      	mov	r3, r0
 80028a2:	60b9      	str	r1, [r7, #8]
 80028a4:	607a      	str	r2, [r7, #4]
 80028a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028a8:	2300      	movs	r3, #0
 80028aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028ac:	f7ff ff3e 	bl	800272c <__NVIC_GetPriorityGrouping>
 80028b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	68b9      	ldr	r1, [r7, #8]
 80028b6:	6978      	ldr	r0, [r7, #20]
 80028b8:	f7ff ff8e 	bl	80027d8 <NVIC_EncodePriority>
 80028bc:	4602      	mov	r2, r0
 80028be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028c2:	4611      	mov	r1, r2
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7ff ff5d 	bl	8002784 <__NVIC_SetPriority>
}
 80028ca:	bf00      	nop
 80028cc:	3718      	adds	r7, #24
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b082      	sub	sp, #8
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	4603      	mov	r3, r0
 80028da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff ff31 	bl	8002748 <__NVIC_EnableIRQ>
}
 80028e6:	bf00      	nop
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b082      	sub	sp, #8
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f7ff ffa2 	bl	8002840 <SysTick_Config>
 80028fc:	4603      	mov	r3, r0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3708      	adds	r7, #8
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
	...

08002908 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002910:	2300      	movs	r3, #0
 8002912:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002914:	f7ff f9be 	bl	8001c94 <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d101      	bne.n	8002924 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e099      	b.n	8002a58 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2202      	movs	r2, #2
 8002928:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f022 0201 	bic.w	r2, r2, #1
 8002942:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002944:	e00f      	b.n	8002966 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002946:	f7ff f9a5 	bl	8001c94 <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	2b05      	cmp	r3, #5
 8002952:	d908      	bls.n	8002966 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2220      	movs	r2, #32
 8002958:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2203      	movs	r2, #3
 800295e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e078      	b.n	8002a58 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0301 	and.w	r3, r3, #1
 8002970:	2b00      	cmp	r3, #0
 8002972:	d1e8      	bne.n	8002946 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800297c:	697a      	ldr	r2, [r7, #20]
 800297e:	4b38      	ldr	r3, [pc, #224]	; (8002a60 <HAL_DMA_Init+0x158>)
 8002980:	4013      	ands	r3, r2
 8002982:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685a      	ldr	r2, [r3, #4]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002992:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800299e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029b2:	697a      	ldr	r2, [r7, #20]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029bc:	2b04      	cmp	r3, #4
 80029be:	d107      	bne.n	80029d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c8:	4313      	orrs	r3, r2
 80029ca:	697a      	ldr	r2, [r7, #20]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	697a      	ldr	r2, [r7, #20]
 80029d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	f023 0307 	bic.w	r3, r3, #7
 80029e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ec:	697a      	ldr	r2, [r7, #20]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f6:	2b04      	cmp	r3, #4
 80029f8:	d117      	bne.n	8002a2a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d00e      	beq.n	8002a2a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f000 fb01 	bl	8003014 <DMA_CheckFifoParam>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d008      	beq.n	8002a2a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2240      	movs	r2, #64	; 0x40
 8002a1c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002a26:	2301      	movs	r3, #1
 8002a28:	e016      	b.n	8002a58 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	697a      	ldr	r2, [r7, #20]
 8002a30:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 fab8 	bl	8002fa8 <DMA_CalcBaseAndBitshift>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a40:	223f      	movs	r2, #63	; 0x3f
 8002a42:	409a      	lsls	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2201      	movs	r2, #1
 8002a52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002a56:	2300      	movs	r3, #0
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3718      	adds	r7, #24
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	f010803f 	.word	0xf010803f

08002a64 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
 8002a70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a72:	2300      	movs	r3, #0
 8002a74:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a7a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d101      	bne.n	8002a8a <HAL_DMA_Start_IT+0x26>
 8002a86:	2302      	movs	r3, #2
 8002a88:	e040      	b.n	8002b0c <HAL_DMA_Start_IT+0xa8>
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d12f      	bne.n	8002afe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2202      	movs	r2, #2
 8002aa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	68b9      	ldr	r1, [r7, #8]
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	f000 fa4a 	bl	8002f4c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002abc:	223f      	movs	r2, #63	; 0x3f
 8002abe:	409a      	lsls	r2, r3
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f042 0216 	orr.w	r2, r2, #22
 8002ad2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d007      	beq.n	8002aec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f042 0208 	orr.w	r2, r2, #8
 8002aea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f042 0201 	orr.w	r2, r2, #1
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	e005      	b.n	8002b0a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002b06:	2302      	movs	r3, #2
 8002b08:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002b0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3718      	adds	r7, #24
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b20:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002b22:	f7ff f8b7 	bl	8001c94 <HAL_GetTick>
 8002b26:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d008      	beq.n	8002b46 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2280      	movs	r2, #128	; 0x80
 8002b38:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e052      	b.n	8002bec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f022 0216 	bic.w	r2, r2, #22
 8002b54:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	695a      	ldr	r2, [r3, #20]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b64:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d103      	bne.n	8002b76 <HAL_DMA_Abort+0x62>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d007      	beq.n	8002b86 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f022 0208 	bic.w	r2, r2, #8
 8002b84:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 0201 	bic.w	r2, r2, #1
 8002b94:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b96:	e013      	b.n	8002bc0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b98:	f7ff f87c 	bl	8001c94 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b05      	cmp	r3, #5
 8002ba4:	d90c      	bls.n	8002bc0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2220      	movs	r2, #32
 8002baa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2203      	movs	r2, #3
 8002bb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e015      	b.n	8002bec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1e4      	bne.n	8002b98 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd2:	223f      	movs	r2, #63	; 0x3f
 8002bd4:	409a      	lsls	r2, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3710      	adds	r7, #16
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d004      	beq.n	8002c12 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2280      	movs	r2, #128	; 0x80
 8002c0c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e00c      	b.n	8002c2c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2205      	movs	r2, #5
 8002c16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f022 0201 	bic.w	r2, r2, #1
 8002c28:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c2a:	2300      	movs	r3, #0
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002c40:	2300      	movs	r3, #0
 8002c42:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c44:	4b8e      	ldr	r3, [pc, #568]	; (8002e80 <HAL_DMA_IRQHandler+0x248>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a8e      	ldr	r2, [pc, #568]	; (8002e84 <HAL_DMA_IRQHandler+0x24c>)
 8002c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c4e:	0a9b      	lsrs	r3, r3, #10
 8002c50:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c56:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c62:	2208      	movs	r2, #8
 8002c64:	409a      	lsls	r2, r3
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	4013      	ands	r3, r2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d01a      	beq.n	8002ca4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0304 	and.w	r3, r3, #4
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d013      	beq.n	8002ca4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f022 0204 	bic.w	r2, r2, #4
 8002c8a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c90:	2208      	movs	r2, #8
 8002c92:	409a      	lsls	r2, r3
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c9c:	f043 0201 	orr.w	r2, r3, #1
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca8:	2201      	movs	r2, #1
 8002caa:	409a      	lsls	r2, r3
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	4013      	ands	r3, r2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d012      	beq.n	8002cda <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00b      	beq.n	8002cda <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	409a      	lsls	r2, r3
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cd2:	f043 0202 	orr.w	r2, r3, #2
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cde:	2204      	movs	r2, #4
 8002ce0:	409a      	lsls	r2, r3
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d012      	beq.n	8002d10 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00b      	beq.n	8002d10 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cfc:	2204      	movs	r2, #4
 8002cfe:	409a      	lsls	r2, r3
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d08:	f043 0204 	orr.w	r2, r3, #4
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d14:	2210      	movs	r2, #16
 8002d16:	409a      	lsls	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d043      	beq.n	8002da8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0308 	and.w	r3, r3, #8
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d03c      	beq.n	8002da8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d32:	2210      	movs	r2, #16
 8002d34:	409a      	lsls	r2, r3
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d018      	beq.n	8002d7a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d108      	bne.n	8002d68 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d024      	beq.n	8002da8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	4798      	blx	r3
 8002d66:	e01f      	b.n	8002da8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d01b      	beq.n	8002da8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	4798      	blx	r3
 8002d78:	e016      	b.n	8002da8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d107      	bne.n	8002d98 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f022 0208 	bic.w	r2, r2, #8
 8002d96:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d003      	beq.n	8002da8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dac:	2220      	movs	r2, #32
 8002dae:	409a      	lsls	r2, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	4013      	ands	r3, r2
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f000 808f 	beq.w	8002ed8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0310 	and.w	r3, r3, #16
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f000 8087 	beq.w	8002ed8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dce:	2220      	movs	r2, #32
 8002dd0:	409a      	lsls	r2, r3
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b05      	cmp	r3, #5
 8002de0:	d136      	bne.n	8002e50 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f022 0216 	bic.w	r2, r2, #22
 8002df0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	695a      	ldr	r2, [r3, #20]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e00:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d103      	bne.n	8002e12 <HAL_DMA_IRQHandler+0x1da>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d007      	beq.n	8002e22 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f022 0208 	bic.w	r2, r2, #8
 8002e20:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e26:	223f      	movs	r2, #63	; 0x3f
 8002e28:	409a      	lsls	r2, r3
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2201      	movs	r2, #1
 8002e32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d07e      	beq.n	8002f44 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	4798      	blx	r3
        }
        return;
 8002e4e:	e079      	b.n	8002f44 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d01d      	beq.n	8002e9a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d10d      	bne.n	8002e88 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d031      	beq.n	8002ed8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	4798      	blx	r3
 8002e7c:	e02c      	b.n	8002ed8 <HAL_DMA_IRQHandler+0x2a0>
 8002e7e:	bf00      	nop
 8002e80:	20000000 	.word	0x20000000
 8002e84:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d023      	beq.n	8002ed8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	4798      	blx	r3
 8002e98:	e01e      	b.n	8002ed8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d10f      	bne.n	8002ec8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f022 0210 	bic.w	r2, r2, #16
 8002eb6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d003      	beq.n	8002ed8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d032      	beq.n	8002f46 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee4:	f003 0301 	and.w	r3, r3, #1
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d022      	beq.n	8002f32 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2205      	movs	r2, #5
 8002ef0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f022 0201 	bic.w	r2, r2, #1
 8002f02:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	3301      	adds	r3, #1
 8002f08:	60bb      	str	r3, [r7, #8]
 8002f0a:	697a      	ldr	r2, [r7, #20]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d307      	bcc.n	8002f20 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1f2      	bne.n	8002f04 <HAL_DMA_IRQHandler+0x2cc>
 8002f1e:	e000      	b.n	8002f22 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002f20:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2201      	movs	r2, #1
 8002f26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d005      	beq.n	8002f46 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	4798      	blx	r3
 8002f42:	e000      	b.n	8002f46 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002f44:	bf00      	nop
    }
  }
}
 8002f46:	3718      	adds	r7, #24
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b085      	sub	sp, #20
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
 8002f58:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f68:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	683a      	ldr	r2, [r7, #0]
 8002f70:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	2b40      	cmp	r3, #64	; 0x40
 8002f78:	d108      	bne.n	8002f8c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68ba      	ldr	r2, [r7, #8]
 8002f88:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002f8a:	e007      	b.n	8002f9c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	68ba      	ldr	r2, [r7, #8]
 8002f92:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	60da      	str	r2, [r3, #12]
}
 8002f9c:	bf00      	nop
 8002f9e:	3714      	adds	r7, #20
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	3b10      	subs	r3, #16
 8002fb8:	4a14      	ldr	r2, [pc, #80]	; (800300c <DMA_CalcBaseAndBitshift+0x64>)
 8002fba:	fba2 2303 	umull	r2, r3, r2, r3
 8002fbe:	091b      	lsrs	r3, r3, #4
 8002fc0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002fc2:	4a13      	ldr	r2, [pc, #76]	; (8003010 <DMA_CalcBaseAndBitshift+0x68>)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	461a      	mov	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2b03      	cmp	r3, #3
 8002fd4:	d909      	bls.n	8002fea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002fde:	f023 0303 	bic.w	r3, r3, #3
 8002fe2:	1d1a      	adds	r2, r3, #4
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	659a      	str	r2, [r3, #88]	; 0x58
 8002fe8:	e007      	b.n	8002ffa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ff2:	f023 0303 	bic.w	r3, r3, #3
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3714      	adds	r7, #20
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	aaaaaaab 	.word	0xaaaaaaab
 8003010:	0800c9ac 	.word	0x0800c9ac

08003014 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003014:	b480      	push	{r7}
 8003016:	b085      	sub	sp, #20
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800301c:	2300      	movs	r3, #0
 800301e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003024:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d11f      	bne.n	800306e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	2b03      	cmp	r3, #3
 8003032:	d856      	bhi.n	80030e2 <DMA_CheckFifoParam+0xce>
 8003034:	a201      	add	r2, pc, #4	; (adr r2, 800303c <DMA_CheckFifoParam+0x28>)
 8003036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800303a:	bf00      	nop
 800303c:	0800304d 	.word	0x0800304d
 8003040:	0800305f 	.word	0x0800305f
 8003044:	0800304d 	.word	0x0800304d
 8003048:	080030e3 	.word	0x080030e3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003050:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d046      	beq.n	80030e6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800305c:	e043      	b.n	80030e6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003062:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003066:	d140      	bne.n	80030ea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800306c:	e03d      	b.n	80030ea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003076:	d121      	bne.n	80030bc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	2b03      	cmp	r3, #3
 800307c:	d837      	bhi.n	80030ee <DMA_CheckFifoParam+0xda>
 800307e:	a201      	add	r2, pc, #4	; (adr r2, 8003084 <DMA_CheckFifoParam+0x70>)
 8003080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003084:	08003095 	.word	0x08003095
 8003088:	0800309b 	.word	0x0800309b
 800308c:	08003095 	.word	0x08003095
 8003090:	080030ad 	.word	0x080030ad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	73fb      	strb	r3, [r7, #15]
      break;
 8003098:	e030      	b.n	80030fc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d025      	beq.n	80030f2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030aa:	e022      	b.n	80030f2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030b4:	d11f      	bne.n	80030f6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80030ba:	e01c      	b.n	80030f6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d903      	bls.n	80030ca <DMA_CheckFifoParam+0xb6>
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	2b03      	cmp	r3, #3
 80030c6:	d003      	beq.n	80030d0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80030c8:	e018      	b.n	80030fc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	73fb      	strb	r3, [r7, #15]
      break;
 80030ce:	e015      	b.n	80030fc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00e      	beq.n	80030fa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	73fb      	strb	r3, [r7, #15]
      break;
 80030e0:	e00b      	b.n	80030fa <DMA_CheckFifoParam+0xe6>
      break;
 80030e2:	bf00      	nop
 80030e4:	e00a      	b.n	80030fc <DMA_CheckFifoParam+0xe8>
      break;
 80030e6:	bf00      	nop
 80030e8:	e008      	b.n	80030fc <DMA_CheckFifoParam+0xe8>
      break;
 80030ea:	bf00      	nop
 80030ec:	e006      	b.n	80030fc <DMA_CheckFifoParam+0xe8>
      break;
 80030ee:	bf00      	nop
 80030f0:	e004      	b.n	80030fc <DMA_CheckFifoParam+0xe8>
      break;
 80030f2:	bf00      	nop
 80030f4:	e002      	b.n	80030fc <DMA_CheckFifoParam+0xe8>
      break;   
 80030f6:	bf00      	nop
 80030f8:	e000      	b.n	80030fc <DMA_CheckFifoParam+0xe8>
      break;
 80030fa:	bf00      	nop
    }
  } 
  
  return status; 
 80030fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3714      	adds	r7, #20
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop

0800310c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800310c:	b480      	push	{r7}
 800310e:	b089      	sub	sp, #36	; 0x24
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003116:	2300      	movs	r3, #0
 8003118:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800311a:	2300      	movs	r3, #0
 800311c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800311e:	2300      	movs	r3, #0
 8003120:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003122:	2300      	movs	r3, #0
 8003124:	61fb      	str	r3, [r7, #28]
 8003126:	e159      	b.n	80033dc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003128:	2201      	movs	r2, #1
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	fa02 f303 	lsl.w	r3, r2, r3
 8003130:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	697a      	ldr	r2, [r7, #20]
 8003138:	4013      	ands	r3, r2
 800313a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800313c:	693a      	ldr	r2, [r7, #16]
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	429a      	cmp	r2, r3
 8003142:	f040 8148 	bne.w	80033d6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f003 0303 	and.w	r3, r3, #3
 800314e:	2b01      	cmp	r3, #1
 8003150:	d005      	beq.n	800315e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800315a:	2b02      	cmp	r3, #2
 800315c:	d130      	bne.n	80031c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	005b      	lsls	r3, r3, #1
 8003168:	2203      	movs	r2, #3
 800316a:	fa02 f303 	lsl.w	r3, r2, r3
 800316e:	43db      	mvns	r3, r3
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	4013      	ands	r3, r2
 8003174:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	68da      	ldr	r2, [r3, #12]
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	fa02 f303 	lsl.w	r3, r2, r3
 8003182:	69ba      	ldr	r2, [r7, #24]
 8003184:	4313      	orrs	r3, r2
 8003186:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	69ba      	ldr	r2, [r7, #24]
 800318c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003194:	2201      	movs	r2, #1
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	fa02 f303 	lsl.w	r3, r2, r3
 800319c:	43db      	mvns	r3, r3
 800319e:	69ba      	ldr	r2, [r7, #24]
 80031a0:	4013      	ands	r3, r2
 80031a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	091b      	lsrs	r3, r3, #4
 80031aa:	f003 0201 	and.w	r2, r3, #1
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	fa02 f303 	lsl.w	r3, r2, r3
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f003 0303 	and.w	r3, r3, #3
 80031c8:	2b03      	cmp	r3, #3
 80031ca:	d017      	beq.n	80031fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	2203      	movs	r2, #3
 80031d8:	fa02 f303 	lsl.w	r3, r2, r3
 80031dc:	43db      	mvns	r3, r3
 80031de:	69ba      	ldr	r2, [r7, #24]
 80031e0:	4013      	ands	r3, r2
 80031e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	689a      	ldr	r2, [r3, #8]
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	005b      	lsls	r3, r3, #1
 80031ec:	fa02 f303 	lsl.w	r3, r2, r3
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f003 0303 	and.w	r3, r3, #3
 8003204:	2b02      	cmp	r3, #2
 8003206:	d123      	bne.n	8003250 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	08da      	lsrs	r2, r3, #3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	3208      	adds	r2, #8
 8003210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003214:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	f003 0307 	and.w	r3, r3, #7
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	220f      	movs	r2, #15
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	43db      	mvns	r3, r3
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	4013      	ands	r3, r2
 800322a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	691a      	ldr	r2, [r3, #16]
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	fa02 f303 	lsl.w	r3, r2, r3
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	4313      	orrs	r3, r2
 8003240:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	08da      	lsrs	r2, r3, #3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	3208      	adds	r2, #8
 800324a:	69b9      	ldr	r1, [r7, #24]
 800324c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	005b      	lsls	r3, r3, #1
 800325a:	2203      	movs	r2, #3
 800325c:	fa02 f303 	lsl.w	r3, r2, r3
 8003260:	43db      	mvns	r3, r3
 8003262:	69ba      	ldr	r2, [r7, #24]
 8003264:	4013      	ands	r3, r2
 8003266:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f003 0203 	and.w	r2, r3, #3
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	005b      	lsls	r3, r3, #1
 8003274:	fa02 f303 	lsl.w	r3, r2, r3
 8003278:	69ba      	ldr	r2, [r7, #24]
 800327a:	4313      	orrs	r3, r2
 800327c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800328c:	2b00      	cmp	r3, #0
 800328e:	f000 80a2 	beq.w	80033d6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003292:	2300      	movs	r3, #0
 8003294:	60fb      	str	r3, [r7, #12]
 8003296:	4b57      	ldr	r3, [pc, #348]	; (80033f4 <HAL_GPIO_Init+0x2e8>)
 8003298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800329a:	4a56      	ldr	r2, [pc, #344]	; (80033f4 <HAL_GPIO_Init+0x2e8>)
 800329c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032a0:	6453      	str	r3, [r2, #68]	; 0x44
 80032a2:	4b54      	ldr	r3, [pc, #336]	; (80033f4 <HAL_GPIO_Init+0x2e8>)
 80032a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032aa:	60fb      	str	r3, [r7, #12]
 80032ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032ae:	4a52      	ldr	r2, [pc, #328]	; (80033f8 <HAL_GPIO_Init+0x2ec>)
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	089b      	lsrs	r3, r3, #2
 80032b4:	3302      	adds	r3, #2
 80032b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	f003 0303 	and.w	r3, r3, #3
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	220f      	movs	r2, #15
 80032c6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ca:	43db      	mvns	r3, r3
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	4013      	ands	r3, r2
 80032d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a49      	ldr	r2, [pc, #292]	; (80033fc <HAL_GPIO_Init+0x2f0>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d019      	beq.n	800330e <HAL_GPIO_Init+0x202>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a48      	ldr	r2, [pc, #288]	; (8003400 <HAL_GPIO_Init+0x2f4>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d013      	beq.n	800330a <HAL_GPIO_Init+0x1fe>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a47      	ldr	r2, [pc, #284]	; (8003404 <HAL_GPIO_Init+0x2f8>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d00d      	beq.n	8003306 <HAL_GPIO_Init+0x1fa>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a46      	ldr	r2, [pc, #280]	; (8003408 <HAL_GPIO_Init+0x2fc>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d007      	beq.n	8003302 <HAL_GPIO_Init+0x1f6>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a45      	ldr	r2, [pc, #276]	; (800340c <HAL_GPIO_Init+0x300>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d101      	bne.n	80032fe <HAL_GPIO_Init+0x1f2>
 80032fa:	2304      	movs	r3, #4
 80032fc:	e008      	b.n	8003310 <HAL_GPIO_Init+0x204>
 80032fe:	2307      	movs	r3, #7
 8003300:	e006      	b.n	8003310 <HAL_GPIO_Init+0x204>
 8003302:	2303      	movs	r3, #3
 8003304:	e004      	b.n	8003310 <HAL_GPIO_Init+0x204>
 8003306:	2302      	movs	r3, #2
 8003308:	e002      	b.n	8003310 <HAL_GPIO_Init+0x204>
 800330a:	2301      	movs	r3, #1
 800330c:	e000      	b.n	8003310 <HAL_GPIO_Init+0x204>
 800330e:	2300      	movs	r3, #0
 8003310:	69fa      	ldr	r2, [r7, #28]
 8003312:	f002 0203 	and.w	r2, r2, #3
 8003316:	0092      	lsls	r2, r2, #2
 8003318:	4093      	lsls	r3, r2
 800331a:	69ba      	ldr	r2, [r7, #24]
 800331c:	4313      	orrs	r3, r2
 800331e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003320:	4935      	ldr	r1, [pc, #212]	; (80033f8 <HAL_GPIO_Init+0x2ec>)
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	089b      	lsrs	r3, r3, #2
 8003326:	3302      	adds	r3, #2
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800332e:	4b38      	ldr	r3, [pc, #224]	; (8003410 <HAL_GPIO_Init+0x304>)
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	43db      	mvns	r3, r3
 8003338:	69ba      	ldr	r2, [r7, #24]
 800333a:	4013      	ands	r3, r2
 800333c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d003      	beq.n	8003352 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800334a:	69ba      	ldr	r2, [r7, #24]
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	4313      	orrs	r3, r2
 8003350:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003352:	4a2f      	ldr	r2, [pc, #188]	; (8003410 <HAL_GPIO_Init+0x304>)
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003358:	4b2d      	ldr	r3, [pc, #180]	; (8003410 <HAL_GPIO_Init+0x304>)
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	43db      	mvns	r3, r3
 8003362:	69ba      	ldr	r2, [r7, #24]
 8003364:	4013      	ands	r3, r2
 8003366:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d003      	beq.n	800337c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	4313      	orrs	r3, r2
 800337a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800337c:	4a24      	ldr	r2, [pc, #144]	; (8003410 <HAL_GPIO_Init+0x304>)
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003382:	4b23      	ldr	r3, [pc, #140]	; (8003410 <HAL_GPIO_Init+0x304>)
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	43db      	mvns	r3, r3
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	4013      	ands	r3, r2
 8003390:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d003      	beq.n	80033a6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800339e:	69ba      	ldr	r2, [r7, #24]
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033a6:	4a1a      	ldr	r2, [pc, #104]	; (8003410 <HAL_GPIO_Init+0x304>)
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033ac:	4b18      	ldr	r3, [pc, #96]	; (8003410 <HAL_GPIO_Init+0x304>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	43db      	mvns	r3, r3
 80033b6:	69ba      	ldr	r2, [r7, #24]
 80033b8:	4013      	ands	r3, r2
 80033ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d003      	beq.n	80033d0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80033c8:	69ba      	ldr	r2, [r7, #24]
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033d0:	4a0f      	ldr	r2, [pc, #60]	; (8003410 <HAL_GPIO_Init+0x304>)
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	3301      	adds	r3, #1
 80033da:	61fb      	str	r3, [r7, #28]
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	2b0f      	cmp	r3, #15
 80033e0:	f67f aea2 	bls.w	8003128 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033e4:	bf00      	nop
 80033e6:	bf00      	nop
 80033e8:	3724      	adds	r7, #36	; 0x24
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	40023800 	.word	0x40023800
 80033f8:	40013800 	.word	0x40013800
 80033fc:	40020000 	.word	0x40020000
 8003400:	40020400 	.word	0x40020400
 8003404:	40020800 	.word	0x40020800
 8003408:	40020c00 	.word	0x40020c00
 800340c:	40021000 	.word	0x40021000
 8003410:	40013c00 	.word	0x40013c00

08003414 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	460b      	mov	r3, r1
 800341e:	807b      	strh	r3, [r7, #2]
 8003420:	4613      	mov	r3, r2
 8003422:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003424:	787b      	ldrb	r3, [r7, #1]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d003      	beq.n	8003432 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800342a:	887a      	ldrh	r2, [r7, #2]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003430:	e003      	b.n	800343a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003432:	887b      	ldrh	r3, [r7, #2]
 8003434:	041a      	lsls	r2, r3, #16
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	619a      	str	r2, [r3, #24]
}
 800343a:	bf00      	nop
 800343c:	370c      	adds	r7, #12
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
	...

08003448 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b086      	sub	sp, #24
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d101      	bne.n	800345a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e267      	b.n	800392a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	2b00      	cmp	r3, #0
 8003464:	d075      	beq.n	8003552 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003466:	4b88      	ldr	r3, [pc, #544]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f003 030c 	and.w	r3, r3, #12
 800346e:	2b04      	cmp	r3, #4
 8003470:	d00c      	beq.n	800348c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003472:	4b85      	ldr	r3, [pc, #532]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800347a:	2b08      	cmp	r3, #8
 800347c:	d112      	bne.n	80034a4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800347e:	4b82      	ldr	r3, [pc, #520]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003486:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800348a:	d10b      	bne.n	80034a4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800348c:	4b7e      	ldr	r3, [pc, #504]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d05b      	beq.n	8003550 <HAL_RCC_OscConfig+0x108>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d157      	bne.n	8003550 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e242      	b.n	800392a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034ac:	d106      	bne.n	80034bc <HAL_RCC_OscConfig+0x74>
 80034ae:	4b76      	ldr	r3, [pc, #472]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a75      	ldr	r2, [pc, #468]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 80034b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034b8:	6013      	str	r3, [r2, #0]
 80034ba:	e01d      	b.n	80034f8 <HAL_RCC_OscConfig+0xb0>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034c4:	d10c      	bne.n	80034e0 <HAL_RCC_OscConfig+0x98>
 80034c6:	4b70      	ldr	r3, [pc, #448]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a6f      	ldr	r2, [pc, #444]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 80034cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034d0:	6013      	str	r3, [r2, #0]
 80034d2:	4b6d      	ldr	r3, [pc, #436]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a6c      	ldr	r2, [pc, #432]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 80034d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034dc:	6013      	str	r3, [r2, #0]
 80034de:	e00b      	b.n	80034f8 <HAL_RCC_OscConfig+0xb0>
 80034e0:	4b69      	ldr	r3, [pc, #420]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a68      	ldr	r2, [pc, #416]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 80034e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034ea:	6013      	str	r3, [r2, #0]
 80034ec:	4b66      	ldr	r3, [pc, #408]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a65      	ldr	r2, [pc, #404]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 80034f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d013      	beq.n	8003528 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003500:	f7fe fbc8 	bl	8001c94 <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003506:	e008      	b.n	800351a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003508:	f7fe fbc4 	bl	8001c94 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b64      	cmp	r3, #100	; 0x64
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e207      	b.n	800392a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800351a:	4b5b      	ldr	r3, [pc, #364]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d0f0      	beq.n	8003508 <HAL_RCC_OscConfig+0xc0>
 8003526:	e014      	b.n	8003552 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003528:	f7fe fbb4 	bl	8001c94 <HAL_GetTick>
 800352c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800352e:	e008      	b.n	8003542 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003530:	f7fe fbb0 	bl	8001c94 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b64      	cmp	r3, #100	; 0x64
 800353c:	d901      	bls.n	8003542 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e1f3      	b.n	800392a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003542:	4b51      	ldr	r3, [pc, #324]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1f0      	bne.n	8003530 <HAL_RCC_OscConfig+0xe8>
 800354e:	e000      	b.n	8003552 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003550:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	2b00      	cmp	r3, #0
 800355c:	d063      	beq.n	8003626 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800355e:	4b4a      	ldr	r3, [pc, #296]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f003 030c 	and.w	r3, r3, #12
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00b      	beq.n	8003582 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800356a:	4b47      	ldr	r3, [pc, #284]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003572:	2b08      	cmp	r3, #8
 8003574:	d11c      	bne.n	80035b0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003576:	4b44      	ldr	r3, [pc, #272]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d116      	bne.n	80035b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003582:	4b41      	ldr	r3, [pc, #260]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	2b00      	cmp	r3, #0
 800358c:	d005      	beq.n	800359a <HAL_RCC_OscConfig+0x152>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d001      	beq.n	800359a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e1c7      	b.n	800392a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800359a:	4b3b      	ldr	r3, [pc, #236]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	00db      	lsls	r3, r3, #3
 80035a8:	4937      	ldr	r1, [pc, #220]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ae:	e03a      	b.n	8003626 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d020      	beq.n	80035fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035b8:	4b34      	ldr	r3, [pc, #208]	; (800368c <HAL_RCC_OscConfig+0x244>)
 80035ba:	2201      	movs	r2, #1
 80035bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035be:	f7fe fb69 	bl	8001c94 <HAL_GetTick>
 80035c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035c4:	e008      	b.n	80035d8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035c6:	f7fe fb65 	bl	8001c94 <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d901      	bls.n	80035d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	e1a8      	b.n	800392a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035d8:	4b2b      	ldr	r3, [pc, #172]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0302 	and.w	r3, r3, #2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d0f0      	beq.n	80035c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035e4:	4b28      	ldr	r3, [pc, #160]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	00db      	lsls	r3, r3, #3
 80035f2:	4925      	ldr	r1, [pc, #148]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	600b      	str	r3, [r1, #0]
 80035f8:	e015      	b.n	8003626 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035fa:	4b24      	ldr	r3, [pc, #144]	; (800368c <HAL_RCC_OscConfig+0x244>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003600:	f7fe fb48 	bl	8001c94 <HAL_GetTick>
 8003604:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003606:	e008      	b.n	800361a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003608:	f7fe fb44 	bl	8001c94 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b02      	cmp	r3, #2
 8003614:	d901      	bls.n	800361a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e187      	b.n	800392a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800361a:	4b1b      	ldr	r3, [pc, #108]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1f0      	bne.n	8003608 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0308 	and.w	r3, r3, #8
 800362e:	2b00      	cmp	r3, #0
 8003630:	d036      	beq.n	80036a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d016      	beq.n	8003668 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800363a:	4b15      	ldr	r3, [pc, #84]	; (8003690 <HAL_RCC_OscConfig+0x248>)
 800363c:	2201      	movs	r2, #1
 800363e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003640:	f7fe fb28 	bl	8001c94 <HAL_GetTick>
 8003644:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003646:	e008      	b.n	800365a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003648:	f7fe fb24 	bl	8001c94 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b02      	cmp	r3, #2
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e167      	b.n	800392a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800365a:	4b0b      	ldr	r3, [pc, #44]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 800365c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d0f0      	beq.n	8003648 <HAL_RCC_OscConfig+0x200>
 8003666:	e01b      	b.n	80036a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003668:	4b09      	ldr	r3, [pc, #36]	; (8003690 <HAL_RCC_OscConfig+0x248>)
 800366a:	2200      	movs	r2, #0
 800366c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800366e:	f7fe fb11 	bl	8001c94 <HAL_GetTick>
 8003672:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003674:	e00e      	b.n	8003694 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003676:	f7fe fb0d 	bl	8001c94 <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	2b02      	cmp	r3, #2
 8003682:	d907      	bls.n	8003694 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e150      	b.n	800392a <HAL_RCC_OscConfig+0x4e2>
 8003688:	40023800 	.word	0x40023800
 800368c:	42470000 	.word	0x42470000
 8003690:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003694:	4b88      	ldr	r3, [pc, #544]	; (80038b8 <HAL_RCC_OscConfig+0x470>)
 8003696:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	2b00      	cmp	r3, #0
 800369e:	d1ea      	bne.n	8003676 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0304 	and.w	r3, r3, #4
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	f000 8097 	beq.w	80037dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036ae:	2300      	movs	r3, #0
 80036b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036b2:	4b81      	ldr	r3, [pc, #516]	; (80038b8 <HAL_RCC_OscConfig+0x470>)
 80036b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d10f      	bne.n	80036de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036be:	2300      	movs	r3, #0
 80036c0:	60bb      	str	r3, [r7, #8]
 80036c2:	4b7d      	ldr	r3, [pc, #500]	; (80038b8 <HAL_RCC_OscConfig+0x470>)
 80036c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c6:	4a7c      	ldr	r2, [pc, #496]	; (80038b8 <HAL_RCC_OscConfig+0x470>)
 80036c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036cc:	6413      	str	r3, [r2, #64]	; 0x40
 80036ce:	4b7a      	ldr	r3, [pc, #488]	; (80038b8 <HAL_RCC_OscConfig+0x470>)
 80036d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036d6:	60bb      	str	r3, [r7, #8]
 80036d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036da:	2301      	movs	r3, #1
 80036dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036de:	4b77      	ldr	r3, [pc, #476]	; (80038bc <HAL_RCC_OscConfig+0x474>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d118      	bne.n	800371c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036ea:	4b74      	ldr	r3, [pc, #464]	; (80038bc <HAL_RCC_OscConfig+0x474>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a73      	ldr	r2, [pc, #460]	; (80038bc <HAL_RCC_OscConfig+0x474>)
 80036f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036f6:	f7fe facd 	bl	8001c94 <HAL_GetTick>
 80036fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036fc:	e008      	b.n	8003710 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036fe:	f7fe fac9 	bl	8001c94 <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	2b02      	cmp	r3, #2
 800370a:	d901      	bls.n	8003710 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e10c      	b.n	800392a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003710:	4b6a      	ldr	r3, [pc, #424]	; (80038bc <HAL_RCC_OscConfig+0x474>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003718:	2b00      	cmp	r3, #0
 800371a:	d0f0      	beq.n	80036fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	2b01      	cmp	r3, #1
 8003722:	d106      	bne.n	8003732 <HAL_RCC_OscConfig+0x2ea>
 8003724:	4b64      	ldr	r3, [pc, #400]	; (80038b8 <HAL_RCC_OscConfig+0x470>)
 8003726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003728:	4a63      	ldr	r2, [pc, #396]	; (80038b8 <HAL_RCC_OscConfig+0x470>)
 800372a:	f043 0301 	orr.w	r3, r3, #1
 800372e:	6713      	str	r3, [r2, #112]	; 0x70
 8003730:	e01c      	b.n	800376c <HAL_RCC_OscConfig+0x324>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	2b05      	cmp	r3, #5
 8003738:	d10c      	bne.n	8003754 <HAL_RCC_OscConfig+0x30c>
 800373a:	4b5f      	ldr	r3, [pc, #380]	; (80038b8 <HAL_RCC_OscConfig+0x470>)
 800373c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800373e:	4a5e      	ldr	r2, [pc, #376]	; (80038b8 <HAL_RCC_OscConfig+0x470>)
 8003740:	f043 0304 	orr.w	r3, r3, #4
 8003744:	6713      	str	r3, [r2, #112]	; 0x70
 8003746:	4b5c      	ldr	r3, [pc, #368]	; (80038b8 <HAL_RCC_OscConfig+0x470>)
 8003748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800374a:	4a5b      	ldr	r2, [pc, #364]	; (80038b8 <HAL_RCC_OscConfig+0x470>)
 800374c:	f043 0301 	orr.w	r3, r3, #1
 8003750:	6713      	str	r3, [r2, #112]	; 0x70
 8003752:	e00b      	b.n	800376c <HAL_RCC_OscConfig+0x324>
 8003754:	4b58      	ldr	r3, [pc, #352]	; (80038b8 <HAL_RCC_OscConfig+0x470>)
 8003756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003758:	4a57      	ldr	r2, [pc, #348]	; (80038b8 <HAL_RCC_OscConfig+0x470>)
 800375a:	f023 0301 	bic.w	r3, r3, #1
 800375e:	6713      	str	r3, [r2, #112]	; 0x70
 8003760:	4b55      	ldr	r3, [pc, #340]	; (80038b8 <HAL_RCC_OscConfig+0x470>)
 8003762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003764:	4a54      	ldr	r2, [pc, #336]	; (80038b8 <HAL_RCC_OscConfig+0x470>)
 8003766:	f023 0304 	bic.w	r3, r3, #4
 800376a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d015      	beq.n	80037a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003774:	f7fe fa8e 	bl	8001c94 <HAL_GetTick>
 8003778:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800377a:	e00a      	b.n	8003792 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800377c:	f7fe fa8a 	bl	8001c94 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	f241 3288 	movw	r2, #5000	; 0x1388
 800378a:	4293      	cmp	r3, r2
 800378c:	d901      	bls.n	8003792 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e0cb      	b.n	800392a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003792:	4b49      	ldr	r3, [pc, #292]	; (80038b8 <HAL_RCC_OscConfig+0x470>)
 8003794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d0ee      	beq.n	800377c <HAL_RCC_OscConfig+0x334>
 800379e:	e014      	b.n	80037ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037a0:	f7fe fa78 	bl	8001c94 <HAL_GetTick>
 80037a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037a6:	e00a      	b.n	80037be <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037a8:	f7fe fa74 	bl	8001c94 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d901      	bls.n	80037be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e0b5      	b.n	800392a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037be:	4b3e      	ldr	r3, [pc, #248]	; (80038b8 <HAL_RCC_OscConfig+0x470>)
 80037c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1ee      	bne.n	80037a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80037ca:	7dfb      	ldrb	r3, [r7, #23]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d105      	bne.n	80037dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037d0:	4b39      	ldr	r3, [pc, #228]	; (80038b8 <HAL_RCC_OscConfig+0x470>)
 80037d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d4:	4a38      	ldr	r2, [pc, #224]	; (80038b8 <HAL_RCC_OscConfig+0x470>)
 80037d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f000 80a1 	beq.w	8003928 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037e6:	4b34      	ldr	r3, [pc, #208]	; (80038b8 <HAL_RCC_OscConfig+0x470>)
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f003 030c 	and.w	r3, r3, #12
 80037ee:	2b08      	cmp	r3, #8
 80037f0:	d05c      	beq.n	80038ac <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d141      	bne.n	800387e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037fa:	4b31      	ldr	r3, [pc, #196]	; (80038c0 <HAL_RCC_OscConfig+0x478>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003800:	f7fe fa48 	bl	8001c94 <HAL_GetTick>
 8003804:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003806:	e008      	b.n	800381a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003808:	f7fe fa44 	bl	8001c94 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b02      	cmp	r3, #2
 8003814:	d901      	bls.n	800381a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e087      	b.n	800392a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800381a:	4b27      	ldr	r3, [pc, #156]	; (80038b8 <HAL_RCC_OscConfig+0x470>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1f0      	bne.n	8003808 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	69da      	ldr	r2, [r3, #28]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a1b      	ldr	r3, [r3, #32]
 800382e:	431a      	orrs	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003834:	019b      	lsls	r3, r3, #6
 8003836:	431a      	orrs	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383c:	085b      	lsrs	r3, r3, #1
 800383e:	3b01      	subs	r3, #1
 8003840:	041b      	lsls	r3, r3, #16
 8003842:	431a      	orrs	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003848:	061b      	lsls	r3, r3, #24
 800384a:	491b      	ldr	r1, [pc, #108]	; (80038b8 <HAL_RCC_OscConfig+0x470>)
 800384c:	4313      	orrs	r3, r2
 800384e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003850:	4b1b      	ldr	r3, [pc, #108]	; (80038c0 <HAL_RCC_OscConfig+0x478>)
 8003852:	2201      	movs	r2, #1
 8003854:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003856:	f7fe fa1d 	bl	8001c94 <HAL_GetTick>
 800385a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800385c:	e008      	b.n	8003870 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800385e:	f7fe fa19 	bl	8001c94 <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	2b02      	cmp	r3, #2
 800386a:	d901      	bls.n	8003870 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800386c:	2303      	movs	r3, #3
 800386e:	e05c      	b.n	800392a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003870:	4b11      	ldr	r3, [pc, #68]	; (80038b8 <HAL_RCC_OscConfig+0x470>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d0f0      	beq.n	800385e <HAL_RCC_OscConfig+0x416>
 800387c:	e054      	b.n	8003928 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800387e:	4b10      	ldr	r3, [pc, #64]	; (80038c0 <HAL_RCC_OscConfig+0x478>)
 8003880:	2200      	movs	r2, #0
 8003882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003884:	f7fe fa06 	bl	8001c94 <HAL_GetTick>
 8003888:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800388a:	e008      	b.n	800389e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800388c:	f7fe fa02 	bl	8001c94 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	2b02      	cmp	r3, #2
 8003898:	d901      	bls.n	800389e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e045      	b.n	800392a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800389e:	4b06      	ldr	r3, [pc, #24]	; (80038b8 <HAL_RCC_OscConfig+0x470>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d1f0      	bne.n	800388c <HAL_RCC_OscConfig+0x444>
 80038aa:	e03d      	b.n	8003928 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	699b      	ldr	r3, [r3, #24]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d107      	bne.n	80038c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e038      	b.n	800392a <HAL_RCC_OscConfig+0x4e2>
 80038b8:	40023800 	.word	0x40023800
 80038bc:	40007000 	.word	0x40007000
 80038c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038c4:	4b1b      	ldr	r3, [pc, #108]	; (8003934 <HAL_RCC_OscConfig+0x4ec>)
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	699b      	ldr	r3, [r3, #24]
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d028      	beq.n	8003924 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038dc:	429a      	cmp	r2, r3
 80038de:	d121      	bne.n	8003924 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d11a      	bne.n	8003924 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038ee:	68fa      	ldr	r2, [r7, #12]
 80038f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80038f4:	4013      	ands	r3, r2
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80038fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d111      	bne.n	8003924 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390a:	085b      	lsrs	r3, r3, #1
 800390c:	3b01      	subs	r3, #1
 800390e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003910:	429a      	cmp	r2, r3
 8003912:	d107      	bne.n	8003924 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003920:	429a      	cmp	r2, r3
 8003922:	d001      	beq.n	8003928 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e000      	b.n	800392a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3718      	adds	r7, #24
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	40023800 	.word	0x40023800

08003938 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d101      	bne.n	800394c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e0cc      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800394c:	4b68      	ldr	r3, [pc, #416]	; (8003af0 <HAL_RCC_ClockConfig+0x1b8>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0307 	and.w	r3, r3, #7
 8003954:	683a      	ldr	r2, [r7, #0]
 8003956:	429a      	cmp	r2, r3
 8003958:	d90c      	bls.n	8003974 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800395a:	4b65      	ldr	r3, [pc, #404]	; (8003af0 <HAL_RCC_ClockConfig+0x1b8>)
 800395c:	683a      	ldr	r2, [r7, #0]
 800395e:	b2d2      	uxtb	r2, r2
 8003960:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003962:	4b63      	ldr	r3, [pc, #396]	; (8003af0 <HAL_RCC_ClockConfig+0x1b8>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0307 	and.w	r3, r3, #7
 800396a:	683a      	ldr	r2, [r7, #0]
 800396c:	429a      	cmp	r2, r3
 800396e:	d001      	beq.n	8003974 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e0b8      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0302 	and.w	r3, r3, #2
 800397c:	2b00      	cmp	r3, #0
 800397e:	d020      	beq.n	80039c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0304 	and.w	r3, r3, #4
 8003988:	2b00      	cmp	r3, #0
 800398a:	d005      	beq.n	8003998 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800398c:	4b59      	ldr	r3, [pc, #356]	; (8003af4 <HAL_RCC_ClockConfig+0x1bc>)
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	4a58      	ldr	r2, [pc, #352]	; (8003af4 <HAL_RCC_ClockConfig+0x1bc>)
 8003992:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003996:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0308 	and.w	r3, r3, #8
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d005      	beq.n	80039b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039a4:	4b53      	ldr	r3, [pc, #332]	; (8003af4 <HAL_RCC_ClockConfig+0x1bc>)
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	4a52      	ldr	r2, [pc, #328]	; (8003af4 <HAL_RCC_ClockConfig+0x1bc>)
 80039aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80039ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039b0:	4b50      	ldr	r3, [pc, #320]	; (8003af4 <HAL_RCC_ClockConfig+0x1bc>)
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	494d      	ldr	r1, [pc, #308]	; (8003af4 <HAL_RCC_ClockConfig+0x1bc>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0301 	and.w	r3, r3, #1
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d044      	beq.n	8003a58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d107      	bne.n	80039e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039d6:	4b47      	ldr	r3, [pc, #284]	; (8003af4 <HAL_RCC_ClockConfig+0x1bc>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d119      	bne.n	8003a16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e07f      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d003      	beq.n	80039f6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039f2:	2b03      	cmp	r3, #3
 80039f4:	d107      	bne.n	8003a06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039f6:	4b3f      	ldr	r3, [pc, #252]	; (8003af4 <HAL_RCC_ClockConfig+0x1bc>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d109      	bne.n	8003a16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e06f      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a06:	4b3b      	ldr	r3, [pc, #236]	; (8003af4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0302 	and.w	r3, r3, #2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d101      	bne.n	8003a16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e067      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a16:	4b37      	ldr	r3, [pc, #220]	; (8003af4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f023 0203 	bic.w	r2, r3, #3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	4934      	ldr	r1, [pc, #208]	; (8003af4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a28:	f7fe f934 	bl	8001c94 <HAL_GetTick>
 8003a2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a2e:	e00a      	b.n	8003a46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a30:	f7fe f930 	bl	8001c94 <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e04f      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a46:	4b2b      	ldr	r3, [pc, #172]	; (8003af4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f003 020c 	and.w	r2, r3, #12
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d1eb      	bne.n	8003a30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a58:	4b25      	ldr	r3, [pc, #148]	; (8003af0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0307 	and.w	r3, r3, #7
 8003a60:	683a      	ldr	r2, [r7, #0]
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d20c      	bcs.n	8003a80 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a66:	4b22      	ldr	r3, [pc, #136]	; (8003af0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a68:	683a      	ldr	r2, [r7, #0]
 8003a6a:	b2d2      	uxtb	r2, r2
 8003a6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a6e:	4b20      	ldr	r3, [pc, #128]	; (8003af0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0307 	and.w	r3, r3, #7
 8003a76:	683a      	ldr	r2, [r7, #0]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d001      	beq.n	8003a80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e032      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0304 	and.w	r3, r3, #4
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d008      	beq.n	8003a9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a8c:	4b19      	ldr	r3, [pc, #100]	; (8003af4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	4916      	ldr	r1, [pc, #88]	; (8003af4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0308 	and.w	r3, r3, #8
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d009      	beq.n	8003abe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003aaa:	4b12      	ldr	r3, [pc, #72]	; (8003af4 <HAL_RCC_ClockConfig+0x1bc>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	00db      	lsls	r3, r3, #3
 8003ab8:	490e      	ldr	r1, [pc, #56]	; (8003af4 <HAL_RCC_ClockConfig+0x1bc>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003abe:	f000 f821 	bl	8003b04 <HAL_RCC_GetSysClockFreq>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	4b0b      	ldr	r3, [pc, #44]	; (8003af4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	091b      	lsrs	r3, r3, #4
 8003aca:	f003 030f 	and.w	r3, r3, #15
 8003ace:	490a      	ldr	r1, [pc, #40]	; (8003af8 <HAL_RCC_ClockConfig+0x1c0>)
 8003ad0:	5ccb      	ldrb	r3, [r1, r3]
 8003ad2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ad6:	4a09      	ldr	r2, [pc, #36]	; (8003afc <HAL_RCC_ClockConfig+0x1c4>)
 8003ad8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003ada:	4b09      	ldr	r3, [pc, #36]	; (8003b00 <HAL_RCC_ClockConfig+0x1c8>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f7fe f894 	bl	8001c0c <HAL_InitTick>

  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	40023c00 	.word	0x40023c00
 8003af4:	40023800 	.word	0x40023800
 8003af8:	0800c994 	.word	0x0800c994
 8003afc:	20000000 	.word	0x20000000
 8003b00:	20000004 	.word	0x20000004

08003b04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b08:	b090      	sub	sp, #64	; 0x40
 8003b0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t pllvco = 0U;
 8003b10:	2300      	movs	r3, #0
 8003b12:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t pllp = 0U;
 8003b14:	2300      	movs	r3, #0
 8003b16:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b1c:	4b59      	ldr	r3, [pc, #356]	; (8003c84 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f003 030c 	and.w	r3, r3, #12
 8003b24:	2b08      	cmp	r3, #8
 8003b26:	d00d      	beq.n	8003b44 <HAL_RCC_GetSysClockFreq+0x40>
 8003b28:	2b08      	cmp	r3, #8
 8003b2a:	f200 80a1 	bhi.w	8003c70 <HAL_RCC_GetSysClockFreq+0x16c>
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d002      	beq.n	8003b38 <HAL_RCC_GetSysClockFreq+0x34>
 8003b32:	2b04      	cmp	r3, #4
 8003b34:	d003      	beq.n	8003b3e <HAL_RCC_GetSysClockFreq+0x3a>
 8003b36:	e09b      	b.n	8003c70 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b38:	4b53      	ldr	r3, [pc, #332]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x184>)
 8003b3a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003b3c:	e09b      	b.n	8003c76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b3e:	4b53      	ldr	r3, [pc, #332]	; (8003c8c <HAL_RCC_GetSysClockFreq+0x188>)
 8003b40:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003b42:	e098      	b.n	8003c76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b44:	4b4f      	ldr	r3, [pc, #316]	; (8003c84 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b4c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b4e:	4b4d      	ldr	r3, [pc, #308]	; (8003c84 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d028      	beq.n	8003bac <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b5a:	4b4a      	ldr	r3, [pc, #296]	; (8003c84 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	099b      	lsrs	r3, r3, #6
 8003b60:	2200      	movs	r2, #0
 8003b62:	623b      	str	r3, [r7, #32]
 8003b64:	627a      	str	r2, [r7, #36]	; 0x24
 8003b66:	6a3b      	ldr	r3, [r7, #32]
 8003b68:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003b6c:	2100      	movs	r1, #0
 8003b6e:	4b47      	ldr	r3, [pc, #284]	; (8003c8c <HAL_RCC_GetSysClockFreq+0x188>)
 8003b70:	fb03 f201 	mul.w	r2, r3, r1
 8003b74:	2300      	movs	r3, #0
 8003b76:	fb00 f303 	mul.w	r3, r0, r3
 8003b7a:	4413      	add	r3, r2
 8003b7c:	4a43      	ldr	r2, [pc, #268]	; (8003c8c <HAL_RCC_GetSysClockFreq+0x188>)
 8003b7e:	fba0 1202 	umull	r1, r2, r0, r2
 8003b82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b84:	460a      	mov	r2, r1
 8003b86:	62ba      	str	r2, [r7, #40]	; 0x28
 8003b88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b8a:	4413      	add	r3, r2
 8003b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b90:	2200      	movs	r2, #0
 8003b92:	61bb      	str	r3, [r7, #24]
 8003b94:	61fa      	str	r2, [r7, #28]
 8003b96:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b9a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003b9e:	f7fd f85b 	bl	8000c58 <__aeabi_uldivmod>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003baa:	e053      	b.n	8003c54 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bac:	4b35      	ldr	r3, [pc, #212]	; (8003c84 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	099b      	lsrs	r3, r3, #6
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	613b      	str	r3, [r7, #16]
 8003bb6:	617a      	str	r2, [r7, #20]
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003bbe:	f04f 0b00 	mov.w	fp, #0
 8003bc2:	4652      	mov	r2, sl
 8003bc4:	465b      	mov	r3, fp
 8003bc6:	f04f 0000 	mov.w	r0, #0
 8003bca:	f04f 0100 	mov.w	r1, #0
 8003bce:	0159      	lsls	r1, r3, #5
 8003bd0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bd4:	0150      	lsls	r0, r2, #5
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	460b      	mov	r3, r1
 8003bda:	ebb2 080a 	subs.w	r8, r2, sl
 8003bde:	eb63 090b 	sbc.w	r9, r3, fp
 8003be2:	f04f 0200 	mov.w	r2, #0
 8003be6:	f04f 0300 	mov.w	r3, #0
 8003bea:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003bee:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003bf2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003bf6:	ebb2 0408 	subs.w	r4, r2, r8
 8003bfa:	eb63 0509 	sbc.w	r5, r3, r9
 8003bfe:	f04f 0200 	mov.w	r2, #0
 8003c02:	f04f 0300 	mov.w	r3, #0
 8003c06:	00eb      	lsls	r3, r5, #3
 8003c08:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c0c:	00e2      	lsls	r2, r4, #3
 8003c0e:	4614      	mov	r4, r2
 8003c10:	461d      	mov	r5, r3
 8003c12:	eb14 030a 	adds.w	r3, r4, sl
 8003c16:	603b      	str	r3, [r7, #0]
 8003c18:	eb45 030b 	adc.w	r3, r5, fp
 8003c1c:	607b      	str	r3, [r7, #4]
 8003c1e:	f04f 0200 	mov.w	r2, #0
 8003c22:	f04f 0300 	mov.w	r3, #0
 8003c26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c2a:	4629      	mov	r1, r5
 8003c2c:	028b      	lsls	r3, r1, #10
 8003c2e:	4621      	mov	r1, r4
 8003c30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c34:	4621      	mov	r1, r4
 8003c36:	028a      	lsls	r2, r1, #10
 8003c38:	4610      	mov	r0, r2
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c3e:	2200      	movs	r2, #0
 8003c40:	60bb      	str	r3, [r7, #8]
 8003c42:	60fa      	str	r2, [r7, #12]
 8003c44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c48:	f7fd f806 	bl	8000c58 <__aeabi_uldivmod>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	460b      	mov	r3, r1
 8003c50:	4613      	mov	r3, r2
 8003c52:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003c54:	4b0b      	ldr	r3, [pc, #44]	; (8003c84 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	0c1b      	lsrs	r3, r3, #16
 8003c5a:	f003 0303 	and.w	r3, r3, #3
 8003c5e:	3301      	adds	r3, #1
 8003c60:	005b      	lsls	r3, r3, #1
 8003c62:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8003c64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c6c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c6e:	e002      	b.n	8003c76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c70:	4b05      	ldr	r3, [pc, #20]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c72:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3740      	adds	r7, #64	; 0x40
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c82:	bf00      	nop
 8003c84:	40023800 	.word	0x40023800
 8003c88:	00f42400 	.word	0x00f42400
 8003c8c:	017d7840 	.word	0x017d7840

08003c90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c90:	b480      	push	{r7}
 8003c92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c94:	4b03      	ldr	r3, [pc, #12]	; (8003ca4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c96:	681b      	ldr	r3, [r3, #0]
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop
 8003ca4:	20000000 	.word	0x20000000

08003ca8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003cac:	f7ff fff0 	bl	8003c90 <HAL_RCC_GetHCLKFreq>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	4b05      	ldr	r3, [pc, #20]	; (8003cc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	0a9b      	lsrs	r3, r3, #10
 8003cb8:	f003 0307 	and.w	r3, r3, #7
 8003cbc:	4903      	ldr	r1, [pc, #12]	; (8003ccc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cbe:	5ccb      	ldrb	r3, [r1, r3]
 8003cc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	40023800 	.word	0x40023800
 8003ccc:	0800c9a4 	.word	0x0800c9a4

08003cd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003cd4:	f7ff ffdc 	bl	8003c90 <HAL_RCC_GetHCLKFreq>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	4b05      	ldr	r3, [pc, #20]	; (8003cf0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	0b5b      	lsrs	r3, r3, #13
 8003ce0:	f003 0307 	and.w	r3, r3, #7
 8003ce4:	4903      	ldr	r1, [pc, #12]	; (8003cf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ce6:	5ccb      	ldrb	r3, [r1, r3]
 8003ce8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	40023800 	.word	0x40023800
 8003cf4:	0800c9a4 	.word	0x0800c9a4

08003cf8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e041      	b.n	8003d8e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d106      	bne.n	8003d24 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f7fd fdcc 	bl	80018bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2202      	movs	r2, #2
 8003d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	3304      	adds	r3, #4
 8003d34:	4619      	mov	r1, r3
 8003d36:	4610      	mov	r0, r2
 8003d38:	f000 f9a0 	bl	800407c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3708      	adds	r7, #8
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
	...

08003d98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d109      	bne.n	8003dbc <HAL_TIM_PWM_Start+0x24>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	bf14      	ite	ne
 8003db4:	2301      	movne	r3, #1
 8003db6:	2300      	moveq	r3, #0
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	e022      	b.n	8003e02 <HAL_TIM_PWM_Start+0x6a>
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	2b04      	cmp	r3, #4
 8003dc0:	d109      	bne.n	8003dd6 <HAL_TIM_PWM_Start+0x3e>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	bf14      	ite	ne
 8003dce:	2301      	movne	r3, #1
 8003dd0:	2300      	moveq	r3, #0
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	e015      	b.n	8003e02 <HAL_TIM_PWM_Start+0x6a>
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	2b08      	cmp	r3, #8
 8003dda:	d109      	bne.n	8003df0 <HAL_TIM_PWM_Start+0x58>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	bf14      	ite	ne
 8003de8:	2301      	movne	r3, #1
 8003dea:	2300      	moveq	r3, #0
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	e008      	b.n	8003e02 <HAL_TIM_PWM_Start+0x6a>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	bf14      	ite	ne
 8003dfc:	2301      	movne	r3, #1
 8003dfe:	2300      	moveq	r3, #0
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d001      	beq.n	8003e0a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e068      	b.n	8003edc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d104      	bne.n	8003e1a <HAL_TIM_PWM_Start+0x82>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2202      	movs	r2, #2
 8003e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e18:	e013      	b.n	8003e42 <HAL_TIM_PWM_Start+0xaa>
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	2b04      	cmp	r3, #4
 8003e1e:	d104      	bne.n	8003e2a <HAL_TIM_PWM_Start+0x92>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2202      	movs	r2, #2
 8003e24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e28:	e00b      	b.n	8003e42 <HAL_TIM_PWM_Start+0xaa>
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	2b08      	cmp	r3, #8
 8003e2e:	d104      	bne.n	8003e3a <HAL_TIM_PWM_Start+0xa2>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2202      	movs	r2, #2
 8003e34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e38:	e003      	b.n	8003e42 <HAL_TIM_PWM_Start+0xaa>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2202      	movs	r2, #2
 8003e3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2201      	movs	r2, #1
 8003e48:	6839      	ldr	r1, [r7, #0]
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f000 fb2e 	bl	80044ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a23      	ldr	r2, [pc, #140]	; (8003ee4 <HAL_TIM_PWM_Start+0x14c>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d107      	bne.n	8003e6a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e68:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a1d      	ldr	r2, [pc, #116]	; (8003ee4 <HAL_TIM_PWM_Start+0x14c>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d018      	beq.n	8003ea6 <HAL_TIM_PWM_Start+0x10e>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e7c:	d013      	beq.n	8003ea6 <HAL_TIM_PWM_Start+0x10e>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a19      	ldr	r2, [pc, #100]	; (8003ee8 <HAL_TIM_PWM_Start+0x150>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d00e      	beq.n	8003ea6 <HAL_TIM_PWM_Start+0x10e>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a17      	ldr	r2, [pc, #92]	; (8003eec <HAL_TIM_PWM_Start+0x154>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d009      	beq.n	8003ea6 <HAL_TIM_PWM_Start+0x10e>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a16      	ldr	r2, [pc, #88]	; (8003ef0 <HAL_TIM_PWM_Start+0x158>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d004      	beq.n	8003ea6 <HAL_TIM_PWM_Start+0x10e>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a14      	ldr	r2, [pc, #80]	; (8003ef4 <HAL_TIM_PWM_Start+0x15c>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d111      	bne.n	8003eca <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f003 0307 	and.w	r3, r3, #7
 8003eb0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2b06      	cmp	r3, #6
 8003eb6:	d010      	beq.n	8003eda <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f042 0201 	orr.w	r2, r2, #1
 8003ec6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ec8:	e007      	b.n	8003eda <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f042 0201 	orr.w	r2, r2, #1
 8003ed8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3710      	adds	r7, #16
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	40010000 	.word	0x40010000
 8003ee8:	40000400 	.word	0x40000400
 8003eec:	40000800 	.word	0x40000800
 8003ef0:	40000c00 	.word	0x40000c00
 8003ef4:	40014000 	.word	0x40014000

08003ef8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b086      	sub	sp, #24
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f04:	2300      	movs	r3, #0
 8003f06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d101      	bne.n	8003f16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003f12:	2302      	movs	r3, #2
 8003f14:	e0ae      	b.n	8004074 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2b0c      	cmp	r3, #12
 8003f22:	f200 809f 	bhi.w	8004064 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003f26:	a201      	add	r2, pc, #4	; (adr r2, 8003f2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f2c:	08003f61 	.word	0x08003f61
 8003f30:	08004065 	.word	0x08004065
 8003f34:	08004065 	.word	0x08004065
 8003f38:	08004065 	.word	0x08004065
 8003f3c:	08003fa1 	.word	0x08003fa1
 8003f40:	08004065 	.word	0x08004065
 8003f44:	08004065 	.word	0x08004065
 8003f48:	08004065 	.word	0x08004065
 8003f4c:	08003fe3 	.word	0x08003fe3
 8003f50:	08004065 	.word	0x08004065
 8003f54:	08004065 	.word	0x08004065
 8003f58:	08004065 	.word	0x08004065
 8003f5c:	08004023 	.word	0x08004023
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68b9      	ldr	r1, [r7, #8]
 8003f66:	4618      	mov	r0, r3
 8003f68:	f000 f914 	bl	8004194 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	699a      	ldr	r2, [r3, #24]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f042 0208 	orr.w	r2, r2, #8
 8003f7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	699a      	ldr	r2, [r3, #24]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f022 0204 	bic.w	r2, r2, #4
 8003f8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	6999      	ldr	r1, [r3, #24]
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	691a      	ldr	r2, [r3, #16]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	619a      	str	r2, [r3, #24]
      break;
 8003f9e:	e064      	b.n	800406a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	68b9      	ldr	r1, [r7, #8]
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f000 f95a 	bl	8004260 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	699a      	ldr	r2, [r3, #24]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	699a      	ldr	r2, [r3, #24]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	6999      	ldr	r1, [r3, #24]
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	021a      	lsls	r2, r3, #8
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	619a      	str	r2, [r3, #24]
      break;
 8003fe0:	e043      	b.n	800406a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68b9      	ldr	r1, [r7, #8]
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f000 f9a5 	bl	8004338 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	69da      	ldr	r2, [r3, #28]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f042 0208 	orr.w	r2, r2, #8
 8003ffc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	69da      	ldr	r2, [r3, #28]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f022 0204 	bic.w	r2, r2, #4
 800400c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	69d9      	ldr	r1, [r3, #28]
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	691a      	ldr	r2, [r3, #16]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	430a      	orrs	r2, r1
 800401e:	61da      	str	r2, [r3, #28]
      break;
 8004020:	e023      	b.n	800406a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68b9      	ldr	r1, [r7, #8]
 8004028:	4618      	mov	r0, r3
 800402a:	f000 f9ef 	bl	800440c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	69da      	ldr	r2, [r3, #28]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800403c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	69da      	ldr	r2, [r3, #28]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800404c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	69d9      	ldr	r1, [r3, #28]
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	021a      	lsls	r2, r3, #8
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	430a      	orrs	r2, r1
 8004060:	61da      	str	r2, [r3, #28]
      break;
 8004062:	e002      	b.n	800406a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	75fb      	strb	r3, [r7, #23]
      break;
 8004068:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2200      	movs	r2, #0
 800406e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004072:	7dfb      	ldrb	r3, [r7, #23]
}
 8004074:	4618      	mov	r0, r3
 8004076:	3718      	adds	r7, #24
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800407c:	b480      	push	{r7}
 800407e:	b085      	sub	sp, #20
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a3a      	ldr	r2, [pc, #232]	; (8004178 <TIM_Base_SetConfig+0xfc>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d00f      	beq.n	80040b4 <TIM_Base_SetConfig+0x38>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800409a:	d00b      	beq.n	80040b4 <TIM_Base_SetConfig+0x38>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a37      	ldr	r2, [pc, #220]	; (800417c <TIM_Base_SetConfig+0x100>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d007      	beq.n	80040b4 <TIM_Base_SetConfig+0x38>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4a36      	ldr	r2, [pc, #216]	; (8004180 <TIM_Base_SetConfig+0x104>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d003      	beq.n	80040b4 <TIM_Base_SetConfig+0x38>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a35      	ldr	r2, [pc, #212]	; (8004184 <TIM_Base_SetConfig+0x108>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d108      	bne.n	80040c6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a2b      	ldr	r2, [pc, #172]	; (8004178 <TIM_Base_SetConfig+0xfc>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d01b      	beq.n	8004106 <TIM_Base_SetConfig+0x8a>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040d4:	d017      	beq.n	8004106 <TIM_Base_SetConfig+0x8a>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a28      	ldr	r2, [pc, #160]	; (800417c <TIM_Base_SetConfig+0x100>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d013      	beq.n	8004106 <TIM_Base_SetConfig+0x8a>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a27      	ldr	r2, [pc, #156]	; (8004180 <TIM_Base_SetConfig+0x104>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d00f      	beq.n	8004106 <TIM_Base_SetConfig+0x8a>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a26      	ldr	r2, [pc, #152]	; (8004184 <TIM_Base_SetConfig+0x108>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d00b      	beq.n	8004106 <TIM_Base_SetConfig+0x8a>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a25      	ldr	r2, [pc, #148]	; (8004188 <TIM_Base_SetConfig+0x10c>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d007      	beq.n	8004106 <TIM_Base_SetConfig+0x8a>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a24      	ldr	r2, [pc, #144]	; (800418c <TIM_Base_SetConfig+0x110>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d003      	beq.n	8004106 <TIM_Base_SetConfig+0x8a>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a23      	ldr	r2, [pc, #140]	; (8004190 <TIM_Base_SetConfig+0x114>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d108      	bne.n	8004118 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800410c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	4313      	orrs	r3, r2
 8004116:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	4313      	orrs	r3, r2
 8004124:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	689a      	ldr	r2, [r3, #8]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a0e      	ldr	r2, [pc, #56]	; (8004178 <TIM_Base_SetConfig+0xfc>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d103      	bne.n	800414c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	691a      	ldr	r2, [r3, #16]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	f003 0301 	and.w	r3, r3, #1
 800415a:	2b01      	cmp	r3, #1
 800415c:	d105      	bne.n	800416a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	f023 0201 	bic.w	r2, r3, #1
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	611a      	str	r2, [r3, #16]
  }
}
 800416a:	bf00      	nop
 800416c:	3714      	adds	r7, #20
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	40010000 	.word	0x40010000
 800417c:	40000400 	.word	0x40000400
 8004180:	40000800 	.word	0x40000800
 8004184:	40000c00 	.word	0x40000c00
 8004188:	40014000 	.word	0x40014000
 800418c:	40014400 	.word	0x40014400
 8004190:	40014800 	.word	0x40014800

08004194 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004194:	b480      	push	{r7}
 8004196:	b087      	sub	sp, #28
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a1b      	ldr	r3, [r3, #32]
 80041a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a1b      	ldr	r3, [r3, #32]
 80041a8:	f023 0201 	bic.w	r2, r3, #1
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f023 0303 	bic.w	r3, r3, #3
 80041ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	f023 0302 	bic.w	r3, r3, #2
 80041dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a1c      	ldr	r2, [pc, #112]	; (800425c <TIM_OC1_SetConfig+0xc8>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d10c      	bne.n	800420a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	f023 0308 	bic.w	r3, r3, #8
 80041f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	697a      	ldr	r2, [r7, #20]
 80041fe:	4313      	orrs	r3, r2
 8004200:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	f023 0304 	bic.w	r3, r3, #4
 8004208:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a13      	ldr	r2, [pc, #76]	; (800425c <TIM_OC1_SetConfig+0xc8>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d111      	bne.n	8004236 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004218:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004220:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	693a      	ldr	r2, [r7, #16]
 8004228:	4313      	orrs	r3, r2
 800422a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	699b      	ldr	r3, [r3, #24]
 8004230:	693a      	ldr	r2, [r7, #16]
 8004232:	4313      	orrs	r3, r2
 8004234:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	693a      	ldr	r2, [r7, #16]
 800423a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	685a      	ldr	r2, [r3, #4]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	697a      	ldr	r2, [r7, #20]
 800424e:	621a      	str	r2, [r3, #32]
}
 8004250:	bf00      	nop
 8004252:	371c      	adds	r7, #28
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr
 800425c:	40010000 	.word	0x40010000

08004260 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004260:	b480      	push	{r7}
 8004262:	b087      	sub	sp, #28
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a1b      	ldr	r3, [r3, #32]
 800426e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a1b      	ldr	r3, [r3, #32]
 8004274:	f023 0210 	bic.w	r2, r3, #16
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800428e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004296:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	021b      	lsls	r3, r3, #8
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	f023 0320 	bic.w	r3, r3, #32
 80042aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	011b      	lsls	r3, r3, #4
 80042b2:	697a      	ldr	r2, [r7, #20]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	4a1e      	ldr	r2, [pc, #120]	; (8004334 <TIM_OC2_SetConfig+0xd4>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d10d      	bne.n	80042dc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	011b      	lsls	r3, r3, #4
 80042ce:	697a      	ldr	r2, [r7, #20]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a15      	ldr	r2, [pc, #84]	; (8004334 <TIM_OC2_SetConfig+0xd4>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d113      	bne.n	800430c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	695b      	ldr	r3, [r3, #20]
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	693a      	ldr	r2, [r7, #16]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	699b      	ldr	r3, [r3, #24]
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	693a      	ldr	r2, [r7, #16]
 8004308:	4313      	orrs	r3, r2
 800430a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	693a      	ldr	r2, [r7, #16]
 8004310:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	68fa      	ldr	r2, [r7, #12]
 8004316:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	685a      	ldr	r2, [r3, #4]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	697a      	ldr	r2, [r7, #20]
 8004324:	621a      	str	r2, [r3, #32]
}
 8004326:	bf00      	nop
 8004328:	371c      	adds	r7, #28
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	40010000 	.word	0x40010000

08004338 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004338:	b480      	push	{r7}
 800433a:	b087      	sub	sp, #28
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a1b      	ldr	r3, [r3, #32]
 800434c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	69db      	ldr	r3, [r3, #28]
 800435e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f023 0303 	bic.w	r3, r3, #3
 800436e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	4313      	orrs	r3, r2
 8004378:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004380:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	021b      	lsls	r3, r3, #8
 8004388:	697a      	ldr	r2, [r7, #20]
 800438a:	4313      	orrs	r3, r2
 800438c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a1d      	ldr	r2, [pc, #116]	; (8004408 <TIM_OC3_SetConfig+0xd0>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d10d      	bne.n	80043b2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800439c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	021b      	lsls	r3, r3, #8
 80043a4:	697a      	ldr	r2, [r7, #20]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a14      	ldr	r2, [pc, #80]	; (8004408 <TIM_OC3_SetConfig+0xd0>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d113      	bne.n	80043e2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	695b      	ldr	r3, [r3, #20]
 80043ce:	011b      	lsls	r3, r3, #4
 80043d0:	693a      	ldr	r2, [r7, #16]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	011b      	lsls	r3, r3, #4
 80043dc:	693a      	ldr	r2, [r7, #16]
 80043de:	4313      	orrs	r3, r2
 80043e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	693a      	ldr	r2, [r7, #16]
 80043e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	68fa      	ldr	r2, [r7, #12]
 80043ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	685a      	ldr	r2, [r3, #4]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	697a      	ldr	r2, [r7, #20]
 80043fa:	621a      	str	r2, [r3, #32]
}
 80043fc:	bf00      	nop
 80043fe:	371c      	adds	r7, #28
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr
 8004408:	40010000 	.word	0x40010000

0800440c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800440c:	b480      	push	{r7}
 800440e:	b087      	sub	sp, #28
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a1b      	ldr	r3, [r3, #32]
 800441a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a1b      	ldr	r3, [r3, #32]
 8004420:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	69db      	ldr	r3, [r3, #28]
 8004432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800443a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004442:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	021b      	lsls	r3, r3, #8
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	4313      	orrs	r3, r2
 800444e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004456:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	031b      	lsls	r3, r3, #12
 800445e:	693a      	ldr	r2, [r7, #16]
 8004460:	4313      	orrs	r3, r2
 8004462:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a10      	ldr	r2, [pc, #64]	; (80044a8 <TIM_OC4_SetConfig+0x9c>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d109      	bne.n	8004480 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004472:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	695b      	ldr	r3, [r3, #20]
 8004478:	019b      	lsls	r3, r3, #6
 800447a:	697a      	ldr	r2, [r7, #20]
 800447c:	4313      	orrs	r3, r2
 800447e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	697a      	ldr	r2, [r7, #20]
 8004484:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	68fa      	ldr	r2, [r7, #12]
 800448a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	685a      	ldr	r2, [r3, #4]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	693a      	ldr	r2, [r7, #16]
 8004498:	621a      	str	r2, [r3, #32]
}
 800449a:	bf00      	nop
 800449c:	371c      	adds	r7, #28
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	40010000 	.word	0x40010000

080044ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b087      	sub	sp, #28
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	f003 031f 	and.w	r3, r3, #31
 80044be:	2201      	movs	r2, #1
 80044c0:	fa02 f303 	lsl.w	r3, r2, r3
 80044c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6a1a      	ldr	r2, [r3, #32]
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	43db      	mvns	r3, r3
 80044ce:	401a      	ands	r2, r3
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6a1a      	ldr	r2, [r3, #32]
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	f003 031f 	and.w	r3, r3, #31
 80044de:	6879      	ldr	r1, [r7, #4]
 80044e0:	fa01 f303 	lsl.w	r3, r1, r3
 80044e4:	431a      	orrs	r2, r3
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	621a      	str	r2, [r3, #32]
}
 80044ea:	bf00      	nop
 80044ec:	371c      	adds	r7, #28
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr
	...

080044f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b085      	sub	sp, #20
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004508:	2b01      	cmp	r3, #1
 800450a:	d101      	bne.n	8004510 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800450c:	2302      	movs	r3, #2
 800450e:	e050      	b.n	80045b2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2202      	movs	r2, #2
 800451c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004536:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68fa      	ldr	r2, [r7, #12]
 800453e:	4313      	orrs	r3, r2
 8004540:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a1c      	ldr	r2, [pc, #112]	; (80045c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d018      	beq.n	8004586 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800455c:	d013      	beq.n	8004586 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a18      	ldr	r2, [pc, #96]	; (80045c4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d00e      	beq.n	8004586 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a16      	ldr	r2, [pc, #88]	; (80045c8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d009      	beq.n	8004586 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a15      	ldr	r2, [pc, #84]	; (80045cc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d004      	beq.n	8004586 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a13      	ldr	r2, [pc, #76]	; (80045d0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d10c      	bne.n	80045a0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800458c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	68ba      	ldr	r2, [r7, #8]
 8004594:	4313      	orrs	r3, r2
 8004596:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	68ba      	ldr	r2, [r7, #8]
 800459e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3714      	adds	r7, #20
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	40010000 	.word	0x40010000
 80045c4:	40000400 	.word	0x40000400
 80045c8:	40000800 	.word	0x40000800
 80045cc:	40000c00 	.word	0x40000c00
 80045d0:	40014000 	.word	0x40014000

080045d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b085      	sub	sp, #20
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80045de:	2300      	movs	r3, #0
 80045e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d101      	bne.n	80045f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80045ec:	2302      	movs	r3, #2
 80045ee:	e03d      	b.n	800466c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	4313      	orrs	r3, r2
 8004604:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	4313      	orrs	r3, r2
 8004612:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	4313      	orrs	r3, r2
 8004620:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4313      	orrs	r3, r2
 800462e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	4313      	orrs	r3, r2
 800463c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	695b      	ldr	r3, [r3, #20]
 8004648:	4313      	orrs	r3, r2
 800464a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	69db      	ldr	r3, [r3, #28]
 8004656:	4313      	orrs	r3, r2
 8004658:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800466a:	2300      	movs	r3, #0
}
 800466c:	4618      	mov	r0, r3
 800466e:	3714      	adds	r7, #20
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d101      	bne.n	800468a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e042      	b.n	8004710 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004690:	b2db      	uxtb	r3, r3
 8004692:	2b00      	cmp	r3, #0
 8004694:	d106      	bne.n	80046a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f7fd f9b4 	bl	8001a0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2224      	movs	r2, #36	; 0x24
 80046a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	68da      	ldr	r2, [r3, #12]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f001 f81b 	bl	80056f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	691a      	ldr	r2, [r3, #16]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	695a      	ldr	r2, [r3, #20]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68da      	ldr	r2, [r3, #12]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2220      	movs	r2, #32
 80046fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2220      	movs	r2, #32
 8004704:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800470e:	2300      	movs	r3, #0
}
 8004710:	4618      	mov	r0, r3
 8004712:	3708      	adds	r7, #8
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b08a      	sub	sp, #40	; 0x28
 800471c:	af02      	add	r7, sp, #8
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	603b      	str	r3, [r7, #0]
 8004724:	4613      	mov	r3, r2
 8004726:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004728:	2300      	movs	r3, #0
 800472a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004732:	b2db      	uxtb	r3, r3
 8004734:	2b20      	cmp	r3, #32
 8004736:	d175      	bne.n	8004824 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d002      	beq.n	8004744 <HAL_UART_Transmit+0x2c>
 800473e:	88fb      	ldrh	r3, [r7, #6]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d101      	bne.n	8004748 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e06e      	b.n	8004826 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2200      	movs	r2, #0
 800474c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2221      	movs	r2, #33	; 0x21
 8004752:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004756:	f7fd fa9d 	bl	8001c94 <HAL_GetTick>
 800475a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	88fa      	ldrh	r2, [r7, #6]
 8004760:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	88fa      	ldrh	r2, [r7, #6]
 8004766:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004770:	d108      	bne.n	8004784 <HAL_UART_Transmit+0x6c>
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d104      	bne.n	8004784 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800477a:	2300      	movs	r3, #0
 800477c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	61bb      	str	r3, [r7, #24]
 8004782:	e003      	b.n	800478c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004788:	2300      	movs	r3, #0
 800478a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800478c:	e02e      	b.n	80047ec <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	9300      	str	r3, [sp, #0]
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	2200      	movs	r2, #0
 8004796:	2180      	movs	r1, #128	; 0x80
 8004798:	68f8      	ldr	r0, [r7, #12]
 800479a:	f000 fcf4 	bl	8005186 <UART_WaitOnFlagUntilTimeout>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d005      	beq.n	80047b0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2220      	movs	r2, #32
 80047a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e03a      	b.n	8004826 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d10b      	bne.n	80047ce <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	881b      	ldrh	r3, [r3, #0]
 80047ba:	461a      	mov	r2, r3
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	3302      	adds	r3, #2
 80047ca:	61bb      	str	r3, [r7, #24]
 80047cc:	e007      	b.n	80047de <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	781a      	ldrb	r2, [r3, #0]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	3301      	adds	r3, #1
 80047dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	3b01      	subs	r3, #1
 80047e6:	b29a      	uxth	r2, r3
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d1cb      	bne.n	800478e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	9300      	str	r3, [sp, #0]
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	2200      	movs	r2, #0
 80047fe:	2140      	movs	r1, #64	; 0x40
 8004800:	68f8      	ldr	r0, [r7, #12]
 8004802:	f000 fcc0 	bl	8005186 <UART_WaitOnFlagUntilTimeout>
 8004806:	4603      	mov	r3, r0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d005      	beq.n	8004818 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2220      	movs	r2, #32
 8004810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004814:	2303      	movs	r3, #3
 8004816:	e006      	b.n	8004826 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2220      	movs	r2, #32
 800481c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004820:	2300      	movs	r3, #0
 8004822:	e000      	b.n	8004826 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004824:	2302      	movs	r3, #2
  }
}
 8004826:	4618      	mov	r0, r3
 8004828:	3720      	adds	r7, #32
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
	...

08004830 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b08c      	sub	sp, #48	; 0x30
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	4613      	mov	r3, r2
 800483c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004844:	b2db      	uxtb	r3, r3
 8004846:	2b20      	cmp	r3, #32
 8004848:	d156      	bne.n	80048f8 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d002      	beq.n	8004856 <HAL_UART_Transmit_DMA+0x26>
 8004850:	88fb      	ldrh	r3, [r7, #6]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d101      	bne.n	800485a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e04f      	b.n	80048fa <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800485a:	68ba      	ldr	r2, [r7, #8]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	88fa      	ldrh	r2, [r7, #6]
 8004864:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	88fa      	ldrh	r2, [r7, #6]
 800486a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2200      	movs	r2, #0
 8004870:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2221      	movs	r2, #33	; 0x21
 8004876:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800487e:	4a21      	ldr	r2, [pc, #132]	; (8004904 <HAL_UART_Transmit_DMA+0xd4>)
 8004880:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004886:	4a20      	ldr	r2, [pc, #128]	; (8004908 <HAL_UART_Transmit_DMA+0xd8>)
 8004888:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800488e:	4a1f      	ldr	r2, [pc, #124]	; (800490c <HAL_UART_Transmit_DMA+0xdc>)
 8004890:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004896:	2200      	movs	r2, #0
 8004898:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800489a:	f107 0308 	add.w	r3, r7, #8
 800489e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80048a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a6:	6819      	ldr	r1, [r3, #0]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	3304      	adds	r3, #4
 80048ae:	461a      	mov	r2, r3
 80048b0:	88fb      	ldrh	r3, [r7, #6]
 80048b2:	f7fe f8d7 	bl	8002a64 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80048be:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	3314      	adds	r3, #20
 80048c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	e853 3f00 	ldrex	r3, [r3]
 80048ce:	617b      	str	r3, [r7, #20]
   return(result);
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	3314      	adds	r3, #20
 80048de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048e0:	627a      	str	r2, [r7, #36]	; 0x24
 80048e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e4:	6a39      	ldr	r1, [r7, #32]
 80048e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048e8:	e841 2300 	strex	r3, r2, [r1]
 80048ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d1e5      	bne.n	80048c0 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80048f4:	2300      	movs	r3, #0
 80048f6:	e000      	b.n	80048fa <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80048f8:	2302      	movs	r3, #2
  }
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3730      	adds	r7, #48	; 0x30
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	08004ed5 	.word	0x08004ed5
 8004908:	08004f6f 	.word	0x08004f6f
 800490c:	080050f3 	.word	0x080050f3

08004910 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b084      	sub	sp, #16
 8004914:	af00      	add	r7, sp, #0
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	60b9      	str	r1, [r7, #8]
 800491a:	4613      	mov	r3, r2
 800491c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004924:	b2db      	uxtb	r3, r3
 8004926:	2b20      	cmp	r3, #32
 8004928:	d112      	bne.n	8004950 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d002      	beq.n	8004936 <HAL_UART_Receive_DMA+0x26>
 8004930:	88fb      	ldrh	r3, [r7, #6]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d101      	bne.n	800493a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e00b      	b.n	8004952 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004940:	88fb      	ldrh	r3, [r7, #6]
 8004942:	461a      	mov	r2, r3
 8004944:	68b9      	ldr	r1, [r7, #8]
 8004946:	68f8      	ldr	r0, [r7, #12]
 8004948:	f000 fc76 	bl	8005238 <UART_Start_Receive_DMA>
 800494c:	4603      	mov	r3, r0
 800494e:	e000      	b.n	8004952 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004950:	2302      	movs	r3, #2
  }
}
 8004952:	4618      	mov	r0, r3
 8004954:	3710      	adds	r7, #16
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
	...

0800495c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b0ba      	sub	sp, #232	; 0xe8
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	695b      	ldr	r3, [r3, #20]
 800497e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004982:	2300      	movs	r3, #0
 8004984:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004988:	2300      	movs	r3, #0
 800498a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800498e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004992:	f003 030f 	and.w	r3, r3, #15
 8004996:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800499a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d10f      	bne.n	80049c2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049a6:	f003 0320 	and.w	r3, r3, #32
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d009      	beq.n	80049c2 <HAL_UART_IRQHandler+0x66>
 80049ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049b2:	f003 0320 	and.w	r3, r3, #32
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d003      	beq.n	80049c2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 fddd 	bl	800557a <UART_Receive_IT>
      return;
 80049c0:	e25b      	b.n	8004e7a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80049c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	f000 80de 	beq.w	8004b88 <HAL_UART_IRQHandler+0x22c>
 80049cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049d0:	f003 0301 	and.w	r3, r3, #1
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d106      	bne.n	80049e6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80049d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049dc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	f000 80d1 	beq.w	8004b88 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80049e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049ea:	f003 0301 	and.w	r3, r3, #1
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00b      	beq.n	8004a0a <HAL_UART_IRQHandler+0xae>
 80049f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d005      	beq.n	8004a0a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a02:	f043 0201 	orr.w	r2, r3, #1
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a0e:	f003 0304 	and.w	r3, r3, #4
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00b      	beq.n	8004a2e <HAL_UART_IRQHandler+0xd2>
 8004a16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a1a:	f003 0301 	and.w	r3, r3, #1
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d005      	beq.n	8004a2e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a26:	f043 0202 	orr.w	r2, r3, #2
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a32:	f003 0302 	and.w	r3, r3, #2
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00b      	beq.n	8004a52 <HAL_UART_IRQHandler+0xf6>
 8004a3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a3e:	f003 0301 	and.w	r3, r3, #1
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d005      	beq.n	8004a52 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a4a:	f043 0204 	orr.w	r2, r3, #4
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a56:	f003 0308 	and.w	r3, r3, #8
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d011      	beq.n	8004a82 <HAL_UART_IRQHandler+0x126>
 8004a5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a62:	f003 0320 	and.w	r3, r3, #32
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d105      	bne.n	8004a76 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004a6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a6e:	f003 0301 	and.w	r3, r3, #1
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d005      	beq.n	8004a82 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a7a:	f043 0208 	orr.w	r2, r3, #8
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	f000 81f2 	beq.w	8004e70 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a90:	f003 0320 	and.w	r3, r3, #32
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d008      	beq.n	8004aaa <HAL_UART_IRQHandler+0x14e>
 8004a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a9c:	f003 0320 	and.w	r3, r3, #32
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d002      	beq.n	8004aaa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f000 fd68 	bl	800557a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	695b      	ldr	r3, [r3, #20]
 8004ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab4:	2b40      	cmp	r3, #64	; 0x40
 8004ab6:	bf0c      	ite	eq
 8004ab8:	2301      	moveq	r3, #1
 8004aba:	2300      	movne	r3, #0
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ac6:	f003 0308 	and.w	r3, r3, #8
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d103      	bne.n	8004ad6 <HAL_UART_IRQHandler+0x17a>
 8004ace:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d04f      	beq.n	8004b76 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 fc70 	bl	80053bc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	695b      	ldr	r3, [r3, #20]
 8004ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae6:	2b40      	cmp	r3, #64	; 0x40
 8004ae8:	d141      	bne.n	8004b6e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	3314      	adds	r3, #20
 8004af0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004af8:	e853 3f00 	ldrex	r3, [r3]
 8004afc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004b00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	3314      	adds	r3, #20
 8004b12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004b16:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004b1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b1e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004b22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004b26:	e841 2300 	strex	r3, r2, [r1]
 8004b2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004b2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d1d9      	bne.n	8004aea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d013      	beq.n	8004b66 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b42:	4a7e      	ldr	r2, [pc, #504]	; (8004d3c <HAL_UART_IRQHandler+0x3e0>)
 8004b44:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f7fe f852 	bl	8002bf4 <HAL_DMA_Abort_IT>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d016      	beq.n	8004b84 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004b60:	4610      	mov	r0, r2
 8004b62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b64:	e00e      	b.n	8004b84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 f99e 	bl	8004ea8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b6c:	e00a      	b.n	8004b84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 f99a 	bl	8004ea8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b74:	e006      	b.n	8004b84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 f996 	bl	8004ea8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004b82:	e175      	b.n	8004e70 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b84:	bf00      	nop
    return;
 8004b86:	e173      	b.n	8004e70 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	f040 814f 	bne.w	8004e30 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b96:	f003 0310 	and.w	r3, r3, #16
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	f000 8148 	beq.w	8004e30 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004ba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ba4:	f003 0310 	and.w	r3, r3, #16
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	f000 8141 	beq.w	8004e30 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004bae:	2300      	movs	r3, #0
 8004bb0:	60bb      	str	r3, [r7, #8]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	60bb      	str	r3, [r7, #8]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	60bb      	str	r3, [r7, #8]
 8004bc2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bce:	2b40      	cmp	r3, #64	; 0x40
 8004bd0:	f040 80b6 	bne.w	8004d40 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004be0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	f000 8145 	beq.w	8004e74 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004bee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	f080 813e 	bcs.w	8004e74 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004bfe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c04:	69db      	ldr	r3, [r3, #28]
 8004c06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c0a:	f000 8088 	beq.w	8004d1e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	330c      	adds	r3, #12
 8004c14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c1c:	e853 3f00 	ldrex	r3, [r3]
 8004c20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004c24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	330c      	adds	r3, #12
 8004c36:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004c3a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c42:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004c46:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004c4a:	e841 2300 	strex	r3, r2, [r1]
 8004c4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004c52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d1d9      	bne.n	8004c0e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	3314      	adds	r3, #20
 8004c60:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c64:	e853 3f00 	ldrex	r3, [r3]
 8004c68:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004c6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c6c:	f023 0301 	bic.w	r3, r3, #1
 8004c70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	3314      	adds	r3, #20
 8004c7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004c7e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004c82:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c84:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004c86:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004c8a:	e841 2300 	strex	r3, r2, [r1]
 8004c8e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004c90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d1e1      	bne.n	8004c5a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	3314      	adds	r3, #20
 8004c9c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ca0:	e853 3f00 	ldrex	r3, [r3]
 8004ca4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004ca6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ca8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	3314      	adds	r3, #20
 8004cb6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004cba:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004cbc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cbe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004cc0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004cc2:	e841 2300 	strex	r3, r2, [r1]
 8004cc6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004cc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d1e3      	bne.n	8004c96 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2220      	movs	r2, #32
 8004cd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	330c      	adds	r3, #12
 8004ce2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ce6:	e853 3f00 	ldrex	r3, [r3]
 8004cea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004cec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cee:	f023 0310 	bic.w	r3, r3, #16
 8004cf2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	330c      	adds	r3, #12
 8004cfc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004d00:	65ba      	str	r2, [r7, #88]	; 0x58
 8004d02:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d04:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004d06:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d08:	e841 2300 	strex	r3, r2, [r1]
 8004d0c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004d0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d1e3      	bne.n	8004cdc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f7fd fefb 	bl	8002b14 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2202      	movs	r2, #2
 8004d22:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	1ad3      	subs	r3, r2, r3
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	4619      	mov	r1, r3
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 f8c1 	bl	8004ebc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d3a:	e09b      	b.n	8004e74 <HAL_UART_IRQHandler+0x518>
 8004d3c:	08005483 	.word	0x08005483
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	f000 808e 	beq.w	8004e78 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004d5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	f000 8089 	beq.w	8004e78 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	330c      	adds	r3, #12
 8004d6c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d70:	e853 3f00 	ldrex	r3, [r3]
 8004d74:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	330c      	adds	r3, #12
 8004d86:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004d8a:	647a      	str	r2, [r7, #68]	; 0x44
 8004d8c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d92:	e841 2300 	strex	r3, r2, [r1]
 8004d96:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004d98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1e3      	bne.n	8004d66 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	3314      	adds	r3, #20
 8004da4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da8:	e853 3f00 	ldrex	r3, [r3]
 8004dac:	623b      	str	r3, [r7, #32]
   return(result);
 8004dae:	6a3b      	ldr	r3, [r7, #32]
 8004db0:	f023 0301 	bic.w	r3, r3, #1
 8004db4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	3314      	adds	r3, #20
 8004dbe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004dc2:	633a      	str	r2, [r7, #48]	; 0x30
 8004dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004dc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dca:	e841 2300 	strex	r3, r2, [r1]
 8004dce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d1e3      	bne.n	8004d9e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2220      	movs	r2, #32
 8004dda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	330c      	adds	r3, #12
 8004dea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	e853 3f00 	ldrex	r3, [r3]
 8004df2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f023 0310 	bic.w	r3, r3, #16
 8004dfa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	330c      	adds	r3, #12
 8004e04:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004e08:	61fa      	str	r2, [r7, #28]
 8004e0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e0c:	69b9      	ldr	r1, [r7, #24]
 8004e0e:	69fa      	ldr	r2, [r7, #28]
 8004e10:	e841 2300 	strex	r3, r2, [r1]
 8004e14:	617b      	str	r3, [r7, #20]
   return(result);
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d1e3      	bne.n	8004de4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2202      	movs	r2, #2
 8004e20:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e22:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e26:	4619      	mov	r1, r3
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f000 f847 	bl	8004ebc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e2e:	e023      	b.n	8004e78 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004e30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d009      	beq.n	8004e50 <HAL_UART_IRQHandler+0x4f4>
 8004e3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d003      	beq.n	8004e50 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f000 fb2e 	bl	80054aa <UART_Transmit_IT>
    return;
 8004e4e:	e014      	b.n	8004e7a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004e50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d00e      	beq.n	8004e7a <HAL_UART_IRQHandler+0x51e>
 8004e5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d008      	beq.n	8004e7a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f000 fb6e 	bl	800554a <UART_EndTransmit_IT>
    return;
 8004e6e:	e004      	b.n	8004e7a <HAL_UART_IRQHandler+0x51e>
    return;
 8004e70:	bf00      	nop
 8004e72:	e002      	b.n	8004e7a <HAL_UART_IRQHandler+0x51e>
      return;
 8004e74:	bf00      	nop
 8004e76:	e000      	b.n	8004e7a <HAL_UART_IRQHandler+0x51e>
      return;
 8004e78:	bf00      	nop
  }
}
 8004e7a:	37e8      	adds	r7, #232	; 0xe8
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b083      	sub	sp, #12
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004e88:	bf00      	nop
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004e9c:	bf00      	nop
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004eb0:	bf00      	nop
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	460b      	mov	r3, r1
 8004ec6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004ec8:	bf00      	nop
 8004eca:	370c      	adds	r7, #12
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b090      	sub	sp, #64	; 0x40
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d137      	bne.n	8004f60 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004ef0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004ef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	3314      	adds	r3, #20
 8004efc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f00:	e853 3f00 	ldrex	r3, [r3]
 8004f04:	623b      	str	r3, [r7, #32]
   return(result);
 8004f06:	6a3b      	ldr	r3, [r7, #32]
 8004f08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f0c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	3314      	adds	r3, #20
 8004f14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f16:	633a      	str	r2, [r7, #48]	; 0x30
 8004f18:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f1e:	e841 2300 	strex	r3, r2, [r1]
 8004f22:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d1e5      	bne.n	8004ef6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004f2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	330c      	adds	r3, #12
 8004f30:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	e853 3f00 	ldrex	r3, [r3]
 8004f38:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f40:	637b      	str	r3, [r7, #52]	; 0x34
 8004f42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	330c      	adds	r3, #12
 8004f48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f4a:	61fa      	str	r2, [r7, #28]
 8004f4c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f4e:	69b9      	ldr	r1, [r7, #24]
 8004f50:	69fa      	ldr	r2, [r7, #28]
 8004f52:	e841 2300 	strex	r3, r2, [r1]
 8004f56:	617b      	str	r3, [r7, #20]
   return(result);
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d1e5      	bne.n	8004f2a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004f5e:	e002      	b.n	8004f66 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004f60:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004f62:	f7fc fb29 	bl	80015b8 <HAL_UART_TxCpltCallback>
}
 8004f66:	bf00      	nop
 8004f68:	3740      	adds	r7, #64	; 0x40
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}

08004f6e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004f6e:	b580      	push	{r7, lr}
 8004f70:	b084      	sub	sp, #16
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f7a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004f7c:	68f8      	ldr	r0, [r7, #12]
 8004f7e:	f7ff ff7f 	bl	8004e80 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f82:	bf00      	nop
 8004f84:	3710      	adds	r7, #16
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}

08004f8a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004f8a:	b580      	push	{r7, lr}
 8004f8c:	b09c      	sub	sp, #112	; 0x70
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f96:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d172      	bne.n	800508c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004fa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fa8:	2200      	movs	r2, #0
 8004faa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004fac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	330c      	adds	r3, #12
 8004fb2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fb6:	e853 3f00 	ldrex	r3, [r3]
 8004fba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004fbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fbe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fc2:	66bb      	str	r3, [r7, #104]	; 0x68
 8004fc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	330c      	adds	r3, #12
 8004fca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004fcc:	65ba      	str	r2, [r7, #88]	; 0x58
 8004fce:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004fd2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004fd4:	e841 2300 	strex	r3, r2, [r1]
 8004fd8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004fda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d1e5      	bne.n	8004fac <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fe0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	3314      	adds	r3, #20
 8004fe6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fea:	e853 3f00 	ldrex	r3, [r3]
 8004fee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ff2:	f023 0301 	bic.w	r3, r3, #1
 8004ff6:	667b      	str	r3, [r7, #100]	; 0x64
 8004ff8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	3314      	adds	r3, #20
 8004ffe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005000:	647a      	str	r2, [r7, #68]	; 0x44
 8005002:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005004:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005006:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005008:	e841 2300 	strex	r3, r2, [r1]
 800500c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800500e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005010:	2b00      	cmp	r3, #0
 8005012:	d1e5      	bne.n	8004fe0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005014:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	3314      	adds	r3, #20
 800501a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800501c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501e:	e853 3f00 	ldrex	r3, [r3]
 8005022:	623b      	str	r3, [r7, #32]
   return(result);
 8005024:	6a3b      	ldr	r3, [r7, #32]
 8005026:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800502a:	663b      	str	r3, [r7, #96]	; 0x60
 800502c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	3314      	adds	r3, #20
 8005032:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005034:	633a      	str	r2, [r7, #48]	; 0x30
 8005036:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005038:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800503a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800503c:	e841 2300 	strex	r3, r2, [r1]
 8005040:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005044:	2b00      	cmp	r3, #0
 8005046:	d1e5      	bne.n	8005014 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005048:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800504a:	2220      	movs	r2, #32
 800504c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005050:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005054:	2b01      	cmp	r3, #1
 8005056:	d119      	bne.n	800508c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005058:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	330c      	adds	r3, #12
 800505e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	e853 3f00 	ldrex	r3, [r3]
 8005066:	60fb      	str	r3, [r7, #12]
   return(result);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f023 0310 	bic.w	r3, r3, #16
 800506e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005070:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	330c      	adds	r3, #12
 8005076:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005078:	61fa      	str	r2, [r7, #28]
 800507a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800507c:	69b9      	ldr	r1, [r7, #24]
 800507e:	69fa      	ldr	r2, [r7, #28]
 8005080:	e841 2300 	strex	r3, r2, [r1]
 8005084:	617b      	str	r3, [r7, #20]
   return(result);
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d1e5      	bne.n	8005058 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800508c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800508e:	2200      	movs	r2, #0
 8005090:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005092:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005096:	2b01      	cmp	r3, #1
 8005098:	d106      	bne.n	80050a8 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800509a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800509c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800509e:	4619      	mov	r1, r3
 80050a0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80050a2:	f7ff ff0b 	bl	8004ebc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80050a6:	e002      	b.n	80050ae <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80050a8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80050aa:	f7fc fa73 	bl	8001594 <HAL_UART_RxCpltCallback>
}
 80050ae:	bf00      	nop
 80050b0:	3770      	adds	r7, #112	; 0x70
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}

080050b6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80050b6:	b580      	push	{r7, lr}
 80050b8:	b084      	sub	sp, #16
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2201      	movs	r2, #1
 80050c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d108      	bne.n	80050e4 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80050d6:	085b      	lsrs	r3, r3, #1
 80050d8:	b29b      	uxth	r3, r3
 80050da:	4619      	mov	r1, r3
 80050dc:	68f8      	ldr	r0, [r7, #12]
 80050de:	f7ff feed 	bl	8004ebc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80050e2:	e002      	b.n	80050ea <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80050e4:	68f8      	ldr	r0, [r7, #12]
 80050e6:	f7ff fed5 	bl	8004e94 <HAL_UART_RxHalfCpltCallback>
}
 80050ea:	bf00      	nop
 80050ec:	3710      	adds	r7, #16
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}

080050f2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80050f2:	b580      	push	{r7, lr}
 80050f4:	b084      	sub	sp, #16
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80050fa:	2300      	movs	r3, #0
 80050fc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005102:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	695b      	ldr	r3, [r3, #20]
 800510a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800510e:	2b80      	cmp	r3, #128	; 0x80
 8005110:	bf0c      	ite	eq
 8005112:	2301      	moveq	r3, #1
 8005114:	2300      	movne	r3, #0
 8005116:	b2db      	uxtb	r3, r3
 8005118:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005120:	b2db      	uxtb	r3, r3
 8005122:	2b21      	cmp	r3, #33	; 0x21
 8005124:	d108      	bne.n	8005138 <UART_DMAError+0x46>
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d005      	beq.n	8005138 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	2200      	movs	r2, #0
 8005130:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005132:	68b8      	ldr	r0, [r7, #8]
 8005134:	f000 f91a 	bl	800536c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	695b      	ldr	r3, [r3, #20]
 800513e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005142:	2b40      	cmp	r3, #64	; 0x40
 8005144:	bf0c      	ite	eq
 8005146:	2301      	moveq	r3, #1
 8005148:	2300      	movne	r3, #0
 800514a:	b2db      	uxtb	r3, r3
 800514c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005154:	b2db      	uxtb	r3, r3
 8005156:	2b22      	cmp	r3, #34	; 0x22
 8005158:	d108      	bne.n	800516c <UART_DMAError+0x7a>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d005      	beq.n	800516c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	2200      	movs	r2, #0
 8005164:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005166:	68b8      	ldr	r0, [r7, #8]
 8005168:	f000 f928 	bl	80053bc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005170:	f043 0210 	orr.w	r2, r3, #16
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005178:	68b8      	ldr	r0, [r7, #8]
 800517a:	f7ff fe95 	bl	8004ea8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800517e:	bf00      	nop
 8005180:	3710      	adds	r7, #16
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}

08005186 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005186:	b580      	push	{r7, lr}
 8005188:	b086      	sub	sp, #24
 800518a:	af00      	add	r7, sp, #0
 800518c:	60f8      	str	r0, [r7, #12]
 800518e:	60b9      	str	r1, [r7, #8]
 8005190:	603b      	str	r3, [r7, #0]
 8005192:	4613      	mov	r3, r2
 8005194:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005196:	e03b      	b.n	8005210 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005198:	6a3b      	ldr	r3, [r7, #32]
 800519a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800519e:	d037      	beq.n	8005210 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051a0:	f7fc fd78 	bl	8001c94 <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	6a3a      	ldr	r2, [r7, #32]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d302      	bcc.n	80051b6 <UART_WaitOnFlagUntilTimeout+0x30>
 80051b0:	6a3b      	ldr	r3, [r7, #32]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d101      	bne.n	80051ba <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	e03a      	b.n	8005230 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	f003 0304 	and.w	r3, r3, #4
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d023      	beq.n	8005210 <UART_WaitOnFlagUntilTimeout+0x8a>
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	2b80      	cmp	r3, #128	; 0x80
 80051cc:	d020      	beq.n	8005210 <UART_WaitOnFlagUntilTimeout+0x8a>
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	2b40      	cmp	r3, #64	; 0x40
 80051d2:	d01d      	beq.n	8005210 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 0308 	and.w	r3, r3, #8
 80051de:	2b08      	cmp	r3, #8
 80051e0:	d116      	bne.n	8005210 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80051e2:	2300      	movs	r3, #0
 80051e4:	617b      	str	r3, [r7, #20]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	617b      	str	r3, [r7, #20]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	617b      	str	r3, [r7, #20]
 80051f6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051f8:	68f8      	ldr	r0, [r7, #12]
 80051fa:	f000 f8df 	bl	80053bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2208      	movs	r2, #8
 8005202:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2200      	movs	r2, #0
 8005208:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e00f      	b.n	8005230 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	4013      	ands	r3, r2
 800521a:	68ba      	ldr	r2, [r7, #8]
 800521c:	429a      	cmp	r2, r3
 800521e:	bf0c      	ite	eq
 8005220:	2301      	moveq	r3, #1
 8005222:	2300      	movne	r3, #0
 8005224:	b2db      	uxtb	r3, r3
 8005226:	461a      	mov	r2, r3
 8005228:	79fb      	ldrb	r3, [r7, #7]
 800522a:	429a      	cmp	r2, r3
 800522c:	d0b4      	beq.n	8005198 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800522e:	2300      	movs	r3, #0
}
 8005230:	4618      	mov	r0, r3
 8005232:	3718      	adds	r7, #24
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b098      	sub	sp, #96	; 0x60
 800523c:	af00      	add	r7, sp, #0
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	4613      	mov	r3, r2
 8005244:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005246:	68ba      	ldr	r2, [r7, #8]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	88fa      	ldrh	r2, [r7, #6]
 8005250:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2200      	movs	r2, #0
 8005256:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2222      	movs	r2, #34	; 0x22
 800525c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005264:	4a3e      	ldr	r2, [pc, #248]	; (8005360 <UART_Start_Receive_DMA+0x128>)
 8005266:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800526c:	4a3d      	ldr	r2, [pc, #244]	; (8005364 <UART_Start_Receive_DMA+0x12c>)
 800526e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005274:	4a3c      	ldr	r2, [pc, #240]	; (8005368 <UART_Start_Receive_DMA+0x130>)
 8005276:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800527c:	2200      	movs	r2, #0
 800527e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005280:	f107 0308 	add.w	r3, r7, #8
 8005284:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	3304      	adds	r3, #4
 8005290:	4619      	mov	r1, r3
 8005292:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	88fb      	ldrh	r3, [r7, #6]
 8005298:	f7fd fbe4 	bl	8002a64 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800529c:	2300      	movs	r3, #0
 800529e:	613b      	str	r3, [r7, #16]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	613b      	str	r3, [r7, #16]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	613b      	str	r3, [r7, #16]
 80052b0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d019      	beq.n	80052ee <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	330c      	adds	r3, #12
 80052c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052c4:	e853 3f00 	ldrex	r3, [r3]
 80052c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80052ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052d0:	65bb      	str	r3, [r7, #88]	; 0x58
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	330c      	adds	r3, #12
 80052d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80052da:	64fa      	str	r2, [r7, #76]	; 0x4c
 80052dc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052de:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80052e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80052e2:	e841 2300 	strex	r3, r2, [r1]
 80052e6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80052e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d1e5      	bne.n	80052ba <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	3314      	adds	r3, #20
 80052f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052f8:	e853 3f00 	ldrex	r3, [r3]
 80052fc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80052fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005300:	f043 0301 	orr.w	r3, r3, #1
 8005304:	657b      	str	r3, [r7, #84]	; 0x54
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	3314      	adds	r3, #20
 800530c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800530e:	63ba      	str	r2, [r7, #56]	; 0x38
 8005310:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005312:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005314:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005316:	e841 2300 	strex	r3, r2, [r1]
 800531a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800531c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531e:	2b00      	cmp	r3, #0
 8005320:	d1e5      	bne.n	80052ee <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	3314      	adds	r3, #20
 8005328:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	e853 3f00 	ldrex	r3, [r3]
 8005330:	617b      	str	r3, [r7, #20]
   return(result);
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005338:	653b      	str	r3, [r7, #80]	; 0x50
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	3314      	adds	r3, #20
 8005340:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005342:	627a      	str	r2, [r7, #36]	; 0x24
 8005344:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005346:	6a39      	ldr	r1, [r7, #32]
 8005348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800534a:	e841 2300 	strex	r3, r2, [r1]
 800534e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005350:	69fb      	ldr	r3, [r7, #28]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d1e5      	bne.n	8005322 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005356:	2300      	movs	r3, #0
}
 8005358:	4618      	mov	r0, r3
 800535a:	3760      	adds	r7, #96	; 0x60
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}
 8005360:	08004f8b 	.word	0x08004f8b
 8005364:	080050b7 	.word	0x080050b7
 8005368:	080050f3 	.word	0x080050f3

0800536c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800536c:	b480      	push	{r7}
 800536e:	b089      	sub	sp, #36	; 0x24
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	330c      	adds	r3, #12
 800537a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	e853 3f00 	ldrex	r3, [r3]
 8005382:	60bb      	str	r3, [r7, #8]
   return(result);
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800538a:	61fb      	str	r3, [r7, #28]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	330c      	adds	r3, #12
 8005392:	69fa      	ldr	r2, [r7, #28]
 8005394:	61ba      	str	r2, [r7, #24]
 8005396:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005398:	6979      	ldr	r1, [r7, #20]
 800539a:	69ba      	ldr	r2, [r7, #24]
 800539c:	e841 2300 	strex	r3, r2, [r1]
 80053a0:	613b      	str	r3, [r7, #16]
   return(result);
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d1e5      	bne.n	8005374 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2220      	movs	r2, #32
 80053ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 80053b0:	bf00      	nop
 80053b2:	3724      	adds	r7, #36	; 0x24
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053bc:	b480      	push	{r7}
 80053be:	b095      	sub	sp, #84	; 0x54
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	330c      	adds	r3, #12
 80053ca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ce:	e853 3f00 	ldrex	r3, [r3]
 80053d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80053d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	330c      	adds	r3, #12
 80053e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80053e4:	643a      	str	r2, [r7, #64]	; 0x40
 80053e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80053ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80053ec:	e841 2300 	strex	r3, r2, [r1]
 80053f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80053f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d1e5      	bne.n	80053c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	3314      	adds	r3, #20
 80053fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005400:	6a3b      	ldr	r3, [r7, #32]
 8005402:	e853 3f00 	ldrex	r3, [r3]
 8005406:	61fb      	str	r3, [r7, #28]
   return(result);
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	f023 0301 	bic.w	r3, r3, #1
 800540e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	3314      	adds	r3, #20
 8005416:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005418:	62fa      	str	r2, [r7, #44]	; 0x2c
 800541a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800541c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800541e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005420:	e841 2300 	strex	r3, r2, [r1]
 8005424:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005428:	2b00      	cmp	r3, #0
 800542a:	d1e5      	bne.n	80053f8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005430:	2b01      	cmp	r3, #1
 8005432:	d119      	bne.n	8005468 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	330c      	adds	r3, #12
 800543a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	e853 3f00 	ldrex	r3, [r3]
 8005442:	60bb      	str	r3, [r7, #8]
   return(result);
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	f023 0310 	bic.w	r3, r3, #16
 800544a:	647b      	str	r3, [r7, #68]	; 0x44
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	330c      	adds	r3, #12
 8005452:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005454:	61ba      	str	r2, [r7, #24]
 8005456:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005458:	6979      	ldr	r1, [r7, #20]
 800545a:	69ba      	ldr	r2, [r7, #24]
 800545c:	e841 2300 	strex	r3, r2, [r1]
 8005460:	613b      	str	r3, [r7, #16]
   return(result);
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d1e5      	bne.n	8005434 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2220      	movs	r2, #32
 800546c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005476:	bf00      	nop
 8005478:	3754      	adds	r7, #84	; 0x54
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr

08005482 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005482:	b580      	push	{r7, lr}
 8005484:	b084      	sub	sp, #16
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800548e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2200      	movs	r2, #0
 8005494:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2200      	movs	r2, #0
 800549a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800549c:	68f8      	ldr	r0, [r7, #12]
 800549e:	f7ff fd03 	bl	8004ea8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054a2:	bf00      	nop
 80054a4:	3710      	adds	r7, #16
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}

080054aa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80054aa:	b480      	push	{r7}
 80054ac:	b085      	sub	sp, #20
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	2b21      	cmp	r3, #33	; 0x21
 80054bc:	d13e      	bne.n	800553c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054c6:	d114      	bne.n	80054f2 <UART_Transmit_IT+0x48>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	691b      	ldr	r3, [r3, #16]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d110      	bne.n	80054f2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6a1b      	ldr	r3, [r3, #32]
 80054d4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	881b      	ldrh	r3, [r3, #0]
 80054da:	461a      	mov	r2, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054e4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a1b      	ldr	r3, [r3, #32]
 80054ea:	1c9a      	adds	r2, r3, #2
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	621a      	str	r2, [r3, #32]
 80054f0:	e008      	b.n	8005504 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a1b      	ldr	r3, [r3, #32]
 80054f6:	1c59      	adds	r1, r3, #1
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	6211      	str	r1, [r2, #32]
 80054fc:	781a      	ldrb	r2, [r3, #0]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005508:	b29b      	uxth	r3, r3
 800550a:	3b01      	subs	r3, #1
 800550c:	b29b      	uxth	r3, r3
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	4619      	mov	r1, r3
 8005512:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005514:	2b00      	cmp	r3, #0
 8005516:	d10f      	bne.n	8005538 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	68da      	ldr	r2, [r3, #12]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005526:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	68da      	ldr	r2, [r3, #12]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005536:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005538:	2300      	movs	r3, #0
 800553a:	e000      	b.n	800553e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800553c:	2302      	movs	r3, #2
  }
}
 800553e:	4618      	mov	r0, r3
 8005540:	3714      	adds	r7, #20
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr

0800554a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800554a:	b580      	push	{r7, lr}
 800554c:	b082      	sub	sp, #8
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	68da      	ldr	r2, [r3, #12]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005560:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2220      	movs	r2, #32
 8005566:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f7fc f824 	bl	80015b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	3708      	adds	r7, #8
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800557a:	b580      	push	{r7, lr}
 800557c:	b08c      	sub	sp, #48	; 0x30
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005588:	b2db      	uxtb	r3, r3
 800558a:	2b22      	cmp	r3, #34	; 0x22
 800558c:	f040 80ae 	bne.w	80056ec <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005598:	d117      	bne.n	80055ca <UART_Receive_IT+0x50>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d113      	bne.n	80055ca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80055a2:	2300      	movs	r3, #0
 80055a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055aa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055b8:	b29a      	uxth	r2, r3
 80055ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055bc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c2:	1c9a      	adds	r2, r3, #2
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	629a      	str	r2, [r3, #40]	; 0x28
 80055c8:	e026      	b.n	8005618 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80055d0:	2300      	movs	r3, #0
 80055d2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055dc:	d007      	beq.n	80055ee <UART_Receive_IT+0x74>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d10a      	bne.n	80055fc <UART_Receive_IT+0x82>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d106      	bne.n	80055fc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	b2da      	uxtb	r2, r3
 80055f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055f8:	701a      	strb	r2, [r3, #0]
 80055fa:	e008      	b.n	800560e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	b2db      	uxtb	r3, r3
 8005604:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005608:	b2da      	uxtb	r2, r3
 800560a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800560c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005612:	1c5a      	adds	r2, r3, #1
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800561c:	b29b      	uxth	r3, r3
 800561e:	3b01      	subs	r3, #1
 8005620:	b29b      	uxth	r3, r3
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	4619      	mov	r1, r3
 8005626:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005628:	2b00      	cmp	r3, #0
 800562a:	d15d      	bne.n	80056e8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	68da      	ldr	r2, [r3, #12]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f022 0220 	bic.w	r2, r2, #32
 800563a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68da      	ldr	r2, [r3, #12]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800564a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	695a      	ldr	r2, [r3, #20]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f022 0201 	bic.w	r2, r2, #1
 800565a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2220      	movs	r2, #32
 8005660:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800566e:	2b01      	cmp	r3, #1
 8005670:	d135      	bne.n	80056de <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	330c      	adds	r3, #12
 800567e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	e853 3f00 	ldrex	r3, [r3]
 8005686:	613b      	str	r3, [r7, #16]
   return(result);
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	f023 0310 	bic.w	r3, r3, #16
 800568e:	627b      	str	r3, [r7, #36]	; 0x24
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	330c      	adds	r3, #12
 8005696:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005698:	623a      	str	r2, [r7, #32]
 800569a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800569c:	69f9      	ldr	r1, [r7, #28]
 800569e:	6a3a      	ldr	r2, [r7, #32]
 80056a0:	e841 2300 	strex	r3, r2, [r1]
 80056a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80056a6:	69bb      	ldr	r3, [r7, #24]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d1e5      	bne.n	8005678 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 0310 	and.w	r3, r3, #16
 80056b6:	2b10      	cmp	r3, #16
 80056b8:	d10a      	bne.n	80056d0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80056ba:	2300      	movs	r3, #0
 80056bc:	60fb      	str	r3, [r7, #12]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	60fb      	str	r3, [r7, #12]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	60fb      	str	r3, [r7, #12]
 80056ce:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80056d4:	4619      	mov	r1, r3
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f7ff fbf0 	bl	8004ebc <HAL_UARTEx_RxEventCallback>
 80056dc:	e002      	b.n	80056e4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f7fb ff58 	bl	8001594 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80056e4:	2300      	movs	r3, #0
 80056e6:	e002      	b.n	80056ee <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80056e8:	2300      	movs	r3, #0
 80056ea:	e000      	b.n	80056ee <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80056ec:	2302      	movs	r3, #2
  }
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3730      	adds	r7, #48	; 0x30
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
	...

080056f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056fc:	b0c0      	sub	sp, #256	; 0x100
 80056fe:	af00      	add	r7, sp, #0
 8005700:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	691b      	ldr	r3, [r3, #16]
 800570c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005714:	68d9      	ldr	r1, [r3, #12]
 8005716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	ea40 0301 	orr.w	r3, r0, r1
 8005720:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005726:	689a      	ldr	r2, [r3, #8]
 8005728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	431a      	orrs	r2, r3
 8005730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005734:	695b      	ldr	r3, [r3, #20]
 8005736:	431a      	orrs	r2, r3
 8005738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800573c:	69db      	ldr	r3, [r3, #28]
 800573e:	4313      	orrs	r3, r2
 8005740:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005750:	f021 010c 	bic.w	r1, r1, #12
 8005754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800575e:	430b      	orrs	r3, r1
 8005760:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005762:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	695b      	ldr	r3, [r3, #20]
 800576a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800576e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005772:	6999      	ldr	r1, [r3, #24]
 8005774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	ea40 0301 	orr.w	r3, r0, r1
 800577e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	4b8f      	ldr	r3, [pc, #572]	; (80059c4 <UART_SetConfig+0x2cc>)
 8005788:	429a      	cmp	r2, r3
 800578a:	d005      	beq.n	8005798 <UART_SetConfig+0xa0>
 800578c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	4b8d      	ldr	r3, [pc, #564]	; (80059c8 <UART_SetConfig+0x2d0>)
 8005794:	429a      	cmp	r2, r3
 8005796:	d104      	bne.n	80057a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005798:	f7fe fa9a 	bl	8003cd0 <HAL_RCC_GetPCLK2Freq>
 800579c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80057a0:	e003      	b.n	80057aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80057a2:	f7fe fa81 	bl	8003ca8 <HAL_RCC_GetPCLK1Freq>
 80057a6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057ae:	69db      	ldr	r3, [r3, #28]
 80057b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057b4:	f040 810c 	bne.w	80059d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80057b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057bc:	2200      	movs	r2, #0
 80057be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80057c2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80057c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80057ca:	4622      	mov	r2, r4
 80057cc:	462b      	mov	r3, r5
 80057ce:	1891      	adds	r1, r2, r2
 80057d0:	65b9      	str	r1, [r7, #88]	; 0x58
 80057d2:	415b      	adcs	r3, r3
 80057d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80057da:	4621      	mov	r1, r4
 80057dc:	eb12 0801 	adds.w	r8, r2, r1
 80057e0:	4629      	mov	r1, r5
 80057e2:	eb43 0901 	adc.w	r9, r3, r1
 80057e6:	f04f 0200 	mov.w	r2, #0
 80057ea:	f04f 0300 	mov.w	r3, #0
 80057ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80057f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80057f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80057fa:	4690      	mov	r8, r2
 80057fc:	4699      	mov	r9, r3
 80057fe:	4623      	mov	r3, r4
 8005800:	eb18 0303 	adds.w	r3, r8, r3
 8005804:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005808:	462b      	mov	r3, r5
 800580a:	eb49 0303 	adc.w	r3, r9, r3
 800580e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800581e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005822:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005826:	460b      	mov	r3, r1
 8005828:	18db      	adds	r3, r3, r3
 800582a:	653b      	str	r3, [r7, #80]	; 0x50
 800582c:	4613      	mov	r3, r2
 800582e:	eb42 0303 	adc.w	r3, r2, r3
 8005832:	657b      	str	r3, [r7, #84]	; 0x54
 8005834:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005838:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800583c:	f7fb fa0c 	bl	8000c58 <__aeabi_uldivmod>
 8005840:	4602      	mov	r2, r0
 8005842:	460b      	mov	r3, r1
 8005844:	4b61      	ldr	r3, [pc, #388]	; (80059cc <UART_SetConfig+0x2d4>)
 8005846:	fba3 2302 	umull	r2, r3, r3, r2
 800584a:	095b      	lsrs	r3, r3, #5
 800584c:	011c      	lsls	r4, r3, #4
 800584e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005852:	2200      	movs	r2, #0
 8005854:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005858:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800585c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005860:	4642      	mov	r2, r8
 8005862:	464b      	mov	r3, r9
 8005864:	1891      	adds	r1, r2, r2
 8005866:	64b9      	str	r1, [r7, #72]	; 0x48
 8005868:	415b      	adcs	r3, r3
 800586a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800586c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005870:	4641      	mov	r1, r8
 8005872:	eb12 0a01 	adds.w	sl, r2, r1
 8005876:	4649      	mov	r1, r9
 8005878:	eb43 0b01 	adc.w	fp, r3, r1
 800587c:	f04f 0200 	mov.w	r2, #0
 8005880:	f04f 0300 	mov.w	r3, #0
 8005884:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005888:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800588c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005890:	4692      	mov	sl, r2
 8005892:	469b      	mov	fp, r3
 8005894:	4643      	mov	r3, r8
 8005896:	eb1a 0303 	adds.w	r3, sl, r3
 800589a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800589e:	464b      	mov	r3, r9
 80058a0:	eb4b 0303 	adc.w	r3, fp, r3
 80058a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80058a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80058b4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80058b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80058bc:	460b      	mov	r3, r1
 80058be:	18db      	adds	r3, r3, r3
 80058c0:	643b      	str	r3, [r7, #64]	; 0x40
 80058c2:	4613      	mov	r3, r2
 80058c4:	eb42 0303 	adc.w	r3, r2, r3
 80058c8:	647b      	str	r3, [r7, #68]	; 0x44
 80058ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80058ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80058d2:	f7fb f9c1 	bl	8000c58 <__aeabi_uldivmod>
 80058d6:	4602      	mov	r2, r0
 80058d8:	460b      	mov	r3, r1
 80058da:	4611      	mov	r1, r2
 80058dc:	4b3b      	ldr	r3, [pc, #236]	; (80059cc <UART_SetConfig+0x2d4>)
 80058de:	fba3 2301 	umull	r2, r3, r3, r1
 80058e2:	095b      	lsrs	r3, r3, #5
 80058e4:	2264      	movs	r2, #100	; 0x64
 80058e6:	fb02 f303 	mul.w	r3, r2, r3
 80058ea:	1acb      	subs	r3, r1, r3
 80058ec:	00db      	lsls	r3, r3, #3
 80058ee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80058f2:	4b36      	ldr	r3, [pc, #216]	; (80059cc <UART_SetConfig+0x2d4>)
 80058f4:	fba3 2302 	umull	r2, r3, r3, r2
 80058f8:	095b      	lsrs	r3, r3, #5
 80058fa:	005b      	lsls	r3, r3, #1
 80058fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005900:	441c      	add	r4, r3
 8005902:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005906:	2200      	movs	r2, #0
 8005908:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800590c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005910:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005914:	4642      	mov	r2, r8
 8005916:	464b      	mov	r3, r9
 8005918:	1891      	adds	r1, r2, r2
 800591a:	63b9      	str	r1, [r7, #56]	; 0x38
 800591c:	415b      	adcs	r3, r3
 800591e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005920:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005924:	4641      	mov	r1, r8
 8005926:	1851      	adds	r1, r2, r1
 8005928:	6339      	str	r1, [r7, #48]	; 0x30
 800592a:	4649      	mov	r1, r9
 800592c:	414b      	adcs	r3, r1
 800592e:	637b      	str	r3, [r7, #52]	; 0x34
 8005930:	f04f 0200 	mov.w	r2, #0
 8005934:	f04f 0300 	mov.w	r3, #0
 8005938:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800593c:	4659      	mov	r1, fp
 800593e:	00cb      	lsls	r3, r1, #3
 8005940:	4651      	mov	r1, sl
 8005942:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005946:	4651      	mov	r1, sl
 8005948:	00ca      	lsls	r2, r1, #3
 800594a:	4610      	mov	r0, r2
 800594c:	4619      	mov	r1, r3
 800594e:	4603      	mov	r3, r0
 8005950:	4642      	mov	r2, r8
 8005952:	189b      	adds	r3, r3, r2
 8005954:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005958:	464b      	mov	r3, r9
 800595a:	460a      	mov	r2, r1
 800595c:	eb42 0303 	adc.w	r3, r2, r3
 8005960:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005970:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005974:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005978:	460b      	mov	r3, r1
 800597a:	18db      	adds	r3, r3, r3
 800597c:	62bb      	str	r3, [r7, #40]	; 0x28
 800597e:	4613      	mov	r3, r2
 8005980:	eb42 0303 	adc.w	r3, r2, r3
 8005984:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005986:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800598a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800598e:	f7fb f963 	bl	8000c58 <__aeabi_uldivmod>
 8005992:	4602      	mov	r2, r0
 8005994:	460b      	mov	r3, r1
 8005996:	4b0d      	ldr	r3, [pc, #52]	; (80059cc <UART_SetConfig+0x2d4>)
 8005998:	fba3 1302 	umull	r1, r3, r3, r2
 800599c:	095b      	lsrs	r3, r3, #5
 800599e:	2164      	movs	r1, #100	; 0x64
 80059a0:	fb01 f303 	mul.w	r3, r1, r3
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	00db      	lsls	r3, r3, #3
 80059a8:	3332      	adds	r3, #50	; 0x32
 80059aa:	4a08      	ldr	r2, [pc, #32]	; (80059cc <UART_SetConfig+0x2d4>)
 80059ac:	fba2 2303 	umull	r2, r3, r2, r3
 80059b0:	095b      	lsrs	r3, r3, #5
 80059b2:	f003 0207 	and.w	r2, r3, #7
 80059b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4422      	add	r2, r4
 80059be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80059c0:	e105      	b.n	8005bce <UART_SetConfig+0x4d6>
 80059c2:	bf00      	nop
 80059c4:	40011000 	.word	0x40011000
 80059c8:	40011400 	.word	0x40011400
 80059cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80059d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059d4:	2200      	movs	r2, #0
 80059d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80059da:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80059de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80059e2:	4642      	mov	r2, r8
 80059e4:	464b      	mov	r3, r9
 80059e6:	1891      	adds	r1, r2, r2
 80059e8:	6239      	str	r1, [r7, #32]
 80059ea:	415b      	adcs	r3, r3
 80059ec:	627b      	str	r3, [r7, #36]	; 0x24
 80059ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80059f2:	4641      	mov	r1, r8
 80059f4:	1854      	adds	r4, r2, r1
 80059f6:	4649      	mov	r1, r9
 80059f8:	eb43 0501 	adc.w	r5, r3, r1
 80059fc:	f04f 0200 	mov.w	r2, #0
 8005a00:	f04f 0300 	mov.w	r3, #0
 8005a04:	00eb      	lsls	r3, r5, #3
 8005a06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a0a:	00e2      	lsls	r2, r4, #3
 8005a0c:	4614      	mov	r4, r2
 8005a0e:	461d      	mov	r5, r3
 8005a10:	4643      	mov	r3, r8
 8005a12:	18e3      	adds	r3, r4, r3
 8005a14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005a18:	464b      	mov	r3, r9
 8005a1a:	eb45 0303 	adc.w	r3, r5, r3
 8005a1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005a2e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005a32:	f04f 0200 	mov.w	r2, #0
 8005a36:	f04f 0300 	mov.w	r3, #0
 8005a3a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005a3e:	4629      	mov	r1, r5
 8005a40:	008b      	lsls	r3, r1, #2
 8005a42:	4621      	mov	r1, r4
 8005a44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a48:	4621      	mov	r1, r4
 8005a4a:	008a      	lsls	r2, r1, #2
 8005a4c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005a50:	f7fb f902 	bl	8000c58 <__aeabi_uldivmod>
 8005a54:	4602      	mov	r2, r0
 8005a56:	460b      	mov	r3, r1
 8005a58:	4b60      	ldr	r3, [pc, #384]	; (8005bdc <UART_SetConfig+0x4e4>)
 8005a5a:	fba3 2302 	umull	r2, r3, r3, r2
 8005a5e:	095b      	lsrs	r3, r3, #5
 8005a60:	011c      	lsls	r4, r3, #4
 8005a62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a66:	2200      	movs	r2, #0
 8005a68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005a6c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005a70:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005a74:	4642      	mov	r2, r8
 8005a76:	464b      	mov	r3, r9
 8005a78:	1891      	adds	r1, r2, r2
 8005a7a:	61b9      	str	r1, [r7, #24]
 8005a7c:	415b      	adcs	r3, r3
 8005a7e:	61fb      	str	r3, [r7, #28]
 8005a80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a84:	4641      	mov	r1, r8
 8005a86:	1851      	adds	r1, r2, r1
 8005a88:	6139      	str	r1, [r7, #16]
 8005a8a:	4649      	mov	r1, r9
 8005a8c:	414b      	adcs	r3, r1
 8005a8e:	617b      	str	r3, [r7, #20]
 8005a90:	f04f 0200 	mov.w	r2, #0
 8005a94:	f04f 0300 	mov.w	r3, #0
 8005a98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a9c:	4659      	mov	r1, fp
 8005a9e:	00cb      	lsls	r3, r1, #3
 8005aa0:	4651      	mov	r1, sl
 8005aa2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005aa6:	4651      	mov	r1, sl
 8005aa8:	00ca      	lsls	r2, r1, #3
 8005aaa:	4610      	mov	r0, r2
 8005aac:	4619      	mov	r1, r3
 8005aae:	4603      	mov	r3, r0
 8005ab0:	4642      	mov	r2, r8
 8005ab2:	189b      	adds	r3, r3, r2
 8005ab4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005ab8:	464b      	mov	r3, r9
 8005aba:	460a      	mov	r2, r1
 8005abc:	eb42 0303 	adc.w	r3, r2, r3
 8005ac0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	67bb      	str	r3, [r7, #120]	; 0x78
 8005ace:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005ad0:	f04f 0200 	mov.w	r2, #0
 8005ad4:	f04f 0300 	mov.w	r3, #0
 8005ad8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005adc:	4649      	mov	r1, r9
 8005ade:	008b      	lsls	r3, r1, #2
 8005ae0:	4641      	mov	r1, r8
 8005ae2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ae6:	4641      	mov	r1, r8
 8005ae8:	008a      	lsls	r2, r1, #2
 8005aea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005aee:	f7fb f8b3 	bl	8000c58 <__aeabi_uldivmod>
 8005af2:	4602      	mov	r2, r0
 8005af4:	460b      	mov	r3, r1
 8005af6:	4b39      	ldr	r3, [pc, #228]	; (8005bdc <UART_SetConfig+0x4e4>)
 8005af8:	fba3 1302 	umull	r1, r3, r3, r2
 8005afc:	095b      	lsrs	r3, r3, #5
 8005afe:	2164      	movs	r1, #100	; 0x64
 8005b00:	fb01 f303 	mul.w	r3, r1, r3
 8005b04:	1ad3      	subs	r3, r2, r3
 8005b06:	011b      	lsls	r3, r3, #4
 8005b08:	3332      	adds	r3, #50	; 0x32
 8005b0a:	4a34      	ldr	r2, [pc, #208]	; (8005bdc <UART_SetConfig+0x4e4>)
 8005b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b10:	095b      	lsrs	r3, r3, #5
 8005b12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b16:	441c      	add	r4, r3
 8005b18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	673b      	str	r3, [r7, #112]	; 0x70
 8005b20:	677a      	str	r2, [r7, #116]	; 0x74
 8005b22:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005b26:	4642      	mov	r2, r8
 8005b28:	464b      	mov	r3, r9
 8005b2a:	1891      	adds	r1, r2, r2
 8005b2c:	60b9      	str	r1, [r7, #8]
 8005b2e:	415b      	adcs	r3, r3
 8005b30:	60fb      	str	r3, [r7, #12]
 8005b32:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b36:	4641      	mov	r1, r8
 8005b38:	1851      	adds	r1, r2, r1
 8005b3a:	6039      	str	r1, [r7, #0]
 8005b3c:	4649      	mov	r1, r9
 8005b3e:	414b      	adcs	r3, r1
 8005b40:	607b      	str	r3, [r7, #4]
 8005b42:	f04f 0200 	mov.w	r2, #0
 8005b46:	f04f 0300 	mov.w	r3, #0
 8005b4a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005b4e:	4659      	mov	r1, fp
 8005b50:	00cb      	lsls	r3, r1, #3
 8005b52:	4651      	mov	r1, sl
 8005b54:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b58:	4651      	mov	r1, sl
 8005b5a:	00ca      	lsls	r2, r1, #3
 8005b5c:	4610      	mov	r0, r2
 8005b5e:	4619      	mov	r1, r3
 8005b60:	4603      	mov	r3, r0
 8005b62:	4642      	mov	r2, r8
 8005b64:	189b      	adds	r3, r3, r2
 8005b66:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b68:	464b      	mov	r3, r9
 8005b6a:	460a      	mov	r2, r1
 8005b6c:	eb42 0303 	adc.w	r3, r2, r3
 8005b70:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	663b      	str	r3, [r7, #96]	; 0x60
 8005b7c:	667a      	str	r2, [r7, #100]	; 0x64
 8005b7e:	f04f 0200 	mov.w	r2, #0
 8005b82:	f04f 0300 	mov.w	r3, #0
 8005b86:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005b8a:	4649      	mov	r1, r9
 8005b8c:	008b      	lsls	r3, r1, #2
 8005b8e:	4641      	mov	r1, r8
 8005b90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b94:	4641      	mov	r1, r8
 8005b96:	008a      	lsls	r2, r1, #2
 8005b98:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005b9c:	f7fb f85c 	bl	8000c58 <__aeabi_uldivmod>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	460b      	mov	r3, r1
 8005ba4:	4b0d      	ldr	r3, [pc, #52]	; (8005bdc <UART_SetConfig+0x4e4>)
 8005ba6:	fba3 1302 	umull	r1, r3, r3, r2
 8005baa:	095b      	lsrs	r3, r3, #5
 8005bac:	2164      	movs	r1, #100	; 0x64
 8005bae:	fb01 f303 	mul.w	r3, r1, r3
 8005bb2:	1ad3      	subs	r3, r2, r3
 8005bb4:	011b      	lsls	r3, r3, #4
 8005bb6:	3332      	adds	r3, #50	; 0x32
 8005bb8:	4a08      	ldr	r2, [pc, #32]	; (8005bdc <UART_SetConfig+0x4e4>)
 8005bba:	fba2 2303 	umull	r2, r3, r2, r3
 8005bbe:	095b      	lsrs	r3, r3, #5
 8005bc0:	f003 020f 	and.w	r2, r3, #15
 8005bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4422      	add	r2, r4
 8005bcc:	609a      	str	r2, [r3, #8]
}
 8005bce:	bf00      	nop
 8005bd0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005bda:	bf00      	nop
 8005bdc:	51eb851f 	.word	0x51eb851f

08005be0 <__NVIC_SetPriority>:
{
 8005be0:	b480      	push	{r7}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	4603      	mov	r3, r0
 8005be8:	6039      	str	r1, [r7, #0]
 8005bea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	db0a      	blt.n	8005c0a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	b2da      	uxtb	r2, r3
 8005bf8:	490c      	ldr	r1, [pc, #48]	; (8005c2c <__NVIC_SetPriority+0x4c>)
 8005bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bfe:	0112      	lsls	r2, r2, #4
 8005c00:	b2d2      	uxtb	r2, r2
 8005c02:	440b      	add	r3, r1
 8005c04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005c08:	e00a      	b.n	8005c20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	b2da      	uxtb	r2, r3
 8005c0e:	4908      	ldr	r1, [pc, #32]	; (8005c30 <__NVIC_SetPriority+0x50>)
 8005c10:	79fb      	ldrb	r3, [r7, #7]
 8005c12:	f003 030f 	and.w	r3, r3, #15
 8005c16:	3b04      	subs	r3, #4
 8005c18:	0112      	lsls	r2, r2, #4
 8005c1a:	b2d2      	uxtb	r2, r2
 8005c1c:	440b      	add	r3, r1
 8005c1e:	761a      	strb	r2, [r3, #24]
}
 8005c20:	bf00      	nop
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr
 8005c2c:	e000e100 	.word	0xe000e100
 8005c30:	e000ed00 	.word	0xe000ed00

08005c34 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005c34:	b580      	push	{r7, lr}
 8005c36:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005c38:	2100      	movs	r1, #0
 8005c3a:	f06f 0004 	mvn.w	r0, #4
 8005c3e:	f7ff ffcf 	bl	8005be0 <__NVIC_SetPriority>
#endif
}
 8005c42:	bf00      	nop
 8005c44:	bd80      	pop	{r7, pc}
	...

08005c48 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c4e:	f3ef 8305 	mrs	r3, IPSR
 8005c52:	603b      	str	r3, [r7, #0]
  return(result);
 8005c54:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d003      	beq.n	8005c62 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005c5a:	f06f 0305 	mvn.w	r3, #5
 8005c5e:	607b      	str	r3, [r7, #4]
 8005c60:	e00c      	b.n	8005c7c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005c62:	4b0a      	ldr	r3, [pc, #40]	; (8005c8c <osKernelInitialize+0x44>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d105      	bne.n	8005c76 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005c6a:	4b08      	ldr	r3, [pc, #32]	; (8005c8c <osKernelInitialize+0x44>)
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005c70:	2300      	movs	r3, #0
 8005c72:	607b      	str	r3, [r7, #4]
 8005c74:	e002      	b.n	8005c7c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005c76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c7a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005c7c:	687b      	ldr	r3, [r7, #4]
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	370c      	adds	r7, #12
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr
 8005c8a:	bf00      	nop
 8005c8c:	20000410 	.word	0x20000410

08005c90 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b082      	sub	sp, #8
 8005c94:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c96:	f3ef 8305 	mrs	r3, IPSR
 8005c9a:	603b      	str	r3, [r7, #0]
  return(result);
 8005c9c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d003      	beq.n	8005caa <osKernelStart+0x1a>
    stat = osErrorISR;
 8005ca2:	f06f 0305 	mvn.w	r3, #5
 8005ca6:	607b      	str	r3, [r7, #4]
 8005ca8:	e010      	b.n	8005ccc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005caa:	4b0b      	ldr	r3, [pc, #44]	; (8005cd8 <osKernelStart+0x48>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d109      	bne.n	8005cc6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005cb2:	f7ff ffbf 	bl	8005c34 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005cb6:	4b08      	ldr	r3, [pc, #32]	; (8005cd8 <osKernelStart+0x48>)
 8005cb8:	2202      	movs	r2, #2
 8005cba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005cbc:	f001 f866 	bl	8006d8c <vTaskStartScheduler>
      stat = osOK;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	607b      	str	r3, [r7, #4]
 8005cc4:	e002      	b.n	8005ccc <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005cc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005cca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005ccc:	687b      	ldr	r3, [r7, #4]
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3708      	adds	r7, #8
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	20000410 	.word	0x20000410

08005cdc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b08e      	sub	sp, #56	; 0x38
 8005ce0:	af04      	add	r7, sp, #16
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cec:	f3ef 8305 	mrs	r3, IPSR
 8005cf0:	617b      	str	r3, [r7, #20]
  return(result);
 8005cf2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d17e      	bne.n	8005df6 <osThreadNew+0x11a>
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d07b      	beq.n	8005df6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005cfe:	2380      	movs	r3, #128	; 0x80
 8005d00:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005d02:	2318      	movs	r3, #24
 8005d04:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005d06:	2300      	movs	r3, #0
 8005d08:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005d0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d0e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d045      	beq.n	8005da2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d002      	beq.n	8005d24 <osThreadNew+0x48>
        name = attr->name;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	699b      	ldr	r3, [r3, #24]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d002      	beq.n	8005d32 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	699b      	ldr	r3, [r3, #24]
 8005d30:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d008      	beq.n	8005d4a <osThreadNew+0x6e>
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	2b38      	cmp	r3, #56	; 0x38
 8005d3c:	d805      	bhi.n	8005d4a <osThreadNew+0x6e>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	f003 0301 	and.w	r3, r3, #1
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d001      	beq.n	8005d4e <osThreadNew+0x72>
        return (NULL);
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	e054      	b.n	8005df8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	695b      	ldr	r3, [r3, #20]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d003      	beq.n	8005d5e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	695b      	ldr	r3, [r3, #20]
 8005d5a:	089b      	lsrs	r3, r3, #2
 8005d5c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d00e      	beq.n	8005d84 <osThreadNew+0xa8>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	2b5b      	cmp	r3, #91	; 0x5b
 8005d6c:	d90a      	bls.n	8005d84 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d006      	beq.n	8005d84 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	695b      	ldr	r3, [r3, #20]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d002      	beq.n	8005d84 <osThreadNew+0xa8>
        mem = 1;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	61bb      	str	r3, [r7, #24]
 8005d82:	e010      	b.n	8005da6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d10c      	bne.n	8005da6 <osThreadNew+0xca>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d108      	bne.n	8005da6 <osThreadNew+0xca>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	691b      	ldr	r3, [r3, #16]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d104      	bne.n	8005da6 <osThreadNew+0xca>
          mem = 0;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	61bb      	str	r3, [r7, #24]
 8005da0:	e001      	b.n	8005da6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005da2:	2300      	movs	r3, #0
 8005da4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005da6:	69bb      	ldr	r3, [r7, #24]
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d110      	bne.n	8005dce <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005db4:	9202      	str	r2, [sp, #8]
 8005db6:	9301      	str	r3, [sp, #4]
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	9300      	str	r3, [sp, #0]
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	6a3a      	ldr	r2, [r7, #32]
 8005dc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005dc2:	68f8      	ldr	r0, [r7, #12]
 8005dc4:	f000 fe0c 	bl	80069e0 <xTaskCreateStatic>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	613b      	str	r3, [r7, #16]
 8005dcc:	e013      	b.n	8005df6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005dce:	69bb      	ldr	r3, [r7, #24]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d110      	bne.n	8005df6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005dd4:	6a3b      	ldr	r3, [r7, #32]
 8005dd6:	b29a      	uxth	r2, r3
 8005dd8:	f107 0310 	add.w	r3, r7, #16
 8005ddc:	9301      	str	r3, [sp, #4]
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	9300      	str	r3, [sp, #0]
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005de6:	68f8      	ldr	r0, [r7, #12]
 8005de8:	f000 fe57 	bl	8006a9a <xTaskCreate>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d001      	beq.n	8005df6 <osThreadNew+0x11a>
            hTask = NULL;
 8005df2:	2300      	movs	r3, #0
 8005df4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005df6:	693b      	ldr	r3, [r7, #16]
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3728      	adds	r7, #40	; 0x28
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b084      	sub	sp, #16
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e08:	f3ef 8305 	mrs	r3, IPSR
 8005e0c:	60bb      	str	r3, [r7, #8]
  return(result);
 8005e0e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d003      	beq.n	8005e1c <osDelay+0x1c>
    stat = osErrorISR;
 8005e14:	f06f 0305 	mvn.w	r3, #5
 8005e18:	60fb      	str	r3, [r7, #12]
 8005e1a:	e007      	b.n	8005e2c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d002      	beq.n	8005e2c <osDelay+0x2c>
      vTaskDelay(ticks);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 ff7c 	bl	8006d24 <vTaskDelay>
    }
  }

  return (stat);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3710      	adds	r7, #16
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
	...

08005e38 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005e38:	b480      	push	{r7}
 8005e3a:	b085      	sub	sp, #20
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	60f8      	str	r0, [r7, #12]
 8005e40:	60b9      	str	r1, [r7, #8]
 8005e42:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	4a07      	ldr	r2, [pc, #28]	; (8005e64 <vApplicationGetIdleTaskMemory+0x2c>)
 8005e48:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	4a06      	ldr	r2, [pc, #24]	; (8005e68 <vApplicationGetIdleTaskMemory+0x30>)
 8005e4e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2280      	movs	r2, #128	; 0x80
 8005e54:	601a      	str	r2, [r3, #0]
}
 8005e56:	bf00      	nop
 8005e58:	3714      	adds	r7, #20
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr
 8005e62:	bf00      	nop
 8005e64:	20000414 	.word	0x20000414
 8005e68:	20000470 	.word	0x20000470

08005e6c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005e6c:	b480      	push	{r7}
 8005e6e:	b085      	sub	sp, #20
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	60b9      	str	r1, [r7, #8]
 8005e76:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	4a07      	ldr	r2, [pc, #28]	; (8005e98 <vApplicationGetTimerTaskMemory+0x2c>)
 8005e7c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	4a06      	ldr	r2, [pc, #24]	; (8005e9c <vApplicationGetTimerTaskMemory+0x30>)
 8005e82:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e8a:	601a      	str	r2, [r3, #0]
}
 8005e8c:	bf00      	nop
 8005e8e:	3714      	adds	r7, #20
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr
 8005e98:	20000670 	.word	0x20000670
 8005e9c:	200006cc 	.word	0x200006cc

08005ea0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f103 0208 	add.w	r2, r3, #8
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005eb8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f103 0208 	add.w	r2, r3, #8
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f103 0208 	add.w	r2, r3, #8
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005ed4:	bf00      	nop
 8005ed6:	370c      	adds	r7, #12
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005eee:	bf00      	nop
 8005ef0:	370c      	adds	r7, #12
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr

08005efa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005efa:	b480      	push	{r7}
 8005efc:	b085      	sub	sp, #20
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	6078      	str	r0, [r7, #4]
 8005f02:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	68fa      	ldr	r2, [r7, #12]
 8005f0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	689a      	ldr	r2, [r3, #8]
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	683a      	ldr	r2, [r7, #0]
 8005f1e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	683a      	ldr	r2, [r7, #0]
 8005f24:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	1c5a      	adds	r2, r3, #1
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	601a      	str	r2, [r3, #0]
}
 8005f36:	bf00      	nop
 8005f38:	3714      	adds	r7, #20
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr

08005f42 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f42:	b480      	push	{r7}
 8005f44:	b085      	sub	sp, #20
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
 8005f4a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f58:	d103      	bne.n	8005f62 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	60fb      	str	r3, [r7, #12]
 8005f60:	e00c      	b.n	8005f7c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	3308      	adds	r3, #8
 8005f66:	60fb      	str	r3, [r7, #12]
 8005f68:	e002      	b.n	8005f70 <vListInsert+0x2e>
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	60fb      	str	r3, [r7, #12]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	68ba      	ldr	r2, [r7, #8]
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d2f6      	bcs.n	8005f6a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	685a      	ldr	r2, [r3, #4]
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	683a      	ldr	r2, [r7, #0]
 8005f8a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	68fa      	ldr	r2, [r7, #12]
 8005f90:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	683a      	ldr	r2, [r7, #0]
 8005f96:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	1c5a      	adds	r2, r3, #1
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	601a      	str	r2, [r3, #0]
}
 8005fa8:	bf00      	nop
 8005faa:	3714      	adds	r7, #20
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr

08005fb4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b085      	sub	sp, #20
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	691b      	ldr	r3, [r3, #16]
 8005fc0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	6892      	ldr	r2, [r2, #8]
 8005fca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	6852      	ldr	r2, [r2, #4]
 8005fd4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d103      	bne.n	8005fe8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	689a      	ldr	r2, [r3, #8]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2200      	movs	r2, #0
 8005fec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	1e5a      	subs	r2, r3, #1
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3714      	adds	r7, #20
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr

08006008 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b084      	sub	sp, #16
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d10a      	bne.n	8006032 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800601c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006020:	f383 8811 	msr	BASEPRI, r3
 8006024:	f3bf 8f6f 	isb	sy
 8006028:	f3bf 8f4f 	dsb	sy
 800602c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800602e:	bf00      	nop
 8006030:	e7fe      	b.n	8006030 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006032:	f002 f84f 	bl	80080d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800603e:	68f9      	ldr	r1, [r7, #12]
 8006040:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006042:	fb01 f303 	mul.w	r3, r1, r3
 8006046:	441a      	add	r2, r3
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2200      	movs	r2, #0
 8006050:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006062:	3b01      	subs	r3, #1
 8006064:	68f9      	ldr	r1, [r7, #12]
 8006066:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006068:	fb01 f303 	mul.w	r3, r1, r3
 800606c:	441a      	add	r2, r3
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	22ff      	movs	r2, #255	; 0xff
 8006076:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	22ff      	movs	r2, #255	; 0xff
 800607e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d114      	bne.n	80060b2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	691b      	ldr	r3, [r3, #16]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d01a      	beq.n	80060c6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	3310      	adds	r3, #16
 8006094:	4618      	mov	r0, r3
 8006096:	f001 f903 	bl	80072a0 <xTaskRemoveFromEventList>
 800609a:	4603      	mov	r3, r0
 800609c:	2b00      	cmp	r3, #0
 800609e:	d012      	beq.n	80060c6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80060a0:	4b0c      	ldr	r3, [pc, #48]	; (80060d4 <xQueueGenericReset+0xcc>)
 80060a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060a6:	601a      	str	r2, [r3, #0]
 80060a8:	f3bf 8f4f 	dsb	sy
 80060ac:	f3bf 8f6f 	isb	sy
 80060b0:	e009      	b.n	80060c6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	3310      	adds	r3, #16
 80060b6:	4618      	mov	r0, r3
 80060b8:	f7ff fef2 	bl	8005ea0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	3324      	adds	r3, #36	; 0x24
 80060c0:	4618      	mov	r0, r3
 80060c2:	f7ff feed 	bl	8005ea0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80060c6:	f002 f835 	bl	8008134 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80060ca:	2301      	movs	r3, #1
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3710      	adds	r7, #16
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}
 80060d4:	e000ed04 	.word	0xe000ed04

080060d8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b08e      	sub	sp, #56	; 0x38
 80060dc:	af02      	add	r7, sp, #8
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	60b9      	str	r1, [r7, #8]
 80060e2:	607a      	str	r2, [r7, #4]
 80060e4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d10a      	bne.n	8006102 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80060ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f0:	f383 8811 	msr	BASEPRI, r3
 80060f4:	f3bf 8f6f 	isb	sy
 80060f8:	f3bf 8f4f 	dsb	sy
 80060fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80060fe:	bf00      	nop
 8006100:	e7fe      	b.n	8006100 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d10a      	bne.n	800611e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800610c:	f383 8811 	msr	BASEPRI, r3
 8006110:	f3bf 8f6f 	isb	sy
 8006114:	f3bf 8f4f 	dsb	sy
 8006118:	627b      	str	r3, [r7, #36]	; 0x24
}
 800611a:	bf00      	nop
 800611c:	e7fe      	b.n	800611c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d002      	beq.n	800612a <xQueueGenericCreateStatic+0x52>
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d001      	beq.n	800612e <xQueueGenericCreateStatic+0x56>
 800612a:	2301      	movs	r3, #1
 800612c:	e000      	b.n	8006130 <xQueueGenericCreateStatic+0x58>
 800612e:	2300      	movs	r3, #0
 8006130:	2b00      	cmp	r3, #0
 8006132:	d10a      	bne.n	800614a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006138:	f383 8811 	msr	BASEPRI, r3
 800613c:	f3bf 8f6f 	isb	sy
 8006140:	f3bf 8f4f 	dsb	sy
 8006144:	623b      	str	r3, [r7, #32]
}
 8006146:	bf00      	nop
 8006148:	e7fe      	b.n	8006148 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d102      	bne.n	8006156 <xQueueGenericCreateStatic+0x7e>
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d101      	bne.n	800615a <xQueueGenericCreateStatic+0x82>
 8006156:	2301      	movs	r3, #1
 8006158:	e000      	b.n	800615c <xQueueGenericCreateStatic+0x84>
 800615a:	2300      	movs	r3, #0
 800615c:	2b00      	cmp	r3, #0
 800615e:	d10a      	bne.n	8006176 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006164:	f383 8811 	msr	BASEPRI, r3
 8006168:	f3bf 8f6f 	isb	sy
 800616c:	f3bf 8f4f 	dsb	sy
 8006170:	61fb      	str	r3, [r7, #28]
}
 8006172:	bf00      	nop
 8006174:	e7fe      	b.n	8006174 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006176:	2350      	movs	r3, #80	; 0x50
 8006178:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	2b50      	cmp	r3, #80	; 0x50
 800617e:	d00a      	beq.n	8006196 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006184:	f383 8811 	msr	BASEPRI, r3
 8006188:	f3bf 8f6f 	isb	sy
 800618c:	f3bf 8f4f 	dsb	sy
 8006190:	61bb      	str	r3, [r7, #24]
}
 8006192:	bf00      	nop
 8006194:	e7fe      	b.n	8006194 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006196:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800619c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d00d      	beq.n	80061be <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80061a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a4:	2201      	movs	r2, #1
 80061a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80061aa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80061ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b0:	9300      	str	r3, [sp, #0]
 80061b2:	4613      	mov	r3, r2
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	68b9      	ldr	r1, [r7, #8]
 80061b8:	68f8      	ldr	r0, [r7, #12]
 80061ba:	f000 f805 	bl	80061c8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80061be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3730      	adds	r7, #48	; 0x30
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}

080061c8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b084      	sub	sp, #16
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	60f8      	str	r0, [r7, #12]
 80061d0:	60b9      	str	r1, [r7, #8]
 80061d2:	607a      	str	r2, [r7, #4]
 80061d4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d103      	bne.n	80061e4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	69ba      	ldr	r2, [r7, #24]
 80061e0:	601a      	str	r2, [r3, #0]
 80061e2:	e002      	b.n	80061ea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80061e4:	69bb      	ldr	r3, [r7, #24]
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	68fa      	ldr	r2, [r7, #12]
 80061ee:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80061f0:	69bb      	ldr	r3, [r7, #24]
 80061f2:	68ba      	ldr	r2, [r7, #8]
 80061f4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80061f6:	2101      	movs	r1, #1
 80061f8:	69b8      	ldr	r0, [r7, #24]
 80061fa:	f7ff ff05 	bl	8006008 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	78fa      	ldrb	r2, [r7, #3]
 8006202:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006206:	bf00      	nop
 8006208:	3710      	adds	r7, #16
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}
	...

08006210 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b08e      	sub	sp, #56	; 0x38
 8006214:	af00      	add	r7, sp, #0
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	607a      	str	r2, [r7, #4]
 800621c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800621e:	2300      	movs	r3, #0
 8006220:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006228:	2b00      	cmp	r3, #0
 800622a:	d10a      	bne.n	8006242 <xQueueGenericSend+0x32>
	__asm volatile
 800622c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006230:	f383 8811 	msr	BASEPRI, r3
 8006234:	f3bf 8f6f 	isb	sy
 8006238:	f3bf 8f4f 	dsb	sy
 800623c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800623e:	bf00      	nop
 8006240:	e7fe      	b.n	8006240 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d103      	bne.n	8006250 <xQueueGenericSend+0x40>
 8006248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800624a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800624c:	2b00      	cmp	r3, #0
 800624e:	d101      	bne.n	8006254 <xQueueGenericSend+0x44>
 8006250:	2301      	movs	r3, #1
 8006252:	e000      	b.n	8006256 <xQueueGenericSend+0x46>
 8006254:	2300      	movs	r3, #0
 8006256:	2b00      	cmp	r3, #0
 8006258:	d10a      	bne.n	8006270 <xQueueGenericSend+0x60>
	__asm volatile
 800625a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800625e:	f383 8811 	msr	BASEPRI, r3
 8006262:	f3bf 8f6f 	isb	sy
 8006266:	f3bf 8f4f 	dsb	sy
 800626a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800626c:	bf00      	nop
 800626e:	e7fe      	b.n	800626e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	2b02      	cmp	r3, #2
 8006274:	d103      	bne.n	800627e <xQueueGenericSend+0x6e>
 8006276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800627a:	2b01      	cmp	r3, #1
 800627c:	d101      	bne.n	8006282 <xQueueGenericSend+0x72>
 800627e:	2301      	movs	r3, #1
 8006280:	e000      	b.n	8006284 <xQueueGenericSend+0x74>
 8006282:	2300      	movs	r3, #0
 8006284:	2b00      	cmp	r3, #0
 8006286:	d10a      	bne.n	800629e <xQueueGenericSend+0x8e>
	__asm volatile
 8006288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800628c:	f383 8811 	msr	BASEPRI, r3
 8006290:	f3bf 8f6f 	isb	sy
 8006294:	f3bf 8f4f 	dsb	sy
 8006298:	623b      	str	r3, [r7, #32]
}
 800629a:	bf00      	nop
 800629c:	e7fe      	b.n	800629c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800629e:	f001 f9bd 	bl	800761c <xTaskGetSchedulerState>
 80062a2:	4603      	mov	r3, r0
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d102      	bne.n	80062ae <xQueueGenericSend+0x9e>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d101      	bne.n	80062b2 <xQueueGenericSend+0xa2>
 80062ae:	2301      	movs	r3, #1
 80062b0:	e000      	b.n	80062b4 <xQueueGenericSend+0xa4>
 80062b2:	2300      	movs	r3, #0
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d10a      	bne.n	80062ce <xQueueGenericSend+0xbe>
	__asm volatile
 80062b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062bc:	f383 8811 	msr	BASEPRI, r3
 80062c0:	f3bf 8f6f 	isb	sy
 80062c4:	f3bf 8f4f 	dsb	sy
 80062c8:	61fb      	str	r3, [r7, #28]
}
 80062ca:	bf00      	nop
 80062cc:	e7fe      	b.n	80062cc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80062ce:	f001 ff01 	bl	80080d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80062d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062da:	429a      	cmp	r2, r3
 80062dc:	d302      	bcc.n	80062e4 <xQueueGenericSend+0xd4>
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	2b02      	cmp	r3, #2
 80062e2:	d129      	bne.n	8006338 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80062e4:	683a      	ldr	r2, [r7, #0]
 80062e6:	68b9      	ldr	r1, [r7, #8]
 80062e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062ea:	f000 fa0b 	bl	8006704 <prvCopyDataToQueue>
 80062ee:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80062f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d010      	beq.n	800631a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80062f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062fa:	3324      	adds	r3, #36	; 0x24
 80062fc:	4618      	mov	r0, r3
 80062fe:	f000 ffcf 	bl	80072a0 <xTaskRemoveFromEventList>
 8006302:	4603      	mov	r3, r0
 8006304:	2b00      	cmp	r3, #0
 8006306:	d013      	beq.n	8006330 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006308:	4b3f      	ldr	r3, [pc, #252]	; (8006408 <xQueueGenericSend+0x1f8>)
 800630a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800630e:	601a      	str	r2, [r3, #0]
 8006310:	f3bf 8f4f 	dsb	sy
 8006314:	f3bf 8f6f 	isb	sy
 8006318:	e00a      	b.n	8006330 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800631a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800631c:	2b00      	cmp	r3, #0
 800631e:	d007      	beq.n	8006330 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006320:	4b39      	ldr	r3, [pc, #228]	; (8006408 <xQueueGenericSend+0x1f8>)
 8006322:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006326:	601a      	str	r2, [r3, #0]
 8006328:	f3bf 8f4f 	dsb	sy
 800632c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006330:	f001 ff00 	bl	8008134 <vPortExitCritical>
				return pdPASS;
 8006334:	2301      	movs	r3, #1
 8006336:	e063      	b.n	8006400 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d103      	bne.n	8006346 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800633e:	f001 fef9 	bl	8008134 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006342:	2300      	movs	r3, #0
 8006344:	e05c      	b.n	8006400 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006348:	2b00      	cmp	r3, #0
 800634a:	d106      	bne.n	800635a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800634c:	f107 0314 	add.w	r3, r7, #20
 8006350:	4618      	mov	r0, r3
 8006352:	f001 f809 	bl	8007368 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006356:	2301      	movs	r3, #1
 8006358:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800635a:	f001 feeb 	bl	8008134 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800635e:	f000 fd7b 	bl	8006e58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006362:	f001 feb7 	bl	80080d4 <vPortEnterCritical>
 8006366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006368:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800636c:	b25b      	sxtb	r3, r3
 800636e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006372:	d103      	bne.n	800637c <xQueueGenericSend+0x16c>
 8006374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006376:	2200      	movs	r2, #0
 8006378:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800637c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800637e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006382:	b25b      	sxtb	r3, r3
 8006384:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006388:	d103      	bne.n	8006392 <xQueueGenericSend+0x182>
 800638a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800638c:	2200      	movs	r2, #0
 800638e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006392:	f001 fecf 	bl	8008134 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006396:	1d3a      	adds	r2, r7, #4
 8006398:	f107 0314 	add.w	r3, r7, #20
 800639c:	4611      	mov	r1, r2
 800639e:	4618      	mov	r0, r3
 80063a0:	f000 fff8 	bl	8007394 <xTaskCheckForTimeOut>
 80063a4:	4603      	mov	r3, r0
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d124      	bne.n	80063f4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80063aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80063ac:	f000 faa2 	bl	80068f4 <prvIsQueueFull>
 80063b0:	4603      	mov	r3, r0
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d018      	beq.n	80063e8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80063b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b8:	3310      	adds	r3, #16
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	4611      	mov	r1, r2
 80063be:	4618      	mov	r0, r3
 80063c0:	f000 ff1e 	bl	8007200 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80063c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80063c6:	f000 fa2d 	bl	8006824 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80063ca:	f000 fd53 	bl	8006e74 <xTaskResumeAll>
 80063ce:	4603      	mov	r3, r0
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	f47f af7c 	bne.w	80062ce <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80063d6:	4b0c      	ldr	r3, [pc, #48]	; (8006408 <xQueueGenericSend+0x1f8>)
 80063d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063dc:	601a      	str	r2, [r3, #0]
 80063de:	f3bf 8f4f 	dsb	sy
 80063e2:	f3bf 8f6f 	isb	sy
 80063e6:	e772      	b.n	80062ce <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80063e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80063ea:	f000 fa1b 	bl	8006824 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80063ee:	f000 fd41 	bl	8006e74 <xTaskResumeAll>
 80063f2:	e76c      	b.n	80062ce <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80063f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80063f6:	f000 fa15 	bl	8006824 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80063fa:	f000 fd3b 	bl	8006e74 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80063fe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006400:	4618      	mov	r0, r3
 8006402:	3738      	adds	r7, #56	; 0x38
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}
 8006408:	e000ed04 	.word	0xe000ed04

0800640c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b090      	sub	sp, #64	; 0x40
 8006410:	af00      	add	r7, sp, #0
 8006412:	60f8      	str	r0, [r7, #12]
 8006414:	60b9      	str	r1, [r7, #8]
 8006416:	607a      	str	r2, [r7, #4]
 8006418:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800641e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006420:	2b00      	cmp	r3, #0
 8006422:	d10a      	bne.n	800643a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006428:	f383 8811 	msr	BASEPRI, r3
 800642c:	f3bf 8f6f 	isb	sy
 8006430:	f3bf 8f4f 	dsb	sy
 8006434:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006436:	bf00      	nop
 8006438:	e7fe      	b.n	8006438 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d103      	bne.n	8006448 <xQueueGenericSendFromISR+0x3c>
 8006440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006444:	2b00      	cmp	r3, #0
 8006446:	d101      	bne.n	800644c <xQueueGenericSendFromISR+0x40>
 8006448:	2301      	movs	r3, #1
 800644a:	e000      	b.n	800644e <xQueueGenericSendFromISR+0x42>
 800644c:	2300      	movs	r3, #0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d10a      	bne.n	8006468 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006456:	f383 8811 	msr	BASEPRI, r3
 800645a:	f3bf 8f6f 	isb	sy
 800645e:	f3bf 8f4f 	dsb	sy
 8006462:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006464:	bf00      	nop
 8006466:	e7fe      	b.n	8006466 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	2b02      	cmp	r3, #2
 800646c:	d103      	bne.n	8006476 <xQueueGenericSendFromISR+0x6a>
 800646e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006472:	2b01      	cmp	r3, #1
 8006474:	d101      	bne.n	800647a <xQueueGenericSendFromISR+0x6e>
 8006476:	2301      	movs	r3, #1
 8006478:	e000      	b.n	800647c <xQueueGenericSendFromISR+0x70>
 800647a:	2300      	movs	r3, #0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d10a      	bne.n	8006496 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006484:	f383 8811 	msr	BASEPRI, r3
 8006488:	f3bf 8f6f 	isb	sy
 800648c:	f3bf 8f4f 	dsb	sy
 8006490:	623b      	str	r3, [r7, #32]
}
 8006492:	bf00      	nop
 8006494:	e7fe      	b.n	8006494 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006496:	f001 feff 	bl	8008298 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800649a:	f3ef 8211 	mrs	r2, BASEPRI
 800649e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a2:	f383 8811 	msr	BASEPRI, r3
 80064a6:	f3bf 8f6f 	isb	sy
 80064aa:	f3bf 8f4f 	dsb	sy
 80064ae:	61fa      	str	r2, [r7, #28]
 80064b0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80064b2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80064b4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80064b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064be:	429a      	cmp	r2, r3
 80064c0:	d302      	bcc.n	80064c8 <xQueueGenericSendFromISR+0xbc>
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	2b02      	cmp	r3, #2
 80064c6:	d12f      	bne.n	8006528 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80064c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80064d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80064d8:	683a      	ldr	r2, [r7, #0]
 80064da:	68b9      	ldr	r1, [r7, #8]
 80064dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80064de:	f000 f911 	bl	8006704 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80064e2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80064e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064ea:	d112      	bne.n	8006512 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80064ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d016      	beq.n	8006522 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80064f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064f6:	3324      	adds	r3, #36	; 0x24
 80064f8:	4618      	mov	r0, r3
 80064fa:	f000 fed1 	bl	80072a0 <xTaskRemoveFromEventList>
 80064fe:	4603      	mov	r3, r0
 8006500:	2b00      	cmp	r3, #0
 8006502:	d00e      	beq.n	8006522 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d00b      	beq.n	8006522 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2201      	movs	r2, #1
 800650e:	601a      	str	r2, [r3, #0]
 8006510:	e007      	b.n	8006522 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006512:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006516:	3301      	adds	r3, #1
 8006518:	b2db      	uxtb	r3, r3
 800651a:	b25a      	sxtb	r2, r3
 800651c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800651e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006522:	2301      	movs	r3, #1
 8006524:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006526:	e001      	b.n	800652c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006528:	2300      	movs	r3, #0
 800652a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800652c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800652e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006536:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006538:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800653a:	4618      	mov	r0, r3
 800653c:	3740      	adds	r7, #64	; 0x40
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
	...

08006544 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b08c      	sub	sp, #48	; 0x30
 8006548:	af00      	add	r7, sp, #0
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	60b9      	str	r1, [r7, #8]
 800654e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006550:	2300      	movs	r3, #0
 8006552:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800655a:	2b00      	cmp	r3, #0
 800655c:	d10a      	bne.n	8006574 <xQueueReceive+0x30>
	__asm volatile
 800655e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006562:	f383 8811 	msr	BASEPRI, r3
 8006566:	f3bf 8f6f 	isb	sy
 800656a:	f3bf 8f4f 	dsb	sy
 800656e:	623b      	str	r3, [r7, #32]
}
 8006570:	bf00      	nop
 8006572:	e7fe      	b.n	8006572 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d103      	bne.n	8006582 <xQueueReceive+0x3e>
 800657a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800657c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800657e:	2b00      	cmp	r3, #0
 8006580:	d101      	bne.n	8006586 <xQueueReceive+0x42>
 8006582:	2301      	movs	r3, #1
 8006584:	e000      	b.n	8006588 <xQueueReceive+0x44>
 8006586:	2300      	movs	r3, #0
 8006588:	2b00      	cmp	r3, #0
 800658a:	d10a      	bne.n	80065a2 <xQueueReceive+0x5e>
	__asm volatile
 800658c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006590:	f383 8811 	msr	BASEPRI, r3
 8006594:	f3bf 8f6f 	isb	sy
 8006598:	f3bf 8f4f 	dsb	sy
 800659c:	61fb      	str	r3, [r7, #28]
}
 800659e:	bf00      	nop
 80065a0:	e7fe      	b.n	80065a0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80065a2:	f001 f83b 	bl	800761c <xTaskGetSchedulerState>
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d102      	bne.n	80065b2 <xQueueReceive+0x6e>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d101      	bne.n	80065b6 <xQueueReceive+0x72>
 80065b2:	2301      	movs	r3, #1
 80065b4:	e000      	b.n	80065b8 <xQueueReceive+0x74>
 80065b6:	2300      	movs	r3, #0
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d10a      	bne.n	80065d2 <xQueueReceive+0x8e>
	__asm volatile
 80065bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c0:	f383 8811 	msr	BASEPRI, r3
 80065c4:	f3bf 8f6f 	isb	sy
 80065c8:	f3bf 8f4f 	dsb	sy
 80065cc:	61bb      	str	r3, [r7, #24]
}
 80065ce:	bf00      	nop
 80065d0:	e7fe      	b.n	80065d0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80065d2:	f001 fd7f 	bl	80080d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80065d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065da:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80065dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d01f      	beq.n	8006622 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80065e2:	68b9      	ldr	r1, [r7, #8]
 80065e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065e6:	f000 f8f7 	bl	80067d8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80065ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ec:	1e5a      	subs	r2, r3, #1
 80065ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f4:	691b      	ldr	r3, [r3, #16]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d00f      	beq.n	800661a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80065fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065fc:	3310      	adds	r3, #16
 80065fe:	4618      	mov	r0, r3
 8006600:	f000 fe4e 	bl	80072a0 <xTaskRemoveFromEventList>
 8006604:	4603      	mov	r3, r0
 8006606:	2b00      	cmp	r3, #0
 8006608:	d007      	beq.n	800661a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800660a:	4b3d      	ldr	r3, [pc, #244]	; (8006700 <xQueueReceive+0x1bc>)
 800660c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006610:	601a      	str	r2, [r3, #0]
 8006612:	f3bf 8f4f 	dsb	sy
 8006616:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800661a:	f001 fd8b 	bl	8008134 <vPortExitCritical>
				return pdPASS;
 800661e:	2301      	movs	r3, #1
 8006620:	e069      	b.n	80066f6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d103      	bne.n	8006630 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006628:	f001 fd84 	bl	8008134 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800662c:	2300      	movs	r3, #0
 800662e:	e062      	b.n	80066f6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006632:	2b00      	cmp	r3, #0
 8006634:	d106      	bne.n	8006644 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006636:	f107 0310 	add.w	r3, r7, #16
 800663a:	4618      	mov	r0, r3
 800663c:	f000 fe94 	bl	8007368 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006640:	2301      	movs	r3, #1
 8006642:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006644:	f001 fd76 	bl	8008134 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006648:	f000 fc06 	bl	8006e58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800664c:	f001 fd42 	bl	80080d4 <vPortEnterCritical>
 8006650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006652:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006656:	b25b      	sxtb	r3, r3
 8006658:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800665c:	d103      	bne.n	8006666 <xQueueReceive+0x122>
 800665e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006660:	2200      	movs	r2, #0
 8006662:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006668:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800666c:	b25b      	sxtb	r3, r3
 800666e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006672:	d103      	bne.n	800667c <xQueueReceive+0x138>
 8006674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006676:	2200      	movs	r2, #0
 8006678:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800667c:	f001 fd5a 	bl	8008134 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006680:	1d3a      	adds	r2, r7, #4
 8006682:	f107 0310 	add.w	r3, r7, #16
 8006686:	4611      	mov	r1, r2
 8006688:	4618      	mov	r0, r3
 800668a:	f000 fe83 	bl	8007394 <xTaskCheckForTimeOut>
 800668e:	4603      	mov	r3, r0
 8006690:	2b00      	cmp	r3, #0
 8006692:	d123      	bne.n	80066dc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006694:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006696:	f000 f917 	bl	80068c8 <prvIsQueueEmpty>
 800669a:	4603      	mov	r3, r0
 800669c:	2b00      	cmp	r3, #0
 800669e:	d017      	beq.n	80066d0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80066a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a2:	3324      	adds	r3, #36	; 0x24
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	4611      	mov	r1, r2
 80066a8:	4618      	mov	r0, r3
 80066aa:	f000 fda9 	bl	8007200 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80066ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066b0:	f000 f8b8 	bl	8006824 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80066b4:	f000 fbde 	bl	8006e74 <xTaskResumeAll>
 80066b8:	4603      	mov	r3, r0
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d189      	bne.n	80065d2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80066be:	4b10      	ldr	r3, [pc, #64]	; (8006700 <xQueueReceive+0x1bc>)
 80066c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066c4:	601a      	str	r2, [r3, #0]
 80066c6:	f3bf 8f4f 	dsb	sy
 80066ca:	f3bf 8f6f 	isb	sy
 80066ce:	e780      	b.n	80065d2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80066d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066d2:	f000 f8a7 	bl	8006824 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80066d6:	f000 fbcd 	bl	8006e74 <xTaskResumeAll>
 80066da:	e77a      	b.n	80065d2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80066dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066de:	f000 f8a1 	bl	8006824 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80066e2:	f000 fbc7 	bl	8006e74 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80066e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066e8:	f000 f8ee 	bl	80068c8 <prvIsQueueEmpty>
 80066ec:	4603      	mov	r3, r0
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	f43f af6f 	beq.w	80065d2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80066f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3730      	adds	r7, #48	; 0x30
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
 80066fe:	bf00      	nop
 8006700:	e000ed04 	.word	0xe000ed04

08006704 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b086      	sub	sp, #24
 8006708:	af00      	add	r7, sp, #0
 800670a:	60f8      	str	r0, [r7, #12]
 800670c:	60b9      	str	r1, [r7, #8]
 800670e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006710:	2300      	movs	r3, #0
 8006712:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006718:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800671e:	2b00      	cmp	r3, #0
 8006720:	d10d      	bne.n	800673e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d14d      	bne.n	80067c6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	4618      	mov	r0, r3
 8006730:	f000 ff92 	bl	8007658 <xTaskPriorityDisinherit>
 8006734:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2200      	movs	r2, #0
 800673a:	609a      	str	r2, [r3, #8]
 800673c:	e043      	b.n	80067c6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d119      	bne.n	8006778 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	6858      	ldr	r0, [r3, #4]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800674c:	461a      	mov	r2, r3
 800674e:	68b9      	ldr	r1, [r7, #8]
 8006750:	f002 fbba 	bl	8008ec8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	685a      	ldr	r2, [r3, #4]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800675c:	441a      	add	r2, r3
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	685a      	ldr	r2, [r3, #4]
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	429a      	cmp	r2, r3
 800676c:	d32b      	bcc.n	80067c6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	605a      	str	r2, [r3, #4]
 8006776:	e026      	b.n	80067c6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	68d8      	ldr	r0, [r3, #12]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006780:	461a      	mov	r2, r3
 8006782:	68b9      	ldr	r1, [r7, #8]
 8006784:	f002 fba0 	bl	8008ec8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	68da      	ldr	r2, [r3, #12]
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006790:	425b      	negs	r3, r3
 8006792:	441a      	add	r2, r3
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	68da      	ldr	r2, [r3, #12]
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d207      	bcs.n	80067b4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	689a      	ldr	r2, [r3, #8]
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ac:	425b      	negs	r3, r3
 80067ae:	441a      	add	r2, r3
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2b02      	cmp	r3, #2
 80067b8:	d105      	bne.n	80067c6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d002      	beq.n	80067c6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	3b01      	subs	r3, #1
 80067c4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	1c5a      	adds	r2, r3, #1
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80067ce:	697b      	ldr	r3, [r7, #20]
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3718      	adds	r7, #24
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b082      	sub	sp, #8
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d018      	beq.n	800681c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	68da      	ldr	r2, [r3, #12]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f2:	441a      	add	r2, r3
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	68da      	ldr	r2, [r3, #12]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	429a      	cmp	r2, r3
 8006802:	d303      	bcc.n	800680c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	68d9      	ldr	r1, [r3, #12]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006814:	461a      	mov	r2, r3
 8006816:	6838      	ldr	r0, [r7, #0]
 8006818:	f002 fb56 	bl	8008ec8 <memcpy>
	}
}
 800681c:	bf00      	nop
 800681e:	3708      	adds	r7, #8
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800682c:	f001 fc52 	bl	80080d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006836:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006838:	e011      	b.n	800685e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800683e:	2b00      	cmp	r3, #0
 8006840:	d012      	beq.n	8006868 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	3324      	adds	r3, #36	; 0x24
 8006846:	4618      	mov	r0, r3
 8006848:	f000 fd2a 	bl	80072a0 <xTaskRemoveFromEventList>
 800684c:	4603      	mov	r3, r0
 800684e:	2b00      	cmp	r3, #0
 8006850:	d001      	beq.n	8006856 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006852:	f000 fe01 	bl	8007458 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006856:	7bfb      	ldrb	r3, [r7, #15]
 8006858:	3b01      	subs	r3, #1
 800685a:	b2db      	uxtb	r3, r3
 800685c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800685e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006862:	2b00      	cmp	r3, #0
 8006864:	dce9      	bgt.n	800683a <prvUnlockQueue+0x16>
 8006866:	e000      	b.n	800686a <prvUnlockQueue+0x46>
					break;
 8006868:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	22ff      	movs	r2, #255	; 0xff
 800686e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006872:	f001 fc5f 	bl	8008134 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006876:	f001 fc2d 	bl	80080d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006880:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006882:	e011      	b.n	80068a8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	691b      	ldr	r3, [r3, #16]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d012      	beq.n	80068b2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	3310      	adds	r3, #16
 8006890:	4618      	mov	r0, r3
 8006892:	f000 fd05 	bl	80072a0 <xTaskRemoveFromEventList>
 8006896:	4603      	mov	r3, r0
 8006898:	2b00      	cmp	r3, #0
 800689a:	d001      	beq.n	80068a0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800689c:	f000 fddc 	bl	8007458 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80068a0:	7bbb      	ldrb	r3, [r7, #14]
 80068a2:	3b01      	subs	r3, #1
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80068a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	dce9      	bgt.n	8006884 <prvUnlockQueue+0x60>
 80068b0:	e000      	b.n	80068b4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80068b2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	22ff      	movs	r2, #255	; 0xff
 80068b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80068bc:	f001 fc3a 	bl	8008134 <vPortExitCritical>
}
 80068c0:	bf00      	nop
 80068c2:	3710      	adds	r7, #16
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80068d0:	f001 fc00 	bl	80080d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d102      	bne.n	80068e2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80068dc:	2301      	movs	r3, #1
 80068de:	60fb      	str	r3, [r7, #12]
 80068e0:	e001      	b.n	80068e6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80068e2:	2300      	movs	r3, #0
 80068e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80068e6:	f001 fc25 	bl	8008134 <vPortExitCritical>

	return xReturn;
 80068ea:	68fb      	ldr	r3, [r7, #12]
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3710      	adds	r7, #16
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b084      	sub	sp, #16
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80068fc:	f001 fbea 	bl	80080d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006908:	429a      	cmp	r2, r3
 800690a:	d102      	bne.n	8006912 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800690c:	2301      	movs	r3, #1
 800690e:	60fb      	str	r3, [r7, #12]
 8006910:	e001      	b.n	8006916 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006912:	2300      	movs	r3, #0
 8006914:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006916:	f001 fc0d 	bl	8008134 <vPortExitCritical>

	return xReturn;
 800691a:	68fb      	ldr	r3, [r7, #12]
}
 800691c:	4618      	mov	r0, r3
 800691e:	3710      	adds	r7, #16
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}

08006924 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006924:	b480      	push	{r7}
 8006926:	b085      	sub	sp, #20
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800692e:	2300      	movs	r3, #0
 8006930:	60fb      	str	r3, [r7, #12]
 8006932:	e014      	b.n	800695e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006934:	4a0f      	ldr	r2, [pc, #60]	; (8006974 <vQueueAddToRegistry+0x50>)
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d10b      	bne.n	8006958 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006940:	490c      	ldr	r1, [pc, #48]	; (8006974 <vQueueAddToRegistry+0x50>)
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	683a      	ldr	r2, [r7, #0]
 8006946:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800694a:	4a0a      	ldr	r2, [pc, #40]	; (8006974 <vQueueAddToRegistry+0x50>)
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	00db      	lsls	r3, r3, #3
 8006950:	4413      	add	r3, r2
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006956:	e006      	b.n	8006966 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	3301      	adds	r3, #1
 800695c:	60fb      	str	r3, [r7, #12]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2b07      	cmp	r3, #7
 8006962:	d9e7      	bls.n	8006934 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006964:	bf00      	nop
 8006966:	bf00      	nop
 8006968:	3714      	adds	r7, #20
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr
 8006972:	bf00      	nop
 8006974:	20000acc 	.word	0x20000acc

08006978 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006978:	b580      	push	{r7, lr}
 800697a:	b086      	sub	sp, #24
 800697c:	af00      	add	r7, sp, #0
 800697e:	60f8      	str	r0, [r7, #12]
 8006980:	60b9      	str	r1, [r7, #8]
 8006982:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006988:	f001 fba4 	bl	80080d4 <vPortEnterCritical>
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006992:	b25b      	sxtb	r3, r3
 8006994:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006998:	d103      	bne.n	80069a2 <vQueueWaitForMessageRestricted+0x2a>
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	2200      	movs	r2, #0
 800699e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069a8:	b25b      	sxtb	r3, r3
 80069aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069ae:	d103      	bne.n	80069b8 <vQueueWaitForMessageRestricted+0x40>
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	2200      	movs	r2, #0
 80069b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80069b8:	f001 fbbc 	bl	8008134 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d106      	bne.n	80069d2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	3324      	adds	r3, #36	; 0x24
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	68b9      	ldr	r1, [r7, #8]
 80069cc:	4618      	mov	r0, r3
 80069ce:	f000 fc3b 	bl	8007248 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80069d2:	6978      	ldr	r0, [r7, #20]
 80069d4:	f7ff ff26 	bl	8006824 <prvUnlockQueue>
	}
 80069d8:	bf00      	nop
 80069da:	3718      	adds	r7, #24
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}

080069e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b08e      	sub	sp, #56	; 0x38
 80069e4:	af04      	add	r7, sp, #16
 80069e6:	60f8      	str	r0, [r7, #12]
 80069e8:	60b9      	str	r1, [r7, #8]
 80069ea:	607a      	str	r2, [r7, #4]
 80069ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80069ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d10a      	bne.n	8006a0a <xTaskCreateStatic+0x2a>
	__asm volatile
 80069f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f8:	f383 8811 	msr	BASEPRI, r3
 80069fc:	f3bf 8f6f 	isb	sy
 8006a00:	f3bf 8f4f 	dsb	sy
 8006a04:	623b      	str	r3, [r7, #32]
}
 8006a06:	bf00      	nop
 8006a08:	e7fe      	b.n	8006a08 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d10a      	bne.n	8006a26 <xTaskCreateStatic+0x46>
	__asm volatile
 8006a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a14:	f383 8811 	msr	BASEPRI, r3
 8006a18:	f3bf 8f6f 	isb	sy
 8006a1c:	f3bf 8f4f 	dsb	sy
 8006a20:	61fb      	str	r3, [r7, #28]
}
 8006a22:	bf00      	nop
 8006a24:	e7fe      	b.n	8006a24 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006a26:	235c      	movs	r3, #92	; 0x5c
 8006a28:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	2b5c      	cmp	r3, #92	; 0x5c
 8006a2e:	d00a      	beq.n	8006a46 <xTaskCreateStatic+0x66>
	__asm volatile
 8006a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a34:	f383 8811 	msr	BASEPRI, r3
 8006a38:	f3bf 8f6f 	isb	sy
 8006a3c:	f3bf 8f4f 	dsb	sy
 8006a40:	61bb      	str	r3, [r7, #24]
}
 8006a42:	bf00      	nop
 8006a44:	e7fe      	b.n	8006a44 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006a46:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d01e      	beq.n	8006a8c <xTaskCreateStatic+0xac>
 8006a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d01b      	beq.n	8006a8c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a56:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a5c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a60:	2202      	movs	r2, #2
 8006a62:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006a66:	2300      	movs	r3, #0
 8006a68:	9303      	str	r3, [sp, #12]
 8006a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6c:	9302      	str	r3, [sp, #8]
 8006a6e:	f107 0314 	add.w	r3, r7, #20
 8006a72:	9301      	str	r3, [sp, #4]
 8006a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a76:	9300      	str	r3, [sp, #0]
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	68b9      	ldr	r1, [r7, #8]
 8006a7e:	68f8      	ldr	r0, [r7, #12]
 8006a80:	f000 f850 	bl	8006b24 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a86:	f000 f8dd 	bl	8006c44 <prvAddNewTaskToReadyList>
 8006a8a:	e001      	b.n	8006a90 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006a90:	697b      	ldr	r3, [r7, #20]
	}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3728      	adds	r7, #40	; 0x28
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}

08006a9a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006a9a:	b580      	push	{r7, lr}
 8006a9c:	b08c      	sub	sp, #48	; 0x30
 8006a9e:	af04      	add	r7, sp, #16
 8006aa0:	60f8      	str	r0, [r7, #12]
 8006aa2:	60b9      	str	r1, [r7, #8]
 8006aa4:	603b      	str	r3, [r7, #0]
 8006aa6:	4613      	mov	r3, r2
 8006aa8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006aaa:	88fb      	ldrh	r3, [r7, #6]
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f001 fc32 	bl	8008318 <pvPortMalloc>
 8006ab4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d00e      	beq.n	8006ada <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006abc:	205c      	movs	r0, #92	; 0x5c
 8006abe:	f001 fc2b 	bl	8008318 <pvPortMalloc>
 8006ac2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006ac4:	69fb      	ldr	r3, [r7, #28]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d003      	beq.n	8006ad2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006aca:	69fb      	ldr	r3, [r7, #28]
 8006acc:	697a      	ldr	r2, [r7, #20]
 8006ace:	631a      	str	r2, [r3, #48]	; 0x30
 8006ad0:	e005      	b.n	8006ade <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006ad2:	6978      	ldr	r0, [r7, #20]
 8006ad4:	f001 fcec 	bl	80084b0 <vPortFree>
 8006ad8:	e001      	b.n	8006ade <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006ada:	2300      	movs	r3, #0
 8006adc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006ade:	69fb      	ldr	r3, [r7, #28]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d017      	beq.n	8006b14 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006aec:	88fa      	ldrh	r2, [r7, #6]
 8006aee:	2300      	movs	r3, #0
 8006af0:	9303      	str	r3, [sp, #12]
 8006af2:	69fb      	ldr	r3, [r7, #28]
 8006af4:	9302      	str	r3, [sp, #8]
 8006af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af8:	9301      	str	r3, [sp, #4]
 8006afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006afc:	9300      	str	r3, [sp, #0]
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	68b9      	ldr	r1, [r7, #8]
 8006b02:	68f8      	ldr	r0, [r7, #12]
 8006b04:	f000 f80e 	bl	8006b24 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b08:	69f8      	ldr	r0, [r7, #28]
 8006b0a:	f000 f89b 	bl	8006c44 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	61bb      	str	r3, [r7, #24]
 8006b12:	e002      	b.n	8006b1a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006b14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b18:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006b1a:	69bb      	ldr	r3, [r7, #24]
	}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3720      	adds	r7, #32
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}

08006b24 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b088      	sub	sp, #32
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	60f8      	str	r0, [r7, #12]
 8006b2c:	60b9      	str	r1, [r7, #8]
 8006b2e:	607a      	str	r2, [r7, #4]
 8006b30:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b34:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	009b      	lsls	r3, r3, #2
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	21a5      	movs	r1, #165	; 0xa5
 8006b3e:	f002 f9d1 	bl	8008ee4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006b4c:	3b01      	subs	r3, #1
 8006b4e:	009b      	lsls	r3, r3, #2
 8006b50:	4413      	add	r3, r2
 8006b52:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006b54:	69bb      	ldr	r3, [r7, #24]
 8006b56:	f023 0307 	bic.w	r3, r3, #7
 8006b5a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006b5c:	69bb      	ldr	r3, [r7, #24]
 8006b5e:	f003 0307 	and.w	r3, r3, #7
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d00a      	beq.n	8006b7c <prvInitialiseNewTask+0x58>
	__asm volatile
 8006b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b6a:	f383 8811 	msr	BASEPRI, r3
 8006b6e:	f3bf 8f6f 	isb	sy
 8006b72:	f3bf 8f4f 	dsb	sy
 8006b76:	617b      	str	r3, [r7, #20]
}
 8006b78:	bf00      	nop
 8006b7a:	e7fe      	b.n	8006b7a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d01f      	beq.n	8006bc2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b82:	2300      	movs	r3, #0
 8006b84:	61fb      	str	r3, [r7, #28]
 8006b86:	e012      	b.n	8006bae <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006b88:	68ba      	ldr	r2, [r7, #8]
 8006b8a:	69fb      	ldr	r3, [r7, #28]
 8006b8c:	4413      	add	r3, r2
 8006b8e:	7819      	ldrb	r1, [r3, #0]
 8006b90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b92:	69fb      	ldr	r3, [r7, #28]
 8006b94:	4413      	add	r3, r2
 8006b96:	3334      	adds	r3, #52	; 0x34
 8006b98:	460a      	mov	r2, r1
 8006b9a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006b9c:	68ba      	ldr	r2, [r7, #8]
 8006b9e:	69fb      	ldr	r3, [r7, #28]
 8006ba0:	4413      	add	r3, r2
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d006      	beq.n	8006bb6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006ba8:	69fb      	ldr	r3, [r7, #28]
 8006baa:	3301      	adds	r3, #1
 8006bac:	61fb      	str	r3, [r7, #28]
 8006bae:	69fb      	ldr	r3, [r7, #28]
 8006bb0:	2b0f      	cmp	r3, #15
 8006bb2:	d9e9      	bls.n	8006b88 <prvInitialiseNewTask+0x64>
 8006bb4:	e000      	b.n	8006bb8 <prvInitialiseNewTask+0x94>
			{
				break;
 8006bb6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006bc0:	e003      	b.n	8006bca <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bcc:	2b37      	cmp	r3, #55	; 0x37
 8006bce:	d901      	bls.n	8006bd4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006bd0:	2337      	movs	r3, #55	; 0x37
 8006bd2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bd8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bde:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be2:	2200      	movs	r2, #0
 8006be4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be8:	3304      	adds	r3, #4
 8006bea:	4618      	mov	r0, r3
 8006bec:	f7ff f978 	bl	8005ee0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf2:	3318      	adds	r3, #24
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f7ff f973 	bl	8005ee0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bfe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c02:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c08:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c0e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c12:	2200      	movs	r2, #0
 8006c14:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006c1e:	683a      	ldr	r2, [r7, #0]
 8006c20:	68f9      	ldr	r1, [r7, #12]
 8006c22:	69b8      	ldr	r0, [r7, #24]
 8006c24:	f001 f928 	bl	8007e78 <pxPortInitialiseStack>
 8006c28:	4602      	mov	r2, r0
 8006c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c2c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d002      	beq.n	8006c3a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c38:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c3a:	bf00      	nop
 8006c3c:	3720      	adds	r7, #32
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
	...

08006c44 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b082      	sub	sp, #8
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006c4c:	f001 fa42 	bl	80080d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006c50:	4b2d      	ldr	r3, [pc, #180]	; (8006d08 <prvAddNewTaskToReadyList+0xc4>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	3301      	adds	r3, #1
 8006c56:	4a2c      	ldr	r2, [pc, #176]	; (8006d08 <prvAddNewTaskToReadyList+0xc4>)
 8006c58:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006c5a:	4b2c      	ldr	r3, [pc, #176]	; (8006d0c <prvAddNewTaskToReadyList+0xc8>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d109      	bne.n	8006c76 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006c62:	4a2a      	ldr	r2, [pc, #168]	; (8006d0c <prvAddNewTaskToReadyList+0xc8>)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006c68:	4b27      	ldr	r3, [pc, #156]	; (8006d08 <prvAddNewTaskToReadyList+0xc4>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d110      	bne.n	8006c92 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006c70:	f000 fc16 	bl	80074a0 <prvInitialiseTaskLists>
 8006c74:	e00d      	b.n	8006c92 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006c76:	4b26      	ldr	r3, [pc, #152]	; (8006d10 <prvAddNewTaskToReadyList+0xcc>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d109      	bne.n	8006c92 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006c7e:	4b23      	ldr	r3, [pc, #140]	; (8006d0c <prvAddNewTaskToReadyList+0xc8>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d802      	bhi.n	8006c92 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006c8c:	4a1f      	ldr	r2, [pc, #124]	; (8006d0c <prvAddNewTaskToReadyList+0xc8>)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006c92:	4b20      	ldr	r3, [pc, #128]	; (8006d14 <prvAddNewTaskToReadyList+0xd0>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	3301      	adds	r3, #1
 8006c98:	4a1e      	ldr	r2, [pc, #120]	; (8006d14 <prvAddNewTaskToReadyList+0xd0>)
 8006c9a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006c9c:	4b1d      	ldr	r3, [pc, #116]	; (8006d14 <prvAddNewTaskToReadyList+0xd0>)
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ca8:	4b1b      	ldr	r3, [pc, #108]	; (8006d18 <prvAddNewTaskToReadyList+0xd4>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d903      	bls.n	8006cb8 <prvAddNewTaskToReadyList+0x74>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb4:	4a18      	ldr	r2, [pc, #96]	; (8006d18 <prvAddNewTaskToReadyList+0xd4>)
 8006cb6:	6013      	str	r3, [r2, #0]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cbc:	4613      	mov	r3, r2
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	4413      	add	r3, r2
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	4a15      	ldr	r2, [pc, #84]	; (8006d1c <prvAddNewTaskToReadyList+0xd8>)
 8006cc6:	441a      	add	r2, r3
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	3304      	adds	r3, #4
 8006ccc:	4619      	mov	r1, r3
 8006cce:	4610      	mov	r0, r2
 8006cd0:	f7ff f913 	bl	8005efa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006cd4:	f001 fa2e 	bl	8008134 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006cd8:	4b0d      	ldr	r3, [pc, #52]	; (8006d10 <prvAddNewTaskToReadyList+0xcc>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d00e      	beq.n	8006cfe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006ce0:	4b0a      	ldr	r3, [pc, #40]	; (8006d0c <prvAddNewTaskToReadyList+0xc8>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d207      	bcs.n	8006cfe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006cee:	4b0c      	ldr	r3, [pc, #48]	; (8006d20 <prvAddNewTaskToReadyList+0xdc>)
 8006cf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cf4:	601a      	str	r2, [r3, #0]
 8006cf6:	f3bf 8f4f 	dsb	sy
 8006cfa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006cfe:	bf00      	nop
 8006d00:	3708      	adds	r7, #8
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
 8006d06:	bf00      	nop
 8006d08:	20000fe0 	.word	0x20000fe0
 8006d0c:	20000b0c 	.word	0x20000b0c
 8006d10:	20000fec 	.word	0x20000fec
 8006d14:	20000ffc 	.word	0x20000ffc
 8006d18:	20000fe8 	.word	0x20000fe8
 8006d1c:	20000b10 	.word	0x20000b10
 8006d20:	e000ed04 	.word	0xe000ed04

08006d24 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b084      	sub	sp, #16
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d017      	beq.n	8006d66 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006d36:	4b13      	ldr	r3, [pc, #76]	; (8006d84 <vTaskDelay+0x60>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d00a      	beq.n	8006d54 <vTaskDelay+0x30>
	__asm volatile
 8006d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d42:	f383 8811 	msr	BASEPRI, r3
 8006d46:	f3bf 8f6f 	isb	sy
 8006d4a:	f3bf 8f4f 	dsb	sy
 8006d4e:	60bb      	str	r3, [r7, #8]
}
 8006d50:	bf00      	nop
 8006d52:	e7fe      	b.n	8006d52 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006d54:	f000 f880 	bl	8006e58 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006d58:	2100      	movs	r1, #0
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 fcea 	bl	8007734 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006d60:	f000 f888 	bl	8006e74 <xTaskResumeAll>
 8006d64:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d107      	bne.n	8006d7c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006d6c:	4b06      	ldr	r3, [pc, #24]	; (8006d88 <vTaskDelay+0x64>)
 8006d6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d72:	601a      	str	r2, [r3, #0]
 8006d74:	f3bf 8f4f 	dsb	sy
 8006d78:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006d7c:	bf00      	nop
 8006d7e:	3710      	adds	r7, #16
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}
 8006d84:	20001008 	.word	0x20001008
 8006d88:	e000ed04 	.word	0xe000ed04

08006d8c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b08a      	sub	sp, #40	; 0x28
 8006d90:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006d92:	2300      	movs	r3, #0
 8006d94:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006d96:	2300      	movs	r3, #0
 8006d98:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006d9a:	463a      	mov	r2, r7
 8006d9c:	1d39      	adds	r1, r7, #4
 8006d9e:	f107 0308 	add.w	r3, r7, #8
 8006da2:	4618      	mov	r0, r3
 8006da4:	f7ff f848 	bl	8005e38 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006da8:	6839      	ldr	r1, [r7, #0]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	68ba      	ldr	r2, [r7, #8]
 8006dae:	9202      	str	r2, [sp, #8]
 8006db0:	9301      	str	r3, [sp, #4]
 8006db2:	2300      	movs	r3, #0
 8006db4:	9300      	str	r3, [sp, #0]
 8006db6:	2300      	movs	r3, #0
 8006db8:	460a      	mov	r2, r1
 8006dba:	4921      	ldr	r1, [pc, #132]	; (8006e40 <vTaskStartScheduler+0xb4>)
 8006dbc:	4821      	ldr	r0, [pc, #132]	; (8006e44 <vTaskStartScheduler+0xb8>)
 8006dbe:	f7ff fe0f 	bl	80069e0 <xTaskCreateStatic>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	4a20      	ldr	r2, [pc, #128]	; (8006e48 <vTaskStartScheduler+0xbc>)
 8006dc6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006dc8:	4b1f      	ldr	r3, [pc, #124]	; (8006e48 <vTaskStartScheduler+0xbc>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d002      	beq.n	8006dd6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	617b      	str	r3, [r7, #20]
 8006dd4:	e001      	b.n	8006dda <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d102      	bne.n	8006de6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006de0:	f000 fcfc 	bl	80077dc <xTimerCreateTimerTask>
 8006de4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d116      	bne.n	8006e1a <vTaskStartScheduler+0x8e>
	__asm volatile
 8006dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df0:	f383 8811 	msr	BASEPRI, r3
 8006df4:	f3bf 8f6f 	isb	sy
 8006df8:	f3bf 8f4f 	dsb	sy
 8006dfc:	613b      	str	r3, [r7, #16]
}
 8006dfe:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006e00:	4b12      	ldr	r3, [pc, #72]	; (8006e4c <vTaskStartScheduler+0xc0>)
 8006e02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006e06:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006e08:	4b11      	ldr	r3, [pc, #68]	; (8006e50 <vTaskStartScheduler+0xc4>)
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006e0e:	4b11      	ldr	r3, [pc, #68]	; (8006e54 <vTaskStartScheduler+0xc8>)
 8006e10:	2200      	movs	r2, #0
 8006e12:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006e14:	f001 f8bc 	bl	8007f90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006e18:	e00e      	b.n	8006e38 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e20:	d10a      	bne.n	8006e38 <vTaskStartScheduler+0xac>
	__asm volatile
 8006e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e26:	f383 8811 	msr	BASEPRI, r3
 8006e2a:	f3bf 8f6f 	isb	sy
 8006e2e:	f3bf 8f4f 	dsb	sy
 8006e32:	60fb      	str	r3, [r7, #12]
}
 8006e34:	bf00      	nop
 8006e36:	e7fe      	b.n	8006e36 <vTaskStartScheduler+0xaa>
}
 8006e38:	bf00      	nop
 8006e3a:	3718      	adds	r7, #24
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}
 8006e40:	0800c8ac 	.word	0x0800c8ac
 8006e44:	08007471 	.word	0x08007471
 8006e48:	20001004 	.word	0x20001004
 8006e4c:	20001000 	.word	0x20001000
 8006e50:	20000fec 	.word	0x20000fec
 8006e54:	20000fe4 	.word	0x20000fe4

08006e58 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006e58:	b480      	push	{r7}
 8006e5a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006e5c:	4b04      	ldr	r3, [pc, #16]	; (8006e70 <vTaskSuspendAll+0x18>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	3301      	adds	r3, #1
 8006e62:	4a03      	ldr	r2, [pc, #12]	; (8006e70 <vTaskSuspendAll+0x18>)
 8006e64:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006e66:	bf00      	nop
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr
 8006e70:	20001008 	.word	0x20001008

08006e74 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006e82:	4b42      	ldr	r3, [pc, #264]	; (8006f8c <xTaskResumeAll+0x118>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d10a      	bne.n	8006ea0 <xTaskResumeAll+0x2c>
	__asm volatile
 8006e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e8e:	f383 8811 	msr	BASEPRI, r3
 8006e92:	f3bf 8f6f 	isb	sy
 8006e96:	f3bf 8f4f 	dsb	sy
 8006e9a:	603b      	str	r3, [r7, #0]
}
 8006e9c:	bf00      	nop
 8006e9e:	e7fe      	b.n	8006e9e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006ea0:	f001 f918 	bl	80080d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006ea4:	4b39      	ldr	r3, [pc, #228]	; (8006f8c <xTaskResumeAll+0x118>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	3b01      	subs	r3, #1
 8006eaa:	4a38      	ldr	r2, [pc, #224]	; (8006f8c <xTaskResumeAll+0x118>)
 8006eac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006eae:	4b37      	ldr	r3, [pc, #220]	; (8006f8c <xTaskResumeAll+0x118>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d162      	bne.n	8006f7c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006eb6:	4b36      	ldr	r3, [pc, #216]	; (8006f90 <xTaskResumeAll+0x11c>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d05e      	beq.n	8006f7c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ebe:	e02f      	b.n	8006f20 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ec0:	4b34      	ldr	r3, [pc, #208]	; (8006f94 <xTaskResumeAll+0x120>)
 8006ec2:	68db      	ldr	r3, [r3, #12]
 8006ec4:	68db      	ldr	r3, [r3, #12]
 8006ec6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	3318      	adds	r3, #24
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f7ff f871 	bl	8005fb4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	3304      	adds	r3, #4
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f7ff f86c 	bl	8005fb4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ee0:	4b2d      	ldr	r3, [pc, #180]	; (8006f98 <xTaskResumeAll+0x124>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d903      	bls.n	8006ef0 <xTaskResumeAll+0x7c>
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eec:	4a2a      	ldr	r2, [pc, #168]	; (8006f98 <xTaskResumeAll+0x124>)
 8006eee:	6013      	str	r3, [r2, #0]
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ef4:	4613      	mov	r3, r2
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	4413      	add	r3, r2
 8006efa:	009b      	lsls	r3, r3, #2
 8006efc:	4a27      	ldr	r2, [pc, #156]	; (8006f9c <xTaskResumeAll+0x128>)
 8006efe:	441a      	add	r2, r3
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	3304      	adds	r3, #4
 8006f04:	4619      	mov	r1, r3
 8006f06:	4610      	mov	r0, r2
 8006f08:	f7fe fff7 	bl	8005efa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f10:	4b23      	ldr	r3, [pc, #140]	; (8006fa0 <xTaskResumeAll+0x12c>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d302      	bcc.n	8006f20 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006f1a:	4b22      	ldr	r3, [pc, #136]	; (8006fa4 <xTaskResumeAll+0x130>)
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f20:	4b1c      	ldr	r3, [pc, #112]	; (8006f94 <xTaskResumeAll+0x120>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d1cb      	bne.n	8006ec0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d001      	beq.n	8006f32 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006f2e:	f000 fb55 	bl	80075dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006f32:	4b1d      	ldr	r3, [pc, #116]	; (8006fa8 <xTaskResumeAll+0x134>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d010      	beq.n	8006f60 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006f3e:	f000 f847 	bl	8006fd0 <xTaskIncrementTick>
 8006f42:	4603      	mov	r3, r0
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d002      	beq.n	8006f4e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006f48:	4b16      	ldr	r3, [pc, #88]	; (8006fa4 <xTaskResumeAll+0x130>)
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	3b01      	subs	r3, #1
 8006f52:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d1f1      	bne.n	8006f3e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006f5a:	4b13      	ldr	r3, [pc, #76]	; (8006fa8 <xTaskResumeAll+0x134>)
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006f60:	4b10      	ldr	r3, [pc, #64]	; (8006fa4 <xTaskResumeAll+0x130>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d009      	beq.n	8006f7c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006f6c:	4b0f      	ldr	r3, [pc, #60]	; (8006fac <xTaskResumeAll+0x138>)
 8006f6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f72:	601a      	str	r2, [r3, #0]
 8006f74:	f3bf 8f4f 	dsb	sy
 8006f78:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f7c:	f001 f8da 	bl	8008134 <vPortExitCritical>

	return xAlreadyYielded;
 8006f80:	68bb      	ldr	r3, [r7, #8]
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3710      	adds	r7, #16
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}
 8006f8a:	bf00      	nop
 8006f8c:	20001008 	.word	0x20001008
 8006f90:	20000fe0 	.word	0x20000fe0
 8006f94:	20000fa0 	.word	0x20000fa0
 8006f98:	20000fe8 	.word	0x20000fe8
 8006f9c:	20000b10 	.word	0x20000b10
 8006fa0:	20000b0c 	.word	0x20000b0c
 8006fa4:	20000ff4 	.word	0x20000ff4
 8006fa8:	20000ff0 	.word	0x20000ff0
 8006fac:	e000ed04 	.word	0xe000ed04

08006fb0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b083      	sub	sp, #12
 8006fb4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006fb6:	4b05      	ldr	r3, [pc, #20]	; (8006fcc <xTaskGetTickCount+0x1c>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006fbc:	687b      	ldr	r3, [r7, #4]
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	370c      	adds	r7, #12
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr
 8006fca:	bf00      	nop
 8006fcc:	20000fe4 	.word	0x20000fe4

08006fd0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b086      	sub	sp, #24
 8006fd4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fda:	4b4f      	ldr	r3, [pc, #316]	; (8007118 <xTaskIncrementTick+0x148>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	f040 808f 	bne.w	8007102 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006fe4:	4b4d      	ldr	r3, [pc, #308]	; (800711c <xTaskIncrementTick+0x14c>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	3301      	adds	r3, #1
 8006fea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006fec:	4a4b      	ldr	r2, [pc, #300]	; (800711c <xTaskIncrementTick+0x14c>)
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d120      	bne.n	800703a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006ff8:	4b49      	ldr	r3, [pc, #292]	; (8007120 <xTaskIncrementTick+0x150>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d00a      	beq.n	8007018 <xTaskIncrementTick+0x48>
	__asm volatile
 8007002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007006:	f383 8811 	msr	BASEPRI, r3
 800700a:	f3bf 8f6f 	isb	sy
 800700e:	f3bf 8f4f 	dsb	sy
 8007012:	603b      	str	r3, [r7, #0]
}
 8007014:	bf00      	nop
 8007016:	e7fe      	b.n	8007016 <xTaskIncrementTick+0x46>
 8007018:	4b41      	ldr	r3, [pc, #260]	; (8007120 <xTaskIncrementTick+0x150>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	60fb      	str	r3, [r7, #12]
 800701e:	4b41      	ldr	r3, [pc, #260]	; (8007124 <xTaskIncrementTick+0x154>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a3f      	ldr	r2, [pc, #252]	; (8007120 <xTaskIncrementTick+0x150>)
 8007024:	6013      	str	r3, [r2, #0]
 8007026:	4a3f      	ldr	r2, [pc, #252]	; (8007124 <xTaskIncrementTick+0x154>)
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6013      	str	r3, [r2, #0]
 800702c:	4b3e      	ldr	r3, [pc, #248]	; (8007128 <xTaskIncrementTick+0x158>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	3301      	adds	r3, #1
 8007032:	4a3d      	ldr	r2, [pc, #244]	; (8007128 <xTaskIncrementTick+0x158>)
 8007034:	6013      	str	r3, [r2, #0]
 8007036:	f000 fad1 	bl	80075dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800703a:	4b3c      	ldr	r3, [pc, #240]	; (800712c <xTaskIncrementTick+0x15c>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	693a      	ldr	r2, [r7, #16]
 8007040:	429a      	cmp	r2, r3
 8007042:	d349      	bcc.n	80070d8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007044:	4b36      	ldr	r3, [pc, #216]	; (8007120 <xTaskIncrementTick+0x150>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d104      	bne.n	8007058 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800704e:	4b37      	ldr	r3, [pc, #220]	; (800712c <xTaskIncrementTick+0x15c>)
 8007050:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007054:	601a      	str	r2, [r3, #0]
					break;
 8007056:	e03f      	b.n	80070d8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007058:	4b31      	ldr	r3, [pc, #196]	; (8007120 <xTaskIncrementTick+0x150>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	68db      	ldr	r3, [r3, #12]
 800705e:	68db      	ldr	r3, [r3, #12]
 8007060:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007068:	693a      	ldr	r2, [r7, #16]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	429a      	cmp	r2, r3
 800706e:	d203      	bcs.n	8007078 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007070:	4a2e      	ldr	r2, [pc, #184]	; (800712c <xTaskIncrementTick+0x15c>)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007076:	e02f      	b.n	80070d8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	3304      	adds	r3, #4
 800707c:	4618      	mov	r0, r3
 800707e:	f7fe ff99 	bl	8005fb4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007086:	2b00      	cmp	r3, #0
 8007088:	d004      	beq.n	8007094 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	3318      	adds	r3, #24
 800708e:	4618      	mov	r0, r3
 8007090:	f7fe ff90 	bl	8005fb4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007098:	4b25      	ldr	r3, [pc, #148]	; (8007130 <xTaskIncrementTick+0x160>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	429a      	cmp	r2, r3
 800709e:	d903      	bls.n	80070a8 <xTaskIncrementTick+0xd8>
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a4:	4a22      	ldr	r2, [pc, #136]	; (8007130 <xTaskIncrementTick+0x160>)
 80070a6:	6013      	str	r3, [r2, #0]
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070ac:	4613      	mov	r3, r2
 80070ae:	009b      	lsls	r3, r3, #2
 80070b0:	4413      	add	r3, r2
 80070b2:	009b      	lsls	r3, r3, #2
 80070b4:	4a1f      	ldr	r2, [pc, #124]	; (8007134 <xTaskIncrementTick+0x164>)
 80070b6:	441a      	add	r2, r3
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	3304      	adds	r3, #4
 80070bc:	4619      	mov	r1, r3
 80070be:	4610      	mov	r0, r2
 80070c0:	f7fe ff1b 	bl	8005efa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070c8:	4b1b      	ldr	r3, [pc, #108]	; (8007138 <xTaskIncrementTick+0x168>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d3b8      	bcc.n	8007044 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80070d2:	2301      	movs	r3, #1
 80070d4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070d6:	e7b5      	b.n	8007044 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80070d8:	4b17      	ldr	r3, [pc, #92]	; (8007138 <xTaskIncrementTick+0x168>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070de:	4915      	ldr	r1, [pc, #84]	; (8007134 <xTaskIncrementTick+0x164>)
 80070e0:	4613      	mov	r3, r2
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	4413      	add	r3, r2
 80070e6:	009b      	lsls	r3, r3, #2
 80070e8:	440b      	add	r3, r1
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d901      	bls.n	80070f4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80070f0:	2301      	movs	r3, #1
 80070f2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80070f4:	4b11      	ldr	r3, [pc, #68]	; (800713c <xTaskIncrementTick+0x16c>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d007      	beq.n	800710c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80070fc:	2301      	movs	r3, #1
 80070fe:	617b      	str	r3, [r7, #20]
 8007100:	e004      	b.n	800710c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007102:	4b0f      	ldr	r3, [pc, #60]	; (8007140 <xTaskIncrementTick+0x170>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	3301      	adds	r3, #1
 8007108:	4a0d      	ldr	r2, [pc, #52]	; (8007140 <xTaskIncrementTick+0x170>)
 800710a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800710c:	697b      	ldr	r3, [r7, #20]
}
 800710e:	4618      	mov	r0, r3
 8007110:	3718      	adds	r7, #24
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}
 8007116:	bf00      	nop
 8007118:	20001008 	.word	0x20001008
 800711c:	20000fe4 	.word	0x20000fe4
 8007120:	20000f98 	.word	0x20000f98
 8007124:	20000f9c 	.word	0x20000f9c
 8007128:	20000ff8 	.word	0x20000ff8
 800712c:	20001000 	.word	0x20001000
 8007130:	20000fe8 	.word	0x20000fe8
 8007134:	20000b10 	.word	0x20000b10
 8007138:	20000b0c 	.word	0x20000b0c
 800713c:	20000ff4 	.word	0x20000ff4
 8007140:	20000ff0 	.word	0x20000ff0

08007144 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007144:	b480      	push	{r7}
 8007146:	b085      	sub	sp, #20
 8007148:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800714a:	4b28      	ldr	r3, [pc, #160]	; (80071ec <vTaskSwitchContext+0xa8>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d003      	beq.n	800715a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007152:	4b27      	ldr	r3, [pc, #156]	; (80071f0 <vTaskSwitchContext+0xac>)
 8007154:	2201      	movs	r2, #1
 8007156:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007158:	e041      	b.n	80071de <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800715a:	4b25      	ldr	r3, [pc, #148]	; (80071f0 <vTaskSwitchContext+0xac>)
 800715c:	2200      	movs	r2, #0
 800715e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007160:	4b24      	ldr	r3, [pc, #144]	; (80071f4 <vTaskSwitchContext+0xb0>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	60fb      	str	r3, [r7, #12]
 8007166:	e010      	b.n	800718a <vTaskSwitchContext+0x46>
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d10a      	bne.n	8007184 <vTaskSwitchContext+0x40>
	__asm volatile
 800716e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007172:	f383 8811 	msr	BASEPRI, r3
 8007176:	f3bf 8f6f 	isb	sy
 800717a:	f3bf 8f4f 	dsb	sy
 800717e:	607b      	str	r3, [r7, #4]
}
 8007180:	bf00      	nop
 8007182:	e7fe      	b.n	8007182 <vTaskSwitchContext+0x3e>
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	3b01      	subs	r3, #1
 8007188:	60fb      	str	r3, [r7, #12]
 800718a:	491b      	ldr	r1, [pc, #108]	; (80071f8 <vTaskSwitchContext+0xb4>)
 800718c:	68fa      	ldr	r2, [r7, #12]
 800718e:	4613      	mov	r3, r2
 8007190:	009b      	lsls	r3, r3, #2
 8007192:	4413      	add	r3, r2
 8007194:	009b      	lsls	r3, r3, #2
 8007196:	440b      	add	r3, r1
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d0e4      	beq.n	8007168 <vTaskSwitchContext+0x24>
 800719e:	68fa      	ldr	r2, [r7, #12]
 80071a0:	4613      	mov	r3, r2
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	4413      	add	r3, r2
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	4a13      	ldr	r2, [pc, #76]	; (80071f8 <vTaskSwitchContext+0xb4>)
 80071aa:	4413      	add	r3, r2
 80071ac:	60bb      	str	r3, [r7, #8]
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	685a      	ldr	r2, [r3, #4]
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	605a      	str	r2, [r3, #4]
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	685a      	ldr	r2, [r3, #4]
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	3308      	adds	r3, #8
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d104      	bne.n	80071ce <vTaskSwitchContext+0x8a>
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	685a      	ldr	r2, [r3, #4]
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	605a      	str	r2, [r3, #4]
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	68db      	ldr	r3, [r3, #12]
 80071d4:	4a09      	ldr	r2, [pc, #36]	; (80071fc <vTaskSwitchContext+0xb8>)
 80071d6:	6013      	str	r3, [r2, #0]
 80071d8:	4a06      	ldr	r2, [pc, #24]	; (80071f4 <vTaskSwitchContext+0xb0>)
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	6013      	str	r3, [r2, #0]
}
 80071de:	bf00      	nop
 80071e0:	3714      	adds	r7, #20
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr
 80071ea:	bf00      	nop
 80071ec:	20001008 	.word	0x20001008
 80071f0:	20000ff4 	.word	0x20000ff4
 80071f4:	20000fe8 	.word	0x20000fe8
 80071f8:	20000b10 	.word	0x20000b10
 80071fc:	20000b0c 	.word	0x20000b0c

08007200 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b084      	sub	sp, #16
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d10a      	bne.n	8007226 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007214:	f383 8811 	msr	BASEPRI, r3
 8007218:	f3bf 8f6f 	isb	sy
 800721c:	f3bf 8f4f 	dsb	sy
 8007220:	60fb      	str	r3, [r7, #12]
}
 8007222:	bf00      	nop
 8007224:	e7fe      	b.n	8007224 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007226:	4b07      	ldr	r3, [pc, #28]	; (8007244 <vTaskPlaceOnEventList+0x44>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	3318      	adds	r3, #24
 800722c:	4619      	mov	r1, r3
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f7fe fe87 	bl	8005f42 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007234:	2101      	movs	r1, #1
 8007236:	6838      	ldr	r0, [r7, #0]
 8007238:	f000 fa7c 	bl	8007734 <prvAddCurrentTaskToDelayedList>
}
 800723c:	bf00      	nop
 800723e:	3710      	adds	r7, #16
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}
 8007244:	20000b0c 	.word	0x20000b0c

08007248 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007248:	b580      	push	{r7, lr}
 800724a:	b086      	sub	sp, #24
 800724c:	af00      	add	r7, sp, #0
 800724e:	60f8      	str	r0, [r7, #12]
 8007250:	60b9      	str	r1, [r7, #8]
 8007252:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d10a      	bne.n	8007270 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800725a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800725e:	f383 8811 	msr	BASEPRI, r3
 8007262:	f3bf 8f6f 	isb	sy
 8007266:	f3bf 8f4f 	dsb	sy
 800726a:	617b      	str	r3, [r7, #20]
}
 800726c:	bf00      	nop
 800726e:	e7fe      	b.n	800726e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007270:	4b0a      	ldr	r3, [pc, #40]	; (800729c <vTaskPlaceOnEventListRestricted+0x54>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	3318      	adds	r3, #24
 8007276:	4619      	mov	r1, r3
 8007278:	68f8      	ldr	r0, [r7, #12]
 800727a:	f7fe fe3e 	bl	8005efa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d002      	beq.n	800728a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007284:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007288:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800728a:	6879      	ldr	r1, [r7, #4]
 800728c:	68b8      	ldr	r0, [r7, #8]
 800728e:	f000 fa51 	bl	8007734 <prvAddCurrentTaskToDelayedList>
	}
 8007292:	bf00      	nop
 8007294:	3718      	adds	r7, #24
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
 800729a:	bf00      	nop
 800729c:	20000b0c 	.word	0x20000b0c

080072a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b086      	sub	sp, #24
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	68db      	ldr	r3, [r3, #12]
 80072ac:	68db      	ldr	r3, [r3, #12]
 80072ae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d10a      	bne.n	80072cc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80072b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ba:	f383 8811 	msr	BASEPRI, r3
 80072be:	f3bf 8f6f 	isb	sy
 80072c2:	f3bf 8f4f 	dsb	sy
 80072c6:	60fb      	str	r3, [r7, #12]
}
 80072c8:	bf00      	nop
 80072ca:	e7fe      	b.n	80072ca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	3318      	adds	r3, #24
 80072d0:	4618      	mov	r0, r3
 80072d2:	f7fe fe6f 	bl	8005fb4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072d6:	4b1e      	ldr	r3, [pc, #120]	; (8007350 <xTaskRemoveFromEventList+0xb0>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d11d      	bne.n	800731a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	3304      	adds	r3, #4
 80072e2:	4618      	mov	r0, r3
 80072e4:	f7fe fe66 	bl	8005fb4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072ec:	4b19      	ldr	r3, [pc, #100]	; (8007354 <xTaskRemoveFromEventList+0xb4>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	429a      	cmp	r2, r3
 80072f2:	d903      	bls.n	80072fc <xTaskRemoveFromEventList+0x5c>
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f8:	4a16      	ldr	r2, [pc, #88]	; (8007354 <xTaskRemoveFromEventList+0xb4>)
 80072fa:	6013      	str	r3, [r2, #0]
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007300:	4613      	mov	r3, r2
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	4413      	add	r3, r2
 8007306:	009b      	lsls	r3, r3, #2
 8007308:	4a13      	ldr	r2, [pc, #76]	; (8007358 <xTaskRemoveFromEventList+0xb8>)
 800730a:	441a      	add	r2, r3
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	3304      	adds	r3, #4
 8007310:	4619      	mov	r1, r3
 8007312:	4610      	mov	r0, r2
 8007314:	f7fe fdf1 	bl	8005efa <vListInsertEnd>
 8007318:	e005      	b.n	8007326 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	3318      	adds	r3, #24
 800731e:	4619      	mov	r1, r3
 8007320:	480e      	ldr	r0, [pc, #56]	; (800735c <xTaskRemoveFromEventList+0xbc>)
 8007322:	f7fe fdea 	bl	8005efa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800732a:	4b0d      	ldr	r3, [pc, #52]	; (8007360 <xTaskRemoveFromEventList+0xc0>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007330:	429a      	cmp	r2, r3
 8007332:	d905      	bls.n	8007340 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007334:	2301      	movs	r3, #1
 8007336:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007338:	4b0a      	ldr	r3, [pc, #40]	; (8007364 <xTaskRemoveFromEventList+0xc4>)
 800733a:	2201      	movs	r2, #1
 800733c:	601a      	str	r2, [r3, #0]
 800733e:	e001      	b.n	8007344 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007340:	2300      	movs	r3, #0
 8007342:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007344:	697b      	ldr	r3, [r7, #20]
}
 8007346:	4618      	mov	r0, r3
 8007348:	3718      	adds	r7, #24
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}
 800734e:	bf00      	nop
 8007350:	20001008 	.word	0x20001008
 8007354:	20000fe8 	.word	0x20000fe8
 8007358:	20000b10 	.word	0x20000b10
 800735c:	20000fa0 	.word	0x20000fa0
 8007360:	20000b0c 	.word	0x20000b0c
 8007364:	20000ff4 	.word	0x20000ff4

08007368 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007368:	b480      	push	{r7}
 800736a:	b083      	sub	sp, #12
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007370:	4b06      	ldr	r3, [pc, #24]	; (800738c <vTaskInternalSetTimeOutState+0x24>)
 8007372:	681a      	ldr	r2, [r3, #0]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007378:	4b05      	ldr	r3, [pc, #20]	; (8007390 <vTaskInternalSetTimeOutState+0x28>)
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	605a      	str	r2, [r3, #4]
}
 8007380:	bf00      	nop
 8007382:	370c      	adds	r7, #12
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr
 800738c:	20000ff8 	.word	0x20000ff8
 8007390:	20000fe4 	.word	0x20000fe4

08007394 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b088      	sub	sp, #32
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d10a      	bne.n	80073ba <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80073a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a8:	f383 8811 	msr	BASEPRI, r3
 80073ac:	f3bf 8f6f 	isb	sy
 80073b0:	f3bf 8f4f 	dsb	sy
 80073b4:	613b      	str	r3, [r7, #16]
}
 80073b6:	bf00      	nop
 80073b8:	e7fe      	b.n	80073b8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d10a      	bne.n	80073d6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80073c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c4:	f383 8811 	msr	BASEPRI, r3
 80073c8:	f3bf 8f6f 	isb	sy
 80073cc:	f3bf 8f4f 	dsb	sy
 80073d0:	60fb      	str	r3, [r7, #12]
}
 80073d2:	bf00      	nop
 80073d4:	e7fe      	b.n	80073d4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80073d6:	f000 fe7d 	bl	80080d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80073da:	4b1d      	ldr	r3, [pc, #116]	; (8007450 <xTaskCheckForTimeOut+0xbc>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	69ba      	ldr	r2, [r7, #24]
 80073e6:	1ad3      	subs	r3, r2, r3
 80073e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073f2:	d102      	bne.n	80073fa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80073f4:	2300      	movs	r3, #0
 80073f6:	61fb      	str	r3, [r7, #28]
 80073f8:	e023      	b.n	8007442 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	4b15      	ldr	r3, [pc, #84]	; (8007454 <xTaskCheckForTimeOut+0xc0>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	429a      	cmp	r2, r3
 8007404:	d007      	beq.n	8007416 <xTaskCheckForTimeOut+0x82>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	69ba      	ldr	r2, [r7, #24]
 800740c:	429a      	cmp	r2, r3
 800740e:	d302      	bcc.n	8007416 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007410:	2301      	movs	r3, #1
 8007412:	61fb      	str	r3, [r7, #28]
 8007414:	e015      	b.n	8007442 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	697a      	ldr	r2, [r7, #20]
 800741c:	429a      	cmp	r2, r3
 800741e:	d20b      	bcs.n	8007438 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	681a      	ldr	r2, [r3, #0]
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	1ad2      	subs	r2, r2, r3
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f7ff ff9b 	bl	8007368 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007432:	2300      	movs	r3, #0
 8007434:	61fb      	str	r3, [r7, #28]
 8007436:	e004      	b.n	8007442 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	2200      	movs	r2, #0
 800743c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800743e:	2301      	movs	r3, #1
 8007440:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007442:	f000 fe77 	bl	8008134 <vPortExitCritical>

	return xReturn;
 8007446:	69fb      	ldr	r3, [r7, #28]
}
 8007448:	4618      	mov	r0, r3
 800744a:	3720      	adds	r7, #32
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}
 8007450:	20000fe4 	.word	0x20000fe4
 8007454:	20000ff8 	.word	0x20000ff8

08007458 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007458:	b480      	push	{r7}
 800745a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800745c:	4b03      	ldr	r3, [pc, #12]	; (800746c <vTaskMissedYield+0x14>)
 800745e:	2201      	movs	r2, #1
 8007460:	601a      	str	r2, [r3, #0]
}
 8007462:	bf00      	nop
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr
 800746c:	20000ff4 	.word	0x20000ff4

08007470 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b082      	sub	sp, #8
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007478:	f000 f852 	bl	8007520 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800747c:	4b06      	ldr	r3, [pc, #24]	; (8007498 <prvIdleTask+0x28>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	2b01      	cmp	r3, #1
 8007482:	d9f9      	bls.n	8007478 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007484:	4b05      	ldr	r3, [pc, #20]	; (800749c <prvIdleTask+0x2c>)
 8007486:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800748a:	601a      	str	r2, [r3, #0]
 800748c:	f3bf 8f4f 	dsb	sy
 8007490:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007494:	e7f0      	b.n	8007478 <prvIdleTask+0x8>
 8007496:	bf00      	nop
 8007498:	20000b10 	.word	0x20000b10
 800749c:	e000ed04 	.word	0xe000ed04

080074a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b082      	sub	sp, #8
 80074a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80074a6:	2300      	movs	r3, #0
 80074a8:	607b      	str	r3, [r7, #4]
 80074aa:	e00c      	b.n	80074c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80074ac:	687a      	ldr	r2, [r7, #4]
 80074ae:	4613      	mov	r3, r2
 80074b0:	009b      	lsls	r3, r3, #2
 80074b2:	4413      	add	r3, r2
 80074b4:	009b      	lsls	r3, r3, #2
 80074b6:	4a12      	ldr	r2, [pc, #72]	; (8007500 <prvInitialiseTaskLists+0x60>)
 80074b8:	4413      	add	r3, r2
 80074ba:	4618      	mov	r0, r3
 80074bc:	f7fe fcf0 	bl	8005ea0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	3301      	adds	r3, #1
 80074c4:	607b      	str	r3, [r7, #4]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2b37      	cmp	r3, #55	; 0x37
 80074ca:	d9ef      	bls.n	80074ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80074cc:	480d      	ldr	r0, [pc, #52]	; (8007504 <prvInitialiseTaskLists+0x64>)
 80074ce:	f7fe fce7 	bl	8005ea0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80074d2:	480d      	ldr	r0, [pc, #52]	; (8007508 <prvInitialiseTaskLists+0x68>)
 80074d4:	f7fe fce4 	bl	8005ea0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80074d8:	480c      	ldr	r0, [pc, #48]	; (800750c <prvInitialiseTaskLists+0x6c>)
 80074da:	f7fe fce1 	bl	8005ea0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80074de:	480c      	ldr	r0, [pc, #48]	; (8007510 <prvInitialiseTaskLists+0x70>)
 80074e0:	f7fe fcde 	bl	8005ea0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80074e4:	480b      	ldr	r0, [pc, #44]	; (8007514 <prvInitialiseTaskLists+0x74>)
 80074e6:	f7fe fcdb 	bl	8005ea0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80074ea:	4b0b      	ldr	r3, [pc, #44]	; (8007518 <prvInitialiseTaskLists+0x78>)
 80074ec:	4a05      	ldr	r2, [pc, #20]	; (8007504 <prvInitialiseTaskLists+0x64>)
 80074ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80074f0:	4b0a      	ldr	r3, [pc, #40]	; (800751c <prvInitialiseTaskLists+0x7c>)
 80074f2:	4a05      	ldr	r2, [pc, #20]	; (8007508 <prvInitialiseTaskLists+0x68>)
 80074f4:	601a      	str	r2, [r3, #0]
}
 80074f6:	bf00      	nop
 80074f8:	3708      	adds	r7, #8
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
 80074fe:	bf00      	nop
 8007500:	20000b10 	.word	0x20000b10
 8007504:	20000f70 	.word	0x20000f70
 8007508:	20000f84 	.word	0x20000f84
 800750c:	20000fa0 	.word	0x20000fa0
 8007510:	20000fb4 	.word	0x20000fb4
 8007514:	20000fcc 	.word	0x20000fcc
 8007518:	20000f98 	.word	0x20000f98
 800751c:	20000f9c 	.word	0x20000f9c

08007520 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b082      	sub	sp, #8
 8007524:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007526:	e019      	b.n	800755c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007528:	f000 fdd4 	bl	80080d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800752c:	4b10      	ldr	r3, [pc, #64]	; (8007570 <prvCheckTasksWaitingTermination+0x50>)
 800752e:	68db      	ldr	r3, [r3, #12]
 8007530:	68db      	ldr	r3, [r3, #12]
 8007532:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	3304      	adds	r3, #4
 8007538:	4618      	mov	r0, r3
 800753a:	f7fe fd3b 	bl	8005fb4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800753e:	4b0d      	ldr	r3, [pc, #52]	; (8007574 <prvCheckTasksWaitingTermination+0x54>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	3b01      	subs	r3, #1
 8007544:	4a0b      	ldr	r2, [pc, #44]	; (8007574 <prvCheckTasksWaitingTermination+0x54>)
 8007546:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007548:	4b0b      	ldr	r3, [pc, #44]	; (8007578 <prvCheckTasksWaitingTermination+0x58>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	3b01      	subs	r3, #1
 800754e:	4a0a      	ldr	r2, [pc, #40]	; (8007578 <prvCheckTasksWaitingTermination+0x58>)
 8007550:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007552:	f000 fdef 	bl	8008134 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 f810 	bl	800757c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800755c:	4b06      	ldr	r3, [pc, #24]	; (8007578 <prvCheckTasksWaitingTermination+0x58>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d1e1      	bne.n	8007528 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007564:	bf00      	nop
 8007566:	bf00      	nop
 8007568:	3708      	adds	r7, #8
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}
 800756e:	bf00      	nop
 8007570:	20000fb4 	.word	0x20000fb4
 8007574:	20000fe0 	.word	0x20000fe0
 8007578:	20000fc8 	.word	0x20000fc8

0800757c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800757c:	b580      	push	{r7, lr}
 800757e:	b084      	sub	sp, #16
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800758a:	2b00      	cmp	r3, #0
 800758c:	d108      	bne.n	80075a0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007592:	4618      	mov	r0, r3
 8007594:	f000 ff8c 	bl	80084b0 <vPortFree>
				vPortFree( pxTCB );
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f000 ff89 	bl	80084b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800759e:	e018      	b.n	80075d2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	d103      	bne.n	80075b2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 ff80 	bl	80084b0 <vPortFree>
	}
 80075b0:	e00f      	b.n	80075d2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80075b8:	2b02      	cmp	r3, #2
 80075ba:	d00a      	beq.n	80075d2 <prvDeleteTCB+0x56>
	__asm volatile
 80075bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c0:	f383 8811 	msr	BASEPRI, r3
 80075c4:	f3bf 8f6f 	isb	sy
 80075c8:	f3bf 8f4f 	dsb	sy
 80075cc:	60fb      	str	r3, [r7, #12]
}
 80075ce:	bf00      	nop
 80075d0:	e7fe      	b.n	80075d0 <prvDeleteTCB+0x54>
	}
 80075d2:	bf00      	nop
 80075d4:	3710      	adds	r7, #16
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}
	...

080075dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80075dc:	b480      	push	{r7}
 80075de:	b083      	sub	sp, #12
 80075e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80075e2:	4b0c      	ldr	r3, [pc, #48]	; (8007614 <prvResetNextTaskUnblockTime+0x38>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d104      	bne.n	80075f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80075ec:	4b0a      	ldr	r3, [pc, #40]	; (8007618 <prvResetNextTaskUnblockTime+0x3c>)
 80075ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80075f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80075f4:	e008      	b.n	8007608 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075f6:	4b07      	ldr	r3, [pc, #28]	; (8007614 <prvResetNextTaskUnblockTime+0x38>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	68db      	ldr	r3, [r3, #12]
 80075fc:	68db      	ldr	r3, [r3, #12]
 80075fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	4a04      	ldr	r2, [pc, #16]	; (8007618 <prvResetNextTaskUnblockTime+0x3c>)
 8007606:	6013      	str	r3, [r2, #0]
}
 8007608:	bf00      	nop
 800760a:	370c      	adds	r7, #12
 800760c:	46bd      	mov	sp, r7
 800760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007612:	4770      	bx	lr
 8007614:	20000f98 	.word	0x20000f98
 8007618:	20001000 	.word	0x20001000

0800761c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800761c:	b480      	push	{r7}
 800761e:	b083      	sub	sp, #12
 8007620:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007622:	4b0b      	ldr	r3, [pc, #44]	; (8007650 <xTaskGetSchedulerState+0x34>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d102      	bne.n	8007630 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800762a:	2301      	movs	r3, #1
 800762c:	607b      	str	r3, [r7, #4]
 800762e:	e008      	b.n	8007642 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007630:	4b08      	ldr	r3, [pc, #32]	; (8007654 <xTaskGetSchedulerState+0x38>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d102      	bne.n	800763e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007638:	2302      	movs	r3, #2
 800763a:	607b      	str	r3, [r7, #4]
 800763c:	e001      	b.n	8007642 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800763e:	2300      	movs	r3, #0
 8007640:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007642:	687b      	ldr	r3, [r7, #4]
	}
 8007644:	4618      	mov	r0, r3
 8007646:	370c      	adds	r7, #12
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr
 8007650:	20000fec 	.word	0x20000fec
 8007654:	20001008 	.word	0x20001008

08007658 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007658:	b580      	push	{r7, lr}
 800765a:	b086      	sub	sp, #24
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007664:	2300      	movs	r3, #0
 8007666:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d056      	beq.n	800771c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800766e:	4b2e      	ldr	r3, [pc, #184]	; (8007728 <xTaskPriorityDisinherit+0xd0>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	693a      	ldr	r2, [r7, #16]
 8007674:	429a      	cmp	r2, r3
 8007676:	d00a      	beq.n	800768e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800767c:	f383 8811 	msr	BASEPRI, r3
 8007680:	f3bf 8f6f 	isb	sy
 8007684:	f3bf 8f4f 	dsb	sy
 8007688:	60fb      	str	r3, [r7, #12]
}
 800768a:	bf00      	nop
 800768c:	e7fe      	b.n	800768c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007692:	2b00      	cmp	r3, #0
 8007694:	d10a      	bne.n	80076ac <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800769a:	f383 8811 	msr	BASEPRI, r3
 800769e:	f3bf 8f6f 	isb	sy
 80076a2:	f3bf 8f4f 	dsb	sy
 80076a6:	60bb      	str	r3, [r7, #8]
}
 80076a8:	bf00      	nop
 80076aa:	e7fe      	b.n	80076aa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076b0:	1e5a      	subs	r2, r3, #1
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076be:	429a      	cmp	r2, r3
 80076c0:	d02c      	beq.n	800771c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d128      	bne.n	800771c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	3304      	adds	r3, #4
 80076ce:	4618      	mov	r0, r3
 80076d0:	f7fe fc70 	bl	8005fb4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076ec:	4b0f      	ldr	r3, [pc, #60]	; (800772c <xTaskPriorityDisinherit+0xd4>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	429a      	cmp	r2, r3
 80076f2:	d903      	bls.n	80076fc <xTaskPriorityDisinherit+0xa4>
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f8:	4a0c      	ldr	r2, [pc, #48]	; (800772c <xTaskPriorityDisinherit+0xd4>)
 80076fa:	6013      	str	r3, [r2, #0]
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007700:	4613      	mov	r3, r2
 8007702:	009b      	lsls	r3, r3, #2
 8007704:	4413      	add	r3, r2
 8007706:	009b      	lsls	r3, r3, #2
 8007708:	4a09      	ldr	r2, [pc, #36]	; (8007730 <xTaskPriorityDisinherit+0xd8>)
 800770a:	441a      	add	r2, r3
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	3304      	adds	r3, #4
 8007710:	4619      	mov	r1, r3
 8007712:	4610      	mov	r0, r2
 8007714:	f7fe fbf1 	bl	8005efa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007718:	2301      	movs	r3, #1
 800771a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800771c:	697b      	ldr	r3, [r7, #20]
	}
 800771e:	4618      	mov	r0, r3
 8007720:	3718      	adds	r7, #24
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
 8007726:	bf00      	nop
 8007728:	20000b0c 	.word	0x20000b0c
 800772c:	20000fe8 	.word	0x20000fe8
 8007730:	20000b10 	.word	0x20000b10

08007734 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b084      	sub	sp, #16
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800773e:	4b21      	ldr	r3, [pc, #132]	; (80077c4 <prvAddCurrentTaskToDelayedList+0x90>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007744:	4b20      	ldr	r3, [pc, #128]	; (80077c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	3304      	adds	r3, #4
 800774a:	4618      	mov	r0, r3
 800774c:	f7fe fc32 	bl	8005fb4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007756:	d10a      	bne.n	800776e <prvAddCurrentTaskToDelayedList+0x3a>
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d007      	beq.n	800776e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800775e:	4b1a      	ldr	r3, [pc, #104]	; (80077c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	3304      	adds	r3, #4
 8007764:	4619      	mov	r1, r3
 8007766:	4819      	ldr	r0, [pc, #100]	; (80077cc <prvAddCurrentTaskToDelayedList+0x98>)
 8007768:	f7fe fbc7 	bl	8005efa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800776c:	e026      	b.n	80077bc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800776e:	68fa      	ldr	r2, [r7, #12]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	4413      	add	r3, r2
 8007774:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007776:	4b14      	ldr	r3, [pc, #80]	; (80077c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	68ba      	ldr	r2, [r7, #8]
 800777c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800777e:	68ba      	ldr	r2, [r7, #8]
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	429a      	cmp	r2, r3
 8007784:	d209      	bcs.n	800779a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007786:	4b12      	ldr	r3, [pc, #72]	; (80077d0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007788:	681a      	ldr	r2, [r3, #0]
 800778a:	4b0f      	ldr	r3, [pc, #60]	; (80077c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	3304      	adds	r3, #4
 8007790:	4619      	mov	r1, r3
 8007792:	4610      	mov	r0, r2
 8007794:	f7fe fbd5 	bl	8005f42 <vListInsert>
}
 8007798:	e010      	b.n	80077bc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800779a:	4b0e      	ldr	r3, [pc, #56]	; (80077d4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800779c:	681a      	ldr	r2, [r3, #0]
 800779e:	4b0a      	ldr	r3, [pc, #40]	; (80077c8 <prvAddCurrentTaskToDelayedList+0x94>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	3304      	adds	r3, #4
 80077a4:	4619      	mov	r1, r3
 80077a6:	4610      	mov	r0, r2
 80077a8:	f7fe fbcb 	bl	8005f42 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80077ac:	4b0a      	ldr	r3, [pc, #40]	; (80077d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	68ba      	ldr	r2, [r7, #8]
 80077b2:	429a      	cmp	r2, r3
 80077b4:	d202      	bcs.n	80077bc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80077b6:	4a08      	ldr	r2, [pc, #32]	; (80077d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	6013      	str	r3, [r2, #0]
}
 80077bc:	bf00      	nop
 80077be:	3710      	adds	r7, #16
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}
 80077c4:	20000fe4 	.word	0x20000fe4
 80077c8:	20000b0c 	.word	0x20000b0c
 80077cc:	20000fcc 	.word	0x20000fcc
 80077d0:	20000f9c 	.word	0x20000f9c
 80077d4:	20000f98 	.word	0x20000f98
 80077d8:	20001000 	.word	0x20001000

080077dc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b08a      	sub	sp, #40	; 0x28
 80077e0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80077e2:	2300      	movs	r3, #0
 80077e4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80077e6:	f000 fb07 	bl	8007df8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80077ea:	4b1c      	ldr	r3, [pc, #112]	; (800785c <xTimerCreateTimerTask+0x80>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d021      	beq.n	8007836 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80077f2:	2300      	movs	r3, #0
 80077f4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80077f6:	2300      	movs	r3, #0
 80077f8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80077fa:	1d3a      	adds	r2, r7, #4
 80077fc:	f107 0108 	add.w	r1, r7, #8
 8007800:	f107 030c 	add.w	r3, r7, #12
 8007804:	4618      	mov	r0, r3
 8007806:	f7fe fb31 	bl	8005e6c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800780a:	6879      	ldr	r1, [r7, #4]
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	68fa      	ldr	r2, [r7, #12]
 8007810:	9202      	str	r2, [sp, #8]
 8007812:	9301      	str	r3, [sp, #4]
 8007814:	2302      	movs	r3, #2
 8007816:	9300      	str	r3, [sp, #0]
 8007818:	2300      	movs	r3, #0
 800781a:	460a      	mov	r2, r1
 800781c:	4910      	ldr	r1, [pc, #64]	; (8007860 <xTimerCreateTimerTask+0x84>)
 800781e:	4811      	ldr	r0, [pc, #68]	; (8007864 <xTimerCreateTimerTask+0x88>)
 8007820:	f7ff f8de 	bl	80069e0 <xTaskCreateStatic>
 8007824:	4603      	mov	r3, r0
 8007826:	4a10      	ldr	r2, [pc, #64]	; (8007868 <xTimerCreateTimerTask+0x8c>)
 8007828:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800782a:	4b0f      	ldr	r3, [pc, #60]	; (8007868 <xTimerCreateTimerTask+0x8c>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d001      	beq.n	8007836 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007832:	2301      	movs	r3, #1
 8007834:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d10a      	bne.n	8007852 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800783c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007840:	f383 8811 	msr	BASEPRI, r3
 8007844:	f3bf 8f6f 	isb	sy
 8007848:	f3bf 8f4f 	dsb	sy
 800784c:	613b      	str	r3, [r7, #16]
}
 800784e:	bf00      	nop
 8007850:	e7fe      	b.n	8007850 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007852:	697b      	ldr	r3, [r7, #20]
}
 8007854:	4618      	mov	r0, r3
 8007856:	3718      	adds	r7, #24
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}
 800785c:	2000103c 	.word	0x2000103c
 8007860:	0800c8b4 	.word	0x0800c8b4
 8007864:	080079a1 	.word	0x080079a1
 8007868:	20001040 	.word	0x20001040

0800786c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b08a      	sub	sp, #40	; 0x28
 8007870:	af00      	add	r7, sp, #0
 8007872:	60f8      	str	r0, [r7, #12]
 8007874:	60b9      	str	r1, [r7, #8]
 8007876:	607a      	str	r2, [r7, #4]
 8007878:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800787a:	2300      	movs	r3, #0
 800787c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d10a      	bne.n	800789a <xTimerGenericCommand+0x2e>
	__asm volatile
 8007884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007888:	f383 8811 	msr	BASEPRI, r3
 800788c:	f3bf 8f6f 	isb	sy
 8007890:	f3bf 8f4f 	dsb	sy
 8007894:	623b      	str	r3, [r7, #32]
}
 8007896:	bf00      	nop
 8007898:	e7fe      	b.n	8007898 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800789a:	4b1a      	ldr	r3, [pc, #104]	; (8007904 <xTimerGenericCommand+0x98>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d02a      	beq.n	80078f8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	2b05      	cmp	r3, #5
 80078b2:	dc18      	bgt.n	80078e6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80078b4:	f7ff feb2 	bl	800761c <xTaskGetSchedulerState>
 80078b8:	4603      	mov	r3, r0
 80078ba:	2b02      	cmp	r3, #2
 80078bc:	d109      	bne.n	80078d2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80078be:	4b11      	ldr	r3, [pc, #68]	; (8007904 <xTimerGenericCommand+0x98>)
 80078c0:	6818      	ldr	r0, [r3, #0]
 80078c2:	f107 0110 	add.w	r1, r7, #16
 80078c6:	2300      	movs	r3, #0
 80078c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078ca:	f7fe fca1 	bl	8006210 <xQueueGenericSend>
 80078ce:	6278      	str	r0, [r7, #36]	; 0x24
 80078d0:	e012      	b.n	80078f8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80078d2:	4b0c      	ldr	r3, [pc, #48]	; (8007904 <xTimerGenericCommand+0x98>)
 80078d4:	6818      	ldr	r0, [r3, #0]
 80078d6:	f107 0110 	add.w	r1, r7, #16
 80078da:	2300      	movs	r3, #0
 80078dc:	2200      	movs	r2, #0
 80078de:	f7fe fc97 	bl	8006210 <xQueueGenericSend>
 80078e2:	6278      	str	r0, [r7, #36]	; 0x24
 80078e4:	e008      	b.n	80078f8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80078e6:	4b07      	ldr	r3, [pc, #28]	; (8007904 <xTimerGenericCommand+0x98>)
 80078e8:	6818      	ldr	r0, [r3, #0]
 80078ea:	f107 0110 	add.w	r1, r7, #16
 80078ee:	2300      	movs	r3, #0
 80078f0:	683a      	ldr	r2, [r7, #0]
 80078f2:	f7fe fd8b 	bl	800640c <xQueueGenericSendFromISR>
 80078f6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80078f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3728      	adds	r7, #40	; 0x28
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}
 8007902:	bf00      	nop
 8007904:	2000103c 	.word	0x2000103c

08007908 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b088      	sub	sp, #32
 800790c:	af02      	add	r7, sp, #8
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007912:	4b22      	ldr	r3, [pc, #136]	; (800799c <prvProcessExpiredTimer+0x94>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	68db      	ldr	r3, [r3, #12]
 8007918:	68db      	ldr	r3, [r3, #12]
 800791a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	3304      	adds	r3, #4
 8007920:	4618      	mov	r0, r3
 8007922:	f7fe fb47 	bl	8005fb4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800792c:	f003 0304 	and.w	r3, r3, #4
 8007930:	2b00      	cmp	r3, #0
 8007932:	d022      	beq.n	800797a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	699a      	ldr	r2, [r3, #24]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	18d1      	adds	r1, r2, r3
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	683a      	ldr	r2, [r7, #0]
 8007940:	6978      	ldr	r0, [r7, #20]
 8007942:	f000 f8d1 	bl	8007ae8 <prvInsertTimerInActiveList>
 8007946:	4603      	mov	r3, r0
 8007948:	2b00      	cmp	r3, #0
 800794a:	d01f      	beq.n	800798c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800794c:	2300      	movs	r3, #0
 800794e:	9300      	str	r3, [sp, #0]
 8007950:	2300      	movs	r3, #0
 8007952:	687a      	ldr	r2, [r7, #4]
 8007954:	2100      	movs	r1, #0
 8007956:	6978      	ldr	r0, [r7, #20]
 8007958:	f7ff ff88 	bl	800786c <xTimerGenericCommand>
 800795c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d113      	bne.n	800798c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007968:	f383 8811 	msr	BASEPRI, r3
 800796c:	f3bf 8f6f 	isb	sy
 8007970:	f3bf 8f4f 	dsb	sy
 8007974:	60fb      	str	r3, [r7, #12]
}
 8007976:	bf00      	nop
 8007978:	e7fe      	b.n	8007978 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007980:	f023 0301 	bic.w	r3, r3, #1
 8007984:	b2da      	uxtb	r2, r3
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	6a1b      	ldr	r3, [r3, #32]
 8007990:	6978      	ldr	r0, [r7, #20]
 8007992:	4798      	blx	r3
}
 8007994:	bf00      	nop
 8007996:	3718      	adds	r7, #24
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}
 800799c:	20001034 	.word	0x20001034

080079a0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b084      	sub	sp, #16
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80079a8:	f107 0308 	add.w	r3, r7, #8
 80079ac:	4618      	mov	r0, r3
 80079ae:	f000 f857 	bl	8007a60 <prvGetNextExpireTime>
 80079b2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	4619      	mov	r1, r3
 80079b8:	68f8      	ldr	r0, [r7, #12]
 80079ba:	f000 f803 	bl	80079c4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80079be:	f000 f8d5 	bl	8007b6c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80079c2:	e7f1      	b.n	80079a8 <prvTimerTask+0x8>

080079c4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80079ce:	f7ff fa43 	bl	8006e58 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80079d2:	f107 0308 	add.w	r3, r7, #8
 80079d6:	4618      	mov	r0, r3
 80079d8:	f000 f866 	bl	8007aa8 <prvSampleTimeNow>
 80079dc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d130      	bne.n	8007a46 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d10a      	bne.n	8007a00 <prvProcessTimerOrBlockTask+0x3c>
 80079ea:	687a      	ldr	r2, [r7, #4]
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	429a      	cmp	r2, r3
 80079f0:	d806      	bhi.n	8007a00 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80079f2:	f7ff fa3f 	bl	8006e74 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80079f6:	68f9      	ldr	r1, [r7, #12]
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f7ff ff85 	bl	8007908 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80079fe:	e024      	b.n	8007a4a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d008      	beq.n	8007a18 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007a06:	4b13      	ldr	r3, [pc, #76]	; (8007a54 <prvProcessTimerOrBlockTask+0x90>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d101      	bne.n	8007a14 <prvProcessTimerOrBlockTask+0x50>
 8007a10:	2301      	movs	r3, #1
 8007a12:	e000      	b.n	8007a16 <prvProcessTimerOrBlockTask+0x52>
 8007a14:	2300      	movs	r3, #0
 8007a16:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007a18:	4b0f      	ldr	r3, [pc, #60]	; (8007a58 <prvProcessTimerOrBlockTask+0x94>)
 8007a1a:	6818      	ldr	r0, [r3, #0]
 8007a1c:	687a      	ldr	r2, [r7, #4]
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	1ad3      	subs	r3, r2, r3
 8007a22:	683a      	ldr	r2, [r7, #0]
 8007a24:	4619      	mov	r1, r3
 8007a26:	f7fe ffa7 	bl	8006978 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007a2a:	f7ff fa23 	bl	8006e74 <xTaskResumeAll>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d10a      	bne.n	8007a4a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007a34:	4b09      	ldr	r3, [pc, #36]	; (8007a5c <prvProcessTimerOrBlockTask+0x98>)
 8007a36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a3a:	601a      	str	r2, [r3, #0]
 8007a3c:	f3bf 8f4f 	dsb	sy
 8007a40:	f3bf 8f6f 	isb	sy
}
 8007a44:	e001      	b.n	8007a4a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007a46:	f7ff fa15 	bl	8006e74 <xTaskResumeAll>
}
 8007a4a:	bf00      	nop
 8007a4c:	3710      	adds	r7, #16
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}
 8007a52:	bf00      	nop
 8007a54:	20001038 	.word	0x20001038
 8007a58:	2000103c 	.word	0x2000103c
 8007a5c:	e000ed04 	.word	0xe000ed04

08007a60 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007a60:	b480      	push	{r7}
 8007a62:	b085      	sub	sp, #20
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007a68:	4b0e      	ldr	r3, [pc, #56]	; (8007aa4 <prvGetNextExpireTime+0x44>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d101      	bne.n	8007a76 <prvGetNextExpireTime+0x16>
 8007a72:	2201      	movs	r2, #1
 8007a74:	e000      	b.n	8007a78 <prvGetNextExpireTime+0x18>
 8007a76:	2200      	movs	r2, #0
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d105      	bne.n	8007a90 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007a84:	4b07      	ldr	r3, [pc, #28]	; (8007aa4 <prvGetNextExpireTime+0x44>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	68db      	ldr	r3, [r3, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	60fb      	str	r3, [r7, #12]
 8007a8e:	e001      	b.n	8007a94 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007a90:	2300      	movs	r3, #0
 8007a92:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007a94:	68fb      	ldr	r3, [r7, #12]
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3714      	adds	r7, #20
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa0:	4770      	bx	lr
 8007aa2:	bf00      	nop
 8007aa4:	20001034 	.word	0x20001034

08007aa8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b084      	sub	sp, #16
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007ab0:	f7ff fa7e 	bl	8006fb0 <xTaskGetTickCount>
 8007ab4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007ab6:	4b0b      	ldr	r3, [pc, #44]	; (8007ae4 <prvSampleTimeNow+0x3c>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	68fa      	ldr	r2, [r7, #12]
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d205      	bcs.n	8007acc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007ac0:	f000 f936 	bl	8007d30 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	601a      	str	r2, [r3, #0]
 8007aca:	e002      	b.n	8007ad2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007ad2:	4a04      	ldr	r2, [pc, #16]	; (8007ae4 <prvSampleTimeNow+0x3c>)
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3710      	adds	r7, #16
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
 8007ae2:	bf00      	nop
 8007ae4:	20001044 	.word	0x20001044

08007ae8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b086      	sub	sp, #24
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	60f8      	str	r0, [r7, #12]
 8007af0:	60b9      	str	r1, [r7, #8]
 8007af2:	607a      	str	r2, [r7, #4]
 8007af4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007af6:	2300      	movs	r3, #0
 8007af8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	68ba      	ldr	r2, [r7, #8]
 8007afe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	68fa      	ldr	r2, [r7, #12]
 8007b04:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007b06:	68ba      	ldr	r2, [r7, #8]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	d812      	bhi.n	8007b34 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b0e:	687a      	ldr	r2, [r7, #4]
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	1ad2      	subs	r2, r2, r3
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	699b      	ldr	r3, [r3, #24]
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d302      	bcc.n	8007b22 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	617b      	str	r3, [r7, #20]
 8007b20:	e01b      	b.n	8007b5a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007b22:	4b10      	ldr	r3, [pc, #64]	; (8007b64 <prvInsertTimerInActiveList+0x7c>)
 8007b24:	681a      	ldr	r2, [r3, #0]
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	3304      	adds	r3, #4
 8007b2a:	4619      	mov	r1, r3
 8007b2c:	4610      	mov	r0, r2
 8007b2e:	f7fe fa08 	bl	8005f42 <vListInsert>
 8007b32:	e012      	b.n	8007b5a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007b34:	687a      	ldr	r2, [r7, #4]
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	d206      	bcs.n	8007b4a <prvInsertTimerInActiveList+0x62>
 8007b3c:	68ba      	ldr	r2, [r7, #8]
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d302      	bcc.n	8007b4a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007b44:	2301      	movs	r3, #1
 8007b46:	617b      	str	r3, [r7, #20]
 8007b48:	e007      	b.n	8007b5a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007b4a:	4b07      	ldr	r3, [pc, #28]	; (8007b68 <prvInsertTimerInActiveList+0x80>)
 8007b4c:	681a      	ldr	r2, [r3, #0]
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	3304      	adds	r3, #4
 8007b52:	4619      	mov	r1, r3
 8007b54:	4610      	mov	r0, r2
 8007b56:	f7fe f9f4 	bl	8005f42 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007b5a:	697b      	ldr	r3, [r7, #20]
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3718      	adds	r7, #24
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}
 8007b64:	20001038 	.word	0x20001038
 8007b68:	20001034 	.word	0x20001034

08007b6c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b08e      	sub	sp, #56	; 0x38
 8007b70:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007b72:	e0ca      	b.n	8007d0a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	da18      	bge.n	8007bac <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007b7a:	1d3b      	adds	r3, r7, #4
 8007b7c:	3304      	adds	r3, #4
 8007b7e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d10a      	bne.n	8007b9c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b8a:	f383 8811 	msr	BASEPRI, r3
 8007b8e:	f3bf 8f6f 	isb	sy
 8007b92:	f3bf 8f4f 	dsb	sy
 8007b96:	61fb      	str	r3, [r7, #28]
}
 8007b98:	bf00      	nop
 8007b9a:	e7fe      	b.n	8007b9a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ba2:	6850      	ldr	r0, [r2, #4]
 8007ba4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ba6:	6892      	ldr	r2, [r2, #8]
 8007ba8:	4611      	mov	r1, r2
 8007baa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	f2c0 80aa 	blt.w	8007d08 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bba:	695b      	ldr	r3, [r3, #20]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d004      	beq.n	8007bca <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc2:	3304      	adds	r3, #4
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f7fe f9f5 	bl	8005fb4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007bca:	463b      	mov	r3, r7
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f7ff ff6b 	bl	8007aa8 <prvSampleTimeNow>
 8007bd2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2b09      	cmp	r3, #9
 8007bd8:	f200 8097 	bhi.w	8007d0a <prvProcessReceivedCommands+0x19e>
 8007bdc:	a201      	add	r2, pc, #4	; (adr r2, 8007be4 <prvProcessReceivedCommands+0x78>)
 8007bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007be2:	bf00      	nop
 8007be4:	08007c0d 	.word	0x08007c0d
 8007be8:	08007c0d 	.word	0x08007c0d
 8007bec:	08007c0d 	.word	0x08007c0d
 8007bf0:	08007c81 	.word	0x08007c81
 8007bf4:	08007c95 	.word	0x08007c95
 8007bf8:	08007cdf 	.word	0x08007cdf
 8007bfc:	08007c0d 	.word	0x08007c0d
 8007c00:	08007c0d 	.word	0x08007c0d
 8007c04:	08007c81 	.word	0x08007c81
 8007c08:	08007c95 	.word	0x08007c95
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c12:	f043 0301 	orr.w	r3, r3, #1
 8007c16:	b2da      	uxtb	r2, r3
 8007c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007c1e:	68ba      	ldr	r2, [r7, #8]
 8007c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c22:	699b      	ldr	r3, [r3, #24]
 8007c24:	18d1      	adds	r1, r2, r3
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c2c:	f7ff ff5c 	bl	8007ae8 <prvInsertTimerInActiveList>
 8007c30:	4603      	mov	r3, r0
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d069      	beq.n	8007d0a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c38:	6a1b      	ldr	r3, [r3, #32]
 8007c3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c3c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c44:	f003 0304 	and.w	r3, r3, #4
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d05e      	beq.n	8007d0a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007c4c:	68ba      	ldr	r2, [r7, #8]
 8007c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c50:	699b      	ldr	r3, [r3, #24]
 8007c52:	441a      	add	r2, r3
 8007c54:	2300      	movs	r3, #0
 8007c56:	9300      	str	r3, [sp, #0]
 8007c58:	2300      	movs	r3, #0
 8007c5a:	2100      	movs	r1, #0
 8007c5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c5e:	f7ff fe05 	bl	800786c <xTimerGenericCommand>
 8007c62:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007c64:	6a3b      	ldr	r3, [r7, #32]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d14f      	bne.n	8007d0a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c6e:	f383 8811 	msr	BASEPRI, r3
 8007c72:	f3bf 8f6f 	isb	sy
 8007c76:	f3bf 8f4f 	dsb	sy
 8007c7a:	61bb      	str	r3, [r7, #24]
}
 8007c7c:	bf00      	nop
 8007c7e:	e7fe      	b.n	8007c7e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c86:	f023 0301 	bic.w	r3, r3, #1
 8007c8a:	b2da      	uxtb	r2, r3
 8007c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007c92:	e03a      	b.n	8007d0a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c9a:	f043 0301 	orr.w	r3, r3, #1
 8007c9e:	b2da      	uxtb	r2, r3
 8007ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007ca6:	68ba      	ldr	r2, [r7, #8]
 8007ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007caa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cae:	699b      	ldr	r3, [r3, #24]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d10a      	bne.n	8007cca <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb8:	f383 8811 	msr	BASEPRI, r3
 8007cbc:	f3bf 8f6f 	isb	sy
 8007cc0:	f3bf 8f4f 	dsb	sy
 8007cc4:	617b      	str	r3, [r7, #20]
}
 8007cc6:	bf00      	nop
 8007cc8:	e7fe      	b.n	8007cc8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ccc:	699a      	ldr	r2, [r3, #24]
 8007cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd0:	18d1      	adds	r1, r2, r3
 8007cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cd8:	f7ff ff06 	bl	8007ae8 <prvInsertTimerInActiveList>
					break;
 8007cdc:	e015      	b.n	8007d0a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ce4:	f003 0302 	and.w	r3, r3, #2
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d103      	bne.n	8007cf4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007cec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cee:	f000 fbdf 	bl	80084b0 <vPortFree>
 8007cf2:	e00a      	b.n	8007d0a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007cfa:	f023 0301 	bic.w	r3, r3, #1
 8007cfe:	b2da      	uxtb	r2, r3
 8007d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007d06:	e000      	b.n	8007d0a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007d08:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007d0a:	4b08      	ldr	r3, [pc, #32]	; (8007d2c <prvProcessReceivedCommands+0x1c0>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	1d39      	adds	r1, r7, #4
 8007d10:	2200      	movs	r2, #0
 8007d12:	4618      	mov	r0, r3
 8007d14:	f7fe fc16 	bl	8006544 <xQueueReceive>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	f47f af2a 	bne.w	8007b74 <prvProcessReceivedCommands+0x8>
	}
}
 8007d20:	bf00      	nop
 8007d22:	bf00      	nop
 8007d24:	3730      	adds	r7, #48	; 0x30
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}
 8007d2a:	bf00      	nop
 8007d2c:	2000103c 	.word	0x2000103c

08007d30 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b088      	sub	sp, #32
 8007d34:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007d36:	e048      	b.n	8007dca <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007d38:	4b2d      	ldr	r3, [pc, #180]	; (8007df0 <prvSwitchTimerLists+0xc0>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	68db      	ldr	r3, [r3, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d42:	4b2b      	ldr	r3, [pc, #172]	; (8007df0 <prvSwitchTimerLists+0xc0>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	68db      	ldr	r3, [r3, #12]
 8007d48:	68db      	ldr	r3, [r3, #12]
 8007d4a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	3304      	adds	r3, #4
 8007d50:	4618      	mov	r0, r3
 8007d52:	f7fe f92f 	bl	8005fb4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	6a1b      	ldr	r3, [r3, #32]
 8007d5a:	68f8      	ldr	r0, [r7, #12]
 8007d5c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d64:	f003 0304 	and.w	r3, r3, #4
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d02e      	beq.n	8007dca <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	699b      	ldr	r3, [r3, #24]
 8007d70:	693a      	ldr	r2, [r7, #16]
 8007d72:	4413      	add	r3, r2
 8007d74:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007d76:	68ba      	ldr	r2, [r7, #8]
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	d90e      	bls.n	8007d9c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	68ba      	ldr	r2, [r7, #8]
 8007d82:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	68fa      	ldr	r2, [r7, #12]
 8007d88:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007d8a:	4b19      	ldr	r3, [pc, #100]	; (8007df0 <prvSwitchTimerLists+0xc0>)
 8007d8c:	681a      	ldr	r2, [r3, #0]
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	3304      	adds	r3, #4
 8007d92:	4619      	mov	r1, r3
 8007d94:	4610      	mov	r0, r2
 8007d96:	f7fe f8d4 	bl	8005f42 <vListInsert>
 8007d9a:	e016      	b.n	8007dca <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	9300      	str	r3, [sp, #0]
 8007da0:	2300      	movs	r3, #0
 8007da2:	693a      	ldr	r2, [r7, #16]
 8007da4:	2100      	movs	r1, #0
 8007da6:	68f8      	ldr	r0, [r7, #12]
 8007da8:	f7ff fd60 	bl	800786c <xTimerGenericCommand>
 8007dac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d10a      	bne.n	8007dca <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db8:	f383 8811 	msr	BASEPRI, r3
 8007dbc:	f3bf 8f6f 	isb	sy
 8007dc0:	f3bf 8f4f 	dsb	sy
 8007dc4:	603b      	str	r3, [r7, #0]
}
 8007dc6:	bf00      	nop
 8007dc8:	e7fe      	b.n	8007dc8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007dca:	4b09      	ldr	r3, [pc, #36]	; (8007df0 <prvSwitchTimerLists+0xc0>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d1b1      	bne.n	8007d38 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007dd4:	4b06      	ldr	r3, [pc, #24]	; (8007df0 <prvSwitchTimerLists+0xc0>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007dda:	4b06      	ldr	r3, [pc, #24]	; (8007df4 <prvSwitchTimerLists+0xc4>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a04      	ldr	r2, [pc, #16]	; (8007df0 <prvSwitchTimerLists+0xc0>)
 8007de0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007de2:	4a04      	ldr	r2, [pc, #16]	; (8007df4 <prvSwitchTimerLists+0xc4>)
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	6013      	str	r3, [r2, #0]
}
 8007de8:	bf00      	nop
 8007dea:	3718      	adds	r7, #24
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}
 8007df0:	20001034 	.word	0x20001034
 8007df4:	20001038 	.word	0x20001038

08007df8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b082      	sub	sp, #8
 8007dfc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007dfe:	f000 f969 	bl	80080d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007e02:	4b15      	ldr	r3, [pc, #84]	; (8007e58 <prvCheckForValidListAndQueue+0x60>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d120      	bne.n	8007e4c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007e0a:	4814      	ldr	r0, [pc, #80]	; (8007e5c <prvCheckForValidListAndQueue+0x64>)
 8007e0c:	f7fe f848 	bl	8005ea0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007e10:	4813      	ldr	r0, [pc, #76]	; (8007e60 <prvCheckForValidListAndQueue+0x68>)
 8007e12:	f7fe f845 	bl	8005ea0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007e16:	4b13      	ldr	r3, [pc, #76]	; (8007e64 <prvCheckForValidListAndQueue+0x6c>)
 8007e18:	4a10      	ldr	r2, [pc, #64]	; (8007e5c <prvCheckForValidListAndQueue+0x64>)
 8007e1a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007e1c:	4b12      	ldr	r3, [pc, #72]	; (8007e68 <prvCheckForValidListAndQueue+0x70>)
 8007e1e:	4a10      	ldr	r2, [pc, #64]	; (8007e60 <prvCheckForValidListAndQueue+0x68>)
 8007e20:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007e22:	2300      	movs	r3, #0
 8007e24:	9300      	str	r3, [sp, #0]
 8007e26:	4b11      	ldr	r3, [pc, #68]	; (8007e6c <prvCheckForValidListAndQueue+0x74>)
 8007e28:	4a11      	ldr	r2, [pc, #68]	; (8007e70 <prvCheckForValidListAndQueue+0x78>)
 8007e2a:	2110      	movs	r1, #16
 8007e2c:	200a      	movs	r0, #10
 8007e2e:	f7fe f953 	bl	80060d8 <xQueueGenericCreateStatic>
 8007e32:	4603      	mov	r3, r0
 8007e34:	4a08      	ldr	r2, [pc, #32]	; (8007e58 <prvCheckForValidListAndQueue+0x60>)
 8007e36:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007e38:	4b07      	ldr	r3, [pc, #28]	; (8007e58 <prvCheckForValidListAndQueue+0x60>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d005      	beq.n	8007e4c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007e40:	4b05      	ldr	r3, [pc, #20]	; (8007e58 <prvCheckForValidListAndQueue+0x60>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	490b      	ldr	r1, [pc, #44]	; (8007e74 <prvCheckForValidListAndQueue+0x7c>)
 8007e46:	4618      	mov	r0, r3
 8007e48:	f7fe fd6c 	bl	8006924 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007e4c:	f000 f972 	bl	8008134 <vPortExitCritical>
}
 8007e50:	bf00      	nop
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}
 8007e56:	bf00      	nop
 8007e58:	2000103c 	.word	0x2000103c
 8007e5c:	2000100c 	.word	0x2000100c
 8007e60:	20001020 	.word	0x20001020
 8007e64:	20001034 	.word	0x20001034
 8007e68:	20001038 	.word	0x20001038
 8007e6c:	200010e8 	.word	0x200010e8
 8007e70:	20001048 	.word	0x20001048
 8007e74:	0800c8bc 	.word	0x0800c8bc

08007e78 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b085      	sub	sp, #20
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	60f8      	str	r0, [r7, #12]
 8007e80:	60b9      	str	r1, [r7, #8]
 8007e82:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	3b04      	subs	r3, #4
 8007e88:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007e90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	3b04      	subs	r3, #4
 8007e96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	f023 0201 	bic.w	r2, r3, #1
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	3b04      	subs	r3, #4
 8007ea6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007ea8:	4a0c      	ldr	r2, [pc, #48]	; (8007edc <pxPortInitialiseStack+0x64>)
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	3b14      	subs	r3, #20
 8007eb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007eb4:	687a      	ldr	r2, [r7, #4]
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	3b04      	subs	r3, #4
 8007ebe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f06f 0202 	mvn.w	r2, #2
 8007ec6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	3b20      	subs	r3, #32
 8007ecc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007ece:	68fb      	ldr	r3, [r7, #12]
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3714      	adds	r7, #20
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr
 8007edc:	08007ee1 	.word	0x08007ee1

08007ee0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b085      	sub	sp, #20
 8007ee4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007eea:	4b12      	ldr	r3, [pc, #72]	; (8007f34 <prvTaskExitError+0x54>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ef2:	d00a      	beq.n	8007f0a <prvTaskExitError+0x2a>
	__asm volatile
 8007ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef8:	f383 8811 	msr	BASEPRI, r3
 8007efc:	f3bf 8f6f 	isb	sy
 8007f00:	f3bf 8f4f 	dsb	sy
 8007f04:	60fb      	str	r3, [r7, #12]
}
 8007f06:	bf00      	nop
 8007f08:	e7fe      	b.n	8007f08 <prvTaskExitError+0x28>
	__asm volatile
 8007f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f0e:	f383 8811 	msr	BASEPRI, r3
 8007f12:	f3bf 8f6f 	isb	sy
 8007f16:	f3bf 8f4f 	dsb	sy
 8007f1a:	60bb      	str	r3, [r7, #8]
}
 8007f1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007f1e:	bf00      	nop
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d0fc      	beq.n	8007f20 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007f26:	bf00      	nop
 8007f28:	bf00      	nop
 8007f2a:	3714      	adds	r7, #20
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr
 8007f34:	2000000c 	.word	0x2000000c
	...

08007f40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007f40:	4b07      	ldr	r3, [pc, #28]	; (8007f60 <pxCurrentTCBConst2>)
 8007f42:	6819      	ldr	r1, [r3, #0]
 8007f44:	6808      	ldr	r0, [r1, #0]
 8007f46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f4a:	f380 8809 	msr	PSP, r0
 8007f4e:	f3bf 8f6f 	isb	sy
 8007f52:	f04f 0000 	mov.w	r0, #0
 8007f56:	f380 8811 	msr	BASEPRI, r0
 8007f5a:	4770      	bx	lr
 8007f5c:	f3af 8000 	nop.w

08007f60 <pxCurrentTCBConst2>:
 8007f60:	20000b0c 	.word	0x20000b0c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007f64:	bf00      	nop
 8007f66:	bf00      	nop

08007f68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007f68:	4808      	ldr	r0, [pc, #32]	; (8007f8c <prvPortStartFirstTask+0x24>)
 8007f6a:	6800      	ldr	r0, [r0, #0]
 8007f6c:	6800      	ldr	r0, [r0, #0]
 8007f6e:	f380 8808 	msr	MSP, r0
 8007f72:	f04f 0000 	mov.w	r0, #0
 8007f76:	f380 8814 	msr	CONTROL, r0
 8007f7a:	b662      	cpsie	i
 8007f7c:	b661      	cpsie	f
 8007f7e:	f3bf 8f4f 	dsb	sy
 8007f82:	f3bf 8f6f 	isb	sy
 8007f86:	df00      	svc	0
 8007f88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007f8a:	bf00      	nop
 8007f8c:	e000ed08 	.word	0xe000ed08

08007f90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b086      	sub	sp, #24
 8007f94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007f96:	4b46      	ldr	r3, [pc, #280]	; (80080b0 <xPortStartScheduler+0x120>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a46      	ldr	r2, [pc, #280]	; (80080b4 <xPortStartScheduler+0x124>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d10a      	bne.n	8007fb6 <xPortStartScheduler+0x26>
	__asm volatile
 8007fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa4:	f383 8811 	msr	BASEPRI, r3
 8007fa8:	f3bf 8f6f 	isb	sy
 8007fac:	f3bf 8f4f 	dsb	sy
 8007fb0:	613b      	str	r3, [r7, #16]
}
 8007fb2:	bf00      	nop
 8007fb4:	e7fe      	b.n	8007fb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007fb6:	4b3e      	ldr	r3, [pc, #248]	; (80080b0 <xPortStartScheduler+0x120>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a3f      	ldr	r2, [pc, #252]	; (80080b8 <xPortStartScheduler+0x128>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d10a      	bne.n	8007fd6 <xPortStartScheduler+0x46>
	__asm volatile
 8007fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc4:	f383 8811 	msr	BASEPRI, r3
 8007fc8:	f3bf 8f6f 	isb	sy
 8007fcc:	f3bf 8f4f 	dsb	sy
 8007fd0:	60fb      	str	r3, [r7, #12]
}
 8007fd2:	bf00      	nop
 8007fd4:	e7fe      	b.n	8007fd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007fd6:	4b39      	ldr	r3, [pc, #228]	; (80080bc <xPortStartScheduler+0x12c>)
 8007fd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	b2db      	uxtb	r3, r3
 8007fe0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	22ff      	movs	r2, #255	; 0xff
 8007fe6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	781b      	ldrb	r3, [r3, #0]
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007ff0:	78fb      	ldrb	r3, [r7, #3]
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007ff8:	b2da      	uxtb	r2, r3
 8007ffa:	4b31      	ldr	r3, [pc, #196]	; (80080c0 <xPortStartScheduler+0x130>)
 8007ffc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007ffe:	4b31      	ldr	r3, [pc, #196]	; (80080c4 <xPortStartScheduler+0x134>)
 8008000:	2207      	movs	r2, #7
 8008002:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008004:	e009      	b.n	800801a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008006:	4b2f      	ldr	r3, [pc, #188]	; (80080c4 <xPortStartScheduler+0x134>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	3b01      	subs	r3, #1
 800800c:	4a2d      	ldr	r2, [pc, #180]	; (80080c4 <xPortStartScheduler+0x134>)
 800800e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008010:	78fb      	ldrb	r3, [r7, #3]
 8008012:	b2db      	uxtb	r3, r3
 8008014:	005b      	lsls	r3, r3, #1
 8008016:	b2db      	uxtb	r3, r3
 8008018:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800801a:	78fb      	ldrb	r3, [r7, #3]
 800801c:	b2db      	uxtb	r3, r3
 800801e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008022:	2b80      	cmp	r3, #128	; 0x80
 8008024:	d0ef      	beq.n	8008006 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008026:	4b27      	ldr	r3, [pc, #156]	; (80080c4 <xPortStartScheduler+0x134>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f1c3 0307 	rsb	r3, r3, #7
 800802e:	2b04      	cmp	r3, #4
 8008030:	d00a      	beq.n	8008048 <xPortStartScheduler+0xb8>
	__asm volatile
 8008032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008036:	f383 8811 	msr	BASEPRI, r3
 800803a:	f3bf 8f6f 	isb	sy
 800803e:	f3bf 8f4f 	dsb	sy
 8008042:	60bb      	str	r3, [r7, #8]
}
 8008044:	bf00      	nop
 8008046:	e7fe      	b.n	8008046 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008048:	4b1e      	ldr	r3, [pc, #120]	; (80080c4 <xPortStartScheduler+0x134>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	021b      	lsls	r3, r3, #8
 800804e:	4a1d      	ldr	r2, [pc, #116]	; (80080c4 <xPortStartScheduler+0x134>)
 8008050:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008052:	4b1c      	ldr	r3, [pc, #112]	; (80080c4 <xPortStartScheduler+0x134>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800805a:	4a1a      	ldr	r2, [pc, #104]	; (80080c4 <xPortStartScheduler+0x134>)
 800805c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	b2da      	uxtb	r2, r3
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008066:	4b18      	ldr	r3, [pc, #96]	; (80080c8 <xPortStartScheduler+0x138>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a17      	ldr	r2, [pc, #92]	; (80080c8 <xPortStartScheduler+0x138>)
 800806c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008070:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008072:	4b15      	ldr	r3, [pc, #84]	; (80080c8 <xPortStartScheduler+0x138>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4a14      	ldr	r2, [pc, #80]	; (80080c8 <xPortStartScheduler+0x138>)
 8008078:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800807c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800807e:	f000 f8dd 	bl	800823c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008082:	4b12      	ldr	r3, [pc, #72]	; (80080cc <xPortStartScheduler+0x13c>)
 8008084:	2200      	movs	r2, #0
 8008086:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008088:	f000 f8fc 	bl	8008284 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800808c:	4b10      	ldr	r3, [pc, #64]	; (80080d0 <xPortStartScheduler+0x140>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a0f      	ldr	r2, [pc, #60]	; (80080d0 <xPortStartScheduler+0x140>)
 8008092:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008096:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008098:	f7ff ff66 	bl	8007f68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800809c:	f7ff f852 	bl	8007144 <vTaskSwitchContext>
	prvTaskExitError();
 80080a0:	f7ff ff1e 	bl	8007ee0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80080a4:	2300      	movs	r3, #0
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	3718      	adds	r7, #24
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}
 80080ae:	bf00      	nop
 80080b0:	e000ed00 	.word	0xe000ed00
 80080b4:	410fc271 	.word	0x410fc271
 80080b8:	410fc270 	.word	0x410fc270
 80080bc:	e000e400 	.word	0xe000e400
 80080c0:	20001138 	.word	0x20001138
 80080c4:	2000113c 	.word	0x2000113c
 80080c8:	e000ed20 	.word	0xe000ed20
 80080cc:	2000000c 	.word	0x2000000c
 80080d0:	e000ef34 	.word	0xe000ef34

080080d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80080d4:	b480      	push	{r7}
 80080d6:	b083      	sub	sp, #12
 80080d8:	af00      	add	r7, sp, #0
	__asm volatile
 80080da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080de:	f383 8811 	msr	BASEPRI, r3
 80080e2:	f3bf 8f6f 	isb	sy
 80080e6:	f3bf 8f4f 	dsb	sy
 80080ea:	607b      	str	r3, [r7, #4]
}
 80080ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80080ee:	4b0f      	ldr	r3, [pc, #60]	; (800812c <vPortEnterCritical+0x58>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	3301      	adds	r3, #1
 80080f4:	4a0d      	ldr	r2, [pc, #52]	; (800812c <vPortEnterCritical+0x58>)
 80080f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80080f8:	4b0c      	ldr	r3, [pc, #48]	; (800812c <vPortEnterCritical+0x58>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	d10f      	bne.n	8008120 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008100:	4b0b      	ldr	r3, [pc, #44]	; (8008130 <vPortEnterCritical+0x5c>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	b2db      	uxtb	r3, r3
 8008106:	2b00      	cmp	r3, #0
 8008108:	d00a      	beq.n	8008120 <vPortEnterCritical+0x4c>
	__asm volatile
 800810a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800810e:	f383 8811 	msr	BASEPRI, r3
 8008112:	f3bf 8f6f 	isb	sy
 8008116:	f3bf 8f4f 	dsb	sy
 800811a:	603b      	str	r3, [r7, #0]
}
 800811c:	bf00      	nop
 800811e:	e7fe      	b.n	800811e <vPortEnterCritical+0x4a>
	}
}
 8008120:	bf00      	nop
 8008122:	370c      	adds	r7, #12
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr
 800812c:	2000000c 	.word	0x2000000c
 8008130:	e000ed04 	.word	0xe000ed04

08008134 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008134:	b480      	push	{r7}
 8008136:	b083      	sub	sp, #12
 8008138:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800813a:	4b12      	ldr	r3, [pc, #72]	; (8008184 <vPortExitCritical+0x50>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d10a      	bne.n	8008158 <vPortExitCritical+0x24>
	__asm volatile
 8008142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008146:	f383 8811 	msr	BASEPRI, r3
 800814a:	f3bf 8f6f 	isb	sy
 800814e:	f3bf 8f4f 	dsb	sy
 8008152:	607b      	str	r3, [r7, #4]
}
 8008154:	bf00      	nop
 8008156:	e7fe      	b.n	8008156 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008158:	4b0a      	ldr	r3, [pc, #40]	; (8008184 <vPortExitCritical+0x50>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	3b01      	subs	r3, #1
 800815e:	4a09      	ldr	r2, [pc, #36]	; (8008184 <vPortExitCritical+0x50>)
 8008160:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008162:	4b08      	ldr	r3, [pc, #32]	; (8008184 <vPortExitCritical+0x50>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d105      	bne.n	8008176 <vPortExitCritical+0x42>
 800816a:	2300      	movs	r3, #0
 800816c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	f383 8811 	msr	BASEPRI, r3
}
 8008174:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008176:	bf00      	nop
 8008178:	370c      	adds	r7, #12
 800817a:	46bd      	mov	sp, r7
 800817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008180:	4770      	bx	lr
 8008182:	bf00      	nop
 8008184:	2000000c 	.word	0x2000000c
	...

08008190 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008190:	f3ef 8009 	mrs	r0, PSP
 8008194:	f3bf 8f6f 	isb	sy
 8008198:	4b15      	ldr	r3, [pc, #84]	; (80081f0 <pxCurrentTCBConst>)
 800819a:	681a      	ldr	r2, [r3, #0]
 800819c:	f01e 0f10 	tst.w	lr, #16
 80081a0:	bf08      	it	eq
 80081a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80081a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081aa:	6010      	str	r0, [r2, #0]
 80081ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80081b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80081b4:	f380 8811 	msr	BASEPRI, r0
 80081b8:	f3bf 8f4f 	dsb	sy
 80081bc:	f3bf 8f6f 	isb	sy
 80081c0:	f7fe ffc0 	bl	8007144 <vTaskSwitchContext>
 80081c4:	f04f 0000 	mov.w	r0, #0
 80081c8:	f380 8811 	msr	BASEPRI, r0
 80081cc:	bc09      	pop	{r0, r3}
 80081ce:	6819      	ldr	r1, [r3, #0]
 80081d0:	6808      	ldr	r0, [r1, #0]
 80081d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081d6:	f01e 0f10 	tst.w	lr, #16
 80081da:	bf08      	it	eq
 80081dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80081e0:	f380 8809 	msr	PSP, r0
 80081e4:	f3bf 8f6f 	isb	sy
 80081e8:	4770      	bx	lr
 80081ea:	bf00      	nop
 80081ec:	f3af 8000 	nop.w

080081f0 <pxCurrentTCBConst>:
 80081f0:	20000b0c 	.word	0x20000b0c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80081f4:	bf00      	nop
 80081f6:	bf00      	nop

080081f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b082      	sub	sp, #8
 80081fc:	af00      	add	r7, sp, #0
	__asm volatile
 80081fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008202:	f383 8811 	msr	BASEPRI, r3
 8008206:	f3bf 8f6f 	isb	sy
 800820a:	f3bf 8f4f 	dsb	sy
 800820e:	607b      	str	r3, [r7, #4]
}
 8008210:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008212:	f7fe fedd 	bl	8006fd0 <xTaskIncrementTick>
 8008216:	4603      	mov	r3, r0
 8008218:	2b00      	cmp	r3, #0
 800821a:	d003      	beq.n	8008224 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800821c:	4b06      	ldr	r3, [pc, #24]	; (8008238 <xPortSysTickHandler+0x40>)
 800821e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008222:	601a      	str	r2, [r3, #0]
 8008224:	2300      	movs	r3, #0
 8008226:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	f383 8811 	msr	BASEPRI, r3
}
 800822e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008230:	bf00      	nop
 8008232:	3708      	adds	r7, #8
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}
 8008238:	e000ed04 	.word	0xe000ed04

0800823c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800823c:	b480      	push	{r7}
 800823e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008240:	4b0b      	ldr	r3, [pc, #44]	; (8008270 <vPortSetupTimerInterrupt+0x34>)
 8008242:	2200      	movs	r2, #0
 8008244:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008246:	4b0b      	ldr	r3, [pc, #44]	; (8008274 <vPortSetupTimerInterrupt+0x38>)
 8008248:	2200      	movs	r2, #0
 800824a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800824c:	4b0a      	ldr	r3, [pc, #40]	; (8008278 <vPortSetupTimerInterrupt+0x3c>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a0a      	ldr	r2, [pc, #40]	; (800827c <vPortSetupTimerInterrupt+0x40>)
 8008252:	fba2 2303 	umull	r2, r3, r2, r3
 8008256:	099b      	lsrs	r3, r3, #6
 8008258:	4a09      	ldr	r2, [pc, #36]	; (8008280 <vPortSetupTimerInterrupt+0x44>)
 800825a:	3b01      	subs	r3, #1
 800825c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800825e:	4b04      	ldr	r3, [pc, #16]	; (8008270 <vPortSetupTimerInterrupt+0x34>)
 8008260:	2207      	movs	r2, #7
 8008262:	601a      	str	r2, [r3, #0]
}
 8008264:	bf00      	nop
 8008266:	46bd      	mov	sp, r7
 8008268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826c:	4770      	bx	lr
 800826e:	bf00      	nop
 8008270:	e000e010 	.word	0xe000e010
 8008274:	e000e018 	.word	0xe000e018
 8008278:	20000000 	.word	0x20000000
 800827c:	10624dd3 	.word	0x10624dd3
 8008280:	e000e014 	.word	0xe000e014

08008284 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008284:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008294 <vPortEnableVFP+0x10>
 8008288:	6801      	ldr	r1, [r0, #0]
 800828a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800828e:	6001      	str	r1, [r0, #0]
 8008290:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008292:	bf00      	nop
 8008294:	e000ed88 	.word	0xe000ed88

08008298 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008298:	b480      	push	{r7}
 800829a:	b085      	sub	sp, #20
 800829c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800829e:	f3ef 8305 	mrs	r3, IPSR
 80082a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	2b0f      	cmp	r3, #15
 80082a8:	d914      	bls.n	80082d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80082aa:	4a17      	ldr	r2, [pc, #92]	; (8008308 <vPortValidateInterruptPriority+0x70>)
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	4413      	add	r3, r2
 80082b0:	781b      	ldrb	r3, [r3, #0]
 80082b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80082b4:	4b15      	ldr	r3, [pc, #84]	; (800830c <vPortValidateInterruptPriority+0x74>)
 80082b6:	781b      	ldrb	r3, [r3, #0]
 80082b8:	7afa      	ldrb	r2, [r7, #11]
 80082ba:	429a      	cmp	r2, r3
 80082bc:	d20a      	bcs.n	80082d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80082be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c2:	f383 8811 	msr	BASEPRI, r3
 80082c6:	f3bf 8f6f 	isb	sy
 80082ca:	f3bf 8f4f 	dsb	sy
 80082ce:	607b      	str	r3, [r7, #4]
}
 80082d0:	bf00      	nop
 80082d2:	e7fe      	b.n	80082d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80082d4:	4b0e      	ldr	r3, [pc, #56]	; (8008310 <vPortValidateInterruptPriority+0x78>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80082dc:	4b0d      	ldr	r3, [pc, #52]	; (8008314 <vPortValidateInterruptPriority+0x7c>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	429a      	cmp	r2, r3
 80082e2:	d90a      	bls.n	80082fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80082e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e8:	f383 8811 	msr	BASEPRI, r3
 80082ec:	f3bf 8f6f 	isb	sy
 80082f0:	f3bf 8f4f 	dsb	sy
 80082f4:	603b      	str	r3, [r7, #0]
}
 80082f6:	bf00      	nop
 80082f8:	e7fe      	b.n	80082f8 <vPortValidateInterruptPriority+0x60>
	}
 80082fa:	bf00      	nop
 80082fc:	3714      	adds	r7, #20
 80082fe:	46bd      	mov	sp, r7
 8008300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008304:	4770      	bx	lr
 8008306:	bf00      	nop
 8008308:	e000e3f0 	.word	0xe000e3f0
 800830c:	20001138 	.word	0x20001138
 8008310:	e000ed0c 	.word	0xe000ed0c
 8008314:	2000113c 	.word	0x2000113c

08008318 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b08a      	sub	sp, #40	; 0x28
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008320:	2300      	movs	r3, #0
 8008322:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008324:	f7fe fd98 	bl	8006e58 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008328:	4b5b      	ldr	r3, [pc, #364]	; (8008498 <pvPortMalloc+0x180>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d101      	bne.n	8008334 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008330:	f000 f920 	bl	8008574 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008334:	4b59      	ldr	r3, [pc, #356]	; (800849c <pvPortMalloc+0x184>)
 8008336:	681a      	ldr	r2, [r3, #0]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	4013      	ands	r3, r2
 800833c:	2b00      	cmp	r3, #0
 800833e:	f040 8093 	bne.w	8008468 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d01d      	beq.n	8008384 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008348:	2208      	movs	r2, #8
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	4413      	add	r3, r2
 800834e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f003 0307 	and.w	r3, r3, #7
 8008356:	2b00      	cmp	r3, #0
 8008358:	d014      	beq.n	8008384 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f023 0307 	bic.w	r3, r3, #7
 8008360:	3308      	adds	r3, #8
 8008362:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f003 0307 	and.w	r3, r3, #7
 800836a:	2b00      	cmp	r3, #0
 800836c:	d00a      	beq.n	8008384 <pvPortMalloc+0x6c>
	__asm volatile
 800836e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008372:	f383 8811 	msr	BASEPRI, r3
 8008376:	f3bf 8f6f 	isb	sy
 800837a:	f3bf 8f4f 	dsb	sy
 800837e:	617b      	str	r3, [r7, #20]
}
 8008380:	bf00      	nop
 8008382:	e7fe      	b.n	8008382 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d06e      	beq.n	8008468 <pvPortMalloc+0x150>
 800838a:	4b45      	ldr	r3, [pc, #276]	; (80084a0 <pvPortMalloc+0x188>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	687a      	ldr	r2, [r7, #4]
 8008390:	429a      	cmp	r2, r3
 8008392:	d869      	bhi.n	8008468 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008394:	4b43      	ldr	r3, [pc, #268]	; (80084a4 <pvPortMalloc+0x18c>)
 8008396:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008398:	4b42      	ldr	r3, [pc, #264]	; (80084a4 <pvPortMalloc+0x18c>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800839e:	e004      	b.n	80083aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80083a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80083a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80083aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	687a      	ldr	r2, [r7, #4]
 80083b0:	429a      	cmp	r2, r3
 80083b2:	d903      	bls.n	80083bc <pvPortMalloc+0xa4>
 80083b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d1f1      	bne.n	80083a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80083bc:	4b36      	ldr	r3, [pc, #216]	; (8008498 <pvPortMalloc+0x180>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083c2:	429a      	cmp	r2, r3
 80083c4:	d050      	beq.n	8008468 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80083c6:	6a3b      	ldr	r3, [r7, #32]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	2208      	movs	r2, #8
 80083cc:	4413      	add	r3, r2
 80083ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80083d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	6a3b      	ldr	r3, [r7, #32]
 80083d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80083d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083da:	685a      	ldr	r2, [r3, #4]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	1ad2      	subs	r2, r2, r3
 80083e0:	2308      	movs	r3, #8
 80083e2:	005b      	lsls	r3, r3, #1
 80083e4:	429a      	cmp	r2, r3
 80083e6:	d91f      	bls.n	8008428 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80083e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	4413      	add	r3, r2
 80083ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80083f0:	69bb      	ldr	r3, [r7, #24]
 80083f2:	f003 0307 	and.w	r3, r3, #7
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d00a      	beq.n	8008410 <pvPortMalloc+0xf8>
	__asm volatile
 80083fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083fe:	f383 8811 	msr	BASEPRI, r3
 8008402:	f3bf 8f6f 	isb	sy
 8008406:	f3bf 8f4f 	dsb	sy
 800840a:	613b      	str	r3, [r7, #16]
}
 800840c:	bf00      	nop
 800840e:	e7fe      	b.n	800840e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008412:	685a      	ldr	r2, [r3, #4]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	1ad2      	subs	r2, r2, r3
 8008418:	69bb      	ldr	r3, [r7, #24]
 800841a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800841c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800841e:	687a      	ldr	r2, [r7, #4]
 8008420:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008422:	69b8      	ldr	r0, [r7, #24]
 8008424:	f000 f908 	bl	8008638 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008428:	4b1d      	ldr	r3, [pc, #116]	; (80084a0 <pvPortMalloc+0x188>)
 800842a:	681a      	ldr	r2, [r3, #0]
 800842c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	1ad3      	subs	r3, r2, r3
 8008432:	4a1b      	ldr	r2, [pc, #108]	; (80084a0 <pvPortMalloc+0x188>)
 8008434:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008436:	4b1a      	ldr	r3, [pc, #104]	; (80084a0 <pvPortMalloc+0x188>)
 8008438:	681a      	ldr	r2, [r3, #0]
 800843a:	4b1b      	ldr	r3, [pc, #108]	; (80084a8 <pvPortMalloc+0x190>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	429a      	cmp	r2, r3
 8008440:	d203      	bcs.n	800844a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008442:	4b17      	ldr	r3, [pc, #92]	; (80084a0 <pvPortMalloc+0x188>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4a18      	ldr	r2, [pc, #96]	; (80084a8 <pvPortMalloc+0x190>)
 8008448:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800844a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844c:	685a      	ldr	r2, [r3, #4]
 800844e:	4b13      	ldr	r3, [pc, #76]	; (800849c <pvPortMalloc+0x184>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	431a      	orrs	r2, r3
 8008454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008456:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800845a:	2200      	movs	r2, #0
 800845c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800845e:	4b13      	ldr	r3, [pc, #76]	; (80084ac <pvPortMalloc+0x194>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	3301      	adds	r3, #1
 8008464:	4a11      	ldr	r2, [pc, #68]	; (80084ac <pvPortMalloc+0x194>)
 8008466:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008468:	f7fe fd04 	bl	8006e74 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800846c:	69fb      	ldr	r3, [r7, #28]
 800846e:	f003 0307 	and.w	r3, r3, #7
 8008472:	2b00      	cmp	r3, #0
 8008474:	d00a      	beq.n	800848c <pvPortMalloc+0x174>
	__asm volatile
 8008476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800847a:	f383 8811 	msr	BASEPRI, r3
 800847e:	f3bf 8f6f 	isb	sy
 8008482:	f3bf 8f4f 	dsb	sy
 8008486:	60fb      	str	r3, [r7, #12]
}
 8008488:	bf00      	nop
 800848a:	e7fe      	b.n	800848a <pvPortMalloc+0x172>
	return pvReturn;
 800848c:	69fb      	ldr	r3, [r7, #28]
}
 800848e:	4618      	mov	r0, r3
 8008490:	3728      	adds	r7, #40	; 0x28
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}
 8008496:	bf00      	nop
 8008498:	20004d48 	.word	0x20004d48
 800849c:	20004d5c 	.word	0x20004d5c
 80084a0:	20004d4c 	.word	0x20004d4c
 80084a4:	20004d40 	.word	0x20004d40
 80084a8:	20004d50 	.word	0x20004d50
 80084ac:	20004d54 	.word	0x20004d54

080084b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b086      	sub	sp, #24
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d04d      	beq.n	800855e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80084c2:	2308      	movs	r3, #8
 80084c4:	425b      	negs	r3, r3
 80084c6:	697a      	ldr	r2, [r7, #20]
 80084c8:	4413      	add	r3, r2
 80084ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80084d0:	693b      	ldr	r3, [r7, #16]
 80084d2:	685a      	ldr	r2, [r3, #4]
 80084d4:	4b24      	ldr	r3, [pc, #144]	; (8008568 <vPortFree+0xb8>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4013      	ands	r3, r2
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d10a      	bne.n	80084f4 <vPortFree+0x44>
	__asm volatile
 80084de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e2:	f383 8811 	msr	BASEPRI, r3
 80084e6:	f3bf 8f6f 	isb	sy
 80084ea:	f3bf 8f4f 	dsb	sy
 80084ee:	60fb      	str	r3, [r7, #12]
}
 80084f0:	bf00      	nop
 80084f2:	e7fe      	b.n	80084f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d00a      	beq.n	8008512 <vPortFree+0x62>
	__asm volatile
 80084fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008500:	f383 8811 	msr	BASEPRI, r3
 8008504:	f3bf 8f6f 	isb	sy
 8008508:	f3bf 8f4f 	dsb	sy
 800850c:	60bb      	str	r3, [r7, #8]
}
 800850e:	bf00      	nop
 8008510:	e7fe      	b.n	8008510 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	685a      	ldr	r2, [r3, #4]
 8008516:	4b14      	ldr	r3, [pc, #80]	; (8008568 <vPortFree+0xb8>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4013      	ands	r3, r2
 800851c:	2b00      	cmp	r3, #0
 800851e:	d01e      	beq.n	800855e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d11a      	bne.n	800855e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	685a      	ldr	r2, [r3, #4]
 800852c:	4b0e      	ldr	r3, [pc, #56]	; (8008568 <vPortFree+0xb8>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	43db      	mvns	r3, r3
 8008532:	401a      	ands	r2, r3
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008538:	f7fe fc8e 	bl	8006e58 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	685a      	ldr	r2, [r3, #4]
 8008540:	4b0a      	ldr	r3, [pc, #40]	; (800856c <vPortFree+0xbc>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4413      	add	r3, r2
 8008546:	4a09      	ldr	r2, [pc, #36]	; (800856c <vPortFree+0xbc>)
 8008548:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800854a:	6938      	ldr	r0, [r7, #16]
 800854c:	f000 f874 	bl	8008638 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008550:	4b07      	ldr	r3, [pc, #28]	; (8008570 <vPortFree+0xc0>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	3301      	adds	r3, #1
 8008556:	4a06      	ldr	r2, [pc, #24]	; (8008570 <vPortFree+0xc0>)
 8008558:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800855a:	f7fe fc8b 	bl	8006e74 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800855e:	bf00      	nop
 8008560:	3718      	adds	r7, #24
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}
 8008566:	bf00      	nop
 8008568:	20004d5c 	.word	0x20004d5c
 800856c:	20004d4c 	.word	0x20004d4c
 8008570:	20004d58 	.word	0x20004d58

08008574 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008574:	b480      	push	{r7}
 8008576:	b085      	sub	sp, #20
 8008578:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800857a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800857e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008580:	4b27      	ldr	r3, [pc, #156]	; (8008620 <prvHeapInit+0xac>)
 8008582:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	f003 0307 	and.w	r3, r3, #7
 800858a:	2b00      	cmp	r3, #0
 800858c:	d00c      	beq.n	80085a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	3307      	adds	r3, #7
 8008592:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	f023 0307 	bic.w	r3, r3, #7
 800859a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800859c:	68ba      	ldr	r2, [r7, #8]
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	1ad3      	subs	r3, r2, r3
 80085a2:	4a1f      	ldr	r2, [pc, #124]	; (8008620 <prvHeapInit+0xac>)
 80085a4:	4413      	add	r3, r2
 80085a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80085ac:	4a1d      	ldr	r2, [pc, #116]	; (8008624 <prvHeapInit+0xb0>)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80085b2:	4b1c      	ldr	r3, [pc, #112]	; (8008624 <prvHeapInit+0xb0>)
 80085b4:	2200      	movs	r2, #0
 80085b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	68ba      	ldr	r2, [r7, #8]
 80085bc:	4413      	add	r3, r2
 80085be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80085c0:	2208      	movs	r2, #8
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	1a9b      	subs	r3, r3, r2
 80085c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	f023 0307 	bic.w	r3, r3, #7
 80085ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	4a15      	ldr	r2, [pc, #84]	; (8008628 <prvHeapInit+0xb4>)
 80085d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80085d6:	4b14      	ldr	r3, [pc, #80]	; (8008628 <prvHeapInit+0xb4>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	2200      	movs	r2, #0
 80085dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80085de:	4b12      	ldr	r3, [pc, #72]	; (8008628 <prvHeapInit+0xb4>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	2200      	movs	r2, #0
 80085e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	68fa      	ldr	r2, [r7, #12]
 80085ee:	1ad2      	subs	r2, r2, r3
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80085f4:	4b0c      	ldr	r3, [pc, #48]	; (8008628 <prvHeapInit+0xb4>)
 80085f6:	681a      	ldr	r2, [r3, #0]
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	685b      	ldr	r3, [r3, #4]
 8008600:	4a0a      	ldr	r2, [pc, #40]	; (800862c <prvHeapInit+0xb8>)
 8008602:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	4a09      	ldr	r2, [pc, #36]	; (8008630 <prvHeapInit+0xbc>)
 800860a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800860c:	4b09      	ldr	r3, [pc, #36]	; (8008634 <prvHeapInit+0xc0>)
 800860e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008612:	601a      	str	r2, [r3, #0]
}
 8008614:	bf00      	nop
 8008616:	3714      	adds	r7, #20
 8008618:	46bd      	mov	sp, r7
 800861a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861e:	4770      	bx	lr
 8008620:	20001140 	.word	0x20001140
 8008624:	20004d40 	.word	0x20004d40
 8008628:	20004d48 	.word	0x20004d48
 800862c:	20004d50 	.word	0x20004d50
 8008630:	20004d4c 	.word	0x20004d4c
 8008634:	20004d5c 	.word	0x20004d5c

08008638 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008638:	b480      	push	{r7}
 800863a:	b085      	sub	sp, #20
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008640:	4b28      	ldr	r3, [pc, #160]	; (80086e4 <prvInsertBlockIntoFreeList+0xac>)
 8008642:	60fb      	str	r3, [r7, #12]
 8008644:	e002      	b.n	800864c <prvInsertBlockIntoFreeList+0x14>
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	60fb      	str	r3, [r7, #12]
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	687a      	ldr	r2, [r7, #4]
 8008652:	429a      	cmp	r2, r3
 8008654:	d8f7      	bhi.n	8008646 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	68ba      	ldr	r2, [r7, #8]
 8008660:	4413      	add	r3, r2
 8008662:	687a      	ldr	r2, [r7, #4]
 8008664:	429a      	cmp	r2, r3
 8008666:	d108      	bne.n	800867a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	685a      	ldr	r2, [r3, #4]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	685b      	ldr	r3, [r3, #4]
 8008670:	441a      	add	r2, r3
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	685b      	ldr	r3, [r3, #4]
 8008682:	68ba      	ldr	r2, [r7, #8]
 8008684:	441a      	add	r2, r3
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	429a      	cmp	r2, r3
 800868c:	d118      	bne.n	80086c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681a      	ldr	r2, [r3, #0]
 8008692:	4b15      	ldr	r3, [pc, #84]	; (80086e8 <prvInsertBlockIntoFreeList+0xb0>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	429a      	cmp	r2, r3
 8008698:	d00d      	beq.n	80086b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	685a      	ldr	r2, [r3, #4]
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	441a      	add	r2, r3
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	681a      	ldr	r2, [r3, #0]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	601a      	str	r2, [r3, #0]
 80086b4:	e008      	b.n	80086c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80086b6:	4b0c      	ldr	r3, [pc, #48]	; (80086e8 <prvInsertBlockIntoFreeList+0xb0>)
 80086b8:	681a      	ldr	r2, [r3, #0]
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	601a      	str	r2, [r3, #0]
 80086be:	e003      	b.n	80086c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681a      	ldr	r2, [r3, #0]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80086c8:	68fa      	ldr	r2, [r7, #12]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	429a      	cmp	r2, r3
 80086ce:	d002      	beq.n	80086d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	687a      	ldr	r2, [r7, #4]
 80086d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80086d6:	bf00      	nop
 80086d8:	3714      	adds	r7, #20
 80086da:	46bd      	mov	sp, r7
 80086dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e0:	4770      	bx	lr
 80086e2:	bf00      	nop
 80086e4:	20004d40 	.word	0x20004d40
 80086e8:	20004d48 	.word	0x20004d48

080086ec <ComTask>:

#define LOG_BUFFER_SIZE 128

static uint8_t sChar;

void ComTask() {
 80086ec:	b5b0      	push	{r4, r5, r7, lr}
 80086ee:	b088      	sub	sp, #32
 80086f0:	af04      	add	r7, sp, #16
	ComStartReceive();
 80086f2:	f000 f889 	bl	8008808 <ComStartReceive>

	while(1) {
		float speed = MotorGetSpeed();
 80086f6:	f000 f9e9 	bl	8008acc <MotorGetSpeed>
 80086fa:	ed87 0a03 	vstr	s0, [r7, #12]
		float torque = MotorGetTorque();
 80086fe:	f000 f9f3 	bl	8008ae8 <MotorGetTorque>
 8008702:	ed87 0a02 	vstr	s0, [r7, #8]
		float direction = MotorGetDirection();
 8008706:	f000 f9fd 	bl	8008b04 <MotorGetDirection>
 800870a:	ed87 0a01 	vstr	s0, [r7, #4]
		bool potMode = MotorGetPotModeState();
 800870e:	f000 fa07 	bl	8008b20 <MotorGetPotModeState>
 8008712:	4603      	mov	r3, r0
 8008714:	70fb      	strb	r3, [r7, #3]

		Log("speed = %.2f, torque = %.2f, direction = %d, potMode = %d\n",
 8008716:	68f8      	ldr	r0, [r7, #12]
 8008718:	f7f7 ff1e 	bl	8000558 <__aeabi_f2d>
 800871c:	4604      	mov	r4, r0
 800871e:	460d      	mov	r5, r1
 8008720:	68b8      	ldr	r0, [r7, #8]
 8008722:	f7f7 ff19 	bl	8000558 <__aeabi_f2d>
 8008726:	4602      	mov	r2, r0
 8008728:	460b      	mov	r3, r1
 800872a:	edd7 7a01 	vldr	s15, [r7, #4]
 800872e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008732:	ee17 0a90 	vmov	r0, s15
 8008736:	78f9      	ldrb	r1, [r7, #3]
 8008738:	9103      	str	r1, [sp, #12]
 800873a:	9002      	str	r0, [sp, #8]
 800873c:	e9cd 2300 	strd	r2, r3, [sp]
 8008740:	4622      	mov	r2, r4
 8008742:	462b      	mov	r3, r5
 8008744:	4803      	ldr	r0, [pc, #12]	; (8008754 <ComTask+0x68>)
 8008746:	f000 f86d 	bl	8008824 <Log>
				speed, torque, (int)direction, (int)potMode);

		osDelay(1000);
 800874a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800874e:	f7fd fb57 	bl	8005e00 <osDelay>
	while(1) {
 8008752:	e7d0      	b.n	80086f6 <ComTask+0xa>
 8008754:	0800c8c4 	.word	0x0800c8c4

08008758 <ComRxCpltCallback>:
	}
}

void ComRxCpltCallback() {
 8008758:	b580      	push	{r7, lr}
 800875a:	af00      	add	r7, sp, #0
	switch(sChar) {
 800875c:	4b29      	ldr	r3, [pc, #164]	; (8008804 <ComRxCpltCallback+0xac>)
 800875e:	781b      	ldrb	r3, [r3, #0]
 8008760:	2b70      	cmp	r3, #112	; 0x70
 8008762:	dc4b      	bgt.n	80087fc <ComRxCpltCallback+0xa4>
 8008764:	2b5b      	cmp	r3, #91	; 0x5b
 8008766:	da04      	bge.n	8008772 <ComRxCpltCallback+0x1a>
 8008768:	2b2d      	cmp	r3, #45	; 0x2d
 800876a:	d038      	beq.n	80087de <ComRxCpltCallback+0x86>
 800876c:	2b3d      	cmp	r3, #61	; 0x3d
 800876e:	d033      	beq.n	80087d8 <ComRxCpltCallback+0x80>
 8008770:	e044      	b.n	80087fc <ComRxCpltCallback+0xa4>
 8008772:	3b5b      	subs	r3, #91	; 0x5b
 8008774:	2b15      	cmp	r3, #21
 8008776:	d841      	bhi.n	80087fc <ComRxCpltCallback+0xa4>
 8008778:	a201      	add	r2, pc, #4	; (adr r2, 8008780 <ComRxCpltCallback+0x28>)
 800877a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800877e:	bf00      	nop
 8008780:	080087eb 	.word	0x080087eb
 8008784:	080087fd 	.word	0x080087fd
 8008788:	080087f1 	.word	0x080087f1
 800878c:	080087fd 	.word	0x080087fd
 8008790:	080087fd 	.word	0x080087fd
 8008794:	080087fd 	.word	0x080087fd
 8008798:	080087fd 	.word	0x080087fd
 800879c:	080087fd 	.word	0x080087fd
 80087a0:	080087fd 	.word	0x080087fd
 80087a4:	080087e5 	.word	0x080087e5
 80087a8:	080087fd 	.word	0x080087fd
 80087ac:	080087fd 	.word	0x080087fd
 80087b0:	080087fd 	.word	0x080087fd
 80087b4:	080087fd 	.word	0x080087fd
 80087b8:	080087fd 	.word	0x080087fd
 80087bc:	080087fd 	.word	0x080087fd
 80087c0:	080087fd 	.word	0x080087fd
 80087c4:	080087fd 	.word	0x080087fd
 80087c8:	080087fd 	.word	0x080087fd
 80087cc:	080087fd 	.word	0x080087fd
 80087d0:	080087fd 	.word	0x080087fd
 80087d4:	080087f7 	.word	0x080087f7
		case '=': { // +
			MotorIncreaseSpeed();
 80087d8:	f000 f89a 	bl	8008910 <MotorIncreaseSpeed>
		} break;
 80087dc:	e00e      	b.n	80087fc <ComRxCpltCallback+0xa4>
		case '-': { // -
			MotorDecreaseSpeed();
 80087de:	f000 f8c7 	bl	8008970 <MotorDecreaseSpeed>
		} break;
 80087e2:	e00b      	b.n	80087fc <ComRxCpltCallback+0xa4>
		case 'd': {
			MotorChangeDirection();
 80087e4:	f000 f8ee 	bl	80089c4 <MotorChangeDirection>
		} break;
 80087e8:	e008      	b.n	80087fc <ComRxCpltCallback+0xa4>
		case '[': {
			MotorDecreaseTorque();
 80087ea:	f000 f92d 	bl	8008a48 <MotorDecreaseTorque>
		} break;
 80087ee:	e005      	b.n	80087fc <ComRxCpltCallback+0xa4>
		case ']': {
			MotorIncreaseTorque();
 80087f0:	f000 f8fa 	bl	80089e8 <MotorIncreaseTorque>
		} break;
 80087f4:	e002      	b.n	80087fc <ComRxCpltCallback+0xa4>
		case 'p': {
			MotorPotModeToggle();
 80087f6:	f000 f951 	bl	8008a9c <MotorPotModeToggle>
		} break;
 80087fa:	bf00      	nop
	}

	ComStartReceive();
 80087fc:	f000 f804 	bl	8008808 <ComStartReceive>
}
 8008800:	bf00      	nop
 8008802:	bd80      	pop	{r7, pc}
 8008804:	20004d60 	.word	0x20004d60

08008808 <ComStartReceive>:

static void ComStartReceive() {
 8008808:	b580      	push	{r7, lr}
 800880a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart6, (uint8_t *)&sChar, 1);
 800880c:	2201      	movs	r2, #1
 800880e:	4903      	ldr	r1, [pc, #12]	; (800881c <ComStartReceive+0x14>)
 8008810:	4803      	ldr	r0, [pc, #12]	; (8008820 <ComStartReceive+0x18>)
 8008812:	f7fc f87d 	bl	8004910 <HAL_UART_Receive_DMA>
}
 8008816:	bf00      	nop
 8008818:	bd80      	pop	{r7, pc}
 800881a:	bf00      	nop
 800881c:	20004d60 	.word	0x20004d60
 8008820:	20000304 	.word	0x20000304

08008824 <Log>:

static void Log(const char* format, ...) {
 8008824:	b40f      	push	{r0, r1, r2, r3}
 8008826:	b580      	push	{r7, lr}
 8008828:	b082      	sub	sp, #8
 800882a:	af00      	add	r7, sp, #0
    static char logBuffer[LOG_BUFFER_SIZE];
    va_list args;
    va_start(args, format);
 800882c:	f107 0314 	add.w	r3, r7, #20
 8008830:	607b      	str	r3, [r7, #4]

    vsnprintf(logBuffer, LOG_BUFFER_SIZE, format, args);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	693a      	ldr	r2, [r7, #16]
 8008836:	2180      	movs	r1, #128	; 0x80
 8008838:	4809      	ldr	r0, [pc, #36]	; (8008860 <Log+0x3c>)
 800883a:	f001 f867 	bl	800990c <vsniprintf>

    va_end(args);

    HAL_UART_Transmit_DMA(&huart6, (uint8_t*)logBuffer, strlen(logBuffer));
 800883e:	4808      	ldr	r0, [pc, #32]	; (8008860 <Log+0x3c>)
 8008840:	f7f7 fcce 	bl	80001e0 <strlen>
 8008844:	4603      	mov	r3, r0
 8008846:	b29b      	uxth	r3, r3
 8008848:	461a      	mov	r2, r3
 800884a:	4905      	ldr	r1, [pc, #20]	; (8008860 <Log+0x3c>)
 800884c:	4805      	ldr	r0, [pc, #20]	; (8008864 <Log+0x40>)
 800884e:	f7fb ffef 	bl	8004830 <HAL_UART_Transmit_DMA>
}
 8008852:	bf00      	nop
 8008854:	3708      	adds	r7, #8
 8008856:	46bd      	mov	sp, r7
 8008858:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800885c:	b004      	add	sp, #16
 800885e:	4770      	bx	lr
 8008860:	20004d64 	.word	0x20004d64
 8008864:	20000304 	.word	0x20000304

08008868 <MotorControlTask>:
static float sSpeed = 0.0;
static float sTorque = 0.5;
static float sDirection = 1.0;
static bool sPotMode = false;

void MotorControlTask() {
 8008868:	b580      	push	{r7, lr}
 800886a:	af00      	add	r7, sp, #0
	MotorControlInit();
 800886c:	f000 f964 	bl	8008b38 <MotorControlInit>

    while(1) {
    	if(sPotMode) {
 8008870:	4b21      	ldr	r3, [pc, #132]	; (80088f8 <MotorControlTask+0x90>)
 8008872:	781b      	ldrb	r3, [r3, #0]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d029      	beq.n	80088cc <MotorControlTask+0x64>
    		sSpeed = Map((float)PotGetValue(), 0.0, 4095.0, 0.0, 1.0);
 8008878:	f000 fac0 	bl	8008dfc <PotGetValue>
 800887c:	4603      	mov	r3, r0
 800887e:	ee07 3a90 	vmov	s15, r3
 8008882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008886:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 800888a:	eddf 1a1c 	vldr	s3, [pc, #112]	; 80088fc <MotorControlTask+0x94>
 800888e:	ed9f 1a1c 	vldr	s2, [pc, #112]	; 8008900 <MotorControlTask+0x98>
 8008892:	eddf 0a1a 	vldr	s1, [pc, #104]	; 80088fc <MotorControlTask+0x94>
 8008896:	eeb0 0a67 	vmov.f32	s0, s15
 800889a:	f000 fa6f 	bl	8008d7c <Map>
 800889e:	eef0 7a40 	vmov.f32	s15, s0
 80088a2:	4b18      	ldr	r3, [pc, #96]	; (8008904 <MotorControlTask+0x9c>)
 80088a4:	edc3 7a00 	vstr	s15, [r3]
    		MotorSinusoidalCalculate(sDirection * sSpeed, sTorque);
 80088a8:	4b17      	ldr	r3, [pc, #92]	; (8008908 <MotorControlTask+0xa0>)
 80088aa:	ed93 7a00 	vldr	s14, [r3]
 80088ae:	4b15      	ldr	r3, [pc, #84]	; (8008904 <MotorControlTask+0x9c>)
 80088b0:	edd3 7a00 	vldr	s15, [r3]
 80088b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088b8:	4b14      	ldr	r3, [pc, #80]	; (800890c <MotorControlTask+0xa4>)
 80088ba:	ed93 7a00 	vldr	s14, [r3]
 80088be:	eef0 0a47 	vmov.f32	s1, s14
 80088c2:	eeb0 0a67 	vmov.f32	s0, s15
 80088c6:	f000 f95f 	bl	8008b88 <MotorSinusoidalCalculate>
 80088ca:	e010      	b.n	80088ee <MotorControlTask+0x86>
    	}
    	else {
            MotorSinusoidalCalculate(sDirection * sSpeed, sTorque);
 80088cc:	4b0e      	ldr	r3, [pc, #56]	; (8008908 <MotorControlTask+0xa0>)
 80088ce:	ed93 7a00 	vldr	s14, [r3]
 80088d2:	4b0c      	ldr	r3, [pc, #48]	; (8008904 <MotorControlTask+0x9c>)
 80088d4:	edd3 7a00 	vldr	s15, [r3]
 80088d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088dc:	4b0b      	ldr	r3, [pc, #44]	; (800890c <MotorControlTask+0xa4>)
 80088de:	ed93 7a00 	vldr	s14, [r3]
 80088e2:	eef0 0a47 	vmov.f32	s1, s14
 80088e6:	eeb0 0a67 	vmov.f32	s0, s15
 80088ea:	f000 f94d 	bl	8008b88 <MotorSinusoidalCalculate>
    	}

        osDelay(1);
 80088ee:	2001      	movs	r0, #1
 80088f0:	f7fd fa86 	bl	8005e00 <osDelay>
    	if(sPotMode) {
 80088f4:	e7bc      	b.n	8008870 <MotorControlTask+0x8>
 80088f6:	bf00      	nop
 80088f8:	20004de8 	.word	0x20004de8
 80088fc:	00000000 	.word	0x00000000
 8008900:	457ff000 	.word	0x457ff000
 8008904:	20004de4 	.word	0x20004de4
 8008908:	20000014 	.word	0x20000014
 800890c:	20000010 	.word	0x20000010

08008910 <MotorIncreaseSpeed>:
    }
}

void MotorIncreaseSpeed() {
 8008910:	b580      	push	{r7, lr}
 8008912:	af00      	add	r7, sp, #0
	sSpeed += SPEED_STEP;
 8008914:	4b14      	ldr	r3, [pc, #80]	; (8008968 <MotorIncreaseSpeed+0x58>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	4618      	mov	r0, r3
 800891a:	f7f7 fe1d 	bl	8000558 <__aeabi_f2d>
 800891e:	a310      	add	r3, pc, #64	; (adr r3, 8008960 <MotorIncreaseSpeed+0x50>)
 8008920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008924:	f7f7 fcba 	bl	800029c <__adddf3>
 8008928:	4602      	mov	r2, r0
 800892a:	460b      	mov	r3, r1
 800892c:	4610      	mov	r0, r2
 800892e:	4619      	mov	r1, r3
 8008930:	f7f8 f942 	bl	8000bb8 <__aeabi_d2f>
 8008934:	4603      	mov	r3, r0
 8008936:	4a0c      	ldr	r2, [pc, #48]	; (8008968 <MotorIncreaseSpeed+0x58>)
 8008938:	6013      	str	r3, [r2, #0]

	if(sSpeed > MAX_SPEED) {
 800893a:	4b0b      	ldr	r3, [pc, #44]	; (8008968 <MotorIncreaseSpeed+0x58>)
 800893c:	edd3 7a00 	vldr	s15, [r3]
 8008940:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008944:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800894c:	dc00      	bgt.n	8008950 <MotorIncreaseSpeed+0x40>
		sSpeed = MAX_SPEED;
	}
}
 800894e:	e003      	b.n	8008958 <MotorIncreaseSpeed+0x48>
		sSpeed = MAX_SPEED;
 8008950:	4b05      	ldr	r3, [pc, #20]	; (8008968 <MotorIncreaseSpeed+0x58>)
 8008952:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008956:	601a      	str	r2, [r3, #0]
}
 8008958:	bf00      	nop
 800895a:	bd80      	pop	{r7, pc}
 800895c:	f3af 8000 	nop.w
 8008960:	47ae147b 	.word	0x47ae147b
 8008964:	3f847ae1 	.word	0x3f847ae1
 8008968:	20004de4 	.word	0x20004de4
 800896c:	00000000 	.word	0x00000000

08008970 <MotorDecreaseSpeed>:

void MotorDecreaseSpeed() {
 8008970:	b580      	push	{r7, lr}
 8008972:	af00      	add	r7, sp, #0
	sSpeed -= SPEED_STEP;
 8008974:	4b12      	ldr	r3, [pc, #72]	; (80089c0 <MotorDecreaseSpeed+0x50>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4618      	mov	r0, r3
 800897a:	f7f7 fded 	bl	8000558 <__aeabi_f2d>
 800897e:	a30e      	add	r3, pc, #56	; (adr r3, 80089b8 <MotorDecreaseSpeed+0x48>)
 8008980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008984:	f7f7 fc88 	bl	8000298 <__aeabi_dsub>
 8008988:	4602      	mov	r2, r0
 800898a:	460b      	mov	r3, r1
 800898c:	4610      	mov	r0, r2
 800898e:	4619      	mov	r1, r3
 8008990:	f7f8 f912 	bl	8000bb8 <__aeabi_d2f>
 8008994:	4603      	mov	r3, r0
 8008996:	4a0a      	ldr	r2, [pc, #40]	; (80089c0 <MotorDecreaseSpeed+0x50>)
 8008998:	6013      	str	r3, [r2, #0]

	if(sSpeed < MIN_SPEED) {
 800899a:	4b09      	ldr	r3, [pc, #36]	; (80089c0 <MotorDecreaseSpeed+0x50>)
 800899c:	edd3 7a00 	vldr	s15, [r3]
 80089a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80089a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089a8:	d400      	bmi.n	80089ac <MotorDecreaseSpeed+0x3c>
		sSpeed = MIN_SPEED;
	}
}
 80089aa:	e003      	b.n	80089b4 <MotorDecreaseSpeed+0x44>
		sSpeed = MIN_SPEED;
 80089ac:	4b04      	ldr	r3, [pc, #16]	; (80089c0 <MotorDecreaseSpeed+0x50>)
 80089ae:	f04f 0200 	mov.w	r2, #0
 80089b2:	601a      	str	r2, [r3, #0]
}
 80089b4:	bf00      	nop
 80089b6:	bd80      	pop	{r7, pc}
 80089b8:	47ae147b 	.word	0x47ae147b
 80089bc:	3f847ae1 	.word	0x3f847ae1
 80089c0:	20004de4 	.word	0x20004de4

080089c4 <MotorChangeDirection>:

void MotorChangeDirection() {
 80089c4:	b480      	push	{r7}
 80089c6:	af00      	add	r7, sp, #0
	sDirection = -sDirection;
 80089c8:	4b06      	ldr	r3, [pc, #24]	; (80089e4 <MotorChangeDirection+0x20>)
 80089ca:	edd3 7a00 	vldr	s15, [r3]
 80089ce:	eef1 7a67 	vneg.f32	s15, s15
 80089d2:	4b04      	ldr	r3, [pc, #16]	; (80089e4 <MotorChangeDirection+0x20>)
 80089d4:	edc3 7a00 	vstr	s15, [r3]
}
 80089d8:	bf00      	nop
 80089da:	46bd      	mov	sp, r7
 80089dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e0:	4770      	bx	lr
 80089e2:	bf00      	nop
 80089e4:	20000014 	.word	0x20000014

080089e8 <MotorIncreaseTorque>:

void MotorIncreaseTorque() {
 80089e8:	b580      	push	{r7, lr}
 80089ea:	af00      	add	r7, sp, #0
	sTorque += TORQUE_STEP;
 80089ec:	4b14      	ldr	r3, [pc, #80]	; (8008a40 <MotorIncreaseTorque+0x58>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4618      	mov	r0, r3
 80089f2:	f7f7 fdb1 	bl	8000558 <__aeabi_f2d>
 80089f6:	a310      	add	r3, pc, #64	; (adr r3, 8008a38 <MotorIncreaseTorque+0x50>)
 80089f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089fc:	f7f7 fc4e 	bl	800029c <__adddf3>
 8008a00:	4602      	mov	r2, r0
 8008a02:	460b      	mov	r3, r1
 8008a04:	4610      	mov	r0, r2
 8008a06:	4619      	mov	r1, r3
 8008a08:	f7f8 f8d6 	bl	8000bb8 <__aeabi_d2f>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	4a0c      	ldr	r2, [pc, #48]	; (8008a40 <MotorIncreaseTorque+0x58>)
 8008a10:	6013      	str	r3, [r2, #0]

	if(sTorque > MAX_TORQUE) {
 8008a12:	4b0b      	ldr	r3, [pc, #44]	; (8008a40 <MotorIncreaseTorque+0x58>)
 8008a14:	edd3 7a00 	vldr	s15, [r3]
 8008a18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a24:	dc00      	bgt.n	8008a28 <MotorIncreaseTorque+0x40>
		sTorque = MAX_TORQUE;
	}
}
 8008a26:	e003      	b.n	8008a30 <MotorIncreaseTorque+0x48>
		sTorque = MAX_TORQUE;
 8008a28:	4b05      	ldr	r3, [pc, #20]	; (8008a40 <MotorIncreaseTorque+0x58>)
 8008a2a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008a2e:	601a      	str	r2, [r3, #0]
}
 8008a30:	bf00      	nop
 8008a32:	bd80      	pop	{r7, pc}
 8008a34:	f3af 8000 	nop.w
 8008a38:	47ae147b 	.word	0x47ae147b
 8008a3c:	3f847ae1 	.word	0x3f847ae1
 8008a40:	20000010 	.word	0x20000010
 8008a44:	00000000 	.word	0x00000000

08008a48 <MotorDecreaseTorque>:

void MotorDecreaseTorque() {
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	af00      	add	r7, sp, #0
	sTorque -= TORQUE_STEP;
 8008a4c:	4b12      	ldr	r3, [pc, #72]	; (8008a98 <MotorDecreaseTorque+0x50>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4618      	mov	r0, r3
 8008a52:	f7f7 fd81 	bl	8000558 <__aeabi_f2d>
 8008a56:	a30e      	add	r3, pc, #56	; (adr r3, 8008a90 <MotorDecreaseTorque+0x48>)
 8008a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a5c:	f7f7 fc1c 	bl	8000298 <__aeabi_dsub>
 8008a60:	4602      	mov	r2, r0
 8008a62:	460b      	mov	r3, r1
 8008a64:	4610      	mov	r0, r2
 8008a66:	4619      	mov	r1, r3
 8008a68:	f7f8 f8a6 	bl	8000bb8 <__aeabi_d2f>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	4a0a      	ldr	r2, [pc, #40]	; (8008a98 <MotorDecreaseTorque+0x50>)
 8008a70:	6013      	str	r3, [r2, #0]

	if(sTorque < MIN_TORQUE) {
 8008a72:	4b09      	ldr	r3, [pc, #36]	; (8008a98 <MotorDecreaseTorque+0x50>)
 8008a74:	edd3 7a00 	vldr	s15, [r3]
 8008a78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a80:	d400      	bmi.n	8008a84 <MotorDecreaseTorque+0x3c>
		sTorque = MIN_TORQUE;
	}
}
 8008a82:	e003      	b.n	8008a8c <MotorDecreaseTorque+0x44>
		sTorque = MIN_TORQUE;
 8008a84:	4b04      	ldr	r3, [pc, #16]	; (8008a98 <MotorDecreaseTorque+0x50>)
 8008a86:	f04f 0200 	mov.w	r2, #0
 8008a8a:	601a      	str	r2, [r3, #0]
}
 8008a8c:	bf00      	nop
 8008a8e:	bd80      	pop	{r7, pc}
 8008a90:	47ae147b 	.word	0x47ae147b
 8008a94:	3f847ae1 	.word	0x3f847ae1
 8008a98:	20000010 	.word	0x20000010

08008a9c <MotorPotModeToggle>:

void MotorPotModeToggle() {
 8008a9c:	b480      	push	{r7}
 8008a9e:	af00      	add	r7, sp, #0
	sPotMode = !sPotMode;
 8008aa0:	4b09      	ldr	r3, [pc, #36]	; (8008ac8 <MotorPotModeToggle+0x2c>)
 8008aa2:	781b      	ldrb	r3, [r3, #0]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	bf14      	ite	ne
 8008aa8:	2301      	movne	r3, #1
 8008aaa:	2300      	moveq	r3, #0
 8008aac:	b2db      	uxtb	r3, r3
 8008aae:	f083 0301 	eor.w	r3, r3, #1
 8008ab2:	b2db      	uxtb	r3, r3
 8008ab4:	f003 0301 	and.w	r3, r3, #1
 8008ab8:	b2da      	uxtb	r2, r3
 8008aba:	4b03      	ldr	r3, [pc, #12]	; (8008ac8 <MotorPotModeToggle+0x2c>)
 8008abc:	701a      	strb	r2, [r3, #0]
}
 8008abe:	bf00      	nop
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac6:	4770      	bx	lr
 8008ac8:	20004de8 	.word	0x20004de8

08008acc <MotorGetSpeed>:

float MotorGetSpeed() {
 8008acc:	b480      	push	{r7}
 8008ace:	af00      	add	r7, sp, #0
	return sSpeed;
 8008ad0:	4b04      	ldr	r3, [pc, #16]	; (8008ae4 <MotorGetSpeed+0x18>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	ee07 3a90 	vmov	s15, r3
}
 8008ad8:	eeb0 0a67 	vmov.f32	s0, s15
 8008adc:	46bd      	mov	sp, r7
 8008ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae2:	4770      	bx	lr
 8008ae4:	20004de4 	.word	0x20004de4

08008ae8 <MotorGetTorque>:

float MotorGetTorque() {
 8008ae8:	b480      	push	{r7}
 8008aea:	af00      	add	r7, sp, #0
	return sTorque;
 8008aec:	4b04      	ldr	r3, [pc, #16]	; (8008b00 <MotorGetTorque+0x18>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	ee07 3a90 	vmov	s15, r3
}
 8008af4:	eeb0 0a67 	vmov.f32	s0, s15
 8008af8:	46bd      	mov	sp, r7
 8008afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afe:	4770      	bx	lr
 8008b00:	20000010 	.word	0x20000010

08008b04 <MotorGetDirection>:

float MotorGetDirection() {
 8008b04:	b480      	push	{r7}
 8008b06:	af00      	add	r7, sp, #0
	return sDirection;
 8008b08:	4b04      	ldr	r3, [pc, #16]	; (8008b1c <MotorGetDirection+0x18>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	ee07 3a90 	vmov	s15, r3
}
 8008b10:	eeb0 0a67 	vmov.f32	s0, s15
 8008b14:	46bd      	mov	sp, r7
 8008b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1a:	4770      	bx	lr
 8008b1c:	20000014 	.word	0x20000014

08008b20 <MotorGetPotModeState>:

bool MotorGetPotModeState() {
 8008b20:	b480      	push	{r7}
 8008b22:	af00      	add	r7, sp, #0
	return sPotMode;
 8008b24:	4b03      	ldr	r3, [pc, #12]	; (8008b34 <MotorGetPotModeState+0x14>)
 8008b26:	781b      	ldrb	r3, [r3, #0]
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b30:	4770      	bx	lr
 8008b32:	bf00      	nop
 8008b34:	20004de8 	.word	0x20004de8

08008b38 <MotorControlInit>:

static void MotorControlInit() {
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(PWM1EN_GPIO_Port, PWM1EN_Pin, GPIO_PIN_SET);
 8008b3c:	2201      	movs	r2, #1
 8008b3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008b42:	480e      	ldr	r0, [pc, #56]	; (8008b7c <MotorControlInit+0x44>)
 8008b44:	f7fa fc66 	bl	8003414 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PWM2EN_GPIO_Port, PWM2EN_Pin, GPIO_PIN_SET);
 8008b48:	2201      	movs	r2, #1
 8008b4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008b4e:	480b      	ldr	r0, [pc, #44]	; (8008b7c <MotorControlInit+0x44>)
 8008b50:	f7fa fc60 	bl	8003414 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PWM3EN_GPIO_Port, PWM3EN_Pin, GPIO_PIN_SET);
 8008b54:	2201      	movs	r2, #1
 8008b56:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008b5a:	4808      	ldr	r0, [pc, #32]	; (8008b7c <MotorControlInit+0x44>)
 8008b5c:	f7fa fc5a 	bl	8003414 <HAL_GPIO_WritePin>

    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8008b60:	2100      	movs	r1, #0
 8008b62:	4807      	ldr	r0, [pc, #28]	; (8008b80 <MotorControlInit+0x48>)
 8008b64:	f7fb f918 	bl	8003d98 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8008b68:	2108      	movs	r1, #8
 8008b6a:	4805      	ldr	r0, [pc, #20]	; (8008b80 <MotorControlInit+0x48>)
 8008b6c:	f7fb f914 	bl	8003d98 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8008b70:	210c      	movs	r1, #12
 8008b72:	4803      	ldr	r0, [pc, #12]	; (8008b80 <MotorControlInit+0x48>)
 8008b74:	f7fb f910 	bl	8003d98 <HAL_TIM_PWM_Start>
}
 8008b78:	bf00      	nop
 8008b7a:	bd80      	pop	{r7, pc}
 8008b7c:	40020400 	.word	0x40020400
 8008b80:	200002bc 	.word	0x200002bc
 8008b84:	00000000 	.word	0x00000000

08008b88 <MotorSinusoidalCalculate>:

static void MotorSinusoidalCalculate(float step, float power) {
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b088      	sub	sp, #32
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	ed87 0a01 	vstr	s0, [r7, #4]
 8008b92:	edc7 0a00 	vstr	s1, [r7]
    const uint16_t period = TIM1->ARR;
 8008b96:	4b68      	ldr	r3, [pc, #416]	; (8008d38 <MotorSinusoidalCalculate+0x1b0>)
 8008b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b9a:	83fb      	strh	r3, [r7, #30]
    static float phase = 0.0;

    float phaseA = 0.5f + 0.5f * sinf(phase);
 8008b9c:	4b67      	ldr	r3, [pc, #412]	; (8008d3c <MotorSinusoidalCalculate+0x1b4>)
 8008b9e:	edd3 7a00 	vldr	s15, [r3]
 8008ba2:	eeb0 0a67 	vmov.f32	s0, s15
 8008ba6:	f003 f909 	bl	800bdbc <sinf>
 8008baa:	eef0 7a40 	vmov.f32	s15, s0
 8008bae:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008bb2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008bb6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008bba:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008bbe:	edc7 7a06 	vstr	s15, [r7, #24]
    float phaseB = 0.5f + 0.5f * sinf(phase + 2.0f * M_PI / 3.0f);
 8008bc2:	4b5e      	ldr	r3, [pc, #376]	; (8008d3c <MotorSinusoidalCalculate+0x1b4>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f7f7 fcc6 	bl	8000558 <__aeabi_f2d>
 8008bcc:	a354      	add	r3, pc, #336	; (adr r3, 8008d20 <MotorSinusoidalCalculate+0x198>)
 8008bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd2:	f7f7 fb63 	bl	800029c <__adddf3>
 8008bd6:	4602      	mov	r2, r0
 8008bd8:	460b      	mov	r3, r1
 8008bda:	4610      	mov	r0, r2
 8008bdc:	4619      	mov	r1, r3
 8008bde:	f7f7 ffeb 	bl	8000bb8 <__aeabi_d2f>
 8008be2:	4603      	mov	r3, r0
 8008be4:	ee00 3a10 	vmov	s0, r3
 8008be8:	f003 f8e8 	bl	800bdbc <sinf>
 8008bec:	eef0 7a40 	vmov.f32	s15, s0
 8008bf0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008bf4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008bf8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008bfc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008c00:	edc7 7a05 	vstr	s15, [r7, #20]
    float phaseC = 0.5f + 0.5f * sinf(phase + 4.0f * M_PI / 3.0f);
 8008c04:	4b4d      	ldr	r3, [pc, #308]	; (8008d3c <MotorSinusoidalCalculate+0x1b4>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f7f7 fca5 	bl	8000558 <__aeabi_f2d>
 8008c0e:	a346      	add	r3, pc, #280	; (adr r3, 8008d28 <MotorSinusoidalCalculate+0x1a0>)
 8008c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c14:	f7f7 fb42 	bl	800029c <__adddf3>
 8008c18:	4602      	mov	r2, r0
 8008c1a:	460b      	mov	r3, r1
 8008c1c:	4610      	mov	r0, r2
 8008c1e:	4619      	mov	r1, r3
 8008c20:	f7f7 ffca 	bl	8000bb8 <__aeabi_d2f>
 8008c24:	4603      	mov	r3, r0
 8008c26:	ee00 3a10 	vmov	s0, r3
 8008c2a:	f003 f8c7 	bl	800bdbc <sinf>
 8008c2e:	eef0 7a40 	vmov.f32	s15, s0
 8008c32:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008c36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008c3a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008c3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008c42:	edc7 7a04 	vstr	s15, [r7, #16]

    uint16_t pwmA = (uint16_t)(phaseA * power * period);
 8008c46:	ed97 7a06 	vldr	s14, [r7, #24]
 8008c4a:	edd7 7a00 	vldr	s15, [r7]
 8008c4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008c52:	8bfb      	ldrh	r3, [r7, #30]
 8008c54:	ee07 3a90 	vmov	s15, r3
 8008c58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008c5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c64:	ee17 3a90 	vmov	r3, s15
 8008c68:	81fb      	strh	r3, [r7, #14]
    uint16_t pwmB = (uint16_t)(phaseB * power * period);
 8008c6a:	ed97 7a05 	vldr	s14, [r7, #20]
 8008c6e:	edd7 7a00 	vldr	s15, [r7]
 8008c72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008c76:	8bfb      	ldrh	r3, [r7, #30]
 8008c78:	ee07 3a90 	vmov	s15, r3
 8008c7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008c80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c88:	ee17 3a90 	vmov	r3, s15
 8008c8c:	81bb      	strh	r3, [r7, #12]
    uint16_t pwmC = (uint16_t)(phaseC * power * period);
 8008c8e:	ed97 7a04 	vldr	s14, [r7, #16]
 8008c92:	edd7 7a00 	vldr	s15, [r7]
 8008c96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008c9a:	8bfb      	ldrh	r3, [r7, #30]
 8008c9c:	ee07 3a90 	vmov	s15, r3
 8008ca0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008ca4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ca8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008cac:	ee17 3a90 	vmov	r3, s15
 8008cb0:	817b      	strh	r3, [r7, #10]

    MotorSetPWM(pwmA, pwmB, pwmC);
 8008cb2:	897a      	ldrh	r2, [r7, #10]
 8008cb4:	89b9      	ldrh	r1, [r7, #12]
 8008cb6:	89fb      	ldrh	r3, [r7, #14]
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f000 f841 	bl	8008d40 <MotorSetPWM>

    phase += step;
 8008cbe:	4b1f      	ldr	r3, [pc, #124]	; (8008d3c <MotorSinusoidalCalculate+0x1b4>)
 8008cc0:	ed93 7a00 	vldr	s14, [r3]
 8008cc4:	edd7 7a01 	vldr	s15, [r7, #4]
 8008cc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008ccc:	4b1b      	ldr	r3, [pc, #108]	; (8008d3c <MotorSinusoidalCalculate+0x1b4>)
 8008cce:	edc3 7a00 	vstr	s15, [r3]

    if (phase > 2.0f * M_PI) {
 8008cd2:	4b1a      	ldr	r3, [pc, #104]	; (8008d3c <MotorSinusoidalCalculate+0x1b4>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f7f7 fc3e 	bl	8000558 <__aeabi_f2d>
 8008cdc:	a314      	add	r3, pc, #80	; (adr r3, 8008d30 <MotorSinusoidalCalculate+0x1a8>)
 8008cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce2:	f7f7 ff21 	bl	8000b28 <__aeabi_dcmpgt>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d100      	bne.n	8008cee <MotorSinusoidalCalculate+0x166>
        phase -= 2.0f * M_PI;
    }
}
 8008cec:	e012      	b.n	8008d14 <MotorSinusoidalCalculate+0x18c>
        phase -= 2.0f * M_PI;
 8008cee:	4b13      	ldr	r3, [pc, #76]	; (8008d3c <MotorSinusoidalCalculate+0x1b4>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f7f7 fc30 	bl	8000558 <__aeabi_f2d>
 8008cf8:	a30d      	add	r3, pc, #52	; (adr r3, 8008d30 <MotorSinusoidalCalculate+0x1a8>)
 8008cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cfe:	f7f7 facb 	bl	8000298 <__aeabi_dsub>
 8008d02:	4602      	mov	r2, r0
 8008d04:	460b      	mov	r3, r1
 8008d06:	4610      	mov	r0, r2
 8008d08:	4619      	mov	r1, r3
 8008d0a:	f7f7 ff55 	bl	8000bb8 <__aeabi_d2f>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	4a0a      	ldr	r2, [pc, #40]	; (8008d3c <MotorSinusoidalCalculate+0x1b4>)
 8008d12:	6013      	str	r3, [r2, #0]
}
 8008d14:	bf00      	nop
 8008d16:	3720      	adds	r7, #32
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}
 8008d1c:	f3af 8000 	nop.w
 8008d20:	382d7365 	.word	0x382d7365
 8008d24:	4000c152 	.word	0x4000c152
 8008d28:	382d7365 	.word	0x382d7365
 8008d2c:	4010c152 	.word	0x4010c152
 8008d30:	54442d18 	.word	0x54442d18
 8008d34:	401921fb 	.word	0x401921fb
 8008d38:	40010000 	.word	0x40010000
 8008d3c:	20004dec 	.word	0x20004dec

08008d40 <MotorSetPWM>:

static void MotorSetPWM(uint16_t U, uint16_t V, uint16_t W) {
 8008d40:	b480      	push	{r7}
 8008d42:	b083      	sub	sp, #12
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	4603      	mov	r3, r0
 8008d48:	80fb      	strh	r3, [r7, #6]
 8008d4a:	460b      	mov	r3, r1
 8008d4c:	80bb      	strh	r3, [r7, #4]
 8008d4e:	4613      	mov	r3, r2
 8008d50:	807b      	strh	r3, [r7, #2]
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, U);
 8008d52:	4b09      	ldr	r3, [pc, #36]	; (8008d78 <MotorSetPWM+0x38>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	88fa      	ldrh	r2, [r7, #6]
 8008d58:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, V);
 8008d5a:	4b07      	ldr	r3, [pc, #28]	; (8008d78 <MotorSetPWM+0x38>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	88ba      	ldrh	r2, [r7, #4]
 8008d60:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, W);
 8008d62:	4b05      	ldr	r3, [pc, #20]	; (8008d78 <MotorSetPWM+0x38>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	887a      	ldrh	r2, [r7, #2]
 8008d68:	641a      	str	r2, [r3, #64]	; 0x40
}
 8008d6a:	bf00      	nop
 8008d6c:	370c      	adds	r7, #12
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d74:	4770      	bx	lr
 8008d76:	bf00      	nop
 8008d78:	200002bc 	.word	0x200002bc

08008d7c <Map>:

static float Map(float inValue, float inMin, float inMax, float outMin, float outMax) {
 8008d7c:	b480      	push	{r7}
 8008d7e:	b087      	sub	sp, #28
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	ed87 0a05 	vstr	s0, [r7, #20]
 8008d86:	edc7 0a04 	vstr	s1, [r7, #16]
 8008d8a:	ed87 1a03 	vstr	s2, [r7, #12]
 8008d8e:	edc7 1a02 	vstr	s3, [r7, #8]
 8008d92:	ed87 2a01 	vstr	s4, [r7, #4]
    return (inValue - inMin) * (outMax - outMin) / (inMax - inMin) + outMin;
 8008d96:	ed97 7a05 	vldr	s14, [r7, #20]
 8008d9a:	edd7 7a04 	vldr	s15, [r7, #16]
 8008d9e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008da2:	edd7 6a01 	vldr	s13, [r7, #4]
 8008da6:	edd7 7a02 	vldr	s15, [r7, #8]
 8008daa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008dae:	ee67 6a27 	vmul.f32	s13, s14, s15
 8008db2:	ed97 7a03 	vldr	s14, [r7, #12]
 8008db6:	edd7 7a04 	vldr	s15, [r7, #16]
 8008dba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008dbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dc2:	edd7 7a02 	vldr	s15, [r7, #8]
 8008dc6:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8008dca:	eeb0 0a67 	vmov.f32	s0, s15
 8008dce:	371c      	adds	r7, #28
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd6:	4770      	bx	lr

08008dd8 <PotTask>:
static void PotInit();

static uint16_t sPotentiometerRaw;
static uint16_t sPotentiometerValue;

void PotTask() {
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	af00      	add	r7, sp, #0
	PotInit();
 8008ddc:	f000 f82a 	bl	8008e34 <PotInit>

	while(1) {
		HAL_ADC_Start_DMA(&hadc1, (uint32_t *)&sPotentiometerRaw, 1);
 8008de0:	2201      	movs	r2, #1
 8008de2:	4904      	ldr	r1, [pc, #16]	; (8008df4 <PotTask+0x1c>)
 8008de4:	4804      	ldr	r0, [pc, #16]	; (8008df8 <PotTask+0x20>)
 8008de6:	f7f9 f8b5 	bl	8001f54 <HAL_ADC_Start_DMA>

		osDelay(10);
 8008dea:	200a      	movs	r0, #10
 8008dec:	f7fd f808 	bl	8005e00 <osDelay>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t *)&sPotentiometerRaw, 1);
 8008df0:	e7f6      	b.n	8008de0 <PotTask+0x8>
 8008df2:	bf00      	nop
 8008df4:	20004df0 	.word	0x20004df0
 8008df8:	20000204 	.word	0x20000204

08008dfc <PotGetValue>:
	}
}

uint16_t PotGetValue() {
 8008dfc:	b480      	push	{r7}
 8008dfe:	af00      	add	r7, sp, #0
	return sPotentiometerValue;
 8008e00:	4b03      	ldr	r3, [pc, #12]	; (8008e10 <PotGetValue+0x14>)
 8008e02:	881b      	ldrh	r3, [r3, #0]
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	46bd      	mov	sp, r7
 8008e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0c:	4770      	bx	lr
 8008e0e:	bf00      	nop
 8008e10:	20004df2 	.word	0x20004df2

08008e14 <AdcConvCpltCallback>:


void AdcConvCpltCallback() {
 8008e14:	b480      	push	{r7}
 8008e16:	af00      	add	r7, sp, #0
	sPotentiometerValue = sPotentiometerRaw;
 8008e18:	4b04      	ldr	r3, [pc, #16]	; (8008e2c <AdcConvCpltCallback+0x18>)
 8008e1a:	881a      	ldrh	r2, [r3, #0]
 8008e1c:	4b04      	ldr	r3, [pc, #16]	; (8008e30 <AdcConvCpltCallback+0x1c>)
 8008e1e:	801a      	strh	r2, [r3, #0]
}
 8008e20:	bf00      	nop
 8008e22:	46bd      	mov	sp, r7
 8008e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e28:	4770      	bx	lr
 8008e2a:	bf00      	nop
 8008e2c:	20004df0 	.word	0x20004df0
 8008e30:	20004df2 	.word	0x20004df2

08008e34 <PotInit>:

static void PotInit() {
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b082      	sub	sp, #8
 8008e38:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status = HAL_ADC_Start_DMA(&hadc1, (uint32_t *)&sPotentiometerRaw, 1);
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	4909      	ldr	r1, [pc, #36]	; (8008e64 <PotInit+0x30>)
 8008e3e:	480a      	ldr	r0, [pc, #40]	; (8008e68 <PotInit+0x34>)
 8008e40:	f7f9 f888 	bl	8001f54 <HAL_ADC_Start_DMA>
 8008e44:	4603      	mov	r3, r0
 8008e46:	71fb      	strb	r3, [r7, #7]

	if (status == HAL_OK) {
 8008e48:	79fb      	ldrb	r3, [r7, #7]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d103      	bne.n	8008e56 <PotInit+0x22>
		printf("Potentiometer OK\n");
 8008e4e:	4807      	ldr	r0, [pc, #28]	; (8008e6c <PotInit+0x38>)
 8008e50:	f000 fd28 	bl	80098a4 <puts>
	}
	else {
		printf("Potentiometer ERROR\n");
	}
}
 8008e54:	e002      	b.n	8008e5c <PotInit+0x28>
		printf("Potentiometer ERROR\n");
 8008e56:	4806      	ldr	r0, [pc, #24]	; (8008e70 <PotInit+0x3c>)
 8008e58:	f000 fd24 	bl	80098a4 <puts>
}
 8008e5c:	bf00      	nop
 8008e5e:	3708      	adds	r7, #8
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bd80      	pop	{r7, pc}
 8008e64:	20004df0 	.word	0x20004df0
 8008e68:	20000204 	.word	0x20000204
 8008e6c:	0800c900 	.word	0x0800c900
 8008e70:	0800c914 	.word	0x0800c914

08008e74 <__errno>:
 8008e74:	4b01      	ldr	r3, [pc, #4]	; (8008e7c <__errno+0x8>)
 8008e76:	6818      	ldr	r0, [r3, #0]
 8008e78:	4770      	bx	lr
 8008e7a:	bf00      	nop
 8008e7c:	20000018 	.word	0x20000018

08008e80 <__libc_init_array>:
 8008e80:	b570      	push	{r4, r5, r6, lr}
 8008e82:	4d0d      	ldr	r5, [pc, #52]	; (8008eb8 <__libc_init_array+0x38>)
 8008e84:	4c0d      	ldr	r4, [pc, #52]	; (8008ebc <__libc_init_array+0x3c>)
 8008e86:	1b64      	subs	r4, r4, r5
 8008e88:	10a4      	asrs	r4, r4, #2
 8008e8a:	2600      	movs	r6, #0
 8008e8c:	42a6      	cmp	r6, r4
 8008e8e:	d109      	bne.n	8008ea4 <__libc_init_array+0x24>
 8008e90:	4d0b      	ldr	r5, [pc, #44]	; (8008ec0 <__libc_init_array+0x40>)
 8008e92:	4c0c      	ldr	r4, [pc, #48]	; (8008ec4 <__libc_init_array+0x44>)
 8008e94:	f003 fcee 	bl	800c874 <_init>
 8008e98:	1b64      	subs	r4, r4, r5
 8008e9a:	10a4      	asrs	r4, r4, #2
 8008e9c:	2600      	movs	r6, #0
 8008e9e:	42a6      	cmp	r6, r4
 8008ea0:	d105      	bne.n	8008eae <__libc_init_array+0x2e>
 8008ea2:	bd70      	pop	{r4, r5, r6, pc}
 8008ea4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ea8:	4798      	blx	r3
 8008eaa:	3601      	adds	r6, #1
 8008eac:	e7ee      	b.n	8008e8c <__libc_init_array+0xc>
 8008eae:	f855 3b04 	ldr.w	r3, [r5], #4
 8008eb2:	4798      	blx	r3
 8008eb4:	3601      	adds	r6, #1
 8008eb6:	e7f2      	b.n	8008e9e <__libc_init_array+0x1e>
 8008eb8:	0800d164 	.word	0x0800d164
 8008ebc:	0800d164 	.word	0x0800d164
 8008ec0:	0800d164 	.word	0x0800d164
 8008ec4:	0800d168 	.word	0x0800d168

08008ec8 <memcpy>:
 8008ec8:	440a      	add	r2, r1
 8008eca:	4291      	cmp	r1, r2
 8008ecc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008ed0:	d100      	bne.n	8008ed4 <memcpy+0xc>
 8008ed2:	4770      	bx	lr
 8008ed4:	b510      	push	{r4, lr}
 8008ed6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008eda:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ede:	4291      	cmp	r1, r2
 8008ee0:	d1f9      	bne.n	8008ed6 <memcpy+0xe>
 8008ee2:	bd10      	pop	{r4, pc}

08008ee4 <memset>:
 8008ee4:	4402      	add	r2, r0
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	d100      	bne.n	8008eee <memset+0xa>
 8008eec:	4770      	bx	lr
 8008eee:	f803 1b01 	strb.w	r1, [r3], #1
 8008ef2:	e7f9      	b.n	8008ee8 <memset+0x4>

08008ef4 <__cvt>:
 8008ef4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ef8:	ec55 4b10 	vmov	r4, r5, d0
 8008efc:	2d00      	cmp	r5, #0
 8008efe:	460e      	mov	r6, r1
 8008f00:	4619      	mov	r1, r3
 8008f02:	462b      	mov	r3, r5
 8008f04:	bfbb      	ittet	lt
 8008f06:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008f0a:	461d      	movlt	r5, r3
 8008f0c:	2300      	movge	r3, #0
 8008f0e:	232d      	movlt	r3, #45	; 0x2d
 8008f10:	700b      	strb	r3, [r1, #0]
 8008f12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f14:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008f18:	4691      	mov	r9, r2
 8008f1a:	f023 0820 	bic.w	r8, r3, #32
 8008f1e:	bfbc      	itt	lt
 8008f20:	4622      	movlt	r2, r4
 8008f22:	4614      	movlt	r4, r2
 8008f24:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008f28:	d005      	beq.n	8008f36 <__cvt+0x42>
 8008f2a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008f2e:	d100      	bne.n	8008f32 <__cvt+0x3e>
 8008f30:	3601      	adds	r6, #1
 8008f32:	2102      	movs	r1, #2
 8008f34:	e000      	b.n	8008f38 <__cvt+0x44>
 8008f36:	2103      	movs	r1, #3
 8008f38:	ab03      	add	r3, sp, #12
 8008f3a:	9301      	str	r3, [sp, #4]
 8008f3c:	ab02      	add	r3, sp, #8
 8008f3e:	9300      	str	r3, [sp, #0]
 8008f40:	ec45 4b10 	vmov	d0, r4, r5
 8008f44:	4653      	mov	r3, sl
 8008f46:	4632      	mov	r2, r6
 8008f48:	f000 fe3a 	bl	8009bc0 <_dtoa_r>
 8008f4c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008f50:	4607      	mov	r7, r0
 8008f52:	d102      	bne.n	8008f5a <__cvt+0x66>
 8008f54:	f019 0f01 	tst.w	r9, #1
 8008f58:	d022      	beq.n	8008fa0 <__cvt+0xac>
 8008f5a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008f5e:	eb07 0906 	add.w	r9, r7, r6
 8008f62:	d110      	bne.n	8008f86 <__cvt+0x92>
 8008f64:	783b      	ldrb	r3, [r7, #0]
 8008f66:	2b30      	cmp	r3, #48	; 0x30
 8008f68:	d10a      	bne.n	8008f80 <__cvt+0x8c>
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	4620      	mov	r0, r4
 8008f70:	4629      	mov	r1, r5
 8008f72:	f7f7 fdb1 	bl	8000ad8 <__aeabi_dcmpeq>
 8008f76:	b918      	cbnz	r0, 8008f80 <__cvt+0x8c>
 8008f78:	f1c6 0601 	rsb	r6, r6, #1
 8008f7c:	f8ca 6000 	str.w	r6, [sl]
 8008f80:	f8da 3000 	ldr.w	r3, [sl]
 8008f84:	4499      	add	r9, r3
 8008f86:	2200      	movs	r2, #0
 8008f88:	2300      	movs	r3, #0
 8008f8a:	4620      	mov	r0, r4
 8008f8c:	4629      	mov	r1, r5
 8008f8e:	f7f7 fda3 	bl	8000ad8 <__aeabi_dcmpeq>
 8008f92:	b108      	cbz	r0, 8008f98 <__cvt+0xa4>
 8008f94:	f8cd 900c 	str.w	r9, [sp, #12]
 8008f98:	2230      	movs	r2, #48	; 0x30
 8008f9a:	9b03      	ldr	r3, [sp, #12]
 8008f9c:	454b      	cmp	r3, r9
 8008f9e:	d307      	bcc.n	8008fb0 <__cvt+0xbc>
 8008fa0:	9b03      	ldr	r3, [sp, #12]
 8008fa2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008fa4:	1bdb      	subs	r3, r3, r7
 8008fa6:	4638      	mov	r0, r7
 8008fa8:	6013      	str	r3, [r2, #0]
 8008faa:	b004      	add	sp, #16
 8008fac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fb0:	1c59      	adds	r1, r3, #1
 8008fb2:	9103      	str	r1, [sp, #12]
 8008fb4:	701a      	strb	r2, [r3, #0]
 8008fb6:	e7f0      	b.n	8008f9a <__cvt+0xa6>

08008fb8 <__exponent>:
 8008fb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008fba:	4603      	mov	r3, r0
 8008fbc:	2900      	cmp	r1, #0
 8008fbe:	bfb8      	it	lt
 8008fc0:	4249      	neglt	r1, r1
 8008fc2:	f803 2b02 	strb.w	r2, [r3], #2
 8008fc6:	bfb4      	ite	lt
 8008fc8:	222d      	movlt	r2, #45	; 0x2d
 8008fca:	222b      	movge	r2, #43	; 0x2b
 8008fcc:	2909      	cmp	r1, #9
 8008fce:	7042      	strb	r2, [r0, #1]
 8008fd0:	dd2a      	ble.n	8009028 <__exponent+0x70>
 8008fd2:	f10d 0407 	add.w	r4, sp, #7
 8008fd6:	46a4      	mov	ip, r4
 8008fd8:	270a      	movs	r7, #10
 8008fda:	46a6      	mov	lr, r4
 8008fdc:	460a      	mov	r2, r1
 8008fde:	fb91 f6f7 	sdiv	r6, r1, r7
 8008fe2:	fb07 1516 	mls	r5, r7, r6, r1
 8008fe6:	3530      	adds	r5, #48	; 0x30
 8008fe8:	2a63      	cmp	r2, #99	; 0x63
 8008fea:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8008fee:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008ff2:	4631      	mov	r1, r6
 8008ff4:	dcf1      	bgt.n	8008fda <__exponent+0x22>
 8008ff6:	3130      	adds	r1, #48	; 0x30
 8008ff8:	f1ae 0502 	sub.w	r5, lr, #2
 8008ffc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009000:	1c44      	adds	r4, r0, #1
 8009002:	4629      	mov	r1, r5
 8009004:	4561      	cmp	r1, ip
 8009006:	d30a      	bcc.n	800901e <__exponent+0x66>
 8009008:	f10d 0209 	add.w	r2, sp, #9
 800900c:	eba2 020e 	sub.w	r2, r2, lr
 8009010:	4565      	cmp	r5, ip
 8009012:	bf88      	it	hi
 8009014:	2200      	movhi	r2, #0
 8009016:	4413      	add	r3, r2
 8009018:	1a18      	subs	r0, r3, r0
 800901a:	b003      	add	sp, #12
 800901c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800901e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009022:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009026:	e7ed      	b.n	8009004 <__exponent+0x4c>
 8009028:	2330      	movs	r3, #48	; 0x30
 800902a:	3130      	adds	r1, #48	; 0x30
 800902c:	7083      	strb	r3, [r0, #2]
 800902e:	70c1      	strb	r1, [r0, #3]
 8009030:	1d03      	adds	r3, r0, #4
 8009032:	e7f1      	b.n	8009018 <__exponent+0x60>

08009034 <_printf_float>:
 8009034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009038:	ed2d 8b02 	vpush	{d8}
 800903c:	b08d      	sub	sp, #52	; 0x34
 800903e:	460c      	mov	r4, r1
 8009040:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009044:	4616      	mov	r6, r2
 8009046:	461f      	mov	r7, r3
 8009048:	4605      	mov	r5, r0
 800904a:	f001 fd5f 	bl	800ab0c <_localeconv_r>
 800904e:	f8d0 a000 	ldr.w	sl, [r0]
 8009052:	4650      	mov	r0, sl
 8009054:	f7f7 f8c4 	bl	80001e0 <strlen>
 8009058:	2300      	movs	r3, #0
 800905a:	930a      	str	r3, [sp, #40]	; 0x28
 800905c:	6823      	ldr	r3, [r4, #0]
 800905e:	9305      	str	r3, [sp, #20]
 8009060:	f8d8 3000 	ldr.w	r3, [r8]
 8009064:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009068:	3307      	adds	r3, #7
 800906a:	f023 0307 	bic.w	r3, r3, #7
 800906e:	f103 0208 	add.w	r2, r3, #8
 8009072:	f8c8 2000 	str.w	r2, [r8]
 8009076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800907a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800907e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009082:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009086:	9307      	str	r3, [sp, #28]
 8009088:	f8cd 8018 	str.w	r8, [sp, #24]
 800908c:	ee08 0a10 	vmov	s16, r0
 8009090:	4b9f      	ldr	r3, [pc, #636]	; (8009310 <_printf_float+0x2dc>)
 8009092:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009096:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800909a:	f7f7 fd4f 	bl	8000b3c <__aeabi_dcmpun>
 800909e:	bb88      	cbnz	r0, 8009104 <_printf_float+0xd0>
 80090a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80090a4:	4b9a      	ldr	r3, [pc, #616]	; (8009310 <_printf_float+0x2dc>)
 80090a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80090aa:	f7f7 fd29 	bl	8000b00 <__aeabi_dcmple>
 80090ae:	bb48      	cbnz	r0, 8009104 <_printf_float+0xd0>
 80090b0:	2200      	movs	r2, #0
 80090b2:	2300      	movs	r3, #0
 80090b4:	4640      	mov	r0, r8
 80090b6:	4649      	mov	r1, r9
 80090b8:	f7f7 fd18 	bl	8000aec <__aeabi_dcmplt>
 80090bc:	b110      	cbz	r0, 80090c4 <_printf_float+0x90>
 80090be:	232d      	movs	r3, #45	; 0x2d
 80090c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090c4:	4b93      	ldr	r3, [pc, #588]	; (8009314 <_printf_float+0x2e0>)
 80090c6:	4894      	ldr	r0, [pc, #592]	; (8009318 <_printf_float+0x2e4>)
 80090c8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80090cc:	bf94      	ite	ls
 80090ce:	4698      	movls	r8, r3
 80090d0:	4680      	movhi	r8, r0
 80090d2:	2303      	movs	r3, #3
 80090d4:	6123      	str	r3, [r4, #16]
 80090d6:	9b05      	ldr	r3, [sp, #20]
 80090d8:	f023 0204 	bic.w	r2, r3, #4
 80090dc:	6022      	str	r2, [r4, #0]
 80090de:	f04f 0900 	mov.w	r9, #0
 80090e2:	9700      	str	r7, [sp, #0]
 80090e4:	4633      	mov	r3, r6
 80090e6:	aa0b      	add	r2, sp, #44	; 0x2c
 80090e8:	4621      	mov	r1, r4
 80090ea:	4628      	mov	r0, r5
 80090ec:	f000 f9d8 	bl	80094a0 <_printf_common>
 80090f0:	3001      	adds	r0, #1
 80090f2:	f040 8090 	bne.w	8009216 <_printf_float+0x1e2>
 80090f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80090fa:	b00d      	add	sp, #52	; 0x34
 80090fc:	ecbd 8b02 	vpop	{d8}
 8009100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009104:	4642      	mov	r2, r8
 8009106:	464b      	mov	r3, r9
 8009108:	4640      	mov	r0, r8
 800910a:	4649      	mov	r1, r9
 800910c:	f7f7 fd16 	bl	8000b3c <__aeabi_dcmpun>
 8009110:	b140      	cbz	r0, 8009124 <_printf_float+0xf0>
 8009112:	464b      	mov	r3, r9
 8009114:	2b00      	cmp	r3, #0
 8009116:	bfbc      	itt	lt
 8009118:	232d      	movlt	r3, #45	; 0x2d
 800911a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800911e:	487f      	ldr	r0, [pc, #508]	; (800931c <_printf_float+0x2e8>)
 8009120:	4b7f      	ldr	r3, [pc, #508]	; (8009320 <_printf_float+0x2ec>)
 8009122:	e7d1      	b.n	80090c8 <_printf_float+0x94>
 8009124:	6863      	ldr	r3, [r4, #4]
 8009126:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800912a:	9206      	str	r2, [sp, #24]
 800912c:	1c5a      	adds	r2, r3, #1
 800912e:	d13f      	bne.n	80091b0 <_printf_float+0x17c>
 8009130:	2306      	movs	r3, #6
 8009132:	6063      	str	r3, [r4, #4]
 8009134:	9b05      	ldr	r3, [sp, #20]
 8009136:	6861      	ldr	r1, [r4, #4]
 8009138:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800913c:	2300      	movs	r3, #0
 800913e:	9303      	str	r3, [sp, #12]
 8009140:	ab0a      	add	r3, sp, #40	; 0x28
 8009142:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009146:	ab09      	add	r3, sp, #36	; 0x24
 8009148:	ec49 8b10 	vmov	d0, r8, r9
 800914c:	9300      	str	r3, [sp, #0]
 800914e:	6022      	str	r2, [r4, #0]
 8009150:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009154:	4628      	mov	r0, r5
 8009156:	f7ff fecd 	bl	8008ef4 <__cvt>
 800915a:	9b06      	ldr	r3, [sp, #24]
 800915c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800915e:	2b47      	cmp	r3, #71	; 0x47
 8009160:	4680      	mov	r8, r0
 8009162:	d108      	bne.n	8009176 <_printf_float+0x142>
 8009164:	1cc8      	adds	r0, r1, #3
 8009166:	db02      	blt.n	800916e <_printf_float+0x13a>
 8009168:	6863      	ldr	r3, [r4, #4]
 800916a:	4299      	cmp	r1, r3
 800916c:	dd41      	ble.n	80091f2 <_printf_float+0x1be>
 800916e:	f1ab 0b02 	sub.w	fp, fp, #2
 8009172:	fa5f fb8b 	uxtb.w	fp, fp
 8009176:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800917a:	d820      	bhi.n	80091be <_printf_float+0x18a>
 800917c:	3901      	subs	r1, #1
 800917e:	465a      	mov	r2, fp
 8009180:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009184:	9109      	str	r1, [sp, #36]	; 0x24
 8009186:	f7ff ff17 	bl	8008fb8 <__exponent>
 800918a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800918c:	1813      	adds	r3, r2, r0
 800918e:	2a01      	cmp	r2, #1
 8009190:	4681      	mov	r9, r0
 8009192:	6123      	str	r3, [r4, #16]
 8009194:	dc02      	bgt.n	800919c <_printf_float+0x168>
 8009196:	6822      	ldr	r2, [r4, #0]
 8009198:	07d2      	lsls	r2, r2, #31
 800919a:	d501      	bpl.n	80091a0 <_printf_float+0x16c>
 800919c:	3301      	adds	r3, #1
 800919e:	6123      	str	r3, [r4, #16]
 80091a0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d09c      	beq.n	80090e2 <_printf_float+0xae>
 80091a8:	232d      	movs	r3, #45	; 0x2d
 80091aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091ae:	e798      	b.n	80090e2 <_printf_float+0xae>
 80091b0:	9a06      	ldr	r2, [sp, #24]
 80091b2:	2a47      	cmp	r2, #71	; 0x47
 80091b4:	d1be      	bne.n	8009134 <_printf_float+0x100>
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d1bc      	bne.n	8009134 <_printf_float+0x100>
 80091ba:	2301      	movs	r3, #1
 80091bc:	e7b9      	b.n	8009132 <_printf_float+0xfe>
 80091be:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80091c2:	d118      	bne.n	80091f6 <_printf_float+0x1c2>
 80091c4:	2900      	cmp	r1, #0
 80091c6:	6863      	ldr	r3, [r4, #4]
 80091c8:	dd0b      	ble.n	80091e2 <_printf_float+0x1ae>
 80091ca:	6121      	str	r1, [r4, #16]
 80091cc:	b913      	cbnz	r3, 80091d4 <_printf_float+0x1a0>
 80091ce:	6822      	ldr	r2, [r4, #0]
 80091d0:	07d0      	lsls	r0, r2, #31
 80091d2:	d502      	bpl.n	80091da <_printf_float+0x1a6>
 80091d4:	3301      	adds	r3, #1
 80091d6:	440b      	add	r3, r1
 80091d8:	6123      	str	r3, [r4, #16]
 80091da:	65a1      	str	r1, [r4, #88]	; 0x58
 80091dc:	f04f 0900 	mov.w	r9, #0
 80091e0:	e7de      	b.n	80091a0 <_printf_float+0x16c>
 80091e2:	b913      	cbnz	r3, 80091ea <_printf_float+0x1b6>
 80091e4:	6822      	ldr	r2, [r4, #0]
 80091e6:	07d2      	lsls	r2, r2, #31
 80091e8:	d501      	bpl.n	80091ee <_printf_float+0x1ba>
 80091ea:	3302      	adds	r3, #2
 80091ec:	e7f4      	b.n	80091d8 <_printf_float+0x1a4>
 80091ee:	2301      	movs	r3, #1
 80091f0:	e7f2      	b.n	80091d8 <_printf_float+0x1a4>
 80091f2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80091f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091f8:	4299      	cmp	r1, r3
 80091fa:	db05      	blt.n	8009208 <_printf_float+0x1d4>
 80091fc:	6823      	ldr	r3, [r4, #0]
 80091fe:	6121      	str	r1, [r4, #16]
 8009200:	07d8      	lsls	r0, r3, #31
 8009202:	d5ea      	bpl.n	80091da <_printf_float+0x1a6>
 8009204:	1c4b      	adds	r3, r1, #1
 8009206:	e7e7      	b.n	80091d8 <_printf_float+0x1a4>
 8009208:	2900      	cmp	r1, #0
 800920a:	bfd4      	ite	le
 800920c:	f1c1 0202 	rsble	r2, r1, #2
 8009210:	2201      	movgt	r2, #1
 8009212:	4413      	add	r3, r2
 8009214:	e7e0      	b.n	80091d8 <_printf_float+0x1a4>
 8009216:	6823      	ldr	r3, [r4, #0]
 8009218:	055a      	lsls	r2, r3, #21
 800921a:	d407      	bmi.n	800922c <_printf_float+0x1f8>
 800921c:	6923      	ldr	r3, [r4, #16]
 800921e:	4642      	mov	r2, r8
 8009220:	4631      	mov	r1, r6
 8009222:	4628      	mov	r0, r5
 8009224:	47b8      	blx	r7
 8009226:	3001      	adds	r0, #1
 8009228:	d12c      	bne.n	8009284 <_printf_float+0x250>
 800922a:	e764      	b.n	80090f6 <_printf_float+0xc2>
 800922c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009230:	f240 80e0 	bls.w	80093f4 <_printf_float+0x3c0>
 8009234:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009238:	2200      	movs	r2, #0
 800923a:	2300      	movs	r3, #0
 800923c:	f7f7 fc4c 	bl	8000ad8 <__aeabi_dcmpeq>
 8009240:	2800      	cmp	r0, #0
 8009242:	d034      	beq.n	80092ae <_printf_float+0x27a>
 8009244:	4a37      	ldr	r2, [pc, #220]	; (8009324 <_printf_float+0x2f0>)
 8009246:	2301      	movs	r3, #1
 8009248:	4631      	mov	r1, r6
 800924a:	4628      	mov	r0, r5
 800924c:	47b8      	blx	r7
 800924e:	3001      	adds	r0, #1
 8009250:	f43f af51 	beq.w	80090f6 <_printf_float+0xc2>
 8009254:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009258:	429a      	cmp	r2, r3
 800925a:	db02      	blt.n	8009262 <_printf_float+0x22e>
 800925c:	6823      	ldr	r3, [r4, #0]
 800925e:	07d8      	lsls	r0, r3, #31
 8009260:	d510      	bpl.n	8009284 <_printf_float+0x250>
 8009262:	ee18 3a10 	vmov	r3, s16
 8009266:	4652      	mov	r2, sl
 8009268:	4631      	mov	r1, r6
 800926a:	4628      	mov	r0, r5
 800926c:	47b8      	blx	r7
 800926e:	3001      	adds	r0, #1
 8009270:	f43f af41 	beq.w	80090f6 <_printf_float+0xc2>
 8009274:	f04f 0800 	mov.w	r8, #0
 8009278:	f104 091a 	add.w	r9, r4, #26
 800927c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800927e:	3b01      	subs	r3, #1
 8009280:	4543      	cmp	r3, r8
 8009282:	dc09      	bgt.n	8009298 <_printf_float+0x264>
 8009284:	6823      	ldr	r3, [r4, #0]
 8009286:	079b      	lsls	r3, r3, #30
 8009288:	f100 8105 	bmi.w	8009496 <_printf_float+0x462>
 800928c:	68e0      	ldr	r0, [r4, #12]
 800928e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009290:	4298      	cmp	r0, r3
 8009292:	bfb8      	it	lt
 8009294:	4618      	movlt	r0, r3
 8009296:	e730      	b.n	80090fa <_printf_float+0xc6>
 8009298:	2301      	movs	r3, #1
 800929a:	464a      	mov	r2, r9
 800929c:	4631      	mov	r1, r6
 800929e:	4628      	mov	r0, r5
 80092a0:	47b8      	blx	r7
 80092a2:	3001      	adds	r0, #1
 80092a4:	f43f af27 	beq.w	80090f6 <_printf_float+0xc2>
 80092a8:	f108 0801 	add.w	r8, r8, #1
 80092ac:	e7e6      	b.n	800927c <_printf_float+0x248>
 80092ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	dc39      	bgt.n	8009328 <_printf_float+0x2f4>
 80092b4:	4a1b      	ldr	r2, [pc, #108]	; (8009324 <_printf_float+0x2f0>)
 80092b6:	2301      	movs	r3, #1
 80092b8:	4631      	mov	r1, r6
 80092ba:	4628      	mov	r0, r5
 80092bc:	47b8      	blx	r7
 80092be:	3001      	adds	r0, #1
 80092c0:	f43f af19 	beq.w	80090f6 <_printf_float+0xc2>
 80092c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80092c8:	4313      	orrs	r3, r2
 80092ca:	d102      	bne.n	80092d2 <_printf_float+0x29e>
 80092cc:	6823      	ldr	r3, [r4, #0]
 80092ce:	07d9      	lsls	r1, r3, #31
 80092d0:	d5d8      	bpl.n	8009284 <_printf_float+0x250>
 80092d2:	ee18 3a10 	vmov	r3, s16
 80092d6:	4652      	mov	r2, sl
 80092d8:	4631      	mov	r1, r6
 80092da:	4628      	mov	r0, r5
 80092dc:	47b8      	blx	r7
 80092de:	3001      	adds	r0, #1
 80092e0:	f43f af09 	beq.w	80090f6 <_printf_float+0xc2>
 80092e4:	f04f 0900 	mov.w	r9, #0
 80092e8:	f104 0a1a 	add.w	sl, r4, #26
 80092ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092ee:	425b      	negs	r3, r3
 80092f0:	454b      	cmp	r3, r9
 80092f2:	dc01      	bgt.n	80092f8 <_printf_float+0x2c4>
 80092f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092f6:	e792      	b.n	800921e <_printf_float+0x1ea>
 80092f8:	2301      	movs	r3, #1
 80092fa:	4652      	mov	r2, sl
 80092fc:	4631      	mov	r1, r6
 80092fe:	4628      	mov	r0, r5
 8009300:	47b8      	blx	r7
 8009302:	3001      	adds	r0, #1
 8009304:	f43f aef7 	beq.w	80090f6 <_printf_float+0xc2>
 8009308:	f109 0901 	add.w	r9, r9, #1
 800930c:	e7ee      	b.n	80092ec <_printf_float+0x2b8>
 800930e:	bf00      	nop
 8009310:	7fefffff 	.word	0x7fefffff
 8009314:	0800c9b8 	.word	0x0800c9b8
 8009318:	0800c9bc 	.word	0x0800c9bc
 800931c:	0800c9c4 	.word	0x0800c9c4
 8009320:	0800c9c0 	.word	0x0800c9c0
 8009324:	0800c9c8 	.word	0x0800c9c8
 8009328:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800932a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800932c:	429a      	cmp	r2, r3
 800932e:	bfa8      	it	ge
 8009330:	461a      	movge	r2, r3
 8009332:	2a00      	cmp	r2, #0
 8009334:	4691      	mov	r9, r2
 8009336:	dc37      	bgt.n	80093a8 <_printf_float+0x374>
 8009338:	f04f 0b00 	mov.w	fp, #0
 800933c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009340:	f104 021a 	add.w	r2, r4, #26
 8009344:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009346:	9305      	str	r3, [sp, #20]
 8009348:	eba3 0309 	sub.w	r3, r3, r9
 800934c:	455b      	cmp	r3, fp
 800934e:	dc33      	bgt.n	80093b8 <_printf_float+0x384>
 8009350:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009354:	429a      	cmp	r2, r3
 8009356:	db3b      	blt.n	80093d0 <_printf_float+0x39c>
 8009358:	6823      	ldr	r3, [r4, #0]
 800935a:	07da      	lsls	r2, r3, #31
 800935c:	d438      	bmi.n	80093d0 <_printf_float+0x39c>
 800935e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009360:	9a05      	ldr	r2, [sp, #20]
 8009362:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009364:	1a9a      	subs	r2, r3, r2
 8009366:	eba3 0901 	sub.w	r9, r3, r1
 800936a:	4591      	cmp	r9, r2
 800936c:	bfa8      	it	ge
 800936e:	4691      	movge	r9, r2
 8009370:	f1b9 0f00 	cmp.w	r9, #0
 8009374:	dc35      	bgt.n	80093e2 <_printf_float+0x3ae>
 8009376:	f04f 0800 	mov.w	r8, #0
 800937a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800937e:	f104 0a1a 	add.w	sl, r4, #26
 8009382:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009386:	1a9b      	subs	r3, r3, r2
 8009388:	eba3 0309 	sub.w	r3, r3, r9
 800938c:	4543      	cmp	r3, r8
 800938e:	f77f af79 	ble.w	8009284 <_printf_float+0x250>
 8009392:	2301      	movs	r3, #1
 8009394:	4652      	mov	r2, sl
 8009396:	4631      	mov	r1, r6
 8009398:	4628      	mov	r0, r5
 800939a:	47b8      	blx	r7
 800939c:	3001      	adds	r0, #1
 800939e:	f43f aeaa 	beq.w	80090f6 <_printf_float+0xc2>
 80093a2:	f108 0801 	add.w	r8, r8, #1
 80093a6:	e7ec      	b.n	8009382 <_printf_float+0x34e>
 80093a8:	4613      	mov	r3, r2
 80093aa:	4631      	mov	r1, r6
 80093ac:	4642      	mov	r2, r8
 80093ae:	4628      	mov	r0, r5
 80093b0:	47b8      	blx	r7
 80093b2:	3001      	adds	r0, #1
 80093b4:	d1c0      	bne.n	8009338 <_printf_float+0x304>
 80093b6:	e69e      	b.n	80090f6 <_printf_float+0xc2>
 80093b8:	2301      	movs	r3, #1
 80093ba:	4631      	mov	r1, r6
 80093bc:	4628      	mov	r0, r5
 80093be:	9205      	str	r2, [sp, #20]
 80093c0:	47b8      	blx	r7
 80093c2:	3001      	adds	r0, #1
 80093c4:	f43f ae97 	beq.w	80090f6 <_printf_float+0xc2>
 80093c8:	9a05      	ldr	r2, [sp, #20]
 80093ca:	f10b 0b01 	add.w	fp, fp, #1
 80093ce:	e7b9      	b.n	8009344 <_printf_float+0x310>
 80093d0:	ee18 3a10 	vmov	r3, s16
 80093d4:	4652      	mov	r2, sl
 80093d6:	4631      	mov	r1, r6
 80093d8:	4628      	mov	r0, r5
 80093da:	47b8      	blx	r7
 80093dc:	3001      	adds	r0, #1
 80093de:	d1be      	bne.n	800935e <_printf_float+0x32a>
 80093e0:	e689      	b.n	80090f6 <_printf_float+0xc2>
 80093e2:	9a05      	ldr	r2, [sp, #20]
 80093e4:	464b      	mov	r3, r9
 80093e6:	4442      	add	r2, r8
 80093e8:	4631      	mov	r1, r6
 80093ea:	4628      	mov	r0, r5
 80093ec:	47b8      	blx	r7
 80093ee:	3001      	adds	r0, #1
 80093f0:	d1c1      	bne.n	8009376 <_printf_float+0x342>
 80093f2:	e680      	b.n	80090f6 <_printf_float+0xc2>
 80093f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80093f6:	2a01      	cmp	r2, #1
 80093f8:	dc01      	bgt.n	80093fe <_printf_float+0x3ca>
 80093fa:	07db      	lsls	r3, r3, #31
 80093fc:	d538      	bpl.n	8009470 <_printf_float+0x43c>
 80093fe:	2301      	movs	r3, #1
 8009400:	4642      	mov	r2, r8
 8009402:	4631      	mov	r1, r6
 8009404:	4628      	mov	r0, r5
 8009406:	47b8      	blx	r7
 8009408:	3001      	adds	r0, #1
 800940a:	f43f ae74 	beq.w	80090f6 <_printf_float+0xc2>
 800940e:	ee18 3a10 	vmov	r3, s16
 8009412:	4652      	mov	r2, sl
 8009414:	4631      	mov	r1, r6
 8009416:	4628      	mov	r0, r5
 8009418:	47b8      	blx	r7
 800941a:	3001      	adds	r0, #1
 800941c:	f43f ae6b 	beq.w	80090f6 <_printf_float+0xc2>
 8009420:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009424:	2200      	movs	r2, #0
 8009426:	2300      	movs	r3, #0
 8009428:	f7f7 fb56 	bl	8000ad8 <__aeabi_dcmpeq>
 800942c:	b9d8      	cbnz	r0, 8009466 <_printf_float+0x432>
 800942e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009430:	f108 0201 	add.w	r2, r8, #1
 8009434:	3b01      	subs	r3, #1
 8009436:	4631      	mov	r1, r6
 8009438:	4628      	mov	r0, r5
 800943a:	47b8      	blx	r7
 800943c:	3001      	adds	r0, #1
 800943e:	d10e      	bne.n	800945e <_printf_float+0x42a>
 8009440:	e659      	b.n	80090f6 <_printf_float+0xc2>
 8009442:	2301      	movs	r3, #1
 8009444:	4652      	mov	r2, sl
 8009446:	4631      	mov	r1, r6
 8009448:	4628      	mov	r0, r5
 800944a:	47b8      	blx	r7
 800944c:	3001      	adds	r0, #1
 800944e:	f43f ae52 	beq.w	80090f6 <_printf_float+0xc2>
 8009452:	f108 0801 	add.w	r8, r8, #1
 8009456:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009458:	3b01      	subs	r3, #1
 800945a:	4543      	cmp	r3, r8
 800945c:	dcf1      	bgt.n	8009442 <_printf_float+0x40e>
 800945e:	464b      	mov	r3, r9
 8009460:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009464:	e6dc      	b.n	8009220 <_printf_float+0x1ec>
 8009466:	f04f 0800 	mov.w	r8, #0
 800946a:	f104 0a1a 	add.w	sl, r4, #26
 800946e:	e7f2      	b.n	8009456 <_printf_float+0x422>
 8009470:	2301      	movs	r3, #1
 8009472:	4642      	mov	r2, r8
 8009474:	e7df      	b.n	8009436 <_printf_float+0x402>
 8009476:	2301      	movs	r3, #1
 8009478:	464a      	mov	r2, r9
 800947a:	4631      	mov	r1, r6
 800947c:	4628      	mov	r0, r5
 800947e:	47b8      	blx	r7
 8009480:	3001      	adds	r0, #1
 8009482:	f43f ae38 	beq.w	80090f6 <_printf_float+0xc2>
 8009486:	f108 0801 	add.w	r8, r8, #1
 800948a:	68e3      	ldr	r3, [r4, #12]
 800948c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800948e:	1a5b      	subs	r3, r3, r1
 8009490:	4543      	cmp	r3, r8
 8009492:	dcf0      	bgt.n	8009476 <_printf_float+0x442>
 8009494:	e6fa      	b.n	800928c <_printf_float+0x258>
 8009496:	f04f 0800 	mov.w	r8, #0
 800949a:	f104 0919 	add.w	r9, r4, #25
 800949e:	e7f4      	b.n	800948a <_printf_float+0x456>

080094a0 <_printf_common>:
 80094a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094a4:	4616      	mov	r6, r2
 80094a6:	4699      	mov	r9, r3
 80094a8:	688a      	ldr	r2, [r1, #8]
 80094aa:	690b      	ldr	r3, [r1, #16]
 80094ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80094b0:	4293      	cmp	r3, r2
 80094b2:	bfb8      	it	lt
 80094b4:	4613      	movlt	r3, r2
 80094b6:	6033      	str	r3, [r6, #0]
 80094b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80094bc:	4607      	mov	r7, r0
 80094be:	460c      	mov	r4, r1
 80094c0:	b10a      	cbz	r2, 80094c6 <_printf_common+0x26>
 80094c2:	3301      	adds	r3, #1
 80094c4:	6033      	str	r3, [r6, #0]
 80094c6:	6823      	ldr	r3, [r4, #0]
 80094c8:	0699      	lsls	r1, r3, #26
 80094ca:	bf42      	ittt	mi
 80094cc:	6833      	ldrmi	r3, [r6, #0]
 80094ce:	3302      	addmi	r3, #2
 80094d0:	6033      	strmi	r3, [r6, #0]
 80094d2:	6825      	ldr	r5, [r4, #0]
 80094d4:	f015 0506 	ands.w	r5, r5, #6
 80094d8:	d106      	bne.n	80094e8 <_printf_common+0x48>
 80094da:	f104 0a19 	add.w	sl, r4, #25
 80094de:	68e3      	ldr	r3, [r4, #12]
 80094e0:	6832      	ldr	r2, [r6, #0]
 80094e2:	1a9b      	subs	r3, r3, r2
 80094e4:	42ab      	cmp	r3, r5
 80094e6:	dc26      	bgt.n	8009536 <_printf_common+0x96>
 80094e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80094ec:	1e13      	subs	r3, r2, #0
 80094ee:	6822      	ldr	r2, [r4, #0]
 80094f0:	bf18      	it	ne
 80094f2:	2301      	movne	r3, #1
 80094f4:	0692      	lsls	r2, r2, #26
 80094f6:	d42b      	bmi.n	8009550 <_printf_common+0xb0>
 80094f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80094fc:	4649      	mov	r1, r9
 80094fe:	4638      	mov	r0, r7
 8009500:	47c0      	blx	r8
 8009502:	3001      	adds	r0, #1
 8009504:	d01e      	beq.n	8009544 <_printf_common+0xa4>
 8009506:	6823      	ldr	r3, [r4, #0]
 8009508:	68e5      	ldr	r5, [r4, #12]
 800950a:	6832      	ldr	r2, [r6, #0]
 800950c:	f003 0306 	and.w	r3, r3, #6
 8009510:	2b04      	cmp	r3, #4
 8009512:	bf08      	it	eq
 8009514:	1aad      	subeq	r5, r5, r2
 8009516:	68a3      	ldr	r3, [r4, #8]
 8009518:	6922      	ldr	r2, [r4, #16]
 800951a:	bf0c      	ite	eq
 800951c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009520:	2500      	movne	r5, #0
 8009522:	4293      	cmp	r3, r2
 8009524:	bfc4      	itt	gt
 8009526:	1a9b      	subgt	r3, r3, r2
 8009528:	18ed      	addgt	r5, r5, r3
 800952a:	2600      	movs	r6, #0
 800952c:	341a      	adds	r4, #26
 800952e:	42b5      	cmp	r5, r6
 8009530:	d11a      	bne.n	8009568 <_printf_common+0xc8>
 8009532:	2000      	movs	r0, #0
 8009534:	e008      	b.n	8009548 <_printf_common+0xa8>
 8009536:	2301      	movs	r3, #1
 8009538:	4652      	mov	r2, sl
 800953a:	4649      	mov	r1, r9
 800953c:	4638      	mov	r0, r7
 800953e:	47c0      	blx	r8
 8009540:	3001      	adds	r0, #1
 8009542:	d103      	bne.n	800954c <_printf_common+0xac>
 8009544:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800954c:	3501      	adds	r5, #1
 800954e:	e7c6      	b.n	80094de <_printf_common+0x3e>
 8009550:	18e1      	adds	r1, r4, r3
 8009552:	1c5a      	adds	r2, r3, #1
 8009554:	2030      	movs	r0, #48	; 0x30
 8009556:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800955a:	4422      	add	r2, r4
 800955c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009560:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009564:	3302      	adds	r3, #2
 8009566:	e7c7      	b.n	80094f8 <_printf_common+0x58>
 8009568:	2301      	movs	r3, #1
 800956a:	4622      	mov	r2, r4
 800956c:	4649      	mov	r1, r9
 800956e:	4638      	mov	r0, r7
 8009570:	47c0      	blx	r8
 8009572:	3001      	adds	r0, #1
 8009574:	d0e6      	beq.n	8009544 <_printf_common+0xa4>
 8009576:	3601      	adds	r6, #1
 8009578:	e7d9      	b.n	800952e <_printf_common+0x8e>
	...

0800957c <_printf_i>:
 800957c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009580:	7e0f      	ldrb	r7, [r1, #24]
 8009582:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009584:	2f78      	cmp	r7, #120	; 0x78
 8009586:	4691      	mov	r9, r2
 8009588:	4680      	mov	r8, r0
 800958a:	460c      	mov	r4, r1
 800958c:	469a      	mov	sl, r3
 800958e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009592:	d807      	bhi.n	80095a4 <_printf_i+0x28>
 8009594:	2f62      	cmp	r7, #98	; 0x62
 8009596:	d80a      	bhi.n	80095ae <_printf_i+0x32>
 8009598:	2f00      	cmp	r7, #0
 800959a:	f000 80d8 	beq.w	800974e <_printf_i+0x1d2>
 800959e:	2f58      	cmp	r7, #88	; 0x58
 80095a0:	f000 80a3 	beq.w	80096ea <_printf_i+0x16e>
 80095a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80095a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80095ac:	e03a      	b.n	8009624 <_printf_i+0xa8>
 80095ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80095b2:	2b15      	cmp	r3, #21
 80095b4:	d8f6      	bhi.n	80095a4 <_printf_i+0x28>
 80095b6:	a101      	add	r1, pc, #4	; (adr r1, 80095bc <_printf_i+0x40>)
 80095b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80095bc:	08009615 	.word	0x08009615
 80095c0:	08009629 	.word	0x08009629
 80095c4:	080095a5 	.word	0x080095a5
 80095c8:	080095a5 	.word	0x080095a5
 80095cc:	080095a5 	.word	0x080095a5
 80095d0:	080095a5 	.word	0x080095a5
 80095d4:	08009629 	.word	0x08009629
 80095d8:	080095a5 	.word	0x080095a5
 80095dc:	080095a5 	.word	0x080095a5
 80095e0:	080095a5 	.word	0x080095a5
 80095e4:	080095a5 	.word	0x080095a5
 80095e8:	08009735 	.word	0x08009735
 80095ec:	08009659 	.word	0x08009659
 80095f0:	08009717 	.word	0x08009717
 80095f4:	080095a5 	.word	0x080095a5
 80095f8:	080095a5 	.word	0x080095a5
 80095fc:	08009757 	.word	0x08009757
 8009600:	080095a5 	.word	0x080095a5
 8009604:	08009659 	.word	0x08009659
 8009608:	080095a5 	.word	0x080095a5
 800960c:	080095a5 	.word	0x080095a5
 8009610:	0800971f 	.word	0x0800971f
 8009614:	682b      	ldr	r3, [r5, #0]
 8009616:	1d1a      	adds	r2, r3, #4
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	602a      	str	r2, [r5, #0]
 800961c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009620:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009624:	2301      	movs	r3, #1
 8009626:	e0a3      	b.n	8009770 <_printf_i+0x1f4>
 8009628:	6820      	ldr	r0, [r4, #0]
 800962a:	6829      	ldr	r1, [r5, #0]
 800962c:	0606      	lsls	r6, r0, #24
 800962e:	f101 0304 	add.w	r3, r1, #4
 8009632:	d50a      	bpl.n	800964a <_printf_i+0xce>
 8009634:	680e      	ldr	r6, [r1, #0]
 8009636:	602b      	str	r3, [r5, #0]
 8009638:	2e00      	cmp	r6, #0
 800963a:	da03      	bge.n	8009644 <_printf_i+0xc8>
 800963c:	232d      	movs	r3, #45	; 0x2d
 800963e:	4276      	negs	r6, r6
 8009640:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009644:	485e      	ldr	r0, [pc, #376]	; (80097c0 <_printf_i+0x244>)
 8009646:	230a      	movs	r3, #10
 8009648:	e019      	b.n	800967e <_printf_i+0x102>
 800964a:	680e      	ldr	r6, [r1, #0]
 800964c:	602b      	str	r3, [r5, #0]
 800964e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009652:	bf18      	it	ne
 8009654:	b236      	sxthne	r6, r6
 8009656:	e7ef      	b.n	8009638 <_printf_i+0xbc>
 8009658:	682b      	ldr	r3, [r5, #0]
 800965a:	6820      	ldr	r0, [r4, #0]
 800965c:	1d19      	adds	r1, r3, #4
 800965e:	6029      	str	r1, [r5, #0]
 8009660:	0601      	lsls	r1, r0, #24
 8009662:	d501      	bpl.n	8009668 <_printf_i+0xec>
 8009664:	681e      	ldr	r6, [r3, #0]
 8009666:	e002      	b.n	800966e <_printf_i+0xf2>
 8009668:	0646      	lsls	r6, r0, #25
 800966a:	d5fb      	bpl.n	8009664 <_printf_i+0xe8>
 800966c:	881e      	ldrh	r6, [r3, #0]
 800966e:	4854      	ldr	r0, [pc, #336]	; (80097c0 <_printf_i+0x244>)
 8009670:	2f6f      	cmp	r7, #111	; 0x6f
 8009672:	bf0c      	ite	eq
 8009674:	2308      	moveq	r3, #8
 8009676:	230a      	movne	r3, #10
 8009678:	2100      	movs	r1, #0
 800967a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800967e:	6865      	ldr	r5, [r4, #4]
 8009680:	60a5      	str	r5, [r4, #8]
 8009682:	2d00      	cmp	r5, #0
 8009684:	bfa2      	ittt	ge
 8009686:	6821      	ldrge	r1, [r4, #0]
 8009688:	f021 0104 	bicge.w	r1, r1, #4
 800968c:	6021      	strge	r1, [r4, #0]
 800968e:	b90e      	cbnz	r6, 8009694 <_printf_i+0x118>
 8009690:	2d00      	cmp	r5, #0
 8009692:	d04d      	beq.n	8009730 <_printf_i+0x1b4>
 8009694:	4615      	mov	r5, r2
 8009696:	fbb6 f1f3 	udiv	r1, r6, r3
 800969a:	fb03 6711 	mls	r7, r3, r1, r6
 800969e:	5dc7      	ldrb	r7, [r0, r7]
 80096a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80096a4:	4637      	mov	r7, r6
 80096a6:	42bb      	cmp	r3, r7
 80096a8:	460e      	mov	r6, r1
 80096aa:	d9f4      	bls.n	8009696 <_printf_i+0x11a>
 80096ac:	2b08      	cmp	r3, #8
 80096ae:	d10b      	bne.n	80096c8 <_printf_i+0x14c>
 80096b0:	6823      	ldr	r3, [r4, #0]
 80096b2:	07de      	lsls	r6, r3, #31
 80096b4:	d508      	bpl.n	80096c8 <_printf_i+0x14c>
 80096b6:	6923      	ldr	r3, [r4, #16]
 80096b8:	6861      	ldr	r1, [r4, #4]
 80096ba:	4299      	cmp	r1, r3
 80096bc:	bfde      	ittt	le
 80096be:	2330      	movle	r3, #48	; 0x30
 80096c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80096c4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80096c8:	1b52      	subs	r2, r2, r5
 80096ca:	6122      	str	r2, [r4, #16]
 80096cc:	f8cd a000 	str.w	sl, [sp]
 80096d0:	464b      	mov	r3, r9
 80096d2:	aa03      	add	r2, sp, #12
 80096d4:	4621      	mov	r1, r4
 80096d6:	4640      	mov	r0, r8
 80096d8:	f7ff fee2 	bl	80094a0 <_printf_common>
 80096dc:	3001      	adds	r0, #1
 80096de:	d14c      	bne.n	800977a <_printf_i+0x1fe>
 80096e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80096e4:	b004      	add	sp, #16
 80096e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096ea:	4835      	ldr	r0, [pc, #212]	; (80097c0 <_printf_i+0x244>)
 80096ec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80096f0:	6829      	ldr	r1, [r5, #0]
 80096f2:	6823      	ldr	r3, [r4, #0]
 80096f4:	f851 6b04 	ldr.w	r6, [r1], #4
 80096f8:	6029      	str	r1, [r5, #0]
 80096fa:	061d      	lsls	r5, r3, #24
 80096fc:	d514      	bpl.n	8009728 <_printf_i+0x1ac>
 80096fe:	07df      	lsls	r7, r3, #31
 8009700:	bf44      	itt	mi
 8009702:	f043 0320 	orrmi.w	r3, r3, #32
 8009706:	6023      	strmi	r3, [r4, #0]
 8009708:	b91e      	cbnz	r6, 8009712 <_printf_i+0x196>
 800970a:	6823      	ldr	r3, [r4, #0]
 800970c:	f023 0320 	bic.w	r3, r3, #32
 8009710:	6023      	str	r3, [r4, #0]
 8009712:	2310      	movs	r3, #16
 8009714:	e7b0      	b.n	8009678 <_printf_i+0xfc>
 8009716:	6823      	ldr	r3, [r4, #0]
 8009718:	f043 0320 	orr.w	r3, r3, #32
 800971c:	6023      	str	r3, [r4, #0]
 800971e:	2378      	movs	r3, #120	; 0x78
 8009720:	4828      	ldr	r0, [pc, #160]	; (80097c4 <_printf_i+0x248>)
 8009722:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009726:	e7e3      	b.n	80096f0 <_printf_i+0x174>
 8009728:	0659      	lsls	r1, r3, #25
 800972a:	bf48      	it	mi
 800972c:	b2b6      	uxthmi	r6, r6
 800972e:	e7e6      	b.n	80096fe <_printf_i+0x182>
 8009730:	4615      	mov	r5, r2
 8009732:	e7bb      	b.n	80096ac <_printf_i+0x130>
 8009734:	682b      	ldr	r3, [r5, #0]
 8009736:	6826      	ldr	r6, [r4, #0]
 8009738:	6961      	ldr	r1, [r4, #20]
 800973a:	1d18      	adds	r0, r3, #4
 800973c:	6028      	str	r0, [r5, #0]
 800973e:	0635      	lsls	r5, r6, #24
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	d501      	bpl.n	8009748 <_printf_i+0x1cc>
 8009744:	6019      	str	r1, [r3, #0]
 8009746:	e002      	b.n	800974e <_printf_i+0x1d2>
 8009748:	0670      	lsls	r0, r6, #25
 800974a:	d5fb      	bpl.n	8009744 <_printf_i+0x1c8>
 800974c:	8019      	strh	r1, [r3, #0]
 800974e:	2300      	movs	r3, #0
 8009750:	6123      	str	r3, [r4, #16]
 8009752:	4615      	mov	r5, r2
 8009754:	e7ba      	b.n	80096cc <_printf_i+0x150>
 8009756:	682b      	ldr	r3, [r5, #0]
 8009758:	1d1a      	adds	r2, r3, #4
 800975a:	602a      	str	r2, [r5, #0]
 800975c:	681d      	ldr	r5, [r3, #0]
 800975e:	6862      	ldr	r2, [r4, #4]
 8009760:	2100      	movs	r1, #0
 8009762:	4628      	mov	r0, r5
 8009764:	f7f6 fd44 	bl	80001f0 <memchr>
 8009768:	b108      	cbz	r0, 800976e <_printf_i+0x1f2>
 800976a:	1b40      	subs	r0, r0, r5
 800976c:	6060      	str	r0, [r4, #4]
 800976e:	6863      	ldr	r3, [r4, #4]
 8009770:	6123      	str	r3, [r4, #16]
 8009772:	2300      	movs	r3, #0
 8009774:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009778:	e7a8      	b.n	80096cc <_printf_i+0x150>
 800977a:	6923      	ldr	r3, [r4, #16]
 800977c:	462a      	mov	r2, r5
 800977e:	4649      	mov	r1, r9
 8009780:	4640      	mov	r0, r8
 8009782:	47d0      	blx	sl
 8009784:	3001      	adds	r0, #1
 8009786:	d0ab      	beq.n	80096e0 <_printf_i+0x164>
 8009788:	6823      	ldr	r3, [r4, #0]
 800978a:	079b      	lsls	r3, r3, #30
 800978c:	d413      	bmi.n	80097b6 <_printf_i+0x23a>
 800978e:	68e0      	ldr	r0, [r4, #12]
 8009790:	9b03      	ldr	r3, [sp, #12]
 8009792:	4298      	cmp	r0, r3
 8009794:	bfb8      	it	lt
 8009796:	4618      	movlt	r0, r3
 8009798:	e7a4      	b.n	80096e4 <_printf_i+0x168>
 800979a:	2301      	movs	r3, #1
 800979c:	4632      	mov	r2, r6
 800979e:	4649      	mov	r1, r9
 80097a0:	4640      	mov	r0, r8
 80097a2:	47d0      	blx	sl
 80097a4:	3001      	adds	r0, #1
 80097a6:	d09b      	beq.n	80096e0 <_printf_i+0x164>
 80097a8:	3501      	adds	r5, #1
 80097aa:	68e3      	ldr	r3, [r4, #12]
 80097ac:	9903      	ldr	r1, [sp, #12]
 80097ae:	1a5b      	subs	r3, r3, r1
 80097b0:	42ab      	cmp	r3, r5
 80097b2:	dcf2      	bgt.n	800979a <_printf_i+0x21e>
 80097b4:	e7eb      	b.n	800978e <_printf_i+0x212>
 80097b6:	2500      	movs	r5, #0
 80097b8:	f104 0619 	add.w	r6, r4, #25
 80097bc:	e7f5      	b.n	80097aa <_printf_i+0x22e>
 80097be:	bf00      	nop
 80097c0:	0800c9ca 	.word	0x0800c9ca
 80097c4:	0800c9db 	.word	0x0800c9db

080097c8 <_puts_r>:
 80097c8:	b570      	push	{r4, r5, r6, lr}
 80097ca:	460e      	mov	r6, r1
 80097cc:	4605      	mov	r5, r0
 80097ce:	b118      	cbz	r0, 80097d8 <_puts_r+0x10>
 80097d0:	6983      	ldr	r3, [r0, #24]
 80097d2:	b90b      	cbnz	r3, 80097d8 <_puts_r+0x10>
 80097d4:	f001 f8fc 	bl	800a9d0 <__sinit>
 80097d8:	69ab      	ldr	r3, [r5, #24]
 80097da:	68ac      	ldr	r4, [r5, #8]
 80097dc:	b913      	cbnz	r3, 80097e4 <_puts_r+0x1c>
 80097de:	4628      	mov	r0, r5
 80097e0:	f001 f8f6 	bl	800a9d0 <__sinit>
 80097e4:	4b2c      	ldr	r3, [pc, #176]	; (8009898 <_puts_r+0xd0>)
 80097e6:	429c      	cmp	r4, r3
 80097e8:	d120      	bne.n	800982c <_puts_r+0x64>
 80097ea:	686c      	ldr	r4, [r5, #4]
 80097ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80097ee:	07db      	lsls	r3, r3, #31
 80097f0:	d405      	bmi.n	80097fe <_puts_r+0x36>
 80097f2:	89a3      	ldrh	r3, [r4, #12]
 80097f4:	0598      	lsls	r0, r3, #22
 80097f6:	d402      	bmi.n	80097fe <_puts_r+0x36>
 80097f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097fa:	f001 f98c 	bl	800ab16 <__retarget_lock_acquire_recursive>
 80097fe:	89a3      	ldrh	r3, [r4, #12]
 8009800:	0719      	lsls	r1, r3, #28
 8009802:	d51d      	bpl.n	8009840 <_puts_r+0x78>
 8009804:	6923      	ldr	r3, [r4, #16]
 8009806:	b1db      	cbz	r3, 8009840 <_puts_r+0x78>
 8009808:	3e01      	subs	r6, #1
 800980a:	68a3      	ldr	r3, [r4, #8]
 800980c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009810:	3b01      	subs	r3, #1
 8009812:	60a3      	str	r3, [r4, #8]
 8009814:	bb39      	cbnz	r1, 8009866 <_puts_r+0x9e>
 8009816:	2b00      	cmp	r3, #0
 8009818:	da38      	bge.n	800988c <_puts_r+0xc4>
 800981a:	4622      	mov	r2, r4
 800981c:	210a      	movs	r1, #10
 800981e:	4628      	mov	r0, r5
 8009820:	f000 f882 	bl	8009928 <__swbuf_r>
 8009824:	3001      	adds	r0, #1
 8009826:	d011      	beq.n	800984c <_puts_r+0x84>
 8009828:	250a      	movs	r5, #10
 800982a:	e011      	b.n	8009850 <_puts_r+0x88>
 800982c:	4b1b      	ldr	r3, [pc, #108]	; (800989c <_puts_r+0xd4>)
 800982e:	429c      	cmp	r4, r3
 8009830:	d101      	bne.n	8009836 <_puts_r+0x6e>
 8009832:	68ac      	ldr	r4, [r5, #8]
 8009834:	e7da      	b.n	80097ec <_puts_r+0x24>
 8009836:	4b1a      	ldr	r3, [pc, #104]	; (80098a0 <_puts_r+0xd8>)
 8009838:	429c      	cmp	r4, r3
 800983a:	bf08      	it	eq
 800983c:	68ec      	ldreq	r4, [r5, #12]
 800983e:	e7d5      	b.n	80097ec <_puts_r+0x24>
 8009840:	4621      	mov	r1, r4
 8009842:	4628      	mov	r0, r5
 8009844:	f000 f8c2 	bl	80099cc <__swsetup_r>
 8009848:	2800      	cmp	r0, #0
 800984a:	d0dd      	beq.n	8009808 <_puts_r+0x40>
 800984c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8009850:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009852:	07da      	lsls	r2, r3, #31
 8009854:	d405      	bmi.n	8009862 <_puts_r+0x9a>
 8009856:	89a3      	ldrh	r3, [r4, #12]
 8009858:	059b      	lsls	r3, r3, #22
 800985a:	d402      	bmi.n	8009862 <_puts_r+0x9a>
 800985c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800985e:	f001 f95b 	bl	800ab18 <__retarget_lock_release_recursive>
 8009862:	4628      	mov	r0, r5
 8009864:	bd70      	pop	{r4, r5, r6, pc}
 8009866:	2b00      	cmp	r3, #0
 8009868:	da04      	bge.n	8009874 <_puts_r+0xac>
 800986a:	69a2      	ldr	r2, [r4, #24]
 800986c:	429a      	cmp	r2, r3
 800986e:	dc06      	bgt.n	800987e <_puts_r+0xb6>
 8009870:	290a      	cmp	r1, #10
 8009872:	d004      	beq.n	800987e <_puts_r+0xb6>
 8009874:	6823      	ldr	r3, [r4, #0]
 8009876:	1c5a      	adds	r2, r3, #1
 8009878:	6022      	str	r2, [r4, #0]
 800987a:	7019      	strb	r1, [r3, #0]
 800987c:	e7c5      	b.n	800980a <_puts_r+0x42>
 800987e:	4622      	mov	r2, r4
 8009880:	4628      	mov	r0, r5
 8009882:	f000 f851 	bl	8009928 <__swbuf_r>
 8009886:	3001      	adds	r0, #1
 8009888:	d1bf      	bne.n	800980a <_puts_r+0x42>
 800988a:	e7df      	b.n	800984c <_puts_r+0x84>
 800988c:	6823      	ldr	r3, [r4, #0]
 800988e:	250a      	movs	r5, #10
 8009890:	1c5a      	adds	r2, r3, #1
 8009892:	6022      	str	r2, [r4, #0]
 8009894:	701d      	strb	r5, [r3, #0]
 8009896:	e7db      	b.n	8009850 <_puts_r+0x88>
 8009898:	0800ca9c 	.word	0x0800ca9c
 800989c:	0800cabc 	.word	0x0800cabc
 80098a0:	0800ca7c 	.word	0x0800ca7c

080098a4 <puts>:
 80098a4:	4b02      	ldr	r3, [pc, #8]	; (80098b0 <puts+0xc>)
 80098a6:	4601      	mov	r1, r0
 80098a8:	6818      	ldr	r0, [r3, #0]
 80098aa:	f7ff bf8d 	b.w	80097c8 <_puts_r>
 80098ae:	bf00      	nop
 80098b0:	20000018 	.word	0x20000018

080098b4 <_vsniprintf_r>:
 80098b4:	b530      	push	{r4, r5, lr}
 80098b6:	4614      	mov	r4, r2
 80098b8:	2c00      	cmp	r4, #0
 80098ba:	b09b      	sub	sp, #108	; 0x6c
 80098bc:	4605      	mov	r5, r0
 80098be:	461a      	mov	r2, r3
 80098c0:	da05      	bge.n	80098ce <_vsniprintf_r+0x1a>
 80098c2:	238b      	movs	r3, #139	; 0x8b
 80098c4:	6003      	str	r3, [r0, #0]
 80098c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80098ca:	b01b      	add	sp, #108	; 0x6c
 80098cc:	bd30      	pop	{r4, r5, pc}
 80098ce:	f44f 7302 	mov.w	r3, #520	; 0x208
 80098d2:	f8ad 300c 	strh.w	r3, [sp, #12]
 80098d6:	bf14      	ite	ne
 80098d8:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80098dc:	4623      	moveq	r3, r4
 80098de:	9302      	str	r3, [sp, #8]
 80098e0:	9305      	str	r3, [sp, #20]
 80098e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80098e6:	9100      	str	r1, [sp, #0]
 80098e8:	9104      	str	r1, [sp, #16]
 80098ea:	f8ad 300e 	strh.w	r3, [sp, #14]
 80098ee:	4669      	mov	r1, sp
 80098f0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80098f2:	f001 fe55 	bl	800b5a0 <_svfiprintf_r>
 80098f6:	1c43      	adds	r3, r0, #1
 80098f8:	bfbc      	itt	lt
 80098fa:	238b      	movlt	r3, #139	; 0x8b
 80098fc:	602b      	strlt	r3, [r5, #0]
 80098fe:	2c00      	cmp	r4, #0
 8009900:	d0e3      	beq.n	80098ca <_vsniprintf_r+0x16>
 8009902:	9b00      	ldr	r3, [sp, #0]
 8009904:	2200      	movs	r2, #0
 8009906:	701a      	strb	r2, [r3, #0]
 8009908:	e7df      	b.n	80098ca <_vsniprintf_r+0x16>
	...

0800990c <vsniprintf>:
 800990c:	b507      	push	{r0, r1, r2, lr}
 800990e:	9300      	str	r3, [sp, #0]
 8009910:	4613      	mov	r3, r2
 8009912:	460a      	mov	r2, r1
 8009914:	4601      	mov	r1, r0
 8009916:	4803      	ldr	r0, [pc, #12]	; (8009924 <vsniprintf+0x18>)
 8009918:	6800      	ldr	r0, [r0, #0]
 800991a:	f7ff ffcb 	bl	80098b4 <_vsniprintf_r>
 800991e:	b003      	add	sp, #12
 8009920:	f85d fb04 	ldr.w	pc, [sp], #4
 8009924:	20000018 	.word	0x20000018

08009928 <__swbuf_r>:
 8009928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800992a:	460e      	mov	r6, r1
 800992c:	4614      	mov	r4, r2
 800992e:	4605      	mov	r5, r0
 8009930:	b118      	cbz	r0, 800993a <__swbuf_r+0x12>
 8009932:	6983      	ldr	r3, [r0, #24]
 8009934:	b90b      	cbnz	r3, 800993a <__swbuf_r+0x12>
 8009936:	f001 f84b 	bl	800a9d0 <__sinit>
 800993a:	4b21      	ldr	r3, [pc, #132]	; (80099c0 <__swbuf_r+0x98>)
 800993c:	429c      	cmp	r4, r3
 800993e:	d12b      	bne.n	8009998 <__swbuf_r+0x70>
 8009940:	686c      	ldr	r4, [r5, #4]
 8009942:	69a3      	ldr	r3, [r4, #24]
 8009944:	60a3      	str	r3, [r4, #8]
 8009946:	89a3      	ldrh	r3, [r4, #12]
 8009948:	071a      	lsls	r2, r3, #28
 800994a:	d52f      	bpl.n	80099ac <__swbuf_r+0x84>
 800994c:	6923      	ldr	r3, [r4, #16]
 800994e:	b36b      	cbz	r3, 80099ac <__swbuf_r+0x84>
 8009950:	6923      	ldr	r3, [r4, #16]
 8009952:	6820      	ldr	r0, [r4, #0]
 8009954:	1ac0      	subs	r0, r0, r3
 8009956:	6963      	ldr	r3, [r4, #20]
 8009958:	b2f6      	uxtb	r6, r6
 800995a:	4283      	cmp	r3, r0
 800995c:	4637      	mov	r7, r6
 800995e:	dc04      	bgt.n	800996a <__swbuf_r+0x42>
 8009960:	4621      	mov	r1, r4
 8009962:	4628      	mov	r0, r5
 8009964:	f000 ffa0 	bl	800a8a8 <_fflush_r>
 8009968:	bb30      	cbnz	r0, 80099b8 <__swbuf_r+0x90>
 800996a:	68a3      	ldr	r3, [r4, #8]
 800996c:	3b01      	subs	r3, #1
 800996e:	60a3      	str	r3, [r4, #8]
 8009970:	6823      	ldr	r3, [r4, #0]
 8009972:	1c5a      	adds	r2, r3, #1
 8009974:	6022      	str	r2, [r4, #0]
 8009976:	701e      	strb	r6, [r3, #0]
 8009978:	6963      	ldr	r3, [r4, #20]
 800997a:	3001      	adds	r0, #1
 800997c:	4283      	cmp	r3, r0
 800997e:	d004      	beq.n	800998a <__swbuf_r+0x62>
 8009980:	89a3      	ldrh	r3, [r4, #12]
 8009982:	07db      	lsls	r3, r3, #31
 8009984:	d506      	bpl.n	8009994 <__swbuf_r+0x6c>
 8009986:	2e0a      	cmp	r6, #10
 8009988:	d104      	bne.n	8009994 <__swbuf_r+0x6c>
 800998a:	4621      	mov	r1, r4
 800998c:	4628      	mov	r0, r5
 800998e:	f000 ff8b 	bl	800a8a8 <_fflush_r>
 8009992:	b988      	cbnz	r0, 80099b8 <__swbuf_r+0x90>
 8009994:	4638      	mov	r0, r7
 8009996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009998:	4b0a      	ldr	r3, [pc, #40]	; (80099c4 <__swbuf_r+0x9c>)
 800999a:	429c      	cmp	r4, r3
 800999c:	d101      	bne.n	80099a2 <__swbuf_r+0x7a>
 800999e:	68ac      	ldr	r4, [r5, #8]
 80099a0:	e7cf      	b.n	8009942 <__swbuf_r+0x1a>
 80099a2:	4b09      	ldr	r3, [pc, #36]	; (80099c8 <__swbuf_r+0xa0>)
 80099a4:	429c      	cmp	r4, r3
 80099a6:	bf08      	it	eq
 80099a8:	68ec      	ldreq	r4, [r5, #12]
 80099aa:	e7ca      	b.n	8009942 <__swbuf_r+0x1a>
 80099ac:	4621      	mov	r1, r4
 80099ae:	4628      	mov	r0, r5
 80099b0:	f000 f80c 	bl	80099cc <__swsetup_r>
 80099b4:	2800      	cmp	r0, #0
 80099b6:	d0cb      	beq.n	8009950 <__swbuf_r+0x28>
 80099b8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80099bc:	e7ea      	b.n	8009994 <__swbuf_r+0x6c>
 80099be:	bf00      	nop
 80099c0:	0800ca9c 	.word	0x0800ca9c
 80099c4:	0800cabc 	.word	0x0800cabc
 80099c8:	0800ca7c 	.word	0x0800ca7c

080099cc <__swsetup_r>:
 80099cc:	4b32      	ldr	r3, [pc, #200]	; (8009a98 <__swsetup_r+0xcc>)
 80099ce:	b570      	push	{r4, r5, r6, lr}
 80099d0:	681d      	ldr	r5, [r3, #0]
 80099d2:	4606      	mov	r6, r0
 80099d4:	460c      	mov	r4, r1
 80099d6:	b125      	cbz	r5, 80099e2 <__swsetup_r+0x16>
 80099d8:	69ab      	ldr	r3, [r5, #24]
 80099da:	b913      	cbnz	r3, 80099e2 <__swsetup_r+0x16>
 80099dc:	4628      	mov	r0, r5
 80099de:	f000 fff7 	bl	800a9d0 <__sinit>
 80099e2:	4b2e      	ldr	r3, [pc, #184]	; (8009a9c <__swsetup_r+0xd0>)
 80099e4:	429c      	cmp	r4, r3
 80099e6:	d10f      	bne.n	8009a08 <__swsetup_r+0x3c>
 80099e8:	686c      	ldr	r4, [r5, #4]
 80099ea:	89a3      	ldrh	r3, [r4, #12]
 80099ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80099f0:	0719      	lsls	r1, r3, #28
 80099f2:	d42c      	bmi.n	8009a4e <__swsetup_r+0x82>
 80099f4:	06dd      	lsls	r5, r3, #27
 80099f6:	d411      	bmi.n	8009a1c <__swsetup_r+0x50>
 80099f8:	2309      	movs	r3, #9
 80099fa:	6033      	str	r3, [r6, #0]
 80099fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009a00:	81a3      	strh	r3, [r4, #12]
 8009a02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a06:	e03e      	b.n	8009a86 <__swsetup_r+0xba>
 8009a08:	4b25      	ldr	r3, [pc, #148]	; (8009aa0 <__swsetup_r+0xd4>)
 8009a0a:	429c      	cmp	r4, r3
 8009a0c:	d101      	bne.n	8009a12 <__swsetup_r+0x46>
 8009a0e:	68ac      	ldr	r4, [r5, #8]
 8009a10:	e7eb      	b.n	80099ea <__swsetup_r+0x1e>
 8009a12:	4b24      	ldr	r3, [pc, #144]	; (8009aa4 <__swsetup_r+0xd8>)
 8009a14:	429c      	cmp	r4, r3
 8009a16:	bf08      	it	eq
 8009a18:	68ec      	ldreq	r4, [r5, #12]
 8009a1a:	e7e6      	b.n	80099ea <__swsetup_r+0x1e>
 8009a1c:	0758      	lsls	r0, r3, #29
 8009a1e:	d512      	bpl.n	8009a46 <__swsetup_r+0x7a>
 8009a20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a22:	b141      	cbz	r1, 8009a36 <__swsetup_r+0x6a>
 8009a24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a28:	4299      	cmp	r1, r3
 8009a2a:	d002      	beq.n	8009a32 <__swsetup_r+0x66>
 8009a2c:	4630      	mov	r0, r6
 8009a2e:	f001 fc7b 	bl	800b328 <_free_r>
 8009a32:	2300      	movs	r3, #0
 8009a34:	6363      	str	r3, [r4, #52]	; 0x34
 8009a36:	89a3      	ldrh	r3, [r4, #12]
 8009a38:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009a3c:	81a3      	strh	r3, [r4, #12]
 8009a3e:	2300      	movs	r3, #0
 8009a40:	6063      	str	r3, [r4, #4]
 8009a42:	6923      	ldr	r3, [r4, #16]
 8009a44:	6023      	str	r3, [r4, #0]
 8009a46:	89a3      	ldrh	r3, [r4, #12]
 8009a48:	f043 0308 	orr.w	r3, r3, #8
 8009a4c:	81a3      	strh	r3, [r4, #12]
 8009a4e:	6923      	ldr	r3, [r4, #16]
 8009a50:	b94b      	cbnz	r3, 8009a66 <__swsetup_r+0x9a>
 8009a52:	89a3      	ldrh	r3, [r4, #12]
 8009a54:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009a58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a5c:	d003      	beq.n	8009a66 <__swsetup_r+0x9a>
 8009a5e:	4621      	mov	r1, r4
 8009a60:	4630      	mov	r0, r6
 8009a62:	f001 f87f 	bl	800ab64 <__smakebuf_r>
 8009a66:	89a0      	ldrh	r0, [r4, #12]
 8009a68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a6c:	f010 0301 	ands.w	r3, r0, #1
 8009a70:	d00a      	beq.n	8009a88 <__swsetup_r+0xbc>
 8009a72:	2300      	movs	r3, #0
 8009a74:	60a3      	str	r3, [r4, #8]
 8009a76:	6963      	ldr	r3, [r4, #20]
 8009a78:	425b      	negs	r3, r3
 8009a7a:	61a3      	str	r3, [r4, #24]
 8009a7c:	6923      	ldr	r3, [r4, #16]
 8009a7e:	b943      	cbnz	r3, 8009a92 <__swsetup_r+0xc6>
 8009a80:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009a84:	d1ba      	bne.n	80099fc <__swsetup_r+0x30>
 8009a86:	bd70      	pop	{r4, r5, r6, pc}
 8009a88:	0781      	lsls	r1, r0, #30
 8009a8a:	bf58      	it	pl
 8009a8c:	6963      	ldrpl	r3, [r4, #20]
 8009a8e:	60a3      	str	r3, [r4, #8]
 8009a90:	e7f4      	b.n	8009a7c <__swsetup_r+0xb0>
 8009a92:	2000      	movs	r0, #0
 8009a94:	e7f7      	b.n	8009a86 <__swsetup_r+0xba>
 8009a96:	bf00      	nop
 8009a98:	20000018 	.word	0x20000018
 8009a9c:	0800ca9c 	.word	0x0800ca9c
 8009aa0:	0800cabc 	.word	0x0800cabc
 8009aa4:	0800ca7c 	.word	0x0800ca7c

08009aa8 <quorem>:
 8009aa8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aac:	6903      	ldr	r3, [r0, #16]
 8009aae:	690c      	ldr	r4, [r1, #16]
 8009ab0:	42a3      	cmp	r3, r4
 8009ab2:	4607      	mov	r7, r0
 8009ab4:	f2c0 8081 	blt.w	8009bba <quorem+0x112>
 8009ab8:	3c01      	subs	r4, #1
 8009aba:	f101 0814 	add.w	r8, r1, #20
 8009abe:	f100 0514 	add.w	r5, r0, #20
 8009ac2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009ac6:	9301      	str	r3, [sp, #4]
 8009ac8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009acc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009ad0:	3301      	adds	r3, #1
 8009ad2:	429a      	cmp	r2, r3
 8009ad4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009ad8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009adc:	fbb2 f6f3 	udiv	r6, r2, r3
 8009ae0:	d331      	bcc.n	8009b46 <quorem+0x9e>
 8009ae2:	f04f 0e00 	mov.w	lr, #0
 8009ae6:	4640      	mov	r0, r8
 8009ae8:	46ac      	mov	ip, r5
 8009aea:	46f2      	mov	sl, lr
 8009aec:	f850 2b04 	ldr.w	r2, [r0], #4
 8009af0:	b293      	uxth	r3, r2
 8009af2:	fb06 e303 	mla	r3, r6, r3, lr
 8009af6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009afa:	b29b      	uxth	r3, r3
 8009afc:	ebaa 0303 	sub.w	r3, sl, r3
 8009b00:	f8dc a000 	ldr.w	sl, [ip]
 8009b04:	0c12      	lsrs	r2, r2, #16
 8009b06:	fa13 f38a 	uxtah	r3, r3, sl
 8009b0a:	fb06 e202 	mla	r2, r6, r2, lr
 8009b0e:	9300      	str	r3, [sp, #0]
 8009b10:	9b00      	ldr	r3, [sp, #0]
 8009b12:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009b16:	b292      	uxth	r2, r2
 8009b18:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009b1c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009b20:	f8bd 3000 	ldrh.w	r3, [sp]
 8009b24:	4581      	cmp	r9, r0
 8009b26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009b2a:	f84c 3b04 	str.w	r3, [ip], #4
 8009b2e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009b32:	d2db      	bcs.n	8009aec <quorem+0x44>
 8009b34:	f855 300b 	ldr.w	r3, [r5, fp]
 8009b38:	b92b      	cbnz	r3, 8009b46 <quorem+0x9e>
 8009b3a:	9b01      	ldr	r3, [sp, #4]
 8009b3c:	3b04      	subs	r3, #4
 8009b3e:	429d      	cmp	r5, r3
 8009b40:	461a      	mov	r2, r3
 8009b42:	d32e      	bcc.n	8009ba2 <quorem+0xfa>
 8009b44:	613c      	str	r4, [r7, #16]
 8009b46:	4638      	mov	r0, r7
 8009b48:	f001 fad6 	bl	800b0f8 <__mcmp>
 8009b4c:	2800      	cmp	r0, #0
 8009b4e:	db24      	blt.n	8009b9a <quorem+0xf2>
 8009b50:	3601      	adds	r6, #1
 8009b52:	4628      	mov	r0, r5
 8009b54:	f04f 0c00 	mov.w	ip, #0
 8009b58:	f858 2b04 	ldr.w	r2, [r8], #4
 8009b5c:	f8d0 e000 	ldr.w	lr, [r0]
 8009b60:	b293      	uxth	r3, r2
 8009b62:	ebac 0303 	sub.w	r3, ip, r3
 8009b66:	0c12      	lsrs	r2, r2, #16
 8009b68:	fa13 f38e 	uxtah	r3, r3, lr
 8009b6c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009b70:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009b74:	b29b      	uxth	r3, r3
 8009b76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009b7a:	45c1      	cmp	r9, r8
 8009b7c:	f840 3b04 	str.w	r3, [r0], #4
 8009b80:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009b84:	d2e8      	bcs.n	8009b58 <quorem+0xb0>
 8009b86:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009b8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009b8e:	b922      	cbnz	r2, 8009b9a <quorem+0xf2>
 8009b90:	3b04      	subs	r3, #4
 8009b92:	429d      	cmp	r5, r3
 8009b94:	461a      	mov	r2, r3
 8009b96:	d30a      	bcc.n	8009bae <quorem+0x106>
 8009b98:	613c      	str	r4, [r7, #16]
 8009b9a:	4630      	mov	r0, r6
 8009b9c:	b003      	add	sp, #12
 8009b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ba2:	6812      	ldr	r2, [r2, #0]
 8009ba4:	3b04      	subs	r3, #4
 8009ba6:	2a00      	cmp	r2, #0
 8009ba8:	d1cc      	bne.n	8009b44 <quorem+0x9c>
 8009baa:	3c01      	subs	r4, #1
 8009bac:	e7c7      	b.n	8009b3e <quorem+0x96>
 8009bae:	6812      	ldr	r2, [r2, #0]
 8009bb0:	3b04      	subs	r3, #4
 8009bb2:	2a00      	cmp	r2, #0
 8009bb4:	d1f0      	bne.n	8009b98 <quorem+0xf0>
 8009bb6:	3c01      	subs	r4, #1
 8009bb8:	e7eb      	b.n	8009b92 <quorem+0xea>
 8009bba:	2000      	movs	r0, #0
 8009bbc:	e7ee      	b.n	8009b9c <quorem+0xf4>
	...

08009bc0 <_dtoa_r>:
 8009bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bc4:	ed2d 8b04 	vpush	{d8-d9}
 8009bc8:	ec57 6b10 	vmov	r6, r7, d0
 8009bcc:	b093      	sub	sp, #76	; 0x4c
 8009bce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009bd0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009bd4:	9106      	str	r1, [sp, #24]
 8009bd6:	ee10 aa10 	vmov	sl, s0
 8009bda:	4604      	mov	r4, r0
 8009bdc:	9209      	str	r2, [sp, #36]	; 0x24
 8009bde:	930c      	str	r3, [sp, #48]	; 0x30
 8009be0:	46bb      	mov	fp, r7
 8009be2:	b975      	cbnz	r5, 8009c02 <_dtoa_r+0x42>
 8009be4:	2010      	movs	r0, #16
 8009be6:	f000 fffd 	bl	800abe4 <malloc>
 8009bea:	4602      	mov	r2, r0
 8009bec:	6260      	str	r0, [r4, #36]	; 0x24
 8009bee:	b920      	cbnz	r0, 8009bfa <_dtoa_r+0x3a>
 8009bf0:	4ba7      	ldr	r3, [pc, #668]	; (8009e90 <_dtoa_r+0x2d0>)
 8009bf2:	21ea      	movs	r1, #234	; 0xea
 8009bf4:	48a7      	ldr	r0, [pc, #668]	; (8009e94 <_dtoa_r+0x2d4>)
 8009bf6:	f001 ff93 	bl	800bb20 <__assert_func>
 8009bfa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009bfe:	6005      	str	r5, [r0, #0]
 8009c00:	60c5      	str	r5, [r0, #12]
 8009c02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c04:	6819      	ldr	r1, [r3, #0]
 8009c06:	b151      	cbz	r1, 8009c1e <_dtoa_r+0x5e>
 8009c08:	685a      	ldr	r2, [r3, #4]
 8009c0a:	604a      	str	r2, [r1, #4]
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	4093      	lsls	r3, r2
 8009c10:	608b      	str	r3, [r1, #8]
 8009c12:	4620      	mov	r0, r4
 8009c14:	f001 f82e 	bl	800ac74 <_Bfree>
 8009c18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	601a      	str	r2, [r3, #0]
 8009c1e:	1e3b      	subs	r3, r7, #0
 8009c20:	bfaa      	itet	ge
 8009c22:	2300      	movge	r3, #0
 8009c24:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009c28:	f8c8 3000 	strge.w	r3, [r8]
 8009c2c:	4b9a      	ldr	r3, [pc, #616]	; (8009e98 <_dtoa_r+0x2d8>)
 8009c2e:	bfbc      	itt	lt
 8009c30:	2201      	movlt	r2, #1
 8009c32:	f8c8 2000 	strlt.w	r2, [r8]
 8009c36:	ea33 030b 	bics.w	r3, r3, fp
 8009c3a:	d11b      	bne.n	8009c74 <_dtoa_r+0xb4>
 8009c3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009c3e:	f242 730f 	movw	r3, #9999	; 0x270f
 8009c42:	6013      	str	r3, [r2, #0]
 8009c44:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009c48:	4333      	orrs	r3, r6
 8009c4a:	f000 8592 	beq.w	800a772 <_dtoa_r+0xbb2>
 8009c4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c50:	b963      	cbnz	r3, 8009c6c <_dtoa_r+0xac>
 8009c52:	4b92      	ldr	r3, [pc, #584]	; (8009e9c <_dtoa_r+0x2dc>)
 8009c54:	e022      	b.n	8009c9c <_dtoa_r+0xdc>
 8009c56:	4b92      	ldr	r3, [pc, #584]	; (8009ea0 <_dtoa_r+0x2e0>)
 8009c58:	9301      	str	r3, [sp, #4]
 8009c5a:	3308      	adds	r3, #8
 8009c5c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009c5e:	6013      	str	r3, [r2, #0]
 8009c60:	9801      	ldr	r0, [sp, #4]
 8009c62:	b013      	add	sp, #76	; 0x4c
 8009c64:	ecbd 8b04 	vpop	{d8-d9}
 8009c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c6c:	4b8b      	ldr	r3, [pc, #556]	; (8009e9c <_dtoa_r+0x2dc>)
 8009c6e:	9301      	str	r3, [sp, #4]
 8009c70:	3303      	adds	r3, #3
 8009c72:	e7f3      	b.n	8009c5c <_dtoa_r+0x9c>
 8009c74:	2200      	movs	r2, #0
 8009c76:	2300      	movs	r3, #0
 8009c78:	4650      	mov	r0, sl
 8009c7a:	4659      	mov	r1, fp
 8009c7c:	f7f6 ff2c 	bl	8000ad8 <__aeabi_dcmpeq>
 8009c80:	ec4b ab19 	vmov	d9, sl, fp
 8009c84:	4680      	mov	r8, r0
 8009c86:	b158      	cbz	r0, 8009ca0 <_dtoa_r+0xe0>
 8009c88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	6013      	str	r3, [r2, #0]
 8009c8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	f000 856b 	beq.w	800a76c <_dtoa_r+0xbac>
 8009c96:	4883      	ldr	r0, [pc, #524]	; (8009ea4 <_dtoa_r+0x2e4>)
 8009c98:	6018      	str	r0, [r3, #0]
 8009c9a:	1e43      	subs	r3, r0, #1
 8009c9c:	9301      	str	r3, [sp, #4]
 8009c9e:	e7df      	b.n	8009c60 <_dtoa_r+0xa0>
 8009ca0:	ec4b ab10 	vmov	d0, sl, fp
 8009ca4:	aa10      	add	r2, sp, #64	; 0x40
 8009ca6:	a911      	add	r1, sp, #68	; 0x44
 8009ca8:	4620      	mov	r0, r4
 8009caa:	f001 facb 	bl	800b244 <__d2b>
 8009cae:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009cb2:	ee08 0a10 	vmov	s16, r0
 8009cb6:	2d00      	cmp	r5, #0
 8009cb8:	f000 8084 	beq.w	8009dc4 <_dtoa_r+0x204>
 8009cbc:	ee19 3a90 	vmov	r3, s19
 8009cc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009cc4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009cc8:	4656      	mov	r6, sl
 8009cca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009cce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009cd2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009cd6:	4b74      	ldr	r3, [pc, #464]	; (8009ea8 <_dtoa_r+0x2e8>)
 8009cd8:	2200      	movs	r2, #0
 8009cda:	4630      	mov	r0, r6
 8009cdc:	4639      	mov	r1, r7
 8009cde:	f7f6 fadb 	bl	8000298 <__aeabi_dsub>
 8009ce2:	a365      	add	r3, pc, #404	; (adr r3, 8009e78 <_dtoa_r+0x2b8>)
 8009ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ce8:	f7f6 fc8e 	bl	8000608 <__aeabi_dmul>
 8009cec:	a364      	add	r3, pc, #400	; (adr r3, 8009e80 <_dtoa_r+0x2c0>)
 8009cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf2:	f7f6 fad3 	bl	800029c <__adddf3>
 8009cf6:	4606      	mov	r6, r0
 8009cf8:	4628      	mov	r0, r5
 8009cfa:	460f      	mov	r7, r1
 8009cfc:	f7f6 fc1a 	bl	8000534 <__aeabi_i2d>
 8009d00:	a361      	add	r3, pc, #388	; (adr r3, 8009e88 <_dtoa_r+0x2c8>)
 8009d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d06:	f7f6 fc7f 	bl	8000608 <__aeabi_dmul>
 8009d0a:	4602      	mov	r2, r0
 8009d0c:	460b      	mov	r3, r1
 8009d0e:	4630      	mov	r0, r6
 8009d10:	4639      	mov	r1, r7
 8009d12:	f7f6 fac3 	bl	800029c <__adddf3>
 8009d16:	4606      	mov	r6, r0
 8009d18:	460f      	mov	r7, r1
 8009d1a:	f7f6 ff25 	bl	8000b68 <__aeabi_d2iz>
 8009d1e:	2200      	movs	r2, #0
 8009d20:	9000      	str	r0, [sp, #0]
 8009d22:	2300      	movs	r3, #0
 8009d24:	4630      	mov	r0, r6
 8009d26:	4639      	mov	r1, r7
 8009d28:	f7f6 fee0 	bl	8000aec <__aeabi_dcmplt>
 8009d2c:	b150      	cbz	r0, 8009d44 <_dtoa_r+0x184>
 8009d2e:	9800      	ldr	r0, [sp, #0]
 8009d30:	f7f6 fc00 	bl	8000534 <__aeabi_i2d>
 8009d34:	4632      	mov	r2, r6
 8009d36:	463b      	mov	r3, r7
 8009d38:	f7f6 fece 	bl	8000ad8 <__aeabi_dcmpeq>
 8009d3c:	b910      	cbnz	r0, 8009d44 <_dtoa_r+0x184>
 8009d3e:	9b00      	ldr	r3, [sp, #0]
 8009d40:	3b01      	subs	r3, #1
 8009d42:	9300      	str	r3, [sp, #0]
 8009d44:	9b00      	ldr	r3, [sp, #0]
 8009d46:	2b16      	cmp	r3, #22
 8009d48:	d85a      	bhi.n	8009e00 <_dtoa_r+0x240>
 8009d4a:	9a00      	ldr	r2, [sp, #0]
 8009d4c:	4b57      	ldr	r3, [pc, #348]	; (8009eac <_dtoa_r+0x2ec>)
 8009d4e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d56:	ec51 0b19 	vmov	r0, r1, d9
 8009d5a:	f7f6 fec7 	bl	8000aec <__aeabi_dcmplt>
 8009d5e:	2800      	cmp	r0, #0
 8009d60:	d050      	beq.n	8009e04 <_dtoa_r+0x244>
 8009d62:	9b00      	ldr	r3, [sp, #0]
 8009d64:	3b01      	subs	r3, #1
 8009d66:	9300      	str	r3, [sp, #0]
 8009d68:	2300      	movs	r3, #0
 8009d6a:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009d6e:	1b5d      	subs	r5, r3, r5
 8009d70:	1e6b      	subs	r3, r5, #1
 8009d72:	9305      	str	r3, [sp, #20]
 8009d74:	bf45      	ittet	mi
 8009d76:	f1c5 0301 	rsbmi	r3, r5, #1
 8009d7a:	9304      	strmi	r3, [sp, #16]
 8009d7c:	2300      	movpl	r3, #0
 8009d7e:	2300      	movmi	r3, #0
 8009d80:	bf4c      	ite	mi
 8009d82:	9305      	strmi	r3, [sp, #20]
 8009d84:	9304      	strpl	r3, [sp, #16]
 8009d86:	9b00      	ldr	r3, [sp, #0]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	db3d      	blt.n	8009e08 <_dtoa_r+0x248>
 8009d8c:	9b05      	ldr	r3, [sp, #20]
 8009d8e:	9a00      	ldr	r2, [sp, #0]
 8009d90:	920a      	str	r2, [sp, #40]	; 0x28
 8009d92:	4413      	add	r3, r2
 8009d94:	9305      	str	r3, [sp, #20]
 8009d96:	2300      	movs	r3, #0
 8009d98:	9307      	str	r3, [sp, #28]
 8009d9a:	9b06      	ldr	r3, [sp, #24]
 8009d9c:	2b09      	cmp	r3, #9
 8009d9e:	f200 8089 	bhi.w	8009eb4 <_dtoa_r+0x2f4>
 8009da2:	2b05      	cmp	r3, #5
 8009da4:	bfc4      	itt	gt
 8009da6:	3b04      	subgt	r3, #4
 8009da8:	9306      	strgt	r3, [sp, #24]
 8009daa:	9b06      	ldr	r3, [sp, #24]
 8009dac:	f1a3 0302 	sub.w	r3, r3, #2
 8009db0:	bfcc      	ite	gt
 8009db2:	2500      	movgt	r5, #0
 8009db4:	2501      	movle	r5, #1
 8009db6:	2b03      	cmp	r3, #3
 8009db8:	f200 8087 	bhi.w	8009eca <_dtoa_r+0x30a>
 8009dbc:	e8df f003 	tbb	[pc, r3]
 8009dc0:	59383a2d 	.word	0x59383a2d
 8009dc4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009dc8:	441d      	add	r5, r3
 8009dca:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009dce:	2b20      	cmp	r3, #32
 8009dd0:	bfc1      	itttt	gt
 8009dd2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009dd6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009dda:	fa0b f303 	lslgt.w	r3, fp, r3
 8009dde:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009de2:	bfda      	itte	le
 8009de4:	f1c3 0320 	rsble	r3, r3, #32
 8009de8:	fa06 f003 	lslle.w	r0, r6, r3
 8009dec:	4318      	orrgt	r0, r3
 8009dee:	f7f6 fb91 	bl	8000514 <__aeabi_ui2d>
 8009df2:	2301      	movs	r3, #1
 8009df4:	4606      	mov	r6, r0
 8009df6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009dfa:	3d01      	subs	r5, #1
 8009dfc:	930e      	str	r3, [sp, #56]	; 0x38
 8009dfe:	e76a      	b.n	8009cd6 <_dtoa_r+0x116>
 8009e00:	2301      	movs	r3, #1
 8009e02:	e7b2      	b.n	8009d6a <_dtoa_r+0x1aa>
 8009e04:	900b      	str	r0, [sp, #44]	; 0x2c
 8009e06:	e7b1      	b.n	8009d6c <_dtoa_r+0x1ac>
 8009e08:	9b04      	ldr	r3, [sp, #16]
 8009e0a:	9a00      	ldr	r2, [sp, #0]
 8009e0c:	1a9b      	subs	r3, r3, r2
 8009e0e:	9304      	str	r3, [sp, #16]
 8009e10:	4253      	negs	r3, r2
 8009e12:	9307      	str	r3, [sp, #28]
 8009e14:	2300      	movs	r3, #0
 8009e16:	930a      	str	r3, [sp, #40]	; 0x28
 8009e18:	e7bf      	b.n	8009d9a <_dtoa_r+0x1da>
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	9308      	str	r3, [sp, #32]
 8009e1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	dc55      	bgt.n	8009ed0 <_dtoa_r+0x310>
 8009e24:	2301      	movs	r3, #1
 8009e26:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009e2a:	461a      	mov	r2, r3
 8009e2c:	9209      	str	r2, [sp, #36]	; 0x24
 8009e2e:	e00c      	b.n	8009e4a <_dtoa_r+0x28a>
 8009e30:	2301      	movs	r3, #1
 8009e32:	e7f3      	b.n	8009e1c <_dtoa_r+0x25c>
 8009e34:	2300      	movs	r3, #0
 8009e36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e38:	9308      	str	r3, [sp, #32]
 8009e3a:	9b00      	ldr	r3, [sp, #0]
 8009e3c:	4413      	add	r3, r2
 8009e3e:	9302      	str	r3, [sp, #8]
 8009e40:	3301      	adds	r3, #1
 8009e42:	2b01      	cmp	r3, #1
 8009e44:	9303      	str	r3, [sp, #12]
 8009e46:	bfb8      	it	lt
 8009e48:	2301      	movlt	r3, #1
 8009e4a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	6042      	str	r2, [r0, #4]
 8009e50:	2204      	movs	r2, #4
 8009e52:	f102 0614 	add.w	r6, r2, #20
 8009e56:	429e      	cmp	r6, r3
 8009e58:	6841      	ldr	r1, [r0, #4]
 8009e5a:	d93d      	bls.n	8009ed8 <_dtoa_r+0x318>
 8009e5c:	4620      	mov	r0, r4
 8009e5e:	f000 fec9 	bl	800abf4 <_Balloc>
 8009e62:	9001      	str	r0, [sp, #4]
 8009e64:	2800      	cmp	r0, #0
 8009e66:	d13b      	bne.n	8009ee0 <_dtoa_r+0x320>
 8009e68:	4b11      	ldr	r3, [pc, #68]	; (8009eb0 <_dtoa_r+0x2f0>)
 8009e6a:	4602      	mov	r2, r0
 8009e6c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009e70:	e6c0      	b.n	8009bf4 <_dtoa_r+0x34>
 8009e72:	2301      	movs	r3, #1
 8009e74:	e7df      	b.n	8009e36 <_dtoa_r+0x276>
 8009e76:	bf00      	nop
 8009e78:	636f4361 	.word	0x636f4361
 8009e7c:	3fd287a7 	.word	0x3fd287a7
 8009e80:	8b60c8b3 	.word	0x8b60c8b3
 8009e84:	3fc68a28 	.word	0x3fc68a28
 8009e88:	509f79fb 	.word	0x509f79fb
 8009e8c:	3fd34413 	.word	0x3fd34413
 8009e90:	0800c9f9 	.word	0x0800c9f9
 8009e94:	0800ca10 	.word	0x0800ca10
 8009e98:	7ff00000 	.word	0x7ff00000
 8009e9c:	0800c9f5 	.word	0x0800c9f5
 8009ea0:	0800c9ec 	.word	0x0800c9ec
 8009ea4:	0800c9c9 	.word	0x0800c9c9
 8009ea8:	3ff80000 	.word	0x3ff80000
 8009eac:	0800cb60 	.word	0x0800cb60
 8009eb0:	0800ca6b 	.word	0x0800ca6b
 8009eb4:	2501      	movs	r5, #1
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	9306      	str	r3, [sp, #24]
 8009eba:	9508      	str	r5, [sp, #32]
 8009ebc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009ec0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	2312      	movs	r3, #18
 8009ec8:	e7b0      	b.n	8009e2c <_dtoa_r+0x26c>
 8009eca:	2301      	movs	r3, #1
 8009ecc:	9308      	str	r3, [sp, #32]
 8009ece:	e7f5      	b.n	8009ebc <_dtoa_r+0x2fc>
 8009ed0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ed2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009ed6:	e7b8      	b.n	8009e4a <_dtoa_r+0x28a>
 8009ed8:	3101      	adds	r1, #1
 8009eda:	6041      	str	r1, [r0, #4]
 8009edc:	0052      	lsls	r2, r2, #1
 8009ede:	e7b8      	b.n	8009e52 <_dtoa_r+0x292>
 8009ee0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ee2:	9a01      	ldr	r2, [sp, #4]
 8009ee4:	601a      	str	r2, [r3, #0]
 8009ee6:	9b03      	ldr	r3, [sp, #12]
 8009ee8:	2b0e      	cmp	r3, #14
 8009eea:	f200 809d 	bhi.w	800a028 <_dtoa_r+0x468>
 8009eee:	2d00      	cmp	r5, #0
 8009ef0:	f000 809a 	beq.w	800a028 <_dtoa_r+0x468>
 8009ef4:	9b00      	ldr	r3, [sp, #0]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	dd32      	ble.n	8009f60 <_dtoa_r+0x3a0>
 8009efa:	4ab7      	ldr	r2, [pc, #732]	; (800a1d8 <_dtoa_r+0x618>)
 8009efc:	f003 030f 	and.w	r3, r3, #15
 8009f00:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009f04:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009f08:	9b00      	ldr	r3, [sp, #0]
 8009f0a:	05d8      	lsls	r0, r3, #23
 8009f0c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009f10:	d516      	bpl.n	8009f40 <_dtoa_r+0x380>
 8009f12:	4bb2      	ldr	r3, [pc, #712]	; (800a1dc <_dtoa_r+0x61c>)
 8009f14:	ec51 0b19 	vmov	r0, r1, d9
 8009f18:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009f1c:	f7f6 fc9e 	bl	800085c <__aeabi_ddiv>
 8009f20:	f007 070f 	and.w	r7, r7, #15
 8009f24:	4682      	mov	sl, r0
 8009f26:	468b      	mov	fp, r1
 8009f28:	2503      	movs	r5, #3
 8009f2a:	4eac      	ldr	r6, [pc, #688]	; (800a1dc <_dtoa_r+0x61c>)
 8009f2c:	b957      	cbnz	r7, 8009f44 <_dtoa_r+0x384>
 8009f2e:	4642      	mov	r2, r8
 8009f30:	464b      	mov	r3, r9
 8009f32:	4650      	mov	r0, sl
 8009f34:	4659      	mov	r1, fp
 8009f36:	f7f6 fc91 	bl	800085c <__aeabi_ddiv>
 8009f3a:	4682      	mov	sl, r0
 8009f3c:	468b      	mov	fp, r1
 8009f3e:	e028      	b.n	8009f92 <_dtoa_r+0x3d2>
 8009f40:	2502      	movs	r5, #2
 8009f42:	e7f2      	b.n	8009f2a <_dtoa_r+0x36a>
 8009f44:	07f9      	lsls	r1, r7, #31
 8009f46:	d508      	bpl.n	8009f5a <_dtoa_r+0x39a>
 8009f48:	4640      	mov	r0, r8
 8009f4a:	4649      	mov	r1, r9
 8009f4c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009f50:	f7f6 fb5a 	bl	8000608 <__aeabi_dmul>
 8009f54:	3501      	adds	r5, #1
 8009f56:	4680      	mov	r8, r0
 8009f58:	4689      	mov	r9, r1
 8009f5a:	107f      	asrs	r7, r7, #1
 8009f5c:	3608      	adds	r6, #8
 8009f5e:	e7e5      	b.n	8009f2c <_dtoa_r+0x36c>
 8009f60:	f000 809b 	beq.w	800a09a <_dtoa_r+0x4da>
 8009f64:	9b00      	ldr	r3, [sp, #0]
 8009f66:	4f9d      	ldr	r7, [pc, #628]	; (800a1dc <_dtoa_r+0x61c>)
 8009f68:	425e      	negs	r6, r3
 8009f6a:	4b9b      	ldr	r3, [pc, #620]	; (800a1d8 <_dtoa_r+0x618>)
 8009f6c:	f006 020f 	and.w	r2, r6, #15
 8009f70:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f78:	ec51 0b19 	vmov	r0, r1, d9
 8009f7c:	f7f6 fb44 	bl	8000608 <__aeabi_dmul>
 8009f80:	1136      	asrs	r6, r6, #4
 8009f82:	4682      	mov	sl, r0
 8009f84:	468b      	mov	fp, r1
 8009f86:	2300      	movs	r3, #0
 8009f88:	2502      	movs	r5, #2
 8009f8a:	2e00      	cmp	r6, #0
 8009f8c:	d17a      	bne.n	800a084 <_dtoa_r+0x4c4>
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d1d3      	bne.n	8009f3a <_dtoa_r+0x37a>
 8009f92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	f000 8082 	beq.w	800a09e <_dtoa_r+0x4de>
 8009f9a:	4b91      	ldr	r3, [pc, #580]	; (800a1e0 <_dtoa_r+0x620>)
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	4650      	mov	r0, sl
 8009fa0:	4659      	mov	r1, fp
 8009fa2:	f7f6 fda3 	bl	8000aec <__aeabi_dcmplt>
 8009fa6:	2800      	cmp	r0, #0
 8009fa8:	d079      	beq.n	800a09e <_dtoa_r+0x4de>
 8009faa:	9b03      	ldr	r3, [sp, #12]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d076      	beq.n	800a09e <_dtoa_r+0x4de>
 8009fb0:	9b02      	ldr	r3, [sp, #8]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	dd36      	ble.n	800a024 <_dtoa_r+0x464>
 8009fb6:	9b00      	ldr	r3, [sp, #0]
 8009fb8:	4650      	mov	r0, sl
 8009fba:	4659      	mov	r1, fp
 8009fbc:	1e5f      	subs	r7, r3, #1
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	4b88      	ldr	r3, [pc, #544]	; (800a1e4 <_dtoa_r+0x624>)
 8009fc2:	f7f6 fb21 	bl	8000608 <__aeabi_dmul>
 8009fc6:	9e02      	ldr	r6, [sp, #8]
 8009fc8:	4682      	mov	sl, r0
 8009fca:	468b      	mov	fp, r1
 8009fcc:	3501      	adds	r5, #1
 8009fce:	4628      	mov	r0, r5
 8009fd0:	f7f6 fab0 	bl	8000534 <__aeabi_i2d>
 8009fd4:	4652      	mov	r2, sl
 8009fd6:	465b      	mov	r3, fp
 8009fd8:	f7f6 fb16 	bl	8000608 <__aeabi_dmul>
 8009fdc:	4b82      	ldr	r3, [pc, #520]	; (800a1e8 <_dtoa_r+0x628>)
 8009fde:	2200      	movs	r2, #0
 8009fe0:	f7f6 f95c 	bl	800029c <__adddf3>
 8009fe4:	46d0      	mov	r8, sl
 8009fe6:	46d9      	mov	r9, fp
 8009fe8:	4682      	mov	sl, r0
 8009fea:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009fee:	2e00      	cmp	r6, #0
 8009ff0:	d158      	bne.n	800a0a4 <_dtoa_r+0x4e4>
 8009ff2:	4b7e      	ldr	r3, [pc, #504]	; (800a1ec <_dtoa_r+0x62c>)
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	4640      	mov	r0, r8
 8009ff8:	4649      	mov	r1, r9
 8009ffa:	f7f6 f94d 	bl	8000298 <__aeabi_dsub>
 8009ffe:	4652      	mov	r2, sl
 800a000:	465b      	mov	r3, fp
 800a002:	4680      	mov	r8, r0
 800a004:	4689      	mov	r9, r1
 800a006:	f7f6 fd8f 	bl	8000b28 <__aeabi_dcmpgt>
 800a00a:	2800      	cmp	r0, #0
 800a00c:	f040 8295 	bne.w	800a53a <_dtoa_r+0x97a>
 800a010:	4652      	mov	r2, sl
 800a012:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a016:	4640      	mov	r0, r8
 800a018:	4649      	mov	r1, r9
 800a01a:	f7f6 fd67 	bl	8000aec <__aeabi_dcmplt>
 800a01e:	2800      	cmp	r0, #0
 800a020:	f040 8289 	bne.w	800a536 <_dtoa_r+0x976>
 800a024:	ec5b ab19 	vmov	sl, fp, d9
 800a028:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	f2c0 8148 	blt.w	800a2c0 <_dtoa_r+0x700>
 800a030:	9a00      	ldr	r2, [sp, #0]
 800a032:	2a0e      	cmp	r2, #14
 800a034:	f300 8144 	bgt.w	800a2c0 <_dtoa_r+0x700>
 800a038:	4b67      	ldr	r3, [pc, #412]	; (800a1d8 <_dtoa_r+0x618>)
 800a03a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a03e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a042:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a044:	2b00      	cmp	r3, #0
 800a046:	f280 80d5 	bge.w	800a1f4 <_dtoa_r+0x634>
 800a04a:	9b03      	ldr	r3, [sp, #12]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	f300 80d1 	bgt.w	800a1f4 <_dtoa_r+0x634>
 800a052:	f040 826f 	bne.w	800a534 <_dtoa_r+0x974>
 800a056:	4b65      	ldr	r3, [pc, #404]	; (800a1ec <_dtoa_r+0x62c>)
 800a058:	2200      	movs	r2, #0
 800a05a:	4640      	mov	r0, r8
 800a05c:	4649      	mov	r1, r9
 800a05e:	f7f6 fad3 	bl	8000608 <__aeabi_dmul>
 800a062:	4652      	mov	r2, sl
 800a064:	465b      	mov	r3, fp
 800a066:	f7f6 fd55 	bl	8000b14 <__aeabi_dcmpge>
 800a06a:	9e03      	ldr	r6, [sp, #12]
 800a06c:	4637      	mov	r7, r6
 800a06e:	2800      	cmp	r0, #0
 800a070:	f040 8245 	bne.w	800a4fe <_dtoa_r+0x93e>
 800a074:	9d01      	ldr	r5, [sp, #4]
 800a076:	2331      	movs	r3, #49	; 0x31
 800a078:	f805 3b01 	strb.w	r3, [r5], #1
 800a07c:	9b00      	ldr	r3, [sp, #0]
 800a07e:	3301      	adds	r3, #1
 800a080:	9300      	str	r3, [sp, #0]
 800a082:	e240      	b.n	800a506 <_dtoa_r+0x946>
 800a084:	07f2      	lsls	r2, r6, #31
 800a086:	d505      	bpl.n	800a094 <_dtoa_r+0x4d4>
 800a088:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a08c:	f7f6 fabc 	bl	8000608 <__aeabi_dmul>
 800a090:	3501      	adds	r5, #1
 800a092:	2301      	movs	r3, #1
 800a094:	1076      	asrs	r6, r6, #1
 800a096:	3708      	adds	r7, #8
 800a098:	e777      	b.n	8009f8a <_dtoa_r+0x3ca>
 800a09a:	2502      	movs	r5, #2
 800a09c:	e779      	b.n	8009f92 <_dtoa_r+0x3d2>
 800a09e:	9f00      	ldr	r7, [sp, #0]
 800a0a0:	9e03      	ldr	r6, [sp, #12]
 800a0a2:	e794      	b.n	8009fce <_dtoa_r+0x40e>
 800a0a4:	9901      	ldr	r1, [sp, #4]
 800a0a6:	4b4c      	ldr	r3, [pc, #304]	; (800a1d8 <_dtoa_r+0x618>)
 800a0a8:	4431      	add	r1, r6
 800a0aa:	910d      	str	r1, [sp, #52]	; 0x34
 800a0ac:	9908      	ldr	r1, [sp, #32]
 800a0ae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a0b2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a0b6:	2900      	cmp	r1, #0
 800a0b8:	d043      	beq.n	800a142 <_dtoa_r+0x582>
 800a0ba:	494d      	ldr	r1, [pc, #308]	; (800a1f0 <_dtoa_r+0x630>)
 800a0bc:	2000      	movs	r0, #0
 800a0be:	f7f6 fbcd 	bl	800085c <__aeabi_ddiv>
 800a0c2:	4652      	mov	r2, sl
 800a0c4:	465b      	mov	r3, fp
 800a0c6:	f7f6 f8e7 	bl	8000298 <__aeabi_dsub>
 800a0ca:	9d01      	ldr	r5, [sp, #4]
 800a0cc:	4682      	mov	sl, r0
 800a0ce:	468b      	mov	fp, r1
 800a0d0:	4649      	mov	r1, r9
 800a0d2:	4640      	mov	r0, r8
 800a0d4:	f7f6 fd48 	bl	8000b68 <__aeabi_d2iz>
 800a0d8:	4606      	mov	r6, r0
 800a0da:	f7f6 fa2b 	bl	8000534 <__aeabi_i2d>
 800a0de:	4602      	mov	r2, r0
 800a0e0:	460b      	mov	r3, r1
 800a0e2:	4640      	mov	r0, r8
 800a0e4:	4649      	mov	r1, r9
 800a0e6:	f7f6 f8d7 	bl	8000298 <__aeabi_dsub>
 800a0ea:	3630      	adds	r6, #48	; 0x30
 800a0ec:	f805 6b01 	strb.w	r6, [r5], #1
 800a0f0:	4652      	mov	r2, sl
 800a0f2:	465b      	mov	r3, fp
 800a0f4:	4680      	mov	r8, r0
 800a0f6:	4689      	mov	r9, r1
 800a0f8:	f7f6 fcf8 	bl	8000aec <__aeabi_dcmplt>
 800a0fc:	2800      	cmp	r0, #0
 800a0fe:	d163      	bne.n	800a1c8 <_dtoa_r+0x608>
 800a100:	4642      	mov	r2, r8
 800a102:	464b      	mov	r3, r9
 800a104:	4936      	ldr	r1, [pc, #216]	; (800a1e0 <_dtoa_r+0x620>)
 800a106:	2000      	movs	r0, #0
 800a108:	f7f6 f8c6 	bl	8000298 <__aeabi_dsub>
 800a10c:	4652      	mov	r2, sl
 800a10e:	465b      	mov	r3, fp
 800a110:	f7f6 fcec 	bl	8000aec <__aeabi_dcmplt>
 800a114:	2800      	cmp	r0, #0
 800a116:	f040 80b5 	bne.w	800a284 <_dtoa_r+0x6c4>
 800a11a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a11c:	429d      	cmp	r5, r3
 800a11e:	d081      	beq.n	800a024 <_dtoa_r+0x464>
 800a120:	4b30      	ldr	r3, [pc, #192]	; (800a1e4 <_dtoa_r+0x624>)
 800a122:	2200      	movs	r2, #0
 800a124:	4650      	mov	r0, sl
 800a126:	4659      	mov	r1, fp
 800a128:	f7f6 fa6e 	bl	8000608 <__aeabi_dmul>
 800a12c:	4b2d      	ldr	r3, [pc, #180]	; (800a1e4 <_dtoa_r+0x624>)
 800a12e:	4682      	mov	sl, r0
 800a130:	468b      	mov	fp, r1
 800a132:	4640      	mov	r0, r8
 800a134:	4649      	mov	r1, r9
 800a136:	2200      	movs	r2, #0
 800a138:	f7f6 fa66 	bl	8000608 <__aeabi_dmul>
 800a13c:	4680      	mov	r8, r0
 800a13e:	4689      	mov	r9, r1
 800a140:	e7c6      	b.n	800a0d0 <_dtoa_r+0x510>
 800a142:	4650      	mov	r0, sl
 800a144:	4659      	mov	r1, fp
 800a146:	f7f6 fa5f 	bl	8000608 <__aeabi_dmul>
 800a14a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a14c:	9d01      	ldr	r5, [sp, #4]
 800a14e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a150:	4682      	mov	sl, r0
 800a152:	468b      	mov	fp, r1
 800a154:	4649      	mov	r1, r9
 800a156:	4640      	mov	r0, r8
 800a158:	f7f6 fd06 	bl	8000b68 <__aeabi_d2iz>
 800a15c:	4606      	mov	r6, r0
 800a15e:	f7f6 f9e9 	bl	8000534 <__aeabi_i2d>
 800a162:	3630      	adds	r6, #48	; 0x30
 800a164:	4602      	mov	r2, r0
 800a166:	460b      	mov	r3, r1
 800a168:	4640      	mov	r0, r8
 800a16a:	4649      	mov	r1, r9
 800a16c:	f7f6 f894 	bl	8000298 <__aeabi_dsub>
 800a170:	f805 6b01 	strb.w	r6, [r5], #1
 800a174:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a176:	429d      	cmp	r5, r3
 800a178:	4680      	mov	r8, r0
 800a17a:	4689      	mov	r9, r1
 800a17c:	f04f 0200 	mov.w	r2, #0
 800a180:	d124      	bne.n	800a1cc <_dtoa_r+0x60c>
 800a182:	4b1b      	ldr	r3, [pc, #108]	; (800a1f0 <_dtoa_r+0x630>)
 800a184:	4650      	mov	r0, sl
 800a186:	4659      	mov	r1, fp
 800a188:	f7f6 f888 	bl	800029c <__adddf3>
 800a18c:	4602      	mov	r2, r0
 800a18e:	460b      	mov	r3, r1
 800a190:	4640      	mov	r0, r8
 800a192:	4649      	mov	r1, r9
 800a194:	f7f6 fcc8 	bl	8000b28 <__aeabi_dcmpgt>
 800a198:	2800      	cmp	r0, #0
 800a19a:	d173      	bne.n	800a284 <_dtoa_r+0x6c4>
 800a19c:	4652      	mov	r2, sl
 800a19e:	465b      	mov	r3, fp
 800a1a0:	4913      	ldr	r1, [pc, #76]	; (800a1f0 <_dtoa_r+0x630>)
 800a1a2:	2000      	movs	r0, #0
 800a1a4:	f7f6 f878 	bl	8000298 <__aeabi_dsub>
 800a1a8:	4602      	mov	r2, r0
 800a1aa:	460b      	mov	r3, r1
 800a1ac:	4640      	mov	r0, r8
 800a1ae:	4649      	mov	r1, r9
 800a1b0:	f7f6 fc9c 	bl	8000aec <__aeabi_dcmplt>
 800a1b4:	2800      	cmp	r0, #0
 800a1b6:	f43f af35 	beq.w	800a024 <_dtoa_r+0x464>
 800a1ba:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a1bc:	1e6b      	subs	r3, r5, #1
 800a1be:	930f      	str	r3, [sp, #60]	; 0x3c
 800a1c0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a1c4:	2b30      	cmp	r3, #48	; 0x30
 800a1c6:	d0f8      	beq.n	800a1ba <_dtoa_r+0x5fa>
 800a1c8:	9700      	str	r7, [sp, #0]
 800a1ca:	e049      	b.n	800a260 <_dtoa_r+0x6a0>
 800a1cc:	4b05      	ldr	r3, [pc, #20]	; (800a1e4 <_dtoa_r+0x624>)
 800a1ce:	f7f6 fa1b 	bl	8000608 <__aeabi_dmul>
 800a1d2:	4680      	mov	r8, r0
 800a1d4:	4689      	mov	r9, r1
 800a1d6:	e7bd      	b.n	800a154 <_dtoa_r+0x594>
 800a1d8:	0800cb60 	.word	0x0800cb60
 800a1dc:	0800cb38 	.word	0x0800cb38
 800a1e0:	3ff00000 	.word	0x3ff00000
 800a1e4:	40240000 	.word	0x40240000
 800a1e8:	401c0000 	.word	0x401c0000
 800a1ec:	40140000 	.word	0x40140000
 800a1f0:	3fe00000 	.word	0x3fe00000
 800a1f4:	9d01      	ldr	r5, [sp, #4]
 800a1f6:	4656      	mov	r6, sl
 800a1f8:	465f      	mov	r7, fp
 800a1fa:	4642      	mov	r2, r8
 800a1fc:	464b      	mov	r3, r9
 800a1fe:	4630      	mov	r0, r6
 800a200:	4639      	mov	r1, r7
 800a202:	f7f6 fb2b 	bl	800085c <__aeabi_ddiv>
 800a206:	f7f6 fcaf 	bl	8000b68 <__aeabi_d2iz>
 800a20a:	4682      	mov	sl, r0
 800a20c:	f7f6 f992 	bl	8000534 <__aeabi_i2d>
 800a210:	4642      	mov	r2, r8
 800a212:	464b      	mov	r3, r9
 800a214:	f7f6 f9f8 	bl	8000608 <__aeabi_dmul>
 800a218:	4602      	mov	r2, r0
 800a21a:	460b      	mov	r3, r1
 800a21c:	4630      	mov	r0, r6
 800a21e:	4639      	mov	r1, r7
 800a220:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a224:	f7f6 f838 	bl	8000298 <__aeabi_dsub>
 800a228:	f805 6b01 	strb.w	r6, [r5], #1
 800a22c:	9e01      	ldr	r6, [sp, #4]
 800a22e:	9f03      	ldr	r7, [sp, #12]
 800a230:	1bae      	subs	r6, r5, r6
 800a232:	42b7      	cmp	r7, r6
 800a234:	4602      	mov	r2, r0
 800a236:	460b      	mov	r3, r1
 800a238:	d135      	bne.n	800a2a6 <_dtoa_r+0x6e6>
 800a23a:	f7f6 f82f 	bl	800029c <__adddf3>
 800a23e:	4642      	mov	r2, r8
 800a240:	464b      	mov	r3, r9
 800a242:	4606      	mov	r6, r0
 800a244:	460f      	mov	r7, r1
 800a246:	f7f6 fc6f 	bl	8000b28 <__aeabi_dcmpgt>
 800a24a:	b9d0      	cbnz	r0, 800a282 <_dtoa_r+0x6c2>
 800a24c:	4642      	mov	r2, r8
 800a24e:	464b      	mov	r3, r9
 800a250:	4630      	mov	r0, r6
 800a252:	4639      	mov	r1, r7
 800a254:	f7f6 fc40 	bl	8000ad8 <__aeabi_dcmpeq>
 800a258:	b110      	cbz	r0, 800a260 <_dtoa_r+0x6a0>
 800a25a:	f01a 0f01 	tst.w	sl, #1
 800a25e:	d110      	bne.n	800a282 <_dtoa_r+0x6c2>
 800a260:	4620      	mov	r0, r4
 800a262:	ee18 1a10 	vmov	r1, s16
 800a266:	f000 fd05 	bl	800ac74 <_Bfree>
 800a26a:	2300      	movs	r3, #0
 800a26c:	9800      	ldr	r0, [sp, #0]
 800a26e:	702b      	strb	r3, [r5, #0]
 800a270:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a272:	3001      	adds	r0, #1
 800a274:	6018      	str	r0, [r3, #0]
 800a276:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a278:	2b00      	cmp	r3, #0
 800a27a:	f43f acf1 	beq.w	8009c60 <_dtoa_r+0xa0>
 800a27e:	601d      	str	r5, [r3, #0]
 800a280:	e4ee      	b.n	8009c60 <_dtoa_r+0xa0>
 800a282:	9f00      	ldr	r7, [sp, #0]
 800a284:	462b      	mov	r3, r5
 800a286:	461d      	mov	r5, r3
 800a288:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a28c:	2a39      	cmp	r2, #57	; 0x39
 800a28e:	d106      	bne.n	800a29e <_dtoa_r+0x6de>
 800a290:	9a01      	ldr	r2, [sp, #4]
 800a292:	429a      	cmp	r2, r3
 800a294:	d1f7      	bne.n	800a286 <_dtoa_r+0x6c6>
 800a296:	9901      	ldr	r1, [sp, #4]
 800a298:	2230      	movs	r2, #48	; 0x30
 800a29a:	3701      	adds	r7, #1
 800a29c:	700a      	strb	r2, [r1, #0]
 800a29e:	781a      	ldrb	r2, [r3, #0]
 800a2a0:	3201      	adds	r2, #1
 800a2a2:	701a      	strb	r2, [r3, #0]
 800a2a4:	e790      	b.n	800a1c8 <_dtoa_r+0x608>
 800a2a6:	4ba6      	ldr	r3, [pc, #664]	; (800a540 <_dtoa_r+0x980>)
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	f7f6 f9ad 	bl	8000608 <__aeabi_dmul>
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	4606      	mov	r6, r0
 800a2b4:	460f      	mov	r7, r1
 800a2b6:	f7f6 fc0f 	bl	8000ad8 <__aeabi_dcmpeq>
 800a2ba:	2800      	cmp	r0, #0
 800a2bc:	d09d      	beq.n	800a1fa <_dtoa_r+0x63a>
 800a2be:	e7cf      	b.n	800a260 <_dtoa_r+0x6a0>
 800a2c0:	9a08      	ldr	r2, [sp, #32]
 800a2c2:	2a00      	cmp	r2, #0
 800a2c4:	f000 80d7 	beq.w	800a476 <_dtoa_r+0x8b6>
 800a2c8:	9a06      	ldr	r2, [sp, #24]
 800a2ca:	2a01      	cmp	r2, #1
 800a2cc:	f300 80ba 	bgt.w	800a444 <_dtoa_r+0x884>
 800a2d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a2d2:	2a00      	cmp	r2, #0
 800a2d4:	f000 80b2 	beq.w	800a43c <_dtoa_r+0x87c>
 800a2d8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a2dc:	9e07      	ldr	r6, [sp, #28]
 800a2de:	9d04      	ldr	r5, [sp, #16]
 800a2e0:	9a04      	ldr	r2, [sp, #16]
 800a2e2:	441a      	add	r2, r3
 800a2e4:	9204      	str	r2, [sp, #16]
 800a2e6:	9a05      	ldr	r2, [sp, #20]
 800a2e8:	2101      	movs	r1, #1
 800a2ea:	441a      	add	r2, r3
 800a2ec:	4620      	mov	r0, r4
 800a2ee:	9205      	str	r2, [sp, #20]
 800a2f0:	f000 fd78 	bl	800ade4 <__i2b>
 800a2f4:	4607      	mov	r7, r0
 800a2f6:	2d00      	cmp	r5, #0
 800a2f8:	dd0c      	ble.n	800a314 <_dtoa_r+0x754>
 800a2fa:	9b05      	ldr	r3, [sp, #20]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	dd09      	ble.n	800a314 <_dtoa_r+0x754>
 800a300:	42ab      	cmp	r3, r5
 800a302:	9a04      	ldr	r2, [sp, #16]
 800a304:	bfa8      	it	ge
 800a306:	462b      	movge	r3, r5
 800a308:	1ad2      	subs	r2, r2, r3
 800a30a:	9204      	str	r2, [sp, #16]
 800a30c:	9a05      	ldr	r2, [sp, #20]
 800a30e:	1aed      	subs	r5, r5, r3
 800a310:	1ad3      	subs	r3, r2, r3
 800a312:	9305      	str	r3, [sp, #20]
 800a314:	9b07      	ldr	r3, [sp, #28]
 800a316:	b31b      	cbz	r3, 800a360 <_dtoa_r+0x7a0>
 800a318:	9b08      	ldr	r3, [sp, #32]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	f000 80af 	beq.w	800a47e <_dtoa_r+0x8be>
 800a320:	2e00      	cmp	r6, #0
 800a322:	dd13      	ble.n	800a34c <_dtoa_r+0x78c>
 800a324:	4639      	mov	r1, r7
 800a326:	4632      	mov	r2, r6
 800a328:	4620      	mov	r0, r4
 800a32a:	f000 fe1b 	bl	800af64 <__pow5mult>
 800a32e:	ee18 2a10 	vmov	r2, s16
 800a332:	4601      	mov	r1, r0
 800a334:	4607      	mov	r7, r0
 800a336:	4620      	mov	r0, r4
 800a338:	f000 fd6a 	bl	800ae10 <__multiply>
 800a33c:	ee18 1a10 	vmov	r1, s16
 800a340:	4680      	mov	r8, r0
 800a342:	4620      	mov	r0, r4
 800a344:	f000 fc96 	bl	800ac74 <_Bfree>
 800a348:	ee08 8a10 	vmov	s16, r8
 800a34c:	9b07      	ldr	r3, [sp, #28]
 800a34e:	1b9a      	subs	r2, r3, r6
 800a350:	d006      	beq.n	800a360 <_dtoa_r+0x7a0>
 800a352:	ee18 1a10 	vmov	r1, s16
 800a356:	4620      	mov	r0, r4
 800a358:	f000 fe04 	bl	800af64 <__pow5mult>
 800a35c:	ee08 0a10 	vmov	s16, r0
 800a360:	2101      	movs	r1, #1
 800a362:	4620      	mov	r0, r4
 800a364:	f000 fd3e 	bl	800ade4 <__i2b>
 800a368:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	4606      	mov	r6, r0
 800a36e:	f340 8088 	ble.w	800a482 <_dtoa_r+0x8c2>
 800a372:	461a      	mov	r2, r3
 800a374:	4601      	mov	r1, r0
 800a376:	4620      	mov	r0, r4
 800a378:	f000 fdf4 	bl	800af64 <__pow5mult>
 800a37c:	9b06      	ldr	r3, [sp, #24]
 800a37e:	2b01      	cmp	r3, #1
 800a380:	4606      	mov	r6, r0
 800a382:	f340 8081 	ble.w	800a488 <_dtoa_r+0x8c8>
 800a386:	f04f 0800 	mov.w	r8, #0
 800a38a:	6933      	ldr	r3, [r6, #16]
 800a38c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a390:	6918      	ldr	r0, [r3, #16]
 800a392:	f000 fcd7 	bl	800ad44 <__hi0bits>
 800a396:	f1c0 0020 	rsb	r0, r0, #32
 800a39a:	9b05      	ldr	r3, [sp, #20]
 800a39c:	4418      	add	r0, r3
 800a39e:	f010 001f 	ands.w	r0, r0, #31
 800a3a2:	f000 8092 	beq.w	800a4ca <_dtoa_r+0x90a>
 800a3a6:	f1c0 0320 	rsb	r3, r0, #32
 800a3aa:	2b04      	cmp	r3, #4
 800a3ac:	f340 808a 	ble.w	800a4c4 <_dtoa_r+0x904>
 800a3b0:	f1c0 001c 	rsb	r0, r0, #28
 800a3b4:	9b04      	ldr	r3, [sp, #16]
 800a3b6:	4403      	add	r3, r0
 800a3b8:	9304      	str	r3, [sp, #16]
 800a3ba:	9b05      	ldr	r3, [sp, #20]
 800a3bc:	4403      	add	r3, r0
 800a3be:	4405      	add	r5, r0
 800a3c0:	9305      	str	r3, [sp, #20]
 800a3c2:	9b04      	ldr	r3, [sp, #16]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	dd07      	ble.n	800a3d8 <_dtoa_r+0x818>
 800a3c8:	ee18 1a10 	vmov	r1, s16
 800a3cc:	461a      	mov	r2, r3
 800a3ce:	4620      	mov	r0, r4
 800a3d0:	f000 fe22 	bl	800b018 <__lshift>
 800a3d4:	ee08 0a10 	vmov	s16, r0
 800a3d8:	9b05      	ldr	r3, [sp, #20]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	dd05      	ble.n	800a3ea <_dtoa_r+0x82a>
 800a3de:	4631      	mov	r1, r6
 800a3e0:	461a      	mov	r2, r3
 800a3e2:	4620      	mov	r0, r4
 800a3e4:	f000 fe18 	bl	800b018 <__lshift>
 800a3e8:	4606      	mov	r6, r0
 800a3ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d06e      	beq.n	800a4ce <_dtoa_r+0x90e>
 800a3f0:	ee18 0a10 	vmov	r0, s16
 800a3f4:	4631      	mov	r1, r6
 800a3f6:	f000 fe7f 	bl	800b0f8 <__mcmp>
 800a3fa:	2800      	cmp	r0, #0
 800a3fc:	da67      	bge.n	800a4ce <_dtoa_r+0x90e>
 800a3fe:	9b00      	ldr	r3, [sp, #0]
 800a400:	3b01      	subs	r3, #1
 800a402:	ee18 1a10 	vmov	r1, s16
 800a406:	9300      	str	r3, [sp, #0]
 800a408:	220a      	movs	r2, #10
 800a40a:	2300      	movs	r3, #0
 800a40c:	4620      	mov	r0, r4
 800a40e:	f000 fc53 	bl	800acb8 <__multadd>
 800a412:	9b08      	ldr	r3, [sp, #32]
 800a414:	ee08 0a10 	vmov	s16, r0
 800a418:	2b00      	cmp	r3, #0
 800a41a:	f000 81b1 	beq.w	800a780 <_dtoa_r+0xbc0>
 800a41e:	2300      	movs	r3, #0
 800a420:	4639      	mov	r1, r7
 800a422:	220a      	movs	r2, #10
 800a424:	4620      	mov	r0, r4
 800a426:	f000 fc47 	bl	800acb8 <__multadd>
 800a42a:	9b02      	ldr	r3, [sp, #8]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	4607      	mov	r7, r0
 800a430:	f300 808e 	bgt.w	800a550 <_dtoa_r+0x990>
 800a434:	9b06      	ldr	r3, [sp, #24]
 800a436:	2b02      	cmp	r3, #2
 800a438:	dc51      	bgt.n	800a4de <_dtoa_r+0x91e>
 800a43a:	e089      	b.n	800a550 <_dtoa_r+0x990>
 800a43c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a43e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a442:	e74b      	b.n	800a2dc <_dtoa_r+0x71c>
 800a444:	9b03      	ldr	r3, [sp, #12]
 800a446:	1e5e      	subs	r6, r3, #1
 800a448:	9b07      	ldr	r3, [sp, #28]
 800a44a:	42b3      	cmp	r3, r6
 800a44c:	bfbf      	itttt	lt
 800a44e:	9b07      	ldrlt	r3, [sp, #28]
 800a450:	9607      	strlt	r6, [sp, #28]
 800a452:	1af2      	sublt	r2, r6, r3
 800a454:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a456:	bfb6      	itet	lt
 800a458:	189b      	addlt	r3, r3, r2
 800a45a:	1b9e      	subge	r6, r3, r6
 800a45c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a45e:	9b03      	ldr	r3, [sp, #12]
 800a460:	bfb8      	it	lt
 800a462:	2600      	movlt	r6, #0
 800a464:	2b00      	cmp	r3, #0
 800a466:	bfb7      	itett	lt
 800a468:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a46c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a470:	1a9d      	sublt	r5, r3, r2
 800a472:	2300      	movlt	r3, #0
 800a474:	e734      	b.n	800a2e0 <_dtoa_r+0x720>
 800a476:	9e07      	ldr	r6, [sp, #28]
 800a478:	9d04      	ldr	r5, [sp, #16]
 800a47a:	9f08      	ldr	r7, [sp, #32]
 800a47c:	e73b      	b.n	800a2f6 <_dtoa_r+0x736>
 800a47e:	9a07      	ldr	r2, [sp, #28]
 800a480:	e767      	b.n	800a352 <_dtoa_r+0x792>
 800a482:	9b06      	ldr	r3, [sp, #24]
 800a484:	2b01      	cmp	r3, #1
 800a486:	dc18      	bgt.n	800a4ba <_dtoa_r+0x8fa>
 800a488:	f1ba 0f00 	cmp.w	sl, #0
 800a48c:	d115      	bne.n	800a4ba <_dtoa_r+0x8fa>
 800a48e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a492:	b993      	cbnz	r3, 800a4ba <_dtoa_r+0x8fa>
 800a494:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a498:	0d1b      	lsrs	r3, r3, #20
 800a49a:	051b      	lsls	r3, r3, #20
 800a49c:	b183      	cbz	r3, 800a4c0 <_dtoa_r+0x900>
 800a49e:	9b04      	ldr	r3, [sp, #16]
 800a4a0:	3301      	adds	r3, #1
 800a4a2:	9304      	str	r3, [sp, #16]
 800a4a4:	9b05      	ldr	r3, [sp, #20]
 800a4a6:	3301      	adds	r3, #1
 800a4a8:	9305      	str	r3, [sp, #20]
 800a4aa:	f04f 0801 	mov.w	r8, #1
 800a4ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	f47f af6a 	bne.w	800a38a <_dtoa_r+0x7ca>
 800a4b6:	2001      	movs	r0, #1
 800a4b8:	e76f      	b.n	800a39a <_dtoa_r+0x7da>
 800a4ba:	f04f 0800 	mov.w	r8, #0
 800a4be:	e7f6      	b.n	800a4ae <_dtoa_r+0x8ee>
 800a4c0:	4698      	mov	r8, r3
 800a4c2:	e7f4      	b.n	800a4ae <_dtoa_r+0x8ee>
 800a4c4:	f43f af7d 	beq.w	800a3c2 <_dtoa_r+0x802>
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	301c      	adds	r0, #28
 800a4cc:	e772      	b.n	800a3b4 <_dtoa_r+0x7f4>
 800a4ce:	9b03      	ldr	r3, [sp, #12]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	dc37      	bgt.n	800a544 <_dtoa_r+0x984>
 800a4d4:	9b06      	ldr	r3, [sp, #24]
 800a4d6:	2b02      	cmp	r3, #2
 800a4d8:	dd34      	ble.n	800a544 <_dtoa_r+0x984>
 800a4da:	9b03      	ldr	r3, [sp, #12]
 800a4dc:	9302      	str	r3, [sp, #8]
 800a4de:	9b02      	ldr	r3, [sp, #8]
 800a4e0:	b96b      	cbnz	r3, 800a4fe <_dtoa_r+0x93e>
 800a4e2:	4631      	mov	r1, r6
 800a4e4:	2205      	movs	r2, #5
 800a4e6:	4620      	mov	r0, r4
 800a4e8:	f000 fbe6 	bl	800acb8 <__multadd>
 800a4ec:	4601      	mov	r1, r0
 800a4ee:	4606      	mov	r6, r0
 800a4f0:	ee18 0a10 	vmov	r0, s16
 800a4f4:	f000 fe00 	bl	800b0f8 <__mcmp>
 800a4f8:	2800      	cmp	r0, #0
 800a4fa:	f73f adbb 	bgt.w	800a074 <_dtoa_r+0x4b4>
 800a4fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a500:	9d01      	ldr	r5, [sp, #4]
 800a502:	43db      	mvns	r3, r3
 800a504:	9300      	str	r3, [sp, #0]
 800a506:	f04f 0800 	mov.w	r8, #0
 800a50a:	4631      	mov	r1, r6
 800a50c:	4620      	mov	r0, r4
 800a50e:	f000 fbb1 	bl	800ac74 <_Bfree>
 800a512:	2f00      	cmp	r7, #0
 800a514:	f43f aea4 	beq.w	800a260 <_dtoa_r+0x6a0>
 800a518:	f1b8 0f00 	cmp.w	r8, #0
 800a51c:	d005      	beq.n	800a52a <_dtoa_r+0x96a>
 800a51e:	45b8      	cmp	r8, r7
 800a520:	d003      	beq.n	800a52a <_dtoa_r+0x96a>
 800a522:	4641      	mov	r1, r8
 800a524:	4620      	mov	r0, r4
 800a526:	f000 fba5 	bl	800ac74 <_Bfree>
 800a52a:	4639      	mov	r1, r7
 800a52c:	4620      	mov	r0, r4
 800a52e:	f000 fba1 	bl	800ac74 <_Bfree>
 800a532:	e695      	b.n	800a260 <_dtoa_r+0x6a0>
 800a534:	2600      	movs	r6, #0
 800a536:	4637      	mov	r7, r6
 800a538:	e7e1      	b.n	800a4fe <_dtoa_r+0x93e>
 800a53a:	9700      	str	r7, [sp, #0]
 800a53c:	4637      	mov	r7, r6
 800a53e:	e599      	b.n	800a074 <_dtoa_r+0x4b4>
 800a540:	40240000 	.word	0x40240000
 800a544:	9b08      	ldr	r3, [sp, #32]
 800a546:	2b00      	cmp	r3, #0
 800a548:	f000 80ca 	beq.w	800a6e0 <_dtoa_r+0xb20>
 800a54c:	9b03      	ldr	r3, [sp, #12]
 800a54e:	9302      	str	r3, [sp, #8]
 800a550:	2d00      	cmp	r5, #0
 800a552:	dd05      	ble.n	800a560 <_dtoa_r+0x9a0>
 800a554:	4639      	mov	r1, r7
 800a556:	462a      	mov	r2, r5
 800a558:	4620      	mov	r0, r4
 800a55a:	f000 fd5d 	bl	800b018 <__lshift>
 800a55e:	4607      	mov	r7, r0
 800a560:	f1b8 0f00 	cmp.w	r8, #0
 800a564:	d05b      	beq.n	800a61e <_dtoa_r+0xa5e>
 800a566:	6879      	ldr	r1, [r7, #4]
 800a568:	4620      	mov	r0, r4
 800a56a:	f000 fb43 	bl	800abf4 <_Balloc>
 800a56e:	4605      	mov	r5, r0
 800a570:	b928      	cbnz	r0, 800a57e <_dtoa_r+0x9be>
 800a572:	4b87      	ldr	r3, [pc, #540]	; (800a790 <_dtoa_r+0xbd0>)
 800a574:	4602      	mov	r2, r0
 800a576:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a57a:	f7ff bb3b 	b.w	8009bf4 <_dtoa_r+0x34>
 800a57e:	693a      	ldr	r2, [r7, #16]
 800a580:	3202      	adds	r2, #2
 800a582:	0092      	lsls	r2, r2, #2
 800a584:	f107 010c 	add.w	r1, r7, #12
 800a588:	300c      	adds	r0, #12
 800a58a:	f7fe fc9d 	bl	8008ec8 <memcpy>
 800a58e:	2201      	movs	r2, #1
 800a590:	4629      	mov	r1, r5
 800a592:	4620      	mov	r0, r4
 800a594:	f000 fd40 	bl	800b018 <__lshift>
 800a598:	9b01      	ldr	r3, [sp, #4]
 800a59a:	f103 0901 	add.w	r9, r3, #1
 800a59e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a5a2:	4413      	add	r3, r2
 800a5a4:	9305      	str	r3, [sp, #20]
 800a5a6:	f00a 0301 	and.w	r3, sl, #1
 800a5aa:	46b8      	mov	r8, r7
 800a5ac:	9304      	str	r3, [sp, #16]
 800a5ae:	4607      	mov	r7, r0
 800a5b0:	4631      	mov	r1, r6
 800a5b2:	ee18 0a10 	vmov	r0, s16
 800a5b6:	f7ff fa77 	bl	8009aa8 <quorem>
 800a5ba:	4641      	mov	r1, r8
 800a5bc:	9002      	str	r0, [sp, #8]
 800a5be:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a5c2:	ee18 0a10 	vmov	r0, s16
 800a5c6:	f000 fd97 	bl	800b0f8 <__mcmp>
 800a5ca:	463a      	mov	r2, r7
 800a5cc:	9003      	str	r0, [sp, #12]
 800a5ce:	4631      	mov	r1, r6
 800a5d0:	4620      	mov	r0, r4
 800a5d2:	f000 fdad 	bl	800b130 <__mdiff>
 800a5d6:	68c2      	ldr	r2, [r0, #12]
 800a5d8:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800a5dc:	4605      	mov	r5, r0
 800a5de:	bb02      	cbnz	r2, 800a622 <_dtoa_r+0xa62>
 800a5e0:	4601      	mov	r1, r0
 800a5e2:	ee18 0a10 	vmov	r0, s16
 800a5e6:	f000 fd87 	bl	800b0f8 <__mcmp>
 800a5ea:	4602      	mov	r2, r0
 800a5ec:	4629      	mov	r1, r5
 800a5ee:	4620      	mov	r0, r4
 800a5f0:	9207      	str	r2, [sp, #28]
 800a5f2:	f000 fb3f 	bl	800ac74 <_Bfree>
 800a5f6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a5fa:	ea43 0102 	orr.w	r1, r3, r2
 800a5fe:	9b04      	ldr	r3, [sp, #16]
 800a600:	430b      	orrs	r3, r1
 800a602:	464d      	mov	r5, r9
 800a604:	d10f      	bne.n	800a626 <_dtoa_r+0xa66>
 800a606:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a60a:	d02a      	beq.n	800a662 <_dtoa_r+0xaa2>
 800a60c:	9b03      	ldr	r3, [sp, #12]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	dd02      	ble.n	800a618 <_dtoa_r+0xa58>
 800a612:	9b02      	ldr	r3, [sp, #8]
 800a614:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a618:	f88b a000 	strb.w	sl, [fp]
 800a61c:	e775      	b.n	800a50a <_dtoa_r+0x94a>
 800a61e:	4638      	mov	r0, r7
 800a620:	e7ba      	b.n	800a598 <_dtoa_r+0x9d8>
 800a622:	2201      	movs	r2, #1
 800a624:	e7e2      	b.n	800a5ec <_dtoa_r+0xa2c>
 800a626:	9b03      	ldr	r3, [sp, #12]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	db04      	blt.n	800a636 <_dtoa_r+0xa76>
 800a62c:	9906      	ldr	r1, [sp, #24]
 800a62e:	430b      	orrs	r3, r1
 800a630:	9904      	ldr	r1, [sp, #16]
 800a632:	430b      	orrs	r3, r1
 800a634:	d122      	bne.n	800a67c <_dtoa_r+0xabc>
 800a636:	2a00      	cmp	r2, #0
 800a638:	ddee      	ble.n	800a618 <_dtoa_r+0xa58>
 800a63a:	ee18 1a10 	vmov	r1, s16
 800a63e:	2201      	movs	r2, #1
 800a640:	4620      	mov	r0, r4
 800a642:	f000 fce9 	bl	800b018 <__lshift>
 800a646:	4631      	mov	r1, r6
 800a648:	ee08 0a10 	vmov	s16, r0
 800a64c:	f000 fd54 	bl	800b0f8 <__mcmp>
 800a650:	2800      	cmp	r0, #0
 800a652:	dc03      	bgt.n	800a65c <_dtoa_r+0xa9c>
 800a654:	d1e0      	bne.n	800a618 <_dtoa_r+0xa58>
 800a656:	f01a 0f01 	tst.w	sl, #1
 800a65a:	d0dd      	beq.n	800a618 <_dtoa_r+0xa58>
 800a65c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a660:	d1d7      	bne.n	800a612 <_dtoa_r+0xa52>
 800a662:	2339      	movs	r3, #57	; 0x39
 800a664:	f88b 3000 	strb.w	r3, [fp]
 800a668:	462b      	mov	r3, r5
 800a66a:	461d      	mov	r5, r3
 800a66c:	3b01      	subs	r3, #1
 800a66e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a672:	2a39      	cmp	r2, #57	; 0x39
 800a674:	d071      	beq.n	800a75a <_dtoa_r+0xb9a>
 800a676:	3201      	adds	r2, #1
 800a678:	701a      	strb	r2, [r3, #0]
 800a67a:	e746      	b.n	800a50a <_dtoa_r+0x94a>
 800a67c:	2a00      	cmp	r2, #0
 800a67e:	dd07      	ble.n	800a690 <_dtoa_r+0xad0>
 800a680:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a684:	d0ed      	beq.n	800a662 <_dtoa_r+0xaa2>
 800a686:	f10a 0301 	add.w	r3, sl, #1
 800a68a:	f88b 3000 	strb.w	r3, [fp]
 800a68e:	e73c      	b.n	800a50a <_dtoa_r+0x94a>
 800a690:	9b05      	ldr	r3, [sp, #20]
 800a692:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a696:	4599      	cmp	r9, r3
 800a698:	d047      	beq.n	800a72a <_dtoa_r+0xb6a>
 800a69a:	ee18 1a10 	vmov	r1, s16
 800a69e:	2300      	movs	r3, #0
 800a6a0:	220a      	movs	r2, #10
 800a6a2:	4620      	mov	r0, r4
 800a6a4:	f000 fb08 	bl	800acb8 <__multadd>
 800a6a8:	45b8      	cmp	r8, r7
 800a6aa:	ee08 0a10 	vmov	s16, r0
 800a6ae:	f04f 0300 	mov.w	r3, #0
 800a6b2:	f04f 020a 	mov.w	r2, #10
 800a6b6:	4641      	mov	r1, r8
 800a6b8:	4620      	mov	r0, r4
 800a6ba:	d106      	bne.n	800a6ca <_dtoa_r+0xb0a>
 800a6bc:	f000 fafc 	bl	800acb8 <__multadd>
 800a6c0:	4680      	mov	r8, r0
 800a6c2:	4607      	mov	r7, r0
 800a6c4:	f109 0901 	add.w	r9, r9, #1
 800a6c8:	e772      	b.n	800a5b0 <_dtoa_r+0x9f0>
 800a6ca:	f000 faf5 	bl	800acb8 <__multadd>
 800a6ce:	4639      	mov	r1, r7
 800a6d0:	4680      	mov	r8, r0
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	220a      	movs	r2, #10
 800a6d6:	4620      	mov	r0, r4
 800a6d8:	f000 faee 	bl	800acb8 <__multadd>
 800a6dc:	4607      	mov	r7, r0
 800a6de:	e7f1      	b.n	800a6c4 <_dtoa_r+0xb04>
 800a6e0:	9b03      	ldr	r3, [sp, #12]
 800a6e2:	9302      	str	r3, [sp, #8]
 800a6e4:	9d01      	ldr	r5, [sp, #4]
 800a6e6:	ee18 0a10 	vmov	r0, s16
 800a6ea:	4631      	mov	r1, r6
 800a6ec:	f7ff f9dc 	bl	8009aa8 <quorem>
 800a6f0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a6f4:	9b01      	ldr	r3, [sp, #4]
 800a6f6:	f805 ab01 	strb.w	sl, [r5], #1
 800a6fa:	1aea      	subs	r2, r5, r3
 800a6fc:	9b02      	ldr	r3, [sp, #8]
 800a6fe:	4293      	cmp	r3, r2
 800a700:	dd09      	ble.n	800a716 <_dtoa_r+0xb56>
 800a702:	ee18 1a10 	vmov	r1, s16
 800a706:	2300      	movs	r3, #0
 800a708:	220a      	movs	r2, #10
 800a70a:	4620      	mov	r0, r4
 800a70c:	f000 fad4 	bl	800acb8 <__multadd>
 800a710:	ee08 0a10 	vmov	s16, r0
 800a714:	e7e7      	b.n	800a6e6 <_dtoa_r+0xb26>
 800a716:	9b02      	ldr	r3, [sp, #8]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	bfc8      	it	gt
 800a71c:	461d      	movgt	r5, r3
 800a71e:	9b01      	ldr	r3, [sp, #4]
 800a720:	bfd8      	it	le
 800a722:	2501      	movle	r5, #1
 800a724:	441d      	add	r5, r3
 800a726:	f04f 0800 	mov.w	r8, #0
 800a72a:	ee18 1a10 	vmov	r1, s16
 800a72e:	2201      	movs	r2, #1
 800a730:	4620      	mov	r0, r4
 800a732:	f000 fc71 	bl	800b018 <__lshift>
 800a736:	4631      	mov	r1, r6
 800a738:	ee08 0a10 	vmov	s16, r0
 800a73c:	f000 fcdc 	bl	800b0f8 <__mcmp>
 800a740:	2800      	cmp	r0, #0
 800a742:	dc91      	bgt.n	800a668 <_dtoa_r+0xaa8>
 800a744:	d102      	bne.n	800a74c <_dtoa_r+0xb8c>
 800a746:	f01a 0f01 	tst.w	sl, #1
 800a74a:	d18d      	bne.n	800a668 <_dtoa_r+0xaa8>
 800a74c:	462b      	mov	r3, r5
 800a74e:	461d      	mov	r5, r3
 800a750:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a754:	2a30      	cmp	r2, #48	; 0x30
 800a756:	d0fa      	beq.n	800a74e <_dtoa_r+0xb8e>
 800a758:	e6d7      	b.n	800a50a <_dtoa_r+0x94a>
 800a75a:	9a01      	ldr	r2, [sp, #4]
 800a75c:	429a      	cmp	r2, r3
 800a75e:	d184      	bne.n	800a66a <_dtoa_r+0xaaa>
 800a760:	9b00      	ldr	r3, [sp, #0]
 800a762:	3301      	adds	r3, #1
 800a764:	9300      	str	r3, [sp, #0]
 800a766:	2331      	movs	r3, #49	; 0x31
 800a768:	7013      	strb	r3, [r2, #0]
 800a76a:	e6ce      	b.n	800a50a <_dtoa_r+0x94a>
 800a76c:	4b09      	ldr	r3, [pc, #36]	; (800a794 <_dtoa_r+0xbd4>)
 800a76e:	f7ff ba95 	b.w	8009c9c <_dtoa_r+0xdc>
 800a772:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a774:	2b00      	cmp	r3, #0
 800a776:	f47f aa6e 	bne.w	8009c56 <_dtoa_r+0x96>
 800a77a:	4b07      	ldr	r3, [pc, #28]	; (800a798 <_dtoa_r+0xbd8>)
 800a77c:	f7ff ba8e 	b.w	8009c9c <_dtoa_r+0xdc>
 800a780:	9b02      	ldr	r3, [sp, #8]
 800a782:	2b00      	cmp	r3, #0
 800a784:	dcae      	bgt.n	800a6e4 <_dtoa_r+0xb24>
 800a786:	9b06      	ldr	r3, [sp, #24]
 800a788:	2b02      	cmp	r3, #2
 800a78a:	f73f aea8 	bgt.w	800a4de <_dtoa_r+0x91e>
 800a78e:	e7a9      	b.n	800a6e4 <_dtoa_r+0xb24>
 800a790:	0800ca6b 	.word	0x0800ca6b
 800a794:	0800c9c8 	.word	0x0800c9c8
 800a798:	0800c9ec 	.word	0x0800c9ec

0800a79c <__sflush_r>:
 800a79c:	898a      	ldrh	r2, [r1, #12]
 800a79e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7a2:	4605      	mov	r5, r0
 800a7a4:	0710      	lsls	r0, r2, #28
 800a7a6:	460c      	mov	r4, r1
 800a7a8:	d458      	bmi.n	800a85c <__sflush_r+0xc0>
 800a7aa:	684b      	ldr	r3, [r1, #4]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	dc05      	bgt.n	800a7bc <__sflush_r+0x20>
 800a7b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	dc02      	bgt.n	800a7bc <__sflush_r+0x20>
 800a7b6:	2000      	movs	r0, #0
 800a7b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a7be:	2e00      	cmp	r6, #0
 800a7c0:	d0f9      	beq.n	800a7b6 <__sflush_r+0x1a>
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a7c8:	682f      	ldr	r7, [r5, #0]
 800a7ca:	602b      	str	r3, [r5, #0]
 800a7cc:	d032      	beq.n	800a834 <__sflush_r+0x98>
 800a7ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a7d0:	89a3      	ldrh	r3, [r4, #12]
 800a7d2:	075a      	lsls	r2, r3, #29
 800a7d4:	d505      	bpl.n	800a7e2 <__sflush_r+0x46>
 800a7d6:	6863      	ldr	r3, [r4, #4]
 800a7d8:	1ac0      	subs	r0, r0, r3
 800a7da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a7dc:	b10b      	cbz	r3, 800a7e2 <__sflush_r+0x46>
 800a7de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a7e0:	1ac0      	subs	r0, r0, r3
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	4602      	mov	r2, r0
 800a7e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a7e8:	6a21      	ldr	r1, [r4, #32]
 800a7ea:	4628      	mov	r0, r5
 800a7ec:	47b0      	blx	r6
 800a7ee:	1c43      	adds	r3, r0, #1
 800a7f0:	89a3      	ldrh	r3, [r4, #12]
 800a7f2:	d106      	bne.n	800a802 <__sflush_r+0x66>
 800a7f4:	6829      	ldr	r1, [r5, #0]
 800a7f6:	291d      	cmp	r1, #29
 800a7f8:	d82c      	bhi.n	800a854 <__sflush_r+0xb8>
 800a7fa:	4a2a      	ldr	r2, [pc, #168]	; (800a8a4 <__sflush_r+0x108>)
 800a7fc:	40ca      	lsrs	r2, r1
 800a7fe:	07d6      	lsls	r6, r2, #31
 800a800:	d528      	bpl.n	800a854 <__sflush_r+0xb8>
 800a802:	2200      	movs	r2, #0
 800a804:	6062      	str	r2, [r4, #4]
 800a806:	04d9      	lsls	r1, r3, #19
 800a808:	6922      	ldr	r2, [r4, #16]
 800a80a:	6022      	str	r2, [r4, #0]
 800a80c:	d504      	bpl.n	800a818 <__sflush_r+0x7c>
 800a80e:	1c42      	adds	r2, r0, #1
 800a810:	d101      	bne.n	800a816 <__sflush_r+0x7a>
 800a812:	682b      	ldr	r3, [r5, #0]
 800a814:	b903      	cbnz	r3, 800a818 <__sflush_r+0x7c>
 800a816:	6560      	str	r0, [r4, #84]	; 0x54
 800a818:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a81a:	602f      	str	r7, [r5, #0]
 800a81c:	2900      	cmp	r1, #0
 800a81e:	d0ca      	beq.n	800a7b6 <__sflush_r+0x1a>
 800a820:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a824:	4299      	cmp	r1, r3
 800a826:	d002      	beq.n	800a82e <__sflush_r+0x92>
 800a828:	4628      	mov	r0, r5
 800a82a:	f000 fd7d 	bl	800b328 <_free_r>
 800a82e:	2000      	movs	r0, #0
 800a830:	6360      	str	r0, [r4, #52]	; 0x34
 800a832:	e7c1      	b.n	800a7b8 <__sflush_r+0x1c>
 800a834:	6a21      	ldr	r1, [r4, #32]
 800a836:	2301      	movs	r3, #1
 800a838:	4628      	mov	r0, r5
 800a83a:	47b0      	blx	r6
 800a83c:	1c41      	adds	r1, r0, #1
 800a83e:	d1c7      	bne.n	800a7d0 <__sflush_r+0x34>
 800a840:	682b      	ldr	r3, [r5, #0]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d0c4      	beq.n	800a7d0 <__sflush_r+0x34>
 800a846:	2b1d      	cmp	r3, #29
 800a848:	d001      	beq.n	800a84e <__sflush_r+0xb2>
 800a84a:	2b16      	cmp	r3, #22
 800a84c:	d101      	bne.n	800a852 <__sflush_r+0xb6>
 800a84e:	602f      	str	r7, [r5, #0]
 800a850:	e7b1      	b.n	800a7b6 <__sflush_r+0x1a>
 800a852:	89a3      	ldrh	r3, [r4, #12]
 800a854:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a858:	81a3      	strh	r3, [r4, #12]
 800a85a:	e7ad      	b.n	800a7b8 <__sflush_r+0x1c>
 800a85c:	690f      	ldr	r7, [r1, #16]
 800a85e:	2f00      	cmp	r7, #0
 800a860:	d0a9      	beq.n	800a7b6 <__sflush_r+0x1a>
 800a862:	0793      	lsls	r3, r2, #30
 800a864:	680e      	ldr	r6, [r1, #0]
 800a866:	bf08      	it	eq
 800a868:	694b      	ldreq	r3, [r1, #20]
 800a86a:	600f      	str	r7, [r1, #0]
 800a86c:	bf18      	it	ne
 800a86e:	2300      	movne	r3, #0
 800a870:	eba6 0807 	sub.w	r8, r6, r7
 800a874:	608b      	str	r3, [r1, #8]
 800a876:	f1b8 0f00 	cmp.w	r8, #0
 800a87a:	dd9c      	ble.n	800a7b6 <__sflush_r+0x1a>
 800a87c:	6a21      	ldr	r1, [r4, #32]
 800a87e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a880:	4643      	mov	r3, r8
 800a882:	463a      	mov	r2, r7
 800a884:	4628      	mov	r0, r5
 800a886:	47b0      	blx	r6
 800a888:	2800      	cmp	r0, #0
 800a88a:	dc06      	bgt.n	800a89a <__sflush_r+0xfe>
 800a88c:	89a3      	ldrh	r3, [r4, #12]
 800a88e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a892:	81a3      	strh	r3, [r4, #12]
 800a894:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a898:	e78e      	b.n	800a7b8 <__sflush_r+0x1c>
 800a89a:	4407      	add	r7, r0
 800a89c:	eba8 0800 	sub.w	r8, r8, r0
 800a8a0:	e7e9      	b.n	800a876 <__sflush_r+0xda>
 800a8a2:	bf00      	nop
 800a8a4:	20400001 	.word	0x20400001

0800a8a8 <_fflush_r>:
 800a8a8:	b538      	push	{r3, r4, r5, lr}
 800a8aa:	690b      	ldr	r3, [r1, #16]
 800a8ac:	4605      	mov	r5, r0
 800a8ae:	460c      	mov	r4, r1
 800a8b0:	b913      	cbnz	r3, 800a8b8 <_fflush_r+0x10>
 800a8b2:	2500      	movs	r5, #0
 800a8b4:	4628      	mov	r0, r5
 800a8b6:	bd38      	pop	{r3, r4, r5, pc}
 800a8b8:	b118      	cbz	r0, 800a8c2 <_fflush_r+0x1a>
 800a8ba:	6983      	ldr	r3, [r0, #24]
 800a8bc:	b90b      	cbnz	r3, 800a8c2 <_fflush_r+0x1a>
 800a8be:	f000 f887 	bl	800a9d0 <__sinit>
 800a8c2:	4b14      	ldr	r3, [pc, #80]	; (800a914 <_fflush_r+0x6c>)
 800a8c4:	429c      	cmp	r4, r3
 800a8c6:	d11b      	bne.n	800a900 <_fflush_r+0x58>
 800a8c8:	686c      	ldr	r4, [r5, #4]
 800a8ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d0ef      	beq.n	800a8b2 <_fflush_r+0xa>
 800a8d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a8d4:	07d0      	lsls	r0, r2, #31
 800a8d6:	d404      	bmi.n	800a8e2 <_fflush_r+0x3a>
 800a8d8:	0599      	lsls	r1, r3, #22
 800a8da:	d402      	bmi.n	800a8e2 <_fflush_r+0x3a>
 800a8dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a8de:	f000 f91a 	bl	800ab16 <__retarget_lock_acquire_recursive>
 800a8e2:	4628      	mov	r0, r5
 800a8e4:	4621      	mov	r1, r4
 800a8e6:	f7ff ff59 	bl	800a79c <__sflush_r>
 800a8ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a8ec:	07da      	lsls	r2, r3, #31
 800a8ee:	4605      	mov	r5, r0
 800a8f0:	d4e0      	bmi.n	800a8b4 <_fflush_r+0xc>
 800a8f2:	89a3      	ldrh	r3, [r4, #12]
 800a8f4:	059b      	lsls	r3, r3, #22
 800a8f6:	d4dd      	bmi.n	800a8b4 <_fflush_r+0xc>
 800a8f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a8fa:	f000 f90d 	bl	800ab18 <__retarget_lock_release_recursive>
 800a8fe:	e7d9      	b.n	800a8b4 <_fflush_r+0xc>
 800a900:	4b05      	ldr	r3, [pc, #20]	; (800a918 <_fflush_r+0x70>)
 800a902:	429c      	cmp	r4, r3
 800a904:	d101      	bne.n	800a90a <_fflush_r+0x62>
 800a906:	68ac      	ldr	r4, [r5, #8]
 800a908:	e7df      	b.n	800a8ca <_fflush_r+0x22>
 800a90a:	4b04      	ldr	r3, [pc, #16]	; (800a91c <_fflush_r+0x74>)
 800a90c:	429c      	cmp	r4, r3
 800a90e:	bf08      	it	eq
 800a910:	68ec      	ldreq	r4, [r5, #12]
 800a912:	e7da      	b.n	800a8ca <_fflush_r+0x22>
 800a914:	0800ca9c 	.word	0x0800ca9c
 800a918:	0800cabc 	.word	0x0800cabc
 800a91c:	0800ca7c 	.word	0x0800ca7c

0800a920 <std>:
 800a920:	2300      	movs	r3, #0
 800a922:	b510      	push	{r4, lr}
 800a924:	4604      	mov	r4, r0
 800a926:	e9c0 3300 	strd	r3, r3, [r0]
 800a92a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a92e:	6083      	str	r3, [r0, #8]
 800a930:	8181      	strh	r1, [r0, #12]
 800a932:	6643      	str	r3, [r0, #100]	; 0x64
 800a934:	81c2      	strh	r2, [r0, #14]
 800a936:	6183      	str	r3, [r0, #24]
 800a938:	4619      	mov	r1, r3
 800a93a:	2208      	movs	r2, #8
 800a93c:	305c      	adds	r0, #92	; 0x5c
 800a93e:	f7fe fad1 	bl	8008ee4 <memset>
 800a942:	4b05      	ldr	r3, [pc, #20]	; (800a958 <std+0x38>)
 800a944:	6263      	str	r3, [r4, #36]	; 0x24
 800a946:	4b05      	ldr	r3, [pc, #20]	; (800a95c <std+0x3c>)
 800a948:	62a3      	str	r3, [r4, #40]	; 0x28
 800a94a:	4b05      	ldr	r3, [pc, #20]	; (800a960 <std+0x40>)
 800a94c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a94e:	4b05      	ldr	r3, [pc, #20]	; (800a964 <std+0x44>)
 800a950:	6224      	str	r4, [r4, #32]
 800a952:	6323      	str	r3, [r4, #48]	; 0x30
 800a954:	bd10      	pop	{r4, pc}
 800a956:	bf00      	nop
 800a958:	0800ba75 	.word	0x0800ba75
 800a95c:	0800ba97 	.word	0x0800ba97
 800a960:	0800bacf 	.word	0x0800bacf
 800a964:	0800baf3 	.word	0x0800baf3

0800a968 <_cleanup_r>:
 800a968:	4901      	ldr	r1, [pc, #4]	; (800a970 <_cleanup_r+0x8>)
 800a96a:	f000 b8af 	b.w	800aacc <_fwalk_reent>
 800a96e:	bf00      	nop
 800a970:	0800a8a9 	.word	0x0800a8a9

0800a974 <__sfmoreglue>:
 800a974:	b570      	push	{r4, r5, r6, lr}
 800a976:	2268      	movs	r2, #104	; 0x68
 800a978:	1e4d      	subs	r5, r1, #1
 800a97a:	4355      	muls	r5, r2
 800a97c:	460e      	mov	r6, r1
 800a97e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a982:	f000 fd3d 	bl	800b400 <_malloc_r>
 800a986:	4604      	mov	r4, r0
 800a988:	b140      	cbz	r0, 800a99c <__sfmoreglue+0x28>
 800a98a:	2100      	movs	r1, #0
 800a98c:	e9c0 1600 	strd	r1, r6, [r0]
 800a990:	300c      	adds	r0, #12
 800a992:	60a0      	str	r0, [r4, #8]
 800a994:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a998:	f7fe faa4 	bl	8008ee4 <memset>
 800a99c:	4620      	mov	r0, r4
 800a99e:	bd70      	pop	{r4, r5, r6, pc}

0800a9a0 <__sfp_lock_acquire>:
 800a9a0:	4801      	ldr	r0, [pc, #4]	; (800a9a8 <__sfp_lock_acquire+0x8>)
 800a9a2:	f000 b8b8 	b.w	800ab16 <__retarget_lock_acquire_recursive>
 800a9a6:	bf00      	nop
 800a9a8:	20004df5 	.word	0x20004df5

0800a9ac <__sfp_lock_release>:
 800a9ac:	4801      	ldr	r0, [pc, #4]	; (800a9b4 <__sfp_lock_release+0x8>)
 800a9ae:	f000 b8b3 	b.w	800ab18 <__retarget_lock_release_recursive>
 800a9b2:	bf00      	nop
 800a9b4:	20004df5 	.word	0x20004df5

0800a9b8 <__sinit_lock_acquire>:
 800a9b8:	4801      	ldr	r0, [pc, #4]	; (800a9c0 <__sinit_lock_acquire+0x8>)
 800a9ba:	f000 b8ac 	b.w	800ab16 <__retarget_lock_acquire_recursive>
 800a9be:	bf00      	nop
 800a9c0:	20004df6 	.word	0x20004df6

0800a9c4 <__sinit_lock_release>:
 800a9c4:	4801      	ldr	r0, [pc, #4]	; (800a9cc <__sinit_lock_release+0x8>)
 800a9c6:	f000 b8a7 	b.w	800ab18 <__retarget_lock_release_recursive>
 800a9ca:	bf00      	nop
 800a9cc:	20004df6 	.word	0x20004df6

0800a9d0 <__sinit>:
 800a9d0:	b510      	push	{r4, lr}
 800a9d2:	4604      	mov	r4, r0
 800a9d4:	f7ff fff0 	bl	800a9b8 <__sinit_lock_acquire>
 800a9d8:	69a3      	ldr	r3, [r4, #24]
 800a9da:	b11b      	cbz	r3, 800a9e4 <__sinit+0x14>
 800a9dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9e0:	f7ff bff0 	b.w	800a9c4 <__sinit_lock_release>
 800a9e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a9e8:	6523      	str	r3, [r4, #80]	; 0x50
 800a9ea:	4b13      	ldr	r3, [pc, #76]	; (800aa38 <__sinit+0x68>)
 800a9ec:	4a13      	ldr	r2, [pc, #76]	; (800aa3c <__sinit+0x6c>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	62a2      	str	r2, [r4, #40]	; 0x28
 800a9f2:	42a3      	cmp	r3, r4
 800a9f4:	bf04      	itt	eq
 800a9f6:	2301      	moveq	r3, #1
 800a9f8:	61a3      	streq	r3, [r4, #24]
 800a9fa:	4620      	mov	r0, r4
 800a9fc:	f000 f820 	bl	800aa40 <__sfp>
 800aa00:	6060      	str	r0, [r4, #4]
 800aa02:	4620      	mov	r0, r4
 800aa04:	f000 f81c 	bl	800aa40 <__sfp>
 800aa08:	60a0      	str	r0, [r4, #8]
 800aa0a:	4620      	mov	r0, r4
 800aa0c:	f000 f818 	bl	800aa40 <__sfp>
 800aa10:	2200      	movs	r2, #0
 800aa12:	60e0      	str	r0, [r4, #12]
 800aa14:	2104      	movs	r1, #4
 800aa16:	6860      	ldr	r0, [r4, #4]
 800aa18:	f7ff ff82 	bl	800a920 <std>
 800aa1c:	68a0      	ldr	r0, [r4, #8]
 800aa1e:	2201      	movs	r2, #1
 800aa20:	2109      	movs	r1, #9
 800aa22:	f7ff ff7d 	bl	800a920 <std>
 800aa26:	68e0      	ldr	r0, [r4, #12]
 800aa28:	2202      	movs	r2, #2
 800aa2a:	2112      	movs	r1, #18
 800aa2c:	f7ff ff78 	bl	800a920 <std>
 800aa30:	2301      	movs	r3, #1
 800aa32:	61a3      	str	r3, [r4, #24]
 800aa34:	e7d2      	b.n	800a9dc <__sinit+0xc>
 800aa36:	bf00      	nop
 800aa38:	0800c9b4 	.word	0x0800c9b4
 800aa3c:	0800a969 	.word	0x0800a969

0800aa40 <__sfp>:
 800aa40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa42:	4607      	mov	r7, r0
 800aa44:	f7ff ffac 	bl	800a9a0 <__sfp_lock_acquire>
 800aa48:	4b1e      	ldr	r3, [pc, #120]	; (800aac4 <__sfp+0x84>)
 800aa4a:	681e      	ldr	r6, [r3, #0]
 800aa4c:	69b3      	ldr	r3, [r6, #24]
 800aa4e:	b913      	cbnz	r3, 800aa56 <__sfp+0x16>
 800aa50:	4630      	mov	r0, r6
 800aa52:	f7ff ffbd 	bl	800a9d0 <__sinit>
 800aa56:	3648      	adds	r6, #72	; 0x48
 800aa58:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800aa5c:	3b01      	subs	r3, #1
 800aa5e:	d503      	bpl.n	800aa68 <__sfp+0x28>
 800aa60:	6833      	ldr	r3, [r6, #0]
 800aa62:	b30b      	cbz	r3, 800aaa8 <__sfp+0x68>
 800aa64:	6836      	ldr	r6, [r6, #0]
 800aa66:	e7f7      	b.n	800aa58 <__sfp+0x18>
 800aa68:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aa6c:	b9d5      	cbnz	r5, 800aaa4 <__sfp+0x64>
 800aa6e:	4b16      	ldr	r3, [pc, #88]	; (800aac8 <__sfp+0x88>)
 800aa70:	60e3      	str	r3, [r4, #12]
 800aa72:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aa76:	6665      	str	r5, [r4, #100]	; 0x64
 800aa78:	f000 f84c 	bl	800ab14 <__retarget_lock_init_recursive>
 800aa7c:	f7ff ff96 	bl	800a9ac <__sfp_lock_release>
 800aa80:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800aa84:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800aa88:	6025      	str	r5, [r4, #0]
 800aa8a:	61a5      	str	r5, [r4, #24]
 800aa8c:	2208      	movs	r2, #8
 800aa8e:	4629      	mov	r1, r5
 800aa90:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aa94:	f7fe fa26 	bl	8008ee4 <memset>
 800aa98:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800aa9c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800aaa0:	4620      	mov	r0, r4
 800aaa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aaa4:	3468      	adds	r4, #104	; 0x68
 800aaa6:	e7d9      	b.n	800aa5c <__sfp+0x1c>
 800aaa8:	2104      	movs	r1, #4
 800aaaa:	4638      	mov	r0, r7
 800aaac:	f7ff ff62 	bl	800a974 <__sfmoreglue>
 800aab0:	4604      	mov	r4, r0
 800aab2:	6030      	str	r0, [r6, #0]
 800aab4:	2800      	cmp	r0, #0
 800aab6:	d1d5      	bne.n	800aa64 <__sfp+0x24>
 800aab8:	f7ff ff78 	bl	800a9ac <__sfp_lock_release>
 800aabc:	230c      	movs	r3, #12
 800aabe:	603b      	str	r3, [r7, #0]
 800aac0:	e7ee      	b.n	800aaa0 <__sfp+0x60>
 800aac2:	bf00      	nop
 800aac4:	0800c9b4 	.word	0x0800c9b4
 800aac8:	ffff0001 	.word	0xffff0001

0800aacc <_fwalk_reent>:
 800aacc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aad0:	4606      	mov	r6, r0
 800aad2:	4688      	mov	r8, r1
 800aad4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800aad8:	2700      	movs	r7, #0
 800aada:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aade:	f1b9 0901 	subs.w	r9, r9, #1
 800aae2:	d505      	bpl.n	800aaf0 <_fwalk_reent+0x24>
 800aae4:	6824      	ldr	r4, [r4, #0]
 800aae6:	2c00      	cmp	r4, #0
 800aae8:	d1f7      	bne.n	800aada <_fwalk_reent+0xe>
 800aaea:	4638      	mov	r0, r7
 800aaec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aaf0:	89ab      	ldrh	r3, [r5, #12]
 800aaf2:	2b01      	cmp	r3, #1
 800aaf4:	d907      	bls.n	800ab06 <_fwalk_reent+0x3a>
 800aaf6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aafa:	3301      	adds	r3, #1
 800aafc:	d003      	beq.n	800ab06 <_fwalk_reent+0x3a>
 800aafe:	4629      	mov	r1, r5
 800ab00:	4630      	mov	r0, r6
 800ab02:	47c0      	blx	r8
 800ab04:	4307      	orrs	r7, r0
 800ab06:	3568      	adds	r5, #104	; 0x68
 800ab08:	e7e9      	b.n	800aade <_fwalk_reent+0x12>
	...

0800ab0c <_localeconv_r>:
 800ab0c:	4800      	ldr	r0, [pc, #0]	; (800ab10 <_localeconv_r+0x4>)
 800ab0e:	4770      	bx	lr
 800ab10:	2000016c 	.word	0x2000016c

0800ab14 <__retarget_lock_init_recursive>:
 800ab14:	4770      	bx	lr

0800ab16 <__retarget_lock_acquire_recursive>:
 800ab16:	4770      	bx	lr

0800ab18 <__retarget_lock_release_recursive>:
 800ab18:	4770      	bx	lr

0800ab1a <__swhatbuf_r>:
 800ab1a:	b570      	push	{r4, r5, r6, lr}
 800ab1c:	460e      	mov	r6, r1
 800ab1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab22:	2900      	cmp	r1, #0
 800ab24:	b096      	sub	sp, #88	; 0x58
 800ab26:	4614      	mov	r4, r2
 800ab28:	461d      	mov	r5, r3
 800ab2a:	da08      	bge.n	800ab3e <__swhatbuf_r+0x24>
 800ab2c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ab30:	2200      	movs	r2, #0
 800ab32:	602a      	str	r2, [r5, #0]
 800ab34:	061a      	lsls	r2, r3, #24
 800ab36:	d410      	bmi.n	800ab5a <__swhatbuf_r+0x40>
 800ab38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab3c:	e00e      	b.n	800ab5c <__swhatbuf_r+0x42>
 800ab3e:	466a      	mov	r2, sp
 800ab40:	f001 f82e 	bl	800bba0 <_fstat_r>
 800ab44:	2800      	cmp	r0, #0
 800ab46:	dbf1      	blt.n	800ab2c <__swhatbuf_r+0x12>
 800ab48:	9a01      	ldr	r2, [sp, #4]
 800ab4a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ab4e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ab52:	425a      	negs	r2, r3
 800ab54:	415a      	adcs	r2, r3
 800ab56:	602a      	str	r2, [r5, #0]
 800ab58:	e7ee      	b.n	800ab38 <__swhatbuf_r+0x1e>
 800ab5a:	2340      	movs	r3, #64	; 0x40
 800ab5c:	2000      	movs	r0, #0
 800ab5e:	6023      	str	r3, [r4, #0]
 800ab60:	b016      	add	sp, #88	; 0x58
 800ab62:	bd70      	pop	{r4, r5, r6, pc}

0800ab64 <__smakebuf_r>:
 800ab64:	898b      	ldrh	r3, [r1, #12]
 800ab66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ab68:	079d      	lsls	r5, r3, #30
 800ab6a:	4606      	mov	r6, r0
 800ab6c:	460c      	mov	r4, r1
 800ab6e:	d507      	bpl.n	800ab80 <__smakebuf_r+0x1c>
 800ab70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ab74:	6023      	str	r3, [r4, #0]
 800ab76:	6123      	str	r3, [r4, #16]
 800ab78:	2301      	movs	r3, #1
 800ab7a:	6163      	str	r3, [r4, #20]
 800ab7c:	b002      	add	sp, #8
 800ab7e:	bd70      	pop	{r4, r5, r6, pc}
 800ab80:	ab01      	add	r3, sp, #4
 800ab82:	466a      	mov	r2, sp
 800ab84:	f7ff ffc9 	bl	800ab1a <__swhatbuf_r>
 800ab88:	9900      	ldr	r1, [sp, #0]
 800ab8a:	4605      	mov	r5, r0
 800ab8c:	4630      	mov	r0, r6
 800ab8e:	f000 fc37 	bl	800b400 <_malloc_r>
 800ab92:	b948      	cbnz	r0, 800aba8 <__smakebuf_r+0x44>
 800ab94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab98:	059a      	lsls	r2, r3, #22
 800ab9a:	d4ef      	bmi.n	800ab7c <__smakebuf_r+0x18>
 800ab9c:	f023 0303 	bic.w	r3, r3, #3
 800aba0:	f043 0302 	orr.w	r3, r3, #2
 800aba4:	81a3      	strh	r3, [r4, #12]
 800aba6:	e7e3      	b.n	800ab70 <__smakebuf_r+0xc>
 800aba8:	4b0d      	ldr	r3, [pc, #52]	; (800abe0 <__smakebuf_r+0x7c>)
 800abaa:	62b3      	str	r3, [r6, #40]	; 0x28
 800abac:	89a3      	ldrh	r3, [r4, #12]
 800abae:	6020      	str	r0, [r4, #0]
 800abb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abb4:	81a3      	strh	r3, [r4, #12]
 800abb6:	9b00      	ldr	r3, [sp, #0]
 800abb8:	6163      	str	r3, [r4, #20]
 800abba:	9b01      	ldr	r3, [sp, #4]
 800abbc:	6120      	str	r0, [r4, #16]
 800abbe:	b15b      	cbz	r3, 800abd8 <__smakebuf_r+0x74>
 800abc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800abc4:	4630      	mov	r0, r6
 800abc6:	f000 fffd 	bl	800bbc4 <_isatty_r>
 800abca:	b128      	cbz	r0, 800abd8 <__smakebuf_r+0x74>
 800abcc:	89a3      	ldrh	r3, [r4, #12]
 800abce:	f023 0303 	bic.w	r3, r3, #3
 800abd2:	f043 0301 	orr.w	r3, r3, #1
 800abd6:	81a3      	strh	r3, [r4, #12]
 800abd8:	89a0      	ldrh	r0, [r4, #12]
 800abda:	4305      	orrs	r5, r0
 800abdc:	81a5      	strh	r5, [r4, #12]
 800abde:	e7cd      	b.n	800ab7c <__smakebuf_r+0x18>
 800abe0:	0800a969 	.word	0x0800a969

0800abe4 <malloc>:
 800abe4:	4b02      	ldr	r3, [pc, #8]	; (800abf0 <malloc+0xc>)
 800abe6:	4601      	mov	r1, r0
 800abe8:	6818      	ldr	r0, [r3, #0]
 800abea:	f000 bc09 	b.w	800b400 <_malloc_r>
 800abee:	bf00      	nop
 800abf0:	20000018 	.word	0x20000018

0800abf4 <_Balloc>:
 800abf4:	b570      	push	{r4, r5, r6, lr}
 800abf6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800abf8:	4604      	mov	r4, r0
 800abfa:	460d      	mov	r5, r1
 800abfc:	b976      	cbnz	r6, 800ac1c <_Balloc+0x28>
 800abfe:	2010      	movs	r0, #16
 800ac00:	f7ff fff0 	bl	800abe4 <malloc>
 800ac04:	4602      	mov	r2, r0
 800ac06:	6260      	str	r0, [r4, #36]	; 0x24
 800ac08:	b920      	cbnz	r0, 800ac14 <_Balloc+0x20>
 800ac0a:	4b18      	ldr	r3, [pc, #96]	; (800ac6c <_Balloc+0x78>)
 800ac0c:	4818      	ldr	r0, [pc, #96]	; (800ac70 <_Balloc+0x7c>)
 800ac0e:	2166      	movs	r1, #102	; 0x66
 800ac10:	f000 ff86 	bl	800bb20 <__assert_func>
 800ac14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac18:	6006      	str	r6, [r0, #0]
 800ac1a:	60c6      	str	r6, [r0, #12]
 800ac1c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ac1e:	68f3      	ldr	r3, [r6, #12]
 800ac20:	b183      	cbz	r3, 800ac44 <_Balloc+0x50>
 800ac22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac24:	68db      	ldr	r3, [r3, #12]
 800ac26:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ac2a:	b9b8      	cbnz	r0, 800ac5c <_Balloc+0x68>
 800ac2c:	2101      	movs	r1, #1
 800ac2e:	fa01 f605 	lsl.w	r6, r1, r5
 800ac32:	1d72      	adds	r2, r6, #5
 800ac34:	0092      	lsls	r2, r2, #2
 800ac36:	4620      	mov	r0, r4
 800ac38:	f000 fb60 	bl	800b2fc <_calloc_r>
 800ac3c:	b160      	cbz	r0, 800ac58 <_Balloc+0x64>
 800ac3e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ac42:	e00e      	b.n	800ac62 <_Balloc+0x6e>
 800ac44:	2221      	movs	r2, #33	; 0x21
 800ac46:	2104      	movs	r1, #4
 800ac48:	4620      	mov	r0, r4
 800ac4a:	f000 fb57 	bl	800b2fc <_calloc_r>
 800ac4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac50:	60f0      	str	r0, [r6, #12]
 800ac52:	68db      	ldr	r3, [r3, #12]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d1e4      	bne.n	800ac22 <_Balloc+0x2e>
 800ac58:	2000      	movs	r0, #0
 800ac5a:	bd70      	pop	{r4, r5, r6, pc}
 800ac5c:	6802      	ldr	r2, [r0, #0]
 800ac5e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ac62:	2300      	movs	r3, #0
 800ac64:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ac68:	e7f7      	b.n	800ac5a <_Balloc+0x66>
 800ac6a:	bf00      	nop
 800ac6c:	0800c9f9 	.word	0x0800c9f9
 800ac70:	0800cadc 	.word	0x0800cadc

0800ac74 <_Bfree>:
 800ac74:	b570      	push	{r4, r5, r6, lr}
 800ac76:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ac78:	4605      	mov	r5, r0
 800ac7a:	460c      	mov	r4, r1
 800ac7c:	b976      	cbnz	r6, 800ac9c <_Bfree+0x28>
 800ac7e:	2010      	movs	r0, #16
 800ac80:	f7ff ffb0 	bl	800abe4 <malloc>
 800ac84:	4602      	mov	r2, r0
 800ac86:	6268      	str	r0, [r5, #36]	; 0x24
 800ac88:	b920      	cbnz	r0, 800ac94 <_Bfree+0x20>
 800ac8a:	4b09      	ldr	r3, [pc, #36]	; (800acb0 <_Bfree+0x3c>)
 800ac8c:	4809      	ldr	r0, [pc, #36]	; (800acb4 <_Bfree+0x40>)
 800ac8e:	218a      	movs	r1, #138	; 0x8a
 800ac90:	f000 ff46 	bl	800bb20 <__assert_func>
 800ac94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac98:	6006      	str	r6, [r0, #0]
 800ac9a:	60c6      	str	r6, [r0, #12]
 800ac9c:	b13c      	cbz	r4, 800acae <_Bfree+0x3a>
 800ac9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800aca0:	6862      	ldr	r2, [r4, #4]
 800aca2:	68db      	ldr	r3, [r3, #12]
 800aca4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aca8:	6021      	str	r1, [r4, #0]
 800acaa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800acae:	bd70      	pop	{r4, r5, r6, pc}
 800acb0:	0800c9f9 	.word	0x0800c9f9
 800acb4:	0800cadc 	.word	0x0800cadc

0800acb8 <__multadd>:
 800acb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acbc:	690d      	ldr	r5, [r1, #16]
 800acbe:	4607      	mov	r7, r0
 800acc0:	460c      	mov	r4, r1
 800acc2:	461e      	mov	r6, r3
 800acc4:	f101 0c14 	add.w	ip, r1, #20
 800acc8:	2000      	movs	r0, #0
 800acca:	f8dc 3000 	ldr.w	r3, [ip]
 800acce:	b299      	uxth	r1, r3
 800acd0:	fb02 6101 	mla	r1, r2, r1, r6
 800acd4:	0c1e      	lsrs	r6, r3, #16
 800acd6:	0c0b      	lsrs	r3, r1, #16
 800acd8:	fb02 3306 	mla	r3, r2, r6, r3
 800acdc:	b289      	uxth	r1, r1
 800acde:	3001      	adds	r0, #1
 800ace0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ace4:	4285      	cmp	r5, r0
 800ace6:	f84c 1b04 	str.w	r1, [ip], #4
 800acea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800acee:	dcec      	bgt.n	800acca <__multadd+0x12>
 800acf0:	b30e      	cbz	r6, 800ad36 <__multadd+0x7e>
 800acf2:	68a3      	ldr	r3, [r4, #8]
 800acf4:	42ab      	cmp	r3, r5
 800acf6:	dc19      	bgt.n	800ad2c <__multadd+0x74>
 800acf8:	6861      	ldr	r1, [r4, #4]
 800acfa:	4638      	mov	r0, r7
 800acfc:	3101      	adds	r1, #1
 800acfe:	f7ff ff79 	bl	800abf4 <_Balloc>
 800ad02:	4680      	mov	r8, r0
 800ad04:	b928      	cbnz	r0, 800ad12 <__multadd+0x5a>
 800ad06:	4602      	mov	r2, r0
 800ad08:	4b0c      	ldr	r3, [pc, #48]	; (800ad3c <__multadd+0x84>)
 800ad0a:	480d      	ldr	r0, [pc, #52]	; (800ad40 <__multadd+0x88>)
 800ad0c:	21b5      	movs	r1, #181	; 0xb5
 800ad0e:	f000 ff07 	bl	800bb20 <__assert_func>
 800ad12:	6922      	ldr	r2, [r4, #16]
 800ad14:	3202      	adds	r2, #2
 800ad16:	f104 010c 	add.w	r1, r4, #12
 800ad1a:	0092      	lsls	r2, r2, #2
 800ad1c:	300c      	adds	r0, #12
 800ad1e:	f7fe f8d3 	bl	8008ec8 <memcpy>
 800ad22:	4621      	mov	r1, r4
 800ad24:	4638      	mov	r0, r7
 800ad26:	f7ff ffa5 	bl	800ac74 <_Bfree>
 800ad2a:	4644      	mov	r4, r8
 800ad2c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ad30:	3501      	adds	r5, #1
 800ad32:	615e      	str	r6, [r3, #20]
 800ad34:	6125      	str	r5, [r4, #16]
 800ad36:	4620      	mov	r0, r4
 800ad38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad3c:	0800ca6b 	.word	0x0800ca6b
 800ad40:	0800cadc 	.word	0x0800cadc

0800ad44 <__hi0bits>:
 800ad44:	0c03      	lsrs	r3, r0, #16
 800ad46:	041b      	lsls	r3, r3, #16
 800ad48:	b9d3      	cbnz	r3, 800ad80 <__hi0bits+0x3c>
 800ad4a:	0400      	lsls	r0, r0, #16
 800ad4c:	2310      	movs	r3, #16
 800ad4e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ad52:	bf04      	itt	eq
 800ad54:	0200      	lsleq	r0, r0, #8
 800ad56:	3308      	addeq	r3, #8
 800ad58:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ad5c:	bf04      	itt	eq
 800ad5e:	0100      	lsleq	r0, r0, #4
 800ad60:	3304      	addeq	r3, #4
 800ad62:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ad66:	bf04      	itt	eq
 800ad68:	0080      	lsleq	r0, r0, #2
 800ad6a:	3302      	addeq	r3, #2
 800ad6c:	2800      	cmp	r0, #0
 800ad6e:	db05      	blt.n	800ad7c <__hi0bits+0x38>
 800ad70:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ad74:	f103 0301 	add.w	r3, r3, #1
 800ad78:	bf08      	it	eq
 800ad7a:	2320      	moveq	r3, #32
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	4770      	bx	lr
 800ad80:	2300      	movs	r3, #0
 800ad82:	e7e4      	b.n	800ad4e <__hi0bits+0xa>

0800ad84 <__lo0bits>:
 800ad84:	6803      	ldr	r3, [r0, #0]
 800ad86:	f013 0207 	ands.w	r2, r3, #7
 800ad8a:	4601      	mov	r1, r0
 800ad8c:	d00b      	beq.n	800ada6 <__lo0bits+0x22>
 800ad8e:	07da      	lsls	r2, r3, #31
 800ad90:	d423      	bmi.n	800adda <__lo0bits+0x56>
 800ad92:	0798      	lsls	r0, r3, #30
 800ad94:	bf49      	itett	mi
 800ad96:	085b      	lsrmi	r3, r3, #1
 800ad98:	089b      	lsrpl	r3, r3, #2
 800ad9a:	2001      	movmi	r0, #1
 800ad9c:	600b      	strmi	r3, [r1, #0]
 800ad9e:	bf5c      	itt	pl
 800ada0:	600b      	strpl	r3, [r1, #0]
 800ada2:	2002      	movpl	r0, #2
 800ada4:	4770      	bx	lr
 800ada6:	b298      	uxth	r0, r3
 800ada8:	b9a8      	cbnz	r0, 800add6 <__lo0bits+0x52>
 800adaa:	0c1b      	lsrs	r3, r3, #16
 800adac:	2010      	movs	r0, #16
 800adae:	b2da      	uxtb	r2, r3
 800adb0:	b90a      	cbnz	r2, 800adb6 <__lo0bits+0x32>
 800adb2:	3008      	adds	r0, #8
 800adb4:	0a1b      	lsrs	r3, r3, #8
 800adb6:	071a      	lsls	r2, r3, #28
 800adb8:	bf04      	itt	eq
 800adba:	091b      	lsreq	r3, r3, #4
 800adbc:	3004      	addeq	r0, #4
 800adbe:	079a      	lsls	r2, r3, #30
 800adc0:	bf04      	itt	eq
 800adc2:	089b      	lsreq	r3, r3, #2
 800adc4:	3002      	addeq	r0, #2
 800adc6:	07da      	lsls	r2, r3, #31
 800adc8:	d403      	bmi.n	800add2 <__lo0bits+0x4e>
 800adca:	085b      	lsrs	r3, r3, #1
 800adcc:	f100 0001 	add.w	r0, r0, #1
 800add0:	d005      	beq.n	800adde <__lo0bits+0x5a>
 800add2:	600b      	str	r3, [r1, #0]
 800add4:	4770      	bx	lr
 800add6:	4610      	mov	r0, r2
 800add8:	e7e9      	b.n	800adae <__lo0bits+0x2a>
 800adda:	2000      	movs	r0, #0
 800addc:	4770      	bx	lr
 800adde:	2020      	movs	r0, #32
 800ade0:	4770      	bx	lr
	...

0800ade4 <__i2b>:
 800ade4:	b510      	push	{r4, lr}
 800ade6:	460c      	mov	r4, r1
 800ade8:	2101      	movs	r1, #1
 800adea:	f7ff ff03 	bl	800abf4 <_Balloc>
 800adee:	4602      	mov	r2, r0
 800adf0:	b928      	cbnz	r0, 800adfe <__i2b+0x1a>
 800adf2:	4b05      	ldr	r3, [pc, #20]	; (800ae08 <__i2b+0x24>)
 800adf4:	4805      	ldr	r0, [pc, #20]	; (800ae0c <__i2b+0x28>)
 800adf6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800adfa:	f000 fe91 	bl	800bb20 <__assert_func>
 800adfe:	2301      	movs	r3, #1
 800ae00:	6144      	str	r4, [r0, #20]
 800ae02:	6103      	str	r3, [r0, #16]
 800ae04:	bd10      	pop	{r4, pc}
 800ae06:	bf00      	nop
 800ae08:	0800ca6b 	.word	0x0800ca6b
 800ae0c:	0800cadc 	.word	0x0800cadc

0800ae10 <__multiply>:
 800ae10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae14:	4691      	mov	r9, r2
 800ae16:	690a      	ldr	r2, [r1, #16]
 800ae18:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ae1c:	429a      	cmp	r2, r3
 800ae1e:	bfb8      	it	lt
 800ae20:	460b      	movlt	r3, r1
 800ae22:	460c      	mov	r4, r1
 800ae24:	bfbc      	itt	lt
 800ae26:	464c      	movlt	r4, r9
 800ae28:	4699      	movlt	r9, r3
 800ae2a:	6927      	ldr	r7, [r4, #16]
 800ae2c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ae30:	68a3      	ldr	r3, [r4, #8]
 800ae32:	6861      	ldr	r1, [r4, #4]
 800ae34:	eb07 060a 	add.w	r6, r7, sl
 800ae38:	42b3      	cmp	r3, r6
 800ae3a:	b085      	sub	sp, #20
 800ae3c:	bfb8      	it	lt
 800ae3e:	3101      	addlt	r1, #1
 800ae40:	f7ff fed8 	bl	800abf4 <_Balloc>
 800ae44:	b930      	cbnz	r0, 800ae54 <__multiply+0x44>
 800ae46:	4602      	mov	r2, r0
 800ae48:	4b44      	ldr	r3, [pc, #272]	; (800af5c <__multiply+0x14c>)
 800ae4a:	4845      	ldr	r0, [pc, #276]	; (800af60 <__multiply+0x150>)
 800ae4c:	f240 115d 	movw	r1, #349	; 0x15d
 800ae50:	f000 fe66 	bl	800bb20 <__assert_func>
 800ae54:	f100 0514 	add.w	r5, r0, #20
 800ae58:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ae5c:	462b      	mov	r3, r5
 800ae5e:	2200      	movs	r2, #0
 800ae60:	4543      	cmp	r3, r8
 800ae62:	d321      	bcc.n	800aea8 <__multiply+0x98>
 800ae64:	f104 0314 	add.w	r3, r4, #20
 800ae68:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ae6c:	f109 0314 	add.w	r3, r9, #20
 800ae70:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ae74:	9202      	str	r2, [sp, #8]
 800ae76:	1b3a      	subs	r2, r7, r4
 800ae78:	3a15      	subs	r2, #21
 800ae7a:	f022 0203 	bic.w	r2, r2, #3
 800ae7e:	3204      	adds	r2, #4
 800ae80:	f104 0115 	add.w	r1, r4, #21
 800ae84:	428f      	cmp	r7, r1
 800ae86:	bf38      	it	cc
 800ae88:	2204      	movcc	r2, #4
 800ae8a:	9201      	str	r2, [sp, #4]
 800ae8c:	9a02      	ldr	r2, [sp, #8]
 800ae8e:	9303      	str	r3, [sp, #12]
 800ae90:	429a      	cmp	r2, r3
 800ae92:	d80c      	bhi.n	800aeae <__multiply+0x9e>
 800ae94:	2e00      	cmp	r6, #0
 800ae96:	dd03      	ble.n	800aea0 <__multiply+0x90>
 800ae98:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d05a      	beq.n	800af56 <__multiply+0x146>
 800aea0:	6106      	str	r6, [r0, #16]
 800aea2:	b005      	add	sp, #20
 800aea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aea8:	f843 2b04 	str.w	r2, [r3], #4
 800aeac:	e7d8      	b.n	800ae60 <__multiply+0x50>
 800aeae:	f8b3 a000 	ldrh.w	sl, [r3]
 800aeb2:	f1ba 0f00 	cmp.w	sl, #0
 800aeb6:	d024      	beq.n	800af02 <__multiply+0xf2>
 800aeb8:	f104 0e14 	add.w	lr, r4, #20
 800aebc:	46a9      	mov	r9, r5
 800aebe:	f04f 0c00 	mov.w	ip, #0
 800aec2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800aec6:	f8d9 1000 	ldr.w	r1, [r9]
 800aeca:	fa1f fb82 	uxth.w	fp, r2
 800aece:	b289      	uxth	r1, r1
 800aed0:	fb0a 110b 	mla	r1, sl, fp, r1
 800aed4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800aed8:	f8d9 2000 	ldr.w	r2, [r9]
 800aedc:	4461      	add	r1, ip
 800aede:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800aee2:	fb0a c20b 	mla	r2, sl, fp, ip
 800aee6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800aeea:	b289      	uxth	r1, r1
 800aeec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800aef0:	4577      	cmp	r7, lr
 800aef2:	f849 1b04 	str.w	r1, [r9], #4
 800aef6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800aefa:	d8e2      	bhi.n	800aec2 <__multiply+0xb2>
 800aefc:	9a01      	ldr	r2, [sp, #4]
 800aefe:	f845 c002 	str.w	ip, [r5, r2]
 800af02:	9a03      	ldr	r2, [sp, #12]
 800af04:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800af08:	3304      	adds	r3, #4
 800af0a:	f1b9 0f00 	cmp.w	r9, #0
 800af0e:	d020      	beq.n	800af52 <__multiply+0x142>
 800af10:	6829      	ldr	r1, [r5, #0]
 800af12:	f104 0c14 	add.w	ip, r4, #20
 800af16:	46ae      	mov	lr, r5
 800af18:	f04f 0a00 	mov.w	sl, #0
 800af1c:	f8bc b000 	ldrh.w	fp, [ip]
 800af20:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800af24:	fb09 220b 	mla	r2, r9, fp, r2
 800af28:	4492      	add	sl, r2
 800af2a:	b289      	uxth	r1, r1
 800af2c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800af30:	f84e 1b04 	str.w	r1, [lr], #4
 800af34:	f85c 2b04 	ldr.w	r2, [ip], #4
 800af38:	f8be 1000 	ldrh.w	r1, [lr]
 800af3c:	0c12      	lsrs	r2, r2, #16
 800af3e:	fb09 1102 	mla	r1, r9, r2, r1
 800af42:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800af46:	4567      	cmp	r7, ip
 800af48:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800af4c:	d8e6      	bhi.n	800af1c <__multiply+0x10c>
 800af4e:	9a01      	ldr	r2, [sp, #4]
 800af50:	50a9      	str	r1, [r5, r2]
 800af52:	3504      	adds	r5, #4
 800af54:	e79a      	b.n	800ae8c <__multiply+0x7c>
 800af56:	3e01      	subs	r6, #1
 800af58:	e79c      	b.n	800ae94 <__multiply+0x84>
 800af5a:	bf00      	nop
 800af5c:	0800ca6b 	.word	0x0800ca6b
 800af60:	0800cadc 	.word	0x0800cadc

0800af64 <__pow5mult>:
 800af64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af68:	4615      	mov	r5, r2
 800af6a:	f012 0203 	ands.w	r2, r2, #3
 800af6e:	4606      	mov	r6, r0
 800af70:	460f      	mov	r7, r1
 800af72:	d007      	beq.n	800af84 <__pow5mult+0x20>
 800af74:	4c25      	ldr	r4, [pc, #148]	; (800b00c <__pow5mult+0xa8>)
 800af76:	3a01      	subs	r2, #1
 800af78:	2300      	movs	r3, #0
 800af7a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800af7e:	f7ff fe9b 	bl	800acb8 <__multadd>
 800af82:	4607      	mov	r7, r0
 800af84:	10ad      	asrs	r5, r5, #2
 800af86:	d03d      	beq.n	800b004 <__pow5mult+0xa0>
 800af88:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800af8a:	b97c      	cbnz	r4, 800afac <__pow5mult+0x48>
 800af8c:	2010      	movs	r0, #16
 800af8e:	f7ff fe29 	bl	800abe4 <malloc>
 800af92:	4602      	mov	r2, r0
 800af94:	6270      	str	r0, [r6, #36]	; 0x24
 800af96:	b928      	cbnz	r0, 800afa4 <__pow5mult+0x40>
 800af98:	4b1d      	ldr	r3, [pc, #116]	; (800b010 <__pow5mult+0xac>)
 800af9a:	481e      	ldr	r0, [pc, #120]	; (800b014 <__pow5mult+0xb0>)
 800af9c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800afa0:	f000 fdbe 	bl	800bb20 <__assert_func>
 800afa4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800afa8:	6004      	str	r4, [r0, #0]
 800afaa:	60c4      	str	r4, [r0, #12]
 800afac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800afb0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800afb4:	b94c      	cbnz	r4, 800afca <__pow5mult+0x66>
 800afb6:	f240 2171 	movw	r1, #625	; 0x271
 800afba:	4630      	mov	r0, r6
 800afbc:	f7ff ff12 	bl	800ade4 <__i2b>
 800afc0:	2300      	movs	r3, #0
 800afc2:	f8c8 0008 	str.w	r0, [r8, #8]
 800afc6:	4604      	mov	r4, r0
 800afc8:	6003      	str	r3, [r0, #0]
 800afca:	f04f 0900 	mov.w	r9, #0
 800afce:	07eb      	lsls	r3, r5, #31
 800afd0:	d50a      	bpl.n	800afe8 <__pow5mult+0x84>
 800afd2:	4639      	mov	r1, r7
 800afd4:	4622      	mov	r2, r4
 800afd6:	4630      	mov	r0, r6
 800afd8:	f7ff ff1a 	bl	800ae10 <__multiply>
 800afdc:	4639      	mov	r1, r7
 800afde:	4680      	mov	r8, r0
 800afe0:	4630      	mov	r0, r6
 800afe2:	f7ff fe47 	bl	800ac74 <_Bfree>
 800afe6:	4647      	mov	r7, r8
 800afe8:	106d      	asrs	r5, r5, #1
 800afea:	d00b      	beq.n	800b004 <__pow5mult+0xa0>
 800afec:	6820      	ldr	r0, [r4, #0]
 800afee:	b938      	cbnz	r0, 800b000 <__pow5mult+0x9c>
 800aff0:	4622      	mov	r2, r4
 800aff2:	4621      	mov	r1, r4
 800aff4:	4630      	mov	r0, r6
 800aff6:	f7ff ff0b 	bl	800ae10 <__multiply>
 800affa:	6020      	str	r0, [r4, #0]
 800affc:	f8c0 9000 	str.w	r9, [r0]
 800b000:	4604      	mov	r4, r0
 800b002:	e7e4      	b.n	800afce <__pow5mult+0x6a>
 800b004:	4638      	mov	r0, r7
 800b006:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b00a:	bf00      	nop
 800b00c:	0800cc28 	.word	0x0800cc28
 800b010:	0800c9f9 	.word	0x0800c9f9
 800b014:	0800cadc 	.word	0x0800cadc

0800b018 <__lshift>:
 800b018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b01c:	460c      	mov	r4, r1
 800b01e:	6849      	ldr	r1, [r1, #4]
 800b020:	6923      	ldr	r3, [r4, #16]
 800b022:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b026:	68a3      	ldr	r3, [r4, #8]
 800b028:	4607      	mov	r7, r0
 800b02a:	4691      	mov	r9, r2
 800b02c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b030:	f108 0601 	add.w	r6, r8, #1
 800b034:	42b3      	cmp	r3, r6
 800b036:	db0b      	blt.n	800b050 <__lshift+0x38>
 800b038:	4638      	mov	r0, r7
 800b03a:	f7ff fddb 	bl	800abf4 <_Balloc>
 800b03e:	4605      	mov	r5, r0
 800b040:	b948      	cbnz	r0, 800b056 <__lshift+0x3e>
 800b042:	4602      	mov	r2, r0
 800b044:	4b2a      	ldr	r3, [pc, #168]	; (800b0f0 <__lshift+0xd8>)
 800b046:	482b      	ldr	r0, [pc, #172]	; (800b0f4 <__lshift+0xdc>)
 800b048:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b04c:	f000 fd68 	bl	800bb20 <__assert_func>
 800b050:	3101      	adds	r1, #1
 800b052:	005b      	lsls	r3, r3, #1
 800b054:	e7ee      	b.n	800b034 <__lshift+0x1c>
 800b056:	2300      	movs	r3, #0
 800b058:	f100 0114 	add.w	r1, r0, #20
 800b05c:	f100 0210 	add.w	r2, r0, #16
 800b060:	4618      	mov	r0, r3
 800b062:	4553      	cmp	r3, sl
 800b064:	db37      	blt.n	800b0d6 <__lshift+0xbe>
 800b066:	6920      	ldr	r0, [r4, #16]
 800b068:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b06c:	f104 0314 	add.w	r3, r4, #20
 800b070:	f019 091f 	ands.w	r9, r9, #31
 800b074:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b078:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b07c:	d02f      	beq.n	800b0de <__lshift+0xc6>
 800b07e:	f1c9 0e20 	rsb	lr, r9, #32
 800b082:	468a      	mov	sl, r1
 800b084:	f04f 0c00 	mov.w	ip, #0
 800b088:	681a      	ldr	r2, [r3, #0]
 800b08a:	fa02 f209 	lsl.w	r2, r2, r9
 800b08e:	ea42 020c 	orr.w	r2, r2, ip
 800b092:	f84a 2b04 	str.w	r2, [sl], #4
 800b096:	f853 2b04 	ldr.w	r2, [r3], #4
 800b09a:	4298      	cmp	r0, r3
 800b09c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b0a0:	d8f2      	bhi.n	800b088 <__lshift+0x70>
 800b0a2:	1b03      	subs	r3, r0, r4
 800b0a4:	3b15      	subs	r3, #21
 800b0a6:	f023 0303 	bic.w	r3, r3, #3
 800b0aa:	3304      	adds	r3, #4
 800b0ac:	f104 0215 	add.w	r2, r4, #21
 800b0b0:	4290      	cmp	r0, r2
 800b0b2:	bf38      	it	cc
 800b0b4:	2304      	movcc	r3, #4
 800b0b6:	f841 c003 	str.w	ip, [r1, r3]
 800b0ba:	f1bc 0f00 	cmp.w	ip, #0
 800b0be:	d001      	beq.n	800b0c4 <__lshift+0xac>
 800b0c0:	f108 0602 	add.w	r6, r8, #2
 800b0c4:	3e01      	subs	r6, #1
 800b0c6:	4638      	mov	r0, r7
 800b0c8:	612e      	str	r6, [r5, #16]
 800b0ca:	4621      	mov	r1, r4
 800b0cc:	f7ff fdd2 	bl	800ac74 <_Bfree>
 800b0d0:	4628      	mov	r0, r5
 800b0d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0d6:	f842 0f04 	str.w	r0, [r2, #4]!
 800b0da:	3301      	adds	r3, #1
 800b0dc:	e7c1      	b.n	800b062 <__lshift+0x4a>
 800b0de:	3904      	subs	r1, #4
 800b0e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0e4:	f841 2f04 	str.w	r2, [r1, #4]!
 800b0e8:	4298      	cmp	r0, r3
 800b0ea:	d8f9      	bhi.n	800b0e0 <__lshift+0xc8>
 800b0ec:	e7ea      	b.n	800b0c4 <__lshift+0xac>
 800b0ee:	bf00      	nop
 800b0f0:	0800ca6b 	.word	0x0800ca6b
 800b0f4:	0800cadc 	.word	0x0800cadc

0800b0f8 <__mcmp>:
 800b0f8:	b530      	push	{r4, r5, lr}
 800b0fa:	6902      	ldr	r2, [r0, #16]
 800b0fc:	690c      	ldr	r4, [r1, #16]
 800b0fe:	1b12      	subs	r2, r2, r4
 800b100:	d10e      	bne.n	800b120 <__mcmp+0x28>
 800b102:	f100 0314 	add.w	r3, r0, #20
 800b106:	3114      	adds	r1, #20
 800b108:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b10c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b110:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b114:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b118:	42a5      	cmp	r5, r4
 800b11a:	d003      	beq.n	800b124 <__mcmp+0x2c>
 800b11c:	d305      	bcc.n	800b12a <__mcmp+0x32>
 800b11e:	2201      	movs	r2, #1
 800b120:	4610      	mov	r0, r2
 800b122:	bd30      	pop	{r4, r5, pc}
 800b124:	4283      	cmp	r3, r0
 800b126:	d3f3      	bcc.n	800b110 <__mcmp+0x18>
 800b128:	e7fa      	b.n	800b120 <__mcmp+0x28>
 800b12a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b12e:	e7f7      	b.n	800b120 <__mcmp+0x28>

0800b130 <__mdiff>:
 800b130:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b134:	460c      	mov	r4, r1
 800b136:	4606      	mov	r6, r0
 800b138:	4611      	mov	r1, r2
 800b13a:	4620      	mov	r0, r4
 800b13c:	4690      	mov	r8, r2
 800b13e:	f7ff ffdb 	bl	800b0f8 <__mcmp>
 800b142:	1e05      	subs	r5, r0, #0
 800b144:	d110      	bne.n	800b168 <__mdiff+0x38>
 800b146:	4629      	mov	r1, r5
 800b148:	4630      	mov	r0, r6
 800b14a:	f7ff fd53 	bl	800abf4 <_Balloc>
 800b14e:	b930      	cbnz	r0, 800b15e <__mdiff+0x2e>
 800b150:	4b3a      	ldr	r3, [pc, #232]	; (800b23c <__mdiff+0x10c>)
 800b152:	4602      	mov	r2, r0
 800b154:	f240 2132 	movw	r1, #562	; 0x232
 800b158:	4839      	ldr	r0, [pc, #228]	; (800b240 <__mdiff+0x110>)
 800b15a:	f000 fce1 	bl	800bb20 <__assert_func>
 800b15e:	2301      	movs	r3, #1
 800b160:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b164:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b168:	bfa4      	itt	ge
 800b16a:	4643      	movge	r3, r8
 800b16c:	46a0      	movge	r8, r4
 800b16e:	4630      	mov	r0, r6
 800b170:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b174:	bfa6      	itte	ge
 800b176:	461c      	movge	r4, r3
 800b178:	2500      	movge	r5, #0
 800b17a:	2501      	movlt	r5, #1
 800b17c:	f7ff fd3a 	bl	800abf4 <_Balloc>
 800b180:	b920      	cbnz	r0, 800b18c <__mdiff+0x5c>
 800b182:	4b2e      	ldr	r3, [pc, #184]	; (800b23c <__mdiff+0x10c>)
 800b184:	4602      	mov	r2, r0
 800b186:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b18a:	e7e5      	b.n	800b158 <__mdiff+0x28>
 800b18c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b190:	6926      	ldr	r6, [r4, #16]
 800b192:	60c5      	str	r5, [r0, #12]
 800b194:	f104 0914 	add.w	r9, r4, #20
 800b198:	f108 0514 	add.w	r5, r8, #20
 800b19c:	f100 0e14 	add.w	lr, r0, #20
 800b1a0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b1a4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b1a8:	f108 0210 	add.w	r2, r8, #16
 800b1ac:	46f2      	mov	sl, lr
 800b1ae:	2100      	movs	r1, #0
 800b1b0:	f859 3b04 	ldr.w	r3, [r9], #4
 800b1b4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b1b8:	fa1f f883 	uxth.w	r8, r3
 800b1bc:	fa11 f18b 	uxtah	r1, r1, fp
 800b1c0:	0c1b      	lsrs	r3, r3, #16
 800b1c2:	eba1 0808 	sub.w	r8, r1, r8
 800b1c6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b1ca:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b1ce:	fa1f f888 	uxth.w	r8, r8
 800b1d2:	1419      	asrs	r1, r3, #16
 800b1d4:	454e      	cmp	r6, r9
 800b1d6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b1da:	f84a 3b04 	str.w	r3, [sl], #4
 800b1de:	d8e7      	bhi.n	800b1b0 <__mdiff+0x80>
 800b1e0:	1b33      	subs	r3, r6, r4
 800b1e2:	3b15      	subs	r3, #21
 800b1e4:	f023 0303 	bic.w	r3, r3, #3
 800b1e8:	3304      	adds	r3, #4
 800b1ea:	3415      	adds	r4, #21
 800b1ec:	42a6      	cmp	r6, r4
 800b1ee:	bf38      	it	cc
 800b1f0:	2304      	movcc	r3, #4
 800b1f2:	441d      	add	r5, r3
 800b1f4:	4473      	add	r3, lr
 800b1f6:	469e      	mov	lr, r3
 800b1f8:	462e      	mov	r6, r5
 800b1fa:	4566      	cmp	r6, ip
 800b1fc:	d30e      	bcc.n	800b21c <__mdiff+0xec>
 800b1fe:	f10c 0203 	add.w	r2, ip, #3
 800b202:	1b52      	subs	r2, r2, r5
 800b204:	f022 0203 	bic.w	r2, r2, #3
 800b208:	3d03      	subs	r5, #3
 800b20a:	45ac      	cmp	ip, r5
 800b20c:	bf38      	it	cc
 800b20e:	2200      	movcc	r2, #0
 800b210:	441a      	add	r2, r3
 800b212:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b216:	b17b      	cbz	r3, 800b238 <__mdiff+0x108>
 800b218:	6107      	str	r7, [r0, #16]
 800b21a:	e7a3      	b.n	800b164 <__mdiff+0x34>
 800b21c:	f856 8b04 	ldr.w	r8, [r6], #4
 800b220:	fa11 f288 	uxtah	r2, r1, r8
 800b224:	1414      	asrs	r4, r2, #16
 800b226:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b22a:	b292      	uxth	r2, r2
 800b22c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b230:	f84e 2b04 	str.w	r2, [lr], #4
 800b234:	1421      	asrs	r1, r4, #16
 800b236:	e7e0      	b.n	800b1fa <__mdiff+0xca>
 800b238:	3f01      	subs	r7, #1
 800b23a:	e7ea      	b.n	800b212 <__mdiff+0xe2>
 800b23c:	0800ca6b 	.word	0x0800ca6b
 800b240:	0800cadc 	.word	0x0800cadc

0800b244 <__d2b>:
 800b244:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b248:	4689      	mov	r9, r1
 800b24a:	2101      	movs	r1, #1
 800b24c:	ec57 6b10 	vmov	r6, r7, d0
 800b250:	4690      	mov	r8, r2
 800b252:	f7ff fccf 	bl	800abf4 <_Balloc>
 800b256:	4604      	mov	r4, r0
 800b258:	b930      	cbnz	r0, 800b268 <__d2b+0x24>
 800b25a:	4602      	mov	r2, r0
 800b25c:	4b25      	ldr	r3, [pc, #148]	; (800b2f4 <__d2b+0xb0>)
 800b25e:	4826      	ldr	r0, [pc, #152]	; (800b2f8 <__d2b+0xb4>)
 800b260:	f240 310a 	movw	r1, #778	; 0x30a
 800b264:	f000 fc5c 	bl	800bb20 <__assert_func>
 800b268:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b26c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b270:	bb35      	cbnz	r5, 800b2c0 <__d2b+0x7c>
 800b272:	2e00      	cmp	r6, #0
 800b274:	9301      	str	r3, [sp, #4]
 800b276:	d028      	beq.n	800b2ca <__d2b+0x86>
 800b278:	4668      	mov	r0, sp
 800b27a:	9600      	str	r6, [sp, #0]
 800b27c:	f7ff fd82 	bl	800ad84 <__lo0bits>
 800b280:	9900      	ldr	r1, [sp, #0]
 800b282:	b300      	cbz	r0, 800b2c6 <__d2b+0x82>
 800b284:	9a01      	ldr	r2, [sp, #4]
 800b286:	f1c0 0320 	rsb	r3, r0, #32
 800b28a:	fa02 f303 	lsl.w	r3, r2, r3
 800b28e:	430b      	orrs	r3, r1
 800b290:	40c2      	lsrs	r2, r0
 800b292:	6163      	str	r3, [r4, #20]
 800b294:	9201      	str	r2, [sp, #4]
 800b296:	9b01      	ldr	r3, [sp, #4]
 800b298:	61a3      	str	r3, [r4, #24]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	bf14      	ite	ne
 800b29e:	2202      	movne	r2, #2
 800b2a0:	2201      	moveq	r2, #1
 800b2a2:	6122      	str	r2, [r4, #16]
 800b2a4:	b1d5      	cbz	r5, 800b2dc <__d2b+0x98>
 800b2a6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b2aa:	4405      	add	r5, r0
 800b2ac:	f8c9 5000 	str.w	r5, [r9]
 800b2b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b2b4:	f8c8 0000 	str.w	r0, [r8]
 800b2b8:	4620      	mov	r0, r4
 800b2ba:	b003      	add	sp, #12
 800b2bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b2c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b2c4:	e7d5      	b.n	800b272 <__d2b+0x2e>
 800b2c6:	6161      	str	r1, [r4, #20]
 800b2c8:	e7e5      	b.n	800b296 <__d2b+0x52>
 800b2ca:	a801      	add	r0, sp, #4
 800b2cc:	f7ff fd5a 	bl	800ad84 <__lo0bits>
 800b2d0:	9b01      	ldr	r3, [sp, #4]
 800b2d2:	6163      	str	r3, [r4, #20]
 800b2d4:	2201      	movs	r2, #1
 800b2d6:	6122      	str	r2, [r4, #16]
 800b2d8:	3020      	adds	r0, #32
 800b2da:	e7e3      	b.n	800b2a4 <__d2b+0x60>
 800b2dc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b2e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b2e4:	f8c9 0000 	str.w	r0, [r9]
 800b2e8:	6918      	ldr	r0, [r3, #16]
 800b2ea:	f7ff fd2b 	bl	800ad44 <__hi0bits>
 800b2ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b2f2:	e7df      	b.n	800b2b4 <__d2b+0x70>
 800b2f4:	0800ca6b 	.word	0x0800ca6b
 800b2f8:	0800cadc 	.word	0x0800cadc

0800b2fc <_calloc_r>:
 800b2fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b2fe:	fba1 2402 	umull	r2, r4, r1, r2
 800b302:	b94c      	cbnz	r4, 800b318 <_calloc_r+0x1c>
 800b304:	4611      	mov	r1, r2
 800b306:	9201      	str	r2, [sp, #4]
 800b308:	f000 f87a 	bl	800b400 <_malloc_r>
 800b30c:	9a01      	ldr	r2, [sp, #4]
 800b30e:	4605      	mov	r5, r0
 800b310:	b930      	cbnz	r0, 800b320 <_calloc_r+0x24>
 800b312:	4628      	mov	r0, r5
 800b314:	b003      	add	sp, #12
 800b316:	bd30      	pop	{r4, r5, pc}
 800b318:	220c      	movs	r2, #12
 800b31a:	6002      	str	r2, [r0, #0]
 800b31c:	2500      	movs	r5, #0
 800b31e:	e7f8      	b.n	800b312 <_calloc_r+0x16>
 800b320:	4621      	mov	r1, r4
 800b322:	f7fd fddf 	bl	8008ee4 <memset>
 800b326:	e7f4      	b.n	800b312 <_calloc_r+0x16>

0800b328 <_free_r>:
 800b328:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b32a:	2900      	cmp	r1, #0
 800b32c:	d044      	beq.n	800b3b8 <_free_r+0x90>
 800b32e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b332:	9001      	str	r0, [sp, #4]
 800b334:	2b00      	cmp	r3, #0
 800b336:	f1a1 0404 	sub.w	r4, r1, #4
 800b33a:	bfb8      	it	lt
 800b33c:	18e4      	addlt	r4, r4, r3
 800b33e:	f000 fc8f 	bl	800bc60 <__malloc_lock>
 800b342:	4a1e      	ldr	r2, [pc, #120]	; (800b3bc <_free_r+0x94>)
 800b344:	9801      	ldr	r0, [sp, #4]
 800b346:	6813      	ldr	r3, [r2, #0]
 800b348:	b933      	cbnz	r3, 800b358 <_free_r+0x30>
 800b34a:	6063      	str	r3, [r4, #4]
 800b34c:	6014      	str	r4, [r2, #0]
 800b34e:	b003      	add	sp, #12
 800b350:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b354:	f000 bc8a 	b.w	800bc6c <__malloc_unlock>
 800b358:	42a3      	cmp	r3, r4
 800b35a:	d908      	bls.n	800b36e <_free_r+0x46>
 800b35c:	6825      	ldr	r5, [r4, #0]
 800b35e:	1961      	adds	r1, r4, r5
 800b360:	428b      	cmp	r3, r1
 800b362:	bf01      	itttt	eq
 800b364:	6819      	ldreq	r1, [r3, #0]
 800b366:	685b      	ldreq	r3, [r3, #4]
 800b368:	1949      	addeq	r1, r1, r5
 800b36a:	6021      	streq	r1, [r4, #0]
 800b36c:	e7ed      	b.n	800b34a <_free_r+0x22>
 800b36e:	461a      	mov	r2, r3
 800b370:	685b      	ldr	r3, [r3, #4]
 800b372:	b10b      	cbz	r3, 800b378 <_free_r+0x50>
 800b374:	42a3      	cmp	r3, r4
 800b376:	d9fa      	bls.n	800b36e <_free_r+0x46>
 800b378:	6811      	ldr	r1, [r2, #0]
 800b37a:	1855      	adds	r5, r2, r1
 800b37c:	42a5      	cmp	r5, r4
 800b37e:	d10b      	bne.n	800b398 <_free_r+0x70>
 800b380:	6824      	ldr	r4, [r4, #0]
 800b382:	4421      	add	r1, r4
 800b384:	1854      	adds	r4, r2, r1
 800b386:	42a3      	cmp	r3, r4
 800b388:	6011      	str	r1, [r2, #0]
 800b38a:	d1e0      	bne.n	800b34e <_free_r+0x26>
 800b38c:	681c      	ldr	r4, [r3, #0]
 800b38e:	685b      	ldr	r3, [r3, #4]
 800b390:	6053      	str	r3, [r2, #4]
 800b392:	4421      	add	r1, r4
 800b394:	6011      	str	r1, [r2, #0]
 800b396:	e7da      	b.n	800b34e <_free_r+0x26>
 800b398:	d902      	bls.n	800b3a0 <_free_r+0x78>
 800b39a:	230c      	movs	r3, #12
 800b39c:	6003      	str	r3, [r0, #0]
 800b39e:	e7d6      	b.n	800b34e <_free_r+0x26>
 800b3a0:	6825      	ldr	r5, [r4, #0]
 800b3a2:	1961      	adds	r1, r4, r5
 800b3a4:	428b      	cmp	r3, r1
 800b3a6:	bf04      	itt	eq
 800b3a8:	6819      	ldreq	r1, [r3, #0]
 800b3aa:	685b      	ldreq	r3, [r3, #4]
 800b3ac:	6063      	str	r3, [r4, #4]
 800b3ae:	bf04      	itt	eq
 800b3b0:	1949      	addeq	r1, r1, r5
 800b3b2:	6021      	streq	r1, [r4, #0]
 800b3b4:	6054      	str	r4, [r2, #4]
 800b3b6:	e7ca      	b.n	800b34e <_free_r+0x26>
 800b3b8:	b003      	add	sp, #12
 800b3ba:	bd30      	pop	{r4, r5, pc}
 800b3bc:	20004df8 	.word	0x20004df8

0800b3c0 <sbrk_aligned>:
 800b3c0:	b570      	push	{r4, r5, r6, lr}
 800b3c2:	4e0e      	ldr	r6, [pc, #56]	; (800b3fc <sbrk_aligned+0x3c>)
 800b3c4:	460c      	mov	r4, r1
 800b3c6:	6831      	ldr	r1, [r6, #0]
 800b3c8:	4605      	mov	r5, r0
 800b3ca:	b911      	cbnz	r1, 800b3d2 <sbrk_aligned+0x12>
 800b3cc:	f000 fb42 	bl	800ba54 <_sbrk_r>
 800b3d0:	6030      	str	r0, [r6, #0]
 800b3d2:	4621      	mov	r1, r4
 800b3d4:	4628      	mov	r0, r5
 800b3d6:	f000 fb3d 	bl	800ba54 <_sbrk_r>
 800b3da:	1c43      	adds	r3, r0, #1
 800b3dc:	d00a      	beq.n	800b3f4 <sbrk_aligned+0x34>
 800b3de:	1cc4      	adds	r4, r0, #3
 800b3e0:	f024 0403 	bic.w	r4, r4, #3
 800b3e4:	42a0      	cmp	r0, r4
 800b3e6:	d007      	beq.n	800b3f8 <sbrk_aligned+0x38>
 800b3e8:	1a21      	subs	r1, r4, r0
 800b3ea:	4628      	mov	r0, r5
 800b3ec:	f000 fb32 	bl	800ba54 <_sbrk_r>
 800b3f0:	3001      	adds	r0, #1
 800b3f2:	d101      	bne.n	800b3f8 <sbrk_aligned+0x38>
 800b3f4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b3f8:	4620      	mov	r0, r4
 800b3fa:	bd70      	pop	{r4, r5, r6, pc}
 800b3fc:	20004dfc 	.word	0x20004dfc

0800b400 <_malloc_r>:
 800b400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b404:	1ccd      	adds	r5, r1, #3
 800b406:	f025 0503 	bic.w	r5, r5, #3
 800b40a:	3508      	adds	r5, #8
 800b40c:	2d0c      	cmp	r5, #12
 800b40e:	bf38      	it	cc
 800b410:	250c      	movcc	r5, #12
 800b412:	2d00      	cmp	r5, #0
 800b414:	4607      	mov	r7, r0
 800b416:	db01      	blt.n	800b41c <_malloc_r+0x1c>
 800b418:	42a9      	cmp	r1, r5
 800b41a:	d905      	bls.n	800b428 <_malloc_r+0x28>
 800b41c:	230c      	movs	r3, #12
 800b41e:	603b      	str	r3, [r7, #0]
 800b420:	2600      	movs	r6, #0
 800b422:	4630      	mov	r0, r6
 800b424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b428:	4e2e      	ldr	r6, [pc, #184]	; (800b4e4 <_malloc_r+0xe4>)
 800b42a:	f000 fc19 	bl	800bc60 <__malloc_lock>
 800b42e:	6833      	ldr	r3, [r6, #0]
 800b430:	461c      	mov	r4, r3
 800b432:	bb34      	cbnz	r4, 800b482 <_malloc_r+0x82>
 800b434:	4629      	mov	r1, r5
 800b436:	4638      	mov	r0, r7
 800b438:	f7ff ffc2 	bl	800b3c0 <sbrk_aligned>
 800b43c:	1c43      	adds	r3, r0, #1
 800b43e:	4604      	mov	r4, r0
 800b440:	d14d      	bne.n	800b4de <_malloc_r+0xde>
 800b442:	6834      	ldr	r4, [r6, #0]
 800b444:	4626      	mov	r6, r4
 800b446:	2e00      	cmp	r6, #0
 800b448:	d140      	bne.n	800b4cc <_malloc_r+0xcc>
 800b44a:	6823      	ldr	r3, [r4, #0]
 800b44c:	4631      	mov	r1, r6
 800b44e:	4638      	mov	r0, r7
 800b450:	eb04 0803 	add.w	r8, r4, r3
 800b454:	f000 fafe 	bl	800ba54 <_sbrk_r>
 800b458:	4580      	cmp	r8, r0
 800b45a:	d13a      	bne.n	800b4d2 <_malloc_r+0xd2>
 800b45c:	6821      	ldr	r1, [r4, #0]
 800b45e:	3503      	adds	r5, #3
 800b460:	1a6d      	subs	r5, r5, r1
 800b462:	f025 0503 	bic.w	r5, r5, #3
 800b466:	3508      	adds	r5, #8
 800b468:	2d0c      	cmp	r5, #12
 800b46a:	bf38      	it	cc
 800b46c:	250c      	movcc	r5, #12
 800b46e:	4629      	mov	r1, r5
 800b470:	4638      	mov	r0, r7
 800b472:	f7ff ffa5 	bl	800b3c0 <sbrk_aligned>
 800b476:	3001      	adds	r0, #1
 800b478:	d02b      	beq.n	800b4d2 <_malloc_r+0xd2>
 800b47a:	6823      	ldr	r3, [r4, #0]
 800b47c:	442b      	add	r3, r5
 800b47e:	6023      	str	r3, [r4, #0]
 800b480:	e00e      	b.n	800b4a0 <_malloc_r+0xa0>
 800b482:	6822      	ldr	r2, [r4, #0]
 800b484:	1b52      	subs	r2, r2, r5
 800b486:	d41e      	bmi.n	800b4c6 <_malloc_r+0xc6>
 800b488:	2a0b      	cmp	r2, #11
 800b48a:	d916      	bls.n	800b4ba <_malloc_r+0xba>
 800b48c:	1961      	adds	r1, r4, r5
 800b48e:	42a3      	cmp	r3, r4
 800b490:	6025      	str	r5, [r4, #0]
 800b492:	bf18      	it	ne
 800b494:	6059      	strne	r1, [r3, #4]
 800b496:	6863      	ldr	r3, [r4, #4]
 800b498:	bf08      	it	eq
 800b49a:	6031      	streq	r1, [r6, #0]
 800b49c:	5162      	str	r2, [r4, r5]
 800b49e:	604b      	str	r3, [r1, #4]
 800b4a0:	4638      	mov	r0, r7
 800b4a2:	f104 060b 	add.w	r6, r4, #11
 800b4a6:	f000 fbe1 	bl	800bc6c <__malloc_unlock>
 800b4aa:	f026 0607 	bic.w	r6, r6, #7
 800b4ae:	1d23      	adds	r3, r4, #4
 800b4b0:	1af2      	subs	r2, r6, r3
 800b4b2:	d0b6      	beq.n	800b422 <_malloc_r+0x22>
 800b4b4:	1b9b      	subs	r3, r3, r6
 800b4b6:	50a3      	str	r3, [r4, r2]
 800b4b8:	e7b3      	b.n	800b422 <_malloc_r+0x22>
 800b4ba:	6862      	ldr	r2, [r4, #4]
 800b4bc:	42a3      	cmp	r3, r4
 800b4be:	bf0c      	ite	eq
 800b4c0:	6032      	streq	r2, [r6, #0]
 800b4c2:	605a      	strne	r2, [r3, #4]
 800b4c4:	e7ec      	b.n	800b4a0 <_malloc_r+0xa0>
 800b4c6:	4623      	mov	r3, r4
 800b4c8:	6864      	ldr	r4, [r4, #4]
 800b4ca:	e7b2      	b.n	800b432 <_malloc_r+0x32>
 800b4cc:	4634      	mov	r4, r6
 800b4ce:	6876      	ldr	r6, [r6, #4]
 800b4d0:	e7b9      	b.n	800b446 <_malloc_r+0x46>
 800b4d2:	230c      	movs	r3, #12
 800b4d4:	603b      	str	r3, [r7, #0]
 800b4d6:	4638      	mov	r0, r7
 800b4d8:	f000 fbc8 	bl	800bc6c <__malloc_unlock>
 800b4dc:	e7a1      	b.n	800b422 <_malloc_r+0x22>
 800b4de:	6025      	str	r5, [r4, #0]
 800b4e0:	e7de      	b.n	800b4a0 <_malloc_r+0xa0>
 800b4e2:	bf00      	nop
 800b4e4:	20004df8 	.word	0x20004df8

0800b4e8 <__ssputs_r>:
 800b4e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4ec:	688e      	ldr	r6, [r1, #8]
 800b4ee:	429e      	cmp	r6, r3
 800b4f0:	4682      	mov	sl, r0
 800b4f2:	460c      	mov	r4, r1
 800b4f4:	4690      	mov	r8, r2
 800b4f6:	461f      	mov	r7, r3
 800b4f8:	d838      	bhi.n	800b56c <__ssputs_r+0x84>
 800b4fa:	898a      	ldrh	r2, [r1, #12]
 800b4fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b500:	d032      	beq.n	800b568 <__ssputs_r+0x80>
 800b502:	6825      	ldr	r5, [r4, #0]
 800b504:	6909      	ldr	r1, [r1, #16]
 800b506:	eba5 0901 	sub.w	r9, r5, r1
 800b50a:	6965      	ldr	r5, [r4, #20]
 800b50c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b510:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b514:	3301      	adds	r3, #1
 800b516:	444b      	add	r3, r9
 800b518:	106d      	asrs	r5, r5, #1
 800b51a:	429d      	cmp	r5, r3
 800b51c:	bf38      	it	cc
 800b51e:	461d      	movcc	r5, r3
 800b520:	0553      	lsls	r3, r2, #21
 800b522:	d531      	bpl.n	800b588 <__ssputs_r+0xa0>
 800b524:	4629      	mov	r1, r5
 800b526:	f7ff ff6b 	bl	800b400 <_malloc_r>
 800b52a:	4606      	mov	r6, r0
 800b52c:	b950      	cbnz	r0, 800b544 <__ssputs_r+0x5c>
 800b52e:	230c      	movs	r3, #12
 800b530:	f8ca 3000 	str.w	r3, [sl]
 800b534:	89a3      	ldrh	r3, [r4, #12]
 800b536:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b53a:	81a3      	strh	r3, [r4, #12]
 800b53c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b544:	6921      	ldr	r1, [r4, #16]
 800b546:	464a      	mov	r2, r9
 800b548:	f7fd fcbe 	bl	8008ec8 <memcpy>
 800b54c:	89a3      	ldrh	r3, [r4, #12]
 800b54e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b552:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b556:	81a3      	strh	r3, [r4, #12]
 800b558:	6126      	str	r6, [r4, #16]
 800b55a:	6165      	str	r5, [r4, #20]
 800b55c:	444e      	add	r6, r9
 800b55e:	eba5 0509 	sub.w	r5, r5, r9
 800b562:	6026      	str	r6, [r4, #0]
 800b564:	60a5      	str	r5, [r4, #8]
 800b566:	463e      	mov	r6, r7
 800b568:	42be      	cmp	r6, r7
 800b56a:	d900      	bls.n	800b56e <__ssputs_r+0x86>
 800b56c:	463e      	mov	r6, r7
 800b56e:	6820      	ldr	r0, [r4, #0]
 800b570:	4632      	mov	r2, r6
 800b572:	4641      	mov	r1, r8
 800b574:	f000 fb5a 	bl	800bc2c <memmove>
 800b578:	68a3      	ldr	r3, [r4, #8]
 800b57a:	1b9b      	subs	r3, r3, r6
 800b57c:	60a3      	str	r3, [r4, #8]
 800b57e:	6823      	ldr	r3, [r4, #0]
 800b580:	4433      	add	r3, r6
 800b582:	6023      	str	r3, [r4, #0]
 800b584:	2000      	movs	r0, #0
 800b586:	e7db      	b.n	800b540 <__ssputs_r+0x58>
 800b588:	462a      	mov	r2, r5
 800b58a:	f000 fb75 	bl	800bc78 <_realloc_r>
 800b58e:	4606      	mov	r6, r0
 800b590:	2800      	cmp	r0, #0
 800b592:	d1e1      	bne.n	800b558 <__ssputs_r+0x70>
 800b594:	6921      	ldr	r1, [r4, #16]
 800b596:	4650      	mov	r0, sl
 800b598:	f7ff fec6 	bl	800b328 <_free_r>
 800b59c:	e7c7      	b.n	800b52e <__ssputs_r+0x46>
	...

0800b5a0 <_svfiprintf_r>:
 800b5a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5a4:	4698      	mov	r8, r3
 800b5a6:	898b      	ldrh	r3, [r1, #12]
 800b5a8:	061b      	lsls	r3, r3, #24
 800b5aa:	b09d      	sub	sp, #116	; 0x74
 800b5ac:	4607      	mov	r7, r0
 800b5ae:	460d      	mov	r5, r1
 800b5b0:	4614      	mov	r4, r2
 800b5b2:	d50e      	bpl.n	800b5d2 <_svfiprintf_r+0x32>
 800b5b4:	690b      	ldr	r3, [r1, #16]
 800b5b6:	b963      	cbnz	r3, 800b5d2 <_svfiprintf_r+0x32>
 800b5b8:	2140      	movs	r1, #64	; 0x40
 800b5ba:	f7ff ff21 	bl	800b400 <_malloc_r>
 800b5be:	6028      	str	r0, [r5, #0]
 800b5c0:	6128      	str	r0, [r5, #16]
 800b5c2:	b920      	cbnz	r0, 800b5ce <_svfiprintf_r+0x2e>
 800b5c4:	230c      	movs	r3, #12
 800b5c6:	603b      	str	r3, [r7, #0]
 800b5c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b5cc:	e0d1      	b.n	800b772 <_svfiprintf_r+0x1d2>
 800b5ce:	2340      	movs	r3, #64	; 0x40
 800b5d0:	616b      	str	r3, [r5, #20]
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	9309      	str	r3, [sp, #36]	; 0x24
 800b5d6:	2320      	movs	r3, #32
 800b5d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b5dc:	f8cd 800c 	str.w	r8, [sp, #12]
 800b5e0:	2330      	movs	r3, #48	; 0x30
 800b5e2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b78c <_svfiprintf_r+0x1ec>
 800b5e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b5ea:	f04f 0901 	mov.w	r9, #1
 800b5ee:	4623      	mov	r3, r4
 800b5f0:	469a      	mov	sl, r3
 800b5f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b5f6:	b10a      	cbz	r2, 800b5fc <_svfiprintf_r+0x5c>
 800b5f8:	2a25      	cmp	r2, #37	; 0x25
 800b5fa:	d1f9      	bne.n	800b5f0 <_svfiprintf_r+0x50>
 800b5fc:	ebba 0b04 	subs.w	fp, sl, r4
 800b600:	d00b      	beq.n	800b61a <_svfiprintf_r+0x7a>
 800b602:	465b      	mov	r3, fp
 800b604:	4622      	mov	r2, r4
 800b606:	4629      	mov	r1, r5
 800b608:	4638      	mov	r0, r7
 800b60a:	f7ff ff6d 	bl	800b4e8 <__ssputs_r>
 800b60e:	3001      	adds	r0, #1
 800b610:	f000 80aa 	beq.w	800b768 <_svfiprintf_r+0x1c8>
 800b614:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b616:	445a      	add	r2, fp
 800b618:	9209      	str	r2, [sp, #36]	; 0x24
 800b61a:	f89a 3000 	ldrb.w	r3, [sl]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	f000 80a2 	beq.w	800b768 <_svfiprintf_r+0x1c8>
 800b624:	2300      	movs	r3, #0
 800b626:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b62a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b62e:	f10a 0a01 	add.w	sl, sl, #1
 800b632:	9304      	str	r3, [sp, #16]
 800b634:	9307      	str	r3, [sp, #28]
 800b636:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b63a:	931a      	str	r3, [sp, #104]	; 0x68
 800b63c:	4654      	mov	r4, sl
 800b63e:	2205      	movs	r2, #5
 800b640:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b644:	4851      	ldr	r0, [pc, #324]	; (800b78c <_svfiprintf_r+0x1ec>)
 800b646:	f7f4 fdd3 	bl	80001f0 <memchr>
 800b64a:	9a04      	ldr	r2, [sp, #16]
 800b64c:	b9d8      	cbnz	r0, 800b686 <_svfiprintf_r+0xe6>
 800b64e:	06d0      	lsls	r0, r2, #27
 800b650:	bf44      	itt	mi
 800b652:	2320      	movmi	r3, #32
 800b654:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b658:	0711      	lsls	r1, r2, #28
 800b65a:	bf44      	itt	mi
 800b65c:	232b      	movmi	r3, #43	; 0x2b
 800b65e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b662:	f89a 3000 	ldrb.w	r3, [sl]
 800b666:	2b2a      	cmp	r3, #42	; 0x2a
 800b668:	d015      	beq.n	800b696 <_svfiprintf_r+0xf6>
 800b66a:	9a07      	ldr	r2, [sp, #28]
 800b66c:	4654      	mov	r4, sl
 800b66e:	2000      	movs	r0, #0
 800b670:	f04f 0c0a 	mov.w	ip, #10
 800b674:	4621      	mov	r1, r4
 800b676:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b67a:	3b30      	subs	r3, #48	; 0x30
 800b67c:	2b09      	cmp	r3, #9
 800b67e:	d94e      	bls.n	800b71e <_svfiprintf_r+0x17e>
 800b680:	b1b0      	cbz	r0, 800b6b0 <_svfiprintf_r+0x110>
 800b682:	9207      	str	r2, [sp, #28]
 800b684:	e014      	b.n	800b6b0 <_svfiprintf_r+0x110>
 800b686:	eba0 0308 	sub.w	r3, r0, r8
 800b68a:	fa09 f303 	lsl.w	r3, r9, r3
 800b68e:	4313      	orrs	r3, r2
 800b690:	9304      	str	r3, [sp, #16]
 800b692:	46a2      	mov	sl, r4
 800b694:	e7d2      	b.n	800b63c <_svfiprintf_r+0x9c>
 800b696:	9b03      	ldr	r3, [sp, #12]
 800b698:	1d19      	adds	r1, r3, #4
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	9103      	str	r1, [sp, #12]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	bfbb      	ittet	lt
 800b6a2:	425b      	neglt	r3, r3
 800b6a4:	f042 0202 	orrlt.w	r2, r2, #2
 800b6a8:	9307      	strge	r3, [sp, #28]
 800b6aa:	9307      	strlt	r3, [sp, #28]
 800b6ac:	bfb8      	it	lt
 800b6ae:	9204      	strlt	r2, [sp, #16]
 800b6b0:	7823      	ldrb	r3, [r4, #0]
 800b6b2:	2b2e      	cmp	r3, #46	; 0x2e
 800b6b4:	d10c      	bne.n	800b6d0 <_svfiprintf_r+0x130>
 800b6b6:	7863      	ldrb	r3, [r4, #1]
 800b6b8:	2b2a      	cmp	r3, #42	; 0x2a
 800b6ba:	d135      	bne.n	800b728 <_svfiprintf_r+0x188>
 800b6bc:	9b03      	ldr	r3, [sp, #12]
 800b6be:	1d1a      	adds	r2, r3, #4
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	9203      	str	r2, [sp, #12]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	bfb8      	it	lt
 800b6c8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b6cc:	3402      	adds	r4, #2
 800b6ce:	9305      	str	r3, [sp, #20]
 800b6d0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b79c <_svfiprintf_r+0x1fc>
 800b6d4:	7821      	ldrb	r1, [r4, #0]
 800b6d6:	2203      	movs	r2, #3
 800b6d8:	4650      	mov	r0, sl
 800b6da:	f7f4 fd89 	bl	80001f0 <memchr>
 800b6de:	b140      	cbz	r0, 800b6f2 <_svfiprintf_r+0x152>
 800b6e0:	2340      	movs	r3, #64	; 0x40
 800b6e2:	eba0 000a 	sub.w	r0, r0, sl
 800b6e6:	fa03 f000 	lsl.w	r0, r3, r0
 800b6ea:	9b04      	ldr	r3, [sp, #16]
 800b6ec:	4303      	orrs	r3, r0
 800b6ee:	3401      	adds	r4, #1
 800b6f0:	9304      	str	r3, [sp, #16]
 800b6f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6f6:	4826      	ldr	r0, [pc, #152]	; (800b790 <_svfiprintf_r+0x1f0>)
 800b6f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b6fc:	2206      	movs	r2, #6
 800b6fe:	f7f4 fd77 	bl	80001f0 <memchr>
 800b702:	2800      	cmp	r0, #0
 800b704:	d038      	beq.n	800b778 <_svfiprintf_r+0x1d8>
 800b706:	4b23      	ldr	r3, [pc, #140]	; (800b794 <_svfiprintf_r+0x1f4>)
 800b708:	bb1b      	cbnz	r3, 800b752 <_svfiprintf_r+0x1b2>
 800b70a:	9b03      	ldr	r3, [sp, #12]
 800b70c:	3307      	adds	r3, #7
 800b70e:	f023 0307 	bic.w	r3, r3, #7
 800b712:	3308      	adds	r3, #8
 800b714:	9303      	str	r3, [sp, #12]
 800b716:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b718:	4433      	add	r3, r6
 800b71a:	9309      	str	r3, [sp, #36]	; 0x24
 800b71c:	e767      	b.n	800b5ee <_svfiprintf_r+0x4e>
 800b71e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b722:	460c      	mov	r4, r1
 800b724:	2001      	movs	r0, #1
 800b726:	e7a5      	b.n	800b674 <_svfiprintf_r+0xd4>
 800b728:	2300      	movs	r3, #0
 800b72a:	3401      	adds	r4, #1
 800b72c:	9305      	str	r3, [sp, #20]
 800b72e:	4619      	mov	r1, r3
 800b730:	f04f 0c0a 	mov.w	ip, #10
 800b734:	4620      	mov	r0, r4
 800b736:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b73a:	3a30      	subs	r2, #48	; 0x30
 800b73c:	2a09      	cmp	r2, #9
 800b73e:	d903      	bls.n	800b748 <_svfiprintf_r+0x1a8>
 800b740:	2b00      	cmp	r3, #0
 800b742:	d0c5      	beq.n	800b6d0 <_svfiprintf_r+0x130>
 800b744:	9105      	str	r1, [sp, #20]
 800b746:	e7c3      	b.n	800b6d0 <_svfiprintf_r+0x130>
 800b748:	fb0c 2101 	mla	r1, ip, r1, r2
 800b74c:	4604      	mov	r4, r0
 800b74e:	2301      	movs	r3, #1
 800b750:	e7f0      	b.n	800b734 <_svfiprintf_r+0x194>
 800b752:	ab03      	add	r3, sp, #12
 800b754:	9300      	str	r3, [sp, #0]
 800b756:	462a      	mov	r2, r5
 800b758:	4b0f      	ldr	r3, [pc, #60]	; (800b798 <_svfiprintf_r+0x1f8>)
 800b75a:	a904      	add	r1, sp, #16
 800b75c:	4638      	mov	r0, r7
 800b75e:	f7fd fc69 	bl	8009034 <_printf_float>
 800b762:	1c42      	adds	r2, r0, #1
 800b764:	4606      	mov	r6, r0
 800b766:	d1d6      	bne.n	800b716 <_svfiprintf_r+0x176>
 800b768:	89ab      	ldrh	r3, [r5, #12]
 800b76a:	065b      	lsls	r3, r3, #25
 800b76c:	f53f af2c 	bmi.w	800b5c8 <_svfiprintf_r+0x28>
 800b770:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b772:	b01d      	add	sp, #116	; 0x74
 800b774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b778:	ab03      	add	r3, sp, #12
 800b77a:	9300      	str	r3, [sp, #0]
 800b77c:	462a      	mov	r2, r5
 800b77e:	4b06      	ldr	r3, [pc, #24]	; (800b798 <_svfiprintf_r+0x1f8>)
 800b780:	a904      	add	r1, sp, #16
 800b782:	4638      	mov	r0, r7
 800b784:	f7fd fefa 	bl	800957c <_printf_i>
 800b788:	e7eb      	b.n	800b762 <_svfiprintf_r+0x1c2>
 800b78a:	bf00      	nop
 800b78c:	0800cc34 	.word	0x0800cc34
 800b790:	0800cc3e 	.word	0x0800cc3e
 800b794:	08009035 	.word	0x08009035
 800b798:	0800b4e9 	.word	0x0800b4e9
 800b79c:	0800cc3a 	.word	0x0800cc3a

0800b7a0 <__sfputc_r>:
 800b7a0:	6893      	ldr	r3, [r2, #8]
 800b7a2:	3b01      	subs	r3, #1
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	b410      	push	{r4}
 800b7a8:	6093      	str	r3, [r2, #8]
 800b7aa:	da08      	bge.n	800b7be <__sfputc_r+0x1e>
 800b7ac:	6994      	ldr	r4, [r2, #24]
 800b7ae:	42a3      	cmp	r3, r4
 800b7b0:	db01      	blt.n	800b7b6 <__sfputc_r+0x16>
 800b7b2:	290a      	cmp	r1, #10
 800b7b4:	d103      	bne.n	800b7be <__sfputc_r+0x1e>
 800b7b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b7ba:	f7fe b8b5 	b.w	8009928 <__swbuf_r>
 800b7be:	6813      	ldr	r3, [r2, #0]
 800b7c0:	1c58      	adds	r0, r3, #1
 800b7c2:	6010      	str	r0, [r2, #0]
 800b7c4:	7019      	strb	r1, [r3, #0]
 800b7c6:	4608      	mov	r0, r1
 800b7c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b7cc:	4770      	bx	lr

0800b7ce <__sfputs_r>:
 800b7ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7d0:	4606      	mov	r6, r0
 800b7d2:	460f      	mov	r7, r1
 800b7d4:	4614      	mov	r4, r2
 800b7d6:	18d5      	adds	r5, r2, r3
 800b7d8:	42ac      	cmp	r4, r5
 800b7da:	d101      	bne.n	800b7e0 <__sfputs_r+0x12>
 800b7dc:	2000      	movs	r0, #0
 800b7de:	e007      	b.n	800b7f0 <__sfputs_r+0x22>
 800b7e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7e4:	463a      	mov	r2, r7
 800b7e6:	4630      	mov	r0, r6
 800b7e8:	f7ff ffda 	bl	800b7a0 <__sfputc_r>
 800b7ec:	1c43      	adds	r3, r0, #1
 800b7ee:	d1f3      	bne.n	800b7d8 <__sfputs_r+0xa>
 800b7f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b7f4 <_vfiprintf_r>:
 800b7f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7f8:	460d      	mov	r5, r1
 800b7fa:	b09d      	sub	sp, #116	; 0x74
 800b7fc:	4614      	mov	r4, r2
 800b7fe:	4698      	mov	r8, r3
 800b800:	4606      	mov	r6, r0
 800b802:	b118      	cbz	r0, 800b80c <_vfiprintf_r+0x18>
 800b804:	6983      	ldr	r3, [r0, #24]
 800b806:	b90b      	cbnz	r3, 800b80c <_vfiprintf_r+0x18>
 800b808:	f7ff f8e2 	bl	800a9d0 <__sinit>
 800b80c:	4b89      	ldr	r3, [pc, #548]	; (800ba34 <_vfiprintf_r+0x240>)
 800b80e:	429d      	cmp	r5, r3
 800b810:	d11b      	bne.n	800b84a <_vfiprintf_r+0x56>
 800b812:	6875      	ldr	r5, [r6, #4]
 800b814:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b816:	07d9      	lsls	r1, r3, #31
 800b818:	d405      	bmi.n	800b826 <_vfiprintf_r+0x32>
 800b81a:	89ab      	ldrh	r3, [r5, #12]
 800b81c:	059a      	lsls	r2, r3, #22
 800b81e:	d402      	bmi.n	800b826 <_vfiprintf_r+0x32>
 800b820:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b822:	f7ff f978 	bl	800ab16 <__retarget_lock_acquire_recursive>
 800b826:	89ab      	ldrh	r3, [r5, #12]
 800b828:	071b      	lsls	r3, r3, #28
 800b82a:	d501      	bpl.n	800b830 <_vfiprintf_r+0x3c>
 800b82c:	692b      	ldr	r3, [r5, #16]
 800b82e:	b9eb      	cbnz	r3, 800b86c <_vfiprintf_r+0x78>
 800b830:	4629      	mov	r1, r5
 800b832:	4630      	mov	r0, r6
 800b834:	f7fe f8ca 	bl	80099cc <__swsetup_r>
 800b838:	b1c0      	cbz	r0, 800b86c <_vfiprintf_r+0x78>
 800b83a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b83c:	07dc      	lsls	r4, r3, #31
 800b83e:	d50e      	bpl.n	800b85e <_vfiprintf_r+0x6a>
 800b840:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b844:	b01d      	add	sp, #116	; 0x74
 800b846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b84a:	4b7b      	ldr	r3, [pc, #492]	; (800ba38 <_vfiprintf_r+0x244>)
 800b84c:	429d      	cmp	r5, r3
 800b84e:	d101      	bne.n	800b854 <_vfiprintf_r+0x60>
 800b850:	68b5      	ldr	r5, [r6, #8]
 800b852:	e7df      	b.n	800b814 <_vfiprintf_r+0x20>
 800b854:	4b79      	ldr	r3, [pc, #484]	; (800ba3c <_vfiprintf_r+0x248>)
 800b856:	429d      	cmp	r5, r3
 800b858:	bf08      	it	eq
 800b85a:	68f5      	ldreq	r5, [r6, #12]
 800b85c:	e7da      	b.n	800b814 <_vfiprintf_r+0x20>
 800b85e:	89ab      	ldrh	r3, [r5, #12]
 800b860:	0598      	lsls	r0, r3, #22
 800b862:	d4ed      	bmi.n	800b840 <_vfiprintf_r+0x4c>
 800b864:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b866:	f7ff f957 	bl	800ab18 <__retarget_lock_release_recursive>
 800b86a:	e7e9      	b.n	800b840 <_vfiprintf_r+0x4c>
 800b86c:	2300      	movs	r3, #0
 800b86e:	9309      	str	r3, [sp, #36]	; 0x24
 800b870:	2320      	movs	r3, #32
 800b872:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b876:	f8cd 800c 	str.w	r8, [sp, #12]
 800b87a:	2330      	movs	r3, #48	; 0x30
 800b87c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ba40 <_vfiprintf_r+0x24c>
 800b880:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b884:	f04f 0901 	mov.w	r9, #1
 800b888:	4623      	mov	r3, r4
 800b88a:	469a      	mov	sl, r3
 800b88c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b890:	b10a      	cbz	r2, 800b896 <_vfiprintf_r+0xa2>
 800b892:	2a25      	cmp	r2, #37	; 0x25
 800b894:	d1f9      	bne.n	800b88a <_vfiprintf_r+0x96>
 800b896:	ebba 0b04 	subs.w	fp, sl, r4
 800b89a:	d00b      	beq.n	800b8b4 <_vfiprintf_r+0xc0>
 800b89c:	465b      	mov	r3, fp
 800b89e:	4622      	mov	r2, r4
 800b8a0:	4629      	mov	r1, r5
 800b8a2:	4630      	mov	r0, r6
 800b8a4:	f7ff ff93 	bl	800b7ce <__sfputs_r>
 800b8a8:	3001      	adds	r0, #1
 800b8aa:	f000 80aa 	beq.w	800ba02 <_vfiprintf_r+0x20e>
 800b8ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b8b0:	445a      	add	r2, fp
 800b8b2:	9209      	str	r2, [sp, #36]	; 0x24
 800b8b4:	f89a 3000 	ldrb.w	r3, [sl]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	f000 80a2 	beq.w	800ba02 <_vfiprintf_r+0x20e>
 800b8be:	2300      	movs	r3, #0
 800b8c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b8c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b8c8:	f10a 0a01 	add.w	sl, sl, #1
 800b8cc:	9304      	str	r3, [sp, #16]
 800b8ce:	9307      	str	r3, [sp, #28]
 800b8d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b8d4:	931a      	str	r3, [sp, #104]	; 0x68
 800b8d6:	4654      	mov	r4, sl
 800b8d8:	2205      	movs	r2, #5
 800b8da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8de:	4858      	ldr	r0, [pc, #352]	; (800ba40 <_vfiprintf_r+0x24c>)
 800b8e0:	f7f4 fc86 	bl	80001f0 <memchr>
 800b8e4:	9a04      	ldr	r2, [sp, #16]
 800b8e6:	b9d8      	cbnz	r0, 800b920 <_vfiprintf_r+0x12c>
 800b8e8:	06d1      	lsls	r1, r2, #27
 800b8ea:	bf44      	itt	mi
 800b8ec:	2320      	movmi	r3, #32
 800b8ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b8f2:	0713      	lsls	r3, r2, #28
 800b8f4:	bf44      	itt	mi
 800b8f6:	232b      	movmi	r3, #43	; 0x2b
 800b8f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b8fc:	f89a 3000 	ldrb.w	r3, [sl]
 800b900:	2b2a      	cmp	r3, #42	; 0x2a
 800b902:	d015      	beq.n	800b930 <_vfiprintf_r+0x13c>
 800b904:	9a07      	ldr	r2, [sp, #28]
 800b906:	4654      	mov	r4, sl
 800b908:	2000      	movs	r0, #0
 800b90a:	f04f 0c0a 	mov.w	ip, #10
 800b90e:	4621      	mov	r1, r4
 800b910:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b914:	3b30      	subs	r3, #48	; 0x30
 800b916:	2b09      	cmp	r3, #9
 800b918:	d94e      	bls.n	800b9b8 <_vfiprintf_r+0x1c4>
 800b91a:	b1b0      	cbz	r0, 800b94a <_vfiprintf_r+0x156>
 800b91c:	9207      	str	r2, [sp, #28]
 800b91e:	e014      	b.n	800b94a <_vfiprintf_r+0x156>
 800b920:	eba0 0308 	sub.w	r3, r0, r8
 800b924:	fa09 f303 	lsl.w	r3, r9, r3
 800b928:	4313      	orrs	r3, r2
 800b92a:	9304      	str	r3, [sp, #16]
 800b92c:	46a2      	mov	sl, r4
 800b92e:	e7d2      	b.n	800b8d6 <_vfiprintf_r+0xe2>
 800b930:	9b03      	ldr	r3, [sp, #12]
 800b932:	1d19      	adds	r1, r3, #4
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	9103      	str	r1, [sp, #12]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	bfbb      	ittet	lt
 800b93c:	425b      	neglt	r3, r3
 800b93e:	f042 0202 	orrlt.w	r2, r2, #2
 800b942:	9307      	strge	r3, [sp, #28]
 800b944:	9307      	strlt	r3, [sp, #28]
 800b946:	bfb8      	it	lt
 800b948:	9204      	strlt	r2, [sp, #16]
 800b94a:	7823      	ldrb	r3, [r4, #0]
 800b94c:	2b2e      	cmp	r3, #46	; 0x2e
 800b94e:	d10c      	bne.n	800b96a <_vfiprintf_r+0x176>
 800b950:	7863      	ldrb	r3, [r4, #1]
 800b952:	2b2a      	cmp	r3, #42	; 0x2a
 800b954:	d135      	bne.n	800b9c2 <_vfiprintf_r+0x1ce>
 800b956:	9b03      	ldr	r3, [sp, #12]
 800b958:	1d1a      	adds	r2, r3, #4
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	9203      	str	r2, [sp, #12]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	bfb8      	it	lt
 800b962:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b966:	3402      	adds	r4, #2
 800b968:	9305      	str	r3, [sp, #20]
 800b96a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ba50 <_vfiprintf_r+0x25c>
 800b96e:	7821      	ldrb	r1, [r4, #0]
 800b970:	2203      	movs	r2, #3
 800b972:	4650      	mov	r0, sl
 800b974:	f7f4 fc3c 	bl	80001f0 <memchr>
 800b978:	b140      	cbz	r0, 800b98c <_vfiprintf_r+0x198>
 800b97a:	2340      	movs	r3, #64	; 0x40
 800b97c:	eba0 000a 	sub.w	r0, r0, sl
 800b980:	fa03 f000 	lsl.w	r0, r3, r0
 800b984:	9b04      	ldr	r3, [sp, #16]
 800b986:	4303      	orrs	r3, r0
 800b988:	3401      	adds	r4, #1
 800b98a:	9304      	str	r3, [sp, #16]
 800b98c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b990:	482c      	ldr	r0, [pc, #176]	; (800ba44 <_vfiprintf_r+0x250>)
 800b992:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b996:	2206      	movs	r2, #6
 800b998:	f7f4 fc2a 	bl	80001f0 <memchr>
 800b99c:	2800      	cmp	r0, #0
 800b99e:	d03f      	beq.n	800ba20 <_vfiprintf_r+0x22c>
 800b9a0:	4b29      	ldr	r3, [pc, #164]	; (800ba48 <_vfiprintf_r+0x254>)
 800b9a2:	bb1b      	cbnz	r3, 800b9ec <_vfiprintf_r+0x1f8>
 800b9a4:	9b03      	ldr	r3, [sp, #12]
 800b9a6:	3307      	adds	r3, #7
 800b9a8:	f023 0307 	bic.w	r3, r3, #7
 800b9ac:	3308      	adds	r3, #8
 800b9ae:	9303      	str	r3, [sp, #12]
 800b9b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9b2:	443b      	add	r3, r7
 800b9b4:	9309      	str	r3, [sp, #36]	; 0x24
 800b9b6:	e767      	b.n	800b888 <_vfiprintf_r+0x94>
 800b9b8:	fb0c 3202 	mla	r2, ip, r2, r3
 800b9bc:	460c      	mov	r4, r1
 800b9be:	2001      	movs	r0, #1
 800b9c0:	e7a5      	b.n	800b90e <_vfiprintf_r+0x11a>
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	3401      	adds	r4, #1
 800b9c6:	9305      	str	r3, [sp, #20]
 800b9c8:	4619      	mov	r1, r3
 800b9ca:	f04f 0c0a 	mov.w	ip, #10
 800b9ce:	4620      	mov	r0, r4
 800b9d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b9d4:	3a30      	subs	r2, #48	; 0x30
 800b9d6:	2a09      	cmp	r2, #9
 800b9d8:	d903      	bls.n	800b9e2 <_vfiprintf_r+0x1ee>
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d0c5      	beq.n	800b96a <_vfiprintf_r+0x176>
 800b9de:	9105      	str	r1, [sp, #20]
 800b9e0:	e7c3      	b.n	800b96a <_vfiprintf_r+0x176>
 800b9e2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b9e6:	4604      	mov	r4, r0
 800b9e8:	2301      	movs	r3, #1
 800b9ea:	e7f0      	b.n	800b9ce <_vfiprintf_r+0x1da>
 800b9ec:	ab03      	add	r3, sp, #12
 800b9ee:	9300      	str	r3, [sp, #0]
 800b9f0:	462a      	mov	r2, r5
 800b9f2:	4b16      	ldr	r3, [pc, #88]	; (800ba4c <_vfiprintf_r+0x258>)
 800b9f4:	a904      	add	r1, sp, #16
 800b9f6:	4630      	mov	r0, r6
 800b9f8:	f7fd fb1c 	bl	8009034 <_printf_float>
 800b9fc:	4607      	mov	r7, r0
 800b9fe:	1c78      	adds	r0, r7, #1
 800ba00:	d1d6      	bne.n	800b9b0 <_vfiprintf_r+0x1bc>
 800ba02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba04:	07d9      	lsls	r1, r3, #31
 800ba06:	d405      	bmi.n	800ba14 <_vfiprintf_r+0x220>
 800ba08:	89ab      	ldrh	r3, [r5, #12]
 800ba0a:	059a      	lsls	r2, r3, #22
 800ba0c:	d402      	bmi.n	800ba14 <_vfiprintf_r+0x220>
 800ba0e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba10:	f7ff f882 	bl	800ab18 <__retarget_lock_release_recursive>
 800ba14:	89ab      	ldrh	r3, [r5, #12]
 800ba16:	065b      	lsls	r3, r3, #25
 800ba18:	f53f af12 	bmi.w	800b840 <_vfiprintf_r+0x4c>
 800ba1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ba1e:	e711      	b.n	800b844 <_vfiprintf_r+0x50>
 800ba20:	ab03      	add	r3, sp, #12
 800ba22:	9300      	str	r3, [sp, #0]
 800ba24:	462a      	mov	r2, r5
 800ba26:	4b09      	ldr	r3, [pc, #36]	; (800ba4c <_vfiprintf_r+0x258>)
 800ba28:	a904      	add	r1, sp, #16
 800ba2a:	4630      	mov	r0, r6
 800ba2c:	f7fd fda6 	bl	800957c <_printf_i>
 800ba30:	e7e4      	b.n	800b9fc <_vfiprintf_r+0x208>
 800ba32:	bf00      	nop
 800ba34:	0800ca9c 	.word	0x0800ca9c
 800ba38:	0800cabc 	.word	0x0800cabc
 800ba3c:	0800ca7c 	.word	0x0800ca7c
 800ba40:	0800cc34 	.word	0x0800cc34
 800ba44:	0800cc3e 	.word	0x0800cc3e
 800ba48:	08009035 	.word	0x08009035
 800ba4c:	0800b7cf 	.word	0x0800b7cf
 800ba50:	0800cc3a 	.word	0x0800cc3a

0800ba54 <_sbrk_r>:
 800ba54:	b538      	push	{r3, r4, r5, lr}
 800ba56:	4d06      	ldr	r5, [pc, #24]	; (800ba70 <_sbrk_r+0x1c>)
 800ba58:	2300      	movs	r3, #0
 800ba5a:	4604      	mov	r4, r0
 800ba5c:	4608      	mov	r0, r1
 800ba5e:	602b      	str	r3, [r5, #0]
 800ba60:	f7f5 fe44 	bl	80016ec <_sbrk>
 800ba64:	1c43      	adds	r3, r0, #1
 800ba66:	d102      	bne.n	800ba6e <_sbrk_r+0x1a>
 800ba68:	682b      	ldr	r3, [r5, #0]
 800ba6a:	b103      	cbz	r3, 800ba6e <_sbrk_r+0x1a>
 800ba6c:	6023      	str	r3, [r4, #0]
 800ba6e:	bd38      	pop	{r3, r4, r5, pc}
 800ba70:	20004e00 	.word	0x20004e00

0800ba74 <__sread>:
 800ba74:	b510      	push	{r4, lr}
 800ba76:	460c      	mov	r4, r1
 800ba78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba7c:	f000 f92c 	bl	800bcd8 <_read_r>
 800ba80:	2800      	cmp	r0, #0
 800ba82:	bfab      	itete	ge
 800ba84:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ba86:	89a3      	ldrhlt	r3, [r4, #12]
 800ba88:	181b      	addge	r3, r3, r0
 800ba8a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ba8e:	bfac      	ite	ge
 800ba90:	6563      	strge	r3, [r4, #84]	; 0x54
 800ba92:	81a3      	strhlt	r3, [r4, #12]
 800ba94:	bd10      	pop	{r4, pc}

0800ba96 <__swrite>:
 800ba96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba9a:	461f      	mov	r7, r3
 800ba9c:	898b      	ldrh	r3, [r1, #12]
 800ba9e:	05db      	lsls	r3, r3, #23
 800baa0:	4605      	mov	r5, r0
 800baa2:	460c      	mov	r4, r1
 800baa4:	4616      	mov	r6, r2
 800baa6:	d505      	bpl.n	800bab4 <__swrite+0x1e>
 800baa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800baac:	2302      	movs	r3, #2
 800baae:	2200      	movs	r2, #0
 800bab0:	f000 f898 	bl	800bbe4 <_lseek_r>
 800bab4:	89a3      	ldrh	r3, [r4, #12]
 800bab6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800baba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800babe:	81a3      	strh	r3, [r4, #12]
 800bac0:	4632      	mov	r2, r6
 800bac2:	463b      	mov	r3, r7
 800bac4:	4628      	mov	r0, r5
 800bac6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800baca:	f000 b817 	b.w	800bafc <_write_r>

0800bace <__sseek>:
 800bace:	b510      	push	{r4, lr}
 800bad0:	460c      	mov	r4, r1
 800bad2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bad6:	f000 f885 	bl	800bbe4 <_lseek_r>
 800bada:	1c43      	adds	r3, r0, #1
 800badc:	89a3      	ldrh	r3, [r4, #12]
 800bade:	bf15      	itete	ne
 800bae0:	6560      	strne	r0, [r4, #84]	; 0x54
 800bae2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bae6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800baea:	81a3      	strheq	r3, [r4, #12]
 800baec:	bf18      	it	ne
 800baee:	81a3      	strhne	r3, [r4, #12]
 800baf0:	bd10      	pop	{r4, pc}

0800baf2 <__sclose>:
 800baf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800baf6:	f000 b831 	b.w	800bb5c <_close_r>
	...

0800bafc <_write_r>:
 800bafc:	b538      	push	{r3, r4, r5, lr}
 800bafe:	4d07      	ldr	r5, [pc, #28]	; (800bb1c <_write_r+0x20>)
 800bb00:	4604      	mov	r4, r0
 800bb02:	4608      	mov	r0, r1
 800bb04:	4611      	mov	r1, r2
 800bb06:	2200      	movs	r2, #0
 800bb08:	602a      	str	r2, [r5, #0]
 800bb0a:	461a      	mov	r2, r3
 800bb0c:	f7f5 fd9d 	bl	800164a <_write>
 800bb10:	1c43      	adds	r3, r0, #1
 800bb12:	d102      	bne.n	800bb1a <_write_r+0x1e>
 800bb14:	682b      	ldr	r3, [r5, #0]
 800bb16:	b103      	cbz	r3, 800bb1a <_write_r+0x1e>
 800bb18:	6023      	str	r3, [r4, #0]
 800bb1a:	bd38      	pop	{r3, r4, r5, pc}
 800bb1c:	20004e00 	.word	0x20004e00

0800bb20 <__assert_func>:
 800bb20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bb22:	4614      	mov	r4, r2
 800bb24:	461a      	mov	r2, r3
 800bb26:	4b09      	ldr	r3, [pc, #36]	; (800bb4c <__assert_func+0x2c>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	4605      	mov	r5, r0
 800bb2c:	68d8      	ldr	r0, [r3, #12]
 800bb2e:	b14c      	cbz	r4, 800bb44 <__assert_func+0x24>
 800bb30:	4b07      	ldr	r3, [pc, #28]	; (800bb50 <__assert_func+0x30>)
 800bb32:	9100      	str	r1, [sp, #0]
 800bb34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bb38:	4906      	ldr	r1, [pc, #24]	; (800bb54 <__assert_func+0x34>)
 800bb3a:	462b      	mov	r3, r5
 800bb3c:	f000 f81e 	bl	800bb7c <fiprintf>
 800bb40:	f000 f8e9 	bl	800bd16 <abort>
 800bb44:	4b04      	ldr	r3, [pc, #16]	; (800bb58 <__assert_func+0x38>)
 800bb46:	461c      	mov	r4, r3
 800bb48:	e7f3      	b.n	800bb32 <__assert_func+0x12>
 800bb4a:	bf00      	nop
 800bb4c:	20000018 	.word	0x20000018
 800bb50:	0800cc45 	.word	0x0800cc45
 800bb54:	0800cc52 	.word	0x0800cc52
 800bb58:	0800cc80 	.word	0x0800cc80

0800bb5c <_close_r>:
 800bb5c:	b538      	push	{r3, r4, r5, lr}
 800bb5e:	4d06      	ldr	r5, [pc, #24]	; (800bb78 <_close_r+0x1c>)
 800bb60:	2300      	movs	r3, #0
 800bb62:	4604      	mov	r4, r0
 800bb64:	4608      	mov	r0, r1
 800bb66:	602b      	str	r3, [r5, #0]
 800bb68:	f7f5 fd8b 	bl	8001682 <_close>
 800bb6c:	1c43      	adds	r3, r0, #1
 800bb6e:	d102      	bne.n	800bb76 <_close_r+0x1a>
 800bb70:	682b      	ldr	r3, [r5, #0]
 800bb72:	b103      	cbz	r3, 800bb76 <_close_r+0x1a>
 800bb74:	6023      	str	r3, [r4, #0]
 800bb76:	bd38      	pop	{r3, r4, r5, pc}
 800bb78:	20004e00 	.word	0x20004e00

0800bb7c <fiprintf>:
 800bb7c:	b40e      	push	{r1, r2, r3}
 800bb7e:	b503      	push	{r0, r1, lr}
 800bb80:	4601      	mov	r1, r0
 800bb82:	ab03      	add	r3, sp, #12
 800bb84:	4805      	ldr	r0, [pc, #20]	; (800bb9c <fiprintf+0x20>)
 800bb86:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb8a:	6800      	ldr	r0, [r0, #0]
 800bb8c:	9301      	str	r3, [sp, #4]
 800bb8e:	f7ff fe31 	bl	800b7f4 <_vfiprintf_r>
 800bb92:	b002      	add	sp, #8
 800bb94:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb98:	b003      	add	sp, #12
 800bb9a:	4770      	bx	lr
 800bb9c:	20000018 	.word	0x20000018

0800bba0 <_fstat_r>:
 800bba0:	b538      	push	{r3, r4, r5, lr}
 800bba2:	4d07      	ldr	r5, [pc, #28]	; (800bbc0 <_fstat_r+0x20>)
 800bba4:	2300      	movs	r3, #0
 800bba6:	4604      	mov	r4, r0
 800bba8:	4608      	mov	r0, r1
 800bbaa:	4611      	mov	r1, r2
 800bbac:	602b      	str	r3, [r5, #0]
 800bbae:	f7f5 fd74 	bl	800169a <_fstat>
 800bbb2:	1c43      	adds	r3, r0, #1
 800bbb4:	d102      	bne.n	800bbbc <_fstat_r+0x1c>
 800bbb6:	682b      	ldr	r3, [r5, #0]
 800bbb8:	b103      	cbz	r3, 800bbbc <_fstat_r+0x1c>
 800bbba:	6023      	str	r3, [r4, #0]
 800bbbc:	bd38      	pop	{r3, r4, r5, pc}
 800bbbe:	bf00      	nop
 800bbc0:	20004e00 	.word	0x20004e00

0800bbc4 <_isatty_r>:
 800bbc4:	b538      	push	{r3, r4, r5, lr}
 800bbc6:	4d06      	ldr	r5, [pc, #24]	; (800bbe0 <_isatty_r+0x1c>)
 800bbc8:	2300      	movs	r3, #0
 800bbca:	4604      	mov	r4, r0
 800bbcc:	4608      	mov	r0, r1
 800bbce:	602b      	str	r3, [r5, #0]
 800bbd0:	f7f5 fd73 	bl	80016ba <_isatty>
 800bbd4:	1c43      	adds	r3, r0, #1
 800bbd6:	d102      	bne.n	800bbde <_isatty_r+0x1a>
 800bbd8:	682b      	ldr	r3, [r5, #0]
 800bbda:	b103      	cbz	r3, 800bbde <_isatty_r+0x1a>
 800bbdc:	6023      	str	r3, [r4, #0]
 800bbde:	bd38      	pop	{r3, r4, r5, pc}
 800bbe0:	20004e00 	.word	0x20004e00

0800bbe4 <_lseek_r>:
 800bbe4:	b538      	push	{r3, r4, r5, lr}
 800bbe6:	4d07      	ldr	r5, [pc, #28]	; (800bc04 <_lseek_r+0x20>)
 800bbe8:	4604      	mov	r4, r0
 800bbea:	4608      	mov	r0, r1
 800bbec:	4611      	mov	r1, r2
 800bbee:	2200      	movs	r2, #0
 800bbf0:	602a      	str	r2, [r5, #0]
 800bbf2:	461a      	mov	r2, r3
 800bbf4:	f7f5 fd6c 	bl	80016d0 <_lseek>
 800bbf8:	1c43      	adds	r3, r0, #1
 800bbfa:	d102      	bne.n	800bc02 <_lseek_r+0x1e>
 800bbfc:	682b      	ldr	r3, [r5, #0]
 800bbfe:	b103      	cbz	r3, 800bc02 <_lseek_r+0x1e>
 800bc00:	6023      	str	r3, [r4, #0]
 800bc02:	bd38      	pop	{r3, r4, r5, pc}
 800bc04:	20004e00 	.word	0x20004e00

0800bc08 <__ascii_mbtowc>:
 800bc08:	b082      	sub	sp, #8
 800bc0a:	b901      	cbnz	r1, 800bc0e <__ascii_mbtowc+0x6>
 800bc0c:	a901      	add	r1, sp, #4
 800bc0e:	b142      	cbz	r2, 800bc22 <__ascii_mbtowc+0x1a>
 800bc10:	b14b      	cbz	r3, 800bc26 <__ascii_mbtowc+0x1e>
 800bc12:	7813      	ldrb	r3, [r2, #0]
 800bc14:	600b      	str	r3, [r1, #0]
 800bc16:	7812      	ldrb	r2, [r2, #0]
 800bc18:	1e10      	subs	r0, r2, #0
 800bc1a:	bf18      	it	ne
 800bc1c:	2001      	movne	r0, #1
 800bc1e:	b002      	add	sp, #8
 800bc20:	4770      	bx	lr
 800bc22:	4610      	mov	r0, r2
 800bc24:	e7fb      	b.n	800bc1e <__ascii_mbtowc+0x16>
 800bc26:	f06f 0001 	mvn.w	r0, #1
 800bc2a:	e7f8      	b.n	800bc1e <__ascii_mbtowc+0x16>

0800bc2c <memmove>:
 800bc2c:	4288      	cmp	r0, r1
 800bc2e:	b510      	push	{r4, lr}
 800bc30:	eb01 0402 	add.w	r4, r1, r2
 800bc34:	d902      	bls.n	800bc3c <memmove+0x10>
 800bc36:	4284      	cmp	r4, r0
 800bc38:	4623      	mov	r3, r4
 800bc3a:	d807      	bhi.n	800bc4c <memmove+0x20>
 800bc3c:	1e43      	subs	r3, r0, #1
 800bc3e:	42a1      	cmp	r1, r4
 800bc40:	d008      	beq.n	800bc54 <memmove+0x28>
 800bc42:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bc46:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bc4a:	e7f8      	b.n	800bc3e <memmove+0x12>
 800bc4c:	4402      	add	r2, r0
 800bc4e:	4601      	mov	r1, r0
 800bc50:	428a      	cmp	r2, r1
 800bc52:	d100      	bne.n	800bc56 <memmove+0x2a>
 800bc54:	bd10      	pop	{r4, pc}
 800bc56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bc5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bc5e:	e7f7      	b.n	800bc50 <memmove+0x24>

0800bc60 <__malloc_lock>:
 800bc60:	4801      	ldr	r0, [pc, #4]	; (800bc68 <__malloc_lock+0x8>)
 800bc62:	f7fe bf58 	b.w	800ab16 <__retarget_lock_acquire_recursive>
 800bc66:	bf00      	nop
 800bc68:	20004df4 	.word	0x20004df4

0800bc6c <__malloc_unlock>:
 800bc6c:	4801      	ldr	r0, [pc, #4]	; (800bc74 <__malloc_unlock+0x8>)
 800bc6e:	f7fe bf53 	b.w	800ab18 <__retarget_lock_release_recursive>
 800bc72:	bf00      	nop
 800bc74:	20004df4 	.word	0x20004df4

0800bc78 <_realloc_r>:
 800bc78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc7c:	4680      	mov	r8, r0
 800bc7e:	4614      	mov	r4, r2
 800bc80:	460e      	mov	r6, r1
 800bc82:	b921      	cbnz	r1, 800bc8e <_realloc_r+0x16>
 800bc84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc88:	4611      	mov	r1, r2
 800bc8a:	f7ff bbb9 	b.w	800b400 <_malloc_r>
 800bc8e:	b92a      	cbnz	r2, 800bc9c <_realloc_r+0x24>
 800bc90:	f7ff fb4a 	bl	800b328 <_free_r>
 800bc94:	4625      	mov	r5, r4
 800bc96:	4628      	mov	r0, r5
 800bc98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc9c:	f000 f842 	bl	800bd24 <_malloc_usable_size_r>
 800bca0:	4284      	cmp	r4, r0
 800bca2:	4607      	mov	r7, r0
 800bca4:	d802      	bhi.n	800bcac <_realloc_r+0x34>
 800bca6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bcaa:	d812      	bhi.n	800bcd2 <_realloc_r+0x5a>
 800bcac:	4621      	mov	r1, r4
 800bcae:	4640      	mov	r0, r8
 800bcb0:	f7ff fba6 	bl	800b400 <_malloc_r>
 800bcb4:	4605      	mov	r5, r0
 800bcb6:	2800      	cmp	r0, #0
 800bcb8:	d0ed      	beq.n	800bc96 <_realloc_r+0x1e>
 800bcba:	42bc      	cmp	r4, r7
 800bcbc:	4622      	mov	r2, r4
 800bcbe:	4631      	mov	r1, r6
 800bcc0:	bf28      	it	cs
 800bcc2:	463a      	movcs	r2, r7
 800bcc4:	f7fd f900 	bl	8008ec8 <memcpy>
 800bcc8:	4631      	mov	r1, r6
 800bcca:	4640      	mov	r0, r8
 800bccc:	f7ff fb2c 	bl	800b328 <_free_r>
 800bcd0:	e7e1      	b.n	800bc96 <_realloc_r+0x1e>
 800bcd2:	4635      	mov	r5, r6
 800bcd4:	e7df      	b.n	800bc96 <_realloc_r+0x1e>
	...

0800bcd8 <_read_r>:
 800bcd8:	b538      	push	{r3, r4, r5, lr}
 800bcda:	4d07      	ldr	r5, [pc, #28]	; (800bcf8 <_read_r+0x20>)
 800bcdc:	4604      	mov	r4, r0
 800bcde:	4608      	mov	r0, r1
 800bce0:	4611      	mov	r1, r2
 800bce2:	2200      	movs	r2, #0
 800bce4:	602a      	str	r2, [r5, #0]
 800bce6:	461a      	mov	r2, r3
 800bce8:	f7f5 fc92 	bl	8001610 <_read>
 800bcec:	1c43      	adds	r3, r0, #1
 800bcee:	d102      	bne.n	800bcf6 <_read_r+0x1e>
 800bcf0:	682b      	ldr	r3, [r5, #0]
 800bcf2:	b103      	cbz	r3, 800bcf6 <_read_r+0x1e>
 800bcf4:	6023      	str	r3, [r4, #0]
 800bcf6:	bd38      	pop	{r3, r4, r5, pc}
 800bcf8:	20004e00 	.word	0x20004e00

0800bcfc <__ascii_wctomb>:
 800bcfc:	b149      	cbz	r1, 800bd12 <__ascii_wctomb+0x16>
 800bcfe:	2aff      	cmp	r2, #255	; 0xff
 800bd00:	bf85      	ittet	hi
 800bd02:	238a      	movhi	r3, #138	; 0x8a
 800bd04:	6003      	strhi	r3, [r0, #0]
 800bd06:	700a      	strbls	r2, [r1, #0]
 800bd08:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800bd0c:	bf98      	it	ls
 800bd0e:	2001      	movls	r0, #1
 800bd10:	4770      	bx	lr
 800bd12:	4608      	mov	r0, r1
 800bd14:	4770      	bx	lr

0800bd16 <abort>:
 800bd16:	b508      	push	{r3, lr}
 800bd18:	2006      	movs	r0, #6
 800bd1a:	f000 f833 	bl	800bd84 <raise>
 800bd1e:	2001      	movs	r0, #1
 800bd20:	f7f5 fc6c 	bl	80015fc <_exit>

0800bd24 <_malloc_usable_size_r>:
 800bd24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd28:	1f18      	subs	r0, r3, #4
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	bfbc      	itt	lt
 800bd2e:	580b      	ldrlt	r3, [r1, r0]
 800bd30:	18c0      	addlt	r0, r0, r3
 800bd32:	4770      	bx	lr

0800bd34 <_raise_r>:
 800bd34:	291f      	cmp	r1, #31
 800bd36:	b538      	push	{r3, r4, r5, lr}
 800bd38:	4604      	mov	r4, r0
 800bd3a:	460d      	mov	r5, r1
 800bd3c:	d904      	bls.n	800bd48 <_raise_r+0x14>
 800bd3e:	2316      	movs	r3, #22
 800bd40:	6003      	str	r3, [r0, #0]
 800bd42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bd46:	bd38      	pop	{r3, r4, r5, pc}
 800bd48:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bd4a:	b112      	cbz	r2, 800bd52 <_raise_r+0x1e>
 800bd4c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bd50:	b94b      	cbnz	r3, 800bd66 <_raise_r+0x32>
 800bd52:	4620      	mov	r0, r4
 800bd54:	f000 f830 	bl	800bdb8 <_getpid_r>
 800bd58:	462a      	mov	r2, r5
 800bd5a:	4601      	mov	r1, r0
 800bd5c:	4620      	mov	r0, r4
 800bd5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd62:	f000 b817 	b.w	800bd94 <_kill_r>
 800bd66:	2b01      	cmp	r3, #1
 800bd68:	d00a      	beq.n	800bd80 <_raise_r+0x4c>
 800bd6a:	1c59      	adds	r1, r3, #1
 800bd6c:	d103      	bne.n	800bd76 <_raise_r+0x42>
 800bd6e:	2316      	movs	r3, #22
 800bd70:	6003      	str	r3, [r0, #0]
 800bd72:	2001      	movs	r0, #1
 800bd74:	e7e7      	b.n	800bd46 <_raise_r+0x12>
 800bd76:	2400      	movs	r4, #0
 800bd78:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bd7c:	4628      	mov	r0, r5
 800bd7e:	4798      	blx	r3
 800bd80:	2000      	movs	r0, #0
 800bd82:	e7e0      	b.n	800bd46 <_raise_r+0x12>

0800bd84 <raise>:
 800bd84:	4b02      	ldr	r3, [pc, #8]	; (800bd90 <raise+0xc>)
 800bd86:	4601      	mov	r1, r0
 800bd88:	6818      	ldr	r0, [r3, #0]
 800bd8a:	f7ff bfd3 	b.w	800bd34 <_raise_r>
 800bd8e:	bf00      	nop
 800bd90:	20000018 	.word	0x20000018

0800bd94 <_kill_r>:
 800bd94:	b538      	push	{r3, r4, r5, lr}
 800bd96:	4d07      	ldr	r5, [pc, #28]	; (800bdb4 <_kill_r+0x20>)
 800bd98:	2300      	movs	r3, #0
 800bd9a:	4604      	mov	r4, r0
 800bd9c:	4608      	mov	r0, r1
 800bd9e:	4611      	mov	r1, r2
 800bda0:	602b      	str	r3, [r5, #0]
 800bda2:	f7f5 fc1b 	bl	80015dc <_kill>
 800bda6:	1c43      	adds	r3, r0, #1
 800bda8:	d102      	bne.n	800bdb0 <_kill_r+0x1c>
 800bdaa:	682b      	ldr	r3, [r5, #0]
 800bdac:	b103      	cbz	r3, 800bdb0 <_kill_r+0x1c>
 800bdae:	6023      	str	r3, [r4, #0]
 800bdb0:	bd38      	pop	{r3, r4, r5, pc}
 800bdb2:	bf00      	nop
 800bdb4:	20004e00 	.word	0x20004e00

0800bdb8 <_getpid_r>:
 800bdb8:	f7f5 bc08 	b.w	80015cc <_getpid>

0800bdbc <sinf>:
 800bdbc:	ee10 3a10 	vmov	r3, s0
 800bdc0:	b507      	push	{r0, r1, r2, lr}
 800bdc2:	4a1f      	ldr	r2, [pc, #124]	; (800be40 <sinf+0x84>)
 800bdc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bdc8:	4293      	cmp	r3, r2
 800bdca:	dc07      	bgt.n	800bddc <sinf+0x20>
 800bdcc:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800be44 <sinf+0x88>
 800bdd0:	2000      	movs	r0, #0
 800bdd2:	b003      	add	sp, #12
 800bdd4:	f85d eb04 	ldr.w	lr, [sp], #4
 800bdd8:	f000 bc48 	b.w	800c66c <__kernel_sinf>
 800bddc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800bde0:	db04      	blt.n	800bdec <sinf+0x30>
 800bde2:	ee30 0a40 	vsub.f32	s0, s0, s0
 800bde6:	b003      	add	sp, #12
 800bde8:	f85d fb04 	ldr.w	pc, [sp], #4
 800bdec:	4668      	mov	r0, sp
 800bdee:	f000 f82b 	bl	800be48 <__ieee754_rem_pio2f>
 800bdf2:	f000 0003 	and.w	r0, r0, #3
 800bdf6:	2801      	cmp	r0, #1
 800bdf8:	d00a      	beq.n	800be10 <sinf+0x54>
 800bdfa:	2802      	cmp	r0, #2
 800bdfc:	d00f      	beq.n	800be1e <sinf+0x62>
 800bdfe:	b9c0      	cbnz	r0, 800be32 <sinf+0x76>
 800be00:	eddd 0a01 	vldr	s1, [sp, #4]
 800be04:	ed9d 0a00 	vldr	s0, [sp]
 800be08:	2001      	movs	r0, #1
 800be0a:	f000 fc2f 	bl	800c66c <__kernel_sinf>
 800be0e:	e7ea      	b.n	800bde6 <sinf+0x2a>
 800be10:	eddd 0a01 	vldr	s1, [sp, #4]
 800be14:	ed9d 0a00 	vldr	s0, [sp]
 800be18:	f000 f952 	bl	800c0c0 <__kernel_cosf>
 800be1c:	e7e3      	b.n	800bde6 <sinf+0x2a>
 800be1e:	eddd 0a01 	vldr	s1, [sp, #4]
 800be22:	ed9d 0a00 	vldr	s0, [sp]
 800be26:	2001      	movs	r0, #1
 800be28:	f000 fc20 	bl	800c66c <__kernel_sinf>
 800be2c:	eeb1 0a40 	vneg.f32	s0, s0
 800be30:	e7d9      	b.n	800bde6 <sinf+0x2a>
 800be32:	eddd 0a01 	vldr	s1, [sp, #4]
 800be36:	ed9d 0a00 	vldr	s0, [sp]
 800be3a:	f000 f941 	bl	800c0c0 <__kernel_cosf>
 800be3e:	e7f5      	b.n	800be2c <sinf+0x70>
 800be40:	3f490fd8 	.word	0x3f490fd8
 800be44:	00000000 	.word	0x00000000

0800be48 <__ieee754_rem_pio2f>:
 800be48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be4a:	ee10 6a10 	vmov	r6, s0
 800be4e:	4b8e      	ldr	r3, [pc, #568]	; (800c088 <__ieee754_rem_pio2f+0x240>)
 800be50:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800be54:	429d      	cmp	r5, r3
 800be56:	b087      	sub	sp, #28
 800be58:	eef0 7a40 	vmov.f32	s15, s0
 800be5c:	4604      	mov	r4, r0
 800be5e:	dc05      	bgt.n	800be6c <__ieee754_rem_pio2f+0x24>
 800be60:	2300      	movs	r3, #0
 800be62:	ed80 0a00 	vstr	s0, [r0]
 800be66:	6043      	str	r3, [r0, #4]
 800be68:	2000      	movs	r0, #0
 800be6a:	e01a      	b.n	800bea2 <__ieee754_rem_pio2f+0x5a>
 800be6c:	4b87      	ldr	r3, [pc, #540]	; (800c08c <__ieee754_rem_pio2f+0x244>)
 800be6e:	429d      	cmp	r5, r3
 800be70:	dc46      	bgt.n	800bf00 <__ieee754_rem_pio2f+0xb8>
 800be72:	2e00      	cmp	r6, #0
 800be74:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800c090 <__ieee754_rem_pio2f+0x248>
 800be78:	4b86      	ldr	r3, [pc, #536]	; (800c094 <__ieee754_rem_pio2f+0x24c>)
 800be7a:	f025 050f 	bic.w	r5, r5, #15
 800be7e:	dd1f      	ble.n	800bec0 <__ieee754_rem_pio2f+0x78>
 800be80:	429d      	cmp	r5, r3
 800be82:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800be86:	d00e      	beq.n	800bea6 <__ieee754_rem_pio2f+0x5e>
 800be88:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800c098 <__ieee754_rem_pio2f+0x250>
 800be8c:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800be90:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800be94:	ed80 0a00 	vstr	s0, [r0]
 800be98:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800be9c:	2001      	movs	r0, #1
 800be9e:	edc4 7a01 	vstr	s15, [r4, #4]
 800bea2:	b007      	add	sp, #28
 800bea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bea6:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800c09c <__ieee754_rem_pio2f+0x254>
 800beaa:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800c0a0 <__ieee754_rem_pio2f+0x258>
 800beae:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800beb2:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800beb6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800beba:	edc0 6a00 	vstr	s13, [r0]
 800bebe:	e7eb      	b.n	800be98 <__ieee754_rem_pio2f+0x50>
 800bec0:	429d      	cmp	r5, r3
 800bec2:	ee77 7a80 	vadd.f32	s15, s15, s0
 800bec6:	d00e      	beq.n	800bee6 <__ieee754_rem_pio2f+0x9e>
 800bec8:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800c098 <__ieee754_rem_pio2f+0x250>
 800becc:	ee37 0a87 	vadd.f32	s0, s15, s14
 800bed0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800bed4:	ed80 0a00 	vstr	s0, [r0]
 800bed8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bedc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bee0:	edc4 7a01 	vstr	s15, [r4, #4]
 800bee4:	e7dd      	b.n	800bea2 <__ieee754_rem_pio2f+0x5a>
 800bee6:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800c09c <__ieee754_rem_pio2f+0x254>
 800beea:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800c0a0 <__ieee754_rem_pio2f+0x258>
 800beee:	ee77 7a80 	vadd.f32	s15, s15, s0
 800bef2:	ee77 6a87 	vadd.f32	s13, s15, s14
 800bef6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800befa:	edc0 6a00 	vstr	s13, [r0]
 800befe:	e7eb      	b.n	800bed8 <__ieee754_rem_pio2f+0x90>
 800bf00:	4b68      	ldr	r3, [pc, #416]	; (800c0a4 <__ieee754_rem_pio2f+0x25c>)
 800bf02:	429d      	cmp	r5, r3
 800bf04:	dc72      	bgt.n	800bfec <__ieee754_rem_pio2f+0x1a4>
 800bf06:	f000 fbf9 	bl	800c6fc <fabsf>
 800bf0a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800c0a8 <__ieee754_rem_pio2f+0x260>
 800bf0e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800bf12:	eee0 7a07 	vfma.f32	s15, s0, s14
 800bf16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bf1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bf1e:	ee17 0a90 	vmov	r0, s15
 800bf22:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800c090 <__ieee754_rem_pio2f+0x248>
 800bf26:	eea7 0a67 	vfms.f32	s0, s14, s15
 800bf2a:	281f      	cmp	r0, #31
 800bf2c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800c098 <__ieee754_rem_pio2f+0x250>
 800bf30:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf34:	eeb1 6a47 	vneg.f32	s12, s14
 800bf38:	ee70 6a67 	vsub.f32	s13, s0, s15
 800bf3c:	ee16 2a90 	vmov	r2, s13
 800bf40:	dc1c      	bgt.n	800bf7c <__ieee754_rem_pio2f+0x134>
 800bf42:	495a      	ldr	r1, [pc, #360]	; (800c0ac <__ieee754_rem_pio2f+0x264>)
 800bf44:	1e47      	subs	r7, r0, #1
 800bf46:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800bf4a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800bf4e:	428b      	cmp	r3, r1
 800bf50:	d014      	beq.n	800bf7c <__ieee754_rem_pio2f+0x134>
 800bf52:	6022      	str	r2, [r4, #0]
 800bf54:	ed94 7a00 	vldr	s14, [r4]
 800bf58:	ee30 0a47 	vsub.f32	s0, s0, s14
 800bf5c:	2e00      	cmp	r6, #0
 800bf5e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800bf62:	ed84 0a01 	vstr	s0, [r4, #4]
 800bf66:	da9c      	bge.n	800bea2 <__ieee754_rem_pio2f+0x5a>
 800bf68:	eeb1 7a47 	vneg.f32	s14, s14
 800bf6c:	eeb1 0a40 	vneg.f32	s0, s0
 800bf70:	ed84 7a00 	vstr	s14, [r4]
 800bf74:	ed84 0a01 	vstr	s0, [r4, #4]
 800bf78:	4240      	negs	r0, r0
 800bf7a:	e792      	b.n	800bea2 <__ieee754_rem_pio2f+0x5a>
 800bf7c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800bf80:	15eb      	asrs	r3, r5, #23
 800bf82:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800bf86:	2d08      	cmp	r5, #8
 800bf88:	dde3      	ble.n	800bf52 <__ieee754_rem_pio2f+0x10a>
 800bf8a:	eddf 7a44 	vldr	s15, [pc, #272]	; 800c09c <__ieee754_rem_pio2f+0x254>
 800bf8e:	eddf 5a44 	vldr	s11, [pc, #272]	; 800c0a0 <__ieee754_rem_pio2f+0x258>
 800bf92:	eef0 6a40 	vmov.f32	s13, s0
 800bf96:	eee6 6a27 	vfma.f32	s13, s12, s15
 800bf9a:	ee30 0a66 	vsub.f32	s0, s0, s13
 800bf9e:	eea6 0a27 	vfma.f32	s0, s12, s15
 800bfa2:	eef0 7a40 	vmov.f32	s15, s0
 800bfa6:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800bfaa:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800bfae:	ee15 2a90 	vmov	r2, s11
 800bfb2:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800bfb6:	1a5b      	subs	r3, r3, r1
 800bfb8:	2b19      	cmp	r3, #25
 800bfba:	dc04      	bgt.n	800bfc6 <__ieee754_rem_pio2f+0x17e>
 800bfbc:	edc4 5a00 	vstr	s11, [r4]
 800bfc0:	eeb0 0a66 	vmov.f32	s0, s13
 800bfc4:	e7c6      	b.n	800bf54 <__ieee754_rem_pio2f+0x10c>
 800bfc6:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800c0b0 <__ieee754_rem_pio2f+0x268>
 800bfca:	eeb0 0a66 	vmov.f32	s0, s13
 800bfce:	eea6 0a25 	vfma.f32	s0, s12, s11
 800bfd2:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800bfd6:	eddf 6a37 	vldr	s13, [pc, #220]	; 800c0b4 <__ieee754_rem_pio2f+0x26c>
 800bfda:	eee6 7a25 	vfma.f32	s15, s12, s11
 800bfde:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800bfe2:	ee30 7a67 	vsub.f32	s14, s0, s15
 800bfe6:	ed84 7a00 	vstr	s14, [r4]
 800bfea:	e7b3      	b.n	800bf54 <__ieee754_rem_pio2f+0x10c>
 800bfec:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800bff0:	db06      	blt.n	800c000 <__ieee754_rem_pio2f+0x1b8>
 800bff2:	ee70 7a40 	vsub.f32	s15, s0, s0
 800bff6:	edc0 7a01 	vstr	s15, [r0, #4]
 800bffa:	edc0 7a00 	vstr	s15, [r0]
 800bffe:	e733      	b.n	800be68 <__ieee754_rem_pio2f+0x20>
 800c000:	15ea      	asrs	r2, r5, #23
 800c002:	3a86      	subs	r2, #134	; 0x86
 800c004:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800c008:	ee07 3a90 	vmov	s15, r3
 800c00c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800c010:	eddf 6a29 	vldr	s13, [pc, #164]	; 800c0b8 <__ieee754_rem_pio2f+0x270>
 800c014:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c018:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c01c:	ed8d 7a03 	vstr	s14, [sp, #12]
 800c020:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c024:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800c028:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c02c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c030:	ed8d 7a04 	vstr	s14, [sp, #16]
 800c034:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c038:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c03c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c040:	edcd 7a05 	vstr	s15, [sp, #20]
 800c044:	d11e      	bne.n	800c084 <__ieee754_rem_pio2f+0x23c>
 800c046:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800c04a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c04e:	bf14      	ite	ne
 800c050:	2302      	movne	r3, #2
 800c052:	2301      	moveq	r3, #1
 800c054:	4919      	ldr	r1, [pc, #100]	; (800c0bc <__ieee754_rem_pio2f+0x274>)
 800c056:	9101      	str	r1, [sp, #4]
 800c058:	2102      	movs	r1, #2
 800c05a:	9100      	str	r1, [sp, #0]
 800c05c:	a803      	add	r0, sp, #12
 800c05e:	4621      	mov	r1, r4
 800c060:	f000 f88e 	bl	800c180 <__kernel_rem_pio2f>
 800c064:	2e00      	cmp	r6, #0
 800c066:	f6bf af1c 	bge.w	800bea2 <__ieee754_rem_pio2f+0x5a>
 800c06a:	edd4 7a00 	vldr	s15, [r4]
 800c06e:	eef1 7a67 	vneg.f32	s15, s15
 800c072:	edc4 7a00 	vstr	s15, [r4]
 800c076:	edd4 7a01 	vldr	s15, [r4, #4]
 800c07a:	eef1 7a67 	vneg.f32	s15, s15
 800c07e:	edc4 7a01 	vstr	s15, [r4, #4]
 800c082:	e779      	b.n	800bf78 <__ieee754_rem_pio2f+0x130>
 800c084:	2303      	movs	r3, #3
 800c086:	e7e5      	b.n	800c054 <__ieee754_rem_pio2f+0x20c>
 800c088:	3f490fd8 	.word	0x3f490fd8
 800c08c:	4016cbe3 	.word	0x4016cbe3
 800c090:	3fc90f80 	.word	0x3fc90f80
 800c094:	3fc90fd0 	.word	0x3fc90fd0
 800c098:	37354443 	.word	0x37354443
 800c09c:	37354400 	.word	0x37354400
 800c0a0:	2e85a308 	.word	0x2e85a308
 800c0a4:	43490f80 	.word	0x43490f80
 800c0a8:	3f22f984 	.word	0x3f22f984
 800c0ac:	0800cd8c 	.word	0x0800cd8c
 800c0b0:	2e85a300 	.word	0x2e85a300
 800c0b4:	248d3132 	.word	0x248d3132
 800c0b8:	43800000 	.word	0x43800000
 800c0bc:	0800ce0c 	.word	0x0800ce0c

0800c0c0 <__kernel_cosf>:
 800c0c0:	ee10 3a10 	vmov	r3, s0
 800c0c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c0c8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800c0cc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800c0d0:	da05      	bge.n	800c0de <__kernel_cosf+0x1e>
 800c0d2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800c0d6:	ee17 2a90 	vmov	r2, s15
 800c0da:	2a00      	cmp	r2, #0
 800c0dc:	d03d      	beq.n	800c15a <__kernel_cosf+0x9a>
 800c0de:	ee60 5a00 	vmul.f32	s11, s0, s0
 800c0e2:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800c160 <__kernel_cosf+0xa0>
 800c0e6:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800c164 <__kernel_cosf+0xa4>
 800c0ea:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800c168 <__kernel_cosf+0xa8>
 800c0ee:	4a1f      	ldr	r2, [pc, #124]	; (800c16c <__kernel_cosf+0xac>)
 800c0f0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800c0f4:	4293      	cmp	r3, r2
 800c0f6:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800c170 <__kernel_cosf+0xb0>
 800c0fa:	eee7 7a25 	vfma.f32	s15, s14, s11
 800c0fe:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800c174 <__kernel_cosf+0xb4>
 800c102:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800c106:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800c178 <__kernel_cosf+0xb8>
 800c10a:	eee7 7a25 	vfma.f32	s15, s14, s11
 800c10e:	eeb0 7a66 	vmov.f32	s14, s13
 800c112:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800c116:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800c11a:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800c11e:	ee67 6a25 	vmul.f32	s13, s14, s11
 800c122:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800c126:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800c12a:	dc04      	bgt.n	800c136 <__kernel_cosf+0x76>
 800c12c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800c130:	ee36 0a47 	vsub.f32	s0, s12, s14
 800c134:	4770      	bx	lr
 800c136:	4a11      	ldr	r2, [pc, #68]	; (800c17c <__kernel_cosf+0xbc>)
 800c138:	4293      	cmp	r3, r2
 800c13a:	bfda      	itte	le
 800c13c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800c140:	ee06 3a90 	vmovle	s13, r3
 800c144:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800c148:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c14c:	ee36 0a66 	vsub.f32	s0, s12, s13
 800c150:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c154:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c158:	4770      	bx	lr
 800c15a:	eeb0 0a46 	vmov.f32	s0, s12
 800c15e:	4770      	bx	lr
 800c160:	ad47d74e 	.word	0xad47d74e
 800c164:	310f74f6 	.word	0x310f74f6
 800c168:	3d2aaaab 	.word	0x3d2aaaab
 800c16c:	3e999999 	.word	0x3e999999
 800c170:	b493f27c 	.word	0xb493f27c
 800c174:	37d00d01 	.word	0x37d00d01
 800c178:	bab60b61 	.word	0xbab60b61
 800c17c:	3f480000 	.word	0x3f480000

0800c180 <__kernel_rem_pio2f>:
 800c180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c184:	ed2d 8b04 	vpush	{d8-d9}
 800c188:	b0d9      	sub	sp, #356	; 0x164
 800c18a:	4688      	mov	r8, r1
 800c18c:	9002      	str	r0, [sp, #8]
 800c18e:	49bb      	ldr	r1, [pc, #748]	; (800c47c <__kernel_rem_pio2f+0x2fc>)
 800c190:	9866      	ldr	r0, [sp, #408]	; 0x198
 800c192:	9301      	str	r3, [sp, #4]
 800c194:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800c198:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 800c19c:	1e59      	subs	r1, r3, #1
 800c19e:	1d13      	adds	r3, r2, #4
 800c1a0:	db27      	blt.n	800c1f2 <__kernel_rem_pio2f+0x72>
 800c1a2:	f1b2 0b03 	subs.w	fp, r2, #3
 800c1a6:	bf48      	it	mi
 800c1a8:	f102 0b04 	addmi.w	fp, r2, #4
 800c1ac:	ea4f 00eb 	mov.w	r0, fp, asr #3
 800c1b0:	1c45      	adds	r5, r0, #1
 800c1b2:	00ec      	lsls	r4, r5, #3
 800c1b4:	1a47      	subs	r7, r0, r1
 800c1b6:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800c48c <__kernel_rem_pio2f+0x30c>
 800c1ba:	9403      	str	r4, [sp, #12]
 800c1bc:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800c1c0:	eb0a 0c01 	add.w	ip, sl, r1
 800c1c4:	ae1c      	add	r6, sp, #112	; 0x70
 800c1c6:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 800c1ca:	2400      	movs	r4, #0
 800c1cc:	4564      	cmp	r4, ip
 800c1ce:	dd12      	ble.n	800c1f6 <__kernel_rem_pio2f+0x76>
 800c1d0:	9b01      	ldr	r3, [sp, #4]
 800c1d2:	ac1c      	add	r4, sp, #112	; 0x70
 800c1d4:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800c1d8:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 800c1dc:	f04f 0c00 	mov.w	ip, #0
 800c1e0:	45d4      	cmp	ip, sl
 800c1e2:	dc27      	bgt.n	800c234 <__kernel_rem_pio2f+0xb4>
 800c1e4:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800c1e8:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800c48c <__kernel_rem_pio2f+0x30c>
 800c1ec:	4627      	mov	r7, r4
 800c1ee:	2600      	movs	r6, #0
 800c1f0:	e016      	b.n	800c220 <__kernel_rem_pio2f+0xa0>
 800c1f2:	2000      	movs	r0, #0
 800c1f4:	e7dc      	b.n	800c1b0 <__kernel_rem_pio2f+0x30>
 800c1f6:	42e7      	cmn	r7, r4
 800c1f8:	bf5d      	ittte	pl
 800c1fa:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 800c1fe:	ee07 3a90 	vmovpl	s15, r3
 800c202:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800c206:	eef0 7a47 	vmovmi.f32	s15, s14
 800c20a:	ece6 7a01 	vstmia	r6!, {s15}
 800c20e:	3401      	adds	r4, #1
 800c210:	e7dc      	b.n	800c1cc <__kernel_rem_pio2f+0x4c>
 800c212:	ecf9 6a01 	vldmia	r9!, {s13}
 800c216:	ed97 7a00 	vldr	s14, [r7]
 800c21a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c21e:	3601      	adds	r6, #1
 800c220:	428e      	cmp	r6, r1
 800c222:	f1a7 0704 	sub.w	r7, r7, #4
 800c226:	ddf4      	ble.n	800c212 <__kernel_rem_pio2f+0x92>
 800c228:	eceb 7a01 	vstmia	fp!, {s15}
 800c22c:	f10c 0c01 	add.w	ip, ip, #1
 800c230:	3404      	adds	r4, #4
 800c232:	e7d5      	b.n	800c1e0 <__kernel_rem_pio2f+0x60>
 800c234:	ab08      	add	r3, sp, #32
 800c236:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800c23a:	eddf 8a93 	vldr	s17, [pc, #588]	; 800c488 <__kernel_rem_pio2f+0x308>
 800c23e:	ed9f 9a91 	vldr	s18, [pc, #580]	; 800c484 <__kernel_rem_pio2f+0x304>
 800c242:	9304      	str	r3, [sp, #16]
 800c244:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 800c248:	4656      	mov	r6, sl
 800c24a:	00b3      	lsls	r3, r6, #2
 800c24c:	9305      	str	r3, [sp, #20]
 800c24e:	ab58      	add	r3, sp, #352	; 0x160
 800c250:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800c254:	ac08      	add	r4, sp, #32
 800c256:	ab44      	add	r3, sp, #272	; 0x110
 800c258:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800c25c:	46a4      	mov	ip, r4
 800c25e:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800c262:	4637      	mov	r7, r6
 800c264:	2f00      	cmp	r7, #0
 800c266:	f1a0 0004 	sub.w	r0, r0, #4
 800c26a:	dc4f      	bgt.n	800c30c <__kernel_rem_pio2f+0x18c>
 800c26c:	4628      	mov	r0, r5
 800c26e:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800c272:	f000 fa8d 	bl	800c790 <scalbnf>
 800c276:	eeb0 8a40 	vmov.f32	s16, s0
 800c27a:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800c27e:	ee28 0a00 	vmul.f32	s0, s16, s0
 800c282:	f000 fa43 	bl	800c70c <floorf>
 800c286:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800c28a:	eea0 8a67 	vfms.f32	s16, s0, s15
 800c28e:	2d00      	cmp	r5, #0
 800c290:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800c294:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800c298:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800c29c:	ee17 9a90 	vmov	r9, s15
 800c2a0:	ee38 8a40 	vsub.f32	s16, s16, s0
 800c2a4:	dd44      	ble.n	800c330 <__kernel_rem_pio2f+0x1b0>
 800c2a6:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800c2aa:	ab08      	add	r3, sp, #32
 800c2ac:	f1c5 0e08 	rsb	lr, r5, #8
 800c2b0:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800c2b4:	fa47 f00e 	asr.w	r0, r7, lr
 800c2b8:	4481      	add	r9, r0
 800c2ba:	fa00 f00e 	lsl.w	r0, r0, lr
 800c2be:	1a3f      	subs	r7, r7, r0
 800c2c0:	f1c5 0007 	rsb	r0, r5, #7
 800c2c4:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800c2c8:	4107      	asrs	r7, r0
 800c2ca:	2f00      	cmp	r7, #0
 800c2cc:	dd3f      	ble.n	800c34e <__kernel_rem_pio2f+0x1ce>
 800c2ce:	f04f 0e00 	mov.w	lr, #0
 800c2d2:	f109 0901 	add.w	r9, r9, #1
 800c2d6:	4673      	mov	r3, lr
 800c2d8:	4576      	cmp	r6, lr
 800c2da:	dc6b      	bgt.n	800c3b4 <__kernel_rem_pio2f+0x234>
 800c2dc:	2d00      	cmp	r5, #0
 800c2de:	dd04      	ble.n	800c2ea <__kernel_rem_pio2f+0x16a>
 800c2e0:	2d01      	cmp	r5, #1
 800c2e2:	d078      	beq.n	800c3d6 <__kernel_rem_pio2f+0x256>
 800c2e4:	2d02      	cmp	r5, #2
 800c2e6:	f000 8081 	beq.w	800c3ec <__kernel_rem_pio2f+0x26c>
 800c2ea:	2f02      	cmp	r7, #2
 800c2ec:	d12f      	bne.n	800c34e <__kernel_rem_pio2f+0x1ce>
 800c2ee:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c2f2:	ee30 8a48 	vsub.f32	s16, s0, s16
 800c2f6:	b353      	cbz	r3, 800c34e <__kernel_rem_pio2f+0x1ce>
 800c2f8:	4628      	mov	r0, r5
 800c2fa:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800c2fe:	f000 fa47 	bl	800c790 <scalbnf>
 800c302:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800c306:	ee38 8a40 	vsub.f32	s16, s16, s0
 800c30a:	e020      	b.n	800c34e <__kernel_rem_pio2f+0x1ce>
 800c30c:	ee60 7a28 	vmul.f32	s15, s0, s17
 800c310:	3f01      	subs	r7, #1
 800c312:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c316:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c31a:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800c31e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c322:	ecac 0a01 	vstmia	ip!, {s0}
 800c326:	ed90 0a00 	vldr	s0, [r0]
 800c32a:	ee37 0a80 	vadd.f32	s0, s15, s0
 800c32e:	e799      	b.n	800c264 <__kernel_rem_pio2f+0xe4>
 800c330:	d105      	bne.n	800c33e <__kernel_rem_pio2f+0x1be>
 800c332:	1e70      	subs	r0, r6, #1
 800c334:	ab08      	add	r3, sp, #32
 800c336:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800c33a:	11ff      	asrs	r7, r7, #7
 800c33c:	e7c5      	b.n	800c2ca <__kernel_rem_pio2f+0x14a>
 800c33e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c342:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800c346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c34a:	da31      	bge.n	800c3b0 <__kernel_rem_pio2f+0x230>
 800c34c:	2700      	movs	r7, #0
 800c34e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800c352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c356:	f040 809b 	bne.w	800c490 <__kernel_rem_pio2f+0x310>
 800c35a:	1e74      	subs	r4, r6, #1
 800c35c:	46a4      	mov	ip, r4
 800c35e:	2000      	movs	r0, #0
 800c360:	45d4      	cmp	ip, sl
 800c362:	da4a      	bge.n	800c3fa <__kernel_rem_pio2f+0x27a>
 800c364:	2800      	cmp	r0, #0
 800c366:	d07a      	beq.n	800c45e <__kernel_rem_pio2f+0x2de>
 800c368:	ab08      	add	r3, sp, #32
 800c36a:	3d08      	subs	r5, #8
 800c36c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800c370:	2b00      	cmp	r3, #0
 800c372:	f000 8081 	beq.w	800c478 <__kernel_rem_pio2f+0x2f8>
 800c376:	4628      	mov	r0, r5
 800c378:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c37c:	00a5      	lsls	r5, r4, #2
 800c37e:	f000 fa07 	bl	800c790 <scalbnf>
 800c382:	aa44      	add	r2, sp, #272	; 0x110
 800c384:	1d2b      	adds	r3, r5, #4
 800c386:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800c488 <__kernel_rem_pio2f+0x308>
 800c38a:	18d1      	adds	r1, r2, r3
 800c38c:	4622      	mov	r2, r4
 800c38e:	2a00      	cmp	r2, #0
 800c390:	f280 80ae 	bge.w	800c4f0 <__kernel_rem_pio2f+0x370>
 800c394:	4622      	mov	r2, r4
 800c396:	2a00      	cmp	r2, #0
 800c398:	f2c0 80cc 	blt.w	800c534 <__kernel_rem_pio2f+0x3b4>
 800c39c:	a944      	add	r1, sp, #272	; 0x110
 800c39e:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800c3a2:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800c480 <__kernel_rem_pio2f+0x300>
 800c3a6:	eddf 7a39 	vldr	s15, [pc, #228]	; 800c48c <__kernel_rem_pio2f+0x30c>
 800c3aa:	2000      	movs	r0, #0
 800c3ac:	1aa1      	subs	r1, r4, r2
 800c3ae:	e0b6      	b.n	800c51e <__kernel_rem_pio2f+0x39e>
 800c3b0:	2702      	movs	r7, #2
 800c3b2:	e78c      	b.n	800c2ce <__kernel_rem_pio2f+0x14e>
 800c3b4:	6820      	ldr	r0, [r4, #0]
 800c3b6:	b94b      	cbnz	r3, 800c3cc <__kernel_rem_pio2f+0x24c>
 800c3b8:	b118      	cbz	r0, 800c3c2 <__kernel_rem_pio2f+0x242>
 800c3ba:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800c3be:	6020      	str	r0, [r4, #0]
 800c3c0:	2001      	movs	r0, #1
 800c3c2:	f10e 0e01 	add.w	lr, lr, #1
 800c3c6:	3404      	adds	r4, #4
 800c3c8:	4603      	mov	r3, r0
 800c3ca:	e785      	b.n	800c2d8 <__kernel_rem_pio2f+0x158>
 800c3cc:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800c3d0:	6020      	str	r0, [r4, #0]
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	e7f5      	b.n	800c3c2 <__kernel_rem_pio2f+0x242>
 800c3d6:	1e74      	subs	r4, r6, #1
 800c3d8:	a808      	add	r0, sp, #32
 800c3da:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800c3de:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800c3e2:	f10d 0c20 	add.w	ip, sp, #32
 800c3e6:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 800c3ea:	e77e      	b.n	800c2ea <__kernel_rem_pio2f+0x16a>
 800c3ec:	1e74      	subs	r4, r6, #1
 800c3ee:	a808      	add	r0, sp, #32
 800c3f0:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800c3f4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800c3f8:	e7f3      	b.n	800c3e2 <__kernel_rem_pio2f+0x262>
 800c3fa:	ab08      	add	r3, sp, #32
 800c3fc:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800c400:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800c404:	4318      	orrs	r0, r3
 800c406:	e7ab      	b.n	800c360 <__kernel_rem_pio2f+0x1e0>
 800c408:	f10c 0c01 	add.w	ip, ip, #1
 800c40c:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 800c410:	2c00      	cmp	r4, #0
 800c412:	d0f9      	beq.n	800c408 <__kernel_rem_pio2f+0x288>
 800c414:	9b05      	ldr	r3, [sp, #20]
 800c416:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800c41a:	eb0d 0003 	add.w	r0, sp, r3
 800c41e:	9b01      	ldr	r3, [sp, #4]
 800c420:	18f4      	adds	r4, r6, r3
 800c422:	ab1c      	add	r3, sp, #112	; 0x70
 800c424:	1c77      	adds	r7, r6, #1
 800c426:	384c      	subs	r0, #76	; 0x4c
 800c428:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c42c:	4466      	add	r6, ip
 800c42e:	42be      	cmp	r6, r7
 800c430:	f6ff af0b 	blt.w	800c24a <__kernel_rem_pio2f+0xca>
 800c434:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 800c438:	f8dd e008 	ldr.w	lr, [sp, #8]
 800c43c:	ee07 3a90 	vmov	s15, r3
 800c440:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c444:	f04f 0c00 	mov.w	ip, #0
 800c448:	ece4 7a01 	vstmia	r4!, {s15}
 800c44c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800c48c <__kernel_rem_pio2f+0x30c>
 800c450:	46a1      	mov	r9, r4
 800c452:	458c      	cmp	ip, r1
 800c454:	dd07      	ble.n	800c466 <__kernel_rem_pio2f+0x2e6>
 800c456:	ece0 7a01 	vstmia	r0!, {s15}
 800c45a:	3701      	adds	r7, #1
 800c45c:	e7e7      	b.n	800c42e <__kernel_rem_pio2f+0x2ae>
 800c45e:	9804      	ldr	r0, [sp, #16]
 800c460:	f04f 0c01 	mov.w	ip, #1
 800c464:	e7d2      	b.n	800c40c <__kernel_rem_pio2f+0x28c>
 800c466:	ecfe 6a01 	vldmia	lr!, {s13}
 800c46a:	ed39 7a01 	vldmdb	r9!, {s14}
 800c46e:	f10c 0c01 	add.w	ip, ip, #1
 800c472:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c476:	e7ec      	b.n	800c452 <__kernel_rem_pio2f+0x2d2>
 800c478:	3c01      	subs	r4, #1
 800c47a:	e775      	b.n	800c368 <__kernel_rem_pio2f+0x1e8>
 800c47c:	0800d150 	.word	0x0800d150
 800c480:	0800d124 	.word	0x0800d124
 800c484:	43800000 	.word	0x43800000
 800c488:	3b800000 	.word	0x3b800000
 800c48c:	00000000 	.word	0x00000000
 800c490:	9b03      	ldr	r3, [sp, #12]
 800c492:	eeb0 0a48 	vmov.f32	s0, s16
 800c496:	1a98      	subs	r0, r3, r2
 800c498:	f000 f97a 	bl	800c790 <scalbnf>
 800c49c:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800c484 <__kernel_rem_pio2f+0x304>
 800c4a0:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800c4a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4a8:	db19      	blt.n	800c4de <__kernel_rem_pio2f+0x35e>
 800c4aa:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800c488 <__kernel_rem_pio2f+0x308>
 800c4ae:	ee60 7a27 	vmul.f32	s15, s0, s15
 800c4b2:	aa08      	add	r2, sp, #32
 800c4b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c4b8:	1c74      	adds	r4, r6, #1
 800c4ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c4be:	3508      	adds	r5, #8
 800c4c0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800c4c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c4c8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c4cc:	ee10 3a10 	vmov	r3, s0
 800c4d0:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800c4d4:	ee17 3a90 	vmov	r3, s15
 800c4d8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800c4dc:	e74b      	b.n	800c376 <__kernel_rem_pio2f+0x1f6>
 800c4de:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c4e2:	aa08      	add	r2, sp, #32
 800c4e4:	ee10 3a10 	vmov	r3, s0
 800c4e8:	4634      	mov	r4, r6
 800c4ea:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800c4ee:	e742      	b.n	800c376 <__kernel_rem_pio2f+0x1f6>
 800c4f0:	a808      	add	r0, sp, #32
 800c4f2:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800c4f6:	9001      	str	r0, [sp, #4]
 800c4f8:	ee07 0a90 	vmov	s15, r0
 800c4fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c500:	3a01      	subs	r2, #1
 800c502:	ee67 7a80 	vmul.f32	s15, s15, s0
 800c506:	ee20 0a07 	vmul.f32	s0, s0, s14
 800c50a:	ed61 7a01 	vstmdb	r1!, {s15}
 800c50e:	e73e      	b.n	800c38e <__kernel_rem_pio2f+0x20e>
 800c510:	ecfc 6a01 	vldmia	ip!, {s13}
 800c514:	ecb6 7a01 	vldmia	r6!, {s14}
 800c518:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c51c:	3001      	adds	r0, #1
 800c51e:	4550      	cmp	r0, sl
 800c520:	dc01      	bgt.n	800c526 <__kernel_rem_pio2f+0x3a6>
 800c522:	4288      	cmp	r0, r1
 800c524:	ddf4      	ble.n	800c510 <__kernel_rem_pio2f+0x390>
 800c526:	a858      	add	r0, sp, #352	; 0x160
 800c528:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c52c:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800c530:	3a01      	subs	r2, #1
 800c532:	e730      	b.n	800c396 <__kernel_rem_pio2f+0x216>
 800c534:	9a66      	ldr	r2, [sp, #408]	; 0x198
 800c536:	2a02      	cmp	r2, #2
 800c538:	dc09      	bgt.n	800c54e <__kernel_rem_pio2f+0x3ce>
 800c53a:	2a00      	cmp	r2, #0
 800c53c:	dc2a      	bgt.n	800c594 <__kernel_rem_pio2f+0x414>
 800c53e:	d043      	beq.n	800c5c8 <__kernel_rem_pio2f+0x448>
 800c540:	f009 0007 	and.w	r0, r9, #7
 800c544:	b059      	add	sp, #356	; 0x164
 800c546:	ecbd 8b04 	vpop	{d8-d9}
 800c54a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c54e:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800c550:	2b03      	cmp	r3, #3
 800c552:	d1f5      	bne.n	800c540 <__kernel_rem_pio2f+0x3c0>
 800c554:	ab30      	add	r3, sp, #192	; 0xc0
 800c556:	442b      	add	r3, r5
 800c558:	461a      	mov	r2, r3
 800c55a:	4619      	mov	r1, r3
 800c55c:	4620      	mov	r0, r4
 800c55e:	2800      	cmp	r0, #0
 800c560:	f1a1 0104 	sub.w	r1, r1, #4
 800c564:	dc51      	bgt.n	800c60a <__kernel_rem_pio2f+0x48a>
 800c566:	4621      	mov	r1, r4
 800c568:	2901      	cmp	r1, #1
 800c56a:	f1a2 0204 	sub.w	r2, r2, #4
 800c56e:	dc5c      	bgt.n	800c62a <__kernel_rem_pio2f+0x4aa>
 800c570:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800c48c <__kernel_rem_pio2f+0x30c>
 800c574:	3304      	adds	r3, #4
 800c576:	2c01      	cmp	r4, #1
 800c578:	dc67      	bgt.n	800c64a <__kernel_rem_pio2f+0x4ca>
 800c57a:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800c57e:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800c582:	2f00      	cmp	r7, #0
 800c584:	d167      	bne.n	800c656 <__kernel_rem_pio2f+0x4d6>
 800c586:	edc8 6a00 	vstr	s13, [r8]
 800c58a:	ed88 7a01 	vstr	s14, [r8, #4]
 800c58e:	edc8 7a02 	vstr	s15, [r8, #8]
 800c592:	e7d5      	b.n	800c540 <__kernel_rem_pio2f+0x3c0>
 800c594:	aa30      	add	r2, sp, #192	; 0xc0
 800c596:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 800c48c <__kernel_rem_pio2f+0x30c>
 800c59a:	4413      	add	r3, r2
 800c59c:	4622      	mov	r2, r4
 800c59e:	2a00      	cmp	r2, #0
 800c5a0:	da24      	bge.n	800c5ec <__kernel_rem_pio2f+0x46c>
 800c5a2:	b34f      	cbz	r7, 800c5f8 <__kernel_rem_pio2f+0x478>
 800c5a4:	eef1 7a47 	vneg.f32	s15, s14
 800c5a8:	edc8 7a00 	vstr	s15, [r8]
 800c5ac:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800c5b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c5b4:	aa31      	add	r2, sp, #196	; 0xc4
 800c5b6:	2301      	movs	r3, #1
 800c5b8:	429c      	cmp	r4, r3
 800c5ba:	da20      	bge.n	800c5fe <__kernel_rem_pio2f+0x47e>
 800c5bc:	b10f      	cbz	r7, 800c5c2 <__kernel_rem_pio2f+0x442>
 800c5be:	eef1 7a67 	vneg.f32	s15, s15
 800c5c2:	edc8 7a01 	vstr	s15, [r8, #4]
 800c5c6:	e7bb      	b.n	800c540 <__kernel_rem_pio2f+0x3c0>
 800c5c8:	aa30      	add	r2, sp, #192	; 0xc0
 800c5ca:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 800c48c <__kernel_rem_pio2f+0x30c>
 800c5ce:	4413      	add	r3, r2
 800c5d0:	2c00      	cmp	r4, #0
 800c5d2:	da05      	bge.n	800c5e0 <__kernel_rem_pio2f+0x460>
 800c5d4:	b10f      	cbz	r7, 800c5da <__kernel_rem_pio2f+0x45a>
 800c5d6:	eef1 7a67 	vneg.f32	s15, s15
 800c5da:	edc8 7a00 	vstr	s15, [r8]
 800c5de:	e7af      	b.n	800c540 <__kernel_rem_pio2f+0x3c0>
 800c5e0:	ed33 7a01 	vldmdb	r3!, {s14}
 800c5e4:	3c01      	subs	r4, #1
 800c5e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c5ea:	e7f1      	b.n	800c5d0 <__kernel_rem_pio2f+0x450>
 800c5ec:	ed73 7a01 	vldmdb	r3!, {s15}
 800c5f0:	3a01      	subs	r2, #1
 800c5f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c5f6:	e7d2      	b.n	800c59e <__kernel_rem_pio2f+0x41e>
 800c5f8:	eef0 7a47 	vmov.f32	s15, s14
 800c5fc:	e7d4      	b.n	800c5a8 <__kernel_rem_pio2f+0x428>
 800c5fe:	ecb2 7a01 	vldmia	r2!, {s14}
 800c602:	3301      	adds	r3, #1
 800c604:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c608:	e7d6      	b.n	800c5b8 <__kernel_rem_pio2f+0x438>
 800c60a:	edd1 7a00 	vldr	s15, [r1]
 800c60e:	edd1 6a01 	vldr	s13, [r1, #4]
 800c612:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c616:	3801      	subs	r0, #1
 800c618:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c61c:	ed81 7a00 	vstr	s14, [r1]
 800c620:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c624:	edc1 7a01 	vstr	s15, [r1, #4]
 800c628:	e799      	b.n	800c55e <__kernel_rem_pio2f+0x3de>
 800c62a:	edd2 7a00 	vldr	s15, [r2]
 800c62e:	edd2 6a01 	vldr	s13, [r2, #4]
 800c632:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c636:	3901      	subs	r1, #1
 800c638:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c63c:	ed82 7a00 	vstr	s14, [r2]
 800c640:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c644:	edc2 7a01 	vstr	s15, [r2, #4]
 800c648:	e78e      	b.n	800c568 <__kernel_rem_pio2f+0x3e8>
 800c64a:	ed33 7a01 	vldmdb	r3!, {s14}
 800c64e:	3c01      	subs	r4, #1
 800c650:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c654:	e78f      	b.n	800c576 <__kernel_rem_pio2f+0x3f6>
 800c656:	eef1 6a66 	vneg.f32	s13, s13
 800c65a:	eeb1 7a47 	vneg.f32	s14, s14
 800c65e:	edc8 6a00 	vstr	s13, [r8]
 800c662:	ed88 7a01 	vstr	s14, [r8, #4]
 800c666:	eef1 7a67 	vneg.f32	s15, s15
 800c66a:	e790      	b.n	800c58e <__kernel_rem_pio2f+0x40e>

0800c66c <__kernel_sinf>:
 800c66c:	ee10 3a10 	vmov	r3, s0
 800c670:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c674:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800c678:	da04      	bge.n	800c684 <__kernel_sinf+0x18>
 800c67a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800c67e:	ee17 3a90 	vmov	r3, s15
 800c682:	b35b      	cbz	r3, 800c6dc <__kernel_sinf+0x70>
 800c684:	ee20 7a00 	vmul.f32	s14, s0, s0
 800c688:	eddf 7a15 	vldr	s15, [pc, #84]	; 800c6e0 <__kernel_sinf+0x74>
 800c68c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800c6e4 <__kernel_sinf+0x78>
 800c690:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c694:	eddf 7a14 	vldr	s15, [pc, #80]	; 800c6e8 <__kernel_sinf+0x7c>
 800c698:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c69c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800c6ec <__kernel_sinf+0x80>
 800c6a0:	eea7 6a87 	vfma.f32	s12, s15, s14
 800c6a4:	eddf 7a12 	vldr	s15, [pc, #72]	; 800c6f0 <__kernel_sinf+0x84>
 800c6a8:	ee60 6a07 	vmul.f32	s13, s0, s14
 800c6ac:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c6b0:	b930      	cbnz	r0, 800c6c0 <__kernel_sinf+0x54>
 800c6b2:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800c6f4 <__kernel_sinf+0x88>
 800c6b6:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c6ba:	eea6 0a26 	vfma.f32	s0, s12, s13
 800c6be:	4770      	bx	lr
 800c6c0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800c6c4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800c6c8:	eee0 7a86 	vfma.f32	s15, s1, s12
 800c6cc:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800c6d0:	eddf 7a09 	vldr	s15, [pc, #36]	; 800c6f8 <__kernel_sinf+0x8c>
 800c6d4:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800c6d8:	ee30 0a60 	vsub.f32	s0, s0, s1
 800c6dc:	4770      	bx	lr
 800c6de:	bf00      	nop
 800c6e0:	2f2ec9d3 	.word	0x2f2ec9d3
 800c6e4:	b2d72f34 	.word	0xb2d72f34
 800c6e8:	3638ef1b 	.word	0x3638ef1b
 800c6ec:	b9500d01 	.word	0xb9500d01
 800c6f0:	3c088889 	.word	0x3c088889
 800c6f4:	be2aaaab 	.word	0xbe2aaaab
 800c6f8:	3e2aaaab 	.word	0x3e2aaaab

0800c6fc <fabsf>:
 800c6fc:	ee10 3a10 	vmov	r3, s0
 800c700:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c704:	ee00 3a10 	vmov	s0, r3
 800c708:	4770      	bx	lr
	...

0800c70c <floorf>:
 800c70c:	ee10 3a10 	vmov	r3, s0
 800c710:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c714:	3a7f      	subs	r2, #127	; 0x7f
 800c716:	2a16      	cmp	r2, #22
 800c718:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c71c:	dc2a      	bgt.n	800c774 <floorf+0x68>
 800c71e:	2a00      	cmp	r2, #0
 800c720:	da11      	bge.n	800c746 <floorf+0x3a>
 800c722:	eddf 7a18 	vldr	s15, [pc, #96]	; 800c784 <floorf+0x78>
 800c726:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c72a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c72e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c732:	dd05      	ble.n	800c740 <floorf+0x34>
 800c734:	2b00      	cmp	r3, #0
 800c736:	da23      	bge.n	800c780 <floorf+0x74>
 800c738:	4a13      	ldr	r2, [pc, #76]	; (800c788 <floorf+0x7c>)
 800c73a:	2900      	cmp	r1, #0
 800c73c:	bf18      	it	ne
 800c73e:	4613      	movne	r3, r2
 800c740:	ee00 3a10 	vmov	s0, r3
 800c744:	4770      	bx	lr
 800c746:	4911      	ldr	r1, [pc, #68]	; (800c78c <floorf+0x80>)
 800c748:	4111      	asrs	r1, r2
 800c74a:	420b      	tst	r3, r1
 800c74c:	d0fa      	beq.n	800c744 <floorf+0x38>
 800c74e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800c784 <floorf+0x78>
 800c752:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c756:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c75a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c75e:	ddef      	ble.n	800c740 <floorf+0x34>
 800c760:	2b00      	cmp	r3, #0
 800c762:	bfbe      	ittt	lt
 800c764:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800c768:	fa40 f202 	asrlt.w	r2, r0, r2
 800c76c:	189b      	addlt	r3, r3, r2
 800c76e:	ea23 0301 	bic.w	r3, r3, r1
 800c772:	e7e5      	b.n	800c740 <floorf+0x34>
 800c774:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800c778:	d3e4      	bcc.n	800c744 <floorf+0x38>
 800c77a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c77e:	4770      	bx	lr
 800c780:	2300      	movs	r3, #0
 800c782:	e7dd      	b.n	800c740 <floorf+0x34>
 800c784:	7149f2ca 	.word	0x7149f2ca
 800c788:	bf800000 	.word	0xbf800000
 800c78c:	007fffff 	.word	0x007fffff

0800c790 <scalbnf>:
 800c790:	ee10 3a10 	vmov	r3, s0
 800c794:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800c798:	d025      	beq.n	800c7e6 <scalbnf+0x56>
 800c79a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800c79e:	d302      	bcc.n	800c7a6 <scalbnf+0x16>
 800c7a0:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c7a4:	4770      	bx	lr
 800c7a6:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800c7aa:	d122      	bne.n	800c7f2 <scalbnf+0x62>
 800c7ac:	4b2a      	ldr	r3, [pc, #168]	; (800c858 <scalbnf+0xc8>)
 800c7ae:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800c85c <scalbnf+0xcc>
 800c7b2:	4298      	cmp	r0, r3
 800c7b4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c7b8:	db16      	blt.n	800c7e8 <scalbnf+0x58>
 800c7ba:	ee10 3a10 	vmov	r3, s0
 800c7be:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c7c2:	3a19      	subs	r2, #25
 800c7c4:	4402      	add	r2, r0
 800c7c6:	2afe      	cmp	r2, #254	; 0xfe
 800c7c8:	dd15      	ble.n	800c7f6 <scalbnf+0x66>
 800c7ca:	ee10 3a10 	vmov	r3, s0
 800c7ce:	eddf 7a24 	vldr	s15, [pc, #144]	; 800c860 <scalbnf+0xd0>
 800c7d2:	eddf 6a24 	vldr	s13, [pc, #144]	; 800c864 <scalbnf+0xd4>
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	eeb0 7a67 	vmov.f32	s14, s15
 800c7dc:	bfb8      	it	lt
 800c7de:	eef0 7a66 	vmovlt.f32	s15, s13
 800c7e2:	ee27 0a27 	vmul.f32	s0, s14, s15
 800c7e6:	4770      	bx	lr
 800c7e8:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800c868 <scalbnf+0xd8>
 800c7ec:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c7f0:	4770      	bx	lr
 800c7f2:	0dd2      	lsrs	r2, r2, #23
 800c7f4:	e7e6      	b.n	800c7c4 <scalbnf+0x34>
 800c7f6:	2a00      	cmp	r2, #0
 800c7f8:	dd06      	ble.n	800c808 <scalbnf+0x78>
 800c7fa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c7fe:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800c802:	ee00 3a10 	vmov	s0, r3
 800c806:	4770      	bx	lr
 800c808:	f112 0f16 	cmn.w	r2, #22
 800c80c:	da1a      	bge.n	800c844 <scalbnf+0xb4>
 800c80e:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c812:	4298      	cmp	r0, r3
 800c814:	ee10 3a10 	vmov	r3, s0
 800c818:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c81c:	dd0a      	ble.n	800c834 <scalbnf+0xa4>
 800c81e:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800c860 <scalbnf+0xd0>
 800c822:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800c864 <scalbnf+0xd4>
 800c826:	eef0 7a40 	vmov.f32	s15, s0
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	bf18      	it	ne
 800c82e:	eeb0 0a47 	vmovne.f32	s0, s14
 800c832:	e7db      	b.n	800c7ec <scalbnf+0x5c>
 800c834:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800c868 <scalbnf+0xd8>
 800c838:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800c86c <scalbnf+0xdc>
 800c83c:	eef0 7a40 	vmov.f32	s15, s0
 800c840:	2b00      	cmp	r3, #0
 800c842:	e7f3      	b.n	800c82c <scalbnf+0x9c>
 800c844:	3219      	adds	r2, #25
 800c846:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c84a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800c84e:	eddf 7a08 	vldr	s15, [pc, #32]	; 800c870 <scalbnf+0xe0>
 800c852:	ee07 3a10 	vmov	s14, r3
 800c856:	e7c4      	b.n	800c7e2 <scalbnf+0x52>
 800c858:	ffff3cb0 	.word	0xffff3cb0
 800c85c:	4c000000 	.word	0x4c000000
 800c860:	7149f2ca 	.word	0x7149f2ca
 800c864:	f149f2ca 	.word	0xf149f2ca
 800c868:	0da24260 	.word	0x0da24260
 800c86c:	8da24260 	.word	0x8da24260
 800c870:	33000000 	.word	0x33000000

0800c874 <_init>:
 800c874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c876:	bf00      	nop
 800c878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c87a:	bc08      	pop	{r3}
 800c87c:	469e      	mov	lr, r3
 800c87e:	4770      	bx	lr

0800c880 <_fini>:
 800c880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c882:	bf00      	nop
 800c884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c886:	bc08      	pop	{r3}
 800c888:	469e      	mov	lr, r3
 800c88a:	4770      	bx	lr
