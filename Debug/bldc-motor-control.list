
bldc-motor-control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079c0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08007b60  08007b60  00008b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c40  08007c40  0000906c  2**0
                  CONTENTS
  4 .ARM          00000008  08007c40  08007c40  00008c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c48  08007c48  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c48  08007c48  00008c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c4c  08007c4c  00008c4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08007c50  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004cb8  2000006c  08007cbc  0000906c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004d24  08007cbc  00009d24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a2a6  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003912  00000000  00000000  00023342  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015e8  00000000  00000000  00026c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010fd  00000000  00000000  00028240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004ad4  00000000  00000000  0002933d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001747a  00000000  00000000  0002de11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a65bc  00000000  00000000  0004528b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000eb847  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006288  00000000  00000000  000eb88c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000f1b14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007b48 	.word	0x08007b48

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08007b48 	.word	0x08007b48

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b086      	sub	sp, #24
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d6:	f000 ff85 	bl	80013e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004da:	f000 f85d 	bl	8000598 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004de:	f000 f9dd 	bl	800089c <MX_GPIO_Init>
  MX_ADC1_Init();
 80004e2:	f000 f8c1 	bl	8000668 <MX_ADC1_Init>
  MX_USART6_UART_Init();
 80004e6:	f000 f9af 	bl	8000848 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 80004ea:	f000 f90f 	bl	800070c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */


  uint32_t time = HAL_GetTick();
 80004ee:	f000 ffaf 	bl	8001450 <HAL_GetTick>
 80004f2:	6178      	str	r0, [r7, #20]
  uint32_t max_time = 3000;
 80004f4:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80004f8:	613b      	str	r3, [r7, #16]
  uint32_t dir = CW;
 80004fa:	2301      	movs	r3, #1
 80004fc:	60fb      	str	r3, [r7, #12]
  uint32_t speed = 50;
 80004fe:	2332      	movs	r3, #50	@ 0x32
 8000500:	60bb      	str	r3, [r7, #8]
  uint32_t max_speed = 100;
 8000502:	2364      	movs	r3, #100	@ 0x64
 8000504:	607b      	str	r3, [r7, #4]

  uint32_t pot_max = 4095;
 8000506:	f640 73ff 	movw	r3, #4095	@ 0xfff
 800050a:	603b      	str	r3, [r7, #0]

 // bldc_motor_init(&htim1, &htim3);
  bldc_motor_set_speed(speed, dir);
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	b2db      	uxtb	r3, r3
 8000510:	4619      	mov	r1, r3
 8000512:	68b8      	ldr	r0, [r7, #8]
 8000514:	f000 fb00 	bl	8000b18 <bldc_motor_set_speed>

  printf("motor initialized\n");
 8000518:	4813      	ldr	r0, [pc, #76]	@ (8000568 <main+0x98>)
 800051a:	f006 ff1d 	bl	8007358 <puts>

//  HAL_ADC_Start(&hadc1);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800051e:	f003 fc17 	bl	8003d50 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of Motor */
  MotorHandle = osMutexNew(&Motor_attributes);
 8000522:	4812      	ldr	r0, [pc, #72]	@ (800056c <main+0x9c>)
 8000524:	f003 fd0b 	bl	8003f3e <osMutexNew>
 8000528:	4603      	mov	r3, r0
 800052a:	4a11      	ldr	r2, [pc, #68]	@ (8000570 <main+0xa0>)
 800052c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Spin */
  SpinHandle = osThreadNew(SpinMotor, NULL, &Spin_attributes);
 800052e:	4a11      	ldr	r2, [pc, #68]	@ (8000574 <main+0xa4>)
 8000530:	2100      	movs	r1, #0
 8000532:	4811      	ldr	r0, [pc, #68]	@ (8000578 <main+0xa8>)
 8000534:	f003 fc56 	bl	8003de4 <osThreadNew>
 8000538:	4603      	mov	r3, r0
 800053a:	4a10      	ldr	r2, [pc, #64]	@ (800057c <main+0xac>)
 800053c:	6013      	str	r3, [r2, #0]

  /* creation of Speed */
  SpeedHandle = osThreadNew(ChangeSpeed, NULL, &Speed_attributes);
 800053e:	4a10      	ldr	r2, [pc, #64]	@ (8000580 <main+0xb0>)
 8000540:	2100      	movs	r1, #0
 8000542:	4810      	ldr	r0, [pc, #64]	@ (8000584 <main+0xb4>)
 8000544:	f003 fc4e 	bl	8003de4 <osThreadNew>
 8000548:	4603      	mov	r3, r0
 800054a:	4a0f      	ldr	r2, [pc, #60]	@ (8000588 <main+0xb8>)
 800054c:	6013      	str	r3, [r2, #0]

  /* creation of Init */
  InitHandle = osThreadNew(InitMotor, NULL, &Init_attributes);
 800054e:	4a0f      	ldr	r2, [pc, #60]	@ (800058c <main+0xbc>)
 8000550:	2100      	movs	r1, #0
 8000552:	480f      	ldr	r0, [pc, #60]	@ (8000590 <main+0xc0>)
 8000554:	f003 fc46 	bl	8003de4 <osThreadNew>
 8000558:	4603      	mov	r3, r0
 800055a:	4a0e      	ldr	r2, [pc, #56]	@ (8000594 <main+0xc4>)
 800055c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800055e:	f003 fc1b 	bl	8003d98 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000562:	bf00      	nop
 8000564:	e7fd      	b.n	8000562 <main+0x92>
 8000566:	bf00      	nop
 8000568:	08007b80 	.word	0x08007b80
 800056c:	08007c18 	.word	0x08007c18
 8000570:	2000016c 	.word	0x2000016c
 8000574:	08007bac 	.word	0x08007bac
 8000578:	080009e9 	.word	0x080009e9
 800057c:	20000160 	.word	0x20000160
 8000580:	08007bd0 	.word	0x08007bd0
 8000584:	08000a39 	.word	0x08000a39
 8000588:	20000164 	.word	0x20000164
 800058c:	08007bf4 	.word	0x08007bf4
 8000590:	08000a85 	.word	0x08000a85
 8000594:	20000168 	.word	0x20000168

08000598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b094      	sub	sp, #80	@ 0x50
 800059c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059e:	f107 0320 	add.w	r3, r7, #32
 80005a2:	2230      	movs	r2, #48	@ 0x30
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f006 ffb6 	bl	8007518 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ac:	f107 030c 	add.w	r3, r7, #12
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005bc:	2300      	movs	r3, #0
 80005be:	60bb      	str	r3, [r7, #8]
 80005c0:	4b27      	ldr	r3, [pc, #156]	@ (8000660 <SystemClock_Config+0xc8>)
 80005c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005c4:	4a26      	ldr	r2, [pc, #152]	@ (8000660 <SystemClock_Config+0xc8>)
 80005c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80005cc:	4b24      	ldr	r3, [pc, #144]	@ (8000660 <SystemClock_Config+0xc8>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005d4:	60bb      	str	r3, [r7, #8]
 80005d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d8:	2300      	movs	r3, #0
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	4b21      	ldr	r3, [pc, #132]	@ (8000664 <SystemClock_Config+0xcc>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a20      	ldr	r2, [pc, #128]	@ (8000664 <SystemClock_Config+0xcc>)
 80005e2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005e6:	6013      	str	r3, [r2, #0]
 80005e8:	4b1e      	ldr	r3, [pc, #120]	@ (8000664 <SystemClock_Config+0xcc>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005f0:	607b      	str	r3, [r7, #4]
 80005f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005f4:	2302      	movs	r3, #2
 80005f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f8:	2301      	movs	r3, #1
 80005fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005fc:	2310      	movs	r3, #16
 80005fe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000600:	2302      	movs	r3, #2
 8000602:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000604:	2300      	movs	r3, #0
 8000606:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000608:	2308      	movs	r3, #8
 800060a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 800060c:	2354      	movs	r3, #84	@ 0x54
 800060e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000610:	2302      	movs	r3, #2
 8000612:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000614:	2304      	movs	r3, #4
 8000616:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000618:	f107 0320 	add.w	r3, r7, #32
 800061c:	4618      	mov	r0, r3
 800061e:	f001 fc15 	bl	8001e4c <HAL_RCC_OscConfig>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000628:	f000 fa49 	bl	8000abe <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062c:	230f      	movs	r3, #15
 800062e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000630:	2302      	movs	r3, #2
 8000632:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000638:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800063c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800063e:	2300      	movs	r3, #0
 8000640:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000642:	f107 030c 	add.w	r3, r7, #12
 8000646:	2102      	movs	r1, #2
 8000648:	4618      	mov	r0, r3
 800064a:	f001 fe77 	bl	800233c <HAL_RCC_ClockConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000654:	f000 fa33 	bl	8000abe <Error_Handler>
  }
}
 8000658:	bf00      	nop
 800065a:	3750      	adds	r7, #80	@ 0x50
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40023800 	.word	0x40023800
 8000664:	40007000 	.word	0x40007000

08000668 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800066e:	463b      	mov	r3, r7
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800067a:	4b21      	ldr	r3, [pc, #132]	@ (8000700 <MX_ADC1_Init+0x98>)
 800067c:	4a21      	ldr	r2, [pc, #132]	@ (8000704 <MX_ADC1_Init+0x9c>)
 800067e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000680:	4b1f      	ldr	r3, [pc, #124]	@ (8000700 <MX_ADC1_Init+0x98>)
 8000682:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000686:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000688:	4b1d      	ldr	r3, [pc, #116]	@ (8000700 <MX_ADC1_Init+0x98>)
 800068a:	2200      	movs	r2, #0
 800068c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800068e:	4b1c      	ldr	r3, [pc, #112]	@ (8000700 <MX_ADC1_Init+0x98>)
 8000690:	2200      	movs	r2, #0
 8000692:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000694:	4b1a      	ldr	r3, [pc, #104]	@ (8000700 <MX_ADC1_Init+0x98>)
 8000696:	2201      	movs	r2, #1
 8000698:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800069a:	4b19      	ldr	r3, [pc, #100]	@ (8000700 <MX_ADC1_Init+0x98>)
 800069c:	2200      	movs	r2, #0
 800069e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006a2:	4b17      	ldr	r3, [pc, #92]	@ (8000700 <MX_ADC1_Init+0x98>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006a8:	4b15      	ldr	r3, [pc, #84]	@ (8000700 <MX_ADC1_Init+0x98>)
 80006aa:	4a17      	ldr	r2, [pc, #92]	@ (8000708 <MX_ADC1_Init+0xa0>)
 80006ac:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006ae:	4b14      	ldr	r3, [pc, #80]	@ (8000700 <MX_ADC1_Init+0x98>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006b4:	4b12      	ldr	r3, [pc, #72]	@ (8000700 <MX_ADC1_Init+0x98>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006ba:	4b11      	ldr	r3, [pc, #68]	@ (8000700 <MX_ADC1_Init+0x98>)
 80006bc:	2200      	movs	r2, #0
 80006be:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000700 <MX_ADC1_Init+0x98>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006c8:	480d      	ldr	r0, [pc, #52]	@ (8000700 <MX_ADC1_Init+0x98>)
 80006ca:	f000 fecd 	bl	8001468 <HAL_ADC_Init>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80006d4:	f000 f9f3 	bl	8000abe <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006d8:	2300      	movs	r3, #0
 80006da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006dc:	2301      	movs	r3, #1
 80006de:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006e0:	2300      	movs	r3, #0
 80006e2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e4:	463b      	mov	r3, r7
 80006e6:	4619      	mov	r1, r3
 80006e8:	4805      	ldr	r0, [pc, #20]	@ (8000700 <MX_ADC1_Init+0x98>)
 80006ea:	f000 ff01 	bl	80014f0 <HAL_ADC_ConfigChannel>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80006f4:	f000 f9e3 	bl	8000abe <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006f8:	bf00      	nop
 80006fa:	3710      	adds	r7, #16
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	20000088 	.word	0x20000088
 8000704:	40012000 	.word	0x40012000
 8000708:	0f000001 	.word	0x0f000001

0800070c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b092      	sub	sp, #72	@ 0x48
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000712:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800071c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]
 800072c:	615a      	str	r2, [r3, #20]
 800072e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	2220      	movs	r2, #32
 8000734:	2100      	movs	r1, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f006 feee 	bl	8007518 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800073c:	4b40      	ldr	r3, [pc, #256]	@ (8000840 <MX_TIM1_Init+0x134>)
 800073e:	4a41      	ldr	r2, [pc, #260]	@ (8000844 <MX_TIM1_Init+0x138>)
 8000740:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 42-1;
 8000742:	4b3f      	ldr	r3, [pc, #252]	@ (8000840 <MX_TIM1_Init+0x134>)
 8000744:	2229      	movs	r2, #41	@ 0x29
 8000746:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000748:	4b3d      	ldr	r3, [pc, #244]	@ (8000840 <MX_TIM1_Init+0x134>)
 800074a:	2200      	movs	r2, #0
 800074c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 800074e:	4b3c      	ldr	r3, [pc, #240]	@ (8000840 <MX_TIM1_Init+0x134>)
 8000750:	2263      	movs	r2, #99	@ 0x63
 8000752:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000754:	4b3a      	ldr	r3, [pc, #232]	@ (8000840 <MX_TIM1_Init+0x134>)
 8000756:	2200      	movs	r2, #0
 8000758:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800075a:	4b39      	ldr	r3, [pc, #228]	@ (8000840 <MX_TIM1_Init+0x134>)
 800075c:	2200      	movs	r2, #0
 800075e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000760:	4b37      	ldr	r3, [pc, #220]	@ (8000840 <MX_TIM1_Init+0x134>)
 8000762:	2200      	movs	r2, #0
 8000764:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000766:	4836      	ldr	r0, [pc, #216]	@ (8000840 <MX_TIM1_Init+0x134>)
 8000768:	f002 f8b6 	bl	80028d8 <HAL_TIM_PWM_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8000772:	f000 f9a4 	bl	8000abe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000776:	2300      	movs	r3, #0
 8000778:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800077a:	2300      	movs	r3, #0
 800077c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800077e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000782:	4619      	mov	r1, r3
 8000784:	482e      	ldr	r0, [pc, #184]	@ (8000840 <MX_TIM1_Init+0x134>)
 8000786:	f002 fdbf 	bl	8003308 <HAL_TIMEx_MasterConfigSynchronization>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8000790:	f000 f995 	bl	8000abe <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000794:	2360      	movs	r3, #96	@ 0x60
 8000796:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000798:	2300      	movs	r3, #0
 800079a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800079c:	2300      	movs	r3, #0
 800079e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007a0:	2300      	movs	r3, #0
 80007a2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007a4:	2300      	movs	r3, #0
 80007a6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007a8:	2300      	movs	r3, #0
 80007aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007ac:	2300      	movs	r3, #0
 80007ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007b4:	2200      	movs	r2, #0
 80007b6:	4619      	mov	r1, r3
 80007b8:	4821      	ldr	r0, [pc, #132]	@ (8000840 <MX_TIM1_Init+0x134>)
 80007ba:	f002 fa7d 	bl	8002cb8 <HAL_TIM_PWM_ConfigChannel>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 80007c4:	f000 f97b 	bl	8000abe <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80007c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007cc:	2208      	movs	r2, #8
 80007ce:	4619      	mov	r1, r3
 80007d0:	481b      	ldr	r0, [pc, #108]	@ (8000840 <MX_TIM1_Init+0x134>)
 80007d2:	f002 fa71 	bl	8002cb8 <HAL_TIM_PWM_ConfigChannel>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 80007dc:	f000 f96f 	bl	8000abe <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80007e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007e4:	220c      	movs	r2, #12
 80007e6:	4619      	mov	r1, r3
 80007e8:	4815      	ldr	r0, [pc, #84]	@ (8000840 <MX_TIM1_Init+0x134>)
 80007ea:	f002 fa65 	bl	8002cb8 <HAL_TIM_PWM_ConfigChannel>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 80007f4:	f000 f963 	bl	8000abe <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 80007f8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80007fc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 80007fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000802:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000804:	2300      	movs	r3, #0
 8000806:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000808:	2300      	movs	r3, #0
 800080a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 800080c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000810:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000812:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000816:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8000818:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800081c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800081e:	1d3b      	adds	r3, r7, #4
 8000820:	4619      	mov	r1, r3
 8000822:	4807      	ldr	r0, [pc, #28]	@ (8000840 <MX_TIM1_Init+0x134>)
 8000824:	f002 fdde 	bl	80033e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 800082e:	f000 f946 	bl	8000abe <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000832:	4803      	ldr	r0, [pc, #12]	@ (8000840 <MX_TIM1_Init+0x134>)
 8000834:	f000 fbb0 	bl	8000f98 <HAL_TIM_MspPostInit>

}
 8000838:	bf00      	nop
 800083a:	3748      	adds	r7, #72	@ 0x48
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	200000d0 	.word	0x200000d0
 8000844:	40010000 	.word	0x40010000

08000848 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800084c:	4b11      	ldr	r3, [pc, #68]	@ (8000894 <MX_USART6_UART_Init+0x4c>)
 800084e:	4a12      	ldr	r2, [pc, #72]	@ (8000898 <MX_USART6_UART_Init+0x50>)
 8000850:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000852:	4b10      	ldr	r3, [pc, #64]	@ (8000894 <MX_USART6_UART_Init+0x4c>)
 8000854:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000858:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800085a:	4b0e      	ldr	r3, [pc, #56]	@ (8000894 <MX_USART6_UART_Init+0x4c>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000860:	4b0c      	ldr	r3, [pc, #48]	@ (8000894 <MX_USART6_UART_Init+0x4c>)
 8000862:	2200      	movs	r2, #0
 8000864:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000866:	4b0b      	ldr	r3, [pc, #44]	@ (8000894 <MX_USART6_UART_Init+0x4c>)
 8000868:	2200      	movs	r2, #0
 800086a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800086c:	4b09      	ldr	r3, [pc, #36]	@ (8000894 <MX_USART6_UART_Init+0x4c>)
 800086e:	220c      	movs	r2, #12
 8000870:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000872:	4b08      	ldr	r3, [pc, #32]	@ (8000894 <MX_USART6_UART_Init+0x4c>)
 8000874:	2200      	movs	r2, #0
 8000876:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000878:	4b06      	ldr	r3, [pc, #24]	@ (8000894 <MX_USART6_UART_Init+0x4c>)
 800087a:	2200      	movs	r2, #0
 800087c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800087e:	4805      	ldr	r0, [pc, #20]	@ (8000894 <MX_USART6_UART_Init+0x4c>)
 8000880:	f002 fe16 	bl	80034b0 <HAL_UART_Init>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800088a:	f000 f918 	bl	8000abe <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	20000118 	.word	0x20000118
 8000898:	40011400 	.word	0x40011400

0800089c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b08a      	sub	sp, #40	@ 0x28
 80008a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a2:	f107 0314 	add.w	r3, r7, #20
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]
 80008ac:	609a      	str	r2, [r3, #8]
 80008ae:	60da      	str	r2, [r3, #12]
 80008b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	613b      	str	r3, [r7, #16]
 80008b6:	4b39      	ldr	r3, [pc, #228]	@ (800099c <MX_GPIO_Init+0x100>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	4a38      	ldr	r2, [pc, #224]	@ (800099c <MX_GPIO_Init+0x100>)
 80008bc:	f043 0301 	orr.w	r3, r3, #1
 80008c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c2:	4b36      	ldr	r3, [pc, #216]	@ (800099c <MX_GPIO_Init+0x100>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	613b      	str	r3, [r7, #16]
 80008cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	60fb      	str	r3, [r7, #12]
 80008d2:	4b32      	ldr	r3, [pc, #200]	@ (800099c <MX_GPIO_Init+0x100>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d6:	4a31      	ldr	r2, [pc, #196]	@ (800099c <MX_GPIO_Init+0x100>)
 80008d8:	f043 0310 	orr.w	r3, r3, #16
 80008dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008de:	4b2f      	ldr	r3, [pc, #188]	@ (800099c <MX_GPIO_Init+0x100>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	f003 0310 	and.w	r3, r3, #16
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	60bb      	str	r3, [r7, #8]
 80008ee:	4b2b      	ldr	r3, [pc, #172]	@ (800099c <MX_GPIO_Init+0x100>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	4a2a      	ldr	r2, [pc, #168]	@ (800099c <MX_GPIO_Init+0x100>)
 80008f4:	f043 0302 	orr.w	r3, r3, #2
 80008f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fa:	4b28      	ldr	r3, [pc, #160]	@ (800099c <MX_GPIO_Init+0x100>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	f003 0302 	and.w	r3, r3, #2
 8000902:	60bb      	str	r3, [r7, #8]
 8000904:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	607b      	str	r3, [r7, #4]
 800090a:	4b24      	ldr	r3, [pc, #144]	@ (800099c <MX_GPIO_Init+0x100>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	4a23      	ldr	r2, [pc, #140]	@ (800099c <MX_GPIO_Init+0x100>)
 8000910:	f043 0308 	orr.w	r3, r3, #8
 8000914:	6313      	str	r3, [r2, #48]	@ 0x30
 8000916:	4b21      	ldr	r3, [pc, #132]	@ (800099c <MX_GPIO_Init+0x100>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	f003 0308 	and.w	r3, r3, #8
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	603b      	str	r3, [r7, #0]
 8000926:	4b1d      	ldr	r3, [pc, #116]	@ (800099c <MX_GPIO_Init+0x100>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	4a1c      	ldr	r2, [pc, #112]	@ (800099c <MX_GPIO_Init+0x100>)
 800092c:	f043 0304 	orr.w	r3, r3, #4
 8000930:	6313      	str	r3, [r2, #48]	@ 0x30
 8000932:	4b1a      	ldr	r3, [pc, #104]	@ (800099c <MX_GPIO_Init+0x100>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	f003 0304 	and.w	r3, r3, #4
 800093a:	603b      	str	r3, [r7, #0]
 800093c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PWM1EN_Pin|PWM2EN_Pin|PWM3EN_Pin, GPIO_PIN_RESET);
 800093e:	2200      	movs	r2, #0
 8000940:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 8000944:	4816      	ldr	r0, [pc, #88]	@ (80009a0 <MX_GPIO_Init+0x104>)
 8000946:	f001 fa67 	bl	8001e18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD3_Pin|LD4_Pin|LD5_Pin|LDN_Pin, GPIO_PIN_RESET);
 800094a:	2200      	movs	r2, #0
 800094c:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000950:	4814      	ldr	r0, [pc, #80]	@ (80009a4 <MX_GPIO_Init+0x108>)
 8000952:	f001 fa61 	bl	8001e18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PWM1EN_Pin PWM2EN_Pin PWM3EN_Pin */
  GPIO_InitStruct.Pin = PWM1EN_Pin|PWM2EN_Pin|PWM3EN_Pin;
 8000956:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 800095a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095c:	2301      	movs	r3, #1
 800095e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000964:	2300      	movs	r3, #0
 8000966:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000968:	f107 0314 	add.w	r3, r7, #20
 800096c:	4619      	mov	r1, r3
 800096e:	480c      	ldr	r0, [pc, #48]	@ (80009a0 <MX_GPIO_Init+0x104>)
 8000970:	f001 f8ce 	bl	8001b10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin LD5_Pin LDN_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin|LD5_Pin|LDN_Pin;
 8000974:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000978:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097a:	2301      	movs	r3, #1
 800097c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000982:	2302      	movs	r3, #2
 8000984:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000986:	f107 0314 	add.w	r3, r7, #20
 800098a:	4619      	mov	r1, r3
 800098c:	4805      	ldr	r0, [pc, #20]	@ (80009a4 <MX_GPIO_Init+0x108>)
 800098e:	f001 f8bf 	bl	8001b10 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000992:	bf00      	nop
 8000994:	3728      	adds	r7, #40	@ 0x28
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40023800 	.word	0x40023800
 80009a0:	40020400 	.word	0x40020400
 80009a4:	40020c00 	.word	0x40020c00

080009a8 <__io_putchar>:

/* USER CODE BEGIN 4 */


int __io_putchar(int ch)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
    if (ch == '\n') {
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2b0a      	cmp	r3, #10
 80009b4:	d109      	bne.n	80009ca <__io_putchar+0x22>
        uint8_t ch6 = '\r';
 80009b6:	230d      	movs	r3, #13
 80009b8:	73fb      	strb	r3, [r7, #15]
        HAL_UART_Transmit(&huart6, &ch6, 1, HAL_MAX_DELAY);
 80009ba:	f107 010f 	add.w	r1, r7, #15
 80009be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80009c2:	2201      	movs	r2, #1
 80009c4:	4807      	ldr	r0, [pc, #28]	@ (80009e4 <__io_putchar+0x3c>)
 80009c6:	f002 fdc3 	bl	8003550 <HAL_UART_Transmit>
    }

    HAL_UART_Transmit(&huart6, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80009ca:	1d39      	adds	r1, r7, #4
 80009cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80009d0:	2201      	movs	r2, #1
 80009d2:	4804      	ldr	r0, [pc, #16]	@ (80009e4 <__io_putchar+0x3c>)
 80009d4:	f002 fdbc 	bl	8003550 <HAL_UART_Transmit>
    return 1;
 80009d8:	2301      	movs	r3, #1
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3710      	adds	r7, #16
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	20000118 	.word	0x20000118

080009e8 <SpinMotor>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_SpinMotor */
void SpinMotor(void *argument)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  if(osMutexAcquire(MotorHandle, osWaitForever)==osOK){
 80009f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a30 <SpinMotor+0x48>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80009f8:	4618      	mov	r0, r3
 80009fa:	f003 fb26 	bl	800404a <osMutexAcquire>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d110      	bne.n	8000a26 <SpinMotor+0x3e>

		  //logic for spinning the motor here

		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, SET);
 8000a04:	2201      	movs	r2, #1
 8000a06:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a0a:	480a      	ldr	r0, [pc, #40]	@ (8000a34 <SpinMotor+0x4c>)
 8000a0c:	f001 fa04 	bl	8001e18 <HAL_GPIO_WritePin>
		  bldc_motor_six_step_algorithm();
 8000a10:	f000 f8da 	bl	8000bc8 <bldc_motor_six_step_algorithm>
		  osMutexRelease(MotorHandle);
 8000a14:	4b06      	ldr	r3, [pc, #24]	@ (8000a30 <SpinMotor+0x48>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f003 fb61 	bl	80040e0 <osMutexRelease>
		  osDelay(2000);
 8000a1e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000a22:	f003 fa71 	bl	8003f08 <osDelay>
	  }
    osDelay(1);
 8000a26:	2001      	movs	r0, #1
 8000a28:	f003 fa6e 	bl	8003f08 <osDelay>
	  if(osMutexAcquire(MotorHandle, osWaitForever)==osOK){
 8000a2c:	e7e0      	b.n	80009f0 <SpinMotor+0x8>
 8000a2e:	bf00      	nop
 8000a30:	2000016c 	.word	0x2000016c
 8000a34:	40020c00 	.word	0x40020c00

08000a38 <ChangeSpeed>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ChangeSpeed */
void ChangeSpeed(void *argument)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ChangeSpeed */
  /* Infinite loop */
  for(;;)
  {
	  // if button pressed then:
	  if(osMutexAcquire(MotorHandle, osWaitForever)==osOK){
 8000a40:	4b0e      	ldr	r3, [pc, #56]	@ (8000a7c <ChangeSpeed+0x44>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f003 fafe 	bl	800404a <osMutexAcquire>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d10e      	bne.n	8000a72 <ChangeSpeed+0x3a>

		  //logic for changing the speed here
		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, SET);
 8000a54:	2201      	movs	r2, #1
 8000a56:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a5a:	4809      	ldr	r0, [pc, #36]	@ (8000a80 <ChangeSpeed+0x48>)
 8000a5c:	f001 f9dc 	bl	8001e18 <HAL_GPIO_WritePin>
		  osMutexRelease(MotorHandle);
 8000a60:	4b06      	ldr	r3, [pc, #24]	@ (8000a7c <ChangeSpeed+0x44>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4618      	mov	r0, r3
 8000a66:	f003 fb3b 	bl	80040e0 <osMutexRelease>
		  osDelay(2000);
 8000a6a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000a6e:	f003 fa4b 	bl	8003f08 <osDelay>
	  }

   osDelay(1);
 8000a72:	2001      	movs	r0, #1
 8000a74:	f003 fa48 	bl	8003f08 <osDelay>
	  if(osMutexAcquire(MotorHandle, osWaitForever)==osOK){
 8000a78:	e7e2      	b.n	8000a40 <ChangeSpeed+0x8>
 8000a7a:	bf00      	nop
 8000a7c:	2000016c 	.word	0x2000016c
 8000a80:	40020c00 	.word	0x40020c00

08000a84 <InitMotor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_InitMotor */
void InitMotor(void *argument)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN InitMotor */
  /* Infinite loop */
  for(;;)
  {
   bldc_motor_init(&htim1);
 8000a8c:	4803      	ldr	r0, [pc, #12]	@ (8000a9c <InitMotor+0x18>)
 8000a8e:	f000 f81d 	bl	8000acc <bldc_motor_init>
   //bldc_motor_set_speed(speed, dir);


   osDelay(1);
 8000a92:	2001      	movs	r0, #1
 8000a94:	f003 fa38 	bl	8003f08 <osDelay>
   bldc_motor_init(&htim1);
 8000a98:	bf00      	nop
 8000a9a:	e7f7      	b.n	8000a8c <InitMotor+0x8>
 8000a9c:	200000d0 	.word	0x200000d0

08000aa0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ab0:	d101      	bne.n	8000ab6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ab2:	f000 fcb9 	bl	8001428 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}

08000abe <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac2:	b672      	cpsid	i
}
 8000ac4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac6:	bf00      	nop
 8000ac8:	e7fd      	b.n	8000ac6 <Error_Handler+0x8>
	...

08000acc <bldc_motor_init>:
////	HAL_GPIO_WritePin(PH2_GPIO_Port, PH2_Pin, GPIO_PIN_SET);
////	HAL_GPIO_WritePin(PWM3EN_GPIO_Port, PWM3EN_Pin, GPIO_PIN_SET);
//}

void bldc_motor_init(TIM_HandleTypeDef *_tim_pwm)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
	bldc.tim_pwm = _tim_pwm;
 8000ad4:	4a0e      	ldr	r2, [pc, #56]	@ (8000b10 <bldc_motor_init+0x44>)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	6113      	str	r3, [r2, #16]
	//bldc.tim_com = _tim_com;

	bldc.step_number = 1;
 8000ada:	4b0d      	ldr	r3, [pc, #52]	@ (8000b10 <bldc_motor_init+0x44>)
 8000adc:	2201      	movs	r2, #1
 8000ade:	701a      	strb	r2, [r3, #0]
	bldc.speed_pulse = 0;
 8000ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8000b10 <bldc_motor_init+0x44>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	605a      	str	r2, [r3, #4]
	bldc.dir = CW;
 8000ae6:	4b0a      	ldr	r3, [pc, #40]	@ (8000b10 <bldc_motor_init+0x44>)
 8000ae8:	2201      	movs	r2, #1
 8000aea:	609a      	str	r2, [r3, #8]

	bldc_motor_Config_Channel_Init();
 8000aec:	f000 f830 	bl	8000b50 <bldc_motor_Config_Channel_Init>
	//__HAL_TIM_SET_AUTORELOAD(bldc.tim_com, ARR_TIM3_VALUE);

	//HAL_TIM_Base_Start(bldc.tim_com);
	//HAL_TIMEx_ConfigCommutationEvent_IT(bldc.tim_pwm, TIM_TS_ITR2, TIM_COMMUTATION_TRGI);

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000af0:	2100      	movs	r1, #0
 8000af2:	4808      	ldr	r0, [pc, #32]	@ (8000b14 <bldc_motor_init+0x48>)
 8000af4:	f001 ff40 	bl	8002978 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000af8:	210c      	movs	r1, #12
 8000afa:	4806      	ldr	r0, [pc, #24]	@ (8000b14 <bldc_motor_init+0x48>)
 8000afc:	f001 ff3c 	bl	8002978 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000b00:	2108      	movs	r1, #8
 8000b02:	4804      	ldr	r0, [pc, #16]	@ (8000b14 <bldc_motor_init+0x48>)
 8000b04:	f001 ff38 	bl	8002978 <HAL_TIM_PWM_Start>
	// ???
//	bldc_motor_PWM_Config_Channel(bldc.speed_pulse, TIM_CHANNEL_1);
//	bldc_motor_PWM_Config_Channel(bldc.speed_pulse, TIM_CHANNEL_4);
//	bldc_motor_PWM_Config_Channel(bldc.speed_pulse, TIM_CHANNEL_3);

}
 8000b08:	bf00      	nop
 8000b0a:	3708      	adds	r7, #8
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20000170 	.word	0x20000170
 8000b14:	200000d0 	.word	0x200000d0

08000b18 <bldc_motor_set_speed>:



void bldc_motor_set_speed(uint32_t speed, direction dir)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	460b      	mov	r3, r1
 8000b22:	70fb      	strb	r3, [r7, #3]
	if(speed > BLDC_MOTOR_MAX_SPEED)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2b64      	cmp	r3, #100	@ 0x64
 8000b28:	d903      	bls.n	8000b32 <bldc_motor_set_speed+0x1a>
	{
		bldc.speed_pulse = BLDC_MOTOR_MAX_SPEED;
 8000b2a:	4b08      	ldr	r3, [pc, #32]	@ (8000b4c <bldc_motor_set_speed+0x34>)
 8000b2c:	2264      	movs	r2, #100	@ 0x64
 8000b2e:	605a      	str	r2, [r3, #4]
 8000b30:	e002      	b.n	8000b38 <bldc_motor_set_speed+0x20>
	}
	else
	{
		bldc.speed_pulse = speed;
 8000b32:	4a06      	ldr	r2, [pc, #24]	@ (8000b4c <bldc_motor_set_speed+0x34>)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6053      	str	r3, [r2, #4]
	}

	bldc.dir = dir;
 8000b38:	78fb      	ldrb	r3, [r7, #3]
 8000b3a:	4a04      	ldr	r2, [pc, #16]	@ (8000b4c <bldc_motor_set_speed+0x34>)
 8000b3c:	6093      	str	r3, [r2, #8]
}
 8000b3e:	bf00      	nop
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	20000170 	.word	0x20000170

08000b50 <bldc_motor_Config_Channel_Init>:
//}



void bldc_motor_Config_Channel_Init(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
	bldc.sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b54:	4b0c      	ldr	r3, [pc, #48]	@ (8000b88 <bldc_motor_Config_Channel_Init+0x38>)
 8000b56:	2260      	movs	r2, #96	@ 0x60
 8000b58:	615a      	str	r2, [r3, #20]
	bldc.sConfigOC.Pulse = 0;
 8000b5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b88 <bldc_motor_Config_Channel_Init+0x38>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	619a      	str	r2, [r3, #24]
	bldc.sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b60:	4b09      	ldr	r3, [pc, #36]	@ (8000b88 <bldc_motor_Config_Channel_Init+0x38>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	61da      	str	r2, [r3, #28]
	bldc.sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b66:	4b08      	ldr	r3, [pc, #32]	@ (8000b88 <bldc_motor_Config_Channel_Init+0x38>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	621a      	str	r2, [r3, #32]
	bldc.sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b6c:	4b06      	ldr	r3, [pc, #24]	@ (8000b88 <bldc_motor_Config_Channel_Init+0x38>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	625a      	str	r2, [r3, #36]	@ 0x24
	bldc.sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b72:	4b05      	ldr	r3, [pc, #20]	@ (8000b88 <bldc_motor_Config_Channel_Init+0x38>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	629a      	str	r2, [r3, #40]	@ 0x28
	bldc.sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b78:	4b03      	ldr	r3, [pc, #12]	@ (8000b88 <bldc_motor_Config_Channel_Init+0x38>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	62da      	str	r2, [r3, #44]	@ 0x2c

//	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1|TIM_IT_CC3|TIM_IT_CC4);

}
 8000b7e:	bf00      	nop
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	20000170 	.word	0x20000170

08000b8c <bldc_motor_set_pwm>:
//	HAL_TIMEx_OCN_Start(bldc.tim_pwm, channel);
}


void bldc_motor_set_pwm(uint16_t speedA, uint16_t speedB, uint16_t speedC)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	80fb      	strh	r3, [r7, #6]
 8000b96:	460b      	mov	r3, r1
 8000b98:	80bb      	strh	r3, [r7, #4]
 8000b9a:	4613      	mov	r3, r2
 8000b9c:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speedA);
 8000b9e:	4b09      	ldr	r3, [pc, #36]	@ (8000bc4 <bldc_motor_set_pwm+0x38>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	88fa      	ldrh	r2, [r7, #6]
 8000ba4:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, speedB);
 8000ba6:	4b07      	ldr	r3, [pc, #28]	@ (8000bc4 <bldc_motor_set_pwm+0x38>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	88ba      	ldrh	r2, [r7, #4]
 8000bac:	641a      	str	r2, [r3, #64]	@ 0x40
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, speedC);
 8000bae:	4b05      	ldr	r3, [pc, #20]	@ (8000bc4 <bldc_motor_set_pwm+0x38>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	887a      	ldrh	r2, [r7, #2]
 8000bb4:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000bb6:	bf00      	nop
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	200000d0 	.word	0x200000d0

08000bc8 <bldc_motor_six_step_algorithm>:



void bldc_motor_six_step_algorithm(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
    switch (bldc.step_number)
 8000bcc:	4ba6      	ldr	r3, [pc, #664]	@ (8000e68 <bldc_motor_six_step_algorithm+0x2a0>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	3b01      	subs	r3, #1
 8000bd2:	2b05      	cmp	r3, #5
 8000bd4:	f200 8122 	bhi.w	8000e1c <bldc_motor_six_step_algorithm+0x254>
 8000bd8:	a201      	add	r2, pc, #4	@ (adr r2, 8000be0 <bldc_motor_six_step_algorithm+0x18>)
 8000bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bde:	bf00      	nop
 8000be0:	08000bf9 	.word	0x08000bf9
 8000be4:	08000c53 	.word	0x08000c53
 8000be8:	08000cad 	.word	0x08000cad
 8000bec:	08000d07 	.word	0x08000d07
 8000bf0:	08000d65 	.word	0x08000d65
 8000bf4:	08000dc3 	.word	0x08000dc3
    {
        case 1:
        	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, SET);
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000bfe:	489b      	ldr	r0, [pc, #620]	@ (8000e6c <bldc_motor_six_step_algorithm+0x2a4>)
 8000c00:	f001 f90a 	bl	8001e18 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, RESET);
 8000c04:	2200      	movs	r2, #0
 8000c06:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c0a:	4898      	ldr	r0, [pc, #608]	@ (8000e6c <bldc_motor_six_step_algorithm+0x2a4>)
 8000c0c:	f001 f904 	bl	8001e18 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, RESET);
 8000c10:	2200      	movs	r2, #0
 8000c12:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c16:	4895      	ldr	r0, [pc, #596]	@ (8000e6c <bldc_motor_six_step_algorithm+0x2a4>)
 8000c18:	f001 f8fe 	bl	8001e18 <HAL_GPIO_WritePin>

        	HAL_GPIO_WritePin(PWM1EN_GPIO_Port, PWM1EN_Pin, GPIO_PIN_SET);
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c22:	4893      	ldr	r0, [pc, #588]	@ (8000e70 <bldc_motor_six_step_algorithm+0x2a8>)
 8000c24:	f001 f8f8 	bl	8001e18 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PWM2EN_GPIO_Port, PWM2EN_Pin, GPIO_PIN_SET);
 8000c28:	2201      	movs	r2, #1
 8000c2a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c2e:	4890      	ldr	r0, [pc, #576]	@ (8000e70 <bldc_motor_six_step_algorithm+0x2a8>)
 8000c30:	f001 f8f2 	bl	8001e18 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(PWM3EN_GPIO_Port, PWM3EN_Pin, GPIO_PIN_RESET);
 8000c34:	2200      	movs	r2, #0
 8000c36:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c3a:	488d      	ldr	r0, [pc, #564]	@ (8000e70 <bldc_motor_six_step_algorithm+0x2a8>)
 8000c3c:	f001 f8ec 	bl	8001e18 <HAL_GPIO_WritePin>

        	bldc_motor_set_pwm(bldc.speed_pulse, 0, 0);
 8000c40:	4b89      	ldr	r3, [pc, #548]	@ (8000e68 <bldc_motor_six_step_algorithm+0x2a0>)
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	b29b      	uxth	r3, r3
 8000c46:	2200      	movs	r2, #0
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff ff9e 	bl	8000b8c <bldc_motor_set_pwm>

//            bldc_motor_PWM_Config_Channel(bldc.speed_pulse, TIM_CHANNEL_1);
//            bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_ACTIVE, TIM_CHANNEL_1);
//            bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_ACTIVE, TIM_CHANNEL_4);
//            bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_INACTIVE, TIM_CHANNEL_3);
            break;
 8000c50:	e0e4      	b.n	8000e1c <bldc_motor_six_step_algorithm+0x254>
        case 2:
        	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, SET);
 8000c52:	2201      	movs	r2, #1
 8000c54:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c58:	4884      	ldr	r0, [pc, #528]	@ (8000e6c <bldc_motor_six_step_algorithm+0x2a4>)
 8000c5a:	f001 f8dd 	bl	8001e18 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, RESET);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c64:	4881      	ldr	r0, [pc, #516]	@ (8000e6c <bldc_motor_six_step_algorithm+0x2a4>)
 8000c66:	f001 f8d7 	bl	8001e18 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, RESET);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c70:	487e      	ldr	r0, [pc, #504]	@ (8000e6c <bldc_motor_six_step_algorithm+0x2a4>)
 8000c72:	f001 f8d1 	bl	8001e18 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(PWM1EN_GPIO_Port, PWM1EN_Pin, GPIO_PIN_SET);
 8000c76:	2201      	movs	r2, #1
 8000c78:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c7c:	487c      	ldr	r0, [pc, #496]	@ (8000e70 <bldc_motor_six_step_algorithm+0x2a8>)
 8000c7e:	f001 f8cb 	bl	8001e18 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PWM2EN_GPIO_Port, PWM2EN_Pin, GPIO_PIN_RESET);
 8000c82:	2200      	movs	r2, #0
 8000c84:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c88:	4879      	ldr	r0, [pc, #484]	@ (8000e70 <bldc_motor_six_step_algorithm+0x2a8>)
 8000c8a:	f001 f8c5 	bl	8001e18 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PWM3EN_GPIO_Port, PWM3EN_Pin, GPIO_PIN_SET);
 8000c8e:	2201      	movs	r2, #1
 8000c90:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c94:	4876      	ldr	r0, [pc, #472]	@ (8000e70 <bldc_motor_six_step_algorithm+0x2a8>)
 8000c96:	f001 f8bf 	bl	8001e18 <HAL_GPIO_WritePin>

        	bldc_motor_set_pwm(bldc.speed_pulse, 0, 0);
 8000c9a:	4b73      	ldr	r3, [pc, #460]	@ (8000e68 <bldc_motor_six_step_algorithm+0x2a0>)
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	b29b      	uxth	r3, r3
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f7ff ff71 	bl	8000b8c <bldc_motor_set_pwm>
//			bldc_motor_PWM_Config_Channel(bldc.speed_pulse, TIM_CHANNEL_1);
//			bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_ACTIVE, TIM_CHANNEL_1);
//			bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_INACTIVE, TIM_CHANNEL_4);
//			bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_INACTIVE, TIM_CHANNEL_3);

            break;
 8000caa:	e0b7      	b.n	8000e1c <bldc_motor_six_step_algorithm+0x254>
        case 3:
        	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, RESET);
 8000cac:	2200      	movs	r2, #0
 8000cae:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cb2:	486e      	ldr	r0, [pc, #440]	@ (8000e6c <bldc_motor_six_step_algorithm+0x2a4>)
 8000cb4:	f001 f8b0 	bl	8001e18 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, SET);
 8000cb8:	2201      	movs	r2, #1
 8000cba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cbe:	486b      	ldr	r0, [pc, #428]	@ (8000e6c <bldc_motor_six_step_algorithm+0x2a4>)
 8000cc0:	f001 f8aa 	bl	8001e18 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, RESET);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000cca:	4868      	ldr	r0, [pc, #416]	@ (8000e6c <bldc_motor_six_step_algorithm+0x2a4>)
 8000ccc:	f001 f8a4 	bl	8001e18 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(PWM1EN_GPIO_Port, PWM1EN_Pin, GPIO_PIN_RESET);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cd6:	4866      	ldr	r0, [pc, #408]	@ (8000e70 <bldc_motor_six_step_algorithm+0x2a8>)
 8000cd8:	f001 f89e 	bl	8001e18 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PWM2EN_GPIO_Port, PWM2EN_Pin, GPIO_PIN_SET);
 8000cdc:	2201      	movs	r2, #1
 8000cde:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ce2:	4863      	ldr	r0, [pc, #396]	@ (8000e70 <bldc_motor_six_step_algorithm+0x2a8>)
 8000ce4:	f001 f898 	bl	8001e18 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PWM3EN_GPIO_Port, PWM3EN_Pin, GPIO_PIN_SET);
 8000ce8:	2201      	movs	r2, #1
 8000cea:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000cee:	4860      	ldr	r0, [pc, #384]	@ (8000e70 <bldc_motor_six_step_algorithm+0x2a8>)
 8000cf0:	f001 f892 	bl	8001e18 <HAL_GPIO_WritePin>


        	bldc_motor_set_pwm(0, bldc.speed_pulse, 0);
 8000cf4:	4b5c      	ldr	r3, [pc, #368]	@ (8000e68 <bldc_motor_six_step_algorithm+0x2a0>)
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	b29b      	uxth	r3, r3
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	2000      	movs	r0, #0
 8000d00:	f7ff ff44 	bl	8000b8c <bldc_motor_set_pwm>
////			bldc_motor_PWM_Config_Channel(bldc.speed_pulse, TIM_CHANNEL_4);
//			bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_INACTIVE, TIM_CHANNEL_4);
//			bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_ACTIVE, TIM_CHANNEL_3);


            break;
 8000d04:	e08a      	b.n	8000e1c <bldc_motor_six_step_algorithm+0x254>
        case 4:
        	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, RESET);
 8000d06:	2200      	movs	r2, #0
 8000d08:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d0c:	4857      	ldr	r0, [pc, #348]	@ (8000e6c <bldc_motor_six_step_algorithm+0x2a4>)
 8000d0e:	f001 f883 	bl	8001e18 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, SET);
 8000d12:	2201      	movs	r2, #1
 8000d14:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d18:	4854      	ldr	r0, [pc, #336]	@ (8000e6c <bldc_motor_six_step_algorithm+0x2a4>)
 8000d1a:	f001 f87d 	bl	8001e18 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, SET);
 8000d1e:	2201      	movs	r2, #1
 8000d20:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d24:	4851      	ldr	r0, [pc, #324]	@ (8000e6c <bldc_motor_six_step_algorithm+0x2a4>)
 8000d26:	f001 f877 	bl	8001e18 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(PWM1EN_GPIO_Port, PWM1EN_Pin, GPIO_PIN_SET);
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d30:	484f      	ldr	r0, [pc, #316]	@ (8000e70 <bldc_motor_six_step_algorithm+0x2a8>)
 8000d32:	f001 f871 	bl	8001e18 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PWM2EN_GPIO_Port, PWM2EN_Pin, GPIO_PIN_SET);
 8000d36:	2201      	movs	r2, #1
 8000d38:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d3c:	484c      	ldr	r0, [pc, #304]	@ (8000e70 <bldc_motor_six_step_algorithm+0x2a8>)
 8000d3e:	f001 f86b 	bl	8001e18 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PWM3EN_GPIO_Port, PWM3EN_Pin, GPIO_PIN_RESET);
 8000d42:	2200      	movs	r2, #0
 8000d44:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d48:	4849      	ldr	r0, [pc, #292]	@ (8000e70 <bldc_motor_six_step_algorithm+0x2a8>)
 8000d4a:	f001 f865 	bl	8001e18 <HAL_GPIO_WritePin>

        	bldc_motor_set_pwm(0, bldc.speed_pulse, bldc.speed_pulse);
 8000d4e:	4b46      	ldr	r3, [pc, #280]	@ (8000e68 <bldc_motor_six_step_algorithm+0x2a0>)
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	b29b      	uxth	r3, r3
 8000d54:	4a44      	ldr	r2, [pc, #272]	@ (8000e68 <bldc_motor_six_step_algorithm+0x2a0>)
 8000d56:	6852      	ldr	r2, [r2, #4]
 8000d58:	b292      	uxth	r2, r2
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	f7ff ff15 	bl	8000b8c <bldc_motor_set_pwm>

//			bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_INACTIVE, TIM_CHANNEL_1);
//			bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_INACTIVE, TIM_CHANNEL_4);
//			bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_ACTIVE, TIM_CHANNEL_3);

            break;
 8000d62:	e05b      	b.n	8000e1c <bldc_motor_six_step_algorithm+0x254>
        case 5:
        	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, RESET);
 8000d64:	2200      	movs	r2, #0
 8000d66:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d6a:	4840      	ldr	r0, [pc, #256]	@ (8000e6c <bldc_motor_six_step_algorithm+0x2a4>)
 8000d6c:	f001 f854 	bl	8001e18 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, SET);
 8000d70:	2201      	movs	r2, #1
 8000d72:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d76:	483d      	ldr	r0, [pc, #244]	@ (8000e6c <bldc_motor_six_step_algorithm+0x2a4>)
 8000d78:	f001 f84e 	bl	8001e18 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, SET);
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d82:	483a      	ldr	r0, [pc, #232]	@ (8000e6c <bldc_motor_six_step_algorithm+0x2a4>)
 8000d84:	f001 f848 	bl	8001e18 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(PWM1EN_GPIO_Port, PWM1EN_Pin, GPIO_PIN_SET);
 8000d88:	2201      	movs	r2, #1
 8000d8a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d8e:	4838      	ldr	r0, [pc, #224]	@ (8000e70 <bldc_motor_six_step_algorithm+0x2a8>)
 8000d90:	f001 f842 	bl	8001e18 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PWM2EN_GPIO_Port, PWM2EN_Pin, GPIO_PIN_RESET);
 8000d94:	2200      	movs	r2, #0
 8000d96:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d9a:	4835      	ldr	r0, [pc, #212]	@ (8000e70 <bldc_motor_six_step_algorithm+0x2a8>)
 8000d9c:	f001 f83c 	bl	8001e18 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PWM3EN_GPIO_Port, PWM3EN_Pin, GPIO_PIN_SET);
 8000da0:	2201      	movs	r2, #1
 8000da2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000da6:	4832      	ldr	r0, [pc, #200]	@ (8000e70 <bldc_motor_six_step_algorithm+0x2a8>)
 8000da8:	f001 f836 	bl	8001e18 <HAL_GPIO_WritePin>


        	bldc_motor_set_pwm(0, bldc.speed_pulse, bldc.speed_pulse);
 8000dac:	4b2e      	ldr	r3, [pc, #184]	@ (8000e68 <bldc_motor_six_step_algorithm+0x2a0>)
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	4a2d      	ldr	r2, [pc, #180]	@ (8000e68 <bldc_motor_six_step_algorithm+0x2a0>)
 8000db4:	6852      	ldr	r2, [r2, #4]
 8000db6:	b292      	uxth	r2, r2
 8000db8:	4619      	mov	r1, r3
 8000dba:	2000      	movs	r0, #0
 8000dbc:	f7ff fee6 	bl	8000b8c <bldc_motor_set_pwm>
//			bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_INACTIVE, TIM_CHANNEL_1);
//			bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_ACTIVE, TIM_CHANNEL_4);
//			bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_ACTIVE, TIM_CHANNEL_3);


            break;
 8000dc0:	e02c      	b.n	8000e1c <bldc_motor_six_step_algorithm+0x254>
        case 6:
        	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, RESET);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000dc8:	4828      	ldr	r0, [pc, #160]	@ (8000e6c <bldc_motor_six_step_algorithm+0x2a4>)
 8000dca:	f001 f825 	bl	8001e18 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, RESET);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000dd4:	4825      	ldr	r0, [pc, #148]	@ (8000e6c <bldc_motor_six_step_algorithm+0x2a4>)
 8000dd6:	f001 f81f 	bl	8001e18 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, SET);
 8000dda:	2201      	movs	r2, #1
 8000ddc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000de0:	4822      	ldr	r0, [pc, #136]	@ (8000e6c <bldc_motor_six_step_algorithm+0x2a4>)
 8000de2:	f001 f819 	bl	8001e18 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(PWM1EN_GPIO_Port, PWM1EN_Pin, GPIO_PIN_RESET);
 8000de6:	2200      	movs	r2, #0
 8000de8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000dec:	4820      	ldr	r0, [pc, #128]	@ (8000e70 <bldc_motor_six_step_algorithm+0x2a8>)
 8000dee:	f001 f813 	bl	8001e18 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PWM2EN_GPIO_Port, PWM2EN_Pin, GPIO_PIN_SET);
 8000df2:	2201      	movs	r2, #1
 8000df4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000df8:	481d      	ldr	r0, [pc, #116]	@ (8000e70 <bldc_motor_six_step_algorithm+0x2a8>)
 8000dfa:	f001 f80d 	bl	8001e18 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PWM3EN_GPIO_Port, PWM3EN_Pin, GPIO_PIN_SET);
 8000dfe:	2201      	movs	r2, #1
 8000e00:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e04:	481a      	ldr	r0, [pc, #104]	@ (8000e70 <bldc_motor_six_step_algorithm+0x2a8>)
 8000e06:	f001 f807 	bl	8001e18 <HAL_GPIO_WritePin>

        	bldc_motor_set_pwm(0, 0, bldc.speed_pulse);
 8000e0a:	4b17      	ldr	r3, [pc, #92]	@ (8000e68 <bldc_motor_six_step_algorithm+0x2a0>)
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	b29b      	uxth	r3, r3
 8000e10:	461a      	mov	r2, r3
 8000e12:	2100      	movs	r1, #0
 8000e14:	2000      	movs	r0, #0
 8000e16:	f7ff feb9 	bl	8000b8c <bldc_motor_set_pwm>

//			bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_INACTIVE, TIM_CHANNEL_1);
//			bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_ACTIVE, TIM_CHANNEL_4);
//			bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_INACTIVE, TIM_CHANNEL_3);
            break;
 8000e1a:	bf00      	nop
    }

    if (bldc.dir == 1)  // CW direction
 8000e1c:	4b12      	ldr	r3, [pc, #72]	@ (8000e68 <bldc_motor_six_step_algorithm+0x2a0>)
 8000e1e:	689b      	ldr	r3, [r3, #8]
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d10d      	bne.n	8000e40 <bldc_motor_six_step_algorithm+0x278>
    {
        bldc.step_number++;
 8000e24:	4b10      	ldr	r3, [pc, #64]	@ (8000e68 <bldc_motor_six_step_algorithm+0x2a0>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	b2da      	uxtb	r2, r3
 8000e2c:	4b0e      	ldr	r3, [pc, #56]	@ (8000e68 <bldc_motor_six_step_algorithm+0x2a0>)
 8000e2e:	701a      	strb	r2, [r3, #0]
        if (bldc.step_number > 6)
 8000e30:	4b0d      	ldr	r3, [pc, #52]	@ (8000e68 <bldc_motor_six_step_algorithm+0x2a0>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	2b06      	cmp	r3, #6
 8000e36:	d914      	bls.n	8000e62 <bldc_motor_six_step_algorithm+0x29a>
            bldc.step_number = 1;
 8000e38:	4b0b      	ldr	r3, [pc, #44]	@ (8000e68 <bldc_motor_six_step_algorithm+0x2a0>)
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	701a      	strb	r2, [r3, #0]
    {
        bldc.step_number--;
        if (bldc.step_number < 1)
            bldc.step_number = 6;
    }
}
 8000e3e:	e010      	b.n	8000e62 <bldc_motor_six_step_algorithm+0x29a>
    else if (bldc.dir == 0)  // CCW direction
 8000e40:	4b09      	ldr	r3, [pc, #36]	@ (8000e68 <bldc_motor_six_step_algorithm+0x2a0>)
 8000e42:	689b      	ldr	r3, [r3, #8]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d10c      	bne.n	8000e62 <bldc_motor_six_step_algorithm+0x29a>
        bldc.step_number--;
 8000e48:	4b07      	ldr	r3, [pc, #28]	@ (8000e68 <bldc_motor_six_step_algorithm+0x2a0>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	3b01      	subs	r3, #1
 8000e4e:	b2da      	uxtb	r2, r3
 8000e50:	4b05      	ldr	r3, [pc, #20]	@ (8000e68 <bldc_motor_six_step_algorithm+0x2a0>)
 8000e52:	701a      	strb	r2, [r3, #0]
        if (bldc.step_number < 1)
 8000e54:	4b04      	ldr	r3, [pc, #16]	@ (8000e68 <bldc_motor_six_step_algorithm+0x2a0>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d102      	bne.n	8000e62 <bldc_motor_six_step_algorithm+0x29a>
            bldc.step_number = 6;
 8000e5c:	4b02      	ldr	r3, [pc, #8]	@ (8000e68 <bldc_motor_six_step_algorithm+0x2a0>)
 8000e5e:	2206      	movs	r2, #6
 8000e60:	701a      	strb	r2, [r3, #0]
}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	20000170 	.word	0x20000170
 8000e6c:	40020c00 	.word	0x40020c00
 8000e70:	40020400 	.word	0x40020400

08000e74 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	607b      	str	r3, [r7, #4]
 8000e7e:	4b12      	ldr	r3, [pc, #72]	@ (8000ec8 <HAL_MspInit+0x54>)
 8000e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e82:	4a11      	ldr	r2, [pc, #68]	@ (8000ec8 <HAL_MspInit+0x54>)
 8000e84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e88:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e8a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec8 <HAL_MspInit+0x54>)
 8000e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e92:	607b      	str	r3, [r7, #4]
 8000e94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	603b      	str	r3, [r7, #0]
 8000e9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec8 <HAL_MspInit+0x54>)
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec8 <HAL_MspInit+0x54>)
 8000ea0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ea4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ea6:	4b08      	ldr	r3, [pc, #32]	@ (8000ec8 <HAL_MspInit+0x54>)
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eae:	603b      	str	r3, [r7, #0]
 8000eb0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	210f      	movs	r1, #15
 8000eb6:	f06f 0001 	mvn.w	r0, #1
 8000eba:	f000 fdff 	bl	8001abc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40023800 	.word	0x40023800

08000ecc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08a      	sub	sp, #40	@ 0x28
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed4:	f107 0314 	add.w	r3, r7, #20
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a17      	ldr	r2, [pc, #92]	@ (8000f48 <HAL_ADC_MspInit+0x7c>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d127      	bne.n	8000f3e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	613b      	str	r3, [r7, #16]
 8000ef2:	4b16      	ldr	r3, [pc, #88]	@ (8000f4c <HAL_ADC_MspInit+0x80>)
 8000ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ef6:	4a15      	ldr	r2, [pc, #84]	@ (8000f4c <HAL_ADC_MspInit+0x80>)
 8000ef8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000efc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000efe:	4b13      	ldr	r3, [pc, #76]	@ (8000f4c <HAL_ADC_MspInit+0x80>)
 8000f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f06:	613b      	str	r3, [r7, #16]
 8000f08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f4c <HAL_ADC_MspInit+0x80>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f12:	4a0e      	ldr	r2, [pc, #56]	@ (8000f4c <HAL_ADC_MspInit+0x80>)
 8000f14:	f043 0301 	orr.w	r3, r3, #1
 8000f18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f4c <HAL_ADC_MspInit+0x80>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f26:	2301      	movs	r3, #1
 8000f28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f32:	f107 0314 	add.w	r3, r7, #20
 8000f36:	4619      	mov	r1, r3
 8000f38:	4805      	ldr	r0, [pc, #20]	@ (8000f50 <HAL_ADC_MspInit+0x84>)
 8000f3a:	f000 fde9 	bl	8001b10 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f3e:	bf00      	nop
 8000f40:	3728      	adds	r7, #40	@ 0x28
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40012000 	.word	0x40012000
 8000f4c:	40023800 	.word	0x40023800
 8000f50:	40020000 	.word	0x40020000

08000f54 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a0b      	ldr	r2, [pc, #44]	@ (8000f90 <HAL_TIM_PWM_MspInit+0x3c>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d10d      	bne.n	8000f82 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f94 <HAL_TIM_PWM_MspInit+0x40>)
 8000f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f6e:	4a09      	ldr	r2, [pc, #36]	@ (8000f94 <HAL_TIM_PWM_MspInit+0x40>)
 8000f70:	f043 0301 	orr.w	r3, r3, #1
 8000f74:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f76:	4b07      	ldr	r3, [pc, #28]	@ (8000f94 <HAL_TIM_PWM_MspInit+0x40>)
 8000f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000f82:	bf00      	nop
 8000f84:	3714      	adds	r7, #20
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	40010000 	.word	0x40010000
 8000f94:	40023800 	.word	0x40023800

08000f98 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08a      	sub	sp, #40	@ 0x28
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a22      	ldr	r2, [pc, #136]	@ (8001040 <HAL_TIM_MspPostInit+0xa8>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d13d      	bne.n	8001036 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	613b      	str	r3, [r7, #16]
 8000fbe:	4b21      	ldr	r3, [pc, #132]	@ (8001044 <HAL_TIM_MspPostInit+0xac>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc2:	4a20      	ldr	r2, [pc, #128]	@ (8001044 <HAL_TIM_MspPostInit+0xac>)
 8000fc4:	f043 0310 	orr.w	r3, r3, #16
 8000fc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fca:	4b1e      	ldr	r3, [pc, #120]	@ (8001044 <HAL_TIM_MspPostInit+0xac>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fce:	f003 0310 	and.w	r3, r3, #16
 8000fd2:	613b      	str	r3, [r7, #16]
 8000fd4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	4b1a      	ldr	r3, [pc, #104]	@ (8001044 <HAL_TIM_MspPostInit+0xac>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fde:	4a19      	ldr	r2, [pc, #100]	@ (8001044 <HAL_TIM_MspPostInit+0xac>)
 8000fe0:	f043 0301 	orr.w	r3, r3, #1
 8000fe4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fe6:	4b17      	ldr	r3, [pc, #92]	@ (8001044 <HAL_TIM_MspPostInit+0xac>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000ff2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000ff6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001000:	2300      	movs	r3, #0
 8001002:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001004:	2301      	movs	r3, #1
 8001006:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001008:	f107 0314 	add.w	r3, r7, #20
 800100c:	4619      	mov	r1, r3
 800100e:	480e      	ldr	r0, [pc, #56]	@ (8001048 <HAL_TIM_MspPostInit+0xb0>)
 8001010:	f000 fd7e 	bl	8001b10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8001014:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8001018:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101a:	2302      	movs	r3, #2
 800101c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001022:	2300      	movs	r3, #0
 8001024:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001026:	2301      	movs	r3, #1
 8001028:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102a:	f107 0314 	add.w	r3, r7, #20
 800102e:	4619      	mov	r1, r3
 8001030:	4806      	ldr	r0, [pc, #24]	@ (800104c <HAL_TIM_MspPostInit+0xb4>)
 8001032:	f000 fd6d 	bl	8001b10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001036:	bf00      	nop
 8001038:	3728      	adds	r7, #40	@ 0x28
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40010000 	.word	0x40010000
 8001044:	40023800 	.word	0x40023800
 8001048:	40021000 	.word	0x40021000
 800104c:	40020000 	.word	0x40020000

08001050 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b08a      	sub	sp, #40	@ 0x28
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a19      	ldr	r2, [pc, #100]	@ (80010d4 <HAL_UART_MspInit+0x84>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d12b      	bne.n	80010ca <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	613b      	str	r3, [r7, #16]
 8001076:	4b18      	ldr	r3, [pc, #96]	@ (80010d8 <HAL_UART_MspInit+0x88>)
 8001078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800107a:	4a17      	ldr	r2, [pc, #92]	@ (80010d8 <HAL_UART_MspInit+0x88>)
 800107c:	f043 0320 	orr.w	r3, r3, #32
 8001080:	6453      	str	r3, [r2, #68]	@ 0x44
 8001082:	4b15      	ldr	r3, [pc, #84]	@ (80010d8 <HAL_UART_MspInit+0x88>)
 8001084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001086:	f003 0320 	and.w	r3, r3, #32
 800108a:	613b      	str	r3, [r7, #16]
 800108c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	60fb      	str	r3, [r7, #12]
 8001092:	4b11      	ldr	r3, [pc, #68]	@ (80010d8 <HAL_UART_MspInit+0x88>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001096:	4a10      	ldr	r2, [pc, #64]	@ (80010d8 <HAL_UART_MspInit+0x88>)
 8001098:	f043 0304 	orr.w	r3, r3, #4
 800109c:	6313      	str	r3, [r2, #48]	@ 0x30
 800109e:	4b0e      	ldr	r3, [pc, #56]	@ (80010d8 <HAL_UART_MspInit+0x88>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a2:	f003 0304 	and.w	r3, r3, #4
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010aa:	23c0      	movs	r3, #192	@ 0xc0
 80010ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ae:	2302      	movs	r3, #2
 80010b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b6:	2303      	movs	r3, #3
 80010b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80010ba:	2308      	movs	r3, #8
 80010bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010be:	f107 0314 	add.w	r3, r7, #20
 80010c2:	4619      	mov	r1, r3
 80010c4:	4805      	ldr	r0, [pc, #20]	@ (80010dc <HAL_UART_MspInit+0x8c>)
 80010c6:	f000 fd23 	bl	8001b10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80010ca:	bf00      	nop
 80010cc:	3728      	adds	r7, #40	@ 0x28
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40011400 	.word	0x40011400
 80010d8:	40023800 	.word	0x40023800
 80010dc:	40020800 	.word	0x40020800

080010e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08e      	sub	sp, #56	@ 0x38
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80010e8:	2300      	movs	r3, #0
 80010ea:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80010ec:	2300      	movs	r3, #0
 80010ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80010f0:	2300      	movs	r3, #0
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	4b34      	ldr	r3, [pc, #208]	@ (80011c8 <HAL_InitTick+0xe8>)
 80010f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f8:	4a33      	ldr	r2, [pc, #204]	@ (80011c8 <HAL_InitTick+0xe8>)
 80010fa:	f043 0301 	orr.w	r3, r3, #1
 80010fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001100:	4b31      	ldr	r3, [pc, #196]	@ (80011c8 <HAL_InitTick+0xe8>)
 8001102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001104:	f003 0301 	and.w	r3, r3, #1
 8001108:	60fb      	str	r3, [r7, #12]
 800110a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800110c:	f107 0210 	add.w	r2, r7, #16
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	4611      	mov	r1, r2
 8001116:	4618      	mov	r0, r3
 8001118:	f001 faf0 	bl	80026fc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800111c:	6a3b      	ldr	r3, [r7, #32]
 800111e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001122:	2b00      	cmp	r3, #0
 8001124:	d103      	bne.n	800112e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001126:	f001 fac1 	bl	80026ac <HAL_RCC_GetPCLK1Freq>
 800112a:	6378      	str	r0, [r7, #52]	@ 0x34
 800112c:	e004      	b.n	8001138 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800112e:	f001 fabd 	bl	80026ac <HAL_RCC_GetPCLK1Freq>
 8001132:	4603      	mov	r3, r0
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001138:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800113a:	4a24      	ldr	r2, [pc, #144]	@ (80011cc <HAL_InitTick+0xec>)
 800113c:	fba2 2303 	umull	r2, r3, r2, r3
 8001140:	0c9b      	lsrs	r3, r3, #18
 8001142:	3b01      	subs	r3, #1
 8001144:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001146:	4b22      	ldr	r3, [pc, #136]	@ (80011d0 <HAL_InitTick+0xf0>)
 8001148:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800114c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800114e:	4b20      	ldr	r3, [pc, #128]	@ (80011d0 <HAL_InitTick+0xf0>)
 8001150:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001154:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001156:	4a1e      	ldr	r2, [pc, #120]	@ (80011d0 <HAL_InitTick+0xf0>)
 8001158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800115a:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800115c:	4b1c      	ldr	r3, [pc, #112]	@ (80011d0 <HAL_InitTick+0xf0>)
 800115e:	2200      	movs	r2, #0
 8001160:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001162:	4b1b      	ldr	r3, [pc, #108]	@ (80011d0 <HAL_InitTick+0xf0>)
 8001164:	2200      	movs	r2, #0
 8001166:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001168:	4b19      	ldr	r3, [pc, #100]	@ (80011d0 <HAL_InitTick+0xf0>)
 800116a:	2200      	movs	r2, #0
 800116c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 800116e:	4818      	ldr	r0, [pc, #96]	@ (80011d0 <HAL_InitTick+0xf0>)
 8001170:	f001 faf6 	bl	8002760 <HAL_TIM_Base_Init>
 8001174:	4603      	mov	r3, r0
 8001176:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800117a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800117e:	2b00      	cmp	r3, #0
 8001180:	d11b      	bne.n	80011ba <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001182:	4813      	ldr	r0, [pc, #76]	@ (80011d0 <HAL_InitTick+0xf0>)
 8001184:	f001 fb46 	bl	8002814 <HAL_TIM_Base_Start_IT>
 8001188:	4603      	mov	r3, r0
 800118a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800118e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001192:	2b00      	cmp	r3, #0
 8001194:	d111      	bne.n	80011ba <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001196:	201c      	movs	r0, #28
 8001198:	f000 fcac 	bl	8001af4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2b0f      	cmp	r3, #15
 80011a0:	d808      	bhi.n	80011b4 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80011a2:	2200      	movs	r2, #0
 80011a4:	6879      	ldr	r1, [r7, #4]
 80011a6:	201c      	movs	r0, #28
 80011a8:	f000 fc88 	bl	8001abc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011ac:	4a09      	ldr	r2, [pc, #36]	@ (80011d4 <HAL_InitTick+0xf4>)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6013      	str	r3, [r2, #0]
 80011b2:	e002      	b.n	80011ba <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80011b4:	2301      	movs	r3, #1
 80011b6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80011ba:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3738      	adds	r7, #56	@ 0x38
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40023800 	.word	0x40023800
 80011cc:	431bde83 	.word	0x431bde83
 80011d0:	200001a0 	.word	0x200001a0
 80011d4:	20000004 	.word	0x20000004

080011d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011dc:	bf00      	nop
 80011de:	e7fd      	b.n	80011dc <NMI_Handler+0x4>

080011e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011e4:	bf00      	nop
 80011e6:	e7fd      	b.n	80011e4 <HardFault_Handler+0x4>

080011e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011ec:	bf00      	nop
 80011ee:	e7fd      	b.n	80011ec <MemManage_Handler+0x4>

080011f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011f4:	bf00      	nop
 80011f6:	e7fd      	b.n	80011f4 <BusFault_Handler+0x4>

080011f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011fc:	bf00      	nop
 80011fe:	e7fd      	b.n	80011fc <UsageFault_Handler+0x4>

08001200 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
	...

08001210 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001214:	4802      	ldr	r0, [pc, #8]	@ (8001220 <TIM2_IRQHandler+0x10>)
 8001216:	f001 fc5f 	bl	8002ad8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	200001a0 	.word	0x200001a0

08001224 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]
 8001234:	e00a      	b.n	800124c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001236:	f3af 8000 	nop.w
 800123a:	4601      	mov	r1, r0
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	1c5a      	adds	r2, r3, #1
 8001240:	60ba      	str	r2, [r7, #8]
 8001242:	b2ca      	uxtb	r2, r1
 8001244:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	3301      	adds	r3, #1
 800124a:	617b      	str	r3, [r7, #20]
 800124c:	697a      	ldr	r2, [r7, #20]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	429a      	cmp	r2, r3
 8001252:	dbf0      	blt.n	8001236 <_read+0x12>
  }

  return len;
 8001254:	687b      	ldr	r3, [r7, #4]
}
 8001256:	4618      	mov	r0, r3
 8001258:	3718      	adds	r7, #24
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b086      	sub	sp, #24
 8001262:	af00      	add	r7, sp, #0
 8001264:	60f8      	str	r0, [r7, #12]
 8001266:	60b9      	str	r1, [r7, #8]
 8001268:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800126a:	2300      	movs	r3, #0
 800126c:	617b      	str	r3, [r7, #20]
 800126e:	e009      	b.n	8001284 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	1c5a      	adds	r2, r3, #1
 8001274:	60ba      	str	r2, [r7, #8]
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff fb95 	bl	80009a8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	3301      	adds	r3, #1
 8001282:	617b      	str	r3, [r7, #20]
 8001284:	697a      	ldr	r2, [r7, #20]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	429a      	cmp	r2, r3
 800128a:	dbf1      	blt.n	8001270 <_write+0x12>
  }
  return len;
 800128c:	687b      	ldr	r3, [r7, #4]
}
 800128e:	4618      	mov	r0, r3
 8001290:	3718      	adds	r7, #24
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <_close>:

int _close(int file)
{
 8001296:	b480      	push	{r7}
 8001298:	b083      	sub	sp, #12
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800129e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr

080012ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012ae:	b480      	push	{r7}
 80012b0:	b083      	sub	sp, #12
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
 80012b6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012be:	605a      	str	r2, [r3, #4]
  return 0;
 80012c0:	2300      	movs	r3, #0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <_isatty>:

int _isatty(int file)
{
 80012ce:	b480      	push	{r7}
 80012d0:	b083      	sub	sp, #12
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012d6:	2301      	movs	r3, #1
}
 80012d8:	4618      	mov	r0, r3
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3714      	adds	r7, #20
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
	...

08001300 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001308:	4a14      	ldr	r2, [pc, #80]	@ (800135c <_sbrk+0x5c>)
 800130a:	4b15      	ldr	r3, [pc, #84]	@ (8001360 <_sbrk+0x60>)
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001314:	4b13      	ldr	r3, [pc, #76]	@ (8001364 <_sbrk+0x64>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d102      	bne.n	8001322 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800131c:	4b11      	ldr	r3, [pc, #68]	@ (8001364 <_sbrk+0x64>)
 800131e:	4a12      	ldr	r2, [pc, #72]	@ (8001368 <_sbrk+0x68>)
 8001320:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001322:	4b10      	ldr	r3, [pc, #64]	@ (8001364 <_sbrk+0x64>)
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4413      	add	r3, r2
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	429a      	cmp	r2, r3
 800132e:	d207      	bcs.n	8001340 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001330:	f006 f996 	bl	8007660 <__errno>
 8001334:	4603      	mov	r3, r0
 8001336:	220c      	movs	r2, #12
 8001338:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800133a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800133e:	e009      	b.n	8001354 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001340:	4b08      	ldr	r3, [pc, #32]	@ (8001364 <_sbrk+0x64>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001346:	4b07      	ldr	r3, [pc, #28]	@ (8001364 <_sbrk+0x64>)
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4413      	add	r3, r2
 800134e:	4a05      	ldr	r2, [pc, #20]	@ (8001364 <_sbrk+0x64>)
 8001350:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001352:	68fb      	ldr	r3, [r7, #12]
}
 8001354:	4618      	mov	r0, r3
 8001356:	3718      	adds	r7, #24
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	20020000 	.word	0x20020000
 8001360:	00000400 	.word	0x00000400
 8001364:	200001e8 	.word	0x200001e8
 8001368:	20004d28 	.word	0x20004d28

0800136c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001370:	4b06      	ldr	r3, [pc, #24]	@ (800138c <SystemInit+0x20>)
 8001372:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001376:	4a05      	ldr	r2, [pc, #20]	@ (800138c <SystemInit+0x20>)
 8001378:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800137c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001380:	bf00      	nop
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	e000ed00 	.word	0xe000ed00

08001390 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001390:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001394:	480d      	ldr	r0, [pc, #52]	@ (80013cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001396:	490e      	ldr	r1, [pc, #56]	@ (80013d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001398:	4a0e      	ldr	r2, [pc, #56]	@ (80013d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800139a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800139c:	e002      	b.n	80013a4 <LoopCopyDataInit>

0800139e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800139e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013a2:	3304      	adds	r3, #4

080013a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013a8:	d3f9      	bcc.n	800139e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013aa:	4a0b      	ldr	r2, [pc, #44]	@ (80013d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013ac:	4c0b      	ldr	r4, [pc, #44]	@ (80013dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80013ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013b0:	e001      	b.n	80013b6 <LoopFillZerobss>

080013b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013b4:	3204      	adds	r2, #4

080013b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013b8:	d3fb      	bcc.n	80013b2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013ba:	f7ff ffd7 	bl	800136c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013be:	f006 f955 	bl	800766c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013c2:	f7ff f885 	bl	80004d0 <main>
  bx  lr    
 80013c6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80013c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013d0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80013d4:	08007c50 	.word	0x08007c50
  ldr r2, =_sbss
 80013d8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80013dc:	20004d24 	.word	0x20004d24

080013e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013e0:	e7fe      	b.n	80013e0 <ADC_IRQHandler>
	...

080013e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001424 <HAL_Init+0x40>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001424 <HAL_Init+0x40>)
 80013ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001424 <HAL_Init+0x40>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a0a      	ldr	r2, [pc, #40]	@ (8001424 <HAL_Init+0x40>)
 80013fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001400:	4b08      	ldr	r3, [pc, #32]	@ (8001424 <HAL_Init+0x40>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a07      	ldr	r2, [pc, #28]	@ (8001424 <HAL_Init+0x40>)
 8001406:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800140a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800140c:	2003      	movs	r0, #3
 800140e:	f000 fb4a 	bl	8001aa6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001412:	200f      	movs	r0, #15
 8001414:	f7ff fe64 	bl	80010e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001418:	f7ff fd2c 	bl	8000e74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40023c00 	.word	0x40023c00

08001428 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800142c:	4b06      	ldr	r3, [pc, #24]	@ (8001448 <HAL_IncTick+0x20>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	461a      	mov	r2, r3
 8001432:	4b06      	ldr	r3, [pc, #24]	@ (800144c <HAL_IncTick+0x24>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4413      	add	r3, r2
 8001438:	4a04      	ldr	r2, [pc, #16]	@ (800144c <HAL_IncTick+0x24>)
 800143a:	6013      	str	r3, [r2, #0]
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	20000008 	.word	0x20000008
 800144c:	200001ec 	.word	0x200001ec

08001450 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  return uwTick;
 8001454:	4b03      	ldr	r3, [pc, #12]	@ (8001464 <HAL_GetTick+0x14>)
 8001456:	681b      	ldr	r3, [r3, #0]
}
 8001458:	4618      	mov	r0, r3
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	200001ec 	.word	0x200001ec

08001468 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001470:	2300      	movs	r3, #0
 8001472:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d101      	bne.n	800147e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e033      	b.n	80014e6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001482:	2b00      	cmp	r3, #0
 8001484:	d109      	bne.n	800149a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f7ff fd20 	bl	8000ecc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2200      	movs	r2, #0
 8001490:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2200      	movs	r2, #0
 8001496:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800149e:	f003 0310 	and.w	r3, r3, #16
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d118      	bne.n	80014d8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014aa:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80014ae:	f023 0302 	bic.w	r3, r3, #2
 80014b2:	f043 0202 	orr.w	r2, r3, #2
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f000 f94a 	bl	8001754 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2200      	movs	r2, #0
 80014c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ca:	f023 0303 	bic.w	r3, r3, #3
 80014ce:	f043 0201 	orr.w	r2, r3, #1
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	641a      	str	r2, [r3, #64]	@ 0x40
 80014d6:	e001      	b.n	80014dc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2200      	movs	r2, #0
 80014e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80014e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
	...

080014f0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80014fa:	2300      	movs	r3, #0
 80014fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001504:	2b01      	cmp	r3, #1
 8001506:	d101      	bne.n	800150c <HAL_ADC_ConfigChannel+0x1c>
 8001508:	2302      	movs	r3, #2
 800150a:	e113      	b.n	8001734 <HAL_ADC_ConfigChannel+0x244>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2201      	movs	r2, #1
 8001510:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2b09      	cmp	r3, #9
 800151a:	d925      	bls.n	8001568 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	68d9      	ldr	r1, [r3, #12]
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	b29b      	uxth	r3, r3
 8001528:	461a      	mov	r2, r3
 800152a:	4613      	mov	r3, r2
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	4413      	add	r3, r2
 8001530:	3b1e      	subs	r3, #30
 8001532:	2207      	movs	r2, #7
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	43da      	mvns	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	400a      	ands	r2, r1
 8001540:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	68d9      	ldr	r1, [r3, #12]
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	689a      	ldr	r2, [r3, #8]
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	b29b      	uxth	r3, r3
 8001552:	4618      	mov	r0, r3
 8001554:	4603      	mov	r3, r0
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	4403      	add	r3, r0
 800155a:	3b1e      	subs	r3, #30
 800155c:	409a      	lsls	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	430a      	orrs	r2, r1
 8001564:	60da      	str	r2, [r3, #12]
 8001566:	e022      	b.n	80015ae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	6919      	ldr	r1, [r3, #16]
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	b29b      	uxth	r3, r3
 8001574:	461a      	mov	r2, r3
 8001576:	4613      	mov	r3, r2
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	4413      	add	r3, r2
 800157c:	2207      	movs	r2, #7
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	43da      	mvns	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	400a      	ands	r2, r1
 800158a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	6919      	ldr	r1, [r3, #16]
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	689a      	ldr	r2, [r3, #8]
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	b29b      	uxth	r3, r3
 800159c:	4618      	mov	r0, r3
 800159e:	4603      	mov	r3, r0
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	4403      	add	r3, r0
 80015a4:	409a      	lsls	r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	430a      	orrs	r2, r1
 80015ac:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	2b06      	cmp	r3, #6
 80015b4:	d824      	bhi.n	8001600 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685a      	ldr	r2, [r3, #4]
 80015c0:	4613      	mov	r3, r2
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	4413      	add	r3, r2
 80015c6:	3b05      	subs	r3, #5
 80015c8:	221f      	movs	r2, #31
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	43da      	mvns	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	400a      	ands	r2, r1
 80015d6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	4618      	mov	r0, r3
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685a      	ldr	r2, [r3, #4]
 80015ea:	4613      	mov	r3, r2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	4413      	add	r3, r2
 80015f0:	3b05      	subs	r3, #5
 80015f2:	fa00 f203 	lsl.w	r2, r0, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	430a      	orrs	r2, r1
 80015fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80015fe:	e04c      	b.n	800169a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	2b0c      	cmp	r3, #12
 8001606:	d824      	bhi.n	8001652 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685a      	ldr	r2, [r3, #4]
 8001612:	4613      	mov	r3, r2
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	4413      	add	r3, r2
 8001618:	3b23      	subs	r3, #35	@ 0x23
 800161a:	221f      	movs	r2, #31
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	43da      	mvns	r2, r3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	400a      	ands	r2, r1
 8001628:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	b29b      	uxth	r3, r3
 8001636:	4618      	mov	r0, r3
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685a      	ldr	r2, [r3, #4]
 800163c:	4613      	mov	r3, r2
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	4413      	add	r3, r2
 8001642:	3b23      	subs	r3, #35	@ 0x23
 8001644:	fa00 f203 	lsl.w	r2, r0, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	430a      	orrs	r2, r1
 800164e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001650:	e023      	b.n	800169a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685a      	ldr	r2, [r3, #4]
 800165c:	4613      	mov	r3, r2
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	4413      	add	r3, r2
 8001662:	3b41      	subs	r3, #65	@ 0x41
 8001664:	221f      	movs	r2, #31
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	43da      	mvns	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	400a      	ands	r2, r1
 8001672:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	b29b      	uxth	r3, r3
 8001680:	4618      	mov	r0, r3
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685a      	ldr	r2, [r3, #4]
 8001686:	4613      	mov	r3, r2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	4413      	add	r3, r2
 800168c:	3b41      	subs	r3, #65	@ 0x41
 800168e:	fa00 f203 	lsl.w	r2, r0, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	430a      	orrs	r2, r1
 8001698:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800169a:	4b29      	ldr	r3, [pc, #164]	@ (8001740 <HAL_ADC_ConfigChannel+0x250>)
 800169c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a28      	ldr	r2, [pc, #160]	@ (8001744 <HAL_ADC_ConfigChannel+0x254>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d10f      	bne.n	80016c8 <HAL_ADC_ConfigChannel+0x1d8>
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2b12      	cmp	r3, #18
 80016ae:	d10b      	bne.n	80016c8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a1d      	ldr	r2, [pc, #116]	@ (8001744 <HAL_ADC_ConfigChannel+0x254>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d12b      	bne.n	800172a <HAL_ADC_ConfigChannel+0x23a>
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a1c      	ldr	r2, [pc, #112]	@ (8001748 <HAL_ADC_ConfigChannel+0x258>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d003      	beq.n	80016e4 <HAL_ADC_ConfigChannel+0x1f4>
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2b11      	cmp	r3, #17
 80016e2:	d122      	bne.n	800172a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a11      	ldr	r2, [pc, #68]	@ (8001748 <HAL_ADC_ConfigChannel+0x258>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d111      	bne.n	800172a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001706:	4b11      	ldr	r3, [pc, #68]	@ (800174c <HAL_ADC_ConfigChannel+0x25c>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a11      	ldr	r2, [pc, #68]	@ (8001750 <HAL_ADC_ConfigChannel+0x260>)
 800170c:	fba2 2303 	umull	r2, r3, r2, r3
 8001710:	0c9a      	lsrs	r2, r3, #18
 8001712:	4613      	mov	r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	4413      	add	r3, r2
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800171c:	e002      	b.n	8001724 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	3b01      	subs	r3, #1
 8001722:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1f9      	bne.n	800171e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001732:	2300      	movs	r3, #0
}
 8001734:	4618      	mov	r0, r3
 8001736:	3714      	adds	r7, #20
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	40012300 	.word	0x40012300
 8001744:	40012000 	.word	0x40012000
 8001748:	10000012 	.word	0x10000012
 800174c:	20000000 	.word	0x20000000
 8001750:	431bde83 	.word	0x431bde83

08001754 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800175c:	4b79      	ldr	r3, [pc, #484]	@ (8001944 <ADC_Init+0x1f0>)
 800175e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	685a      	ldr	r2, [r3, #4]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	431a      	orrs	r2, r3
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	685a      	ldr	r2, [r3, #4]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001788:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	6859      	ldr	r1, [r3, #4]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	691b      	ldr	r3, [r3, #16]
 8001794:	021a      	lsls	r2, r3, #8
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	430a      	orrs	r2, r1
 800179c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	685a      	ldr	r2, [r3, #4]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80017ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	6859      	ldr	r1, [r3, #4]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689a      	ldr	r2, [r3, #8]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	430a      	orrs	r2, r1
 80017be:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	689a      	ldr	r2, [r3, #8]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80017ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	6899      	ldr	r1, [r3, #8]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	68da      	ldr	r2, [r3, #12]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	430a      	orrs	r2, r1
 80017e0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017e6:	4a58      	ldr	r2, [pc, #352]	@ (8001948 <ADC_Init+0x1f4>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d022      	beq.n	8001832 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	689a      	ldr	r2, [r3, #8]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80017fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	6899      	ldr	r1, [r3, #8]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	430a      	orrs	r2, r1
 800180c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	689a      	ldr	r2, [r3, #8]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800181c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	6899      	ldr	r1, [r3, #8]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	430a      	orrs	r2, r1
 800182e:	609a      	str	r2, [r3, #8]
 8001830:	e00f      	b.n	8001852 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	689a      	ldr	r2, [r3, #8]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001840:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	689a      	ldr	r2, [r3, #8]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001850:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	689a      	ldr	r2, [r3, #8]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f022 0202 	bic.w	r2, r2, #2
 8001860:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	6899      	ldr	r1, [r3, #8]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	7e1b      	ldrb	r3, [r3, #24]
 800186c:	005a      	lsls	r2, r3, #1
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	430a      	orrs	r2, r1
 8001874:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f893 3020 	ldrb.w	r3, [r3, #32]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d01b      	beq.n	80018b8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	685a      	ldr	r2, [r3, #4]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800188e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	685a      	ldr	r2, [r3, #4]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800189e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	6859      	ldr	r1, [r3, #4]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018aa:	3b01      	subs	r3, #1
 80018ac:	035a      	lsls	r2, r3, #13
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	430a      	orrs	r2, r1
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	e007      	b.n	80018c8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	685a      	ldr	r2, [r3, #4]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80018c6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80018d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	69db      	ldr	r3, [r3, #28]
 80018e2:	3b01      	subs	r3, #1
 80018e4:	051a      	lsls	r2, r3, #20
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	430a      	orrs	r2, r1
 80018ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	689a      	ldr	r2, [r3, #8]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80018fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	6899      	ldr	r1, [r3, #8]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800190a:	025a      	lsls	r2, r3, #9
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	430a      	orrs	r2, r1
 8001912:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	689a      	ldr	r2, [r3, #8]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001922:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	6899      	ldr	r1, [r3, #8]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	695b      	ldr	r3, [r3, #20]
 800192e:	029a      	lsls	r2, r3, #10
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	430a      	orrs	r2, r1
 8001936:	609a      	str	r2, [r3, #8]
}
 8001938:	bf00      	nop
 800193a:	3714      	adds	r7, #20
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	40012300 	.word	0x40012300
 8001948:	0f000001 	.word	0x0f000001

0800194c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f003 0307 	and.w	r3, r3, #7
 800195a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800195c:	4b0c      	ldr	r3, [pc, #48]	@ (8001990 <__NVIC_SetPriorityGrouping+0x44>)
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001962:	68ba      	ldr	r2, [r7, #8]
 8001964:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001968:	4013      	ands	r3, r2
 800196a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001974:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001978:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800197c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800197e:	4a04      	ldr	r2, [pc, #16]	@ (8001990 <__NVIC_SetPriorityGrouping+0x44>)
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	60d3      	str	r3, [r2, #12]
}
 8001984:	bf00      	nop
 8001986:	3714      	adds	r7, #20
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr
 8001990:	e000ed00 	.word	0xe000ed00

08001994 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001998:	4b04      	ldr	r3, [pc, #16]	@ (80019ac <__NVIC_GetPriorityGrouping+0x18>)
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	0a1b      	lsrs	r3, r3, #8
 800199e:	f003 0307 	and.w	r3, r3, #7
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	db0b      	blt.n	80019da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019c2:	79fb      	ldrb	r3, [r7, #7]
 80019c4:	f003 021f 	and.w	r2, r3, #31
 80019c8:	4907      	ldr	r1, [pc, #28]	@ (80019e8 <__NVIC_EnableIRQ+0x38>)
 80019ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ce:	095b      	lsrs	r3, r3, #5
 80019d0:	2001      	movs	r0, #1
 80019d2:	fa00 f202 	lsl.w	r2, r0, r2
 80019d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019da:	bf00      	nop
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	e000e100 	.word	0xe000e100

080019ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	6039      	str	r1, [r7, #0]
 80019f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	db0a      	blt.n	8001a16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	b2da      	uxtb	r2, r3
 8001a04:	490c      	ldr	r1, [pc, #48]	@ (8001a38 <__NVIC_SetPriority+0x4c>)
 8001a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0a:	0112      	lsls	r2, r2, #4
 8001a0c:	b2d2      	uxtb	r2, r2
 8001a0e:	440b      	add	r3, r1
 8001a10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a14:	e00a      	b.n	8001a2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	b2da      	uxtb	r2, r3
 8001a1a:	4908      	ldr	r1, [pc, #32]	@ (8001a3c <__NVIC_SetPriority+0x50>)
 8001a1c:	79fb      	ldrb	r3, [r7, #7]
 8001a1e:	f003 030f 	and.w	r3, r3, #15
 8001a22:	3b04      	subs	r3, #4
 8001a24:	0112      	lsls	r2, r2, #4
 8001a26:	b2d2      	uxtb	r2, r2
 8001a28:	440b      	add	r3, r1
 8001a2a:	761a      	strb	r2, [r3, #24]
}
 8001a2c:	bf00      	nop
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	e000e100 	.word	0xe000e100
 8001a3c:	e000ed00 	.word	0xe000ed00

08001a40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b089      	sub	sp, #36	@ 0x24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f003 0307 	and.w	r3, r3, #7
 8001a52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	f1c3 0307 	rsb	r3, r3, #7
 8001a5a:	2b04      	cmp	r3, #4
 8001a5c:	bf28      	it	cs
 8001a5e:	2304      	movcs	r3, #4
 8001a60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	3304      	adds	r3, #4
 8001a66:	2b06      	cmp	r3, #6
 8001a68:	d902      	bls.n	8001a70 <NVIC_EncodePriority+0x30>
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	3b03      	subs	r3, #3
 8001a6e:	e000      	b.n	8001a72 <NVIC_EncodePriority+0x32>
 8001a70:	2300      	movs	r3, #0
 8001a72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a74:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7e:	43da      	mvns	r2, r3
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	401a      	ands	r2, r3
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a88:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a92:	43d9      	mvns	r1, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a98:	4313      	orrs	r3, r2
         );
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3724      	adds	r7, #36	@ 0x24
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr

08001aa6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b082      	sub	sp, #8
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f7ff ff4c 	bl	800194c <__NVIC_SetPriorityGrouping>
}
 8001ab4:	bf00      	nop
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	607a      	str	r2, [r7, #4]
 8001ac8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001aca:	2300      	movs	r3, #0
 8001acc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ace:	f7ff ff61 	bl	8001994 <__NVIC_GetPriorityGrouping>
 8001ad2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	68b9      	ldr	r1, [r7, #8]
 8001ad8:	6978      	ldr	r0, [r7, #20]
 8001ada:	f7ff ffb1 	bl	8001a40 <NVIC_EncodePriority>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ae4:	4611      	mov	r1, r2
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff ff80 	bl	80019ec <__NVIC_SetPriority>
}
 8001aec:	bf00      	nop
 8001aee:	3718      	adds	r7, #24
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff ff54 	bl	80019b0 <__NVIC_EnableIRQ>
}
 8001b08:	bf00      	nop
 8001b0a:	3708      	adds	r7, #8
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b089      	sub	sp, #36	@ 0x24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b22:	2300      	movs	r3, #0
 8001b24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b26:	2300      	movs	r3, #0
 8001b28:	61fb      	str	r3, [r7, #28]
 8001b2a:	e159      	b.n	8001de0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	697a      	ldr	r2, [r7, #20]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b40:	693a      	ldr	r2, [r7, #16]
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	f040 8148 	bne.w	8001dda <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f003 0303 	and.w	r3, r3, #3
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d005      	beq.n	8001b62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d130      	bne.n	8001bc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	2203      	movs	r2, #3
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	43db      	mvns	r3, r3
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	4013      	ands	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	68da      	ldr	r2, [r3, #12]
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b98:	2201      	movs	r2, #1
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	091b      	lsrs	r3, r3, #4
 8001bae:	f003 0201 	and.w	r2, r3, #1
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f003 0303 	and.w	r3, r3, #3
 8001bcc:	2b03      	cmp	r3, #3
 8001bce:	d017      	beq.n	8001c00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	2203      	movs	r2, #3
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	43db      	mvns	r3, r3
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	4013      	ands	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	689a      	ldr	r2, [r3, #8]
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f003 0303 	and.w	r3, r3, #3
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d123      	bne.n	8001c54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	08da      	lsrs	r2, r3, #3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	3208      	adds	r2, #8
 8001c14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	f003 0307 	and.w	r3, r3, #7
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	220f      	movs	r2, #15
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	43db      	mvns	r3, r3
 8001c2a:	69ba      	ldr	r2, [r7, #24]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	691a      	ldr	r2, [r3, #16]
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	f003 0307 	and.w	r3, r3, #7
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	08da      	lsrs	r2, r3, #3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	3208      	adds	r2, #8
 8001c4e:	69b9      	ldr	r1, [r7, #24]
 8001c50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	2203      	movs	r2, #3
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	43db      	mvns	r3, r3
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f003 0203 	and.w	r2, r3, #3
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f000 80a2 	beq.w	8001dda <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c96:	2300      	movs	r3, #0
 8001c98:	60fb      	str	r3, [r7, #12]
 8001c9a:	4b57      	ldr	r3, [pc, #348]	@ (8001df8 <HAL_GPIO_Init+0x2e8>)
 8001c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c9e:	4a56      	ldr	r2, [pc, #344]	@ (8001df8 <HAL_GPIO_Init+0x2e8>)
 8001ca0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ca4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ca6:	4b54      	ldr	r3, [pc, #336]	@ (8001df8 <HAL_GPIO_Init+0x2e8>)
 8001ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001caa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cae:	60fb      	str	r3, [r7, #12]
 8001cb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cb2:	4a52      	ldr	r2, [pc, #328]	@ (8001dfc <HAL_GPIO_Init+0x2ec>)
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	089b      	lsrs	r3, r3, #2
 8001cb8:	3302      	adds	r3, #2
 8001cba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	f003 0303 	and.w	r3, r3, #3
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	220f      	movs	r2, #15
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a49      	ldr	r2, [pc, #292]	@ (8001e00 <HAL_GPIO_Init+0x2f0>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d019      	beq.n	8001d12 <HAL_GPIO_Init+0x202>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a48      	ldr	r2, [pc, #288]	@ (8001e04 <HAL_GPIO_Init+0x2f4>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d013      	beq.n	8001d0e <HAL_GPIO_Init+0x1fe>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a47      	ldr	r2, [pc, #284]	@ (8001e08 <HAL_GPIO_Init+0x2f8>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d00d      	beq.n	8001d0a <HAL_GPIO_Init+0x1fa>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a46      	ldr	r2, [pc, #280]	@ (8001e0c <HAL_GPIO_Init+0x2fc>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d007      	beq.n	8001d06 <HAL_GPIO_Init+0x1f6>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a45      	ldr	r2, [pc, #276]	@ (8001e10 <HAL_GPIO_Init+0x300>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d101      	bne.n	8001d02 <HAL_GPIO_Init+0x1f2>
 8001cfe:	2304      	movs	r3, #4
 8001d00:	e008      	b.n	8001d14 <HAL_GPIO_Init+0x204>
 8001d02:	2307      	movs	r3, #7
 8001d04:	e006      	b.n	8001d14 <HAL_GPIO_Init+0x204>
 8001d06:	2303      	movs	r3, #3
 8001d08:	e004      	b.n	8001d14 <HAL_GPIO_Init+0x204>
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	e002      	b.n	8001d14 <HAL_GPIO_Init+0x204>
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e000      	b.n	8001d14 <HAL_GPIO_Init+0x204>
 8001d12:	2300      	movs	r3, #0
 8001d14:	69fa      	ldr	r2, [r7, #28]
 8001d16:	f002 0203 	and.w	r2, r2, #3
 8001d1a:	0092      	lsls	r2, r2, #2
 8001d1c:	4093      	lsls	r3, r2
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d24:	4935      	ldr	r1, [pc, #212]	@ (8001dfc <HAL_GPIO_Init+0x2ec>)
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	089b      	lsrs	r3, r3, #2
 8001d2a:	3302      	adds	r3, #2
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d32:	4b38      	ldr	r3, [pc, #224]	@ (8001e14 <HAL_GPIO_Init+0x304>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	43db      	mvns	r3, r3
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d003      	beq.n	8001d56 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d56:	4a2f      	ldr	r2, [pc, #188]	@ (8001e14 <HAL_GPIO_Init+0x304>)
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d5c:	4b2d      	ldr	r3, [pc, #180]	@ (8001e14 <HAL_GPIO_Init+0x304>)
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	43db      	mvns	r3, r3
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d003      	beq.n	8001d80 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d80:	4a24      	ldr	r2, [pc, #144]	@ (8001e14 <HAL_GPIO_Init+0x304>)
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d86:	4b23      	ldr	r3, [pc, #140]	@ (8001e14 <HAL_GPIO_Init+0x304>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	43db      	mvns	r3, r3
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	4013      	ands	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d003      	beq.n	8001daa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001daa:	4a1a      	ldr	r2, [pc, #104]	@ (8001e14 <HAL_GPIO_Init+0x304>)
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001db0:	4b18      	ldr	r3, [pc, #96]	@ (8001e14 <HAL_GPIO_Init+0x304>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	43db      	mvns	r3, r3
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d003      	beq.n	8001dd4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001dd4:	4a0f      	ldr	r2, [pc, #60]	@ (8001e14 <HAL_GPIO_Init+0x304>)
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	61fb      	str	r3, [r7, #28]
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	2b0f      	cmp	r3, #15
 8001de4:	f67f aea2 	bls.w	8001b2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001de8:	bf00      	nop
 8001dea:	bf00      	nop
 8001dec:	3724      	adds	r7, #36	@ 0x24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	40013800 	.word	0x40013800
 8001e00:	40020000 	.word	0x40020000
 8001e04:	40020400 	.word	0x40020400
 8001e08:	40020800 	.word	0x40020800
 8001e0c:	40020c00 	.word	0x40020c00
 8001e10:	40021000 	.word	0x40021000
 8001e14:	40013c00 	.word	0x40013c00

08001e18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	460b      	mov	r3, r1
 8001e22:	807b      	strh	r3, [r7, #2]
 8001e24:	4613      	mov	r3, r2
 8001e26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e28:	787b      	ldrb	r3, [r7, #1]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d003      	beq.n	8001e36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e2e:	887a      	ldrh	r2, [r7, #2]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e34:	e003      	b.n	8001e3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e36:	887b      	ldrh	r3, [r7, #2]
 8001e38:	041a      	lsls	r2, r3, #16
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	619a      	str	r2, [r3, #24]
}
 8001e3e:	bf00      	nop
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
	...

08001e4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b086      	sub	sp, #24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e267      	b.n	800232e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d075      	beq.n	8001f56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e6a:	4b88      	ldr	r3, [pc, #544]	@ (800208c <HAL_RCC_OscConfig+0x240>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f003 030c 	and.w	r3, r3, #12
 8001e72:	2b04      	cmp	r3, #4
 8001e74:	d00c      	beq.n	8001e90 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e76:	4b85      	ldr	r3, [pc, #532]	@ (800208c <HAL_RCC_OscConfig+0x240>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e7e:	2b08      	cmp	r3, #8
 8001e80:	d112      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e82:	4b82      	ldr	r3, [pc, #520]	@ (800208c <HAL_RCC_OscConfig+0x240>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e8a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e8e:	d10b      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e90:	4b7e      	ldr	r3, [pc, #504]	@ (800208c <HAL_RCC_OscConfig+0x240>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d05b      	beq.n	8001f54 <HAL_RCC_OscConfig+0x108>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d157      	bne.n	8001f54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e242      	b.n	800232e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001eb0:	d106      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x74>
 8001eb2:	4b76      	ldr	r3, [pc, #472]	@ (800208c <HAL_RCC_OscConfig+0x240>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a75      	ldr	r2, [pc, #468]	@ (800208c <HAL_RCC_OscConfig+0x240>)
 8001eb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ebc:	6013      	str	r3, [r2, #0]
 8001ebe:	e01d      	b.n	8001efc <HAL_RCC_OscConfig+0xb0>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ec8:	d10c      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x98>
 8001eca:	4b70      	ldr	r3, [pc, #448]	@ (800208c <HAL_RCC_OscConfig+0x240>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a6f      	ldr	r2, [pc, #444]	@ (800208c <HAL_RCC_OscConfig+0x240>)
 8001ed0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ed4:	6013      	str	r3, [r2, #0]
 8001ed6:	4b6d      	ldr	r3, [pc, #436]	@ (800208c <HAL_RCC_OscConfig+0x240>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a6c      	ldr	r2, [pc, #432]	@ (800208c <HAL_RCC_OscConfig+0x240>)
 8001edc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ee0:	6013      	str	r3, [r2, #0]
 8001ee2:	e00b      	b.n	8001efc <HAL_RCC_OscConfig+0xb0>
 8001ee4:	4b69      	ldr	r3, [pc, #420]	@ (800208c <HAL_RCC_OscConfig+0x240>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a68      	ldr	r2, [pc, #416]	@ (800208c <HAL_RCC_OscConfig+0x240>)
 8001eea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001eee:	6013      	str	r3, [r2, #0]
 8001ef0:	4b66      	ldr	r3, [pc, #408]	@ (800208c <HAL_RCC_OscConfig+0x240>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a65      	ldr	r2, [pc, #404]	@ (800208c <HAL_RCC_OscConfig+0x240>)
 8001ef6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001efa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d013      	beq.n	8001f2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f04:	f7ff faa4 	bl	8001450 <HAL_GetTick>
 8001f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f0c:	f7ff faa0 	bl	8001450 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b64      	cmp	r3, #100	@ 0x64
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e207      	b.n	800232e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f1e:	4b5b      	ldr	r3, [pc, #364]	@ (800208c <HAL_RCC_OscConfig+0x240>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d0f0      	beq.n	8001f0c <HAL_RCC_OscConfig+0xc0>
 8001f2a:	e014      	b.n	8001f56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2c:	f7ff fa90 	bl	8001450 <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f34:	f7ff fa8c 	bl	8001450 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b64      	cmp	r3, #100	@ 0x64
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e1f3      	b.n	800232e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f46:	4b51      	ldr	r3, [pc, #324]	@ (800208c <HAL_RCC_OscConfig+0x240>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1f0      	bne.n	8001f34 <HAL_RCC_OscConfig+0xe8>
 8001f52:	e000      	b.n	8001f56 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d063      	beq.n	800202a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f62:	4b4a      	ldr	r3, [pc, #296]	@ (800208c <HAL_RCC_OscConfig+0x240>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f003 030c 	and.w	r3, r3, #12
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d00b      	beq.n	8001f86 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f6e:	4b47      	ldr	r3, [pc, #284]	@ (800208c <HAL_RCC_OscConfig+0x240>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f76:	2b08      	cmp	r3, #8
 8001f78:	d11c      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f7a:	4b44      	ldr	r3, [pc, #272]	@ (800208c <HAL_RCC_OscConfig+0x240>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d116      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f86:	4b41      	ldr	r3, [pc, #260]	@ (800208c <HAL_RCC_OscConfig+0x240>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d005      	beq.n	8001f9e <HAL_RCC_OscConfig+0x152>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d001      	beq.n	8001f9e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e1c7      	b.n	800232e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f9e:	4b3b      	ldr	r3, [pc, #236]	@ (800208c <HAL_RCC_OscConfig+0x240>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	4937      	ldr	r1, [pc, #220]	@ (800208c <HAL_RCC_OscConfig+0x240>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fb2:	e03a      	b.n	800202a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d020      	beq.n	8001ffe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fbc:	4b34      	ldr	r3, [pc, #208]	@ (8002090 <HAL_RCC_OscConfig+0x244>)
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc2:	f7ff fa45 	bl	8001450 <HAL_GetTick>
 8001fc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fc8:	e008      	b.n	8001fdc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fca:	f7ff fa41 	bl	8001450 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e1a8      	b.n	800232e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fdc:	4b2b      	ldr	r3, [pc, #172]	@ (800208c <HAL_RCC_OscConfig+0x240>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d0f0      	beq.n	8001fca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fe8:	4b28      	ldr	r3, [pc, #160]	@ (800208c <HAL_RCC_OscConfig+0x240>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	00db      	lsls	r3, r3, #3
 8001ff6:	4925      	ldr	r1, [pc, #148]	@ (800208c <HAL_RCC_OscConfig+0x240>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	600b      	str	r3, [r1, #0]
 8001ffc:	e015      	b.n	800202a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ffe:	4b24      	ldr	r3, [pc, #144]	@ (8002090 <HAL_RCC_OscConfig+0x244>)
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002004:	f7ff fa24 	bl	8001450 <HAL_GetTick>
 8002008:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800200a:	e008      	b.n	800201e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800200c:	f7ff fa20 	bl	8001450 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b02      	cmp	r3, #2
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e187      	b.n	800232e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800201e:	4b1b      	ldr	r3, [pc, #108]	@ (800208c <HAL_RCC_OscConfig+0x240>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d1f0      	bne.n	800200c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0308 	and.w	r3, r3, #8
 8002032:	2b00      	cmp	r3, #0
 8002034:	d036      	beq.n	80020a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d016      	beq.n	800206c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800203e:	4b15      	ldr	r3, [pc, #84]	@ (8002094 <HAL_RCC_OscConfig+0x248>)
 8002040:	2201      	movs	r2, #1
 8002042:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002044:	f7ff fa04 	bl	8001450 <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800204c:	f7ff fa00 	bl	8001450 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e167      	b.n	800232e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800205e:	4b0b      	ldr	r3, [pc, #44]	@ (800208c <HAL_RCC_OscConfig+0x240>)
 8002060:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d0f0      	beq.n	800204c <HAL_RCC_OscConfig+0x200>
 800206a:	e01b      	b.n	80020a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800206c:	4b09      	ldr	r3, [pc, #36]	@ (8002094 <HAL_RCC_OscConfig+0x248>)
 800206e:	2200      	movs	r2, #0
 8002070:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002072:	f7ff f9ed 	bl	8001450 <HAL_GetTick>
 8002076:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002078:	e00e      	b.n	8002098 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800207a:	f7ff f9e9 	bl	8001450 <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d907      	bls.n	8002098 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e150      	b.n	800232e <HAL_RCC_OscConfig+0x4e2>
 800208c:	40023800 	.word	0x40023800
 8002090:	42470000 	.word	0x42470000
 8002094:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002098:	4b88      	ldr	r3, [pc, #544]	@ (80022bc <HAL_RCC_OscConfig+0x470>)
 800209a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800209c:	f003 0302 	and.w	r3, r3, #2
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d1ea      	bne.n	800207a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0304 	and.w	r3, r3, #4
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	f000 8097 	beq.w	80021e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020b2:	2300      	movs	r3, #0
 80020b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020b6:	4b81      	ldr	r3, [pc, #516]	@ (80022bc <HAL_RCC_OscConfig+0x470>)
 80020b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d10f      	bne.n	80020e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020c2:	2300      	movs	r3, #0
 80020c4:	60bb      	str	r3, [r7, #8]
 80020c6:	4b7d      	ldr	r3, [pc, #500]	@ (80022bc <HAL_RCC_OscConfig+0x470>)
 80020c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ca:	4a7c      	ldr	r2, [pc, #496]	@ (80022bc <HAL_RCC_OscConfig+0x470>)
 80020cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80020d2:	4b7a      	ldr	r3, [pc, #488]	@ (80022bc <HAL_RCC_OscConfig+0x470>)
 80020d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020da:	60bb      	str	r3, [r7, #8]
 80020dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020de:	2301      	movs	r3, #1
 80020e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020e2:	4b77      	ldr	r3, [pc, #476]	@ (80022c0 <HAL_RCC_OscConfig+0x474>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d118      	bne.n	8002120 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020ee:	4b74      	ldr	r3, [pc, #464]	@ (80022c0 <HAL_RCC_OscConfig+0x474>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a73      	ldr	r2, [pc, #460]	@ (80022c0 <HAL_RCC_OscConfig+0x474>)
 80020f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020fa:	f7ff f9a9 	bl	8001450 <HAL_GetTick>
 80020fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002100:	e008      	b.n	8002114 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002102:	f7ff f9a5 	bl	8001450 <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	2b02      	cmp	r3, #2
 800210e:	d901      	bls.n	8002114 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e10c      	b.n	800232e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002114:	4b6a      	ldr	r3, [pc, #424]	@ (80022c0 <HAL_RCC_OscConfig+0x474>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800211c:	2b00      	cmp	r3, #0
 800211e:	d0f0      	beq.n	8002102 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d106      	bne.n	8002136 <HAL_RCC_OscConfig+0x2ea>
 8002128:	4b64      	ldr	r3, [pc, #400]	@ (80022bc <HAL_RCC_OscConfig+0x470>)
 800212a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800212c:	4a63      	ldr	r2, [pc, #396]	@ (80022bc <HAL_RCC_OscConfig+0x470>)
 800212e:	f043 0301 	orr.w	r3, r3, #1
 8002132:	6713      	str	r3, [r2, #112]	@ 0x70
 8002134:	e01c      	b.n	8002170 <HAL_RCC_OscConfig+0x324>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	2b05      	cmp	r3, #5
 800213c:	d10c      	bne.n	8002158 <HAL_RCC_OscConfig+0x30c>
 800213e:	4b5f      	ldr	r3, [pc, #380]	@ (80022bc <HAL_RCC_OscConfig+0x470>)
 8002140:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002142:	4a5e      	ldr	r2, [pc, #376]	@ (80022bc <HAL_RCC_OscConfig+0x470>)
 8002144:	f043 0304 	orr.w	r3, r3, #4
 8002148:	6713      	str	r3, [r2, #112]	@ 0x70
 800214a:	4b5c      	ldr	r3, [pc, #368]	@ (80022bc <HAL_RCC_OscConfig+0x470>)
 800214c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800214e:	4a5b      	ldr	r2, [pc, #364]	@ (80022bc <HAL_RCC_OscConfig+0x470>)
 8002150:	f043 0301 	orr.w	r3, r3, #1
 8002154:	6713      	str	r3, [r2, #112]	@ 0x70
 8002156:	e00b      	b.n	8002170 <HAL_RCC_OscConfig+0x324>
 8002158:	4b58      	ldr	r3, [pc, #352]	@ (80022bc <HAL_RCC_OscConfig+0x470>)
 800215a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800215c:	4a57      	ldr	r2, [pc, #348]	@ (80022bc <HAL_RCC_OscConfig+0x470>)
 800215e:	f023 0301 	bic.w	r3, r3, #1
 8002162:	6713      	str	r3, [r2, #112]	@ 0x70
 8002164:	4b55      	ldr	r3, [pc, #340]	@ (80022bc <HAL_RCC_OscConfig+0x470>)
 8002166:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002168:	4a54      	ldr	r2, [pc, #336]	@ (80022bc <HAL_RCC_OscConfig+0x470>)
 800216a:	f023 0304 	bic.w	r3, r3, #4
 800216e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d015      	beq.n	80021a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002178:	f7ff f96a 	bl	8001450 <HAL_GetTick>
 800217c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800217e:	e00a      	b.n	8002196 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002180:	f7ff f966 	bl	8001450 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800218e:	4293      	cmp	r3, r2
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e0cb      	b.n	800232e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002196:	4b49      	ldr	r3, [pc, #292]	@ (80022bc <HAL_RCC_OscConfig+0x470>)
 8002198:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d0ee      	beq.n	8002180 <HAL_RCC_OscConfig+0x334>
 80021a2:	e014      	b.n	80021ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021a4:	f7ff f954 	bl	8001450 <HAL_GetTick>
 80021a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021aa:	e00a      	b.n	80021c2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021ac:	f7ff f950 	bl	8001450 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e0b5      	b.n	800232e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021c2:	4b3e      	ldr	r3, [pc, #248]	@ (80022bc <HAL_RCC_OscConfig+0x470>)
 80021c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1ee      	bne.n	80021ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021ce:	7dfb      	ldrb	r3, [r7, #23]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d105      	bne.n	80021e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021d4:	4b39      	ldr	r3, [pc, #228]	@ (80022bc <HAL_RCC_OscConfig+0x470>)
 80021d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d8:	4a38      	ldr	r2, [pc, #224]	@ (80022bc <HAL_RCC_OscConfig+0x470>)
 80021da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021de:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	f000 80a1 	beq.w	800232c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021ea:	4b34      	ldr	r3, [pc, #208]	@ (80022bc <HAL_RCC_OscConfig+0x470>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f003 030c 	and.w	r3, r3, #12
 80021f2:	2b08      	cmp	r3, #8
 80021f4:	d05c      	beq.n	80022b0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d141      	bne.n	8002282 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021fe:	4b31      	ldr	r3, [pc, #196]	@ (80022c4 <HAL_RCC_OscConfig+0x478>)
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002204:	f7ff f924 	bl	8001450 <HAL_GetTick>
 8002208:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800220a:	e008      	b.n	800221e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800220c:	f7ff f920 	bl	8001450 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b02      	cmp	r3, #2
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e087      	b.n	800232e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800221e:	4b27      	ldr	r3, [pc, #156]	@ (80022bc <HAL_RCC_OscConfig+0x470>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1f0      	bne.n	800220c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	69da      	ldr	r2, [r3, #28]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a1b      	ldr	r3, [r3, #32]
 8002232:	431a      	orrs	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002238:	019b      	lsls	r3, r3, #6
 800223a:	431a      	orrs	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002240:	085b      	lsrs	r3, r3, #1
 8002242:	3b01      	subs	r3, #1
 8002244:	041b      	lsls	r3, r3, #16
 8002246:	431a      	orrs	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800224c:	061b      	lsls	r3, r3, #24
 800224e:	491b      	ldr	r1, [pc, #108]	@ (80022bc <HAL_RCC_OscConfig+0x470>)
 8002250:	4313      	orrs	r3, r2
 8002252:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002254:	4b1b      	ldr	r3, [pc, #108]	@ (80022c4 <HAL_RCC_OscConfig+0x478>)
 8002256:	2201      	movs	r2, #1
 8002258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225a:	f7ff f8f9 	bl	8001450 <HAL_GetTick>
 800225e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002260:	e008      	b.n	8002274 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002262:	f7ff f8f5 	bl	8001450 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d901      	bls.n	8002274 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e05c      	b.n	800232e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002274:	4b11      	ldr	r3, [pc, #68]	@ (80022bc <HAL_RCC_OscConfig+0x470>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d0f0      	beq.n	8002262 <HAL_RCC_OscConfig+0x416>
 8002280:	e054      	b.n	800232c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002282:	4b10      	ldr	r3, [pc, #64]	@ (80022c4 <HAL_RCC_OscConfig+0x478>)
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002288:	f7ff f8e2 	bl	8001450 <HAL_GetTick>
 800228c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002290:	f7ff f8de 	bl	8001450 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e045      	b.n	800232e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022a2:	4b06      	ldr	r3, [pc, #24]	@ (80022bc <HAL_RCC_OscConfig+0x470>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1f0      	bne.n	8002290 <HAL_RCC_OscConfig+0x444>
 80022ae:	e03d      	b.n	800232c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d107      	bne.n	80022c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e038      	b.n	800232e <HAL_RCC_OscConfig+0x4e2>
 80022bc:	40023800 	.word	0x40023800
 80022c0:	40007000 	.word	0x40007000
 80022c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002338 <HAL_RCC_OscConfig+0x4ec>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d028      	beq.n	8002328 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d121      	bne.n	8002328 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d11a      	bne.n	8002328 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022f2:	68fa      	ldr	r2, [r7, #12]
 80022f4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80022f8:	4013      	ands	r3, r2
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80022fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002300:	4293      	cmp	r3, r2
 8002302:	d111      	bne.n	8002328 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800230e:	085b      	lsrs	r3, r3, #1
 8002310:	3b01      	subs	r3, #1
 8002312:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002314:	429a      	cmp	r2, r3
 8002316:	d107      	bne.n	8002328 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002322:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002324:	429a      	cmp	r2, r3
 8002326:	d001      	beq.n	800232c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e000      	b.n	800232e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3718      	adds	r7, #24
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	40023800 	.word	0x40023800

0800233c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d101      	bne.n	8002350 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e0cc      	b.n	80024ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002350:	4b68      	ldr	r3, [pc, #416]	@ (80024f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0307 	and.w	r3, r3, #7
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	429a      	cmp	r2, r3
 800235c:	d90c      	bls.n	8002378 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800235e:	4b65      	ldr	r3, [pc, #404]	@ (80024f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002360:	683a      	ldr	r2, [r7, #0]
 8002362:	b2d2      	uxtb	r2, r2
 8002364:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002366:	4b63      	ldr	r3, [pc, #396]	@ (80024f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0307 	and.w	r3, r3, #7
 800236e:	683a      	ldr	r2, [r7, #0]
 8002370:	429a      	cmp	r2, r3
 8002372:	d001      	beq.n	8002378 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e0b8      	b.n	80024ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0302 	and.w	r3, r3, #2
 8002380:	2b00      	cmp	r3, #0
 8002382:	d020      	beq.n	80023c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0304 	and.w	r3, r3, #4
 800238c:	2b00      	cmp	r3, #0
 800238e:	d005      	beq.n	800239c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002390:	4b59      	ldr	r3, [pc, #356]	@ (80024f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	4a58      	ldr	r2, [pc, #352]	@ (80024f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002396:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800239a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0308 	and.w	r3, r3, #8
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d005      	beq.n	80023b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023a8:	4b53      	ldr	r3, [pc, #332]	@ (80024f8 <HAL_RCC_ClockConfig+0x1bc>)
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	4a52      	ldr	r2, [pc, #328]	@ (80024f8 <HAL_RCC_ClockConfig+0x1bc>)
 80023ae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80023b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023b4:	4b50      	ldr	r3, [pc, #320]	@ (80024f8 <HAL_RCC_ClockConfig+0x1bc>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	494d      	ldr	r1, [pc, #308]	@ (80024f8 <HAL_RCC_ClockConfig+0x1bc>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d044      	beq.n	800245c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d107      	bne.n	80023ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023da:	4b47      	ldr	r3, [pc, #284]	@ (80024f8 <HAL_RCC_ClockConfig+0x1bc>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d119      	bne.n	800241a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e07f      	b.n	80024ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d003      	beq.n	80023fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023f6:	2b03      	cmp	r3, #3
 80023f8:	d107      	bne.n	800240a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023fa:	4b3f      	ldr	r3, [pc, #252]	@ (80024f8 <HAL_RCC_ClockConfig+0x1bc>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d109      	bne.n	800241a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e06f      	b.n	80024ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800240a:	4b3b      	ldr	r3, [pc, #236]	@ (80024f8 <HAL_RCC_ClockConfig+0x1bc>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d101      	bne.n	800241a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e067      	b.n	80024ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800241a:	4b37      	ldr	r3, [pc, #220]	@ (80024f8 <HAL_RCC_ClockConfig+0x1bc>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f023 0203 	bic.w	r2, r3, #3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	4934      	ldr	r1, [pc, #208]	@ (80024f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002428:	4313      	orrs	r3, r2
 800242a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800242c:	f7ff f810 	bl	8001450 <HAL_GetTick>
 8002430:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002432:	e00a      	b.n	800244a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002434:	f7ff f80c 	bl	8001450 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002442:	4293      	cmp	r3, r2
 8002444:	d901      	bls.n	800244a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e04f      	b.n	80024ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800244a:	4b2b      	ldr	r3, [pc, #172]	@ (80024f8 <HAL_RCC_ClockConfig+0x1bc>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f003 020c 	and.w	r2, r3, #12
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	429a      	cmp	r2, r3
 800245a:	d1eb      	bne.n	8002434 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800245c:	4b25      	ldr	r3, [pc, #148]	@ (80024f4 <HAL_RCC_ClockConfig+0x1b8>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0307 	and.w	r3, r3, #7
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	429a      	cmp	r2, r3
 8002468:	d20c      	bcs.n	8002484 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800246a:	4b22      	ldr	r3, [pc, #136]	@ (80024f4 <HAL_RCC_ClockConfig+0x1b8>)
 800246c:	683a      	ldr	r2, [r7, #0]
 800246e:	b2d2      	uxtb	r2, r2
 8002470:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002472:	4b20      	ldr	r3, [pc, #128]	@ (80024f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0307 	and.w	r3, r3, #7
 800247a:	683a      	ldr	r2, [r7, #0]
 800247c:	429a      	cmp	r2, r3
 800247e:	d001      	beq.n	8002484 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e032      	b.n	80024ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0304 	and.w	r3, r3, #4
 800248c:	2b00      	cmp	r3, #0
 800248e:	d008      	beq.n	80024a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002490:	4b19      	ldr	r3, [pc, #100]	@ (80024f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	4916      	ldr	r1, [pc, #88]	@ (80024f8 <HAL_RCC_ClockConfig+0x1bc>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0308 	and.w	r3, r3, #8
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d009      	beq.n	80024c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024ae:	4b12      	ldr	r3, [pc, #72]	@ (80024f8 <HAL_RCC_ClockConfig+0x1bc>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	490e      	ldr	r1, [pc, #56]	@ (80024f8 <HAL_RCC_ClockConfig+0x1bc>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024c2:	f000 f821 	bl	8002508 <HAL_RCC_GetSysClockFreq>
 80024c6:	4602      	mov	r2, r0
 80024c8:	4b0b      	ldr	r3, [pc, #44]	@ (80024f8 <HAL_RCC_ClockConfig+0x1bc>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	091b      	lsrs	r3, r3, #4
 80024ce:	f003 030f 	and.w	r3, r3, #15
 80024d2:	490a      	ldr	r1, [pc, #40]	@ (80024fc <HAL_RCC_ClockConfig+0x1c0>)
 80024d4:	5ccb      	ldrb	r3, [r1, r3]
 80024d6:	fa22 f303 	lsr.w	r3, r2, r3
 80024da:	4a09      	ldr	r2, [pc, #36]	@ (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 80024dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80024de:	4b09      	ldr	r3, [pc, #36]	@ (8002504 <HAL_RCC_ClockConfig+0x1c8>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7fe fdfc 	bl	80010e0 <HAL_InitTick>

  return HAL_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3710      	adds	r7, #16
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	40023c00 	.word	0x40023c00
 80024f8:	40023800 	.word	0x40023800
 80024fc:	08007c28 	.word	0x08007c28
 8002500:	20000000 	.word	0x20000000
 8002504:	20000004 	.word	0x20000004

08002508 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002508:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800250c:	b090      	sub	sp, #64	@ 0x40
 800250e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002510:	2300      	movs	r3, #0
 8002512:	637b      	str	r3, [r7, #52]	@ 0x34
 8002514:	2300      	movs	r3, #0
 8002516:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002518:	2300      	movs	r3, #0
 800251a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800251c:	2300      	movs	r3, #0
 800251e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002520:	4b59      	ldr	r3, [pc, #356]	@ (8002688 <HAL_RCC_GetSysClockFreq+0x180>)
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f003 030c 	and.w	r3, r3, #12
 8002528:	2b08      	cmp	r3, #8
 800252a:	d00d      	beq.n	8002548 <HAL_RCC_GetSysClockFreq+0x40>
 800252c:	2b08      	cmp	r3, #8
 800252e:	f200 80a1 	bhi.w	8002674 <HAL_RCC_GetSysClockFreq+0x16c>
 8002532:	2b00      	cmp	r3, #0
 8002534:	d002      	beq.n	800253c <HAL_RCC_GetSysClockFreq+0x34>
 8002536:	2b04      	cmp	r3, #4
 8002538:	d003      	beq.n	8002542 <HAL_RCC_GetSysClockFreq+0x3a>
 800253a:	e09b      	b.n	8002674 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800253c:	4b53      	ldr	r3, [pc, #332]	@ (800268c <HAL_RCC_GetSysClockFreq+0x184>)
 800253e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8002540:	e09b      	b.n	800267a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002542:	4b53      	ldr	r3, [pc, #332]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x188>)
 8002544:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002546:	e098      	b.n	800267a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002548:	4b4f      	ldr	r3, [pc, #316]	@ (8002688 <HAL_RCC_GetSysClockFreq+0x180>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002550:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002552:	4b4d      	ldr	r3, [pc, #308]	@ (8002688 <HAL_RCC_GetSysClockFreq+0x180>)
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d028      	beq.n	80025b0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800255e:	4b4a      	ldr	r3, [pc, #296]	@ (8002688 <HAL_RCC_GetSysClockFreq+0x180>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	099b      	lsrs	r3, r3, #6
 8002564:	2200      	movs	r2, #0
 8002566:	623b      	str	r3, [r7, #32]
 8002568:	627a      	str	r2, [r7, #36]	@ 0x24
 800256a:	6a3b      	ldr	r3, [r7, #32]
 800256c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002570:	2100      	movs	r1, #0
 8002572:	4b47      	ldr	r3, [pc, #284]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x188>)
 8002574:	fb03 f201 	mul.w	r2, r3, r1
 8002578:	2300      	movs	r3, #0
 800257a:	fb00 f303 	mul.w	r3, r0, r3
 800257e:	4413      	add	r3, r2
 8002580:	4a43      	ldr	r2, [pc, #268]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x188>)
 8002582:	fba0 1202 	umull	r1, r2, r0, r2
 8002586:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002588:	460a      	mov	r2, r1
 800258a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800258c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800258e:	4413      	add	r3, r2
 8002590:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002592:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002594:	2200      	movs	r2, #0
 8002596:	61bb      	str	r3, [r7, #24]
 8002598:	61fa      	str	r2, [r7, #28]
 800259a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800259e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80025a2:	f7fd fe1d 	bl	80001e0 <__aeabi_uldivmod>
 80025a6:	4602      	mov	r2, r0
 80025a8:	460b      	mov	r3, r1
 80025aa:	4613      	mov	r3, r2
 80025ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80025ae:	e053      	b.n	8002658 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025b0:	4b35      	ldr	r3, [pc, #212]	@ (8002688 <HAL_RCC_GetSysClockFreq+0x180>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	099b      	lsrs	r3, r3, #6
 80025b6:	2200      	movs	r2, #0
 80025b8:	613b      	str	r3, [r7, #16]
 80025ba:	617a      	str	r2, [r7, #20]
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80025c2:	f04f 0b00 	mov.w	fp, #0
 80025c6:	4652      	mov	r2, sl
 80025c8:	465b      	mov	r3, fp
 80025ca:	f04f 0000 	mov.w	r0, #0
 80025ce:	f04f 0100 	mov.w	r1, #0
 80025d2:	0159      	lsls	r1, r3, #5
 80025d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025d8:	0150      	lsls	r0, r2, #5
 80025da:	4602      	mov	r2, r0
 80025dc:	460b      	mov	r3, r1
 80025de:	ebb2 080a 	subs.w	r8, r2, sl
 80025e2:	eb63 090b 	sbc.w	r9, r3, fp
 80025e6:	f04f 0200 	mov.w	r2, #0
 80025ea:	f04f 0300 	mov.w	r3, #0
 80025ee:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80025f2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80025f6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80025fa:	ebb2 0408 	subs.w	r4, r2, r8
 80025fe:	eb63 0509 	sbc.w	r5, r3, r9
 8002602:	f04f 0200 	mov.w	r2, #0
 8002606:	f04f 0300 	mov.w	r3, #0
 800260a:	00eb      	lsls	r3, r5, #3
 800260c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002610:	00e2      	lsls	r2, r4, #3
 8002612:	4614      	mov	r4, r2
 8002614:	461d      	mov	r5, r3
 8002616:	eb14 030a 	adds.w	r3, r4, sl
 800261a:	603b      	str	r3, [r7, #0]
 800261c:	eb45 030b 	adc.w	r3, r5, fp
 8002620:	607b      	str	r3, [r7, #4]
 8002622:	f04f 0200 	mov.w	r2, #0
 8002626:	f04f 0300 	mov.w	r3, #0
 800262a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800262e:	4629      	mov	r1, r5
 8002630:	028b      	lsls	r3, r1, #10
 8002632:	4621      	mov	r1, r4
 8002634:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002638:	4621      	mov	r1, r4
 800263a:	028a      	lsls	r2, r1, #10
 800263c:	4610      	mov	r0, r2
 800263e:	4619      	mov	r1, r3
 8002640:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002642:	2200      	movs	r2, #0
 8002644:	60bb      	str	r3, [r7, #8]
 8002646:	60fa      	str	r2, [r7, #12]
 8002648:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800264c:	f7fd fdc8 	bl	80001e0 <__aeabi_uldivmod>
 8002650:	4602      	mov	r2, r0
 8002652:	460b      	mov	r3, r1
 8002654:	4613      	mov	r3, r2
 8002656:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002658:	4b0b      	ldr	r3, [pc, #44]	@ (8002688 <HAL_RCC_GetSysClockFreq+0x180>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	0c1b      	lsrs	r3, r3, #16
 800265e:	f003 0303 	and.w	r3, r3, #3
 8002662:	3301      	adds	r3, #1
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8002668:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800266a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800266c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002670:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002672:	e002      	b.n	800267a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002674:	4b05      	ldr	r3, [pc, #20]	@ (800268c <HAL_RCC_GetSysClockFreq+0x184>)
 8002676:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002678:	bf00      	nop
    }
  }
  return sysclockfreq;
 800267a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800267c:	4618      	mov	r0, r3
 800267e:	3740      	adds	r7, #64	@ 0x40
 8002680:	46bd      	mov	sp, r7
 8002682:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002686:	bf00      	nop
 8002688:	40023800 	.word	0x40023800
 800268c:	00f42400 	.word	0x00f42400
 8002690:	017d7840 	.word	0x017d7840

08002694 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002698:	4b03      	ldr	r3, [pc, #12]	@ (80026a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800269a:	681b      	ldr	r3, [r3, #0]
}
 800269c:	4618      	mov	r0, r3
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	20000000 	.word	0x20000000

080026ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026b0:	f7ff fff0 	bl	8002694 <HAL_RCC_GetHCLKFreq>
 80026b4:	4602      	mov	r2, r0
 80026b6:	4b05      	ldr	r3, [pc, #20]	@ (80026cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	0a9b      	lsrs	r3, r3, #10
 80026bc:	f003 0307 	and.w	r3, r3, #7
 80026c0:	4903      	ldr	r1, [pc, #12]	@ (80026d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026c2:	5ccb      	ldrb	r3, [r1, r3]
 80026c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	40023800 	.word	0x40023800
 80026d0:	08007c38 	.word	0x08007c38

080026d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80026d8:	f7ff ffdc 	bl	8002694 <HAL_RCC_GetHCLKFreq>
 80026dc:	4602      	mov	r2, r0
 80026de:	4b05      	ldr	r3, [pc, #20]	@ (80026f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	0b5b      	lsrs	r3, r3, #13
 80026e4:	f003 0307 	and.w	r3, r3, #7
 80026e8:	4903      	ldr	r1, [pc, #12]	@ (80026f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026ea:	5ccb      	ldrb	r3, [r1, r3]
 80026ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	40023800 	.word	0x40023800
 80026f8:	08007c38 	.word	0x08007c38

080026fc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	220f      	movs	r2, #15
 800270a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800270c:	4b12      	ldr	r3, [pc, #72]	@ (8002758 <HAL_RCC_GetClockConfig+0x5c>)
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f003 0203 	and.w	r2, r3, #3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002718:	4b0f      	ldr	r3, [pc, #60]	@ (8002758 <HAL_RCC_GetClockConfig+0x5c>)
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002724:	4b0c      	ldr	r3, [pc, #48]	@ (8002758 <HAL_RCC_GetClockConfig+0x5c>)
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002730:	4b09      	ldr	r3, [pc, #36]	@ (8002758 <HAL_RCC_GetClockConfig+0x5c>)
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	08db      	lsrs	r3, r3, #3
 8002736:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800273e:	4b07      	ldr	r3, [pc, #28]	@ (800275c <HAL_RCC_GetClockConfig+0x60>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0207 	and.w	r2, r3, #7
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	601a      	str	r2, [r3, #0]
}
 800274a:	bf00      	nop
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	40023800 	.word	0x40023800
 800275c:	40023c00 	.word	0x40023c00

08002760 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e041      	b.n	80027f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d106      	bne.n	800278c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f000 f839 	bl	80027fe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2202      	movs	r2, #2
 8002790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	3304      	adds	r3, #4
 800279c:	4619      	mov	r1, r3
 800279e:	4610      	mov	r0, r2
 80027a0:	f000 fb74 	bl	8002e8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80027fe:	b480      	push	{r7}
 8002800:	b083      	sub	sp, #12
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002806:	bf00      	nop
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
	...

08002814 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002814:	b480      	push	{r7}
 8002816:	b085      	sub	sp, #20
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002822:	b2db      	uxtb	r3, r3
 8002824:	2b01      	cmp	r3, #1
 8002826:	d001      	beq.n	800282c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e044      	b.n	80028b6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2202      	movs	r2, #2
 8002830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	68da      	ldr	r2, [r3, #12]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f042 0201 	orr.w	r2, r2, #1
 8002842:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a1e      	ldr	r2, [pc, #120]	@ (80028c4 <HAL_TIM_Base_Start_IT+0xb0>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d018      	beq.n	8002880 <HAL_TIM_Base_Start_IT+0x6c>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002856:	d013      	beq.n	8002880 <HAL_TIM_Base_Start_IT+0x6c>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a1a      	ldr	r2, [pc, #104]	@ (80028c8 <HAL_TIM_Base_Start_IT+0xb4>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d00e      	beq.n	8002880 <HAL_TIM_Base_Start_IT+0x6c>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a19      	ldr	r2, [pc, #100]	@ (80028cc <HAL_TIM_Base_Start_IT+0xb8>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d009      	beq.n	8002880 <HAL_TIM_Base_Start_IT+0x6c>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a17      	ldr	r2, [pc, #92]	@ (80028d0 <HAL_TIM_Base_Start_IT+0xbc>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d004      	beq.n	8002880 <HAL_TIM_Base_Start_IT+0x6c>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a16      	ldr	r2, [pc, #88]	@ (80028d4 <HAL_TIM_Base_Start_IT+0xc0>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d111      	bne.n	80028a4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f003 0307 	and.w	r3, r3, #7
 800288a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2b06      	cmp	r3, #6
 8002890:	d010      	beq.n	80028b4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f042 0201 	orr.w	r2, r2, #1
 80028a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028a2:	e007      	b.n	80028b4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f042 0201 	orr.w	r2, r2, #1
 80028b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3714      	adds	r7, #20
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	40010000 	.word	0x40010000
 80028c8:	40000400 	.word	0x40000400
 80028cc:	40000800 	.word	0x40000800
 80028d0:	40000c00 	.word	0x40000c00
 80028d4:	40014000 	.word	0x40014000

080028d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e041      	b.n	800296e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d106      	bne.n	8002904 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f7fe fb28 	bl	8000f54 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2202      	movs	r2, #2
 8002908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	3304      	adds	r3, #4
 8002914:	4619      	mov	r1, r3
 8002916:	4610      	mov	r0, r2
 8002918:	f000 fab8 	bl	8002e8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
	...

08002978 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d109      	bne.n	800299c <HAL_TIM_PWM_Start+0x24>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800298e:	b2db      	uxtb	r3, r3
 8002990:	2b01      	cmp	r3, #1
 8002992:	bf14      	ite	ne
 8002994:	2301      	movne	r3, #1
 8002996:	2300      	moveq	r3, #0
 8002998:	b2db      	uxtb	r3, r3
 800299a:	e022      	b.n	80029e2 <HAL_TIM_PWM_Start+0x6a>
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	2b04      	cmp	r3, #4
 80029a0:	d109      	bne.n	80029b6 <HAL_TIM_PWM_Start+0x3e>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	bf14      	ite	ne
 80029ae:	2301      	movne	r3, #1
 80029b0:	2300      	moveq	r3, #0
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	e015      	b.n	80029e2 <HAL_TIM_PWM_Start+0x6a>
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	2b08      	cmp	r3, #8
 80029ba:	d109      	bne.n	80029d0 <HAL_TIM_PWM_Start+0x58>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	bf14      	ite	ne
 80029c8:	2301      	movne	r3, #1
 80029ca:	2300      	moveq	r3, #0
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	e008      	b.n	80029e2 <HAL_TIM_PWM_Start+0x6a>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	2b01      	cmp	r3, #1
 80029da:	bf14      	ite	ne
 80029dc:	2301      	movne	r3, #1
 80029de:	2300      	moveq	r3, #0
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e068      	b.n	8002abc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d104      	bne.n	80029fa <HAL_TIM_PWM_Start+0x82>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2202      	movs	r2, #2
 80029f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029f8:	e013      	b.n	8002a22 <HAL_TIM_PWM_Start+0xaa>
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	2b04      	cmp	r3, #4
 80029fe:	d104      	bne.n	8002a0a <HAL_TIM_PWM_Start+0x92>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2202      	movs	r2, #2
 8002a04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a08:	e00b      	b.n	8002a22 <HAL_TIM_PWM_Start+0xaa>
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	2b08      	cmp	r3, #8
 8002a0e:	d104      	bne.n	8002a1a <HAL_TIM_PWM_Start+0xa2>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2202      	movs	r2, #2
 8002a14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a18:	e003      	b.n	8002a22 <HAL_TIM_PWM_Start+0xaa>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2202      	movs	r2, #2
 8002a1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2201      	movs	r2, #1
 8002a28:	6839      	ldr	r1, [r7, #0]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f000 fc46 	bl	80032bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a23      	ldr	r2, [pc, #140]	@ (8002ac4 <HAL_TIM_PWM_Start+0x14c>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d107      	bne.n	8002a4a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a48:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a1d      	ldr	r2, [pc, #116]	@ (8002ac4 <HAL_TIM_PWM_Start+0x14c>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d018      	beq.n	8002a86 <HAL_TIM_PWM_Start+0x10e>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a5c:	d013      	beq.n	8002a86 <HAL_TIM_PWM_Start+0x10e>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a19      	ldr	r2, [pc, #100]	@ (8002ac8 <HAL_TIM_PWM_Start+0x150>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d00e      	beq.n	8002a86 <HAL_TIM_PWM_Start+0x10e>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a17      	ldr	r2, [pc, #92]	@ (8002acc <HAL_TIM_PWM_Start+0x154>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d009      	beq.n	8002a86 <HAL_TIM_PWM_Start+0x10e>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a16      	ldr	r2, [pc, #88]	@ (8002ad0 <HAL_TIM_PWM_Start+0x158>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d004      	beq.n	8002a86 <HAL_TIM_PWM_Start+0x10e>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a14      	ldr	r2, [pc, #80]	@ (8002ad4 <HAL_TIM_PWM_Start+0x15c>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d111      	bne.n	8002aaa <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f003 0307 	and.w	r3, r3, #7
 8002a90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2b06      	cmp	r3, #6
 8002a96:	d010      	beq.n	8002aba <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f042 0201 	orr.w	r2, r2, #1
 8002aa6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aa8:	e007      	b.n	8002aba <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f042 0201 	orr.w	r2, r2, #1
 8002ab8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002aba:	2300      	movs	r3, #0
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3710      	adds	r7, #16
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	40010000 	.word	0x40010000
 8002ac8:	40000400 	.word	0x40000400
 8002acc:	40000800 	.word	0x40000800
 8002ad0:	40000c00 	.word	0x40000c00
 8002ad4:	40014000 	.word	0x40014000

08002ad8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d020      	beq.n	8002b3c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f003 0302 	and.w	r3, r3, #2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d01b      	beq.n	8002b3c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f06f 0202 	mvn.w	r2, #2
 8002b0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2201      	movs	r2, #1
 8002b12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	f003 0303 	and.w	r3, r3, #3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d003      	beq.n	8002b2a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 f994 	bl	8002e50 <HAL_TIM_IC_CaptureCallback>
 8002b28:	e005      	b.n	8002b36 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 f986 	bl	8002e3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f000 f997 	bl	8002e64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	f003 0304 	and.w	r3, r3, #4
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d020      	beq.n	8002b88 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f003 0304 	and.w	r3, r3, #4
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d01b      	beq.n	8002b88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f06f 0204 	mvn.w	r2, #4
 8002b58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2202      	movs	r2, #2
 8002b5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d003      	beq.n	8002b76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 f96e 	bl	8002e50 <HAL_TIM_IC_CaptureCallback>
 8002b74:	e005      	b.n	8002b82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 f960 	bl	8002e3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f000 f971 	bl	8002e64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	f003 0308 	and.w	r3, r3, #8
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d020      	beq.n	8002bd4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f003 0308 	and.w	r3, r3, #8
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d01b      	beq.n	8002bd4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f06f 0208 	mvn.w	r2, #8
 8002ba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2204      	movs	r2, #4
 8002baa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	69db      	ldr	r3, [r3, #28]
 8002bb2:	f003 0303 	and.w	r3, r3, #3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d003      	beq.n	8002bc2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 f948 	bl	8002e50 <HAL_TIM_IC_CaptureCallback>
 8002bc0:	e005      	b.n	8002bce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 f93a 	bl	8002e3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f000 f94b 	bl	8002e64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	f003 0310 	and.w	r3, r3, #16
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d020      	beq.n	8002c20 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f003 0310 	and.w	r3, r3, #16
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d01b      	beq.n	8002c20 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f06f 0210 	mvn.w	r2, #16
 8002bf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2208      	movs	r2, #8
 8002bf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	69db      	ldr	r3, [r3, #28]
 8002bfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d003      	beq.n	8002c0e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f000 f922 	bl	8002e50 <HAL_TIM_IC_CaptureCallback>
 8002c0c:	e005      	b.n	8002c1a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 f914 	bl	8002e3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f000 f925 	bl	8002e64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	f003 0301 	and.w	r3, r3, #1
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d00c      	beq.n	8002c44 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f003 0301 	and.w	r3, r3, #1
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d007      	beq.n	8002c44 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f06f 0201 	mvn.w	r2, #1
 8002c3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f7fd ff2e 	bl	8000aa0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00c      	beq.n	8002c68 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d007      	beq.n	8002c68 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 fc1a 	bl	800349c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00c      	beq.n	8002c8c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d007      	beq.n	8002c8c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002c84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 f8f6 	bl	8002e78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	f003 0320 	and.w	r3, r3, #32
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d00c      	beq.n	8002cb0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f003 0320 	and.w	r3, r3, #32
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d007      	beq.n	8002cb0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f06f 0220 	mvn.w	r2, #32
 8002ca8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 fbec 	bl	8003488 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cb0:	bf00      	nop
 8002cb2:	3710      	adds	r7, #16
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b086      	sub	sp, #24
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d101      	bne.n	8002cd6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	e0ae      	b.n	8002e34 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2b0c      	cmp	r3, #12
 8002ce2:	f200 809f 	bhi.w	8002e24 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002ce6:	a201      	add	r2, pc, #4	@ (adr r2, 8002cec <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cec:	08002d21 	.word	0x08002d21
 8002cf0:	08002e25 	.word	0x08002e25
 8002cf4:	08002e25 	.word	0x08002e25
 8002cf8:	08002e25 	.word	0x08002e25
 8002cfc:	08002d61 	.word	0x08002d61
 8002d00:	08002e25 	.word	0x08002e25
 8002d04:	08002e25 	.word	0x08002e25
 8002d08:	08002e25 	.word	0x08002e25
 8002d0c:	08002da3 	.word	0x08002da3
 8002d10:	08002e25 	.word	0x08002e25
 8002d14:	08002e25 	.word	0x08002e25
 8002d18:	08002e25 	.word	0x08002e25
 8002d1c:	08002de3 	.word	0x08002de3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	68b9      	ldr	r1, [r7, #8]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f000 f93c 	bl	8002fa4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	699a      	ldr	r2, [r3, #24]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f042 0208 	orr.w	r2, r2, #8
 8002d3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	699a      	ldr	r2, [r3, #24]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f022 0204 	bic.w	r2, r2, #4
 8002d4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	6999      	ldr	r1, [r3, #24]
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	691a      	ldr	r2, [r3, #16]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	619a      	str	r2, [r3, #24]
      break;
 8002d5e:	e064      	b.n	8002e2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68b9      	ldr	r1, [r7, #8]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f000 f982 	bl	8003070 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	699a      	ldr	r2, [r3, #24]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	699a      	ldr	r2, [r3, #24]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	6999      	ldr	r1, [r3, #24]
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	021a      	lsls	r2, r3, #8
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	619a      	str	r2, [r3, #24]
      break;
 8002da0:	e043      	b.n	8002e2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68b9      	ldr	r1, [r7, #8]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f000 f9cd 	bl	8003148 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	69da      	ldr	r2, [r3, #28]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f042 0208 	orr.w	r2, r2, #8
 8002dbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	69da      	ldr	r2, [r3, #28]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 0204 	bic.w	r2, r2, #4
 8002dcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	69d9      	ldr	r1, [r3, #28]
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	691a      	ldr	r2, [r3, #16]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	430a      	orrs	r2, r1
 8002dde:	61da      	str	r2, [r3, #28]
      break;
 8002de0:	e023      	b.n	8002e2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68b9      	ldr	r1, [r7, #8]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f000 fa17 	bl	800321c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	69da      	ldr	r2, [r3, #28]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002dfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	69da      	ldr	r2, [r3, #28]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	69d9      	ldr	r1, [r3, #28]
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	691b      	ldr	r3, [r3, #16]
 8002e18:	021a      	lsls	r2, r3, #8
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	61da      	str	r2, [r3, #28]
      break;
 8002e22:	e002      	b.n	8002e2a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	75fb      	strb	r3, [r7, #23]
      break;
 8002e28:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002e32:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3718      	adds	r7, #24
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e44:	bf00      	nop
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e58:	bf00      	nop
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e6c:	bf00      	nop
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b085      	sub	sp, #20
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4a3a      	ldr	r2, [pc, #232]	@ (8002f88 <TIM_Base_SetConfig+0xfc>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d00f      	beq.n	8002ec4 <TIM_Base_SetConfig+0x38>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002eaa:	d00b      	beq.n	8002ec4 <TIM_Base_SetConfig+0x38>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a37      	ldr	r2, [pc, #220]	@ (8002f8c <TIM_Base_SetConfig+0x100>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d007      	beq.n	8002ec4 <TIM_Base_SetConfig+0x38>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4a36      	ldr	r2, [pc, #216]	@ (8002f90 <TIM_Base_SetConfig+0x104>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d003      	beq.n	8002ec4 <TIM_Base_SetConfig+0x38>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4a35      	ldr	r2, [pc, #212]	@ (8002f94 <TIM_Base_SetConfig+0x108>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d108      	bne.n	8002ed6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002eca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	68fa      	ldr	r2, [r7, #12]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a2b      	ldr	r2, [pc, #172]	@ (8002f88 <TIM_Base_SetConfig+0xfc>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d01b      	beq.n	8002f16 <TIM_Base_SetConfig+0x8a>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ee4:	d017      	beq.n	8002f16 <TIM_Base_SetConfig+0x8a>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a28      	ldr	r2, [pc, #160]	@ (8002f8c <TIM_Base_SetConfig+0x100>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d013      	beq.n	8002f16 <TIM_Base_SetConfig+0x8a>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a27      	ldr	r2, [pc, #156]	@ (8002f90 <TIM_Base_SetConfig+0x104>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d00f      	beq.n	8002f16 <TIM_Base_SetConfig+0x8a>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a26      	ldr	r2, [pc, #152]	@ (8002f94 <TIM_Base_SetConfig+0x108>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d00b      	beq.n	8002f16 <TIM_Base_SetConfig+0x8a>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a25      	ldr	r2, [pc, #148]	@ (8002f98 <TIM_Base_SetConfig+0x10c>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d007      	beq.n	8002f16 <TIM_Base_SetConfig+0x8a>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a24      	ldr	r2, [pc, #144]	@ (8002f9c <TIM_Base_SetConfig+0x110>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d003      	beq.n	8002f16 <TIM_Base_SetConfig+0x8a>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a23      	ldr	r2, [pc, #140]	@ (8002fa0 <TIM_Base_SetConfig+0x114>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d108      	bne.n	8002f28 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	695b      	ldr	r3, [r3, #20]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	68fa      	ldr	r2, [r7, #12]
 8002f3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	689a      	ldr	r2, [r3, #8]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a0e      	ldr	r2, [pc, #56]	@ (8002f88 <TIM_Base_SetConfig+0xfc>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d103      	bne.n	8002f5c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	691a      	ldr	r2, [r3, #16]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d105      	bne.n	8002f7a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	f023 0201 	bic.w	r2, r3, #1
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	611a      	str	r2, [r3, #16]
  }
}
 8002f7a:	bf00      	nop
 8002f7c:	3714      	adds	r7, #20
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	40010000 	.word	0x40010000
 8002f8c:	40000400 	.word	0x40000400
 8002f90:	40000800 	.word	0x40000800
 8002f94:	40000c00 	.word	0x40000c00
 8002f98:	40014000 	.word	0x40014000
 8002f9c:	40014400 	.word	0x40014400
 8002fa0:	40014800 	.word	0x40014800

08002fa4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b087      	sub	sp, #28
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a1b      	ldr	r3, [r3, #32]
 8002fb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
 8002fb8:	f023 0201 	bic.w	r2, r3, #1
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	699b      	ldr	r3, [r3, #24]
 8002fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f023 0303 	bic.w	r3, r3, #3
 8002fda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68fa      	ldr	r2, [r7, #12]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	f023 0302 	bic.w	r3, r3, #2
 8002fec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	697a      	ldr	r2, [r7, #20]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a1c      	ldr	r2, [pc, #112]	@ (800306c <TIM_OC1_SetConfig+0xc8>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d10c      	bne.n	800301a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	f023 0308 	bic.w	r3, r3, #8
 8003006:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	697a      	ldr	r2, [r7, #20]
 800300e:	4313      	orrs	r3, r2
 8003010:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	f023 0304 	bic.w	r3, r3, #4
 8003018:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a13      	ldr	r2, [pc, #76]	@ (800306c <TIM_OC1_SetConfig+0xc8>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d111      	bne.n	8003046 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003028:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003030:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	4313      	orrs	r3, r2
 800303a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	693a      	ldr	r2, [r7, #16]
 8003042:	4313      	orrs	r3, r2
 8003044:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	685a      	ldr	r2, [r3, #4]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	697a      	ldr	r2, [r7, #20]
 800305e:	621a      	str	r2, [r3, #32]
}
 8003060:	bf00      	nop
 8003062:	371c      	adds	r7, #28
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr
 800306c:	40010000 	.word	0x40010000

08003070 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003070:	b480      	push	{r7}
 8003072:	b087      	sub	sp, #28
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a1b      	ldr	r3, [r3, #32]
 800307e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a1b      	ldr	r3, [r3, #32]
 8003084:	f023 0210 	bic.w	r2, r3, #16
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800309e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	021b      	lsls	r3, r3, #8
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	f023 0320 	bic.w	r3, r3, #32
 80030ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	011b      	lsls	r3, r3, #4
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4a1e      	ldr	r2, [pc, #120]	@ (8003144 <TIM_OC2_SetConfig+0xd4>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d10d      	bne.n	80030ec <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80030d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	011b      	lsls	r3, r3, #4
 80030de:	697a      	ldr	r2, [r7, #20]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80030ea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a15      	ldr	r2, [pc, #84]	@ (8003144 <TIM_OC2_SetConfig+0xd4>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d113      	bne.n	800311c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80030fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003102:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	695b      	ldr	r3, [r3, #20]
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	693a      	ldr	r2, [r7, #16]
 800310c:	4313      	orrs	r3, r2
 800310e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	4313      	orrs	r3, r2
 800311a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685a      	ldr	r2, [r3, #4]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	697a      	ldr	r2, [r7, #20]
 8003134:	621a      	str	r2, [r3, #32]
}
 8003136:	bf00      	nop
 8003138:	371c      	adds	r7, #28
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	40010000 	.word	0x40010000

08003148 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003148:	b480      	push	{r7}
 800314a:	b087      	sub	sp, #28
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a1b      	ldr	r3, [r3, #32]
 8003156:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a1b      	ldr	r3, [r3, #32]
 800315c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	69db      	ldr	r3, [r3, #28]
 800316e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003176:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f023 0303 	bic.w	r3, r3, #3
 800317e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	4313      	orrs	r3, r2
 8003188:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003190:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	021b      	lsls	r3, r3, #8
 8003198:	697a      	ldr	r2, [r7, #20]
 800319a:	4313      	orrs	r3, r2
 800319c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a1d      	ldr	r2, [pc, #116]	@ (8003218 <TIM_OC3_SetConfig+0xd0>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d10d      	bne.n	80031c2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80031ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	021b      	lsls	r3, r3, #8
 80031b4:	697a      	ldr	r2, [r7, #20]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80031c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a14      	ldr	r2, [pc, #80]	@ (8003218 <TIM_OC3_SetConfig+0xd0>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d113      	bne.n	80031f2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80031d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80031d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	011b      	lsls	r3, r3, #4
 80031e0:	693a      	ldr	r2, [r7, #16]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	011b      	lsls	r3, r3, #4
 80031ec:	693a      	ldr	r2, [r7, #16]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	68fa      	ldr	r2, [r7, #12]
 80031fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	685a      	ldr	r2, [r3, #4]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	697a      	ldr	r2, [r7, #20]
 800320a:	621a      	str	r2, [r3, #32]
}
 800320c:	bf00      	nop
 800320e:	371c      	adds	r7, #28
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr
 8003218:	40010000 	.word	0x40010000

0800321c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800321c:	b480      	push	{r7}
 800321e:	b087      	sub	sp, #28
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a1b      	ldr	r3, [r3, #32]
 800322a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a1b      	ldr	r3, [r3, #32]
 8003230:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	69db      	ldr	r3, [r3, #28]
 8003242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800324a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003252:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	021b      	lsls	r3, r3, #8
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	4313      	orrs	r3, r2
 800325e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003266:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	031b      	lsls	r3, r3, #12
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	4313      	orrs	r3, r2
 8003272:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	4a10      	ldr	r2, [pc, #64]	@ (80032b8 <TIM_OC4_SetConfig+0x9c>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d109      	bne.n	8003290 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003282:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	695b      	ldr	r3, [r3, #20]
 8003288:	019b      	lsls	r3, r3, #6
 800328a:	697a      	ldr	r2, [r7, #20]
 800328c:	4313      	orrs	r3, r2
 800328e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	697a      	ldr	r2, [r7, #20]
 8003294:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685a      	ldr	r2, [r3, #4]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	693a      	ldr	r2, [r7, #16]
 80032a8:	621a      	str	r2, [r3, #32]
}
 80032aa:	bf00      	nop
 80032ac:	371c      	adds	r7, #28
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	40010000 	.word	0x40010000

080032bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80032bc:	b480      	push	{r7}
 80032be:	b087      	sub	sp, #28
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	60b9      	str	r1, [r7, #8]
 80032c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	f003 031f 	and.w	r3, r3, #31
 80032ce:	2201      	movs	r2, #1
 80032d0:	fa02 f303 	lsl.w	r3, r2, r3
 80032d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6a1a      	ldr	r2, [r3, #32]
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	43db      	mvns	r3, r3
 80032de:	401a      	ands	r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6a1a      	ldr	r2, [r3, #32]
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	f003 031f 	and.w	r3, r3, #31
 80032ee:	6879      	ldr	r1, [r7, #4]
 80032f0:	fa01 f303 	lsl.w	r3, r1, r3
 80032f4:	431a      	orrs	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	621a      	str	r2, [r3, #32]
}
 80032fa:	bf00      	nop
 80032fc:	371c      	adds	r7, #28
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
	...

08003308 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003318:	2b01      	cmp	r3, #1
 800331a:	d101      	bne.n	8003320 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800331c:	2302      	movs	r3, #2
 800331e:	e050      	b.n	80033c2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2202      	movs	r2, #2
 800332c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003346:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	68fa      	ldr	r2, [r7, #12]
 800334e:	4313      	orrs	r3, r2
 8003350:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a1c      	ldr	r2, [pc, #112]	@ (80033d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d018      	beq.n	8003396 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800336c:	d013      	beq.n	8003396 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a18      	ldr	r2, [pc, #96]	@ (80033d4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d00e      	beq.n	8003396 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a16      	ldr	r2, [pc, #88]	@ (80033d8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d009      	beq.n	8003396 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a15      	ldr	r2, [pc, #84]	@ (80033dc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d004      	beq.n	8003396 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a13      	ldr	r2, [pc, #76]	@ (80033e0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d10c      	bne.n	80033b0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800339c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	68ba      	ldr	r2, [r7, #8]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68ba      	ldr	r2, [r7, #8]
 80033ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3714      	adds	r7, #20
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	40010000 	.word	0x40010000
 80033d4:	40000400 	.word	0x40000400
 80033d8:	40000800 	.word	0x40000800
 80033dc:	40000c00 	.word	0x40000c00
 80033e0:	40014000 	.word	0x40014000

080033e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b085      	sub	sp, #20
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80033ee:	2300      	movs	r3, #0
 80033f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d101      	bne.n	8003400 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80033fc:	2302      	movs	r3, #2
 80033fe:	e03d      	b.n	800347c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	4313      	orrs	r3, r2
 8003414:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	4313      	orrs	r3, r2
 8003422:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	4313      	orrs	r3, r2
 8003430:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4313      	orrs	r3, r2
 800343e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	4313      	orrs	r3, r2
 800344c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	695b      	ldr	r3, [r3, #20]
 8003458:	4313      	orrs	r3, r2
 800345a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	69db      	ldr	r3, [r3, #28]
 8003466:	4313      	orrs	r3, r2
 8003468:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800347a:	2300      	movs	r3, #0
}
 800347c:	4618      	mov	r0, r3
 800347e:	3714      	adds	r7, #20
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e042      	b.n	8003548 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d106      	bne.n	80034dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f7fd fdba 	bl	8001050 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2224      	movs	r2, #36	@ 0x24
 80034e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68da      	ldr	r2, [r3, #12]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80034f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f000 f973 	bl	80037e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	691a      	ldr	r2, [r3, #16]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003508:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	695a      	ldr	r2, [r3, #20]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003518:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68da      	ldr	r2, [r3, #12]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003528:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2220      	movs	r2, #32
 8003534:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2220      	movs	r2, #32
 800353c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003546:	2300      	movs	r3, #0
}
 8003548:	4618      	mov	r0, r3
 800354a:	3708      	adds	r7, #8
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b08a      	sub	sp, #40	@ 0x28
 8003554:	af02      	add	r7, sp, #8
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	603b      	str	r3, [r7, #0]
 800355c:	4613      	mov	r3, r2
 800355e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003560:	2300      	movs	r3, #0
 8003562:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800356a:	b2db      	uxtb	r3, r3
 800356c:	2b20      	cmp	r3, #32
 800356e:	d175      	bne.n	800365c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d002      	beq.n	800357c <HAL_UART_Transmit+0x2c>
 8003576:	88fb      	ldrh	r3, [r7, #6]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d101      	bne.n	8003580 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e06e      	b.n	800365e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2200      	movs	r2, #0
 8003584:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2221      	movs	r2, #33	@ 0x21
 800358a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800358e:	f7fd ff5f 	bl	8001450 <HAL_GetTick>
 8003592:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	88fa      	ldrh	r2, [r7, #6]
 8003598:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	88fa      	ldrh	r2, [r7, #6]
 800359e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035a8:	d108      	bne.n	80035bc <HAL_UART_Transmit+0x6c>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d104      	bne.n	80035bc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80035b2:	2300      	movs	r3, #0
 80035b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	61bb      	str	r3, [r7, #24]
 80035ba:	e003      	b.n	80035c4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035c0:	2300      	movs	r3, #0
 80035c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80035c4:	e02e      	b.n	8003624 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	9300      	str	r3, [sp, #0]
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	2200      	movs	r2, #0
 80035ce:	2180      	movs	r1, #128	@ 0x80
 80035d0:	68f8      	ldr	r0, [r7, #12]
 80035d2:	f000 f848 	bl	8003666 <UART_WaitOnFlagUntilTimeout>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d005      	beq.n	80035e8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2220      	movs	r2, #32
 80035e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e03a      	b.n	800365e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d10b      	bne.n	8003606 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	881b      	ldrh	r3, [r3, #0]
 80035f2:	461a      	mov	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	3302      	adds	r3, #2
 8003602:	61bb      	str	r3, [r7, #24]
 8003604:	e007      	b.n	8003616 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	781a      	ldrb	r2, [r3, #0]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	3301      	adds	r3, #1
 8003614:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800361a:	b29b      	uxth	r3, r3
 800361c:	3b01      	subs	r3, #1
 800361e:	b29a      	uxth	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003628:	b29b      	uxth	r3, r3
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1cb      	bne.n	80035c6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	9300      	str	r3, [sp, #0]
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	2200      	movs	r2, #0
 8003636:	2140      	movs	r1, #64	@ 0x40
 8003638:	68f8      	ldr	r0, [r7, #12]
 800363a:	f000 f814 	bl	8003666 <UART_WaitOnFlagUntilTimeout>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d005      	beq.n	8003650 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2220      	movs	r2, #32
 8003648:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e006      	b.n	800365e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2220      	movs	r2, #32
 8003654:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003658:	2300      	movs	r3, #0
 800365a:	e000      	b.n	800365e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800365c:	2302      	movs	r3, #2
  }
}
 800365e:	4618      	mov	r0, r3
 8003660:	3720      	adds	r7, #32
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}

08003666 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b086      	sub	sp, #24
 800366a:	af00      	add	r7, sp, #0
 800366c:	60f8      	str	r0, [r7, #12]
 800366e:	60b9      	str	r1, [r7, #8]
 8003670:	603b      	str	r3, [r7, #0]
 8003672:	4613      	mov	r3, r2
 8003674:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003676:	e03b      	b.n	80036f0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003678:	6a3b      	ldr	r3, [r7, #32]
 800367a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800367e:	d037      	beq.n	80036f0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003680:	f7fd fee6 	bl	8001450 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	6a3a      	ldr	r2, [r7, #32]
 800368c:	429a      	cmp	r2, r3
 800368e:	d302      	bcc.n	8003696 <UART_WaitOnFlagUntilTimeout+0x30>
 8003690:	6a3b      	ldr	r3, [r7, #32]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d101      	bne.n	800369a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e03a      	b.n	8003710 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	f003 0304 	and.w	r3, r3, #4
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d023      	beq.n	80036f0 <UART_WaitOnFlagUntilTimeout+0x8a>
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	2b80      	cmp	r3, #128	@ 0x80
 80036ac:	d020      	beq.n	80036f0 <UART_WaitOnFlagUntilTimeout+0x8a>
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	2b40      	cmp	r3, #64	@ 0x40
 80036b2:	d01d      	beq.n	80036f0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0308 	and.w	r3, r3, #8
 80036be:	2b08      	cmp	r3, #8
 80036c0:	d116      	bne.n	80036f0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80036c2:	2300      	movs	r3, #0
 80036c4:	617b      	str	r3, [r7, #20]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	617b      	str	r3, [r7, #20]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	617b      	str	r3, [r7, #20]
 80036d6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80036d8:	68f8      	ldr	r0, [r7, #12]
 80036da:	f000 f81d 	bl	8003718 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2208      	movs	r2, #8
 80036e2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e00f      	b.n	8003710 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	4013      	ands	r3, r2
 80036fa:	68ba      	ldr	r2, [r7, #8]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	bf0c      	ite	eq
 8003700:	2301      	moveq	r3, #1
 8003702:	2300      	movne	r3, #0
 8003704:	b2db      	uxtb	r3, r3
 8003706:	461a      	mov	r2, r3
 8003708:	79fb      	ldrb	r3, [r7, #7]
 800370a:	429a      	cmp	r2, r3
 800370c:	d0b4      	beq.n	8003678 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	3718      	adds	r7, #24
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003718:	b480      	push	{r7}
 800371a:	b095      	sub	sp, #84	@ 0x54
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	330c      	adds	r3, #12
 8003726:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003728:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800372a:	e853 3f00 	ldrex	r3, [r3]
 800372e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003732:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003736:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	330c      	adds	r3, #12
 800373e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003740:	643a      	str	r2, [r7, #64]	@ 0x40
 8003742:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003744:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003746:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003748:	e841 2300 	strex	r3, r2, [r1]
 800374c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800374e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1e5      	bne.n	8003720 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	3314      	adds	r3, #20
 800375a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800375c:	6a3b      	ldr	r3, [r7, #32]
 800375e:	e853 3f00 	ldrex	r3, [r3]
 8003762:	61fb      	str	r3, [r7, #28]
   return(result);
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	f023 0301 	bic.w	r3, r3, #1
 800376a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	3314      	adds	r3, #20
 8003772:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003774:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003776:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003778:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800377a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800377c:	e841 2300 	strex	r3, r2, [r1]
 8003780:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003784:	2b00      	cmp	r3, #0
 8003786:	d1e5      	bne.n	8003754 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800378c:	2b01      	cmp	r3, #1
 800378e:	d119      	bne.n	80037c4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	330c      	adds	r3, #12
 8003796:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	e853 3f00 	ldrex	r3, [r3]
 800379e:	60bb      	str	r3, [r7, #8]
   return(result);
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	f023 0310 	bic.w	r3, r3, #16
 80037a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	330c      	adds	r3, #12
 80037ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80037b0:	61ba      	str	r2, [r7, #24]
 80037b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b4:	6979      	ldr	r1, [r7, #20]
 80037b6:	69ba      	ldr	r2, [r7, #24]
 80037b8:	e841 2300 	strex	r3, r2, [r1]
 80037bc:	613b      	str	r3, [r7, #16]
   return(result);
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d1e5      	bne.n	8003790 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2220      	movs	r2, #32
 80037c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80037d2:	bf00      	nop
 80037d4:	3754      	adds	r7, #84	@ 0x54
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
	...

080037e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037e4:	b0c0      	sub	sp, #256	@ 0x100
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	691b      	ldr	r3, [r3, #16]
 80037f4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80037f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037fc:	68d9      	ldr	r1, [r3, #12]
 80037fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	ea40 0301 	orr.w	r3, r0, r1
 8003808:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800380a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800380e:	689a      	ldr	r2, [r3, #8]
 8003810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	431a      	orrs	r2, r3
 8003818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	431a      	orrs	r2, r3
 8003820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003824:	69db      	ldr	r3, [r3, #28]
 8003826:	4313      	orrs	r3, r2
 8003828:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800382c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003838:	f021 010c 	bic.w	r1, r1, #12
 800383c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003846:	430b      	orrs	r3, r1
 8003848:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800384a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800385a:	6999      	ldr	r1, [r3, #24]
 800385c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	ea40 0301 	orr.w	r3, r0, r1
 8003866:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	4b8f      	ldr	r3, [pc, #572]	@ (8003aac <UART_SetConfig+0x2cc>)
 8003870:	429a      	cmp	r2, r3
 8003872:	d005      	beq.n	8003880 <UART_SetConfig+0xa0>
 8003874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	4b8d      	ldr	r3, [pc, #564]	@ (8003ab0 <UART_SetConfig+0x2d0>)
 800387c:	429a      	cmp	r2, r3
 800387e:	d104      	bne.n	800388a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003880:	f7fe ff28 	bl	80026d4 <HAL_RCC_GetPCLK2Freq>
 8003884:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003888:	e003      	b.n	8003892 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800388a:	f7fe ff0f 	bl	80026ac <HAL_RCC_GetPCLK1Freq>
 800388e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003896:	69db      	ldr	r3, [r3, #28]
 8003898:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800389c:	f040 810c 	bne.w	8003ab8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80038a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038a4:	2200      	movs	r2, #0
 80038a6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80038aa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80038ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80038b2:	4622      	mov	r2, r4
 80038b4:	462b      	mov	r3, r5
 80038b6:	1891      	adds	r1, r2, r2
 80038b8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80038ba:	415b      	adcs	r3, r3
 80038bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80038be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80038c2:	4621      	mov	r1, r4
 80038c4:	eb12 0801 	adds.w	r8, r2, r1
 80038c8:	4629      	mov	r1, r5
 80038ca:	eb43 0901 	adc.w	r9, r3, r1
 80038ce:	f04f 0200 	mov.w	r2, #0
 80038d2:	f04f 0300 	mov.w	r3, #0
 80038d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038e2:	4690      	mov	r8, r2
 80038e4:	4699      	mov	r9, r3
 80038e6:	4623      	mov	r3, r4
 80038e8:	eb18 0303 	adds.w	r3, r8, r3
 80038ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80038f0:	462b      	mov	r3, r5
 80038f2:	eb49 0303 	adc.w	r3, r9, r3
 80038f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80038fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003906:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800390a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800390e:	460b      	mov	r3, r1
 8003910:	18db      	adds	r3, r3, r3
 8003912:	653b      	str	r3, [r7, #80]	@ 0x50
 8003914:	4613      	mov	r3, r2
 8003916:	eb42 0303 	adc.w	r3, r2, r3
 800391a:	657b      	str	r3, [r7, #84]	@ 0x54
 800391c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003920:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003924:	f7fc fc5c 	bl	80001e0 <__aeabi_uldivmod>
 8003928:	4602      	mov	r2, r0
 800392a:	460b      	mov	r3, r1
 800392c:	4b61      	ldr	r3, [pc, #388]	@ (8003ab4 <UART_SetConfig+0x2d4>)
 800392e:	fba3 2302 	umull	r2, r3, r3, r2
 8003932:	095b      	lsrs	r3, r3, #5
 8003934:	011c      	lsls	r4, r3, #4
 8003936:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800393a:	2200      	movs	r2, #0
 800393c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003940:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003944:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003948:	4642      	mov	r2, r8
 800394a:	464b      	mov	r3, r9
 800394c:	1891      	adds	r1, r2, r2
 800394e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003950:	415b      	adcs	r3, r3
 8003952:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003954:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003958:	4641      	mov	r1, r8
 800395a:	eb12 0a01 	adds.w	sl, r2, r1
 800395e:	4649      	mov	r1, r9
 8003960:	eb43 0b01 	adc.w	fp, r3, r1
 8003964:	f04f 0200 	mov.w	r2, #0
 8003968:	f04f 0300 	mov.w	r3, #0
 800396c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003970:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003974:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003978:	4692      	mov	sl, r2
 800397a:	469b      	mov	fp, r3
 800397c:	4643      	mov	r3, r8
 800397e:	eb1a 0303 	adds.w	r3, sl, r3
 8003982:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003986:	464b      	mov	r3, r9
 8003988:	eb4b 0303 	adc.w	r3, fp, r3
 800398c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800399c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80039a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80039a4:	460b      	mov	r3, r1
 80039a6:	18db      	adds	r3, r3, r3
 80039a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80039aa:	4613      	mov	r3, r2
 80039ac:	eb42 0303 	adc.w	r3, r2, r3
 80039b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80039b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80039b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80039ba:	f7fc fc11 	bl	80001e0 <__aeabi_uldivmod>
 80039be:	4602      	mov	r2, r0
 80039c0:	460b      	mov	r3, r1
 80039c2:	4611      	mov	r1, r2
 80039c4:	4b3b      	ldr	r3, [pc, #236]	@ (8003ab4 <UART_SetConfig+0x2d4>)
 80039c6:	fba3 2301 	umull	r2, r3, r3, r1
 80039ca:	095b      	lsrs	r3, r3, #5
 80039cc:	2264      	movs	r2, #100	@ 0x64
 80039ce:	fb02 f303 	mul.w	r3, r2, r3
 80039d2:	1acb      	subs	r3, r1, r3
 80039d4:	00db      	lsls	r3, r3, #3
 80039d6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80039da:	4b36      	ldr	r3, [pc, #216]	@ (8003ab4 <UART_SetConfig+0x2d4>)
 80039dc:	fba3 2302 	umull	r2, r3, r3, r2
 80039e0:	095b      	lsrs	r3, r3, #5
 80039e2:	005b      	lsls	r3, r3, #1
 80039e4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80039e8:	441c      	add	r4, r3
 80039ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039ee:	2200      	movs	r2, #0
 80039f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80039f4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80039f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80039fc:	4642      	mov	r2, r8
 80039fe:	464b      	mov	r3, r9
 8003a00:	1891      	adds	r1, r2, r2
 8003a02:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003a04:	415b      	adcs	r3, r3
 8003a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003a0c:	4641      	mov	r1, r8
 8003a0e:	1851      	adds	r1, r2, r1
 8003a10:	6339      	str	r1, [r7, #48]	@ 0x30
 8003a12:	4649      	mov	r1, r9
 8003a14:	414b      	adcs	r3, r1
 8003a16:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a18:	f04f 0200 	mov.w	r2, #0
 8003a1c:	f04f 0300 	mov.w	r3, #0
 8003a20:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003a24:	4659      	mov	r1, fp
 8003a26:	00cb      	lsls	r3, r1, #3
 8003a28:	4651      	mov	r1, sl
 8003a2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a2e:	4651      	mov	r1, sl
 8003a30:	00ca      	lsls	r2, r1, #3
 8003a32:	4610      	mov	r0, r2
 8003a34:	4619      	mov	r1, r3
 8003a36:	4603      	mov	r3, r0
 8003a38:	4642      	mov	r2, r8
 8003a3a:	189b      	adds	r3, r3, r2
 8003a3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a40:	464b      	mov	r3, r9
 8003a42:	460a      	mov	r2, r1
 8003a44:	eb42 0303 	adc.w	r3, r2, r3
 8003a48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003a58:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003a5c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003a60:	460b      	mov	r3, r1
 8003a62:	18db      	adds	r3, r3, r3
 8003a64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a66:	4613      	mov	r3, r2
 8003a68:	eb42 0303 	adc.w	r3, r2, r3
 8003a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003a72:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003a76:	f7fc fbb3 	bl	80001e0 <__aeabi_uldivmod>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ab4 <UART_SetConfig+0x2d4>)
 8003a80:	fba3 1302 	umull	r1, r3, r3, r2
 8003a84:	095b      	lsrs	r3, r3, #5
 8003a86:	2164      	movs	r1, #100	@ 0x64
 8003a88:	fb01 f303 	mul.w	r3, r1, r3
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	00db      	lsls	r3, r3, #3
 8003a90:	3332      	adds	r3, #50	@ 0x32
 8003a92:	4a08      	ldr	r2, [pc, #32]	@ (8003ab4 <UART_SetConfig+0x2d4>)
 8003a94:	fba2 2303 	umull	r2, r3, r2, r3
 8003a98:	095b      	lsrs	r3, r3, #5
 8003a9a:	f003 0207 	and.w	r2, r3, #7
 8003a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4422      	add	r2, r4
 8003aa6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003aa8:	e106      	b.n	8003cb8 <UART_SetConfig+0x4d8>
 8003aaa:	bf00      	nop
 8003aac:	40011000 	.word	0x40011000
 8003ab0:	40011400 	.word	0x40011400
 8003ab4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ab8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003abc:	2200      	movs	r2, #0
 8003abe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003ac2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003ac6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003aca:	4642      	mov	r2, r8
 8003acc:	464b      	mov	r3, r9
 8003ace:	1891      	adds	r1, r2, r2
 8003ad0:	6239      	str	r1, [r7, #32]
 8003ad2:	415b      	adcs	r3, r3
 8003ad4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ad6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ada:	4641      	mov	r1, r8
 8003adc:	1854      	adds	r4, r2, r1
 8003ade:	4649      	mov	r1, r9
 8003ae0:	eb43 0501 	adc.w	r5, r3, r1
 8003ae4:	f04f 0200 	mov.w	r2, #0
 8003ae8:	f04f 0300 	mov.w	r3, #0
 8003aec:	00eb      	lsls	r3, r5, #3
 8003aee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003af2:	00e2      	lsls	r2, r4, #3
 8003af4:	4614      	mov	r4, r2
 8003af6:	461d      	mov	r5, r3
 8003af8:	4643      	mov	r3, r8
 8003afa:	18e3      	adds	r3, r4, r3
 8003afc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003b00:	464b      	mov	r3, r9
 8003b02:	eb45 0303 	adc.w	r3, r5, r3
 8003b06:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003b16:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003b1a:	f04f 0200 	mov.w	r2, #0
 8003b1e:	f04f 0300 	mov.w	r3, #0
 8003b22:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003b26:	4629      	mov	r1, r5
 8003b28:	008b      	lsls	r3, r1, #2
 8003b2a:	4621      	mov	r1, r4
 8003b2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b30:	4621      	mov	r1, r4
 8003b32:	008a      	lsls	r2, r1, #2
 8003b34:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003b38:	f7fc fb52 	bl	80001e0 <__aeabi_uldivmod>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	460b      	mov	r3, r1
 8003b40:	4b60      	ldr	r3, [pc, #384]	@ (8003cc4 <UART_SetConfig+0x4e4>)
 8003b42:	fba3 2302 	umull	r2, r3, r3, r2
 8003b46:	095b      	lsrs	r3, r3, #5
 8003b48:	011c      	lsls	r4, r3, #4
 8003b4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003b54:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003b58:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003b5c:	4642      	mov	r2, r8
 8003b5e:	464b      	mov	r3, r9
 8003b60:	1891      	adds	r1, r2, r2
 8003b62:	61b9      	str	r1, [r7, #24]
 8003b64:	415b      	adcs	r3, r3
 8003b66:	61fb      	str	r3, [r7, #28]
 8003b68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b6c:	4641      	mov	r1, r8
 8003b6e:	1851      	adds	r1, r2, r1
 8003b70:	6139      	str	r1, [r7, #16]
 8003b72:	4649      	mov	r1, r9
 8003b74:	414b      	adcs	r3, r1
 8003b76:	617b      	str	r3, [r7, #20]
 8003b78:	f04f 0200 	mov.w	r2, #0
 8003b7c:	f04f 0300 	mov.w	r3, #0
 8003b80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b84:	4659      	mov	r1, fp
 8003b86:	00cb      	lsls	r3, r1, #3
 8003b88:	4651      	mov	r1, sl
 8003b8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b8e:	4651      	mov	r1, sl
 8003b90:	00ca      	lsls	r2, r1, #3
 8003b92:	4610      	mov	r0, r2
 8003b94:	4619      	mov	r1, r3
 8003b96:	4603      	mov	r3, r0
 8003b98:	4642      	mov	r2, r8
 8003b9a:	189b      	adds	r3, r3, r2
 8003b9c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003ba0:	464b      	mov	r3, r9
 8003ba2:	460a      	mov	r2, r1
 8003ba4:	eb42 0303 	adc.w	r3, r2, r3
 8003ba8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003bb6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003bb8:	f04f 0200 	mov.w	r2, #0
 8003bbc:	f04f 0300 	mov.w	r3, #0
 8003bc0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003bc4:	4649      	mov	r1, r9
 8003bc6:	008b      	lsls	r3, r1, #2
 8003bc8:	4641      	mov	r1, r8
 8003bca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bce:	4641      	mov	r1, r8
 8003bd0:	008a      	lsls	r2, r1, #2
 8003bd2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003bd6:	f7fc fb03 	bl	80001e0 <__aeabi_uldivmod>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	460b      	mov	r3, r1
 8003bde:	4611      	mov	r1, r2
 8003be0:	4b38      	ldr	r3, [pc, #224]	@ (8003cc4 <UART_SetConfig+0x4e4>)
 8003be2:	fba3 2301 	umull	r2, r3, r3, r1
 8003be6:	095b      	lsrs	r3, r3, #5
 8003be8:	2264      	movs	r2, #100	@ 0x64
 8003bea:	fb02 f303 	mul.w	r3, r2, r3
 8003bee:	1acb      	subs	r3, r1, r3
 8003bf0:	011b      	lsls	r3, r3, #4
 8003bf2:	3332      	adds	r3, #50	@ 0x32
 8003bf4:	4a33      	ldr	r2, [pc, #204]	@ (8003cc4 <UART_SetConfig+0x4e4>)
 8003bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bfa:	095b      	lsrs	r3, r3, #5
 8003bfc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c00:	441c      	add	r4, r3
 8003c02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c06:	2200      	movs	r2, #0
 8003c08:	673b      	str	r3, [r7, #112]	@ 0x70
 8003c0a:	677a      	str	r2, [r7, #116]	@ 0x74
 8003c0c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003c10:	4642      	mov	r2, r8
 8003c12:	464b      	mov	r3, r9
 8003c14:	1891      	adds	r1, r2, r2
 8003c16:	60b9      	str	r1, [r7, #8]
 8003c18:	415b      	adcs	r3, r3
 8003c1a:	60fb      	str	r3, [r7, #12]
 8003c1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c20:	4641      	mov	r1, r8
 8003c22:	1851      	adds	r1, r2, r1
 8003c24:	6039      	str	r1, [r7, #0]
 8003c26:	4649      	mov	r1, r9
 8003c28:	414b      	adcs	r3, r1
 8003c2a:	607b      	str	r3, [r7, #4]
 8003c2c:	f04f 0200 	mov.w	r2, #0
 8003c30:	f04f 0300 	mov.w	r3, #0
 8003c34:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003c38:	4659      	mov	r1, fp
 8003c3a:	00cb      	lsls	r3, r1, #3
 8003c3c:	4651      	mov	r1, sl
 8003c3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c42:	4651      	mov	r1, sl
 8003c44:	00ca      	lsls	r2, r1, #3
 8003c46:	4610      	mov	r0, r2
 8003c48:	4619      	mov	r1, r3
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	4642      	mov	r2, r8
 8003c4e:	189b      	adds	r3, r3, r2
 8003c50:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c52:	464b      	mov	r3, r9
 8003c54:	460a      	mov	r2, r1
 8003c56:	eb42 0303 	adc.w	r3, r2, r3
 8003c5a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c66:	667a      	str	r2, [r7, #100]	@ 0x64
 8003c68:	f04f 0200 	mov.w	r2, #0
 8003c6c:	f04f 0300 	mov.w	r3, #0
 8003c70:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003c74:	4649      	mov	r1, r9
 8003c76:	008b      	lsls	r3, r1, #2
 8003c78:	4641      	mov	r1, r8
 8003c7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c7e:	4641      	mov	r1, r8
 8003c80:	008a      	lsls	r2, r1, #2
 8003c82:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003c86:	f7fc faab 	bl	80001e0 <__aeabi_uldivmod>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8003cc4 <UART_SetConfig+0x4e4>)
 8003c90:	fba3 1302 	umull	r1, r3, r3, r2
 8003c94:	095b      	lsrs	r3, r3, #5
 8003c96:	2164      	movs	r1, #100	@ 0x64
 8003c98:	fb01 f303 	mul.w	r3, r1, r3
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	011b      	lsls	r3, r3, #4
 8003ca0:	3332      	adds	r3, #50	@ 0x32
 8003ca2:	4a08      	ldr	r2, [pc, #32]	@ (8003cc4 <UART_SetConfig+0x4e4>)
 8003ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca8:	095b      	lsrs	r3, r3, #5
 8003caa:	f003 020f 	and.w	r2, r3, #15
 8003cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4422      	add	r2, r4
 8003cb6:	609a      	str	r2, [r3, #8]
}
 8003cb8:	bf00      	nop
 8003cba:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cc4:	51eb851f 	.word	0x51eb851f

08003cc8 <__NVIC_SetPriority>:
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	4603      	mov	r3, r0
 8003cd0:	6039      	str	r1, [r7, #0]
 8003cd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	db0a      	blt.n	8003cf2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	b2da      	uxtb	r2, r3
 8003ce0:	490c      	ldr	r1, [pc, #48]	@ (8003d14 <__NVIC_SetPriority+0x4c>)
 8003ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ce6:	0112      	lsls	r2, r2, #4
 8003ce8:	b2d2      	uxtb	r2, r2
 8003cea:	440b      	add	r3, r1
 8003cec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003cf0:	e00a      	b.n	8003d08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	b2da      	uxtb	r2, r3
 8003cf6:	4908      	ldr	r1, [pc, #32]	@ (8003d18 <__NVIC_SetPriority+0x50>)
 8003cf8:	79fb      	ldrb	r3, [r7, #7]
 8003cfa:	f003 030f 	and.w	r3, r3, #15
 8003cfe:	3b04      	subs	r3, #4
 8003d00:	0112      	lsls	r2, r2, #4
 8003d02:	b2d2      	uxtb	r2, r2
 8003d04:	440b      	add	r3, r1
 8003d06:	761a      	strb	r2, [r3, #24]
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr
 8003d14:	e000e100 	.word	0xe000e100
 8003d18:	e000ed00 	.word	0xe000ed00

08003d1c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003d20:	4b05      	ldr	r3, [pc, #20]	@ (8003d38 <SysTick_Handler+0x1c>)
 8003d22:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003d24:	f002 f880 	bl	8005e28 <xTaskGetSchedulerState>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d001      	beq.n	8003d32 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003d2e:	f002 ff7b 	bl	8006c28 <xPortSysTickHandler>
  }
}
 8003d32:	bf00      	nop
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	e000e010 	.word	0xe000e010

08003d3c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003d40:	2100      	movs	r1, #0
 8003d42:	f06f 0004 	mvn.w	r0, #4
 8003d46:	f7ff ffbf 	bl	8003cc8 <__NVIC_SetPriority>
#endif
}
 8003d4a:	bf00      	nop
 8003d4c:	bd80      	pop	{r7, pc}
	...

08003d50 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d56:	f3ef 8305 	mrs	r3, IPSR
 8003d5a:	603b      	str	r3, [r7, #0]
  return(result);
 8003d5c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d003      	beq.n	8003d6a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003d62:	f06f 0305 	mvn.w	r3, #5
 8003d66:	607b      	str	r3, [r7, #4]
 8003d68:	e00c      	b.n	8003d84 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003d6a:	4b0a      	ldr	r3, [pc, #40]	@ (8003d94 <osKernelInitialize+0x44>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d105      	bne.n	8003d7e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003d72:	4b08      	ldr	r3, [pc, #32]	@ (8003d94 <osKernelInitialize+0x44>)
 8003d74:	2201      	movs	r2, #1
 8003d76:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	607b      	str	r3, [r7, #4]
 8003d7c:	e002      	b.n	8003d84 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003d7e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003d82:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003d84:	687b      	ldr	r3, [r7, #4]
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	370c      	adds	r7, #12
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
 8003d92:	bf00      	nop
 8003d94:	200001f0 	.word	0x200001f0

08003d98 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d9e:	f3ef 8305 	mrs	r3, IPSR
 8003da2:	603b      	str	r3, [r7, #0]
  return(result);
 8003da4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d003      	beq.n	8003db2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8003daa:	f06f 0305 	mvn.w	r3, #5
 8003dae:	607b      	str	r3, [r7, #4]
 8003db0:	e010      	b.n	8003dd4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003db2:	4b0b      	ldr	r3, [pc, #44]	@ (8003de0 <osKernelStart+0x48>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d109      	bne.n	8003dce <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003dba:	f7ff ffbf 	bl	8003d3c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003dbe:	4b08      	ldr	r3, [pc, #32]	@ (8003de0 <osKernelStart+0x48>)
 8003dc0:	2202      	movs	r2, #2
 8003dc2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003dc4:	f001 fbbc 	bl	8005540 <vTaskStartScheduler>
      stat = osOK;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	607b      	str	r3, [r7, #4]
 8003dcc:	e002      	b.n	8003dd4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003dce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003dd2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003dd4:	687b      	ldr	r3, [r7, #4]
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3708      	adds	r7, #8
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	200001f0 	.word	0x200001f0

08003de4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b08e      	sub	sp, #56	@ 0x38
 8003de8:	af04      	add	r7, sp, #16
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003df0:	2300      	movs	r3, #0
 8003df2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003df4:	f3ef 8305 	mrs	r3, IPSR
 8003df8:	617b      	str	r3, [r7, #20]
  return(result);
 8003dfa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d17e      	bne.n	8003efe <osThreadNew+0x11a>
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d07b      	beq.n	8003efe <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003e06:	2380      	movs	r3, #128	@ 0x80
 8003e08:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003e0a:	2318      	movs	r3, #24
 8003e0c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8003e12:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003e16:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d045      	beq.n	8003eaa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d002      	beq.n	8003e2c <osThreadNew+0x48>
        name = attr->name;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	699b      	ldr	r3, [r3, #24]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d002      	beq.n	8003e3a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	699b      	ldr	r3, [r3, #24]
 8003e38:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d008      	beq.n	8003e52 <osThreadNew+0x6e>
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	2b38      	cmp	r3, #56	@ 0x38
 8003e44:	d805      	bhi.n	8003e52 <osThreadNew+0x6e>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f003 0301 	and.w	r3, r3, #1
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d001      	beq.n	8003e56 <osThreadNew+0x72>
        return (NULL);
 8003e52:	2300      	movs	r3, #0
 8003e54:	e054      	b.n	8003f00 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	695b      	ldr	r3, [r3, #20]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d003      	beq.n	8003e66 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	695b      	ldr	r3, [r3, #20]
 8003e62:	089b      	lsrs	r3, r3, #2
 8003e64:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d00e      	beq.n	8003e8c <osThreadNew+0xa8>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	2ba7      	cmp	r3, #167	@ 0xa7
 8003e74:	d90a      	bls.n	8003e8c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d006      	beq.n	8003e8c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d002      	beq.n	8003e8c <osThreadNew+0xa8>
        mem = 1;
 8003e86:	2301      	movs	r3, #1
 8003e88:	61bb      	str	r3, [r7, #24]
 8003e8a:	e010      	b.n	8003eae <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d10c      	bne.n	8003eae <osThreadNew+0xca>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d108      	bne.n	8003eae <osThreadNew+0xca>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	691b      	ldr	r3, [r3, #16]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d104      	bne.n	8003eae <osThreadNew+0xca>
          mem = 0;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	61bb      	str	r3, [r7, #24]
 8003ea8:	e001      	b.n	8003eae <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d110      	bne.n	8003ed6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003ebc:	9202      	str	r2, [sp, #8]
 8003ebe:	9301      	str	r3, [sp, #4]
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	9300      	str	r3, [sp, #0]
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	6a3a      	ldr	r2, [r7, #32]
 8003ec8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003eca:	68f8      	ldr	r0, [r7, #12]
 8003ecc:	f001 f944 	bl	8005158 <xTaskCreateStatic>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	613b      	str	r3, [r7, #16]
 8003ed4:	e013      	b.n	8003efe <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d110      	bne.n	8003efe <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003edc:	6a3b      	ldr	r3, [r7, #32]
 8003ede:	b29a      	uxth	r2, r3
 8003ee0:	f107 0310 	add.w	r3, r7, #16
 8003ee4:	9301      	str	r3, [sp, #4]
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	9300      	str	r3, [sp, #0]
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003eee:	68f8      	ldr	r0, [r7, #12]
 8003ef0:	f001 f992 	bl	8005218 <xTaskCreate>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d001      	beq.n	8003efe <osThreadNew+0x11a>
            hTask = NULL;
 8003efa:	2300      	movs	r3, #0
 8003efc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003efe:	693b      	ldr	r3, [r7, #16]
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3728      	adds	r7, #40	@ 0x28
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f10:	f3ef 8305 	mrs	r3, IPSR
 8003f14:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f16:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d003      	beq.n	8003f24 <osDelay+0x1c>
    stat = osErrorISR;
 8003f1c:	f06f 0305 	mvn.w	r3, #5
 8003f20:	60fb      	str	r3, [r7, #12]
 8003f22:	e007      	b.n	8003f34 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003f24:	2300      	movs	r3, #0
 8003f26:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d002      	beq.n	8003f34 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f001 fad0 	bl	80054d4 <vTaskDelay>
    }
  }

  return (stat);
 8003f34:	68fb      	ldr	r3, [r7, #12]
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3710      	adds	r7, #16
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}

08003f3e <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	b088      	sub	sp, #32
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8003f46:	2300      	movs	r3, #0
 8003f48:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f4a:	f3ef 8305 	mrs	r3, IPSR
 8003f4e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f50:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d174      	bne.n	8004040 <osMutexNew+0x102>
    if (attr != NULL) {
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d003      	beq.n	8003f64 <osMutexNew+0x26>
      type = attr->attr_bits;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	61bb      	str	r3, [r7, #24]
 8003f62:	e001      	b.n	8003f68 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8003f64:	2300      	movs	r3, #0
 8003f66:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	f003 0301 	and.w	r3, r3, #1
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d002      	beq.n	8003f78 <osMutexNew+0x3a>
      rmtx = 1U;
 8003f72:	2301      	movs	r3, #1
 8003f74:	617b      	str	r3, [r7, #20]
 8003f76:	e001      	b.n	8003f7c <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	f003 0308 	and.w	r3, r3, #8
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d15c      	bne.n	8004040 <osMutexNew+0x102>
      mem = -1;
 8003f86:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003f8a:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d015      	beq.n	8003fbe <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d006      	beq.n	8003fa8 <osMutexNew+0x6a>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	2b4f      	cmp	r3, #79	@ 0x4f
 8003fa0:	d902      	bls.n	8003fa8 <osMutexNew+0x6a>
          mem = 1;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	613b      	str	r3, [r7, #16]
 8003fa6:	e00c      	b.n	8003fc2 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d108      	bne.n	8003fc2 <osMutexNew+0x84>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d104      	bne.n	8003fc2 <osMutexNew+0x84>
            mem = 0;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	613b      	str	r3, [r7, #16]
 8003fbc:	e001      	b.n	8003fc2 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d112      	bne.n	8003fee <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d007      	beq.n	8003fde <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	2004      	movs	r0, #4
 8003fd6:	f000 fb20 	bl	800461a <xQueueCreateMutexStatic>
 8003fda:	61f8      	str	r0, [r7, #28]
 8003fdc:	e016      	b.n	800400c <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	2001      	movs	r0, #1
 8003fe6:	f000 fb18 	bl	800461a <xQueueCreateMutexStatic>
 8003fea:	61f8      	str	r0, [r7, #28]
 8003fec:	e00e      	b.n	800400c <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d10b      	bne.n	800400c <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d004      	beq.n	8004004 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8003ffa:	2004      	movs	r0, #4
 8003ffc:	f000 faf5 	bl	80045ea <xQueueCreateMutex>
 8004000:	61f8      	str	r0, [r7, #28]
 8004002:	e003      	b.n	800400c <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8004004:	2001      	movs	r0, #1
 8004006:	f000 faf0 	bl	80045ea <xQueueCreateMutex>
 800400a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00c      	beq.n	800402c <osMutexNew+0xee>
        if (attr != NULL) {
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d003      	beq.n	8004020 <osMutexNew+0xe2>
          name = attr->name;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	60fb      	str	r3, [r7, #12]
 800401e:	e001      	b.n	8004024 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8004020:	2300      	movs	r3, #0
 8004022:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8004024:	68f9      	ldr	r1, [r7, #12]
 8004026:	69f8      	ldr	r0, [r7, #28]
 8004028:	f001 f838 	bl	800509c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d006      	beq.n	8004040 <osMutexNew+0x102>
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d003      	beq.n	8004040 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	f043 0301 	orr.w	r3, r3, #1
 800403e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8004040:	69fb      	ldr	r3, [r7, #28]
}
 8004042:	4618      	mov	r0, r3
 8004044:	3720      	adds	r7, #32
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800404a:	b580      	push	{r7, lr}
 800404c:	b086      	sub	sp, #24
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
 8004052:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f023 0301 	bic.w	r3, r3, #1
 800405a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8004064:	2300      	movs	r3, #0
 8004066:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004068:	f3ef 8305 	mrs	r3, IPSR
 800406c:	60bb      	str	r3, [r7, #8]
  return(result);
 800406e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8004070:	2b00      	cmp	r3, #0
 8004072:	d003      	beq.n	800407c <osMutexAcquire+0x32>
    stat = osErrorISR;
 8004074:	f06f 0305 	mvn.w	r3, #5
 8004078:	617b      	str	r3, [r7, #20]
 800407a:	e02c      	b.n	80040d6 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d103      	bne.n	800408a <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8004082:	f06f 0303 	mvn.w	r3, #3
 8004086:	617b      	str	r3, [r7, #20]
 8004088:	e025      	b.n	80040d6 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d011      	beq.n	80040b4 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8004090:	6839      	ldr	r1, [r7, #0]
 8004092:	6938      	ldr	r0, [r7, #16]
 8004094:	f000 fb11 	bl	80046ba <xQueueTakeMutexRecursive>
 8004098:	4603      	mov	r3, r0
 800409a:	2b01      	cmp	r3, #1
 800409c:	d01b      	beq.n	80040d6 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d003      	beq.n	80040ac <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80040a4:	f06f 0301 	mvn.w	r3, #1
 80040a8:	617b      	str	r3, [r7, #20]
 80040aa:	e014      	b.n	80040d6 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80040ac:	f06f 0302 	mvn.w	r3, #2
 80040b0:	617b      	str	r3, [r7, #20]
 80040b2:	e010      	b.n	80040d6 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80040b4:	6839      	ldr	r1, [r7, #0]
 80040b6:	6938      	ldr	r0, [r7, #16]
 80040b8:	f000 fdb8 	bl	8004c2c <xQueueSemaphoreTake>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d009      	beq.n	80040d6 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d003      	beq.n	80040d0 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80040c8:	f06f 0301 	mvn.w	r3, #1
 80040cc:	617b      	str	r3, [r7, #20]
 80040ce:	e002      	b.n	80040d6 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80040d0:	f06f 0302 	mvn.w	r3, #2
 80040d4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80040d6:	697b      	ldr	r3, [r7, #20]
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3718      	adds	r7, #24
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b086      	sub	sp, #24
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f023 0301 	bic.w	r3, r3, #1
 80040ee:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f003 0301 	and.w	r3, r3, #1
 80040f6:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80040f8:	2300      	movs	r3, #0
 80040fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040fc:	f3ef 8305 	mrs	r3, IPSR
 8004100:	60bb      	str	r3, [r7, #8]
  return(result);
 8004102:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8004104:	2b00      	cmp	r3, #0
 8004106:	d003      	beq.n	8004110 <osMutexRelease+0x30>
    stat = osErrorISR;
 8004108:	f06f 0305 	mvn.w	r3, #5
 800410c:	617b      	str	r3, [r7, #20]
 800410e:	e01f      	b.n	8004150 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d103      	bne.n	800411e <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8004116:	f06f 0303 	mvn.w	r3, #3
 800411a:	617b      	str	r3, [r7, #20]
 800411c:	e018      	b.n	8004150 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d009      	beq.n	8004138 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8004124:	6938      	ldr	r0, [r7, #16]
 8004126:	f000 fa93 	bl	8004650 <xQueueGiveMutexRecursive>
 800412a:	4603      	mov	r3, r0
 800412c:	2b01      	cmp	r3, #1
 800412e:	d00f      	beq.n	8004150 <osMutexRelease+0x70>
        stat = osErrorResource;
 8004130:	f06f 0302 	mvn.w	r3, #2
 8004134:	617b      	str	r3, [r7, #20]
 8004136:	e00b      	b.n	8004150 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8004138:	2300      	movs	r3, #0
 800413a:	2200      	movs	r2, #0
 800413c:	2100      	movs	r1, #0
 800413e:	6938      	ldr	r0, [r7, #16]
 8004140:	f000 faf2 	bl	8004728 <xQueueGenericSend>
 8004144:	4603      	mov	r3, r0
 8004146:	2b01      	cmp	r3, #1
 8004148:	d002      	beq.n	8004150 <osMutexRelease+0x70>
        stat = osErrorResource;
 800414a:	f06f 0302 	mvn.w	r3, #2
 800414e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004150:	697b      	ldr	r3, [r7, #20]
}
 8004152:	4618      	mov	r0, r3
 8004154:	3718      	adds	r7, #24
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
	...

0800415c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800415c:	b480      	push	{r7}
 800415e:	b085      	sub	sp, #20
 8004160:	af00      	add	r7, sp, #0
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	4a07      	ldr	r2, [pc, #28]	@ (8004188 <vApplicationGetIdleTaskMemory+0x2c>)
 800416c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	4a06      	ldr	r2, [pc, #24]	@ (800418c <vApplicationGetIdleTaskMemory+0x30>)
 8004172:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2280      	movs	r2, #128	@ 0x80
 8004178:	601a      	str	r2, [r3, #0]
}
 800417a:	bf00      	nop
 800417c:	3714      	adds	r7, #20
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	200001f4 	.word	0x200001f4
 800418c:	2000029c 	.word	0x2000029c

08004190 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004190:	b480      	push	{r7}
 8004192:	b085      	sub	sp, #20
 8004194:	af00      	add	r7, sp, #0
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	4a07      	ldr	r2, [pc, #28]	@ (80041bc <vApplicationGetTimerTaskMemory+0x2c>)
 80041a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	4a06      	ldr	r2, [pc, #24]	@ (80041c0 <vApplicationGetTimerTaskMemory+0x30>)
 80041a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80041ae:	601a      	str	r2, [r3, #0]
}
 80041b0:	bf00      	nop
 80041b2:	3714      	adds	r7, #20
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr
 80041bc:	2000049c 	.word	0x2000049c
 80041c0:	20000544 	.word	0x20000544

080041c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f103 0208 	add.w	r2, r3, #8
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80041dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f103 0208 	add.w	r2, r3, #8
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f103 0208 	add.w	r2, r3, #8
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80041f8:	bf00      	nop
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004212:	bf00      	nop
 8004214:	370c      	adds	r7, #12
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr

0800421e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800421e:	b480      	push	{r7}
 8004220:	b085      	sub	sp, #20
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
 8004226:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	68fa      	ldr	r2, [r7, #12]
 8004232:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	689a      	ldr	r2, [r3, #8]
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	683a      	ldr	r2, [r7, #0]
 8004242:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	683a      	ldr	r2, [r7, #0]
 8004248:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	1c5a      	adds	r2, r3, #1
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	601a      	str	r2, [r3, #0]
}
 800425a:	bf00      	nop
 800425c:	3714      	adds	r7, #20
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr

08004266 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004266:	b480      	push	{r7}
 8004268:	b085      	sub	sp, #20
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
 800426e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800427c:	d103      	bne.n	8004286 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	60fb      	str	r3, [r7, #12]
 8004284:	e00c      	b.n	80042a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	3308      	adds	r3, #8
 800428a:	60fb      	str	r3, [r7, #12]
 800428c:	e002      	b.n	8004294 <vListInsert+0x2e>
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	60fb      	str	r3, [r7, #12]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68ba      	ldr	r2, [r7, #8]
 800429c:	429a      	cmp	r2, r3
 800429e:	d2f6      	bcs.n	800428e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	685a      	ldr	r2, [r3, #4]
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	683a      	ldr	r2, [r7, #0]
 80042ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	683a      	ldr	r2, [r7, #0]
 80042ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	1c5a      	adds	r2, r3, #1
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	601a      	str	r2, [r3, #0]
}
 80042cc:	bf00      	nop
 80042ce:	3714      	adds	r7, #20
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80042d8:	b480      	push	{r7}
 80042da:	b085      	sub	sp, #20
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	691b      	ldr	r3, [r3, #16]
 80042e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	6892      	ldr	r2, [r2, #8]
 80042ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	6852      	ldr	r2, [r2, #4]
 80042f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	429a      	cmp	r2, r3
 8004302:	d103      	bne.n	800430c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	689a      	ldr	r2, [r3, #8]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	1e5a      	subs	r2, r3, #1
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
}
 8004320:	4618      	mov	r0, r3
 8004322:	3714      	adds	r7, #20
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d10b      	bne.n	8004358 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004344:	f383 8811 	msr	BASEPRI, r3
 8004348:	f3bf 8f6f 	isb	sy
 800434c:	f3bf 8f4f 	dsb	sy
 8004350:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004352:	bf00      	nop
 8004354:	bf00      	nop
 8004356:	e7fd      	b.n	8004354 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004358:	f002 fbd6 	bl	8006b08 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004364:	68f9      	ldr	r1, [r7, #12]
 8004366:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004368:	fb01 f303 	mul.w	r3, r1, r3
 800436c:	441a      	add	r2, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2200      	movs	r2, #0
 8004376:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004388:	3b01      	subs	r3, #1
 800438a:	68f9      	ldr	r1, [r7, #12]
 800438c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800438e:	fb01 f303 	mul.w	r3, r1, r3
 8004392:	441a      	add	r2, r3
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	22ff      	movs	r2, #255	@ 0xff
 800439c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	22ff      	movs	r2, #255	@ 0xff
 80043a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d114      	bne.n	80043d8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d01a      	beq.n	80043ec <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	3310      	adds	r3, #16
 80043ba:	4618      	mov	r0, r3
 80043bc:	f001 fb5e 	bl	8005a7c <xTaskRemoveFromEventList>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d012      	beq.n	80043ec <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80043c6:	4b0d      	ldr	r3, [pc, #52]	@ (80043fc <xQueueGenericReset+0xd0>)
 80043c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043cc:	601a      	str	r2, [r3, #0]
 80043ce:	f3bf 8f4f 	dsb	sy
 80043d2:	f3bf 8f6f 	isb	sy
 80043d6:	e009      	b.n	80043ec <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	3310      	adds	r3, #16
 80043dc:	4618      	mov	r0, r3
 80043de:	f7ff fef1 	bl	80041c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	3324      	adds	r3, #36	@ 0x24
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7ff feec 	bl	80041c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80043ec:	f002 fbbe 	bl	8006b6c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80043f0:	2301      	movs	r3, #1
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3710      	adds	r7, #16
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	e000ed04 	.word	0xe000ed04

08004400 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004400:	b580      	push	{r7, lr}
 8004402:	b08e      	sub	sp, #56	@ 0x38
 8004404:	af02      	add	r7, sp, #8
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	607a      	str	r2, [r7, #4]
 800440c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d10b      	bne.n	800442c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004418:	f383 8811 	msr	BASEPRI, r3
 800441c:	f3bf 8f6f 	isb	sy
 8004420:	f3bf 8f4f 	dsb	sy
 8004424:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004426:	bf00      	nop
 8004428:	bf00      	nop
 800442a:	e7fd      	b.n	8004428 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d10b      	bne.n	800444a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004436:	f383 8811 	msr	BASEPRI, r3
 800443a:	f3bf 8f6f 	isb	sy
 800443e:	f3bf 8f4f 	dsb	sy
 8004442:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004444:	bf00      	nop
 8004446:	bf00      	nop
 8004448:	e7fd      	b.n	8004446 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d002      	beq.n	8004456 <xQueueGenericCreateStatic+0x56>
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d001      	beq.n	800445a <xQueueGenericCreateStatic+0x5a>
 8004456:	2301      	movs	r3, #1
 8004458:	e000      	b.n	800445c <xQueueGenericCreateStatic+0x5c>
 800445a:	2300      	movs	r3, #0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d10b      	bne.n	8004478 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004464:	f383 8811 	msr	BASEPRI, r3
 8004468:	f3bf 8f6f 	isb	sy
 800446c:	f3bf 8f4f 	dsb	sy
 8004470:	623b      	str	r3, [r7, #32]
}
 8004472:	bf00      	nop
 8004474:	bf00      	nop
 8004476:	e7fd      	b.n	8004474 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d102      	bne.n	8004484 <xQueueGenericCreateStatic+0x84>
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d101      	bne.n	8004488 <xQueueGenericCreateStatic+0x88>
 8004484:	2301      	movs	r3, #1
 8004486:	e000      	b.n	800448a <xQueueGenericCreateStatic+0x8a>
 8004488:	2300      	movs	r3, #0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d10b      	bne.n	80044a6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800448e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004492:	f383 8811 	msr	BASEPRI, r3
 8004496:	f3bf 8f6f 	isb	sy
 800449a:	f3bf 8f4f 	dsb	sy
 800449e:	61fb      	str	r3, [r7, #28]
}
 80044a0:	bf00      	nop
 80044a2:	bf00      	nop
 80044a4:	e7fd      	b.n	80044a2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80044a6:	2350      	movs	r3, #80	@ 0x50
 80044a8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	2b50      	cmp	r3, #80	@ 0x50
 80044ae:	d00b      	beq.n	80044c8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80044b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044b4:	f383 8811 	msr	BASEPRI, r3
 80044b8:	f3bf 8f6f 	isb	sy
 80044bc:	f3bf 8f4f 	dsb	sy
 80044c0:	61bb      	str	r3, [r7, #24]
}
 80044c2:	bf00      	nop
 80044c4:	bf00      	nop
 80044c6:	e7fd      	b.n	80044c4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80044c8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80044ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d00d      	beq.n	80044f0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80044d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80044dc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80044e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044e2:	9300      	str	r3, [sp, #0]
 80044e4:	4613      	mov	r3, r2
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	68b9      	ldr	r1, [r7, #8]
 80044ea:	68f8      	ldr	r0, [r7, #12]
 80044ec:	f000 f840 	bl	8004570 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80044f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3730      	adds	r7, #48	@ 0x30
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}

080044fa <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80044fa:	b580      	push	{r7, lr}
 80044fc:	b08a      	sub	sp, #40	@ 0x28
 80044fe:	af02      	add	r7, sp, #8
 8004500:	60f8      	str	r0, [r7, #12]
 8004502:	60b9      	str	r1, [r7, #8]
 8004504:	4613      	mov	r3, r2
 8004506:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d10b      	bne.n	8004526 <xQueueGenericCreate+0x2c>
	__asm volatile
 800450e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004512:	f383 8811 	msr	BASEPRI, r3
 8004516:	f3bf 8f6f 	isb	sy
 800451a:	f3bf 8f4f 	dsb	sy
 800451e:	613b      	str	r3, [r7, #16]
}
 8004520:	bf00      	nop
 8004522:	bf00      	nop
 8004524:	e7fd      	b.n	8004522 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	68ba      	ldr	r2, [r7, #8]
 800452a:	fb02 f303 	mul.w	r3, r2, r3
 800452e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	3350      	adds	r3, #80	@ 0x50
 8004534:	4618      	mov	r0, r3
 8004536:	f002 fc09 	bl	8006d4c <pvPortMalloc>
 800453a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800453c:	69bb      	ldr	r3, [r7, #24]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d011      	beq.n	8004566 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	3350      	adds	r3, #80	@ 0x50
 800454a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004554:	79fa      	ldrb	r2, [r7, #7]
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	9300      	str	r3, [sp, #0]
 800455a:	4613      	mov	r3, r2
 800455c:	697a      	ldr	r2, [r7, #20]
 800455e:	68b9      	ldr	r1, [r7, #8]
 8004560:	68f8      	ldr	r0, [r7, #12]
 8004562:	f000 f805 	bl	8004570 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004566:	69bb      	ldr	r3, [r7, #24]
	}
 8004568:	4618      	mov	r0, r3
 800456a:	3720      	adds	r7, #32
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	607a      	str	r2, [r7, #4]
 800457c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d103      	bne.n	800458c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	69ba      	ldr	r2, [r7, #24]
 8004588:	601a      	str	r2, [r3, #0]
 800458a:	e002      	b.n	8004592 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	68fa      	ldr	r2, [r7, #12]
 8004596:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	68ba      	ldr	r2, [r7, #8]
 800459c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800459e:	2101      	movs	r1, #1
 80045a0:	69b8      	ldr	r0, [r7, #24]
 80045a2:	f7ff fec3 	bl	800432c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	78fa      	ldrb	r2, [r7, #3]
 80045aa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80045ae:	bf00      	nop
 80045b0:	3710      	adds	r7, #16
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80045b6:	b580      	push	{r7, lr}
 80045b8:	b082      	sub	sp, #8
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d00e      	beq.n	80045e2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80045d6:	2300      	movs	r3, #0
 80045d8:	2200      	movs	r2, #0
 80045da:	2100      	movs	r1, #0
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 f8a3 	bl	8004728 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80045e2:	bf00      	nop
 80045e4:	3708      	adds	r7, #8
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80045ea:	b580      	push	{r7, lr}
 80045ec:	b086      	sub	sp, #24
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	4603      	mov	r3, r0
 80045f2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80045f4:	2301      	movs	r3, #1
 80045f6:	617b      	str	r3, [r7, #20]
 80045f8:	2300      	movs	r3, #0
 80045fa:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80045fc:	79fb      	ldrb	r3, [r7, #7]
 80045fe:	461a      	mov	r2, r3
 8004600:	6939      	ldr	r1, [r7, #16]
 8004602:	6978      	ldr	r0, [r7, #20]
 8004604:	f7ff ff79 	bl	80044fa <xQueueGenericCreate>
 8004608:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800460a:	68f8      	ldr	r0, [r7, #12]
 800460c:	f7ff ffd3 	bl	80045b6 <prvInitialiseMutex>

		return xNewQueue;
 8004610:	68fb      	ldr	r3, [r7, #12]
	}
 8004612:	4618      	mov	r0, r3
 8004614:	3718      	adds	r7, #24
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}

0800461a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800461a:	b580      	push	{r7, lr}
 800461c:	b088      	sub	sp, #32
 800461e:	af02      	add	r7, sp, #8
 8004620:	4603      	mov	r3, r0
 8004622:	6039      	str	r1, [r7, #0]
 8004624:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004626:	2301      	movs	r3, #1
 8004628:	617b      	str	r3, [r7, #20]
 800462a:	2300      	movs	r3, #0
 800462c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800462e:	79fb      	ldrb	r3, [r7, #7]
 8004630:	9300      	str	r3, [sp, #0]
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	2200      	movs	r2, #0
 8004636:	6939      	ldr	r1, [r7, #16]
 8004638:	6978      	ldr	r0, [r7, #20]
 800463a:	f7ff fee1 	bl	8004400 <xQueueGenericCreateStatic>
 800463e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004640:	68f8      	ldr	r0, [r7, #12]
 8004642:	f7ff ffb8 	bl	80045b6 <prvInitialiseMutex>

		return xNewQueue;
 8004646:	68fb      	ldr	r3, [r7, #12]
	}
 8004648:	4618      	mov	r0, r3
 800464a:	3718      	adds	r7, #24
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8004650:	b590      	push	{r4, r7, lr}
 8004652:	b087      	sub	sp, #28
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d10b      	bne.n	800467a <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8004662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004666:	f383 8811 	msr	BASEPRI, r3
 800466a:	f3bf 8f6f 	isb	sy
 800466e:	f3bf 8f4f 	dsb	sy
 8004672:	60fb      	str	r3, [r7, #12]
}
 8004674:	bf00      	nop
 8004676:	bf00      	nop
 8004678:	e7fd      	b.n	8004676 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	689c      	ldr	r4, [r3, #8]
 800467e:	f001 fbc3 	bl	8005e08 <xTaskGetCurrentTaskHandle>
 8004682:	4603      	mov	r3, r0
 8004684:	429c      	cmp	r4, r3
 8004686:	d111      	bne.n	80046ac <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	1e5a      	subs	r2, r3, #1
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d105      	bne.n	80046a6 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800469a:	2300      	movs	r3, #0
 800469c:	2200      	movs	r2, #0
 800469e:	2100      	movs	r1, #0
 80046a0:	6938      	ldr	r0, [r7, #16]
 80046a2:	f000 f841 	bl	8004728 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80046a6:	2301      	movs	r3, #1
 80046a8:	617b      	str	r3, [r7, #20]
 80046aa:	e001      	b.n	80046b0 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80046ac:	2300      	movs	r3, #0
 80046ae:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80046b0:	697b      	ldr	r3, [r7, #20]
	}
 80046b2:	4618      	mov	r0, r3
 80046b4:	371c      	adds	r7, #28
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd90      	pop	{r4, r7, pc}

080046ba <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80046ba:	b590      	push	{r4, r7, lr}
 80046bc:	b087      	sub	sp, #28
 80046be:	af00      	add	r7, sp, #0
 80046c0:	6078      	str	r0, [r7, #4]
 80046c2:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d10b      	bne.n	80046e6 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 80046ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046d2:	f383 8811 	msr	BASEPRI, r3
 80046d6:	f3bf 8f6f 	isb	sy
 80046da:	f3bf 8f4f 	dsb	sy
 80046de:	60fb      	str	r3, [r7, #12]
}
 80046e0:	bf00      	nop
 80046e2:	bf00      	nop
 80046e4:	e7fd      	b.n	80046e2 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	689c      	ldr	r4, [r3, #8]
 80046ea:	f001 fb8d 	bl	8005e08 <xTaskGetCurrentTaskHandle>
 80046ee:	4603      	mov	r3, r0
 80046f0:	429c      	cmp	r4, r3
 80046f2:	d107      	bne.n	8004704 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	1c5a      	adds	r2, r3, #1
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80046fe:	2301      	movs	r3, #1
 8004700:	617b      	str	r3, [r7, #20]
 8004702:	e00c      	b.n	800471e <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8004704:	6839      	ldr	r1, [r7, #0]
 8004706:	6938      	ldr	r0, [r7, #16]
 8004708:	f000 fa90 	bl	8004c2c <xQueueSemaphoreTake>
 800470c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d004      	beq.n	800471e <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	1c5a      	adds	r2, r3, #1
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800471e:	697b      	ldr	r3, [r7, #20]
	}
 8004720:	4618      	mov	r0, r3
 8004722:	371c      	adds	r7, #28
 8004724:	46bd      	mov	sp, r7
 8004726:	bd90      	pop	{r4, r7, pc}

08004728 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b08e      	sub	sp, #56	@ 0x38
 800472c:	af00      	add	r7, sp, #0
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	607a      	str	r2, [r7, #4]
 8004734:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004736:	2300      	movs	r3, #0
 8004738:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800473e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004740:	2b00      	cmp	r3, #0
 8004742:	d10b      	bne.n	800475c <xQueueGenericSend+0x34>
	__asm volatile
 8004744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004748:	f383 8811 	msr	BASEPRI, r3
 800474c:	f3bf 8f6f 	isb	sy
 8004750:	f3bf 8f4f 	dsb	sy
 8004754:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004756:	bf00      	nop
 8004758:	bf00      	nop
 800475a:	e7fd      	b.n	8004758 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d103      	bne.n	800476a <xQueueGenericSend+0x42>
 8004762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004766:	2b00      	cmp	r3, #0
 8004768:	d101      	bne.n	800476e <xQueueGenericSend+0x46>
 800476a:	2301      	movs	r3, #1
 800476c:	e000      	b.n	8004770 <xQueueGenericSend+0x48>
 800476e:	2300      	movs	r3, #0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d10b      	bne.n	800478c <xQueueGenericSend+0x64>
	__asm volatile
 8004774:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004778:	f383 8811 	msr	BASEPRI, r3
 800477c:	f3bf 8f6f 	isb	sy
 8004780:	f3bf 8f4f 	dsb	sy
 8004784:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004786:	bf00      	nop
 8004788:	bf00      	nop
 800478a:	e7fd      	b.n	8004788 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	2b02      	cmp	r3, #2
 8004790:	d103      	bne.n	800479a <xQueueGenericSend+0x72>
 8004792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004794:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004796:	2b01      	cmp	r3, #1
 8004798:	d101      	bne.n	800479e <xQueueGenericSend+0x76>
 800479a:	2301      	movs	r3, #1
 800479c:	e000      	b.n	80047a0 <xQueueGenericSend+0x78>
 800479e:	2300      	movs	r3, #0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d10b      	bne.n	80047bc <xQueueGenericSend+0x94>
	__asm volatile
 80047a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047a8:	f383 8811 	msr	BASEPRI, r3
 80047ac:	f3bf 8f6f 	isb	sy
 80047b0:	f3bf 8f4f 	dsb	sy
 80047b4:	623b      	str	r3, [r7, #32]
}
 80047b6:	bf00      	nop
 80047b8:	bf00      	nop
 80047ba:	e7fd      	b.n	80047b8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80047bc:	f001 fb34 	bl	8005e28 <xTaskGetSchedulerState>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d102      	bne.n	80047cc <xQueueGenericSend+0xa4>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d101      	bne.n	80047d0 <xQueueGenericSend+0xa8>
 80047cc:	2301      	movs	r3, #1
 80047ce:	e000      	b.n	80047d2 <xQueueGenericSend+0xaa>
 80047d0:	2300      	movs	r3, #0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d10b      	bne.n	80047ee <xQueueGenericSend+0xc6>
	__asm volatile
 80047d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047da:	f383 8811 	msr	BASEPRI, r3
 80047de:	f3bf 8f6f 	isb	sy
 80047e2:	f3bf 8f4f 	dsb	sy
 80047e6:	61fb      	str	r3, [r7, #28]
}
 80047e8:	bf00      	nop
 80047ea:	bf00      	nop
 80047ec:	e7fd      	b.n	80047ea <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80047ee:	f002 f98b 	bl	8006b08 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80047f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80047f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d302      	bcc.n	8004804 <xQueueGenericSend+0xdc>
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	2b02      	cmp	r3, #2
 8004802:	d129      	bne.n	8004858 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004804:	683a      	ldr	r2, [r7, #0]
 8004806:	68b9      	ldr	r1, [r7, #8]
 8004808:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800480a:	f000 fb37 	bl	8004e7c <prvCopyDataToQueue>
 800480e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004814:	2b00      	cmp	r3, #0
 8004816:	d010      	beq.n	800483a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800481a:	3324      	adds	r3, #36	@ 0x24
 800481c:	4618      	mov	r0, r3
 800481e:	f001 f92d 	bl	8005a7c <xTaskRemoveFromEventList>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d013      	beq.n	8004850 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004828:	4b3f      	ldr	r3, [pc, #252]	@ (8004928 <xQueueGenericSend+0x200>)
 800482a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800482e:	601a      	str	r2, [r3, #0]
 8004830:	f3bf 8f4f 	dsb	sy
 8004834:	f3bf 8f6f 	isb	sy
 8004838:	e00a      	b.n	8004850 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800483a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800483c:	2b00      	cmp	r3, #0
 800483e:	d007      	beq.n	8004850 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004840:	4b39      	ldr	r3, [pc, #228]	@ (8004928 <xQueueGenericSend+0x200>)
 8004842:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004846:	601a      	str	r2, [r3, #0]
 8004848:	f3bf 8f4f 	dsb	sy
 800484c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004850:	f002 f98c 	bl	8006b6c <vPortExitCritical>
				return pdPASS;
 8004854:	2301      	movs	r3, #1
 8004856:	e063      	b.n	8004920 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d103      	bne.n	8004866 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800485e:	f002 f985 	bl	8006b6c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004862:	2300      	movs	r3, #0
 8004864:	e05c      	b.n	8004920 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004866:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004868:	2b00      	cmp	r3, #0
 800486a:	d106      	bne.n	800487a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800486c:	f107 0314 	add.w	r3, r7, #20
 8004870:	4618      	mov	r0, r3
 8004872:	f001 f967 	bl	8005b44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004876:	2301      	movs	r3, #1
 8004878:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800487a:	f002 f977 	bl	8006b6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800487e:	f000 fecf 	bl	8005620 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004882:	f002 f941 	bl	8006b08 <vPortEnterCritical>
 8004886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004888:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800488c:	b25b      	sxtb	r3, r3
 800488e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004892:	d103      	bne.n	800489c <xQueueGenericSend+0x174>
 8004894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004896:	2200      	movs	r2, #0
 8004898:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800489c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800489e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80048a2:	b25b      	sxtb	r3, r3
 80048a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80048a8:	d103      	bne.n	80048b2 <xQueueGenericSend+0x18a>
 80048aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ac:	2200      	movs	r2, #0
 80048ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80048b2:	f002 f95b 	bl	8006b6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80048b6:	1d3a      	adds	r2, r7, #4
 80048b8:	f107 0314 	add.w	r3, r7, #20
 80048bc:	4611      	mov	r1, r2
 80048be:	4618      	mov	r0, r3
 80048c0:	f001 f956 	bl	8005b70 <xTaskCheckForTimeOut>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d124      	bne.n	8004914 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80048ca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80048cc:	f000 fbce 	bl	800506c <prvIsQueueFull>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d018      	beq.n	8004908 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80048d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048d8:	3310      	adds	r3, #16
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	4611      	mov	r1, r2
 80048de:	4618      	mov	r0, r3
 80048e0:	f001 f87a 	bl	80059d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80048e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80048e6:	f000 fb59 	bl	8004f9c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80048ea:	f000 fea7 	bl	800563c <xTaskResumeAll>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	f47f af7c 	bne.w	80047ee <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80048f6:	4b0c      	ldr	r3, [pc, #48]	@ (8004928 <xQueueGenericSend+0x200>)
 80048f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048fc:	601a      	str	r2, [r3, #0]
 80048fe:	f3bf 8f4f 	dsb	sy
 8004902:	f3bf 8f6f 	isb	sy
 8004906:	e772      	b.n	80047ee <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004908:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800490a:	f000 fb47 	bl	8004f9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800490e:	f000 fe95 	bl	800563c <xTaskResumeAll>
 8004912:	e76c      	b.n	80047ee <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004914:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004916:	f000 fb41 	bl	8004f9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800491a:	f000 fe8f 	bl	800563c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800491e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004920:	4618      	mov	r0, r3
 8004922:	3738      	adds	r7, #56	@ 0x38
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	e000ed04 	.word	0xe000ed04

0800492c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b090      	sub	sp, #64	@ 0x40
 8004930:	af00      	add	r7, sp, #0
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	607a      	str	r2, [r7, #4]
 8004938:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800493e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004940:	2b00      	cmp	r3, #0
 8004942:	d10b      	bne.n	800495c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004948:	f383 8811 	msr	BASEPRI, r3
 800494c:	f3bf 8f6f 	isb	sy
 8004950:	f3bf 8f4f 	dsb	sy
 8004954:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004956:	bf00      	nop
 8004958:	bf00      	nop
 800495a:	e7fd      	b.n	8004958 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d103      	bne.n	800496a <xQueueGenericSendFromISR+0x3e>
 8004962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004966:	2b00      	cmp	r3, #0
 8004968:	d101      	bne.n	800496e <xQueueGenericSendFromISR+0x42>
 800496a:	2301      	movs	r3, #1
 800496c:	e000      	b.n	8004970 <xQueueGenericSendFromISR+0x44>
 800496e:	2300      	movs	r3, #0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d10b      	bne.n	800498c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004978:	f383 8811 	msr	BASEPRI, r3
 800497c:	f3bf 8f6f 	isb	sy
 8004980:	f3bf 8f4f 	dsb	sy
 8004984:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004986:	bf00      	nop
 8004988:	bf00      	nop
 800498a:	e7fd      	b.n	8004988 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	2b02      	cmp	r3, #2
 8004990:	d103      	bne.n	800499a <xQueueGenericSendFromISR+0x6e>
 8004992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004994:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004996:	2b01      	cmp	r3, #1
 8004998:	d101      	bne.n	800499e <xQueueGenericSendFromISR+0x72>
 800499a:	2301      	movs	r3, #1
 800499c:	e000      	b.n	80049a0 <xQueueGenericSendFromISR+0x74>
 800499e:	2300      	movs	r3, #0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d10b      	bne.n	80049bc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80049a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049a8:	f383 8811 	msr	BASEPRI, r3
 80049ac:	f3bf 8f6f 	isb	sy
 80049b0:	f3bf 8f4f 	dsb	sy
 80049b4:	623b      	str	r3, [r7, #32]
}
 80049b6:	bf00      	nop
 80049b8:	bf00      	nop
 80049ba:	e7fd      	b.n	80049b8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80049bc:	f002 f984 	bl	8006cc8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80049c0:	f3ef 8211 	mrs	r2, BASEPRI
 80049c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049c8:	f383 8811 	msr	BASEPRI, r3
 80049cc:	f3bf 8f6f 	isb	sy
 80049d0:	f3bf 8f4f 	dsb	sy
 80049d4:	61fa      	str	r2, [r7, #28]
 80049d6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80049d8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80049da:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80049dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d302      	bcc.n	80049ee <xQueueGenericSendFromISR+0xc2>
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	2b02      	cmp	r3, #2
 80049ec:	d12f      	bne.n	8004a4e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80049ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049f0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80049f4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80049fe:	683a      	ldr	r2, [r7, #0]
 8004a00:	68b9      	ldr	r1, [r7, #8]
 8004a02:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004a04:	f000 fa3a 	bl	8004e7c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004a08:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004a0c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a10:	d112      	bne.n	8004a38 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d016      	beq.n	8004a48 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a1c:	3324      	adds	r3, #36	@ 0x24
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f001 f82c 	bl	8005a7c <xTaskRemoveFromEventList>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00e      	beq.n	8004a48 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d00b      	beq.n	8004a48 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	601a      	str	r2, [r3, #0]
 8004a36:	e007      	b.n	8004a48 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004a38:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	b25a      	sxtb	r2, r3
 8004a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004a4c:	e001      	b.n	8004a52 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a54:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004a5c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004a5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3740      	adds	r7, #64	@ 0x40
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b08c      	sub	sp, #48	@ 0x30
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	60b9      	str	r1, [r7, #8]
 8004a72:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004a74:	2300      	movs	r3, #0
 8004a76:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d10b      	bne.n	8004a9a <xQueueReceive+0x32>
	__asm volatile
 8004a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a86:	f383 8811 	msr	BASEPRI, r3
 8004a8a:	f3bf 8f6f 	isb	sy
 8004a8e:	f3bf 8f4f 	dsb	sy
 8004a92:	623b      	str	r3, [r7, #32]
}
 8004a94:	bf00      	nop
 8004a96:	bf00      	nop
 8004a98:	e7fd      	b.n	8004a96 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d103      	bne.n	8004aa8 <xQueueReceive+0x40>
 8004aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d101      	bne.n	8004aac <xQueueReceive+0x44>
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e000      	b.n	8004aae <xQueueReceive+0x46>
 8004aac:	2300      	movs	r3, #0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d10b      	bne.n	8004aca <xQueueReceive+0x62>
	__asm volatile
 8004ab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ab6:	f383 8811 	msr	BASEPRI, r3
 8004aba:	f3bf 8f6f 	isb	sy
 8004abe:	f3bf 8f4f 	dsb	sy
 8004ac2:	61fb      	str	r3, [r7, #28]
}
 8004ac4:	bf00      	nop
 8004ac6:	bf00      	nop
 8004ac8:	e7fd      	b.n	8004ac6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004aca:	f001 f9ad 	bl	8005e28 <xTaskGetSchedulerState>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d102      	bne.n	8004ada <xQueueReceive+0x72>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d101      	bne.n	8004ade <xQueueReceive+0x76>
 8004ada:	2301      	movs	r3, #1
 8004adc:	e000      	b.n	8004ae0 <xQueueReceive+0x78>
 8004ade:	2300      	movs	r3, #0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d10b      	bne.n	8004afc <xQueueReceive+0x94>
	__asm volatile
 8004ae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ae8:	f383 8811 	msr	BASEPRI, r3
 8004aec:	f3bf 8f6f 	isb	sy
 8004af0:	f3bf 8f4f 	dsb	sy
 8004af4:	61bb      	str	r3, [r7, #24]
}
 8004af6:	bf00      	nop
 8004af8:	bf00      	nop
 8004afa:	e7fd      	b.n	8004af8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004afc:	f002 f804 	bl	8006b08 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b04:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d01f      	beq.n	8004b4c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004b0c:	68b9      	ldr	r1, [r7, #8]
 8004b0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b10:	f000 fa1e 	bl	8004f50 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b16:	1e5a      	subs	r2, r3, #1
 8004b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b1a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b1e:	691b      	ldr	r3, [r3, #16]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d00f      	beq.n	8004b44 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b26:	3310      	adds	r3, #16
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f000 ffa7 	bl	8005a7c <xTaskRemoveFromEventList>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d007      	beq.n	8004b44 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004b34:	4b3c      	ldr	r3, [pc, #240]	@ (8004c28 <xQueueReceive+0x1c0>)
 8004b36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b3a:	601a      	str	r2, [r3, #0]
 8004b3c:	f3bf 8f4f 	dsb	sy
 8004b40:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004b44:	f002 f812 	bl	8006b6c <vPortExitCritical>
				return pdPASS;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e069      	b.n	8004c20 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d103      	bne.n	8004b5a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004b52:	f002 f80b 	bl	8006b6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004b56:	2300      	movs	r3, #0
 8004b58:	e062      	b.n	8004c20 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d106      	bne.n	8004b6e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b60:	f107 0310 	add.w	r3, r7, #16
 8004b64:	4618      	mov	r0, r3
 8004b66:	f000 ffed 	bl	8005b44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004b6e:	f001 fffd 	bl	8006b6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004b72:	f000 fd55 	bl	8005620 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b76:	f001 ffc7 	bl	8006b08 <vPortEnterCritical>
 8004b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b7c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004b80:	b25b      	sxtb	r3, r3
 8004b82:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b86:	d103      	bne.n	8004b90 <xQueueReceive+0x128>
 8004b88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b92:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004b96:	b25b      	sxtb	r3, r3
 8004b98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b9c:	d103      	bne.n	8004ba6 <xQueueReceive+0x13e>
 8004b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004ba6:	f001 ffe1 	bl	8006b6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004baa:	1d3a      	adds	r2, r7, #4
 8004bac:	f107 0310 	add.w	r3, r7, #16
 8004bb0:	4611      	mov	r1, r2
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f000 ffdc 	bl	8005b70 <xTaskCheckForTimeOut>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d123      	bne.n	8004c06 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004bbe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004bc0:	f000 fa3e 	bl	8005040 <prvIsQueueEmpty>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d017      	beq.n	8004bfa <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bcc:	3324      	adds	r3, #36	@ 0x24
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	4611      	mov	r1, r2
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f000 ff00 	bl	80059d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004bd8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004bda:	f000 f9df 	bl	8004f9c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004bde:	f000 fd2d 	bl	800563c <xTaskResumeAll>
 8004be2:	4603      	mov	r3, r0
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d189      	bne.n	8004afc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004be8:	4b0f      	ldr	r3, [pc, #60]	@ (8004c28 <xQueueReceive+0x1c0>)
 8004bea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004bee:	601a      	str	r2, [r3, #0]
 8004bf0:	f3bf 8f4f 	dsb	sy
 8004bf4:	f3bf 8f6f 	isb	sy
 8004bf8:	e780      	b.n	8004afc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004bfa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004bfc:	f000 f9ce 	bl	8004f9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c00:	f000 fd1c 	bl	800563c <xTaskResumeAll>
 8004c04:	e77a      	b.n	8004afc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004c06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c08:	f000 f9c8 	bl	8004f9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c0c:	f000 fd16 	bl	800563c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c10:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c12:	f000 fa15 	bl	8005040 <prvIsQueueEmpty>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	f43f af6f 	beq.w	8004afc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004c1e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3730      	adds	r7, #48	@ 0x30
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	e000ed04 	.word	0xe000ed04

08004c2c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b08e      	sub	sp, #56	@ 0x38
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004c36:	2300      	movs	r3, #0
 8004c38:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004c42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d10b      	bne.n	8004c60 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8004c48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c4c:	f383 8811 	msr	BASEPRI, r3
 8004c50:	f3bf 8f6f 	isb	sy
 8004c54:	f3bf 8f4f 	dsb	sy
 8004c58:	623b      	str	r3, [r7, #32]
}
 8004c5a:	bf00      	nop
 8004c5c:	bf00      	nop
 8004c5e:	e7fd      	b.n	8004c5c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004c60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d00b      	beq.n	8004c80 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8004c68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c6c:	f383 8811 	msr	BASEPRI, r3
 8004c70:	f3bf 8f6f 	isb	sy
 8004c74:	f3bf 8f4f 	dsb	sy
 8004c78:	61fb      	str	r3, [r7, #28]
}
 8004c7a:	bf00      	nop
 8004c7c:	bf00      	nop
 8004c7e:	e7fd      	b.n	8004c7c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c80:	f001 f8d2 	bl	8005e28 <xTaskGetSchedulerState>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d102      	bne.n	8004c90 <xQueueSemaphoreTake+0x64>
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d101      	bne.n	8004c94 <xQueueSemaphoreTake+0x68>
 8004c90:	2301      	movs	r3, #1
 8004c92:	e000      	b.n	8004c96 <xQueueSemaphoreTake+0x6a>
 8004c94:	2300      	movs	r3, #0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d10b      	bne.n	8004cb2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8004c9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c9e:	f383 8811 	msr	BASEPRI, r3
 8004ca2:	f3bf 8f6f 	isb	sy
 8004ca6:	f3bf 8f4f 	dsb	sy
 8004caa:	61bb      	str	r3, [r7, #24]
}
 8004cac:	bf00      	nop
 8004cae:	bf00      	nop
 8004cb0:	e7fd      	b.n	8004cae <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004cb2:	f001 ff29 	bl	8006b08 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004cb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cba:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d024      	beq.n	8004d0c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cc4:	1e5a      	subs	r2, r3, #1
 8004cc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cc8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004cca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d104      	bne.n	8004cdc <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004cd2:	f001 fa23 	bl	800611c <pvTaskIncrementMutexHeldCount>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cda:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004cdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d00f      	beq.n	8004d04 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ce6:	3310      	adds	r3, #16
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f000 fec7 	bl	8005a7c <xTaskRemoveFromEventList>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d007      	beq.n	8004d04 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004cf4:	4b54      	ldr	r3, [pc, #336]	@ (8004e48 <xQueueSemaphoreTake+0x21c>)
 8004cf6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004cfa:	601a      	str	r2, [r3, #0]
 8004cfc:	f3bf 8f4f 	dsb	sy
 8004d00:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004d04:	f001 ff32 	bl	8006b6c <vPortExitCritical>
				return pdPASS;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e098      	b.n	8004e3e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d112      	bne.n	8004d38 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d00b      	beq.n	8004d30 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8004d18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d1c:	f383 8811 	msr	BASEPRI, r3
 8004d20:	f3bf 8f6f 	isb	sy
 8004d24:	f3bf 8f4f 	dsb	sy
 8004d28:	617b      	str	r3, [r7, #20]
}
 8004d2a:	bf00      	nop
 8004d2c:	bf00      	nop
 8004d2e:	e7fd      	b.n	8004d2c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004d30:	f001 ff1c 	bl	8006b6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004d34:	2300      	movs	r3, #0
 8004d36:	e082      	b.n	8004e3e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004d38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d106      	bne.n	8004d4c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004d3e:	f107 030c 	add.w	r3, r7, #12
 8004d42:	4618      	mov	r0, r3
 8004d44:	f000 fefe 	bl	8005b44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004d4c:	f001 ff0e 	bl	8006b6c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004d50:	f000 fc66 	bl	8005620 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d54:	f001 fed8 	bl	8006b08 <vPortEnterCritical>
 8004d58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d5a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004d5e:	b25b      	sxtb	r3, r3
 8004d60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d64:	d103      	bne.n	8004d6e <xQueueSemaphoreTake+0x142>
 8004d66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d70:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004d74:	b25b      	sxtb	r3, r3
 8004d76:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d7a:	d103      	bne.n	8004d84 <xQueueSemaphoreTake+0x158>
 8004d7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d84:	f001 fef2 	bl	8006b6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d88:	463a      	mov	r2, r7
 8004d8a:	f107 030c 	add.w	r3, r7, #12
 8004d8e:	4611      	mov	r1, r2
 8004d90:	4618      	mov	r0, r3
 8004d92:	f000 feed 	bl	8005b70 <xTaskCheckForTimeOut>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d132      	bne.n	8004e02 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d9c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004d9e:	f000 f94f 	bl	8005040 <prvIsQueueEmpty>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d026      	beq.n	8004df6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d109      	bne.n	8004dc4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8004db0:	f001 feaa 	bl	8006b08 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	4618      	mov	r0, r3
 8004dba:	f001 f853 	bl	8005e64 <xTaskPriorityInherit>
 8004dbe:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8004dc0:	f001 fed4 	bl	8006b6c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004dc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dc6:	3324      	adds	r3, #36	@ 0x24
 8004dc8:	683a      	ldr	r2, [r7, #0]
 8004dca:	4611      	mov	r1, r2
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f000 fe03 	bl	80059d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004dd2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004dd4:	f000 f8e2 	bl	8004f9c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004dd8:	f000 fc30 	bl	800563c <xTaskResumeAll>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	f47f af67 	bne.w	8004cb2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8004de4:	4b18      	ldr	r3, [pc, #96]	@ (8004e48 <xQueueSemaphoreTake+0x21c>)
 8004de6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004dea:	601a      	str	r2, [r3, #0]
 8004dec:	f3bf 8f4f 	dsb	sy
 8004df0:	f3bf 8f6f 	isb	sy
 8004df4:	e75d      	b.n	8004cb2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004df6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004df8:	f000 f8d0 	bl	8004f9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004dfc:	f000 fc1e 	bl	800563c <xTaskResumeAll>
 8004e00:	e757      	b.n	8004cb2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004e02:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004e04:	f000 f8ca 	bl	8004f9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e08:	f000 fc18 	bl	800563c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e0c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004e0e:	f000 f917 	bl	8005040 <prvIsQueueEmpty>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	f43f af4c 	beq.w	8004cb2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d00d      	beq.n	8004e3c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8004e20:	f001 fe72 	bl	8006b08 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004e24:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004e26:	f000 f811 	bl	8004e4c <prvGetDisinheritPriorityAfterTimeout>
 8004e2a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004e2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004e32:	4618      	mov	r0, r3
 8004e34:	f001 f8ee 	bl	8006014 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004e38:	f001 fe98 	bl	8006b6c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004e3c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3738      	adds	r7, #56	@ 0x38
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	e000ed04 	.word	0xe000ed04

08004e4c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b085      	sub	sp, #20
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d006      	beq.n	8004e6a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8004e66:	60fb      	str	r3, [r7, #12]
 8004e68:	e001      	b.n	8004e6e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
	}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3714      	adds	r7, #20
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b086      	sub	sp, #24
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e90:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d10d      	bne.n	8004eb6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d14d      	bne.n	8004f3e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f001 f844 	bl	8005f34 <xTaskPriorityDisinherit>
 8004eac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	609a      	str	r2, [r3, #8]
 8004eb4:	e043      	b.n	8004f3e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d119      	bne.n	8004ef0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6858      	ldr	r0, [r3, #4]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	68b9      	ldr	r1, [r7, #8]
 8004ec8:	f002 fbf7 	bl	80076ba <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	685a      	ldr	r2, [r3, #4]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ed4:	441a      	add	r2, r3
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	685a      	ldr	r2, [r3, #4]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d32b      	bcc.n	8004f3e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	605a      	str	r2, [r3, #4]
 8004eee:	e026      	b.n	8004f3e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	68d8      	ldr	r0, [r3, #12]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef8:	461a      	mov	r2, r3
 8004efa:	68b9      	ldr	r1, [r7, #8]
 8004efc:	f002 fbdd 	bl	80076ba <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	68da      	ldr	r2, [r3, #12]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f08:	425b      	negs	r3, r3
 8004f0a:	441a      	add	r2, r3
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	68da      	ldr	r2, [r3, #12]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d207      	bcs.n	8004f2c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	689a      	ldr	r2, [r3, #8]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f24:	425b      	negs	r3, r3
 8004f26:	441a      	add	r2, r3
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2b02      	cmp	r3, #2
 8004f30:	d105      	bne.n	8004f3e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d002      	beq.n	8004f3e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	1c5a      	adds	r2, r3, #1
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004f46:	697b      	ldr	r3, [r7, #20]
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3718      	adds	r7, #24
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d018      	beq.n	8004f94 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	68da      	ldr	r2, [r3, #12]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f6a:	441a      	add	r2, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	68da      	ldr	r2, [r3, #12]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d303      	bcc.n	8004f84 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	68d9      	ldr	r1, [r3, #12]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	6838      	ldr	r0, [r7, #0]
 8004f90:	f002 fb93 	bl	80076ba <memcpy>
	}
}
 8004f94:	bf00      	nop
 8004f96:	3708      	adds	r7, #8
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004fa4:	f001 fdb0 	bl	8006b08 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004fae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004fb0:	e011      	b.n	8004fd6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d012      	beq.n	8004fe0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	3324      	adds	r3, #36	@ 0x24
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f000 fd5c 	bl	8005a7c <xTaskRemoveFromEventList>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d001      	beq.n	8004fce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004fca:	f000 fe35 	bl	8005c38 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004fce:	7bfb      	ldrb	r3, [r7, #15]
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004fd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	dce9      	bgt.n	8004fb2 <prvUnlockQueue+0x16>
 8004fde:	e000      	b.n	8004fe2 <prvUnlockQueue+0x46>
					break;
 8004fe0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	22ff      	movs	r2, #255	@ 0xff
 8004fe6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004fea:	f001 fdbf 	bl	8006b6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004fee:	f001 fd8b 	bl	8006b08 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004ff8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004ffa:	e011      	b.n	8005020 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d012      	beq.n	800502a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	3310      	adds	r3, #16
 8005008:	4618      	mov	r0, r3
 800500a:	f000 fd37 	bl	8005a7c <xTaskRemoveFromEventList>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d001      	beq.n	8005018 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005014:	f000 fe10 	bl	8005c38 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005018:	7bbb      	ldrb	r3, [r7, #14]
 800501a:	3b01      	subs	r3, #1
 800501c:	b2db      	uxtb	r3, r3
 800501e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005020:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005024:	2b00      	cmp	r3, #0
 8005026:	dce9      	bgt.n	8004ffc <prvUnlockQueue+0x60>
 8005028:	e000      	b.n	800502c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800502a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	22ff      	movs	r2, #255	@ 0xff
 8005030:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005034:	f001 fd9a 	bl	8006b6c <vPortExitCritical>
}
 8005038:	bf00      	nop
 800503a:	3710      	adds	r7, #16
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}

08005040 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005048:	f001 fd5e 	bl	8006b08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005050:	2b00      	cmp	r3, #0
 8005052:	d102      	bne.n	800505a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005054:	2301      	movs	r3, #1
 8005056:	60fb      	str	r3, [r7, #12]
 8005058:	e001      	b.n	800505e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800505a:	2300      	movs	r3, #0
 800505c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800505e:	f001 fd85 	bl	8006b6c <vPortExitCritical>

	return xReturn;
 8005062:	68fb      	ldr	r3, [r7, #12]
}
 8005064:	4618      	mov	r0, r3
 8005066:	3710      	adds	r7, #16
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005074:	f001 fd48 	bl	8006b08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005080:	429a      	cmp	r2, r3
 8005082:	d102      	bne.n	800508a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005084:	2301      	movs	r3, #1
 8005086:	60fb      	str	r3, [r7, #12]
 8005088:	e001      	b.n	800508e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800508a:	2300      	movs	r3, #0
 800508c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800508e:	f001 fd6d 	bl	8006b6c <vPortExitCritical>

	return xReturn;
 8005092:	68fb      	ldr	r3, [r7, #12]
}
 8005094:	4618      	mov	r0, r3
 8005096:	3710      	adds	r7, #16
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800509c:	b480      	push	{r7}
 800509e:	b085      	sub	sp, #20
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80050a6:	2300      	movs	r3, #0
 80050a8:	60fb      	str	r3, [r7, #12]
 80050aa:	e014      	b.n	80050d6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80050ac:	4a0f      	ldr	r2, [pc, #60]	@ (80050ec <vQueueAddToRegistry+0x50>)
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d10b      	bne.n	80050d0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80050b8:	490c      	ldr	r1, [pc, #48]	@ (80050ec <vQueueAddToRegistry+0x50>)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	683a      	ldr	r2, [r7, #0]
 80050be:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80050c2:	4a0a      	ldr	r2, [pc, #40]	@ (80050ec <vQueueAddToRegistry+0x50>)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	00db      	lsls	r3, r3, #3
 80050c8:	4413      	add	r3, r2
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80050ce:	e006      	b.n	80050de <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	3301      	adds	r3, #1
 80050d4:	60fb      	str	r3, [r7, #12]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2b07      	cmp	r3, #7
 80050da:	d9e7      	bls.n	80050ac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80050dc:	bf00      	nop
 80050de:	bf00      	nop
 80050e0:	3714      	adds	r7, #20
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr
 80050ea:	bf00      	nop
 80050ec:	20000944 	.word	0x20000944

080050f0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b086      	sub	sp, #24
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005100:	f001 fd02 	bl	8006b08 <vPortEnterCritical>
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800510a:	b25b      	sxtb	r3, r3
 800510c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005110:	d103      	bne.n	800511a <vQueueWaitForMessageRestricted+0x2a>
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	2200      	movs	r2, #0
 8005116:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005120:	b25b      	sxtb	r3, r3
 8005122:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005126:	d103      	bne.n	8005130 <vQueueWaitForMessageRestricted+0x40>
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	2200      	movs	r2, #0
 800512c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005130:	f001 fd1c 	bl	8006b6c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005138:	2b00      	cmp	r3, #0
 800513a:	d106      	bne.n	800514a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	3324      	adds	r3, #36	@ 0x24
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	68b9      	ldr	r1, [r7, #8]
 8005144:	4618      	mov	r0, r3
 8005146:	f000 fc6d 	bl	8005a24 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800514a:	6978      	ldr	r0, [r7, #20]
 800514c:	f7ff ff26 	bl	8004f9c <prvUnlockQueue>
	}
 8005150:	bf00      	nop
 8005152:	3718      	adds	r7, #24
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005158:	b580      	push	{r7, lr}
 800515a:	b08e      	sub	sp, #56	@ 0x38
 800515c:	af04      	add	r7, sp, #16
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	607a      	str	r2, [r7, #4]
 8005164:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005166:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005168:	2b00      	cmp	r3, #0
 800516a:	d10b      	bne.n	8005184 <xTaskCreateStatic+0x2c>
	__asm volatile
 800516c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005170:	f383 8811 	msr	BASEPRI, r3
 8005174:	f3bf 8f6f 	isb	sy
 8005178:	f3bf 8f4f 	dsb	sy
 800517c:	623b      	str	r3, [r7, #32]
}
 800517e:	bf00      	nop
 8005180:	bf00      	nop
 8005182:	e7fd      	b.n	8005180 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005186:	2b00      	cmp	r3, #0
 8005188:	d10b      	bne.n	80051a2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800518a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800518e:	f383 8811 	msr	BASEPRI, r3
 8005192:	f3bf 8f6f 	isb	sy
 8005196:	f3bf 8f4f 	dsb	sy
 800519a:	61fb      	str	r3, [r7, #28]
}
 800519c:	bf00      	nop
 800519e:	bf00      	nop
 80051a0:	e7fd      	b.n	800519e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80051a2:	23a8      	movs	r3, #168	@ 0xa8
 80051a4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	2ba8      	cmp	r3, #168	@ 0xa8
 80051aa:	d00b      	beq.n	80051c4 <xTaskCreateStatic+0x6c>
	__asm volatile
 80051ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051b0:	f383 8811 	msr	BASEPRI, r3
 80051b4:	f3bf 8f6f 	isb	sy
 80051b8:	f3bf 8f4f 	dsb	sy
 80051bc:	61bb      	str	r3, [r7, #24]
}
 80051be:	bf00      	nop
 80051c0:	bf00      	nop
 80051c2:	e7fd      	b.n	80051c0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80051c4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80051c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d01e      	beq.n	800520a <xTaskCreateStatic+0xb2>
 80051cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d01b      	beq.n	800520a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80051d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051d4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80051d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80051da:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80051dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051de:	2202      	movs	r2, #2
 80051e0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80051e4:	2300      	movs	r3, #0
 80051e6:	9303      	str	r3, [sp, #12]
 80051e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ea:	9302      	str	r3, [sp, #8]
 80051ec:	f107 0314 	add.w	r3, r7, #20
 80051f0:	9301      	str	r3, [sp, #4]
 80051f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051f4:	9300      	str	r3, [sp, #0]
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	68b9      	ldr	r1, [r7, #8]
 80051fc:	68f8      	ldr	r0, [r7, #12]
 80051fe:	f000 f851 	bl	80052a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005202:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005204:	f000 f8f6 	bl	80053f4 <prvAddNewTaskToReadyList>
 8005208:	e001      	b.n	800520e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800520a:	2300      	movs	r3, #0
 800520c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800520e:	697b      	ldr	r3, [r7, #20]
	}
 8005210:	4618      	mov	r0, r3
 8005212:	3728      	adds	r7, #40	@ 0x28
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005218:	b580      	push	{r7, lr}
 800521a:	b08c      	sub	sp, #48	@ 0x30
 800521c:	af04      	add	r7, sp, #16
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	603b      	str	r3, [r7, #0]
 8005224:	4613      	mov	r3, r2
 8005226:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005228:	88fb      	ldrh	r3, [r7, #6]
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	4618      	mov	r0, r3
 800522e:	f001 fd8d 	bl	8006d4c <pvPortMalloc>
 8005232:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d00e      	beq.n	8005258 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800523a:	20a8      	movs	r0, #168	@ 0xa8
 800523c:	f001 fd86 	bl	8006d4c <pvPortMalloc>
 8005240:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d003      	beq.n	8005250 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	697a      	ldr	r2, [r7, #20]
 800524c:	631a      	str	r2, [r3, #48]	@ 0x30
 800524e:	e005      	b.n	800525c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005250:	6978      	ldr	r0, [r7, #20]
 8005252:	f001 fe49 	bl	8006ee8 <vPortFree>
 8005256:	e001      	b.n	800525c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005258:	2300      	movs	r3, #0
 800525a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d017      	beq.n	8005292 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	2200      	movs	r2, #0
 8005266:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800526a:	88fa      	ldrh	r2, [r7, #6]
 800526c:	2300      	movs	r3, #0
 800526e:	9303      	str	r3, [sp, #12]
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	9302      	str	r3, [sp, #8]
 8005274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005276:	9301      	str	r3, [sp, #4]
 8005278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800527a:	9300      	str	r3, [sp, #0]
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	68b9      	ldr	r1, [r7, #8]
 8005280:	68f8      	ldr	r0, [r7, #12]
 8005282:	f000 f80f 	bl	80052a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005286:	69f8      	ldr	r0, [r7, #28]
 8005288:	f000 f8b4 	bl	80053f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800528c:	2301      	movs	r3, #1
 800528e:	61bb      	str	r3, [r7, #24]
 8005290:	e002      	b.n	8005298 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005292:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005296:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005298:	69bb      	ldr	r3, [r7, #24]
	}
 800529a:	4618      	mov	r0, r3
 800529c:	3720      	adds	r7, #32
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
	...

080052a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b088      	sub	sp, #32
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	60f8      	str	r0, [r7, #12]
 80052ac:	60b9      	str	r1, [r7, #8]
 80052ae:	607a      	str	r2, [r7, #4]
 80052b0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80052b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	461a      	mov	r2, r3
 80052bc:	21a5      	movs	r1, #165	@ 0xa5
 80052be:	f002 f92b 	bl	8007518 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80052c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80052cc:	3b01      	subs	r3, #1
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	4413      	add	r3, r2
 80052d2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	f023 0307 	bic.w	r3, r3, #7
 80052da:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80052dc:	69bb      	ldr	r3, [r7, #24]
 80052de:	f003 0307 	and.w	r3, r3, #7
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00b      	beq.n	80052fe <prvInitialiseNewTask+0x5a>
	__asm volatile
 80052e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052ea:	f383 8811 	msr	BASEPRI, r3
 80052ee:	f3bf 8f6f 	isb	sy
 80052f2:	f3bf 8f4f 	dsb	sy
 80052f6:	617b      	str	r3, [r7, #20]
}
 80052f8:	bf00      	nop
 80052fa:	bf00      	nop
 80052fc:	e7fd      	b.n	80052fa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d01f      	beq.n	8005344 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005304:	2300      	movs	r3, #0
 8005306:	61fb      	str	r3, [r7, #28]
 8005308:	e012      	b.n	8005330 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800530a:	68ba      	ldr	r2, [r7, #8]
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	4413      	add	r3, r2
 8005310:	7819      	ldrb	r1, [r3, #0]
 8005312:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	4413      	add	r3, r2
 8005318:	3334      	adds	r3, #52	@ 0x34
 800531a:	460a      	mov	r2, r1
 800531c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800531e:	68ba      	ldr	r2, [r7, #8]
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	4413      	add	r3, r2
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d006      	beq.n	8005338 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	3301      	adds	r3, #1
 800532e:	61fb      	str	r3, [r7, #28]
 8005330:	69fb      	ldr	r3, [r7, #28]
 8005332:	2b0f      	cmp	r3, #15
 8005334:	d9e9      	bls.n	800530a <prvInitialiseNewTask+0x66>
 8005336:	e000      	b.n	800533a <prvInitialiseNewTask+0x96>
			{
				break;
 8005338:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800533a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800533c:	2200      	movs	r2, #0
 800533e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005342:	e003      	b.n	800534c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005346:	2200      	movs	r2, #0
 8005348:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800534c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800534e:	2b37      	cmp	r3, #55	@ 0x37
 8005350:	d901      	bls.n	8005356 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005352:	2337      	movs	r3, #55	@ 0x37
 8005354:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005358:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800535a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800535c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800535e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005360:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005364:	2200      	movs	r2, #0
 8005366:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800536a:	3304      	adds	r3, #4
 800536c:	4618      	mov	r0, r3
 800536e:	f7fe ff49 	bl	8004204 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005374:	3318      	adds	r3, #24
 8005376:	4618      	mov	r0, r3
 8005378:	f7fe ff44 	bl	8004204 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800537c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800537e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005380:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005384:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800538a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800538c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800538e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005390:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005394:	2200      	movs	r2, #0
 8005396:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800539a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800539c:	2200      	movs	r2, #0
 800539e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80053a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053a4:	3354      	adds	r3, #84	@ 0x54
 80053a6:	224c      	movs	r2, #76	@ 0x4c
 80053a8:	2100      	movs	r1, #0
 80053aa:	4618      	mov	r0, r3
 80053ac:	f002 f8b4 	bl	8007518 <memset>
 80053b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053b2:	4a0d      	ldr	r2, [pc, #52]	@ (80053e8 <prvInitialiseNewTask+0x144>)
 80053b4:	659a      	str	r2, [r3, #88]	@ 0x58
 80053b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053b8:	4a0c      	ldr	r2, [pc, #48]	@ (80053ec <prvInitialiseNewTask+0x148>)
 80053ba:	65da      	str	r2, [r3, #92]	@ 0x5c
 80053bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053be:	4a0c      	ldr	r2, [pc, #48]	@ (80053f0 <prvInitialiseNewTask+0x14c>)
 80053c0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80053c2:	683a      	ldr	r2, [r7, #0]
 80053c4:	68f9      	ldr	r1, [r7, #12]
 80053c6:	69b8      	ldr	r0, [r7, #24]
 80053c8:	f001 fa6a 	bl	80068a0 <pxPortInitialiseStack>
 80053cc:	4602      	mov	r2, r0
 80053ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053d0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80053d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d002      	beq.n	80053de <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80053d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053de:	bf00      	nop
 80053e0:	3720      	adds	r7, #32
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	20004bd8 	.word	0x20004bd8
 80053ec:	20004c40 	.word	0x20004c40
 80053f0:	20004ca8 	.word	0x20004ca8

080053f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b082      	sub	sp, #8
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80053fc:	f001 fb84 	bl	8006b08 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005400:	4b2d      	ldr	r3, [pc, #180]	@ (80054b8 <prvAddNewTaskToReadyList+0xc4>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	3301      	adds	r3, #1
 8005406:	4a2c      	ldr	r2, [pc, #176]	@ (80054b8 <prvAddNewTaskToReadyList+0xc4>)
 8005408:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800540a:	4b2c      	ldr	r3, [pc, #176]	@ (80054bc <prvAddNewTaskToReadyList+0xc8>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d109      	bne.n	8005426 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005412:	4a2a      	ldr	r2, [pc, #168]	@ (80054bc <prvAddNewTaskToReadyList+0xc8>)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005418:	4b27      	ldr	r3, [pc, #156]	@ (80054b8 <prvAddNewTaskToReadyList+0xc4>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2b01      	cmp	r3, #1
 800541e:	d110      	bne.n	8005442 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005420:	f000 fc2e 	bl	8005c80 <prvInitialiseTaskLists>
 8005424:	e00d      	b.n	8005442 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005426:	4b26      	ldr	r3, [pc, #152]	@ (80054c0 <prvAddNewTaskToReadyList+0xcc>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d109      	bne.n	8005442 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800542e:	4b23      	ldr	r3, [pc, #140]	@ (80054bc <prvAddNewTaskToReadyList+0xc8>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005438:	429a      	cmp	r2, r3
 800543a:	d802      	bhi.n	8005442 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800543c:	4a1f      	ldr	r2, [pc, #124]	@ (80054bc <prvAddNewTaskToReadyList+0xc8>)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005442:	4b20      	ldr	r3, [pc, #128]	@ (80054c4 <prvAddNewTaskToReadyList+0xd0>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	3301      	adds	r3, #1
 8005448:	4a1e      	ldr	r2, [pc, #120]	@ (80054c4 <prvAddNewTaskToReadyList+0xd0>)
 800544a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800544c:	4b1d      	ldr	r3, [pc, #116]	@ (80054c4 <prvAddNewTaskToReadyList+0xd0>)
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005458:	4b1b      	ldr	r3, [pc, #108]	@ (80054c8 <prvAddNewTaskToReadyList+0xd4>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	429a      	cmp	r2, r3
 800545e:	d903      	bls.n	8005468 <prvAddNewTaskToReadyList+0x74>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005464:	4a18      	ldr	r2, [pc, #96]	@ (80054c8 <prvAddNewTaskToReadyList+0xd4>)
 8005466:	6013      	str	r3, [r2, #0]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800546c:	4613      	mov	r3, r2
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	4413      	add	r3, r2
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	4a15      	ldr	r2, [pc, #84]	@ (80054cc <prvAddNewTaskToReadyList+0xd8>)
 8005476:	441a      	add	r2, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	3304      	adds	r3, #4
 800547c:	4619      	mov	r1, r3
 800547e:	4610      	mov	r0, r2
 8005480:	f7fe fecd 	bl	800421e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005484:	f001 fb72 	bl	8006b6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005488:	4b0d      	ldr	r3, [pc, #52]	@ (80054c0 <prvAddNewTaskToReadyList+0xcc>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d00e      	beq.n	80054ae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005490:	4b0a      	ldr	r3, [pc, #40]	@ (80054bc <prvAddNewTaskToReadyList+0xc8>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800549a:	429a      	cmp	r2, r3
 800549c:	d207      	bcs.n	80054ae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800549e:	4b0c      	ldr	r3, [pc, #48]	@ (80054d0 <prvAddNewTaskToReadyList+0xdc>)
 80054a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054a4:	601a      	str	r2, [r3, #0]
 80054a6:	f3bf 8f4f 	dsb	sy
 80054aa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054ae:	bf00      	nop
 80054b0:	3708      	adds	r7, #8
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	bf00      	nop
 80054b8:	20000e58 	.word	0x20000e58
 80054bc:	20000984 	.word	0x20000984
 80054c0:	20000e64 	.word	0x20000e64
 80054c4:	20000e74 	.word	0x20000e74
 80054c8:	20000e60 	.word	0x20000e60
 80054cc:	20000988 	.word	0x20000988
 80054d0:	e000ed04 	.word	0xe000ed04

080054d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80054dc:	2300      	movs	r3, #0
 80054de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d018      	beq.n	8005518 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80054e6:	4b14      	ldr	r3, [pc, #80]	@ (8005538 <vTaskDelay+0x64>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00b      	beq.n	8005506 <vTaskDelay+0x32>
	__asm volatile
 80054ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054f2:	f383 8811 	msr	BASEPRI, r3
 80054f6:	f3bf 8f6f 	isb	sy
 80054fa:	f3bf 8f4f 	dsb	sy
 80054fe:	60bb      	str	r3, [r7, #8]
}
 8005500:	bf00      	nop
 8005502:	bf00      	nop
 8005504:	e7fd      	b.n	8005502 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005506:	f000 f88b 	bl	8005620 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800550a:	2100      	movs	r1, #0
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f000 fe19 	bl	8006144 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005512:	f000 f893 	bl	800563c <xTaskResumeAll>
 8005516:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d107      	bne.n	800552e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800551e:	4b07      	ldr	r3, [pc, #28]	@ (800553c <vTaskDelay+0x68>)
 8005520:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005524:	601a      	str	r2, [r3, #0]
 8005526:	f3bf 8f4f 	dsb	sy
 800552a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800552e:	bf00      	nop
 8005530:	3710      	adds	r7, #16
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	20000e80 	.word	0x20000e80
 800553c:	e000ed04 	.word	0xe000ed04

08005540 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b08a      	sub	sp, #40	@ 0x28
 8005544:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005546:	2300      	movs	r3, #0
 8005548:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800554a:	2300      	movs	r3, #0
 800554c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800554e:	463a      	mov	r2, r7
 8005550:	1d39      	adds	r1, r7, #4
 8005552:	f107 0308 	add.w	r3, r7, #8
 8005556:	4618      	mov	r0, r3
 8005558:	f7fe fe00 	bl	800415c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800555c:	6839      	ldr	r1, [r7, #0]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	68ba      	ldr	r2, [r7, #8]
 8005562:	9202      	str	r2, [sp, #8]
 8005564:	9301      	str	r3, [sp, #4]
 8005566:	2300      	movs	r3, #0
 8005568:	9300      	str	r3, [sp, #0]
 800556a:	2300      	movs	r3, #0
 800556c:	460a      	mov	r2, r1
 800556e:	4924      	ldr	r1, [pc, #144]	@ (8005600 <vTaskStartScheduler+0xc0>)
 8005570:	4824      	ldr	r0, [pc, #144]	@ (8005604 <vTaskStartScheduler+0xc4>)
 8005572:	f7ff fdf1 	bl	8005158 <xTaskCreateStatic>
 8005576:	4603      	mov	r3, r0
 8005578:	4a23      	ldr	r2, [pc, #140]	@ (8005608 <vTaskStartScheduler+0xc8>)
 800557a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800557c:	4b22      	ldr	r3, [pc, #136]	@ (8005608 <vTaskStartScheduler+0xc8>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d002      	beq.n	800558a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005584:	2301      	movs	r3, #1
 8005586:	617b      	str	r3, [r7, #20]
 8005588:	e001      	b.n	800558e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800558a:	2300      	movs	r3, #0
 800558c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	2b01      	cmp	r3, #1
 8005592:	d102      	bne.n	800559a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005594:	f000 fe2a 	bl	80061ec <xTimerCreateTimerTask>
 8005598:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	2b01      	cmp	r3, #1
 800559e:	d11b      	bne.n	80055d8 <vTaskStartScheduler+0x98>
	__asm volatile
 80055a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055a4:	f383 8811 	msr	BASEPRI, r3
 80055a8:	f3bf 8f6f 	isb	sy
 80055ac:	f3bf 8f4f 	dsb	sy
 80055b0:	613b      	str	r3, [r7, #16]
}
 80055b2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80055b4:	4b15      	ldr	r3, [pc, #84]	@ (800560c <vTaskStartScheduler+0xcc>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	3354      	adds	r3, #84	@ 0x54
 80055ba:	4a15      	ldr	r2, [pc, #84]	@ (8005610 <vTaskStartScheduler+0xd0>)
 80055bc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80055be:	4b15      	ldr	r3, [pc, #84]	@ (8005614 <vTaskStartScheduler+0xd4>)
 80055c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80055c4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80055c6:	4b14      	ldr	r3, [pc, #80]	@ (8005618 <vTaskStartScheduler+0xd8>)
 80055c8:	2201      	movs	r2, #1
 80055ca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80055cc:	4b13      	ldr	r3, [pc, #76]	@ (800561c <vTaskStartScheduler+0xdc>)
 80055ce:	2200      	movs	r2, #0
 80055d0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80055d2:	f001 f9f5 	bl	80069c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80055d6:	e00f      	b.n	80055f8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80055de:	d10b      	bne.n	80055f8 <vTaskStartScheduler+0xb8>
	__asm volatile
 80055e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055e4:	f383 8811 	msr	BASEPRI, r3
 80055e8:	f3bf 8f6f 	isb	sy
 80055ec:	f3bf 8f4f 	dsb	sy
 80055f0:	60fb      	str	r3, [r7, #12]
}
 80055f2:	bf00      	nop
 80055f4:	bf00      	nop
 80055f6:	e7fd      	b.n	80055f4 <vTaskStartScheduler+0xb4>
}
 80055f8:	bf00      	nop
 80055fa:	3718      	adds	r7, #24
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	08007b94 	.word	0x08007b94
 8005604:	08005c51 	.word	0x08005c51
 8005608:	20000e7c 	.word	0x20000e7c
 800560c:	20000984 	.word	0x20000984
 8005610:	2000001c 	.word	0x2000001c
 8005614:	20000e78 	.word	0x20000e78
 8005618:	20000e64 	.word	0x20000e64
 800561c:	20000e5c 	.word	0x20000e5c

08005620 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005620:	b480      	push	{r7}
 8005622:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005624:	4b04      	ldr	r3, [pc, #16]	@ (8005638 <vTaskSuspendAll+0x18>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	3301      	adds	r3, #1
 800562a:	4a03      	ldr	r2, [pc, #12]	@ (8005638 <vTaskSuspendAll+0x18>)
 800562c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800562e:	bf00      	nop
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr
 8005638:	20000e80 	.word	0x20000e80

0800563c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005642:	2300      	movs	r3, #0
 8005644:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005646:	2300      	movs	r3, #0
 8005648:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800564a:	4b42      	ldr	r3, [pc, #264]	@ (8005754 <xTaskResumeAll+0x118>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d10b      	bne.n	800566a <xTaskResumeAll+0x2e>
	__asm volatile
 8005652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005656:	f383 8811 	msr	BASEPRI, r3
 800565a:	f3bf 8f6f 	isb	sy
 800565e:	f3bf 8f4f 	dsb	sy
 8005662:	603b      	str	r3, [r7, #0]
}
 8005664:	bf00      	nop
 8005666:	bf00      	nop
 8005668:	e7fd      	b.n	8005666 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800566a:	f001 fa4d 	bl	8006b08 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800566e:	4b39      	ldr	r3, [pc, #228]	@ (8005754 <xTaskResumeAll+0x118>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	3b01      	subs	r3, #1
 8005674:	4a37      	ldr	r2, [pc, #220]	@ (8005754 <xTaskResumeAll+0x118>)
 8005676:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005678:	4b36      	ldr	r3, [pc, #216]	@ (8005754 <xTaskResumeAll+0x118>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d162      	bne.n	8005746 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005680:	4b35      	ldr	r3, [pc, #212]	@ (8005758 <xTaskResumeAll+0x11c>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d05e      	beq.n	8005746 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005688:	e02f      	b.n	80056ea <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800568a:	4b34      	ldr	r3, [pc, #208]	@ (800575c <xTaskResumeAll+0x120>)
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	3318      	adds	r3, #24
 8005696:	4618      	mov	r0, r3
 8005698:	f7fe fe1e 	bl	80042d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	3304      	adds	r3, #4
 80056a0:	4618      	mov	r0, r3
 80056a2:	f7fe fe19 	bl	80042d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056aa:	4b2d      	ldr	r3, [pc, #180]	@ (8005760 <xTaskResumeAll+0x124>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d903      	bls.n	80056ba <xTaskResumeAll+0x7e>
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056b6:	4a2a      	ldr	r2, [pc, #168]	@ (8005760 <xTaskResumeAll+0x124>)
 80056b8:	6013      	str	r3, [r2, #0]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056be:	4613      	mov	r3, r2
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	4413      	add	r3, r2
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	4a27      	ldr	r2, [pc, #156]	@ (8005764 <xTaskResumeAll+0x128>)
 80056c8:	441a      	add	r2, r3
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	3304      	adds	r3, #4
 80056ce:	4619      	mov	r1, r3
 80056d0:	4610      	mov	r0, r2
 80056d2:	f7fe fda4 	bl	800421e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056da:	4b23      	ldr	r3, [pc, #140]	@ (8005768 <xTaskResumeAll+0x12c>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d302      	bcc.n	80056ea <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80056e4:	4b21      	ldr	r3, [pc, #132]	@ (800576c <xTaskResumeAll+0x130>)
 80056e6:	2201      	movs	r2, #1
 80056e8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80056ea:	4b1c      	ldr	r3, [pc, #112]	@ (800575c <xTaskResumeAll+0x120>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d1cb      	bne.n	800568a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d001      	beq.n	80056fc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80056f8:	f000 fb66 	bl	8005dc8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80056fc:	4b1c      	ldr	r3, [pc, #112]	@ (8005770 <xTaskResumeAll+0x134>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d010      	beq.n	800572a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005708:	f000 f846 	bl	8005798 <xTaskIncrementTick>
 800570c:	4603      	mov	r3, r0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d002      	beq.n	8005718 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005712:	4b16      	ldr	r3, [pc, #88]	@ (800576c <xTaskResumeAll+0x130>)
 8005714:	2201      	movs	r2, #1
 8005716:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	3b01      	subs	r3, #1
 800571c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d1f1      	bne.n	8005708 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005724:	4b12      	ldr	r3, [pc, #72]	@ (8005770 <xTaskResumeAll+0x134>)
 8005726:	2200      	movs	r2, #0
 8005728:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800572a:	4b10      	ldr	r3, [pc, #64]	@ (800576c <xTaskResumeAll+0x130>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d009      	beq.n	8005746 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005732:	2301      	movs	r3, #1
 8005734:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005736:	4b0f      	ldr	r3, [pc, #60]	@ (8005774 <xTaskResumeAll+0x138>)
 8005738:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800573c:	601a      	str	r2, [r3, #0]
 800573e:	f3bf 8f4f 	dsb	sy
 8005742:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005746:	f001 fa11 	bl	8006b6c <vPortExitCritical>

	return xAlreadyYielded;
 800574a:	68bb      	ldr	r3, [r7, #8]
}
 800574c:	4618      	mov	r0, r3
 800574e:	3710      	adds	r7, #16
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	20000e80 	.word	0x20000e80
 8005758:	20000e58 	.word	0x20000e58
 800575c:	20000e18 	.word	0x20000e18
 8005760:	20000e60 	.word	0x20000e60
 8005764:	20000988 	.word	0x20000988
 8005768:	20000984 	.word	0x20000984
 800576c:	20000e6c 	.word	0x20000e6c
 8005770:	20000e68 	.word	0x20000e68
 8005774:	e000ed04 	.word	0xe000ed04

08005778 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800577e:	4b05      	ldr	r3, [pc, #20]	@ (8005794 <xTaskGetTickCount+0x1c>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005784:	687b      	ldr	r3, [r7, #4]
}
 8005786:	4618      	mov	r0, r3
 8005788:	370c      	adds	r7, #12
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr
 8005792:	bf00      	nop
 8005794:	20000e5c 	.word	0x20000e5c

08005798 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b086      	sub	sp, #24
 800579c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800579e:	2300      	movs	r3, #0
 80057a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057a2:	4b4f      	ldr	r3, [pc, #316]	@ (80058e0 <xTaskIncrementTick+0x148>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	f040 8090 	bne.w	80058cc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80057ac:	4b4d      	ldr	r3, [pc, #308]	@ (80058e4 <xTaskIncrementTick+0x14c>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	3301      	adds	r3, #1
 80057b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80057b4:	4a4b      	ldr	r2, [pc, #300]	@ (80058e4 <xTaskIncrementTick+0x14c>)
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d121      	bne.n	8005804 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80057c0:	4b49      	ldr	r3, [pc, #292]	@ (80058e8 <xTaskIncrementTick+0x150>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d00b      	beq.n	80057e2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80057ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057ce:	f383 8811 	msr	BASEPRI, r3
 80057d2:	f3bf 8f6f 	isb	sy
 80057d6:	f3bf 8f4f 	dsb	sy
 80057da:	603b      	str	r3, [r7, #0]
}
 80057dc:	bf00      	nop
 80057de:	bf00      	nop
 80057e0:	e7fd      	b.n	80057de <xTaskIncrementTick+0x46>
 80057e2:	4b41      	ldr	r3, [pc, #260]	@ (80058e8 <xTaskIncrementTick+0x150>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	60fb      	str	r3, [r7, #12]
 80057e8:	4b40      	ldr	r3, [pc, #256]	@ (80058ec <xTaskIncrementTick+0x154>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a3e      	ldr	r2, [pc, #248]	@ (80058e8 <xTaskIncrementTick+0x150>)
 80057ee:	6013      	str	r3, [r2, #0]
 80057f0:	4a3e      	ldr	r2, [pc, #248]	@ (80058ec <xTaskIncrementTick+0x154>)
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6013      	str	r3, [r2, #0]
 80057f6:	4b3e      	ldr	r3, [pc, #248]	@ (80058f0 <xTaskIncrementTick+0x158>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	3301      	adds	r3, #1
 80057fc:	4a3c      	ldr	r2, [pc, #240]	@ (80058f0 <xTaskIncrementTick+0x158>)
 80057fe:	6013      	str	r3, [r2, #0]
 8005800:	f000 fae2 	bl	8005dc8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005804:	4b3b      	ldr	r3, [pc, #236]	@ (80058f4 <xTaskIncrementTick+0x15c>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	693a      	ldr	r2, [r7, #16]
 800580a:	429a      	cmp	r2, r3
 800580c:	d349      	bcc.n	80058a2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800580e:	4b36      	ldr	r3, [pc, #216]	@ (80058e8 <xTaskIncrementTick+0x150>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d104      	bne.n	8005822 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005818:	4b36      	ldr	r3, [pc, #216]	@ (80058f4 <xTaskIncrementTick+0x15c>)
 800581a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800581e:	601a      	str	r2, [r3, #0]
					break;
 8005820:	e03f      	b.n	80058a2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005822:	4b31      	ldr	r3, [pc, #196]	@ (80058e8 <xTaskIncrementTick+0x150>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005832:	693a      	ldr	r2, [r7, #16]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	429a      	cmp	r2, r3
 8005838:	d203      	bcs.n	8005842 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800583a:	4a2e      	ldr	r2, [pc, #184]	@ (80058f4 <xTaskIncrementTick+0x15c>)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005840:	e02f      	b.n	80058a2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	3304      	adds	r3, #4
 8005846:	4618      	mov	r0, r3
 8005848:	f7fe fd46 	bl	80042d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005850:	2b00      	cmp	r3, #0
 8005852:	d004      	beq.n	800585e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	3318      	adds	r3, #24
 8005858:	4618      	mov	r0, r3
 800585a:	f7fe fd3d 	bl	80042d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005862:	4b25      	ldr	r3, [pc, #148]	@ (80058f8 <xTaskIncrementTick+0x160>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	429a      	cmp	r2, r3
 8005868:	d903      	bls.n	8005872 <xTaskIncrementTick+0xda>
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800586e:	4a22      	ldr	r2, [pc, #136]	@ (80058f8 <xTaskIncrementTick+0x160>)
 8005870:	6013      	str	r3, [r2, #0]
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005876:	4613      	mov	r3, r2
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	4413      	add	r3, r2
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	4a1f      	ldr	r2, [pc, #124]	@ (80058fc <xTaskIncrementTick+0x164>)
 8005880:	441a      	add	r2, r3
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	3304      	adds	r3, #4
 8005886:	4619      	mov	r1, r3
 8005888:	4610      	mov	r0, r2
 800588a:	f7fe fcc8 	bl	800421e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005892:	4b1b      	ldr	r3, [pc, #108]	@ (8005900 <xTaskIncrementTick+0x168>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005898:	429a      	cmp	r2, r3
 800589a:	d3b8      	bcc.n	800580e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800589c:	2301      	movs	r3, #1
 800589e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058a0:	e7b5      	b.n	800580e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80058a2:	4b17      	ldr	r3, [pc, #92]	@ (8005900 <xTaskIncrementTick+0x168>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058a8:	4914      	ldr	r1, [pc, #80]	@ (80058fc <xTaskIncrementTick+0x164>)
 80058aa:	4613      	mov	r3, r2
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	4413      	add	r3, r2
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	440b      	add	r3, r1
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d901      	bls.n	80058be <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80058ba:	2301      	movs	r3, #1
 80058bc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80058be:	4b11      	ldr	r3, [pc, #68]	@ (8005904 <xTaskIncrementTick+0x16c>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d007      	beq.n	80058d6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80058c6:	2301      	movs	r3, #1
 80058c8:	617b      	str	r3, [r7, #20]
 80058ca:	e004      	b.n	80058d6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80058cc:	4b0e      	ldr	r3, [pc, #56]	@ (8005908 <xTaskIncrementTick+0x170>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	3301      	adds	r3, #1
 80058d2:	4a0d      	ldr	r2, [pc, #52]	@ (8005908 <xTaskIncrementTick+0x170>)
 80058d4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80058d6:	697b      	ldr	r3, [r7, #20]
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3718      	adds	r7, #24
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}
 80058e0:	20000e80 	.word	0x20000e80
 80058e4:	20000e5c 	.word	0x20000e5c
 80058e8:	20000e10 	.word	0x20000e10
 80058ec:	20000e14 	.word	0x20000e14
 80058f0:	20000e70 	.word	0x20000e70
 80058f4:	20000e78 	.word	0x20000e78
 80058f8:	20000e60 	.word	0x20000e60
 80058fc:	20000988 	.word	0x20000988
 8005900:	20000984 	.word	0x20000984
 8005904:	20000e6c 	.word	0x20000e6c
 8005908:	20000e68 	.word	0x20000e68

0800590c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800590c:	b480      	push	{r7}
 800590e:	b085      	sub	sp, #20
 8005910:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005912:	4b2b      	ldr	r3, [pc, #172]	@ (80059c0 <vTaskSwitchContext+0xb4>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d003      	beq.n	8005922 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800591a:	4b2a      	ldr	r3, [pc, #168]	@ (80059c4 <vTaskSwitchContext+0xb8>)
 800591c:	2201      	movs	r2, #1
 800591e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005920:	e047      	b.n	80059b2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8005922:	4b28      	ldr	r3, [pc, #160]	@ (80059c4 <vTaskSwitchContext+0xb8>)
 8005924:	2200      	movs	r2, #0
 8005926:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005928:	4b27      	ldr	r3, [pc, #156]	@ (80059c8 <vTaskSwitchContext+0xbc>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	60fb      	str	r3, [r7, #12]
 800592e:	e011      	b.n	8005954 <vTaskSwitchContext+0x48>
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d10b      	bne.n	800594e <vTaskSwitchContext+0x42>
	__asm volatile
 8005936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800593a:	f383 8811 	msr	BASEPRI, r3
 800593e:	f3bf 8f6f 	isb	sy
 8005942:	f3bf 8f4f 	dsb	sy
 8005946:	607b      	str	r3, [r7, #4]
}
 8005948:	bf00      	nop
 800594a:	bf00      	nop
 800594c:	e7fd      	b.n	800594a <vTaskSwitchContext+0x3e>
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	3b01      	subs	r3, #1
 8005952:	60fb      	str	r3, [r7, #12]
 8005954:	491d      	ldr	r1, [pc, #116]	@ (80059cc <vTaskSwitchContext+0xc0>)
 8005956:	68fa      	ldr	r2, [r7, #12]
 8005958:	4613      	mov	r3, r2
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	4413      	add	r3, r2
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	440b      	add	r3, r1
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d0e3      	beq.n	8005930 <vTaskSwitchContext+0x24>
 8005968:	68fa      	ldr	r2, [r7, #12]
 800596a:	4613      	mov	r3, r2
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	4413      	add	r3, r2
 8005970:	009b      	lsls	r3, r3, #2
 8005972:	4a16      	ldr	r2, [pc, #88]	@ (80059cc <vTaskSwitchContext+0xc0>)
 8005974:	4413      	add	r3, r2
 8005976:	60bb      	str	r3, [r7, #8]
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	685a      	ldr	r2, [r3, #4]
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	605a      	str	r2, [r3, #4]
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	685a      	ldr	r2, [r3, #4]
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	3308      	adds	r3, #8
 800598a:	429a      	cmp	r2, r3
 800598c:	d104      	bne.n	8005998 <vTaskSwitchContext+0x8c>
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	685a      	ldr	r2, [r3, #4]
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	605a      	str	r2, [r3, #4]
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	4a0c      	ldr	r2, [pc, #48]	@ (80059d0 <vTaskSwitchContext+0xc4>)
 80059a0:	6013      	str	r3, [r2, #0]
 80059a2:	4a09      	ldr	r2, [pc, #36]	@ (80059c8 <vTaskSwitchContext+0xbc>)
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80059a8:	4b09      	ldr	r3, [pc, #36]	@ (80059d0 <vTaskSwitchContext+0xc4>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	3354      	adds	r3, #84	@ 0x54
 80059ae:	4a09      	ldr	r2, [pc, #36]	@ (80059d4 <vTaskSwitchContext+0xc8>)
 80059b0:	6013      	str	r3, [r2, #0]
}
 80059b2:	bf00      	nop
 80059b4:	3714      	adds	r7, #20
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr
 80059be:	bf00      	nop
 80059c0:	20000e80 	.word	0x20000e80
 80059c4:	20000e6c 	.word	0x20000e6c
 80059c8:	20000e60 	.word	0x20000e60
 80059cc:	20000988 	.word	0x20000988
 80059d0:	20000984 	.word	0x20000984
 80059d4:	2000001c 	.word	0x2000001c

080059d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d10b      	bne.n	8005a00 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80059e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ec:	f383 8811 	msr	BASEPRI, r3
 80059f0:	f3bf 8f6f 	isb	sy
 80059f4:	f3bf 8f4f 	dsb	sy
 80059f8:	60fb      	str	r3, [r7, #12]
}
 80059fa:	bf00      	nop
 80059fc:	bf00      	nop
 80059fe:	e7fd      	b.n	80059fc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005a00:	4b07      	ldr	r3, [pc, #28]	@ (8005a20 <vTaskPlaceOnEventList+0x48>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	3318      	adds	r3, #24
 8005a06:	4619      	mov	r1, r3
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f7fe fc2c 	bl	8004266 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005a0e:	2101      	movs	r1, #1
 8005a10:	6838      	ldr	r0, [r7, #0]
 8005a12:	f000 fb97 	bl	8006144 <prvAddCurrentTaskToDelayedList>
}
 8005a16:	bf00      	nop
 8005a18:	3710      	adds	r7, #16
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	20000984 	.word	0x20000984

08005a24 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b086      	sub	sp, #24
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	60b9      	str	r1, [r7, #8]
 8005a2e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d10b      	bne.n	8005a4e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a3a:	f383 8811 	msr	BASEPRI, r3
 8005a3e:	f3bf 8f6f 	isb	sy
 8005a42:	f3bf 8f4f 	dsb	sy
 8005a46:	617b      	str	r3, [r7, #20]
}
 8005a48:	bf00      	nop
 8005a4a:	bf00      	nop
 8005a4c:	e7fd      	b.n	8005a4a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005a4e:	4b0a      	ldr	r3, [pc, #40]	@ (8005a78 <vTaskPlaceOnEventListRestricted+0x54>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	3318      	adds	r3, #24
 8005a54:	4619      	mov	r1, r3
 8005a56:	68f8      	ldr	r0, [r7, #12]
 8005a58:	f7fe fbe1 	bl	800421e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d002      	beq.n	8005a68 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005a62:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005a66:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005a68:	6879      	ldr	r1, [r7, #4]
 8005a6a:	68b8      	ldr	r0, [r7, #8]
 8005a6c:	f000 fb6a 	bl	8006144 <prvAddCurrentTaskToDelayedList>
	}
 8005a70:	bf00      	nop
 8005a72:	3718      	adds	r7, #24
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}
 8005a78:	20000984 	.word	0x20000984

08005a7c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b086      	sub	sp, #24
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d10b      	bne.n	8005aaa <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a96:	f383 8811 	msr	BASEPRI, r3
 8005a9a:	f3bf 8f6f 	isb	sy
 8005a9e:	f3bf 8f4f 	dsb	sy
 8005aa2:	60fb      	str	r3, [r7, #12]
}
 8005aa4:	bf00      	nop
 8005aa6:	bf00      	nop
 8005aa8:	e7fd      	b.n	8005aa6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	3318      	adds	r3, #24
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f7fe fc12 	bl	80042d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ab4:	4b1d      	ldr	r3, [pc, #116]	@ (8005b2c <xTaskRemoveFromEventList+0xb0>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d11d      	bne.n	8005af8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	3304      	adds	r3, #4
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f7fe fc09 	bl	80042d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005aca:	4b19      	ldr	r3, [pc, #100]	@ (8005b30 <xTaskRemoveFromEventList+0xb4>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d903      	bls.n	8005ada <xTaskRemoveFromEventList+0x5e>
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ad6:	4a16      	ldr	r2, [pc, #88]	@ (8005b30 <xTaskRemoveFromEventList+0xb4>)
 8005ad8:	6013      	str	r3, [r2, #0]
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ade:	4613      	mov	r3, r2
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	4413      	add	r3, r2
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	4a13      	ldr	r2, [pc, #76]	@ (8005b34 <xTaskRemoveFromEventList+0xb8>)
 8005ae8:	441a      	add	r2, r3
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	3304      	adds	r3, #4
 8005aee:	4619      	mov	r1, r3
 8005af0:	4610      	mov	r0, r2
 8005af2:	f7fe fb94 	bl	800421e <vListInsertEnd>
 8005af6:	e005      	b.n	8005b04 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	3318      	adds	r3, #24
 8005afc:	4619      	mov	r1, r3
 8005afe:	480e      	ldr	r0, [pc, #56]	@ (8005b38 <xTaskRemoveFromEventList+0xbc>)
 8005b00:	f7fe fb8d 	bl	800421e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b08:	4b0c      	ldr	r3, [pc, #48]	@ (8005b3c <xTaskRemoveFromEventList+0xc0>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d905      	bls.n	8005b1e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005b12:	2301      	movs	r3, #1
 8005b14:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005b16:	4b0a      	ldr	r3, [pc, #40]	@ (8005b40 <xTaskRemoveFromEventList+0xc4>)
 8005b18:	2201      	movs	r2, #1
 8005b1a:	601a      	str	r2, [r3, #0]
 8005b1c:	e001      	b.n	8005b22 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005b22:	697b      	ldr	r3, [r7, #20]
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3718      	adds	r7, #24
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}
 8005b2c:	20000e80 	.word	0x20000e80
 8005b30:	20000e60 	.word	0x20000e60
 8005b34:	20000988 	.word	0x20000988
 8005b38:	20000e18 	.word	0x20000e18
 8005b3c:	20000984 	.word	0x20000984
 8005b40:	20000e6c 	.word	0x20000e6c

08005b44 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005b4c:	4b06      	ldr	r3, [pc, #24]	@ (8005b68 <vTaskInternalSetTimeOutState+0x24>)
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005b54:	4b05      	ldr	r3, [pc, #20]	@ (8005b6c <vTaskInternalSetTimeOutState+0x28>)
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	605a      	str	r2, [r3, #4]
}
 8005b5c:	bf00      	nop
 8005b5e:	370c      	adds	r7, #12
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr
 8005b68:	20000e70 	.word	0x20000e70
 8005b6c:	20000e5c 	.word	0x20000e5c

08005b70 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b088      	sub	sp, #32
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d10b      	bne.n	8005b98 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005b80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b84:	f383 8811 	msr	BASEPRI, r3
 8005b88:	f3bf 8f6f 	isb	sy
 8005b8c:	f3bf 8f4f 	dsb	sy
 8005b90:	613b      	str	r3, [r7, #16]
}
 8005b92:	bf00      	nop
 8005b94:	bf00      	nop
 8005b96:	e7fd      	b.n	8005b94 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d10b      	bne.n	8005bb6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ba2:	f383 8811 	msr	BASEPRI, r3
 8005ba6:	f3bf 8f6f 	isb	sy
 8005baa:	f3bf 8f4f 	dsb	sy
 8005bae:	60fb      	str	r3, [r7, #12]
}
 8005bb0:	bf00      	nop
 8005bb2:	bf00      	nop
 8005bb4:	e7fd      	b.n	8005bb2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005bb6:	f000 ffa7 	bl	8006b08 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005bba:	4b1d      	ldr	r3, [pc, #116]	@ (8005c30 <xTaskCheckForTimeOut+0xc0>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	69ba      	ldr	r2, [r7, #24]
 8005bc6:	1ad3      	subs	r3, r2, r3
 8005bc8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005bd2:	d102      	bne.n	8005bda <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	61fb      	str	r3, [r7, #28]
 8005bd8:	e023      	b.n	8005c22 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	4b15      	ldr	r3, [pc, #84]	@ (8005c34 <xTaskCheckForTimeOut+0xc4>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d007      	beq.n	8005bf6 <xTaskCheckForTimeOut+0x86>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	69ba      	ldr	r2, [r7, #24]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d302      	bcc.n	8005bf6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	61fb      	str	r3, [r7, #28]
 8005bf4:	e015      	b.n	8005c22 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	697a      	ldr	r2, [r7, #20]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d20b      	bcs.n	8005c18 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	1ad2      	subs	r2, r2, r3
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f7ff ff99 	bl	8005b44 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005c12:	2300      	movs	r3, #0
 8005c14:	61fb      	str	r3, [r7, #28]
 8005c16:	e004      	b.n	8005c22 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005c22:	f000 ffa3 	bl	8006b6c <vPortExitCritical>

	return xReturn;
 8005c26:	69fb      	ldr	r3, [r7, #28]
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3720      	adds	r7, #32
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	20000e5c 	.word	0x20000e5c
 8005c34:	20000e70 	.word	0x20000e70

08005c38 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005c38:	b480      	push	{r7}
 8005c3a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005c3c:	4b03      	ldr	r3, [pc, #12]	@ (8005c4c <vTaskMissedYield+0x14>)
 8005c3e:	2201      	movs	r2, #1
 8005c40:	601a      	str	r2, [r3, #0]
}
 8005c42:	bf00      	nop
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr
 8005c4c:	20000e6c 	.word	0x20000e6c

08005c50 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b082      	sub	sp, #8
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005c58:	f000 f852 	bl	8005d00 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005c5c:	4b06      	ldr	r3, [pc, #24]	@ (8005c78 <prvIdleTask+0x28>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d9f9      	bls.n	8005c58 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005c64:	4b05      	ldr	r3, [pc, #20]	@ (8005c7c <prvIdleTask+0x2c>)
 8005c66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c6a:	601a      	str	r2, [r3, #0]
 8005c6c:	f3bf 8f4f 	dsb	sy
 8005c70:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005c74:	e7f0      	b.n	8005c58 <prvIdleTask+0x8>
 8005c76:	bf00      	nop
 8005c78:	20000988 	.word	0x20000988
 8005c7c:	e000ed04 	.word	0xe000ed04

08005c80 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b082      	sub	sp, #8
 8005c84:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c86:	2300      	movs	r3, #0
 8005c88:	607b      	str	r3, [r7, #4]
 8005c8a:	e00c      	b.n	8005ca6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	4613      	mov	r3, r2
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	4413      	add	r3, r2
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	4a12      	ldr	r2, [pc, #72]	@ (8005ce0 <prvInitialiseTaskLists+0x60>)
 8005c98:	4413      	add	r3, r2
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f7fe fa92 	bl	80041c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	607b      	str	r3, [r7, #4]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2b37      	cmp	r3, #55	@ 0x37
 8005caa:	d9ef      	bls.n	8005c8c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005cac:	480d      	ldr	r0, [pc, #52]	@ (8005ce4 <prvInitialiseTaskLists+0x64>)
 8005cae:	f7fe fa89 	bl	80041c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005cb2:	480d      	ldr	r0, [pc, #52]	@ (8005ce8 <prvInitialiseTaskLists+0x68>)
 8005cb4:	f7fe fa86 	bl	80041c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005cb8:	480c      	ldr	r0, [pc, #48]	@ (8005cec <prvInitialiseTaskLists+0x6c>)
 8005cba:	f7fe fa83 	bl	80041c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005cbe:	480c      	ldr	r0, [pc, #48]	@ (8005cf0 <prvInitialiseTaskLists+0x70>)
 8005cc0:	f7fe fa80 	bl	80041c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005cc4:	480b      	ldr	r0, [pc, #44]	@ (8005cf4 <prvInitialiseTaskLists+0x74>)
 8005cc6:	f7fe fa7d 	bl	80041c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005cca:	4b0b      	ldr	r3, [pc, #44]	@ (8005cf8 <prvInitialiseTaskLists+0x78>)
 8005ccc:	4a05      	ldr	r2, [pc, #20]	@ (8005ce4 <prvInitialiseTaskLists+0x64>)
 8005cce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005cd0:	4b0a      	ldr	r3, [pc, #40]	@ (8005cfc <prvInitialiseTaskLists+0x7c>)
 8005cd2:	4a05      	ldr	r2, [pc, #20]	@ (8005ce8 <prvInitialiseTaskLists+0x68>)
 8005cd4:	601a      	str	r2, [r3, #0]
}
 8005cd6:	bf00      	nop
 8005cd8:	3708      	adds	r7, #8
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
 8005cde:	bf00      	nop
 8005ce0:	20000988 	.word	0x20000988
 8005ce4:	20000de8 	.word	0x20000de8
 8005ce8:	20000dfc 	.word	0x20000dfc
 8005cec:	20000e18 	.word	0x20000e18
 8005cf0:	20000e2c 	.word	0x20000e2c
 8005cf4:	20000e44 	.word	0x20000e44
 8005cf8:	20000e10 	.word	0x20000e10
 8005cfc:	20000e14 	.word	0x20000e14

08005d00 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b082      	sub	sp, #8
 8005d04:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005d06:	e019      	b.n	8005d3c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005d08:	f000 fefe 	bl	8006b08 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d0c:	4b10      	ldr	r3, [pc, #64]	@ (8005d50 <prvCheckTasksWaitingTermination+0x50>)
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	3304      	adds	r3, #4
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f7fe fadd 	bl	80042d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005d1e:	4b0d      	ldr	r3, [pc, #52]	@ (8005d54 <prvCheckTasksWaitingTermination+0x54>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	3b01      	subs	r3, #1
 8005d24:	4a0b      	ldr	r2, [pc, #44]	@ (8005d54 <prvCheckTasksWaitingTermination+0x54>)
 8005d26:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005d28:	4b0b      	ldr	r3, [pc, #44]	@ (8005d58 <prvCheckTasksWaitingTermination+0x58>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	3b01      	subs	r3, #1
 8005d2e:	4a0a      	ldr	r2, [pc, #40]	@ (8005d58 <prvCheckTasksWaitingTermination+0x58>)
 8005d30:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005d32:	f000 ff1b 	bl	8006b6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 f810 	bl	8005d5c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005d3c:	4b06      	ldr	r3, [pc, #24]	@ (8005d58 <prvCheckTasksWaitingTermination+0x58>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d1e1      	bne.n	8005d08 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005d44:	bf00      	nop
 8005d46:	bf00      	nop
 8005d48:	3708      	adds	r7, #8
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	bf00      	nop
 8005d50:	20000e2c 	.word	0x20000e2c
 8005d54:	20000e58 	.word	0x20000e58
 8005d58:	20000e40 	.word	0x20000e40

08005d5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	3354      	adds	r3, #84	@ 0x54
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f001 fbed 	bl	8007548 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d108      	bne.n	8005d8a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f001 f8b3 	bl	8006ee8 <vPortFree>
				vPortFree( pxTCB );
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f001 f8b0 	bl	8006ee8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005d88:	e019      	b.n	8005dbe <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d103      	bne.n	8005d9c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f001 f8a7 	bl	8006ee8 <vPortFree>
	}
 8005d9a:	e010      	b.n	8005dbe <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005da2:	2b02      	cmp	r3, #2
 8005da4:	d00b      	beq.n	8005dbe <prvDeleteTCB+0x62>
	__asm volatile
 8005da6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005daa:	f383 8811 	msr	BASEPRI, r3
 8005dae:	f3bf 8f6f 	isb	sy
 8005db2:	f3bf 8f4f 	dsb	sy
 8005db6:	60fb      	str	r3, [r7, #12]
}
 8005db8:	bf00      	nop
 8005dba:	bf00      	nop
 8005dbc:	e7fd      	b.n	8005dba <prvDeleteTCB+0x5e>
	}
 8005dbe:	bf00      	nop
 8005dc0:	3710      	adds	r7, #16
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
	...

08005dc8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005dce:	4b0c      	ldr	r3, [pc, #48]	@ (8005e00 <prvResetNextTaskUnblockTime+0x38>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d104      	bne.n	8005de2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005dd8:	4b0a      	ldr	r3, [pc, #40]	@ (8005e04 <prvResetNextTaskUnblockTime+0x3c>)
 8005dda:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005dde:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005de0:	e008      	b.n	8005df4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005de2:	4b07      	ldr	r3, [pc, #28]	@ (8005e00 <prvResetNextTaskUnblockTime+0x38>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	4a04      	ldr	r2, [pc, #16]	@ (8005e04 <prvResetNextTaskUnblockTime+0x3c>)
 8005df2:	6013      	str	r3, [r2, #0]
}
 8005df4:	bf00      	nop
 8005df6:	370c      	adds	r7, #12
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr
 8005e00:	20000e10 	.word	0x20000e10
 8005e04:	20000e78 	.word	0x20000e78

08005e08 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8005e0e:	4b05      	ldr	r3, [pc, #20]	@ (8005e24 <xTaskGetCurrentTaskHandle+0x1c>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	607b      	str	r3, [r7, #4]

		return xReturn;
 8005e14:	687b      	ldr	r3, [r7, #4]
	}
 8005e16:	4618      	mov	r0, r3
 8005e18:	370c      	adds	r7, #12
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr
 8005e22:	bf00      	nop
 8005e24:	20000984 	.word	0x20000984

08005e28 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005e28:	b480      	push	{r7}
 8005e2a:	b083      	sub	sp, #12
 8005e2c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005e2e:	4b0b      	ldr	r3, [pc, #44]	@ (8005e5c <xTaskGetSchedulerState+0x34>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d102      	bne.n	8005e3c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005e36:	2301      	movs	r3, #1
 8005e38:	607b      	str	r3, [r7, #4]
 8005e3a:	e008      	b.n	8005e4e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e3c:	4b08      	ldr	r3, [pc, #32]	@ (8005e60 <xTaskGetSchedulerState+0x38>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d102      	bne.n	8005e4a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005e44:	2302      	movs	r3, #2
 8005e46:	607b      	str	r3, [r7, #4]
 8005e48:	e001      	b.n	8005e4e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005e4e:	687b      	ldr	r3, [r7, #4]
	}
 8005e50:	4618      	mov	r0, r3
 8005e52:	370c      	adds	r7, #12
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr
 8005e5c:	20000e64 	.word	0x20000e64
 8005e60:	20000e80 	.word	0x20000e80

08005e64 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b084      	sub	sp, #16
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005e70:	2300      	movs	r3, #0
 8005e72:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d051      	beq.n	8005f1e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e7e:	4b2a      	ldr	r3, [pc, #168]	@ (8005f28 <xTaskPriorityInherit+0xc4>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d241      	bcs.n	8005f0c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	699b      	ldr	r3, [r3, #24]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	db06      	blt.n	8005e9e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e90:	4b25      	ldr	r3, [pc, #148]	@ (8005f28 <xTaskPriorityInherit+0xc4>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e96:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	6959      	ldr	r1, [r3, #20]
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ea6:	4613      	mov	r3, r2
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	4413      	add	r3, r2
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	4a1f      	ldr	r2, [pc, #124]	@ (8005f2c <xTaskPriorityInherit+0xc8>)
 8005eb0:	4413      	add	r3, r2
 8005eb2:	4299      	cmp	r1, r3
 8005eb4:	d122      	bne.n	8005efc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	3304      	adds	r3, #4
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f7fe fa0c 	bl	80042d8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005ec0:	4b19      	ldr	r3, [pc, #100]	@ (8005f28 <xTaskPriorityInherit+0xc4>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ece:	4b18      	ldr	r3, [pc, #96]	@ (8005f30 <xTaskPriorityInherit+0xcc>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d903      	bls.n	8005ede <xTaskPriorityInherit+0x7a>
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eda:	4a15      	ldr	r2, [pc, #84]	@ (8005f30 <xTaskPriorityInherit+0xcc>)
 8005edc:	6013      	str	r3, [r2, #0]
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ee2:	4613      	mov	r3, r2
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	4413      	add	r3, r2
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	4a10      	ldr	r2, [pc, #64]	@ (8005f2c <xTaskPriorityInherit+0xc8>)
 8005eec:	441a      	add	r2, r3
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	3304      	adds	r3, #4
 8005ef2:	4619      	mov	r1, r3
 8005ef4:	4610      	mov	r0, r2
 8005ef6:	f7fe f992 	bl	800421e <vListInsertEnd>
 8005efa:	e004      	b.n	8005f06 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005efc:	4b0a      	ldr	r3, [pc, #40]	@ (8005f28 <xTaskPriorityInherit+0xc4>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005f06:	2301      	movs	r3, #1
 8005f08:	60fb      	str	r3, [r7, #12]
 8005f0a:	e008      	b.n	8005f1e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005f10:	4b05      	ldr	r3, [pc, #20]	@ (8005f28 <xTaskPriorityInherit+0xc4>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d201      	bcs.n	8005f1e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
	}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3710      	adds	r7, #16
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	20000984 	.word	0x20000984
 8005f2c:	20000988 	.word	0x20000988
 8005f30:	20000e60 	.word	0x20000e60

08005f34 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b086      	sub	sp, #24
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005f40:	2300      	movs	r3, #0
 8005f42:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d058      	beq.n	8005ffc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005f4a:	4b2f      	ldr	r3, [pc, #188]	@ (8006008 <xTaskPriorityDisinherit+0xd4>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	693a      	ldr	r2, [r7, #16]
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d00b      	beq.n	8005f6c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f58:	f383 8811 	msr	BASEPRI, r3
 8005f5c:	f3bf 8f6f 	isb	sy
 8005f60:	f3bf 8f4f 	dsb	sy
 8005f64:	60fb      	str	r3, [r7, #12]
}
 8005f66:	bf00      	nop
 8005f68:	bf00      	nop
 8005f6a:	e7fd      	b.n	8005f68 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d10b      	bne.n	8005f8c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005f74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f78:	f383 8811 	msr	BASEPRI, r3
 8005f7c:	f3bf 8f6f 	isb	sy
 8005f80:	f3bf 8f4f 	dsb	sy
 8005f84:	60bb      	str	r3, [r7, #8]
}
 8005f86:	bf00      	nop
 8005f88:	bf00      	nop
 8005f8a:	e7fd      	b.n	8005f88 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f90:	1e5a      	subs	r2, r3, #1
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d02c      	beq.n	8005ffc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d128      	bne.n	8005ffc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	3304      	adds	r3, #4
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f7fe f992 	bl	80042d8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fc0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fcc:	4b0f      	ldr	r3, [pc, #60]	@ (800600c <xTaskPriorityDisinherit+0xd8>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d903      	bls.n	8005fdc <xTaskPriorityDisinherit+0xa8>
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fd8:	4a0c      	ldr	r2, [pc, #48]	@ (800600c <xTaskPriorityDisinherit+0xd8>)
 8005fda:	6013      	str	r3, [r2, #0]
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fe0:	4613      	mov	r3, r2
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	4413      	add	r3, r2
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	4a09      	ldr	r2, [pc, #36]	@ (8006010 <xTaskPriorityDisinherit+0xdc>)
 8005fea:	441a      	add	r2, r3
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	3304      	adds	r3, #4
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	4610      	mov	r0, r2
 8005ff4:	f7fe f913 	bl	800421e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005ffc:	697b      	ldr	r3, [r7, #20]
	}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3718      	adds	r7, #24
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
 8006006:	bf00      	nop
 8006008:	20000984 	.word	0x20000984
 800600c:	20000e60 	.word	0x20000e60
 8006010:	20000988 	.word	0x20000988

08006014 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006014:	b580      	push	{r7, lr}
 8006016:	b088      	sub	sp, #32
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006022:	2301      	movs	r3, #1
 8006024:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d06c      	beq.n	8006106 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800602c:	69bb      	ldr	r3, [r7, #24]
 800602e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006030:	2b00      	cmp	r3, #0
 8006032:	d10b      	bne.n	800604c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8006034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006038:	f383 8811 	msr	BASEPRI, r3
 800603c:	f3bf 8f6f 	isb	sy
 8006040:	f3bf 8f4f 	dsb	sy
 8006044:	60fb      	str	r3, [r7, #12]
}
 8006046:	bf00      	nop
 8006048:	bf00      	nop
 800604a:	e7fd      	b.n	8006048 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800604c:	69bb      	ldr	r3, [r7, #24]
 800604e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006050:	683a      	ldr	r2, [r7, #0]
 8006052:	429a      	cmp	r2, r3
 8006054:	d902      	bls.n	800605c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	61fb      	str	r3, [r7, #28]
 800605a:	e002      	b.n	8006062 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006060:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006062:	69bb      	ldr	r3, [r7, #24]
 8006064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006066:	69fa      	ldr	r2, [r7, #28]
 8006068:	429a      	cmp	r2, r3
 800606a:	d04c      	beq.n	8006106 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800606c:	69bb      	ldr	r3, [r7, #24]
 800606e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006070:	697a      	ldr	r2, [r7, #20]
 8006072:	429a      	cmp	r2, r3
 8006074:	d147      	bne.n	8006106 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006076:	4b26      	ldr	r3, [pc, #152]	@ (8006110 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	69ba      	ldr	r2, [r7, #24]
 800607c:	429a      	cmp	r2, r3
 800607e:	d10b      	bne.n	8006098 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8006080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006084:	f383 8811 	msr	BASEPRI, r3
 8006088:	f3bf 8f6f 	isb	sy
 800608c:	f3bf 8f4f 	dsb	sy
 8006090:	60bb      	str	r3, [r7, #8]
}
 8006092:	bf00      	nop
 8006094:	bf00      	nop
 8006096:	e7fd      	b.n	8006094 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800609c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	69fa      	ldr	r2, [r7, #28]
 80060a2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80060a4:	69bb      	ldr	r3, [r7, #24]
 80060a6:	699b      	ldr	r3, [r3, #24]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	db04      	blt.n	80060b6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060ac:	69fb      	ldr	r3, [r7, #28]
 80060ae:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80060b2:	69bb      	ldr	r3, [r7, #24]
 80060b4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80060b6:	69bb      	ldr	r3, [r7, #24]
 80060b8:	6959      	ldr	r1, [r3, #20]
 80060ba:	693a      	ldr	r2, [r7, #16]
 80060bc:	4613      	mov	r3, r2
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	4413      	add	r3, r2
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	4a13      	ldr	r2, [pc, #76]	@ (8006114 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80060c6:	4413      	add	r3, r2
 80060c8:	4299      	cmp	r1, r3
 80060ca:	d11c      	bne.n	8006106 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060cc:	69bb      	ldr	r3, [r7, #24]
 80060ce:	3304      	adds	r3, #4
 80060d0:	4618      	mov	r0, r3
 80060d2:	f7fe f901 	bl	80042d8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80060d6:	69bb      	ldr	r3, [r7, #24]
 80060d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060da:	4b0f      	ldr	r3, [pc, #60]	@ (8006118 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	429a      	cmp	r2, r3
 80060e0:	d903      	bls.n	80060ea <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060e6:	4a0c      	ldr	r2, [pc, #48]	@ (8006118 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80060e8:	6013      	str	r3, [r2, #0]
 80060ea:	69bb      	ldr	r3, [r7, #24]
 80060ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060ee:	4613      	mov	r3, r2
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	4413      	add	r3, r2
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	4a07      	ldr	r2, [pc, #28]	@ (8006114 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80060f8:	441a      	add	r2, r3
 80060fa:	69bb      	ldr	r3, [r7, #24]
 80060fc:	3304      	adds	r3, #4
 80060fe:	4619      	mov	r1, r3
 8006100:	4610      	mov	r0, r2
 8006102:	f7fe f88c 	bl	800421e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006106:	bf00      	nop
 8006108:	3720      	adds	r7, #32
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
 800610e:	bf00      	nop
 8006110:	20000984 	.word	0x20000984
 8006114:	20000988 	.word	0x20000988
 8006118:	20000e60 	.word	0x20000e60

0800611c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800611c:	b480      	push	{r7}
 800611e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006120:	4b07      	ldr	r3, [pc, #28]	@ (8006140 <pvTaskIncrementMutexHeldCount+0x24>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d004      	beq.n	8006132 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006128:	4b05      	ldr	r3, [pc, #20]	@ (8006140 <pvTaskIncrementMutexHeldCount+0x24>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800612e:	3201      	adds	r2, #1
 8006130:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8006132:	4b03      	ldr	r3, [pc, #12]	@ (8006140 <pvTaskIncrementMutexHeldCount+0x24>)
 8006134:	681b      	ldr	r3, [r3, #0]
	}
 8006136:	4618      	mov	r0, r3
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr
 8006140:	20000984 	.word	0x20000984

08006144 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800614e:	4b21      	ldr	r3, [pc, #132]	@ (80061d4 <prvAddCurrentTaskToDelayedList+0x90>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006154:	4b20      	ldr	r3, [pc, #128]	@ (80061d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	3304      	adds	r3, #4
 800615a:	4618      	mov	r0, r3
 800615c:	f7fe f8bc 	bl	80042d8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006166:	d10a      	bne.n	800617e <prvAddCurrentTaskToDelayedList+0x3a>
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d007      	beq.n	800617e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800616e:	4b1a      	ldr	r3, [pc, #104]	@ (80061d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	3304      	adds	r3, #4
 8006174:	4619      	mov	r1, r3
 8006176:	4819      	ldr	r0, [pc, #100]	@ (80061dc <prvAddCurrentTaskToDelayedList+0x98>)
 8006178:	f7fe f851 	bl	800421e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800617c:	e026      	b.n	80061cc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800617e:	68fa      	ldr	r2, [r7, #12]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	4413      	add	r3, r2
 8006184:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006186:	4b14      	ldr	r3, [pc, #80]	@ (80061d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	68ba      	ldr	r2, [r7, #8]
 800618c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800618e:	68ba      	ldr	r2, [r7, #8]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	429a      	cmp	r2, r3
 8006194:	d209      	bcs.n	80061aa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006196:	4b12      	ldr	r3, [pc, #72]	@ (80061e0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	4b0f      	ldr	r3, [pc, #60]	@ (80061d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	3304      	adds	r3, #4
 80061a0:	4619      	mov	r1, r3
 80061a2:	4610      	mov	r0, r2
 80061a4:	f7fe f85f 	bl	8004266 <vListInsert>
}
 80061a8:	e010      	b.n	80061cc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061aa:	4b0e      	ldr	r3, [pc, #56]	@ (80061e4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	4b0a      	ldr	r3, [pc, #40]	@ (80061d8 <prvAddCurrentTaskToDelayedList+0x94>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	3304      	adds	r3, #4
 80061b4:	4619      	mov	r1, r3
 80061b6:	4610      	mov	r0, r2
 80061b8:	f7fe f855 	bl	8004266 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80061bc:	4b0a      	ldr	r3, [pc, #40]	@ (80061e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	68ba      	ldr	r2, [r7, #8]
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d202      	bcs.n	80061cc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80061c6:	4a08      	ldr	r2, [pc, #32]	@ (80061e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	6013      	str	r3, [r2, #0]
}
 80061cc:	bf00      	nop
 80061ce:	3710      	adds	r7, #16
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}
 80061d4:	20000e5c 	.word	0x20000e5c
 80061d8:	20000984 	.word	0x20000984
 80061dc:	20000e44 	.word	0x20000e44
 80061e0:	20000e14 	.word	0x20000e14
 80061e4:	20000e10 	.word	0x20000e10
 80061e8:	20000e78 	.word	0x20000e78

080061ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b08a      	sub	sp, #40	@ 0x28
 80061f0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80061f2:	2300      	movs	r3, #0
 80061f4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80061f6:	f000 fb13 	bl	8006820 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80061fa:	4b1d      	ldr	r3, [pc, #116]	@ (8006270 <xTimerCreateTimerTask+0x84>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d021      	beq.n	8006246 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006202:	2300      	movs	r3, #0
 8006204:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006206:	2300      	movs	r3, #0
 8006208:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800620a:	1d3a      	adds	r2, r7, #4
 800620c:	f107 0108 	add.w	r1, r7, #8
 8006210:	f107 030c 	add.w	r3, r7, #12
 8006214:	4618      	mov	r0, r3
 8006216:	f7fd ffbb 	bl	8004190 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800621a:	6879      	ldr	r1, [r7, #4]
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	68fa      	ldr	r2, [r7, #12]
 8006220:	9202      	str	r2, [sp, #8]
 8006222:	9301      	str	r3, [sp, #4]
 8006224:	2302      	movs	r3, #2
 8006226:	9300      	str	r3, [sp, #0]
 8006228:	2300      	movs	r3, #0
 800622a:	460a      	mov	r2, r1
 800622c:	4911      	ldr	r1, [pc, #68]	@ (8006274 <xTimerCreateTimerTask+0x88>)
 800622e:	4812      	ldr	r0, [pc, #72]	@ (8006278 <xTimerCreateTimerTask+0x8c>)
 8006230:	f7fe ff92 	bl	8005158 <xTaskCreateStatic>
 8006234:	4603      	mov	r3, r0
 8006236:	4a11      	ldr	r2, [pc, #68]	@ (800627c <xTimerCreateTimerTask+0x90>)
 8006238:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800623a:	4b10      	ldr	r3, [pc, #64]	@ (800627c <xTimerCreateTimerTask+0x90>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d001      	beq.n	8006246 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006242:	2301      	movs	r3, #1
 8006244:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d10b      	bne.n	8006264 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800624c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006250:	f383 8811 	msr	BASEPRI, r3
 8006254:	f3bf 8f6f 	isb	sy
 8006258:	f3bf 8f4f 	dsb	sy
 800625c:	613b      	str	r3, [r7, #16]
}
 800625e:	bf00      	nop
 8006260:	bf00      	nop
 8006262:	e7fd      	b.n	8006260 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006264:	697b      	ldr	r3, [r7, #20]
}
 8006266:	4618      	mov	r0, r3
 8006268:	3718      	adds	r7, #24
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}
 800626e:	bf00      	nop
 8006270:	20000eb4 	.word	0x20000eb4
 8006274:	08007b9c 	.word	0x08007b9c
 8006278:	080063b9 	.word	0x080063b9
 800627c:	20000eb8 	.word	0x20000eb8

08006280 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b08a      	sub	sp, #40	@ 0x28
 8006284:	af00      	add	r7, sp, #0
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	60b9      	str	r1, [r7, #8]
 800628a:	607a      	str	r2, [r7, #4]
 800628c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800628e:	2300      	movs	r3, #0
 8006290:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d10b      	bne.n	80062b0 <xTimerGenericCommand+0x30>
	__asm volatile
 8006298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800629c:	f383 8811 	msr	BASEPRI, r3
 80062a0:	f3bf 8f6f 	isb	sy
 80062a4:	f3bf 8f4f 	dsb	sy
 80062a8:	623b      	str	r3, [r7, #32]
}
 80062aa:	bf00      	nop
 80062ac:	bf00      	nop
 80062ae:	e7fd      	b.n	80062ac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80062b0:	4b19      	ldr	r3, [pc, #100]	@ (8006318 <xTimerGenericCommand+0x98>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d02a      	beq.n	800630e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	2b05      	cmp	r3, #5
 80062c8:	dc18      	bgt.n	80062fc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80062ca:	f7ff fdad 	bl	8005e28 <xTaskGetSchedulerState>
 80062ce:	4603      	mov	r3, r0
 80062d0:	2b02      	cmp	r3, #2
 80062d2:	d109      	bne.n	80062e8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80062d4:	4b10      	ldr	r3, [pc, #64]	@ (8006318 <xTimerGenericCommand+0x98>)
 80062d6:	6818      	ldr	r0, [r3, #0]
 80062d8:	f107 0110 	add.w	r1, r7, #16
 80062dc:	2300      	movs	r3, #0
 80062de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062e0:	f7fe fa22 	bl	8004728 <xQueueGenericSend>
 80062e4:	6278      	str	r0, [r7, #36]	@ 0x24
 80062e6:	e012      	b.n	800630e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80062e8:	4b0b      	ldr	r3, [pc, #44]	@ (8006318 <xTimerGenericCommand+0x98>)
 80062ea:	6818      	ldr	r0, [r3, #0]
 80062ec:	f107 0110 	add.w	r1, r7, #16
 80062f0:	2300      	movs	r3, #0
 80062f2:	2200      	movs	r2, #0
 80062f4:	f7fe fa18 	bl	8004728 <xQueueGenericSend>
 80062f8:	6278      	str	r0, [r7, #36]	@ 0x24
 80062fa:	e008      	b.n	800630e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80062fc:	4b06      	ldr	r3, [pc, #24]	@ (8006318 <xTimerGenericCommand+0x98>)
 80062fe:	6818      	ldr	r0, [r3, #0]
 8006300:	f107 0110 	add.w	r1, r7, #16
 8006304:	2300      	movs	r3, #0
 8006306:	683a      	ldr	r2, [r7, #0]
 8006308:	f7fe fb10 	bl	800492c <xQueueGenericSendFromISR>
 800630c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800630e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006310:	4618      	mov	r0, r3
 8006312:	3728      	adds	r7, #40	@ 0x28
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}
 8006318:	20000eb4 	.word	0x20000eb4

0800631c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b088      	sub	sp, #32
 8006320:	af02      	add	r7, sp, #8
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006326:	4b23      	ldr	r3, [pc, #140]	@ (80063b4 <prvProcessExpiredTimer+0x98>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	3304      	adds	r3, #4
 8006334:	4618      	mov	r0, r3
 8006336:	f7fd ffcf 	bl	80042d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006340:	f003 0304 	and.w	r3, r3, #4
 8006344:	2b00      	cmp	r3, #0
 8006346:	d023      	beq.n	8006390 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	699a      	ldr	r2, [r3, #24]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	18d1      	adds	r1, r2, r3
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	683a      	ldr	r2, [r7, #0]
 8006354:	6978      	ldr	r0, [r7, #20]
 8006356:	f000 f8d5 	bl	8006504 <prvInsertTimerInActiveList>
 800635a:	4603      	mov	r3, r0
 800635c:	2b00      	cmp	r3, #0
 800635e:	d020      	beq.n	80063a2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006360:	2300      	movs	r3, #0
 8006362:	9300      	str	r3, [sp, #0]
 8006364:	2300      	movs	r3, #0
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	2100      	movs	r1, #0
 800636a:	6978      	ldr	r0, [r7, #20]
 800636c:	f7ff ff88 	bl	8006280 <xTimerGenericCommand>
 8006370:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d114      	bne.n	80063a2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800637c:	f383 8811 	msr	BASEPRI, r3
 8006380:	f3bf 8f6f 	isb	sy
 8006384:	f3bf 8f4f 	dsb	sy
 8006388:	60fb      	str	r3, [r7, #12]
}
 800638a:	bf00      	nop
 800638c:	bf00      	nop
 800638e:	e7fd      	b.n	800638c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006396:	f023 0301 	bic.w	r3, r3, #1
 800639a:	b2da      	uxtb	r2, r3
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	6a1b      	ldr	r3, [r3, #32]
 80063a6:	6978      	ldr	r0, [r7, #20]
 80063a8:	4798      	blx	r3
}
 80063aa:	bf00      	nop
 80063ac:	3718      	adds	r7, #24
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop
 80063b4:	20000eac 	.word	0x20000eac

080063b8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b084      	sub	sp, #16
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80063c0:	f107 0308 	add.w	r3, r7, #8
 80063c4:	4618      	mov	r0, r3
 80063c6:	f000 f859 	bl	800647c <prvGetNextExpireTime>
 80063ca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	4619      	mov	r1, r3
 80063d0:	68f8      	ldr	r0, [r7, #12]
 80063d2:	f000 f805 	bl	80063e0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80063d6:	f000 f8d7 	bl	8006588 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80063da:	bf00      	nop
 80063dc:	e7f0      	b.n	80063c0 <prvTimerTask+0x8>
	...

080063e0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b084      	sub	sp, #16
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80063ea:	f7ff f919 	bl	8005620 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80063ee:	f107 0308 	add.w	r3, r7, #8
 80063f2:	4618      	mov	r0, r3
 80063f4:	f000 f866 	bl	80064c4 <prvSampleTimeNow>
 80063f8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d130      	bne.n	8006462 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d10a      	bne.n	800641c <prvProcessTimerOrBlockTask+0x3c>
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	429a      	cmp	r2, r3
 800640c:	d806      	bhi.n	800641c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800640e:	f7ff f915 	bl	800563c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006412:	68f9      	ldr	r1, [r7, #12]
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f7ff ff81 	bl	800631c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800641a:	e024      	b.n	8006466 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d008      	beq.n	8006434 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006422:	4b13      	ldr	r3, [pc, #76]	@ (8006470 <prvProcessTimerOrBlockTask+0x90>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d101      	bne.n	8006430 <prvProcessTimerOrBlockTask+0x50>
 800642c:	2301      	movs	r3, #1
 800642e:	e000      	b.n	8006432 <prvProcessTimerOrBlockTask+0x52>
 8006430:	2300      	movs	r3, #0
 8006432:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006434:	4b0f      	ldr	r3, [pc, #60]	@ (8006474 <prvProcessTimerOrBlockTask+0x94>)
 8006436:	6818      	ldr	r0, [r3, #0]
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	1ad3      	subs	r3, r2, r3
 800643e:	683a      	ldr	r2, [r7, #0]
 8006440:	4619      	mov	r1, r3
 8006442:	f7fe fe55 	bl	80050f0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006446:	f7ff f8f9 	bl	800563c <xTaskResumeAll>
 800644a:	4603      	mov	r3, r0
 800644c:	2b00      	cmp	r3, #0
 800644e:	d10a      	bne.n	8006466 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006450:	4b09      	ldr	r3, [pc, #36]	@ (8006478 <prvProcessTimerOrBlockTask+0x98>)
 8006452:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006456:	601a      	str	r2, [r3, #0]
 8006458:	f3bf 8f4f 	dsb	sy
 800645c:	f3bf 8f6f 	isb	sy
}
 8006460:	e001      	b.n	8006466 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006462:	f7ff f8eb 	bl	800563c <xTaskResumeAll>
}
 8006466:	bf00      	nop
 8006468:	3710      	adds	r7, #16
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
 800646e:	bf00      	nop
 8006470:	20000eb0 	.word	0x20000eb0
 8006474:	20000eb4 	.word	0x20000eb4
 8006478:	e000ed04 	.word	0xe000ed04

0800647c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800647c:	b480      	push	{r7}
 800647e:	b085      	sub	sp, #20
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006484:	4b0e      	ldr	r3, [pc, #56]	@ (80064c0 <prvGetNextExpireTime+0x44>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d101      	bne.n	8006492 <prvGetNextExpireTime+0x16>
 800648e:	2201      	movs	r2, #1
 8006490:	e000      	b.n	8006494 <prvGetNextExpireTime+0x18>
 8006492:	2200      	movs	r2, #0
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d105      	bne.n	80064ac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80064a0:	4b07      	ldr	r3, [pc, #28]	@ (80064c0 <prvGetNextExpireTime+0x44>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	68db      	ldr	r3, [r3, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	60fb      	str	r3, [r7, #12]
 80064aa:	e001      	b.n	80064b0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80064ac:	2300      	movs	r3, #0
 80064ae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80064b0:	68fb      	ldr	r3, [r7, #12]
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3714      	adds	r7, #20
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr
 80064be:	bf00      	nop
 80064c0:	20000eac 	.word	0x20000eac

080064c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b084      	sub	sp, #16
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80064cc:	f7ff f954 	bl	8005778 <xTaskGetTickCount>
 80064d0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80064d2:	4b0b      	ldr	r3, [pc, #44]	@ (8006500 <prvSampleTimeNow+0x3c>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	68fa      	ldr	r2, [r7, #12]
 80064d8:	429a      	cmp	r2, r3
 80064da:	d205      	bcs.n	80064e8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80064dc:	f000 f93a 	bl	8006754 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2201      	movs	r2, #1
 80064e4:	601a      	str	r2, [r3, #0]
 80064e6:	e002      	b.n	80064ee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80064ee:	4a04      	ldr	r2, [pc, #16]	@ (8006500 <prvSampleTimeNow+0x3c>)
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80064f4:	68fb      	ldr	r3, [r7, #12]
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3710      	adds	r7, #16
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	20000ebc 	.word	0x20000ebc

08006504 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b086      	sub	sp, #24
 8006508:	af00      	add	r7, sp, #0
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	607a      	str	r2, [r7, #4]
 8006510:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006512:	2300      	movs	r3, #0
 8006514:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	68ba      	ldr	r2, [r7, #8]
 800651a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	68fa      	ldr	r2, [r7, #12]
 8006520:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006522:	68ba      	ldr	r2, [r7, #8]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	429a      	cmp	r2, r3
 8006528:	d812      	bhi.n	8006550 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	1ad2      	subs	r2, r2, r3
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	699b      	ldr	r3, [r3, #24]
 8006534:	429a      	cmp	r2, r3
 8006536:	d302      	bcc.n	800653e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006538:	2301      	movs	r3, #1
 800653a:	617b      	str	r3, [r7, #20]
 800653c:	e01b      	b.n	8006576 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800653e:	4b10      	ldr	r3, [pc, #64]	@ (8006580 <prvInsertTimerInActiveList+0x7c>)
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	3304      	adds	r3, #4
 8006546:	4619      	mov	r1, r3
 8006548:	4610      	mov	r0, r2
 800654a:	f7fd fe8c 	bl	8004266 <vListInsert>
 800654e:	e012      	b.n	8006576 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	429a      	cmp	r2, r3
 8006556:	d206      	bcs.n	8006566 <prvInsertTimerInActiveList+0x62>
 8006558:	68ba      	ldr	r2, [r7, #8]
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	429a      	cmp	r2, r3
 800655e:	d302      	bcc.n	8006566 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006560:	2301      	movs	r3, #1
 8006562:	617b      	str	r3, [r7, #20]
 8006564:	e007      	b.n	8006576 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006566:	4b07      	ldr	r3, [pc, #28]	@ (8006584 <prvInsertTimerInActiveList+0x80>)
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	3304      	adds	r3, #4
 800656e:	4619      	mov	r1, r3
 8006570:	4610      	mov	r0, r2
 8006572:	f7fd fe78 	bl	8004266 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006576:	697b      	ldr	r3, [r7, #20]
}
 8006578:	4618      	mov	r0, r3
 800657a:	3718      	adds	r7, #24
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}
 8006580:	20000eb0 	.word	0x20000eb0
 8006584:	20000eac 	.word	0x20000eac

08006588 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b08e      	sub	sp, #56	@ 0x38
 800658c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800658e:	e0ce      	b.n	800672e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2b00      	cmp	r3, #0
 8006594:	da19      	bge.n	80065ca <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006596:	1d3b      	adds	r3, r7, #4
 8006598:	3304      	adds	r3, #4
 800659a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800659c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d10b      	bne.n	80065ba <prvProcessReceivedCommands+0x32>
	__asm volatile
 80065a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065a6:	f383 8811 	msr	BASEPRI, r3
 80065aa:	f3bf 8f6f 	isb	sy
 80065ae:	f3bf 8f4f 	dsb	sy
 80065b2:	61fb      	str	r3, [r7, #28]
}
 80065b4:	bf00      	nop
 80065b6:	bf00      	nop
 80065b8:	e7fd      	b.n	80065b6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80065ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80065c0:	6850      	ldr	r0, [r2, #4]
 80065c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80065c4:	6892      	ldr	r2, [r2, #8]
 80065c6:	4611      	mov	r1, r2
 80065c8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	f2c0 80ae 	blt.w	800672e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80065d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065d8:	695b      	ldr	r3, [r3, #20]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d004      	beq.n	80065e8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80065de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065e0:	3304      	adds	r3, #4
 80065e2:	4618      	mov	r0, r3
 80065e4:	f7fd fe78 	bl	80042d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80065e8:	463b      	mov	r3, r7
 80065ea:	4618      	mov	r0, r3
 80065ec:	f7ff ff6a 	bl	80064c4 <prvSampleTimeNow>
 80065f0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2b09      	cmp	r3, #9
 80065f6:	f200 8097 	bhi.w	8006728 <prvProcessReceivedCommands+0x1a0>
 80065fa:	a201      	add	r2, pc, #4	@ (adr r2, 8006600 <prvProcessReceivedCommands+0x78>)
 80065fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006600:	08006629 	.word	0x08006629
 8006604:	08006629 	.word	0x08006629
 8006608:	08006629 	.word	0x08006629
 800660c:	0800669f 	.word	0x0800669f
 8006610:	080066b3 	.word	0x080066b3
 8006614:	080066ff 	.word	0x080066ff
 8006618:	08006629 	.word	0x08006629
 800661c:	08006629 	.word	0x08006629
 8006620:	0800669f 	.word	0x0800669f
 8006624:	080066b3 	.word	0x080066b3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800662a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800662e:	f043 0301 	orr.w	r3, r3, #1
 8006632:	b2da      	uxtb	r2, r3
 8006634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006636:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800663a:	68ba      	ldr	r2, [r7, #8]
 800663c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800663e:	699b      	ldr	r3, [r3, #24]
 8006640:	18d1      	adds	r1, r2, r3
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006646:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006648:	f7ff ff5c 	bl	8006504 <prvInsertTimerInActiveList>
 800664c:	4603      	mov	r3, r0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d06c      	beq.n	800672c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006654:	6a1b      	ldr	r3, [r3, #32]
 8006656:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006658:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800665a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800665c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006660:	f003 0304 	and.w	r3, r3, #4
 8006664:	2b00      	cmp	r3, #0
 8006666:	d061      	beq.n	800672c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006668:	68ba      	ldr	r2, [r7, #8]
 800666a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800666c:	699b      	ldr	r3, [r3, #24]
 800666e:	441a      	add	r2, r3
 8006670:	2300      	movs	r3, #0
 8006672:	9300      	str	r3, [sp, #0]
 8006674:	2300      	movs	r3, #0
 8006676:	2100      	movs	r1, #0
 8006678:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800667a:	f7ff fe01 	bl	8006280 <xTimerGenericCommand>
 800667e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006680:	6a3b      	ldr	r3, [r7, #32]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d152      	bne.n	800672c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800668a:	f383 8811 	msr	BASEPRI, r3
 800668e:	f3bf 8f6f 	isb	sy
 8006692:	f3bf 8f4f 	dsb	sy
 8006696:	61bb      	str	r3, [r7, #24]
}
 8006698:	bf00      	nop
 800669a:	bf00      	nop
 800669c:	e7fd      	b.n	800669a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800669e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80066a4:	f023 0301 	bic.w	r3, r3, #1
 80066a8:	b2da      	uxtb	r2, r3
 80066aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80066b0:	e03d      	b.n	800672e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80066b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80066b8:	f043 0301 	orr.w	r3, r3, #1
 80066bc:	b2da      	uxtb	r2, r3
 80066be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066c0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80066c4:	68ba      	ldr	r2, [r7, #8]
 80066c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066c8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80066ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066cc:	699b      	ldr	r3, [r3, #24]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d10b      	bne.n	80066ea <prvProcessReceivedCommands+0x162>
	__asm volatile
 80066d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066d6:	f383 8811 	msr	BASEPRI, r3
 80066da:	f3bf 8f6f 	isb	sy
 80066de:	f3bf 8f4f 	dsb	sy
 80066e2:	617b      	str	r3, [r7, #20]
}
 80066e4:	bf00      	nop
 80066e6:	bf00      	nop
 80066e8:	e7fd      	b.n	80066e6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80066ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ec:	699a      	ldr	r2, [r3, #24]
 80066ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f0:	18d1      	adds	r1, r2, r3
 80066f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066f8:	f7ff ff04 	bl	8006504 <prvInsertTimerInActiveList>
					break;
 80066fc:	e017      	b.n	800672e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80066fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006700:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006704:	f003 0302 	and.w	r3, r3, #2
 8006708:	2b00      	cmp	r3, #0
 800670a:	d103      	bne.n	8006714 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800670c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800670e:	f000 fbeb 	bl	8006ee8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006712:	e00c      	b.n	800672e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006716:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800671a:	f023 0301 	bic.w	r3, r3, #1
 800671e:	b2da      	uxtb	r2, r3
 8006720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006722:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006726:	e002      	b.n	800672e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006728:	bf00      	nop
 800672a:	e000      	b.n	800672e <prvProcessReceivedCommands+0x1a6>
					break;
 800672c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800672e:	4b08      	ldr	r3, [pc, #32]	@ (8006750 <prvProcessReceivedCommands+0x1c8>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	1d39      	adds	r1, r7, #4
 8006734:	2200      	movs	r2, #0
 8006736:	4618      	mov	r0, r3
 8006738:	f7fe f996 	bl	8004a68 <xQueueReceive>
 800673c:	4603      	mov	r3, r0
 800673e:	2b00      	cmp	r3, #0
 8006740:	f47f af26 	bne.w	8006590 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006744:	bf00      	nop
 8006746:	bf00      	nop
 8006748:	3730      	adds	r7, #48	@ 0x30
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}
 800674e:	bf00      	nop
 8006750:	20000eb4 	.word	0x20000eb4

08006754 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b088      	sub	sp, #32
 8006758:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800675a:	e049      	b.n	80067f0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800675c:	4b2e      	ldr	r3, [pc, #184]	@ (8006818 <prvSwitchTimerLists+0xc4>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	68db      	ldr	r3, [r3, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006766:	4b2c      	ldr	r3, [pc, #176]	@ (8006818 <prvSwitchTimerLists+0xc4>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	68db      	ldr	r3, [r3, #12]
 800676c:	68db      	ldr	r3, [r3, #12]
 800676e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	3304      	adds	r3, #4
 8006774:	4618      	mov	r0, r3
 8006776:	f7fd fdaf 	bl	80042d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6a1b      	ldr	r3, [r3, #32]
 800677e:	68f8      	ldr	r0, [r7, #12]
 8006780:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006788:	f003 0304 	and.w	r3, r3, #4
 800678c:	2b00      	cmp	r3, #0
 800678e:	d02f      	beq.n	80067f0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	699b      	ldr	r3, [r3, #24]
 8006794:	693a      	ldr	r2, [r7, #16]
 8006796:	4413      	add	r3, r2
 8006798:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800679a:	68ba      	ldr	r2, [r7, #8]
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	429a      	cmp	r2, r3
 80067a0:	d90e      	bls.n	80067c0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	68ba      	ldr	r2, [r7, #8]
 80067a6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	68fa      	ldr	r2, [r7, #12]
 80067ac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80067ae:	4b1a      	ldr	r3, [pc, #104]	@ (8006818 <prvSwitchTimerLists+0xc4>)
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	3304      	adds	r3, #4
 80067b6:	4619      	mov	r1, r3
 80067b8:	4610      	mov	r0, r2
 80067ba:	f7fd fd54 	bl	8004266 <vListInsert>
 80067be:	e017      	b.n	80067f0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80067c0:	2300      	movs	r3, #0
 80067c2:	9300      	str	r3, [sp, #0]
 80067c4:	2300      	movs	r3, #0
 80067c6:	693a      	ldr	r2, [r7, #16]
 80067c8:	2100      	movs	r1, #0
 80067ca:	68f8      	ldr	r0, [r7, #12]
 80067cc:	f7ff fd58 	bl	8006280 <xTimerGenericCommand>
 80067d0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d10b      	bne.n	80067f0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80067d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067dc:	f383 8811 	msr	BASEPRI, r3
 80067e0:	f3bf 8f6f 	isb	sy
 80067e4:	f3bf 8f4f 	dsb	sy
 80067e8:	603b      	str	r3, [r7, #0]
}
 80067ea:	bf00      	nop
 80067ec:	bf00      	nop
 80067ee:	e7fd      	b.n	80067ec <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80067f0:	4b09      	ldr	r3, [pc, #36]	@ (8006818 <prvSwitchTimerLists+0xc4>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d1b0      	bne.n	800675c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80067fa:	4b07      	ldr	r3, [pc, #28]	@ (8006818 <prvSwitchTimerLists+0xc4>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006800:	4b06      	ldr	r3, [pc, #24]	@ (800681c <prvSwitchTimerLists+0xc8>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a04      	ldr	r2, [pc, #16]	@ (8006818 <prvSwitchTimerLists+0xc4>)
 8006806:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006808:	4a04      	ldr	r2, [pc, #16]	@ (800681c <prvSwitchTimerLists+0xc8>)
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	6013      	str	r3, [r2, #0]
}
 800680e:	bf00      	nop
 8006810:	3718      	adds	r7, #24
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}
 8006816:	bf00      	nop
 8006818:	20000eac 	.word	0x20000eac
 800681c:	20000eb0 	.word	0x20000eb0

08006820 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b082      	sub	sp, #8
 8006824:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006826:	f000 f96f 	bl	8006b08 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800682a:	4b15      	ldr	r3, [pc, #84]	@ (8006880 <prvCheckForValidListAndQueue+0x60>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d120      	bne.n	8006874 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006832:	4814      	ldr	r0, [pc, #80]	@ (8006884 <prvCheckForValidListAndQueue+0x64>)
 8006834:	f7fd fcc6 	bl	80041c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006838:	4813      	ldr	r0, [pc, #76]	@ (8006888 <prvCheckForValidListAndQueue+0x68>)
 800683a:	f7fd fcc3 	bl	80041c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800683e:	4b13      	ldr	r3, [pc, #76]	@ (800688c <prvCheckForValidListAndQueue+0x6c>)
 8006840:	4a10      	ldr	r2, [pc, #64]	@ (8006884 <prvCheckForValidListAndQueue+0x64>)
 8006842:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006844:	4b12      	ldr	r3, [pc, #72]	@ (8006890 <prvCheckForValidListAndQueue+0x70>)
 8006846:	4a10      	ldr	r2, [pc, #64]	@ (8006888 <prvCheckForValidListAndQueue+0x68>)
 8006848:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800684a:	2300      	movs	r3, #0
 800684c:	9300      	str	r3, [sp, #0]
 800684e:	4b11      	ldr	r3, [pc, #68]	@ (8006894 <prvCheckForValidListAndQueue+0x74>)
 8006850:	4a11      	ldr	r2, [pc, #68]	@ (8006898 <prvCheckForValidListAndQueue+0x78>)
 8006852:	2110      	movs	r1, #16
 8006854:	200a      	movs	r0, #10
 8006856:	f7fd fdd3 	bl	8004400 <xQueueGenericCreateStatic>
 800685a:	4603      	mov	r3, r0
 800685c:	4a08      	ldr	r2, [pc, #32]	@ (8006880 <prvCheckForValidListAndQueue+0x60>)
 800685e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006860:	4b07      	ldr	r3, [pc, #28]	@ (8006880 <prvCheckForValidListAndQueue+0x60>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d005      	beq.n	8006874 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006868:	4b05      	ldr	r3, [pc, #20]	@ (8006880 <prvCheckForValidListAndQueue+0x60>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	490b      	ldr	r1, [pc, #44]	@ (800689c <prvCheckForValidListAndQueue+0x7c>)
 800686e:	4618      	mov	r0, r3
 8006870:	f7fe fc14 	bl	800509c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006874:	f000 f97a 	bl	8006b6c <vPortExitCritical>
}
 8006878:	bf00      	nop
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop
 8006880:	20000eb4 	.word	0x20000eb4
 8006884:	20000e84 	.word	0x20000e84
 8006888:	20000e98 	.word	0x20000e98
 800688c:	20000eac 	.word	0x20000eac
 8006890:	20000eb0 	.word	0x20000eb0
 8006894:	20000f60 	.word	0x20000f60
 8006898:	20000ec0 	.word	0x20000ec0
 800689c:	08007ba4 	.word	0x08007ba4

080068a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80068a0:	b480      	push	{r7}
 80068a2:	b085      	sub	sp, #20
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	60f8      	str	r0, [r7, #12]
 80068a8:	60b9      	str	r1, [r7, #8]
 80068aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	3b04      	subs	r3, #4
 80068b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80068b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	3b04      	subs	r3, #4
 80068be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	f023 0201 	bic.w	r2, r3, #1
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	3b04      	subs	r3, #4
 80068ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80068d0:	4a0c      	ldr	r2, [pc, #48]	@ (8006904 <pxPortInitialiseStack+0x64>)
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	3b14      	subs	r3, #20
 80068da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	3b04      	subs	r3, #4
 80068e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f06f 0202 	mvn.w	r2, #2
 80068ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	3b20      	subs	r3, #32
 80068f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80068f6:	68fb      	ldr	r3, [r7, #12]
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3714      	adds	r7, #20
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr
 8006904:	08006909 	.word	0x08006909

08006908 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006908:	b480      	push	{r7}
 800690a:	b085      	sub	sp, #20
 800690c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800690e:	2300      	movs	r3, #0
 8006910:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006912:	4b13      	ldr	r3, [pc, #76]	@ (8006960 <prvTaskExitError+0x58>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800691a:	d00b      	beq.n	8006934 <prvTaskExitError+0x2c>
	__asm volatile
 800691c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006920:	f383 8811 	msr	BASEPRI, r3
 8006924:	f3bf 8f6f 	isb	sy
 8006928:	f3bf 8f4f 	dsb	sy
 800692c:	60fb      	str	r3, [r7, #12]
}
 800692e:	bf00      	nop
 8006930:	bf00      	nop
 8006932:	e7fd      	b.n	8006930 <prvTaskExitError+0x28>
	__asm volatile
 8006934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006938:	f383 8811 	msr	BASEPRI, r3
 800693c:	f3bf 8f6f 	isb	sy
 8006940:	f3bf 8f4f 	dsb	sy
 8006944:	60bb      	str	r3, [r7, #8]
}
 8006946:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006948:	bf00      	nop
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d0fc      	beq.n	800694a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006950:	bf00      	nop
 8006952:	bf00      	nop
 8006954:	3714      	adds	r7, #20
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr
 800695e:	bf00      	nop
 8006960:	2000000c 	.word	0x2000000c
	...

08006970 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006970:	4b07      	ldr	r3, [pc, #28]	@ (8006990 <pxCurrentTCBConst2>)
 8006972:	6819      	ldr	r1, [r3, #0]
 8006974:	6808      	ldr	r0, [r1, #0]
 8006976:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800697a:	f380 8809 	msr	PSP, r0
 800697e:	f3bf 8f6f 	isb	sy
 8006982:	f04f 0000 	mov.w	r0, #0
 8006986:	f380 8811 	msr	BASEPRI, r0
 800698a:	4770      	bx	lr
 800698c:	f3af 8000 	nop.w

08006990 <pxCurrentTCBConst2>:
 8006990:	20000984 	.word	0x20000984
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006994:	bf00      	nop
 8006996:	bf00      	nop

08006998 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006998:	4808      	ldr	r0, [pc, #32]	@ (80069bc <prvPortStartFirstTask+0x24>)
 800699a:	6800      	ldr	r0, [r0, #0]
 800699c:	6800      	ldr	r0, [r0, #0]
 800699e:	f380 8808 	msr	MSP, r0
 80069a2:	f04f 0000 	mov.w	r0, #0
 80069a6:	f380 8814 	msr	CONTROL, r0
 80069aa:	b662      	cpsie	i
 80069ac:	b661      	cpsie	f
 80069ae:	f3bf 8f4f 	dsb	sy
 80069b2:	f3bf 8f6f 	isb	sy
 80069b6:	df00      	svc	0
 80069b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80069ba:	bf00      	nop
 80069bc:	e000ed08 	.word	0xe000ed08

080069c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b086      	sub	sp, #24
 80069c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80069c6:	4b47      	ldr	r3, [pc, #284]	@ (8006ae4 <xPortStartScheduler+0x124>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a47      	ldr	r2, [pc, #284]	@ (8006ae8 <xPortStartScheduler+0x128>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d10b      	bne.n	80069e8 <xPortStartScheduler+0x28>
	__asm volatile
 80069d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069d4:	f383 8811 	msr	BASEPRI, r3
 80069d8:	f3bf 8f6f 	isb	sy
 80069dc:	f3bf 8f4f 	dsb	sy
 80069e0:	613b      	str	r3, [r7, #16]
}
 80069e2:	bf00      	nop
 80069e4:	bf00      	nop
 80069e6:	e7fd      	b.n	80069e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80069e8:	4b3e      	ldr	r3, [pc, #248]	@ (8006ae4 <xPortStartScheduler+0x124>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a3f      	ldr	r2, [pc, #252]	@ (8006aec <xPortStartScheduler+0x12c>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d10b      	bne.n	8006a0a <xPortStartScheduler+0x4a>
	__asm volatile
 80069f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069f6:	f383 8811 	msr	BASEPRI, r3
 80069fa:	f3bf 8f6f 	isb	sy
 80069fe:	f3bf 8f4f 	dsb	sy
 8006a02:	60fb      	str	r3, [r7, #12]
}
 8006a04:	bf00      	nop
 8006a06:	bf00      	nop
 8006a08:	e7fd      	b.n	8006a06 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006a0a:	4b39      	ldr	r3, [pc, #228]	@ (8006af0 <xPortStartScheduler+0x130>)
 8006a0c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	b2db      	uxtb	r3, r3
 8006a14:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	22ff      	movs	r2, #255	@ 0xff
 8006a1a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006a24:	78fb      	ldrb	r3, [r7, #3]
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006a2c:	b2da      	uxtb	r2, r3
 8006a2e:	4b31      	ldr	r3, [pc, #196]	@ (8006af4 <xPortStartScheduler+0x134>)
 8006a30:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006a32:	4b31      	ldr	r3, [pc, #196]	@ (8006af8 <xPortStartScheduler+0x138>)
 8006a34:	2207      	movs	r2, #7
 8006a36:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a38:	e009      	b.n	8006a4e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8006a3a:	4b2f      	ldr	r3, [pc, #188]	@ (8006af8 <xPortStartScheduler+0x138>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	3b01      	subs	r3, #1
 8006a40:	4a2d      	ldr	r2, [pc, #180]	@ (8006af8 <xPortStartScheduler+0x138>)
 8006a42:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006a44:	78fb      	ldrb	r3, [r7, #3]
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	005b      	lsls	r3, r3, #1
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a4e:	78fb      	ldrb	r3, [r7, #3]
 8006a50:	b2db      	uxtb	r3, r3
 8006a52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a56:	2b80      	cmp	r3, #128	@ 0x80
 8006a58:	d0ef      	beq.n	8006a3a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006a5a:	4b27      	ldr	r3, [pc, #156]	@ (8006af8 <xPortStartScheduler+0x138>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f1c3 0307 	rsb	r3, r3, #7
 8006a62:	2b04      	cmp	r3, #4
 8006a64:	d00b      	beq.n	8006a7e <xPortStartScheduler+0xbe>
	__asm volatile
 8006a66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a6a:	f383 8811 	msr	BASEPRI, r3
 8006a6e:	f3bf 8f6f 	isb	sy
 8006a72:	f3bf 8f4f 	dsb	sy
 8006a76:	60bb      	str	r3, [r7, #8]
}
 8006a78:	bf00      	nop
 8006a7a:	bf00      	nop
 8006a7c:	e7fd      	b.n	8006a7a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006a7e:	4b1e      	ldr	r3, [pc, #120]	@ (8006af8 <xPortStartScheduler+0x138>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	021b      	lsls	r3, r3, #8
 8006a84:	4a1c      	ldr	r2, [pc, #112]	@ (8006af8 <xPortStartScheduler+0x138>)
 8006a86:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006a88:	4b1b      	ldr	r3, [pc, #108]	@ (8006af8 <xPortStartScheduler+0x138>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006a90:	4a19      	ldr	r2, [pc, #100]	@ (8006af8 <xPortStartScheduler+0x138>)
 8006a92:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	b2da      	uxtb	r2, r3
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006a9c:	4b17      	ldr	r3, [pc, #92]	@ (8006afc <xPortStartScheduler+0x13c>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a16      	ldr	r2, [pc, #88]	@ (8006afc <xPortStartScheduler+0x13c>)
 8006aa2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006aa6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006aa8:	4b14      	ldr	r3, [pc, #80]	@ (8006afc <xPortStartScheduler+0x13c>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a13      	ldr	r2, [pc, #76]	@ (8006afc <xPortStartScheduler+0x13c>)
 8006aae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006ab2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006ab4:	f000 f8da 	bl	8006c6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006ab8:	4b11      	ldr	r3, [pc, #68]	@ (8006b00 <xPortStartScheduler+0x140>)
 8006aba:	2200      	movs	r2, #0
 8006abc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006abe:	f000 f8f9 	bl	8006cb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006ac2:	4b10      	ldr	r3, [pc, #64]	@ (8006b04 <xPortStartScheduler+0x144>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a0f      	ldr	r2, [pc, #60]	@ (8006b04 <xPortStartScheduler+0x144>)
 8006ac8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006acc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006ace:	f7ff ff63 	bl	8006998 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006ad2:	f7fe ff1b 	bl	800590c <vTaskSwitchContext>
	prvTaskExitError();
 8006ad6:	f7ff ff17 	bl	8006908 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006ada:	2300      	movs	r3, #0
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3718      	adds	r7, #24
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}
 8006ae4:	e000ed00 	.word	0xe000ed00
 8006ae8:	410fc271 	.word	0x410fc271
 8006aec:	410fc270 	.word	0x410fc270
 8006af0:	e000e400 	.word	0xe000e400
 8006af4:	20000fb0 	.word	0x20000fb0
 8006af8:	20000fb4 	.word	0x20000fb4
 8006afc:	e000ed20 	.word	0xe000ed20
 8006b00:	2000000c 	.word	0x2000000c
 8006b04:	e000ef34 	.word	0xe000ef34

08006b08 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b083      	sub	sp, #12
 8006b0c:	af00      	add	r7, sp, #0
	__asm volatile
 8006b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b12:	f383 8811 	msr	BASEPRI, r3
 8006b16:	f3bf 8f6f 	isb	sy
 8006b1a:	f3bf 8f4f 	dsb	sy
 8006b1e:	607b      	str	r3, [r7, #4]
}
 8006b20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006b22:	4b10      	ldr	r3, [pc, #64]	@ (8006b64 <vPortEnterCritical+0x5c>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	3301      	adds	r3, #1
 8006b28:	4a0e      	ldr	r2, [pc, #56]	@ (8006b64 <vPortEnterCritical+0x5c>)
 8006b2a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006b2c:	4b0d      	ldr	r3, [pc, #52]	@ (8006b64 <vPortEnterCritical+0x5c>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d110      	bne.n	8006b56 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006b34:	4b0c      	ldr	r3, [pc, #48]	@ (8006b68 <vPortEnterCritical+0x60>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d00b      	beq.n	8006b56 <vPortEnterCritical+0x4e>
	__asm volatile
 8006b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b42:	f383 8811 	msr	BASEPRI, r3
 8006b46:	f3bf 8f6f 	isb	sy
 8006b4a:	f3bf 8f4f 	dsb	sy
 8006b4e:	603b      	str	r3, [r7, #0]
}
 8006b50:	bf00      	nop
 8006b52:	bf00      	nop
 8006b54:	e7fd      	b.n	8006b52 <vPortEnterCritical+0x4a>
	}
}
 8006b56:	bf00      	nop
 8006b58:	370c      	adds	r7, #12
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr
 8006b62:	bf00      	nop
 8006b64:	2000000c 	.word	0x2000000c
 8006b68:	e000ed04 	.word	0xe000ed04

08006b6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b083      	sub	sp, #12
 8006b70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006b72:	4b12      	ldr	r3, [pc, #72]	@ (8006bbc <vPortExitCritical+0x50>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d10b      	bne.n	8006b92 <vPortExitCritical+0x26>
	__asm volatile
 8006b7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b7e:	f383 8811 	msr	BASEPRI, r3
 8006b82:	f3bf 8f6f 	isb	sy
 8006b86:	f3bf 8f4f 	dsb	sy
 8006b8a:	607b      	str	r3, [r7, #4]
}
 8006b8c:	bf00      	nop
 8006b8e:	bf00      	nop
 8006b90:	e7fd      	b.n	8006b8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006b92:	4b0a      	ldr	r3, [pc, #40]	@ (8006bbc <vPortExitCritical+0x50>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	3b01      	subs	r3, #1
 8006b98:	4a08      	ldr	r2, [pc, #32]	@ (8006bbc <vPortExitCritical+0x50>)
 8006b9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006b9c:	4b07      	ldr	r3, [pc, #28]	@ (8006bbc <vPortExitCritical+0x50>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d105      	bne.n	8006bb0 <vPortExitCritical+0x44>
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	f383 8811 	msr	BASEPRI, r3
}
 8006bae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006bb0:	bf00      	nop
 8006bb2:	370c      	adds	r7, #12
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr
 8006bbc:	2000000c 	.word	0x2000000c

08006bc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006bc0:	f3ef 8009 	mrs	r0, PSP
 8006bc4:	f3bf 8f6f 	isb	sy
 8006bc8:	4b15      	ldr	r3, [pc, #84]	@ (8006c20 <pxCurrentTCBConst>)
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	f01e 0f10 	tst.w	lr, #16
 8006bd0:	bf08      	it	eq
 8006bd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006bd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bda:	6010      	str	r0, [r2, #0]
 8006bdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006be0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006be4:	f380 8811 	msr	BASEPRI, r0
 8006be8:	f3bf 8f4f 	dsb	sy
 8006bec:	f3bf 8f6f 	isb	sy
 8006bf0:	f7fe fe8c 	bl	800590c <vTaskSwitchContext>
 8006bf4:	f04f 0000 	mov.w	r0, #0
 8006bf8:	f380 8811 	msr	BASEPRI, r0
 8006bfc:	bc09      	pop	{r0, r3}
 8006bfe:	6819      	ldr	r1, [r3, #0]
 8006c00:	6808      	ldr	r0, [r1, #0]
 8006c02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c06:	f01e 0f10 	tst.w	lr, #16
 8006c0a:	bf08      	it	eq
 8006c0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006c10:	f380 8809 	msr	PSP, r0
 8006c14:	f3bf 8f6f 	isb	sy
 8006c18:	4770      	bx	lr
 8006c1a:	bf00      	nop
 8006c1c:	f3af 8000 	nop.w

08006c20 <pxCurrentTCBConst>:
 8006c20:	20000984 	.word	0x20000984
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006c24:	bf00      	nop
 8006c26:	bf00      	nop

08006c28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b082      	sub	sp, #8
 8006c2c:	af00      	add	r7, sp, #0
	__asm volatile
 8006c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c32:	f383 8811 	msr	BASEPRI, r3
 8006c36:	f3bf 8f6f 	isb	sy
 8006c3a:	f3bf 8f4f 	dsb	sy
 8006c3e:	607b      	str	r3, [r7, #4]
}
 8006c40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006c42:	f7fe fda9 	bl	8005798 <xTaskIncrementTick>
 8006c46:	4603      	mov	r3, r0
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d003      	beq.n	8006c54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006c4c:	4b06      	ldr	r3, [pc, #24]	@ (8006c68 <xPortSysTickHandler+0x40>)
 8006c4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c52:	601a      	str	r2, [r3, #0]
 8006c54:	2300      	movs	r3, #0
 8006c56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	f383 8811 	msr	BASEPRI, r3
}
 8006c5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006c60:	bf00      	nop
 8006c62:	3708      	adds	r7, #8
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}
 8006c68:	e000ed04 	.word	0xe000ed04

08006c6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006c70:	4b0b      	ldr	r3, [pc, #44]	@ (8006ca0 <vPortSetupTimerInterrupt+0x34>)
 8006c72:	2200      	movs	r2, #0
 8006c74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006c76:	4b0b      	ldr	r3, [pc, #44]	@ (8006ca4 <vPortSetupTimerInterrupt+0x38>)
 8006c78:	2200      	movs	r2, #0
 8006c7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006c7c:	4b0a      	ldr	r3, [pc, #40]	@ (8006ca8 <vPortSetupTimerInterrupt+0x3c>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a0a      	ldr	r2, [pc, #40]	@ (8006cac <vPortSetupTimerInterrupt+0x40>)
 8006c82:	fba2 2303 	umull	r2, r3, r2, r3
 8006c86:	099b      	lsrs	r3, r3, #6
 8006c88:	4a09      	ldr	r2, [pc, #36]	@ (8006cb0 <vPortSetupTimerInterrupt+0x44>)
 8006c8a:	3b01      	subs	r3, #1
 8006c8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006c8e:	4b04      	ldr	r3, [pc, #16]	@ (8006ca0 <vPortSetupTimerInterrupt+0x34>)
 8006c90:	2207      	movs	r2, #7
 8006c92:	601a      	str	r2, [r3, #0]
}
 8006c94:	bf00      	nop
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr
 8006c9e:	bf00      	nop
 8006ca0:	e000e010 	.word	0xe000e010
 8006ca4:	e000e018 	.word	0xe000e018
 8006ca8:	20000000 	.word	0x20000000
 8006cac:	10624dd3 	.word	0x10624dd3
 8006cb0:	e000e014 	.word	0xe000e014

08006cb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006cb4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006cc4 <vPortEnableVFP+0x10>
 8006cb8:	6801      	ldr	r1, [r0, #0]
 8006cba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006cbe:	6001      	str	r1, [r0, #0]
 8006cc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006cc2:	bf00      	nop
 8006cc4:	e000ed88 	.word	0xe000ed88

08006cc8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006cc8:	b480      	push	{r7}
 8006cca:	b085      	sub	sp, #20
 8006ccc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006cce:	f3ef 8305 	mrs	r3, IPSR
 8006cd2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2b0f      	cmp	r3, #15
 8006cd8:	d915      	bls.n	8006d06 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006cda:	4a18      	ldr	r2, [pc, #96]	@ (8006d3c <vPortValidateInterruptPriority+0x74>)
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	4413      	add	r3, r2
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006ce4:	4b16      	ldr	r3, [pc, #88]	@ (8006d40 <vPortValidateInterruptPriority+0x78>)
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	7afa      	ldrb	r2, [r7, #11]
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d20b      	bcs.n	8006d06 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006cee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cf2:	f383 8811 	msr	BASEPRI, r3
 8006cf6:	f3bf 8f6f 	isb	sy
 8006cfa:	f3bf 8f4f 	dsb	sy
 8006cfe:	607b      	str	r3, [r7, #4]
}
 8006d00:	bf00      	nop
 8006d02:	bf00      	nop
 8006d04:	e7fd      	b.n	8006d02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006d06:	4b0f      	ldr	r3, [pc, #60]	@ (8006d44 <vPortValidateInterruptPriority+0x7c>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006d0e:	4b0e      	ldr	r3, [pc, #56]	@ (8006d48 <vPortValidateInterruptPriority+0x80>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	429a      	cmp	r2, r3
 8006d14:	d90b      	bls.n	8006d2e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d1a:	f383 8811 	msr	BASEPRI, r3
 8006d1e:	f3bf 8f6f 	isb	sy
 8006d22:	f3bf 8f4f 	dsb	sy
 8006d26:	603b      	str	r3, [r7, #0]
}
 8006d28:	bf00      	nop
 8006d2a:	bf00      	nop
 8006d2c:	e7fd      	b.n	8006d2a <vPortValidateInterruptPriority+0x62>
	}
 8006d2e:	bf00      	nop
 8006d30:	3714      	adds	r7, #20
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr
 8006d3a:	bf00      	nop
 8006d3c:	e000e3f0 	.word	0xe000e3f0
 8006d40:	20000fb0 	.word	0x20000fb0
 8006d44:	e000ed0c 	.word	0xe000ed0c
 8006d48:	20000fb4 	.word	0x20000fb4

08006d4c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b08a      	sub	sp, #40	@ 0x28
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006d54:	2300      	movs	r3, #0
 8006d56:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006d58:	f7fe fc62 	bl	8005620 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006d5c:	4b5c      	ldr	r3, [pc, #368]	@ (8006ed0 <pvPortMalloc+0x184>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d101      	bne.n	8006d68 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006d64:	f000 f924 	bl	8006fb0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006d68:	4b5a      	ldr	r3, [pc, #360]	@ (8006ed4 <pvPortMalloc+0x188>)
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	4013      	ands	r3, r2
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	f040 8095 	bne.w	8006ea0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d01e      	beq.n	8006dba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006d7c:	2208      	movs	r2, #8
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	4413      	add	r3, r2
 8006d82:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f003 0307 	and.w	r3, r3, #7
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d015      	beq.n	8006dba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f023 0307 	bic.w	r3, r3, #7
 8006d94:	3308      	adds	r3, #8
 8006d96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f003 0307 	and.w	r3, r3, #7
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d00b      	beq.n	8006dba <pvPortMalloc+0x6e>
	__asm volatile
 8006da2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006da6:	f383 8811 	msr	BASEPRI, r3
 8006daa:	f3bf 8f6f 	isb	sy
 8006dae:	f3bf 8f4f 	dsb	sy
 8006db2:	617b      	str	r3, [r7, #20]
}
 8006db4:	bf00      	nop
 8006db6:	bf00      	nop
 8006db8:	e7fd      	b.n	8006db6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d06f      	beq.n	8006ea0 <pvPortMalloc+0x154>
 8006dc0:	4b45      	ldr	r3, [pc, #276]	@ (8006ed8 <pvPortMalloc+0x18c>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	687a      	ldr	r2, [r7, #4]
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	d86a      	bhi.n	8006ea0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006dca:	4b44      	ldr	r3, [pc, #272]	@ (8006edc <pvPortMalloc+0x190>)
 8006dcc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006dce:	4b43      	ldr	r3, [pc, #268]	@ (8006edc <pvPortMalloc+0x190>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006dd4:	e004      	b.n	8006de0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dd8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d903      	bls.n	8006df2 <pvPortMalloc+0xa6>
 8006dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d1f1      	bne.n	8006dd6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006df2:	4b37      	ldr	r3, [pc, #220]	@ (8006ed0 <pvPortMalloc+0x184>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d051      	beq.n	8006ea0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006dfc:	6a3b      	ldr	r3, [r7, #32]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	2208      	movs	r2, #8
 8006e02:	4413      	add	r3, r2
 8006e04:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	6a3b      	ldr	r3, [r7, #32]
 8006e0c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e10:	685a      	ldr	r2, [r3, #4]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	1ad2      	subs	r2, r2, r3
 8006e16:	2308      	movs	r3, #8
 8006e18:	005b      	lsls	r3, r3, #1
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	d920      	bls.n	8006e60 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006e1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	4413      	add	r3, r2
 8006e24:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e26:	69bb      	ldr	r3, [r7, #24]
 8006e28:	f003 0307 	and.w	r3, r3, #7
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d00b      	beq.n	8006e48 <pvPortMalloc+0xfc>
	__asm volatile
 8006e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e34:	f383 8811 	msr	BASEPRI, r3
 8006e38:	f3bf 8f6f 	isb	sy
 8006e3c:	f3bf 8f4f 	dsb	sy
 8006e40:	613b      	str	r3, [r7, #16]
}
 8006e42:	bf00      	nop
 8006e44:	bf00      	nop
 8006e46:	e7fd      	b.n	8006e44 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e4a:	685a      	ldr	r2, [r3, #4]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	1ad2      	subs	r2, r2, r3
 8006e50:	69bb      	ldr	r3, [r7, #24]
 8006e52:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006e5a:	69b8      	ldr	r0, [r7, #24]
 8006e5c:	f000 f90a 	bl	8007074 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006e60:	4b1d      	ldr	r3, [pc, #116]	@ (8006ed8 <pvPortMalloc+0x18c>)
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	1ad3      	subs	r3, r2, r3
 8006e6a:	4a1b      	ldr	r2, [pc, #108]	@ (8006ed8 <pvPortMalloc+0x18c>)
 8006e6c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006e6e:	4b1a      	ldr	r3, [pc, #104]	@ (8006ed8 <pvPortMalloc+0x18c>)
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	4b1b      	ldr	r3, [pc, #108]	@ (8006ee0 <pvPortMalloc+0x194>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d203      	bcs.n	8006e82 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006e7a:	4b17      	ldr	r3, [pc, #92]	@ (8006ed8 <pvPortMalloc+0x18c>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a18      	ldr	r2, [pc, #96]	@ (8006ee0 <pvPortMalloc+0x194>)
 8006e80:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e84:	685a      	ldr	r2, [r3, #4]
 8006e86:	4b13      	ldr	r3, [pc, #76]	@ (8006ed4 <pvPortMalloc+0x188>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	431a      	orrs	r2, r3
 8006e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e8e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e92:	2200      	movs	r2, #0
 8006e94:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006e96:	4b13      	ldr	r3, [pc, #76]	@ (8006ee4 <pvPortMalloc+0x198>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	4a11      	ldr	r2, [pc, #68]	@ (8006ee4 <pvPortMalloc+0x198>)
 8006e9e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006ea0:	f7fe fbcc 	bl	800563c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ea4:	69fb      	ldr	r3, [r7, #28]
 8006ea6:	f003 0307 	and.w	r3, r3, #7
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d00b      	beq.n	8006ec6 <pvPortMalloc+0x17a>
	__asm volatile
 8006eae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eb2:	f383 8811 	msr	BASEPRI, r3
 8006eb6:	f3bf 8f6f 	isb	sy
 8006eba:	f3bf 8f4f 	dsb	sy
 8006ebe:	60fb      	str	r3, [r7, #12]
}
 8006ec0:	bf00      	nop
 8006ec2:	bf00      	nop
 8006ec4:	e7fd      	b.n	8006ec2 <pvPortMalloc+0x176>
	return pvReturn;
 8006ec6:	69fb      	ldr	r3, [r7, #28]
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3728      	adds	r7, #40	@ 0x28
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}
 8006ed0:	20004bc0 	.word	0x20004bc0
 8006ed4:	20004bd4 	.word	0x20004bd4
 8006ed8:	20004bc4 	.word	0x20004bc4
 8006edc:	20004bb8 	.word	0x20004bb8
 8006ee0:	20004bc8 	.word	0x20004bc8
 8006ee4:	20004bcc 	.word	0x20004bcc

08006ee8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b086      	sub	sp, #24
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d04f      	beq.n	8006f9a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006efa:	2308      	movs	r3, #8
 8006efc:	425b      	negs	r3, r3
 8006efe:	697a      	ldr	r2, [r7, #20]
 8006f00:	4413      	add	r3, r2
 8006f02:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	685a      	ldr	r2, [r3, #4]
 8006f0c:	4b25      	ldr	r3, [pc, #148]	@ (8006fa4 <vPortFree+0xbc>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4013      	ands	r3, r2
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d10b      	bne.n	8006f2e <vPortFree+0x46>
	__asm volatile
 8006f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f1a:	f383 8811 	msr	BASEPRI, r3
 8006f1e:	f3bf 8f6f 	isb	sy
 8006f22:	f3bf 8f4f 	dsb	sy
 8006f26:	60fb      	str	r3, [r7, #12]
}
 8006f28:	bf00      	nop
 8006f2a:	bf00      	nop
 8006f2c:	e7fd      	b.n	8006f2a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d00b      	beq.n	8006f4e <vPortFree+0x66>
	__asm volatile
 8006f36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f3a:	f383 8811 	msr	BASEPRI, r3
 8006f3e:	f3bf 8f6f 	isb	sy
 8006f42:	f3bf 8f4f 	dsb	sy
 8006f46:	60bb      	str	r3, [r7, #8]
}
 8006f48:	bf00      	nop
 8006f4a:	bf00      	nop
 8006f4c:	e7fd      	b.n	8006f4a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	685a      	ldr	r2, [r3, #4]
 8006f52:	4b14      	ldr	r3, [pc, #80]	@ (8006fa4 <vPortFree+0xbc>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4013      	ands	r3, r2
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d01e      	beq.n	8006f9a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d11a      	bne.n	8006f9a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	685a      	ldr	r2, [r3, #4]
 8006f68:	4b0e      	ldr	r3, [pc, #56]	@ (8006fa4 <vPortFree+0xbc>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	43db      	mvns	r3, r3
 8006f6e:	401a      	ands	r2, r3
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006f74:	f7fe fb54 	bl	8005620 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	685a      	ldr	r2, [r3, #4]
 8006f7c:	4b0a      	ldr	r3, [pc, #40]	@ (8006fa8 <vPortFree+0xc0>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4413      	add	r3, r2
 8006f82:	4a09      	ldr	r2, [pc, #36]	@ (8006fa8 <vPortFree+0xc0>)
 8006f84:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006f86:	6938      	ldr	r0, [r7, #16]
 8006f88:	f000 f874 	bl	8007074 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006f8c:	4b07      	ldr	r3, [pc, #28]	@ (8006fac <vPortFree+0xc4>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	3301      	adds	r3, #1
 8006f92:	4a06      	ldr	r2, [pc, #24]	@ (8006fac <vPortFree+0xc4>)
 8006f94:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006f96:	f7fe fb51 	bl	800563c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006f9a:	bf00      	nop
 8006f9c:	3718      	adds	r7, #24
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}
 8006fa2:	bf00      	nop
 8006fa4:	20004bd4 	.word	0x20004bd4
 8006fa8:	20004bc4 	.word	0x20004bc4
 8006fac:	20004bd0 	.word	0x20004bd0

08006fb0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b085      	sub	sp, #20
 8006fb4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006fb6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006fba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006fbc:	4b27      	ldr	r3, [pc, #156]	@ (800705c <prvHeapInit+0xac>)
 8006fbe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f003 0307 	and.w	r3, r3, #7
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d00c      	beq.n	8006fe4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	3307      	adds	r3, #7
 8006fce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f023 0307 	bic.w	r3, r3, #7
 8006fd6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006fd8:	68ba      	ldr	r2, [r7, #8]
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	1ad3      	subs	r3, r2, r3
 8006fde:	4a1f      	ldr	r2, [pc, #124]	@ (800705c <prvHeapInit+0xac>)
 8006fe0:	4413      	add	r3, r2
 8006fe2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006fe8:	4a1d      	ldr	r2, [pc, #116]	@ (8007060 <prvHeapInit+0xb0>)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006fee:	4b1c      	ldr	r3, [pc, #112]	@ (8007060 <prvHeapInit+0xb0>)
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	68ba      	ldr	r2, [r7, #8]
 8006ff8:	4413      	add	r3, r2
 8006ffa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006ffc:	2208      	movs	r2, #8
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	1a9b      	subs	r3, r3, r2
 8007002:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f023 0307 	bic.w	r3, r3, #7
 800700a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	4a15      	ldr	r2, [pc, #84]	@ (8007064 <prvHeapInit+0xb4>)
 8007010:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007012:	4b14      	ldr	r3, [pc, #80]	@ (8007064 <prvHeapInit+0xb4>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	2200      	movs	r2, #0
 8007018:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800701a:	4b12      	ldr	r3, [pc, #72]	@ (8007064 <prvHeapInit+0xb4>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	2200      	movs	r2, #0
 8007020:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	68fa      	ldr	r2, [r7, #12]
 800702a:	1ad2      	subs	r2, r2, r3
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007030:	4b0c      	ldr	r3, [pc, #48]	@ (8007064 <prvHeapInit+0xb4>)
 8007032:	681a      	ldr	r2, [r3, #0]
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	4a0a      	ldr	r2, [pc, #40]	@ (8007068 <prvHeapInit+0xb8>)
 800703e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	4a09      	ldr	r2, [pc, #36]	@ (800706c <prvHeapInit+0xbc>)
 8007046:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007048:	4b09      	ldr	r3, [pc, #36]	@ (8007070 <prvHeapInit+0xc0>)
 800704a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800704e:	601a      	str	r2, [r3, #0]
}
 8007050:	bf00      	nop
 8007052:	3714      	adds	r7, #20
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr
 800705c:	20000fb8 	.word	0x20000fb8
 8007060:	20004bb8 	.word	0x20004bb8
 8007064:	20004bc0 	.word	0x20004bc0
 8007068:	20004bc8 	.word	0x20004bc8
 800706c:	20004bc4 	.word	0x20004bc4
 8007070:	20004bd4 	.word	0x20004bd4

08007074 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007074:	b480      	push	{r7}
 8007076:	b085      	sub	sp, #20
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800707c:	4b28      	ldr	r3, [pc, #160]	@ (8007120 <prvInsertBlockIntoFreeList+0xac>)
 800707e:	60fb      	str	r3, [r7, #12]
 8007080:	e002      	b.n	8007088 <prvInsertBlockIntoFreeList+0x14>
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	60fb      	str	r3, [r7, #12]
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	687a      	ldr	r2, [r7, #4]
 800708e:	429a      	cmp	r2, r3
 8007090:	d8f7      	bhi.n	8007082 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	68ba      	ldr	r2, [r7, #8]
 800709c:	4413      	add	r3, r2
 800709e:	687a      	ldr	r2, [r7, #4]
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d108      	bne.n	80070b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	685a      	ldr	r2, [r3, #4]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	441a      	add	r2, r3
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	68ba      	ldr	r2, [r7, #8]
 80070c0:	441a      	add	r2, r3
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d118      	bne.n	80070fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681a      	ldr	r2, [r3, #0]
 80070ce:	4b15      	ldr	r3, [pc, #84]	@ (8007124 <prvInsertBlockIntoFreeList+0xb0>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d00d      	beq.n	80070f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	685a      	ldr	r2, [r3, #4]
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	441a      	add	r2, r3
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	601a      	str	r2, [r3, #0]
 80070f0:	e008      	b.n	8007104 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80070f2:	4b0c      	ldr	r3, [pc, #48]	@ (8007124 <prvInsertBlockIntoFreeList+0xb0>)
 80070f4:	681a      	ldr	r2, [r3, #0]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	601a      	str	r2, [r3, #0]
 80070fa:	e003      	b.n	8007104 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681a      	ldr	r2, [r3, #0]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007104:	68fa      	ldr	r2, [r7, #12]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	429a      	cmp	r2, r3
 800710a:	d002      	beq.n	8007112 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	687a      	ldr	r2, [r7, #4]
 8007110:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007112:	bf00      	nop
 8007114:	3714      	adds	r7, #20
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr
 800711e:	bf00      	nop
 8007120:	20004bb8 	.word	0x20004bb8
 8007124:	20004bc0 	.word	0x20004bc0

08007128 <std>:
 8007128:	2300      	movs	r3, #0
 800712a:	b510      	push	{r4, lr}
 800712c:	4604      	mov	r4, r0
 800712e:	e9c0 3300 	strd	r3, r3, [r0]
 8007132:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007136:	6083      	str	r3, [r0, #8]
 8007138:	8181      	strh	r1, [r0, #12]
 800713a:	6643      	str	r3, [r0, #100]	@ 0x64
 800713c:	81c2      	strh	r2, [r0, #14]
 800713e:	6183      	str	r3, [r0, #24]
 8007140:	4619      	mov	r1, r3
 8007142:	2208      	movs	r2, #8
 8007144:	305c      	adds	r0, #92	@ 0x5c
 8007146:	f000 f9e7 	bl	8007518 <memset>
 800714a:	4b0d      	ldr	r3, [pc, #52]	@ (8007180 <std+0x58>)
 800714c:	6263      	str	r3, [r4, #36]	@ 0x24
 800714e:	4b0d      	ldr	r3, [pc, #52]	@ (8007184 <std+0x5c>)
 8007150:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007152:	4b0d      	ldr	r3, [pc, #52]	@ (8007188 <std+0x60>)
 8007154:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007156:	4b0d      	ldr	r3, [pc, #52]	@ (800718c <std+0x64>)
 8007158:	6323      	str	r3, [r4, #48]	@ 0x30
 800715a:	4b0d      	ldr	r3, [pc, #52]	@ (8007190 <std+0x68>)
 800715c:	6224      	str	r4, [r4, #32]
 800715e:	429c      	cmp	r4, r3
 8007160:	d006      	beq.n	8007170 <std+0x48>
 8007162:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007166:	4294      	cmp	r4, r2
 8007168:	d002      	beq.n	8007170 <std+0x48>
 800716a:	33d0      	adds	r3, #208	@ 0xd0
 800716c:	429c      	cmp	r4, r3
 800716e:	d105      	bne.n	800717c <std+0x54>
 8007170:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007178:	f000 ba9c 	b.w	80076b4 <__retarget_lock_init_recursive>
 800717c:	bd10      	pop	{r4, pc}
 800717e:	bf00      	nop
 8007180:	08007369 	.word	0x08007369
 8007184:	0800738b 	.word	0x0800738b
 8007188:	080073c3 	.word	0x080073c3
 800718c:	080073e7 	.word	0x080073e7
 8007190:	20004bd8 	.word	0x20004bd8

08007194 <stdio_exit_handler>:
 8007194:	4a02      	ldr	r2, [pc, #8]	@ (80071a0 <stdio_exit_handler+0xc>)
 8007196:	4903      	ldr	r1, [pc, #12]	@ (80071a4 <stdio_exit_handler+0x10>)
 8007198:	4803      	ldr	r0, [pc, #12]	@ (80071a8 <stdio_exit_handler+0x14>)
 800719a:	f000 b869 	b.w	8007270 <_fwalk_sglue>
 800719e:	bf00      	nop
 80071a0:	20000010 	.word	0x20000010
 80071a4:	080079d1 	.word	0x080079d1
 80071a8:	20000020 	.word	0x20000020

080071ac <cleanup_stdio>:
 80071ac:	6841      	ldr	r1, [r0, #4]
 80071ae:	4b0c      	ldr	r3, [pc, #48]	@ (80071e0 <cleanup_stdio+0x34>)
 80071b0:	4299      	cmp	r1, r3
 80071b2:	b510      	push	{r4, lr}
 80071b4:	4604      	mov	r4, r0
 80071b6:	d001      	beq.n	80071bc <cleanup_stdio+0x10>
 80071b8:	f000 fc0a 	bl	80079d0 <_fflush_r>
 80071bc:	68a1      	ldr	r1, [r4, #8]
 80071be:	4b09      	ldr	r3, [pc, #36]	@ (80071e4 <cleanup_stdio+0x38>)
 80071c0:	4299      	cmp	r1, r3
 80071c2:	d002      	beq.n	80071ca <cleanup_stdio+0x1e>
 80071c4:	4620      	mov	r0, r4
 80071c6:	f000 fc03 	bl	80079d0 <_fflush_r>
 80071ca:	68e1      	ldr	r1, [r4, #12]
 80071cc:	4b06      	ldr	r3, [pc, #24]	@ (80071e8 <cleanup_stdio+0x3c>)
 80071ce:	4299      	cmp	r1, r3
 80071d0:	d004      	beq.n	80071dc <cleanup_stdio+0x30>
 80071d2:	4620      	mov	r0, r4
 80071d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071d8:	f000 bbfa 	b.w	80079d0 <_fflush_r>
 80071dc:	bd10      	pop	{r4, pc}
 80071de:	bf00      	nop
 80071e0:	20004bd8 	.word	0x20004bd8
 80071e4:	20004c40 	.word	0x20004c40
 80071e8:	20004ca8 	.word	0x20004ca8

080071ec <global_stdio_init.part.0>:
 80071ec:	b510      	push	{r4, lr}
 80071ee:	4b0b      	ldr	r3, [pc, #44]	@ (800721c <global_stdio_init.part.0+0x30>)
 80071f0:	4c0b      	ldr	r4, [pc, #44]	@ (8007220 <global_stdio_init.part.0+0x34>)
 80071f2:	4a0c      	ldr	r2, [pc, #48]	@ (8007224 <global_stdio_init.part.0+0x38>)
 80071f4:	601a      	str	r2, [r3, #0]
 80071f6:	4620      	mov	r0, r4
 80071f8:	2200      	movs	r2, #0
 80071fa:	2104      	movs	r1, #4
 80071fc:	f7ff ff94 	bl	8007128 <std>
 8007200:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007204:	2201      	movs	r2, #1
 8007206:	2109      	movs	r1, #9
 8007208:	f7ff ff8e 	bl	8007128 <std>
 800720c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007210:	2202      	movs	r2, #2
 8007212:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007216:	2112      	movs	r1, #18
 8007218:	f7ff bf86 	b.w	8007128 <std>
 800721c:	20004d10 	.word	0x20004d10
 8007220:	20004bd8 	.word	0x20004bd8
 8007224:	08007195 	.word	0x08007195

08007228 <__sfp_lock_acquire>:
 8007228:	4801      	ldr	r0, [pc, #4]	@ (8007230 <__sfp_lock_acquire+0x8>)
 800722a:	f000 ba44 	b.w	80076b6 <__retarget_lock_acquire_recursive>
 800722e:	bf00      	nop
 8007230:	20004d19 	.word	0x20004d19

08007234 <__sfp_lock_release>:
 8007234:	4801      	ldr	r0, [pc, #4]	@ (800723c <__sfp_lock_release+0x8>)
 8007236:	f000 ba3f 	b.w	80076b8 <__retarget_lock_release_recursive>
 800723a:	bf00      	nop
 800723c:	20004d19 	.word	0x20004d19

08007240 <__sinit>:
 8007240:	b510      	push	{r4, lr}
 8007242:	4604      	mov	r4, r0
 8007244:	f7ff fff0 	bl	8007228 <__sfp_lock_acquire>
 8007248:	6a23      	ldr	r3, [r4, #32]
 800724a:	b11b      	cbz	r3, 8007254 <__sinit+0x14>
 800724c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007250:	f7ff bff0 	b.w	8007234 <__sfp_lock_release>
 8007254:	4b04      	ldr	r3, [pc, #16]	@ (8007268 <__sinit+0x28>)
 8007256:	6223      	str	r3, [r4, #32]
 8007258:	4b04      	ldr	r3, [pc, #16]	@ (800726c <__sinit+0x2c>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d1f5      	bne.n	800724c <__sinit+0xc>
 8007260:	f7ff ffc4 	bl	80071ec <global_stdio_init.part.0>
 8007264:	e7f2      	b.n	800724c <__sinit+0xc>
 8007266:	bf00      	nop
 8007268:	080071ad 	.word	0x080071ad
 800726c:	20004d10 	.word	0x20004d10

08007270 <_fwalk_sglue>:
 8007270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007274:	4607      	mov	r7, r0
 8007276:	4688      	mov	r8, r1
 8007278:	4614      	mov	r4, r2
 800727a:	2600      	movs	r6, #0
 800727c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007280:	f1b9 0901 	subs.w	r9, r9, #1
 8007284:	d505      	bpl.n	8007292 <_fwalk_sglue+0x22>
 8007286:	6824      	ldr	r4, [r4, #0]
 8007288:	2c00      	cmp	r4, #0
 800728a:	d1f7      	bne.n	800727c <_fwalk_sglue+0xc>
 800728c:	4630      	mov	r0, r6
 800728e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007292:	89ab      	ldrh	r3, [r5, #12]
 8007294:	2b01      	cmp	r3, #1
 8007296:	d907      	bls.n	80072a8 <_fwalk_sglue+0x38>
 8007298:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800729c:	3301      	adds	r3, #1
 800729e:	d003      	beq.n	80072a8 <_fwalk_sglue+0x38>
 80072a0:	4629      	mov	r1, r5
 80072a2:	4638      	mov	r0, r7
 80072a4:	47c0      	blx	r8
 80072a6:	4306      	orrs	r6, r0
 80072a8:	3568      	adds	r5, #104	@ 0x68
 80072aa:	e7e9      	b.n	8007280 <_fwalk_sglue+0x10>

080072ac <_puts_r>:
 80072ac:	6a03      	ldr	r3, [r0, #32]
 80072ae:	b570      	push	{r4, r5, r6, lr}
 80072b0:	6884      	ldr	r4, [r0, #8]
 80072b2:	4605      	mov	r5, r0
 80072b4:	460e      	mov	r6, r1
 80072b6:	b90b      	cbnz	r3, 80072bc <_puts_r+0x10>
 80072b8:	f7ff ffc2 	bl	8007240 <__sinit>
 80072bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80072be:	07db      	lsls	r3, r3, #31
 80072c0:	d405      	bmi.n	80072ce <_puts_r+0x22>
 80072c2:	89a3      	ldrh	r3, [r4, #12]
 80072c4:	0598      	lsls	r0, r3, #22
 80072c6:	d402      	bmi.n	80072ce <_puts_r+0x22>
 80072c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80072ca:	f000 f9f4 	bl	80076b6 <__retarget_lock_acquire_recursive>
 80072ce:	89a3      	ldrh	r3, [r4, #12]
 80072d0:	0719      	lsls	r1, r3, #28
 80072d2:	d502      	bpl.n	80072da <_puts_r+0x2e>
 80072d4:	6923      	ldr	r3, [r4, #16]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d135      	bne.n	8007346 <_puts_r+0x9a>
 80072da:	4621      	mov	r1, r4
 80072dc:	4628      	mov	r0, r5
 80072de:	f000 f8c5 	bl	800746c <__swsetup_r>
 80072e2:	b380      	cbz	r0, 8007346 <_puts_r+0x9a>
 80072e4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80072e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80072ea:	07da      	lsls	r2, r3, #31
 80072ec:	d405      	bmi.n	80072fa <_puts_r+0x4e>
 80072ee:	89a3      	ldrh	r3, [r4, #12]
 80072f0:	059b      	lsls	r3, r3, #22
 80072f2:	d402      	bmi.n	80072fa <_puts_r+0x4e>
 80072f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80072f6:	f000 f9df 	bl	80076b8 <__retarget_lock_release_recursive>
 80072fa:	4628      	mov	r0, r5
 80072fc:	bd70      	pop	{r4, r5, r6, pc}
 80072fe:	2b00      	cmp	r3, #0
 8007300:	da04      	bge.n	800730c <_puts_r+0x60>
 8007302:	69a2      	ldr	r2, [r4, #24]
 8007304:	429a      	cmp	r2, r3
 8007306:	dc17      	bgt.n	8007338 <_puts_r+0x8c>
 8007308:	290a      	cmp	r1, #10
 800730a:	d015      	beq.n	8007338 <_puts_r+0x8c>
 800730c:	6823      	ldr	r3, [r4, #0]
 800730e:	1c5a      	adds	r2, r3, #1
 8007310:	6022      	str	r2, [r4, #0]
 8007312:	7019      	strb	r1, [r3, #0]
 8007314:	68a3      	ldr	r3, [r4, #8]
 8007316:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800731a:	3b01      	subs	r3, #1
 800731c:	60a3      	str	r3, [r4, #8]
 800731e:	2900      	cmp	r1, #0
 8007320:	d1ed      	bne.n	80072fe <_puts_r+0x52>
 8007322:	2b00      	cmp	r3, #0
 8007324:	da11      	bge.n	800734a <_puts_r+0x9e>
 8007326:	4622      	mov	r2, r4
 8007328:	210a      	movs	r1, #10
 800732a:	4628      	mov	r0, r5
 800732c:	f000 f85f 	bl	80073ee <__swbuf_r>
 8007330:	3001      	adds	r0, #1
 8007332:	d0d7      	beq.n	80072e4 <_puts_r+0x38>
 8007334:	250a      	movs	r5, #10
 8007336:	e7d7      	b.n	80072e8 <_puts_r+0x3c>
 8007338:	4622      	mov	r2, r4
 800733a:	4628      	mov	r0, r5
 800733c:	f000 f857 	bl	80073ee <__swbuf_r>
 8007340:	3001      	adds	r0, #1
 8007342:	d1e7      	bne.n	8007314 <_puts_r+0x68>
 8007344:	e7ce      	b.n	80072e4 <_puts_r+0x38>
 8007346:	3e01      	subs	r6, #1
 8007348:	e7e4      	b.n	8007314 <_puts_r+0x68>
 800734a:	6823      	ldr	r3, [r4, #0]
 800734c:	1c5a      	adds	r2, r3, #1
 800734e:	6022      	str	r2, [r4, #0]
 8007350:	220a      	movs	r2, #10
 8007352:	701a      	strb	r2, [r3, #0]
 8007354:	e7ee      	b.n	8007334 <_puts_r+0x88>
	...

08007358 <puts>:
 8007358:	4b02      	ldr	r3, [pc, #8]	@ (8007364 <puts+0xc>)
 800735a:	4601      	mov	r1, r0
 800735c:	6818      	ldr	r0, [r3, #0]
 800735e:	f7ff bfa5 	b.w	80072ac <_puts_r>
 8007362:	bf00      	nop
 8007364:	2000001c 	.word	0x2000001c

08007368 <__sread>:
 8007368:	b510      	push	{r4, lr}
 800736a:	460c      	mov	r4, r1
 800736c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007370:	f000 f952 	bl	8007618 <_read_r>
 8007374:	2800      	cmp	r0, #0
 8007376:	bfab      	itete	ge
 8007378:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800737a:	89a3      	ldrhlt	r3, [r4, #12]
 800737c:	181b      	addge	r3, r3, r0
 800737e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007382:	bfac      	ite	ge
 8007384:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007386:	81a3      	strhlt	r3, [r4, #12]
 8007388:	bd10      	pop	{r4, pc}

0800738a <__swrite>:
 800738a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800738e:	461f      	mov	r7, r3
 8007390:	898b      	ldrh	r3, [r1, #12]
 8007392:	05db      	lsls	r3, r3, #23
 8007394:	4605      	mov	r5, r0
 8007396:	460c      	mov	r4, r1
 8007398:	4616      	mov	r6, r2
 800739a:	d505      	bpl.n	80073a8 <__swrite+0x1e>
 800739c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073a0:	2302      	movs	r3, #2
 80073a2:	2200      	movs	r2, #0
 80073a4:	f000 f926 	bl	80075f4 <_lseek_r>
 80073a8:	89a3      	ldrh	r3, [r4, #12]
 80073aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80073b2:	81a3      	strh	r3, [r4, #12]
 80073b4:	4632      	mov	r2, r6
 80073b6:	463b      	mov	r3, r7
 80073b8:	4628      	mov	r0, r5
 80073ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073be:	f000 b93d 	b.w	800763c <_write_r>

080073c2 <__sseek>:
 80073c2:	b510      	push	{r4, lr}
 80073c4:	460c      	mov	r4, r1
 80073c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073ca:	f000 f913 	bl	80075f4 <_lseek_r>
 80073ce:	1c43      	adds	r3, r0, #1
 80073d0:	89a3      	ldrh	r3, [r4, #12]
 80073d2:	bf15      	itete	ne
 80073d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80073d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80073da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80073de:	81a3      	strheq	r3, [r4, #12]
 80073e0:	bf18      	it	ne
 80073e2:	81a3      	strhne	r3, [r4, #12]
 80073e4:	bd10      	pop	{r4, pc}

080073e6 <__sclose>:
 80073e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073ea:	f000 b89d 	b.w	8007528 <_close_r>

080073ee <__swbuf_r>:
 80073ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073f0:	460e      	mov	r6, r1
 80073f2:	4614      	mov	r4, r2
 80073f4:	4605      	mov	r5, r0
 80073f6:	b118      	cbz	r0, 8007400 <__swbuf_r+0x12>
 80073f8:	6a03      	ldr	r3, [r0, #32]
 80073fa:	b90b      	cbnz	r3, 8007400 <__swbuf_r+0x12>
 80073fc:	f7ff ff20 	bl	8007240 <__sinit>
 8007400:	69a3      	ldr	r3, [r4, #24]
 8007402:	60a3      	str	r3, [r4, #8]
 8007404:	89a3      	ldrh	r3, [r4, #12]
 8007406:	071a      	lsls	r2, r3, #28
 8007408:	d501      	bpl.n	800740e <__swbuf_r+0x20>
 800740a:	6923      	ldr	r3, [r4, #16]
 800740c:	b943      	cbnz	r3, 8007420 <__swbuf_r+0x32>
 800740e:	4621      	mov	r1, r4
 8007410:	4628      	mov	r0, r5
 8007412:	f000 f82b 	bl	800746c <__swsetup_r>
 8007416:	b118      	cbz	r0, 8007420 <__swbuf_r+0x32>
 8007418:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800741c:	4638      	mov	r0, r7
 800741e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007420:	6823      	ldr	r3, [r4, #0]
 8007422:	6922      	ldr	r2, [r4, #16]
 8007424:	1a98      	subs	r0, r3, r2
 8007426:	6963      	ldr	r3, [r4, #20]
 8007428:	b2f6      	uxtb	r6, r6
 800742a:	4283      	cmp	r3, r0
 800742c:	4637      	mov	r7, r6
 800742e:	dc05      	bgt.n	800743c <__swbuf_r+0x4e>
 8007430:	4621      	mov	r1, r4
 8007432:	4628      	mov	r0, r5
 8007434:	f000 facc 	bl	80079d0 <_fflush_r>
 8007438:	2800      	cmp	r0, #0
 800743a:	d1ed      	bne.n	8007418 <__swbuf_r+0x2a>
 800743c:	68a3      	ldr	r3, [r4, #8]
 800743e:	3b01      	subs	r3, #1
 8007440:	60a3      	str	r3, [r4, #8]
 8007442:	6823      	ldr	r3, [r4, #0]
 8007444:	1c5a      	adds	r2, r3, #1
 8007446:	6022      	str	r2, [r4, #0]
 8007448:	701e      	strb	r6, [r3, #0]
 800744a:	6962      	ldr	r2, [r4, #20]
 800744c:	1c43      	adds	r3, r0, #1
 800744e:	429a      	cmp	r2, r3
 8007450:	d004      	beq.n	800745c <__swbuf_r+0x6e>
 8007452:	89a3      	ldrh	r3, [r4, #12]
 8007454:	07db      	lsls	r3, r3, #31
 8007456:	d5e1      	bpl.n	800741c <__swbuf_r+0x2e>
 8007458:	2e0a      	cmp	r6, #10
 800745a:	d1df      	bne.n	800741c <__swbuf_r+0x2e>
 800745c:	4621      	mov	r1, r4
 800745e:	4628      	mov	r0, r5
 8007460:	f000 fab6 	bl	80079d0 <_fflush_r>
 8007464:	2800      	cmp	r0, #0
 8007466:	d0d9      	beq.n	800741c <__swbuf_r+0x2e>
 8007468:	e7d6      	b.n	8007418 <__swbuf_r+0x2a>
	...

0800746c <__swsetup_r>:
 800746c:	b538      	push	{r3, r4, r5, lr}
 800746e:	4b29      	ldr	r3, [pc, #164]	@ (8007514 <__swsetup_r+0xa8>)
 8007470:	4605      	mov	r5, r0
 8007472:	6818      	ldr	r0, [r3, #0]
 8007474:	460c      	mov	r4, r1
 8007476:	b118      	cbz	r0, 8007480 <__swsetup_r+0x14>
 8007478:	6a03      	ldr	r3, [r0, #32]
 800747a:	b90b      	cbnz	r3, 8007480 <__swsetup_r+0x14>
 800747c:	f7ff fee0 	bl	8007240 <__sinit>
 8007480:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007484:	0719      	lsls	r1, r3, #28
 8007486:	d422      	bmi.n	80074ce <__swsetup_r+0x62>
 8007488:	06da      	lsls	r2, r3, #27
 800748a:	d407      	bmi.n	800749c <__swsetup_r+0x30>
 800748c:	2209      	movs	r2, #9
 800748e:	602a      	str	r2, [r5, #0]
 8007490:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007494:	81a3      	strh	r3, [r4, #12]
 8007496:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800749a:	e033      	b.n	8007504 <__swsetup_r+0x98>
 800749c:	0758      	lsls	r0, r3, #29
 800749e:	d512      	bpl.n	80074c6 <__swsetup_r+0x5a>
 80074a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80074a2:	b141      	cbz	r1, 80074b6 <__swsetup_r+0x4a>
 80074a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80074a8:	4299      	cmp	r1, r3
 80074aa:	d002      	beq.n	80074b2 <__swsetup_r+0x46>
 80074ac:	4628      	mov	r0, r5
 80074ae:	f000 f913 	bl	80076d8 <_free_r>
 80074b2:	2300      	movs	r3, #0
 80074b4:	6363      	str	r3, [r4, #52]	@ 0x34
 80074b6:	89a3      	ldrh	r3, [r4, #12]
 80074b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80074bc:	81a3      	strh	r3, [r4, #12]
 80074be:	2300      	movs	r3, #0
 80074c0:	6063      	str	r3, [r4, #4]
 80074c2:	6923      	ldr	r3, [r4, #16]
 80074c4:	6023      	str	r3, [r4, #0]
 80074c6:	89a3      	ldrh	r3, [r4, #12]
 80074c8:	f043 0308 	orr.w	r3, r3, #8
 80074cc:	81a3      	strh	r3, [r4, #12]
 80074ce:	6923      	ldr	r3, [r4, #16]
 80074d0:	b94b      	cbnz	r3, 80074e6 <__swsetup_r+0x7a>
 80074d2:	89a3      	ldrh	r3, [r4, #12]
 80074d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80074d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074dc:	d003      	beq.n	80074e6 <__swsetup_r+0x7a>
 80074de:	4621      	mov	r1, r4
 80074e0:	4628      	mov	r0, r5
 80074e2:	f000 fac3 	bl	8007a6c <__smakebuf_r>
 80074e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074ea:	f013 0201 	ands.w	r2, r3, #1
 80074ee:	d00a      	beq.n	8007506 <__swsetup_r+0x9a>
 80074f0:	2200      	movs	r2, #0
 80074f2:	60a2      	str	r2, [r4, #8]
 80074f4:	6962      	ldr	r2, [r4, #20]
 80074f6:	4252      	negs	r2, r2
 80074f8:	61a2      	str	r2, [r4, #24]
 80074fa:	6922      	ldr	r2, [r4, #16]
 80074fc:	b942      	cbnz	r2, 8007510 <__swsetup_r+0xa4>
 80074fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007502:	d1c5      	bne.n	8007490 <__swsetup_r+0x24>
 8007504:	bd38      	pop	{r3, r4, r5, pc}
 8007506:	0799      	lsls	r1, r3, #30
 8007508:	bf58      	it	pl
 800750a:	6962      	ldrpl	r2, [r4, #20]
 800750c:	60a2      	str	r2, [r4, #8]
 800750e:	e7f4      	b.n	80074fa <__swsetup_r+0x8e>
 8007510:	2000      	movs	r0, #0
 8007512:	e7f7      	b.n	8007504 <__swsetup_r+0x98>
 8007514:	2000001c 	.word	0x2000001c

08007518 <memset>:
 8007518:	4402      	add	r2, r0
 800751a:	4603      	mov	r3, r0
 800751c:	4293      	cmp	r3, r2
 800751e:	d100      	bne.n	8007522 <memset+0xa>
 8007520:	4770      	bx	lr
 8007522:	f803 1b01 	strb.w	r1, [r3], #1
 8007526:	e7f9      	b.n	800751c <memset+0x4>

08007528 <_close_r>:
 8007528:	b538      	push	{r3, r4, r5, lr}
 800752a:	4d06      	ldr	r5, [pc, #24]	@ (8007544 <_close_r+0x1c>)
 800752c:	2300      	movs	r3, #0
 800752e:	4604      	mov	r4, r0
 8007530:	4608      	mov	r0, r1
 8007532:	602b      	str	r3, [r5, #0]
 8007534:	f7f9 feaf 	bl	8001296 <_close>
 8007538:	1c43      	adds	r3, r0, #1
 800753a:	d102      	bne.n	8007542 <_close_r+0x1a>
 800753c:	682b      	ldr	r3, [r5, #0]
 800753e:	b103      	cbz	r3, 8007542 <_close_r+0x1a>
 8007540:	6023      	str	r3, [r4, #0]
 8007542:	bd38      	pop	{r3, r4, r5, pc}
 8007544:	20004d14 	.word	0x20004d14

08007548 <_reclaim_reent>:
 8007548:	4b29      	ldr	r3, [pc, #164]	@ (80075f0 <_reclaim_reent+0xa8>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4283      	cmp	r3, r0
 800754e:	b570      	push	{r4, r5, r6, lr}
 8007550:	4604      	mov	r4, r0
 8007552:	d04b      	beq.n	80075ec <_reclaim_reent+0xa4>
 8007554:	69c3      	ldr	r3, [r0, #28]
 8007556:	b1ab      	cbz	r3, 8007584 <_reclaim_reent+0x3c>
 8007558:	68db      	ldr	r3, [r3, #12]
 800755a:	b16b      	cbz	r3, 8007578 <_reclaim_reent+0x30>
 800755c:	2500      	movs	r5, #0
 800755e:	69e3      	ldr	r3, [r4, #28]
 8007560:	68db      	ldr	r3, [r3, #12]
 8007562:	5959      	ldr	r1, [r3, r5]
 8007564:	2900      	cmp	r1, #0
 8007566:	d13b      	bne.n	80075e0 <_reclaim_reent+0x98>
 8007568:	3504      	adds	r5, #4
 800756a:	2d80      	cmp	r5, #128	@ 0x80
 800756c:	d1f7      	bne.n	800755e <_reclaim_reent+0x16>
 800756e:	69e3      	ldr	r3, [r4, #28]
 8007570:	4620      	mov	r0, r4
 8007572:	68d9      	ldr	r1, [r3, #12]
 8007574:	f000 f8b0 	bl	80076d8 <_free_r>
 8007578:	69e3      	ldr	r3, [r4, #28]
 800757a:	6819      	ldr	r1, [r3, #0]
 800757c:	b111      	cbz	r1, 8007584 <_reclaim_reent+0x3c>
 800757e:	4620      	mov	r0, r4
 8007580:	f000 f8aa 	bl	80076d8 <_free_r>
 8007584:	6961      	ldr	r1, [r4, #20]
 8007586:	b111      	cbz	r1, 800758e <_reclaim_reent+0x46>
 8007588:	4620      	mov	r0, r4
 800758a:	f000 f8a5 	bl	80076d8 <_free_r>
 800758e:	69e1      	ldr	r1, [r4, #28]
 8007590:	b111      	cbz	r1, 8007598 <_reclaim_reent+0x50>
 8007592:	4620      	mov	r0, r4
 8007594:	f000 f8a0 	bl	80076d8 <_free_r>
 8007598:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800759a:	b111      	cbz	r1, 80075a2 <_reclaim_reent+0x5a>
 800759c:	4620      	mov	r0, r4
 800759e:	f000 f89b 	bl	80076d8 <_free_r>
 80075a2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80075a4:	b111      	cbz	r1, 80075ac <_reclaim_reent+0x64>
 80075a6:	4620      	mov	r0, r4
 80075a8:	f000 f896 	bl	80076d8 <_free_r>
 80075ac:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80075ae:	b111      	cbz	r1, 80075b6 <_reclaim_reent+0x6e>
 80075b0:	4620      	mov	r0, r4
 80075b2:	f000 f891 	bl	80076d8 <_free_r>
 80075b6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80075b8:	b111      	cbz	r1, 80075c0 <_reclaim_reent+0x78>
 80075ba:	4620      	mov	r0, r4
 80075bc:	f000 f88c 	bl	80076d8 <_free_r>
 80075c0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80075c2:	b111      	cbz	r1, 80075ca <_reclaim_reent+0x82>
 80075c4:	4620      	mov	r0, r4
 80075c6:	f000 f887 	bl	80076d8 <_free_r>
 80075ca:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80075cc:	b111      	cbz	r1, 80075d4 <_reclaim_reent+0x8c>
 80075ce:	4620      	mov	r0, r4
 80075d0:	f000 f882 	bl	80076d8 <_free_r>
 80075d4:	6a23      	ldr	r3, [r4, #32]
 80075d6:	b14b      	cbz	r3, 80075ec <_reclaim_reent+0xa4>
 80075d8:	4620      	mov	r0, r4
 80075da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80075de:	4718      	bx	r3
 80075e0:	680e      	ldr	r6, [r1, #0]
 80075e2:	4620      	mov	r0, r4
 80075e4:	f000 f878 	bl	80076d8 <_free_r>
 80075e8:	4631      	mov	r1, r6
 80075ea:	e7bb      	b.n	8007564 <_reclaim_reent+0x1c>
 80075ec:	bd70      	pop	{r4, r5, r6, pc}
 80075ee:	bf00      	nop
 80075f0:	2000001c 	.word	0x2000001c

080075f4 <_lseek_r>:
 80075f4:	b538      	push	{r3, r4, r5, lr}
 80075f6:	4d07      	ldr	r5, [pc, #28]	@ (8007614 <_lseek_r+0x20>)
 80075f8:	4604      	mov	r4, r0
 80075fa:	4608      	mov	r0, r1
 80075fc:	4611      	mov	r1, r2
 80075fe:	2200      	movs	r2, #0
 8007600:	602a      	str	r2, [r5, #0]
 8007602:	461a      	mov	r2, r3
 8007604:	f7f9 fe6e 	bl	80012e4 <_lseek>
 8007608:	1c43      	adds	r3, r0, #1
 800760a:	d102      	bne.n	8007612 <_lseek_r+0x1e>
 800760c:	682b      	ldr	r3, [r5, #0]
 800760e:	b103      	cbz	r3, 8007612 <_lseek_r+0x1e>
 8007610:	6023      	str	r3, [r4, #0]
 8007612:	bd38      	pop	{r3, r4, r5, pc}
 8007614:	20004d14 	.word	0x20004d14

08007618 <_read_r>:
 8007618:	b538      	push	{r3, r4, r5, lr}
 800761a:	4d07      	ldr	r5, [pc, #28]	@ (8007638 <_read_r+0x20>)
 800761c:	4604      	mov	r4, r0
 800761e:	4608      	mov	r0, r1
 8007620:	4611      	mov	r1, r2
 8007622:	2200      	movs	r2, #0
 8007624:	602a      	str	r2, [r5, #0]
 8007626:	461a      	mov	r2, r3
 8007628:	f7f9 fdfc 	bl	8001224 <_read>
 800762c:	1c43      	adds	r3, r0, #1
 800762e:	d102      	bne.n	8007636 <_read_r+0x1e>
 8007630:	682b      	ldr	r3, [r5, #0]
 8007632:	b103      	cbz	r3, 8007636 <_read_r+0x1e>
 8007634:	6023      	str	r3, [r4, #0]
 8007636:	bd38      	pop	{r3, r4, r5, pc}
 8007638:	20004d14 	.word	0x20004d14

0800763c <_write_r>:
 800763c:	b538      	push	{r3, r4, r5, lr}
 800763e:	4d07      	ldr	r5, [pc, #28]	@ (800765c <_write_r+0x20>)
 8007640:	4604      	mov	r4, r0
 8007642:	4608      	mov	r0, r1
 8007644:	4611      	mov	r1, r2
 8007646:	2200      	movs	r2, #0
 8007648:	602a      	str	r2, [r5, #0]
 800764a:	461a      	mov	r2, r3
 800764c:	f7f9 fe07 	bl	800125e <_write>
 8007650:	1c43      	adds	r3, r0, #1
 8007652:	d102      	bne.n	800765a <_write_r+0x1e>
 8007654:	682b      	ldr	r3, [r5, #0]
 8007656:	b103      	cbz	r3, 800765a <_write_r+0x1e>
 8007658:	6023      	str	r3, [r4, #0]
 800765a:	bd38      	pop	{r3, r4, r5, pc}
 800765c:	20004d14 	.word	0x20004d14

08007660 <__errno>:
 8007660:	4b01      	ldr	r3, [pc, #4]	@ (8007668 <__errno+0x8>)
 8007662:	6818      	ldr	r0, [r3, #0]
 8007664:	4770      	bx	lr
 8007666:	bf00      	nop
 8007668:	2000001c 	.word	0x2000001c

0800766c <__libc_init_array>:
 800766c:	b570      	push	{r4, r5, r6, lr}
 800766e:	4d0d      	ldr	r5, [pc, #52]	@ (80076a4 <__libc_init_array+0x38>)
 8007670:	4c0d      	ldr	r4, [pc, #52]	@ (80076a8 <__libc_init_array+0x3c>)
 8007672:	1b64      	subs	r4, r4, r5
 8007674:	10a4      	asrs	r4, r4, #2
 8007676:	2600      	movs	r6, #0
 8007678:	42a6      	cmp	r6, r4
 800767a:	d109      	bne.n	8007690 <__libc_init_array+0x24>
 800767c:	4d0b      	ldr	r5, [pc, #44]	@ (80076ac <__libc_init_array+0x40>)
 800767e:	4c0c      	ldr	r4, [pc, #48]	@ (80076b0 <__libc_init_array+0x44>)
 8007680:	f000 fa62 	bl	8007b48 <_init>
 8007684:	1b64      	subs	r4, r4, r5
 8007686:	10a4      	asrs	r4, r4, #2
 8007688:	2600      	movs	r6, #0
 800768a:	42a6      	cmp	r6, r4
 800768c:	d105      	bne.n	800769a <__libc_init_array+0x2e>
 800768e:	bd70      	pop	{r4, r5, r6, pc}
 8007690:	f855 3b04 	ldr.w	r3, [r5], #4
 8007694:	4798      	blx	r3
 8007696:	3601      	adds	r6, #1
 8007698:	e7ee      	b.n	8007678 <__libc_init_array+0xc>
 800769a:	f855 3b04 	ldr.w	r3, [r5], #4
 800769e:	4798      	blx	r3
 80076a0:	3601      	adds	r6, #1
 80076a2:	e7f2      	b.n	800768a <__libc_init_array+0x1e>
 80076a4:	08007c48 	.word	0x08007c48
 80076a8:	08007c48 	.word	0x08007c48
 80076ac:	08007c48 	.word	0x08007c48
 80076b0:	08007c4c 	.word	0x08007c4c

080076b4 <__retarget_lock_init_recursive>:
 80076b4:	4770      	bx	lr

080076b6 <__retarget_lock_acquire_recursive>:
 80076b6:	4770      	bx	lr

080076b8 <__retarget_lock_release_recursive>:
 80076b8:	4770      	bx	lr

080076ba <memcpy>:
 80076ba:	440a      	add	r2, r1
 80076bc:	4291      	cmp	r1, r2
 80076be:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80076c2:	d100      	bne.n	80076c6 <memcpy+0xc>
 80076c4:	4770      	bx	lr
 80076c6:	b510      	push	{r4, lr}
 80076c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076d0:	4291      	cmp	r1, r2
 80076d2:	d1f9      	bne.n	80076c8 <memcpy+0xe>
 80076d4:	bd10      	pop	{r4, pc}
	...

080076d8 <_free_r>:
 80076d8:	b538      	push	{r3, r4, r5, lr}
 80076da:	4605      	mov	r5, r0
 80076dc:	2900      	cmp	r1, #0
 80076de:	d041      	beq.n	8007764 <_free_r+0x8c>
 80076e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076e4:	1f0c      	subs	r4, r1, #4
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	bfb8      	it	lt
 80076ea:	18e4      	addlt	r4, r4, r3
 80076ec:	f000 f8e0 	bl	80078b0 <__malloc_lock>
 80076f0:	4a1d      	ldr	r2, [pc, #116]	@ (8007768 <_free_r+0x90>)
 80076f2:	6813      	ldr	r3, [r2, #0]
 80076f4:	b933      	cbnz	r3, 8007704 <_free_r+0x2c>
 80076f6:	6063      	str	r3, [r4, #4]
 80076f8:	6014      	str	r4, [r2, #0]
 80076fa:	4628      	mov	r0, r5
 80076fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007700:	f000 b8dc 	b.w	80078bc <__malloc_unlock>
 8007704:	42a3      	cmp	r3, r4
 8007706:	d908      	bls.n	800771a <_free_r+0x42>
 8007708:	6820      	ldr	r0, [r4, #0]
 800770a:	1821      	adds	r1, r4, r0
 800770c:	428b      	cmp	r3, r1
 800770e:	bf01      	itttt	eq
 8007710:	6819      	ldreq	r1, [r3, #0]
 8007712:	685b      	ldreq	r3, [r3, #4]
 8007714:	1809      	addeq	r1, r1, r0
 8007716:	6021      	streq	r1, [r4, #0]
 8007718:	e7ed      	b.n	80076f6 <_free_r+0x1e>
 800771a:	461a      	mov	r2, r3
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	b10b      	cbz	r3, 8007724 <_free_r+0x4c>
 8007720:	42a3      	cmp	r3, r4
 8007722:	d9fa      	bls.n	800771a <_free_r+0x42>
 8007724:	6811      	ldr	r1, [r2, #0]
 8007726:	1850      	adds	r0, r2, r1
 8007728:	42a0      	cmp	r0, r4
 800772a:	d10b      	bne.n	8007744 <_free_r+0x6c>
 800772c:	6820      	ldr	r0, [r4, #0]
 800772e:	4401      	add	r1, r0
 8007730:	1850      	adds	r0, r2, r1
 8007732:	4283      	cmp	r3, r0
 8007734:	6011      	str	r1, [r2, #0]
 8007736:	d1e0      	bne.n	80076fa <_free_r+0x22>
 8007738:	6818      	ldr	r0, [r3, #0]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	6053      	str	r3, [r2, #4]
 800773e:	4408      	add	r0, r1
 8007740:	6010      	str	r0, [r2, #0]
 8007742:	e7da      	b.n	80076fa <_free_r+0x22>
 8007744:	d902      	bls.n	800774c <_free_r+0x74>
 8007746:	230c      	movs	r3, #12
 8007748:	602b      	str	r3, [r5, #0]
 800774a:	e7d6      	b.n	80076fa <_free_r+0x22>
 800774c:	6820      	ldr	r0, [r4, #0]
 800774e:	1821      	adds	r1, r4, r0
 8007750:	428b      	cmp	r3, r1
 8007752:	bf04      	itt	eq
 8007754:	6819      	ldreq	r1, [r3, #0]
 8007756:	685b      	ldreq	r3, [r3, #4]
 8007758:	6063      	str	r3, [r4, #4]
 800775a:	bf04      	itt	eq
 800775c:	1809      	addeq	r1, r1, r0
 800775e:	6021      	streq	r1, [r4, #0]
 8007760:	6054      	str	r4, [r2, #4]
 8007762:	e7ca      	b.n	80076fa <_free_r+0x22>
 8007764:	bd38      	pop	{r3, r4, r5, pc}
 8007766:	bf00      	nop
 8007768:	20004d20 	.word	0x20004d20

0800776c <sbrk_aligned>:
 800776c:	b570      	push	{r4, r5, r6, lr}
 800776e:	4e0f      	ldr	r6, [pc, #60]	@ (80077ac <sbrk_aligned+0x40>)
 8007770:	460c      	mov	r4, r1
 8007772:	6831      	ldr	r1, [r6, #0]
 8007774:	4605      	mov	r5, r0
 8007776:	b911      	cbnz	r1, 800777e <sbrk_aligned+0x12>
 8007778:	f000 f9d6 	bl	8007b28 <_sbrk_r>
 800777c:	6030      	str	r0, [r6, #0]
 800777e:	4621      	mov	r1, r4
 8007780:	4628      	mov	r0, r5
 8007782:	f000 f9d1 	bl	8007b28 <_sbrk_r>
 8007786:	1c43      	adds	r3, r0, #1
 8007788:	d103      	bne.n	8007792 <sbrk_aligned+0x26>
 800778a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800778e:	4620      	mov	r0, r4
 8007790:	bd70      	pop	{r4, r5, r6, pc}
 8007792:	1cc4      	adds	r4, r0, #3
 8007794:	f024 0403 	bic.w	r4, r4, #3
 8007798:	42a0      	cmp	r0, r4
 800779a:	d0f8      	beq.n	800778e <sbrk_aligned+0x22>
 800779c:	1a21      	subs	r1, r4, r0
 800779e:	4628      	mov	r0, r5
 80077a0:	f000 f9c2 	bl	8007b28 <_sbrk_r>
 80077a4:	3001      	adds	r0, #1
 80077a6:	d1f2      	bne.n	800778e <sbrk_aligned+0x22>
 80077a8:	e7ef      	b.n	800778a <sbrk_aligned+0x1e>
 80077aa:	bf00      	nop
 80077ac:	20004d1c 	.word	0x20004d1c

080077b0 <_malloc_r>:
 80077b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077b4:	1ccd      	adds	r5, r1, #3
 80077b6:	f025 0503 	bic.w	r5, r5, #3
 80077ba:	3508      	adds	r5, #8
 80077bc:	2d0c      	cmp	r5, #12
 80077be:	bf38      	it	cc
 80077c0:	250c      	movcc	r5, #12
 80077c2:	2d00      	cmp	r5, #0
 80077c4:	4606      	mov	r6, r0
 80077c6:	db01      	blt.n	80077cc <_malloc_r+0x1c>
 80077c8:	42a9      	cmp	r1, r5
 80077ca:	d904      	bls.n	80077d6 <_malloc_r+0x26>
 80077cc:	230c      	movs	r3, #12
 80077ce:	6033      	str	r3, [r6, #0]
 80077d0:	2000      	movs	r0, #0
 80077d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80078ac <_malloc_r+0xfc>
 80077da:	f000 f869 	bl	80078b0 <__malloc_lock>
 80077de:	f8d8 3000 	ldr.w	r3, [r8]
 80077e2:	461c      	mov	r4, r3
 80077e4:	bb44      	cbnz	r4, 8007838 <_malloc_r+0x88>
 80077e6:	4629      	mov	r1, r5
 80077e8:	4630      	mov	r0, r6
 80077ea:	f7ff ffbf 	bl	800776c <sbrk_aligned>
 80077ee:	1c43      	adds	r3, r0, #1
 80077f0:	4604      	mov	r4, r0
 80077f2:	d158      	bne.n	80078a6 <_malloc_r+0xf6>
 80077f4:	f8d8 4000 	ldr.w	r4, [r8]
 80077f8:	4627      	mov	r7, r4
 80077fa:	2f00      	cmp	r7, #0
 80077fc:	d143      	bne.n	8007886 <_malloc_r+0xd6>
 80077fe:	2c00      	cmp	r4, #0
 8007800:	d04b      	beq.n	800789a <_malloc_r+0xea>
 8007802:	6823      	ldr	r3, [r4, #0]
 8007804:	4639      	mov	r1, r7
 8007806:	4630      	mov	r0, r6
 8007808:	eb04 0903 	add.w	r9, r4, r3
 800780c:	f000 f98c 	bl	8007b28 <_sbrk_r>
 8007810:	4581      	cmp	r9, r0
 8007812:	d142      	bne.n	800789a <_malloc_r+0xea>
 8007814:	6821      	ldr	r1, [r4, #0]
 8007816:	1a6d      	subs	r5, r5, r1
 8007818:	4629      	mov	r1, r5
 800781a:	4630      	mov	r0, r6
 800781c:	f7ff ffa6 	bl	800776c <sbrk_aligned>
 8007820:	3001      	adds	r0, #1
 8007822:	d03a      	beq.n	800789a <_malloc_r+0xea>
 8007824:	6823      	ldr	r3, [r4, #0]
 8007826:	442b      	add	r3, r5
 8007828:	6023      	str	r3, [r4, #0]
 800782a:	f8d8 3000 	ldr.w	r3, [r8]
 800782e:	685a      	ldr	r2, [r3, #4]
 8007830:	bb62      	cbnz	r2, 800788c <_malloc_r+0xdc>
 8007832:	f8c8 7000 	str.w	r7, [r8]
 8007836:	e00f      	b.n	8007858 <_malloc_r+0xa8>
 8007838:	6822      	ldr	r2, [r4, #0]
 800783a:	1b52      	subs	r2, r2, r5
 800783c:	d420      	bmi.n	8007880 <_malloc_r+0xd0>
 800783e:	2a0b      	cmp	r2, #11
 8007840:	d917      	bls.n	8007872 <_malloc_r+0xc2>
 8007842:	1961      	adds	r1, r4, r5
 8007844:	42a3      	cmp	r3, r4
 8007846:	6025      	str	r5, [r4, #0]
 8007848:	bf18      	it	ne
 800784a:	6059      	strne	r1, [r3, #4]
 800784c:	6863      	ldr	r3, [r4, #4]
 800784e:	bf08      	it	eq
 8007850:	f8c8 1000 	streq.w	r1, [r8]
 8007854:	5162      	str	r2, [r4, r5]
 8007856:	604b      	str	r3, [r1, #4]
 8007858:	4630      	mov	r0, r6
 800785a:	f000 f82f 	bl	80078bc <__malloc_unlock>
 800785e:	f104 000b 	add.w	r0, r4, #11
 8007862:	1d23      	adds	r3, r4, #4
 8007864:	f020 0007 	bic.w	r0, r0, #7
 8007868:	1ac2      	subs	r2, r0, r3
 800786a:	bf1c      	itt	ne
 800786c:	1a1b      	subne	r3, r3, r0
 800786e:	50a3      	strne	r3, [r4, r2]
 8007870:	e7af      	b.n	80077d2 <_malloc_r+0x22>
 8007872:	6862      	ldr	r2, [r4, #4]
 8007874:	42a3      	cmp	r3, r4
 8007876:	bf0c      	ite	eq
 8007878:	f8c8 2000 	streq.w	r2, [r8]
 800787c:	605a      	strne	r2, [r3, #4]
 800787e:	e7eb      	b.n	8007858 <_malloc_r+0xa8>
 8007880:	4623      	mov	r3, r4
 8007882:	6864      	ldr	r4, [r4, #4]
 8007884:	e7ae      	b.n	80077e4 <_malloc_r+0x34>
 8007886:	463c      	mov	r4, r7
 8007888:	687f      	ldr	r7, [r7, #4]
 800788a:	e7b6      	b.n	80077fa <_malloc_r+0x4a>
 800788c:	461a      	mov	r2, r3
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	42a3      	cmp	r3, r4
 8007892:	d1fb      	bne.n	800788c <_malloc_r+0xdc>
 8007894:	2300      	movs	r3, #0
 8007896:	6053      	str	r3, [r2, #4]
 8007898:	e7de      	b.n	8007858 <_malloc_r+0xa8>
 800789a:	230c      	movs	r3, #12
 800789c:	6033      	str	r3, [r6, #0]
 800789e:	4630      	mov	r0, r6
 80078a0:	f000 f80c 	bl	80078bc <__malloc_unlock>
 80078a4:	e794      	b.n	80077d0 <_malloc_r+0x20>
 80078a6:	6005      	str	r5, [r0, #0]
 80078a8:	e7d6      	b.n	8007858 <_malloc_r+0xa8>
 80078aa:	bf00      	nop
 80078ac:	20004d20 	.word	0x20004d20

080078b0 <__malloc_lock>:
 80078b0:	4801      	ldr	r0, [pc, #4]	@ (80078b8 <__malloc_lock+0x8>)
 80078b2:	f7ff bf00 	b.w	80076b6 <__retarget_lock_acquire_recursive>
 80078b6:	bf00      	nop
 80078b8:	20004d18 	.word	0x20004d18

080078bc <__malloc_unlock>:
 80078bc:	4801      	ldr	r0, [pc, #4]	@ (80078c4 <__malloc_unlock+0x8>)
 80078be:	f7ff befb 	b.w	80076b8 <__retarget_lock_release_recursive>
 80078c2:	bf00      	nop
 80078c4:	20004d18 	.word	0x20004d18

080078c8 <__sflush_r>:
 80078c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80078cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078d0:	0716      	lsls	r6, r2, #28
 80078d2:	4605      	mov	r5, r0
 80078d4:	460c      	mov	r4, r1
 80078d6:	d454      	bmi.n	8007982 <__sflush_r+0xba>
 80078d8:	684b      	ldr	r3, [r1, #4]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	dc02      	bgt.n	80078e4 <__sflush_r+0x1c>
 80078de:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	dd48      	ble.n	8007976 <__sflush_r+0xae>
 80078e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80078e6:	2e00      	cmp	r6, #0
 80078e8:	d045      	beq.n	8007976 <__sflush_r+0xae>
 80078ea:	2300      	movs	r3, #0
 80078ec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80078f0:	682f      	ldr	r7, [r5, #0]
 80078f2:	6a21      	ldr	r1, [r4, #32]
 80078f4:	602b      	str	r3, [r5, #0]
 80078f6:	d030      	beq.n	800795a <__sflush_r+0x92>
 80078f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80078fa:	89a3      	ldrh	r3, [r4, #12]
 80078fc:	0759      	lsls	r1, r3, #29
 80078fe:	d505      	bpl.n	800790c <__sflush_r+0x44>
 8007900:	6863      	ldr	r3, [r4, #4]
 8007902:	1ad2      	subs	r2, r2, r3
 8007904:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007906:	b10b      	cbz	r3, 800790c <__sflush_r+0x44>
 8007908:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800790a:	1ad2      	subs	r2, r2, r3
 800790c:	2300      	movs	r3, #0
 800790e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007910:	6a21      	ldr	r1, [r4, #32]
 8007912:	4628      	mov	r0, r5
 8007914:	47b0      	blx	r6
 8007916:	1c43      	adds	r3, r0, #1
 8007918:	89a3      	ldrh	r3, [r4, #12]
 800791a:	d106      	bne.n	800792a <__sflush_r+0x62>
 800791c:	6829      	ldr	r1, [r5, #0]
 800791e:	291d      	cmp	r1, #29
 8007920:	d82b      	bhi.n	800797a <__sflush_r+0xb2>
 8007922:	4a2a      	ldr	r2, [pc, #168]	@ (80079cc <__sflush_r+0x104>)
 8007924:	410a      	asrs	r2, r1
 8007926:	07d6      	lsls	r6, r2, #31
 8007928:	d427      	bmi.n	800797a <__sflush_r+0xb2>
 800792a:	2200      	movs	r2, #0
 800792c:	6062      	str	r2, [r4, #4]
 800792e:	04d9      	lsls	r1, r3, #19
 8007930:	6922      	ldr	r2, [r4, #16]
 8007932:	6022      	str	r2, [r4, #0]
 8007934:	d504      	bpl.n	8007940 <__sflush_r+0x78>
 8007936:	1c42      	adds	r2, r0, #1
 8007938:	d101      	bne.n	800793e <__sflush_r+0x76>
 800793a:	682b      	ldr	r3, [r5, #0]
 800793c:	b903      	cbnz	r3, 8007940 <__sflush_r+0x78>
 800793e:	6560      	str	r0, [r4, #84]	@ 0x54
 8007940:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007942:	602f      	str	r7, [r5, #0]
 8007944:	b1b9      	cbz	r1, 8007976 <__sflush_r+0xae>
 8007946:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800794a:	4299      	cmp	r1, r3
 800794c:	d002      	beq.n	8007954 <__sflush_r+0x8c>
 800794e:	4628      	mov	r0, r5
 8007950:	f7ff fec2 	bl	80076d8 <_free_r>
 8007954:	2300      	movs	r3, #0
 8007956:	6363      	str	r3, [r4, #52]	@ 0x34
 8007958:	e00d      	b.n	8007976 <__sflush_r+0xae>
 800795a:	2301      	movs	r3, #1
 800795c:	4628      	mov	r0, r5
 800795e:	47b0      	blx	r6
 8007960:	4602      	mov	r2, r0
 8007962:	1c50      	adds	r0, r2, #1
 8007964:	d1c9      	bne.n	80078fa <__sflush_r+0x32>
 8007966:	682b      	ldr	r3, [r5, #0]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d0c6      	beq.n	80078fa <__sflush_r+0x32>
 800796c:	2b1d      	cmp	r3, #29
 800796e:	d001      	beq.n	8007974 <__sflush_r+0xac>
 8007970:	2b16      	cmp	r3, #22
 8007972:	d11e      	bne.n	80079b2 <__sflush_r+0xea>
 8007974:	602f      	str	r7, [r5, #0]
 8007976:	2000      	movs	r0, #0
 8007978:	e022      	b.n	80079c0 <__sflush_r+0xf8>
 800797a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800797e:	b21b      	sxth	r3, r3
 8007980:	e01b      	b.n	80079ba <__sflush_r+0xf2>
 8007982:	690f      	ldr	r7, [r1, #16]
 8007984:	2f00      	cmp	r7, #0
 8007986:	d0f6      	beq.n	8007976 <__sflush_r+0xae>
 8007988:	0793      	lsls	r3, r2, #30
 800798a:	680e      	ldr	r6, [r1, #0]
 800798c:	bf08      	it	eq
 800798e:	694b      	ldreq	r3, [r1, #20]
 8007990:	600f      	str	r7, [r1, #0]
 8007992:	bf18      	it	ne
 8007994:	2300      	movne	r3, #0
 8007996:	eba6 0807 	sub.w	r8, r6, r7
 800799a:	608b      	str	r3, [r1, #8]
 800799c:	f1b8 0f00 	cmp.w	r8, #0
 80079a0:	dde9      	ble.n	8007976 <__sflush_r+0xae>
 80079a2:	6a21      	ldr	r1, [r4, #32]
 80079a4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80079a6:	4643      	mov	r3, r8
 80079a8:	463a      	mov	r2, r7
 80079aa:	4628      	mov	r0, r5
 80079ac:	47b0      	blx	r6
 80079ae:	2800      	cmp	r0, #0
 80079b0:	dc08      	bgt.n	80079c4 <__sflush_r+0xfc>
 80079b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079ba:	81a3      	strh	r3, [r4, #12]
 80079bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80079c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079c4:	4407      	add	r7, r0
 80079c6:	eba8 0800 	sub.w	r8, r8, r0
 80079ca:	e7e7      	b.n	800799c <__sflush_r+0xd4>
 80079cc:	dfbffffe 	.word	0xdfbffffe

080079d0 <_fflush_r>:
 80079d0:	b538      	push	{r3, r4, r5, lr}
 80079d2:	690b      	ldr	r3, [r1, #16]
 80079d4:	4605      	mov	r5, r0
 80079d6:	460c      	mov	r4, r1
 80079d8:	b913      	cbnz	r3, 80079e0 <_fflush_r+0x10>
 80079da:	2500      	movs	r5, #0
 80079dc:	4628      	mov	r0, r5
 80079de:	bd38      	pop	{r3, r4, r5, pc}
 80079e0:	b118      	cbz	r0, 80079ea <_fflush_r+0x1a>
 80079e2:	6a03      	ldr	r3, [r0, #32]
 80079e4:	b90b      	cbnz	r3, 80079ea <_fflush_r+0x1a>
 80079e6:	f7ff fc2b 	bl	8007240 <__sinit>
 80079ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d0f3      	beq.n	80079da <_fflush_r+0xa>
 80079f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80079f4:	07d0      	lsls	r0, r2, #31
 80079f6:	d404      	bmi.n	8007a02 <_fflush_r+0x32>
 80079f8:	0599      	lsls	r1, r3, #22
 80079fa:	d402      	bmi.n	8007a02 <_fflush_r+0x32>
 80079fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80079fe:	f7ff fe5a 	bl	80076b6 <__retarget_lock_acquire_recursive>
 8007a02:	4628      	mov	r0, r5
 8007a04:	4621      	mov	r1, r4
 8007a06:	f7ff ff5f 	bl	80078c8 <__sflush_r>
 8007a0a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007a0c:	07da      	lsls	r2, r3, #31
 8007a0e:	4605      	mov	r5, r0
 8007a10:	d4e4      	bmi.n	80079dc <_fflush_r+0xc>
 8007a12:	89a3      	ldrh	r3, [r4, #12]
 8007a14:	059b      	lsls	r3, r3, #22
 8007a16:	d4e1      	bmi.n	80079dc <_fflush_r+0xc>
 8007a18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a1a:	f7ff fe4d 	bl	80076b8 <__retarget_lock_release_recursive>
 8007a1e:	e7dd      	b.n	80079dc <_fflush_r+0xc>

08007a20 <__swhatbuf_r>:
 8007a20:	b570      	push	{r4, r5, r6, lr}
 8007a22:	460c      	mov	r4, r1
 8007a24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a28:	2900      	cmp	r1, #0
 8007a2a:	b096      	sub	sp, #88	@ 0x58
 8007a2c:	4615      	mov	r5, r2
 8007a2e:	461e      	mov	r6, r3
 8007a30:	da0d      	bge.n	8007a4e <__swhatbuf_r+0x2e>
 8007a32:	89a3      	ldrh	r3, [r4, #12]
 8007a34:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007a38:	f04f 0100 	mov.w	r1, #0
 8007a3c:	bf14      	ite	ne
 8007a3e:	2340      	movne	r3, #64	@ 0x40
 8007a40:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007a44:	2000      	movs	r0, #0
 8007a46:	6031      	str	r1, [r6, #0]
 8007a48:	602b      	str	r3, [r5, #0]
 8007a4a:	b016      	add	sp, #88	@ 0x58
 8007a4c:	bd70      	pop	{r4, r5, r6, pc}
 8007a4e:	466a      	mov	r2, sp
 8007a50:	f000 f848 	bl	8007ae4 <_fstat_r>
 8007a54:	2800      	cmp	r0, #0
 8007a56:	dbec      	blt.n	8007a32 <__swhatbuf_r+0x12>
 8007a58:	9901      	ldr	r1, [sp, #4]
 8007a5a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007a5e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007a62:	4259      	negs	r1, r3
 8007a64:	4159      	adcs	r1, r3
 8007a66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007a6a:	e7eb      	b.n	8007a44 <__swhatbuf_r+0x24>

08007a6c <__smakebuf_r>:
 8007a6c:	898b      	ldrh	r3, [r1, #12]
 8007a6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a70:	079d      	lsls	r5, r3, #30
 8007a72:	4606      	mov	r6, r0
 8007a74:	460c      	mov	r4, r1
 8007a76:	d507      	bpl.n	8007a88 <__smakebuf_r+0x1c>
 8007a78:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007a7c:	6023      	str	r3, [r4, #0]
 8007a7e:	6123      	str	r3, [r4, #16]
 8007a80:	2301      	movs	r3, #1
 8007a82:	6163      	str	r3, [r4, #20]
 8007a84:	b003      	add	sp, #12
 8007a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a88:	ab01      	add	r3, sp, #4
 8007a8a:	466a      	mov	r2, sp
 8007a8c:	f7ff ffc8 	bl	8007a20 <__swhatbuf_r>
 8007a90:	9f00      	ldr	r7, [sp, #0]
 8007a92:	4605      	mov	r5, r0
 8007a94:	4639      	mov	r1, r7
 8007a96:	4630      	mov	r0, r6
 8007a98:	f7ff fe8a 	bl	80077b0 <_malloc_r>
 8007a9c:	b948      	cbnz	r0, 8007ab2 <__smakebuf_r+0x46>
 8007a9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007aa2:	059a      	lsls	r2, r3, #22
 8007aa4:	d4ee      	bmi.n	8007a84 <__smakebuf_r+0x18>
 8007aa6:	f023 0303 	bic.w	r3, r3, #3
 8007aaa:	f043 0302 	orr.w	r3, r3, #2
 8007aae:	81a3      	strh	r3, [r4, #12]
 8007ab0:	e7e2      	b.n	8007a78 <__smakebuf_r+0xc>
 8007ab2:	89a3      	ldrh	r3, [r4, #12]
 8007ab4:	6020      	str	r0, [r4, #0]
 8007ab6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007aba:	81a3      	strh	r3, [r4, #12]
 8007abc:	9b01      	ldr	r3, [sp, #4]
 8007abe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007ac2:	b15b      	cbz	r3, 8007adc <__smakebuf_r+0x70>
 8007ac4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ac8:	4630      	mov	r0, r6
 8007aca:	f000 f81d 	bl	8007b08 <_isatty_r>
 8007ace:	b128      	cbz	r0, 8007adc <__smakebuf_r+0x70>
 8007ad0:	89a3      	ldrh	r3, [r4, #12]
 8007ad2:	f023 0303 	bic.w	r3, r3, #3
 8007ad6:	f043 0301 	orr.w	r3, r3, #1
 8007ada:	81a3      	strh	r3, [r4, #12]
 8007adc:	89a3      	ldrh	r3, [r4, #12]
 8007ade:	431d      	orrs	r5, r3
 8007ae0:	81a5      	strh	r5, [r4, #12]
 8007ae2:	e7cf      	b.n	8007a84 <__smakebuf_r+0x18>

08007ae4 <_fstat_r>:
 8007ae4:	b538      	push	{r3, r4, r5, lr}
 8007ae6:	4d07      	ldr	r5, [pc, #28]	@ (8007b04 <_fstat_r+0x20>)
 8007ae8:	2300      	movs	r3, #0
 8007aea:	4604      	mov	r4, r0
 8007aec:	4608      	mov	r0, r1
 8007aee:	4611      	mov	r1, r2
 8007af0:	602b      	str	r3, [r5, #0]
 8007af2:	f7f9 fbdc 	bl	80012ae <_fstat>
 8007af6:	1c43      	adds	r3, r0, #1
 8007af8:	d102      	bne.n	8007b00 <_fstat_r+0x1c>
 8007afa:	682b      	ldr	r3, [r5, #0]
 8007afc:	b103      	cbz	r3, 8007b00 <_fstat_r+0x1c>
 8007afe:	6023      	str	r3, [r4, #0]
 8007b00:	bd38      	pop	{r3, r4, r5, pc}
 8007b02:	bf00      	nop
 8007b04:	20004d14 	.word	0x20004d14

08007b08 <_isatty_r>:
 8007b08:	b538      	push	{r3, r4, r5, lr}
 8007b0a:	4d06      	ldr	r5, [pc, #24]	@ (8007b24 <_isatty_r+0x1c>)
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	4604      	mov	r4, r0
 8007b10:	4608      	mov	r0, r1
 8007b12:	602b      	str	r3, [r5, #0]
 8007b14:	f7f9 fbdb 	bl	80012ce <_isatty>
 8007b18:	1c43      	adds	r3, r0, #1
 8007b1a:	d102      	bne.n	8007b22 <_isatty_r+0x1a>
 8007b1c:	682b      	ldr	r3, [r5, #0]
 8007b1e:	b103      	cbz	r3, 8007b22 <_isatty_r+0x1a>
 8007b20:	6023      	str	r3, [r4, #0]
 8007b22:	bd38      	pop	{r3, r4, r5, pc}
 8007b24:	20004d14 	.word	0x20004d14

08007b28 <_sbrk_r>:
 8007b28:	b538      	push	{r3, r4, r5, lr}
 8007b2a:	4d06      	ldr	r5, [pc, #24]	@ (8007b44 <_sbrk_r+0x1c>)
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	4604      	mov	r4, r0
 8007b30:	4608      	mov	r0, r1
 8007b32:	602b      	str	r3, [r5, #0]
 8007b34:	f7f9 fbe4 	bl	8001300 <_sbrk>
 8007b38:	1c43      	adds	r3, r0, #1
 8007b3a:	d102      	bne.n	8007b42 <_sbrk_r+0x1a>
 8007b3c:	682b      	ldr	r3, [r5, #0]
 8007b3e:	b103      	cbz	r3, 8007b42 <_sbrk_r+0x1a>
 8007b40:	6023      	str	r3, [r4, #0]
 8007b42:	bd38      	pop	{r3, r4, r5, pc}
 8007b44:	20004d14 	.word	0x20004d14

08007b48 <_init>:
 8007b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b4a:	bf00      	nop
 8007b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b4e:	bc08      	pop	{r3}
 8007b50:	469e      	mov	lr, r3
 8007b52:	4770      	bx	lr

08007b54 <_fini>:
 8007b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b56:	bf00      	nop
 8007b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b5a:	bc08      	pop	{r3}
 8007b5c:	469e      	mov	lr, r3
 8007b5e:	4770      	bx	lr
