
bldc-motor-control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005660  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08005800  08005800  00015800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800591c  0800591c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800591c  0800591c  0001591c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005924  08005924  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005924  08005924  00015924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005928  08005928  00015928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800592c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d0  20000070  0800599c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000240  0800599c  00020240  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f4a8  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000212d  00000000  00000000  0002f548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc8  00000000  00000000  00031678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d00  00000000  00000000  00032440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018520  00000000  00000000  00033140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f23f  00000000  00000000  0004b660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b27d  00000000  00000000  0005a89f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f5b1c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004208  00000000  00000000  000f5b6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080057e8 	.word	0x080057e8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080057e8 	.word	0x080057e8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b086      	sub	sp, #24
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058a:	f001 f899 	bl	80016c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058e:	f000 f899 	bl	80006c4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000592:	f000 faff 	bl	8000b94 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000596:	f000 f8fd 	bl	8000794 <MX_ADC1_Init>
  MX_USART6_UART_Init();
 800059a:	f000 fad1 	bl	8000b40 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 800059e:	f000 f94b 	bl	8000838 <MX_TIM1_Init>
  MX_TIM3_Init();
 80005a2:	f000 fa75 	bl	8000a90 <MX_TIM3_Init>
  MX_TIM2_Init();
 80005a6:	f000 f9e5 	bl	8000974 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */


//  uint32_t time = HAL_GetTick();
//  uint32_t max_time = 3000;
  uint32_t dir = CW;
 80005aa:	2301      	movs	r3, #1
 80005ac:	617b      	str	r3, [r7, #20]
  uint32_t speed = 50;
 80005ae:	2332      	movs	r3, #50	; 0x32
 80005b0:	613b      	str	r3, [r7, #16]
  uint32_t max_speed = 100;
 80005b2:	2364      	movs	r3, #100	; 0x64
 80005b4:	60fb      	str	r3, [r7, #12]

  uint32_t pot_max = 4095;
 80005b6:	f640 73ff 	movw	r3, #4095	; 0xfff
 80005ba:	60bb      	str	r3, [r7, #8]

  was_button_pressed = false;
 80005bc:	4b36      	ldr	r3, [pc, #216]	; (8000698 <main+0x114>)
 80005be:	2200      	movs	r2, #0
 80005c0:	701a      	strb	r2, [r3, #0]

  bldc_motor_init(&htim1, &htim3);
 80005c2:	4936      	ldr	r1, [pc, #216]	; (800069c <main+0x118>)
 80005c4:	4836      	ldr	r0, [pc, #216]	; (80006a0 <main+0x11c>)
 80005c6:	f000 fba9 	bl	8000d1c <bldc_motor_init>
  bldc_motor_set_speed(speed, dir);
 80005ca:	697b      	ldr	r3, [r7, #20]
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	4619      	mov	r1, r3
 80005d0:	6938      	ldr	r0, [r7, #16]
 80005d2:	f000 fbe3 	bl	8000d9c <bldc_motor_set_speed>

  printf("motor initialized\n");
 80005d6:	4833      	ldr	r0, [pc, #204]	; (80006a4 <main+0x120>)
 80005d8:	f004 f988 	bl	80048ec <puts>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

//	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
	HAL_GPIO_TogglePin(LDN_GPIO_Port, LDN_Pin);
 80005dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005e0:	4831      	ldr	r0, [pc, #196]	; (80006a8 <main+0x124>)
 80005e2:	f001 ff88 	bl	80024f6 <HAL_GPIO_TogglePin>

//	bldc_motor_six_step_algorithm();
//	HAL_Delay(100);


	HAL_ADC_Start(&hadc1);
 80005e6:	4831      	ldr	r0, [pc, #196]	; (80006ac <main+0x128>)
 80005e8:	f001 f944 	bl	8001874 <HAL_ADC_Start>


	if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 80005ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80005f0:	482e      	ldr	r0, [pc, #184]	; (80006ac <main+0x128>)
 80005f2:	f001 f9f3 	bl	80019dc <HAL_ADC_PollForConversion>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d106      	bne.n	800060a <main+0x86>
		pot = HAL_ADC_GetValue(&hadc1);
 80005fc:	482b      	ldr	r0, [pc, #172]	; (80006ac <main+0x128>)
 80005fe:	f001 fa78 	bl	8001af2 <HAL_ADC_GetValue>
 8000602:	4603      	mov	r3, r0
 8000604:	4a2a      	ldr	r2, [pc, #168]	; (80006b0 <main+0x12c>)
 8000606:	6013      	str	r3, [r2, #0]
 8000608:	e002      	b.n	8000610 <main+0x8c>
//		printf("Potentiometer value: %lu\n", pot);
	} else {
		printf("ADC PollForConversion failed\n");
 800060a:	482a      	ldr	r0, [pc, #168]	; (80006b4 <main+0x130>)
 800060c:	f004 f96e 	bl	80048ec <puts>
	}


	HAL_Delay(10);
 8000610:	200a      	movs	r0, #10
 8000612:	f001 f8c7 	bl	80017a4 <HAL_Delay>

	float pot_ratio = (float)pot / (float)pot_max;
 8000616:	4b26      	ldr	r3, [pc, #152]	; (80006b0 <main+0x12c>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	ee07 3a90 	vmov	s15, r3
 800061e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000622:	68bb      	ldr	r3, [r7, #8]
 8000624:	ee07 3a90 	vmov	s15, r3
 8000628:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800062c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000630:	edc7 7a01 	vstr	s15, [r7, #4]
	int new_speed = (int)(pot_ratio * max_speed);
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	ee07 3a90 	vmov	s15, r3
 800063a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800063e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000646:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800064a:	ee17 3a90 	vmov	r3, s15
 800064e:	603b      	str	r3, [r7, #0]

    check_button_press();
 8000650:	f000 fc06 	bl	8000e60 <check_button_press>

    if (was_button_pressed)
 8000654:	4b10      	ldr	r3, [pc, #64]	; (8000698 <main+0x114>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d00d      	beq.n	8000678 <main+0xf4>
    {
    	if (dir == CW){
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	2b01      	cmp	r3, #1
 8000660:	d105      	bne.n	800066e <main+0xea>
    		dir = CCW;
 8000662:	2300      	movs	r3, #0
 8000664:	617b      	str	r3, [r7, #20]
    		printf("dir change to ccw \n");
 8000666:	4814      	ldr	r0, [pc, #80]	; (80006b8 <main+0x134>)
 8000668:	f004 f940 	bl	80048ec <puts>
 800066c:	e004      	b.n	8000678 <main+0xf4>
    	} else {
    		dir = CW;
 800066e:	2301      	movs	r3, #1
 8000670:	617b      	str	r3, [r7, #20]
    		printf("dir change to cw \n");
 8000672:	4812      	ldr	r0, [pc, #72]	; (80006bc <main+0x138>)
 8000674:	f004 f93a 	bl	80048ec <puts>
    	}
    }

    if (bldc_motor_set_speed(new_speed, dir)){
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	697a      	ldr	r2, [r7, #20]
 800067c:	b2d2      	uxtb	r2, r2
 800067e:	4611      	mov	r1, r2
 8000680:	4618      	mov	r0, r3
 8000682:	f000 fb8b 	bl	8000d9c <bldc_motor_set_speed>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d0a7      	beq.n	80005dc <main+0x58>
    	printf("New speed: %i\n", new_speed);
 800068c:	6839      	ldr	r1, [r7, #0]
 800068e:	480c      	ldr	r0, [pc, #48]	; (80006c0 <main+0x13c>)
 8000690:	f004 f8a6 	bl	80047e0 <iprintf>
  {
 8000694:	e7a2      	b.n	80005dc <main+0x58>
 8000696:	bf00      	nop
 8000698:	20000224 	.word	0x20000224
 800069c:	20000164 	.word	0x20000164
 80006a0:	200000d4 	.word	0x200000d4
 80006a4:	08005800 	.word	0x08005800
 80006a8:	40020c00 	.word	0x40020c00
 80006ac:	2000008c 	.word	0x2000008c
 80006b0:	200001f0 	.word	0x200001f0
 80006b4:	08005814 	.word	0x08005814
 80006b8:	08005834 	.word	0x08005834
 80006bc:	08005848 	.word	0x08005848
 80006c0:	0800585c 	.word	0x0800585c

080006c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b094      	sub	sp, #80	; 0x50
 80006c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ca:	f107 0320 	add.w	r3, r7, #32
 80006ce:	2230      	movs	r2, #48	; 0x30
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f004 f87c 	bl	80047d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e8:	2300      	movs	r3, #0
 80006ea:	60bb      	str	r3, [r7, #8]
 80006ec:	4b27      	ldr	r3, [pc, #156]	; (800078c <SystemClock_Config+0xc8>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f0:	4a26      	ldr	r2, [pc, #152]	; (800078c <SystemClock_Config+0xc8>)
 80006f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f6:	6413      	str	r3, [r2, #64]	; 0x40
 80006f8:	4b24      	ldr	r3, [pc, #144]	; (800078c <SystemClock_Config+0xc8>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000704:	2300      	movs	r3, #0
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	4b21      	ldr	r3, [pc, #132]	; (8000790 <SystemClock_Config+0xcc>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a20      	ldr	r2, [pc, #128]	; (8000790 <SystemClock_Config+0xcc>)
 800070e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000712:	6013      	str	r3, [r2, #0]
 8000714:	4b1e      	ldr	r3, [pc, #120]	; (8000790 <SystemClock_Config+0xcc>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000720:	2302      	movs	r3, #2
 8000722:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000724:	2301      	movs	r3, #1
 8000726:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000728:	2310      	movs	r3, #16
 800072a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072c:	2302      	movs	r3, #2
 800072e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000730:	2300      	movs	r3, #0
 8000732:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000734:	2308      	movs	r3, #8
 8000736:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000738:	2354      	movs	r3, #84	; 0x54
 800073a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800073c:	2302      	movs	r3, #2
 800073e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000740:	2304      	movs	r3, #4
 8000742:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000744:	f107 0320 	add.w	r3, r7, #32
 8000748:	4618      	mov	r0, r3
 800074a:	f001 feef 	bl	800252c <HAL_RCC_OscConfig>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000754:	f000 fadc 	bl	8000d10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000758:	230f      	movs	r3, #15
 800075a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075c:	2302      	movs	r3, #2
 800075e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000768:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800076a:	2300      	movs	r3, #0
 800076c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800076e:	f107 030c 	add.w	r3, r7, #12
 8000772:	2102      	movs	r1, #2
 8000774:	4618      	mov	r0, r3
 8000776:	f002 f951 	bl	8002a1c <HAL_RCC_ClockConfig>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000780:	f000 fac6 	bl	8000d10 <Error_Handler>
  }
}
 8000784:	bf00      	nop
 8000786:	3750      	adds	r7, #80	; 0x50
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40023800 	.word	0x40023800
 8000790:	40007000 	.word	0x40007000

08000794 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800079a:	463b      	mov	r3, r7
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007a6:	4b21      	ldr	r3, [pc, #132]	; (800082c <MX_ADC1_Init+0x98>)
 80007a8:	4a21      	ldr	r2, [pc, #132]	; (8000830 <MX_ADC1_Init+0x9c>)
 80007aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007ac:	4b1f      	ldr	r3, [pc, #124]	; (800082c <MX_ADC1_Init+0x98>)
 80007ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007b2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007b4:	4b1d      	ldr	r3, [pc, #116]	; (800082c <MX_ADC1_Init+0x98>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80007ba:	4b1c      	ldr	r3, [pc, #112]	; (800082c <MX_ADC1_Init+0x98>)
 80007bc:	2200      	movs	r2, #0
 80007be:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007c0:	4b1a      	ldr	r3, [pc, #104]	; (800082c <MX_ADC1_Init+0x98>)
 80007c2:	2201      	movs	r2, #1
 80007c4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007c6:	4b19      	ldr	r3, [pc, #100]	; (800082c <MX_ADC1_Init+0x98>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007ce:	4b17      	ldr	r3, [pc, #92]	; (800082c <MX_ADC1_Init+0x98>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007d4:	4b15      	ldr	r3, [pc, #84]	; (800082c <MX_ADC1_Init+0x98>)
 80007d6:	4a17      	ldr	r2, [pc, #92]	; (8000834 <MX_ADC1_Init+0xa0>)
 80007d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007da:	4b14      	ldr	r3, [pc, #80]	; (800082c <MX_ADC1_Init+0x98>)
 80007dc:	2200      	movs	r2, #0
 80007de:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007e0:	4b12      	ldr	r3, [pc, #72]	; (800082c <MX_ADC1_Init+0x98>)
 80007e2:	2201      	movs	r2, #1
 80007e4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007e6:	4b11      	ldr	r3, [pc, #68]	; (800082c <MX_ADC1_Init+0x98>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007ee:	4b0f      	ldr	r3, [pc, #60]	; (800082c <MX_ADC1_Init+0x98>)
 80007f0:	2201      	movs	r2, #1
 80007f2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007f4:	480d      	ldr	r0, [pc, #52]	; (800082c <MX_ADC1_Init+0x98>)
 80007f6:	f000 fff9 	bl	80017ec <HAL_ADC_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000800:	f000 fa86 	bl	8000d10 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000804:	2306      	movs	r3, #6
 8000806:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000808:	2301      	movs	r3, #1
 800080a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800080c:	2300      	movs	r3, #0
 800080e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000810:	463b      	mov	r3, r7
 8000812:	4619      	mov	r1, r3
 8000814:	4805      	ldr	r0, [pc, #20]	; (800082c <MX_ADC1_Init+0x98>)
 8000816:	f001 f979 	bl	8001b0c <HAL_ADC_ConfigChannel>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000820:	f000 fa76 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000824:	bf00      	nop
 8000826:	3710      	adds	r7, #16
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	2000008c 	.word	0x2000008c
 8000830:	40012000 	.word	0x40012000
 8000834:	0f000001 	.word	0x0f000001

08000838 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b092      	sub	sp, #72	; 0x48
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800083e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000848:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	60da      	str	r2, [r3, #12]
 8000856:	611a      	str	r2, [r3, #16]
 8000858:	615a      	str	r2, [r3, #20]
 800085a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800085c:	1d3b      	adds	r3, r7, #4
 800085e:	2220      	movs	r2, #32
 8000860:	2100      	movs	r1, #0
 8000862:	4618      	mov	r0, r3
 8000864:	f003 ffb4 	bl	80047d0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000868:	4b40      	ldr	r3, [pc, #256]	; (800096c <MX_TIM1_Init+0x134>)
 800086a:	4a41      	ldr	r2, [pc, #260]	; (8000970 <MX_TIM1_Init+0x138>)
 800086c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 42-1;
 800086e:	4b3f      	ldr	r3, [pc, #252]	; (800096c <MX_TIM1_Init+0x134>)
 8000870:	2229      	movs	r2, #41	; 0x29
 8000872:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000874:	4b3d      	ldr	r3, [pc, #244]	; (800096c <MX_TIM1_Init+0x134>)
 8000876:	2200      	movs	r2, #0
 8000878:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 800087a:	4b3c      	ldr	r3, [pc, #240]	; (800096c <MX_TIM1_Init+0x134>)
 800087c:	2263      	movs	r2, #99	; 0x63
 800087e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000880:	4b3a      	ldr	r3, [pc, #232]	; (800096c <MX_TIM1_Init+0x134>)
 8000882:	2200      	movs	r2, #0
 8000884:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000886:	4b39      	ldr	r3, [pc, #228]	; (800096c <MX_TIM1_Init+0x134>)
 8000888:	2200      	movs	r2, #0
 800088a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800088c:	4b37      	ldr	r3, [pc, #220]	; (800096c <MX_TIM1_Init+0x134>)
 800088e:	2200      	movs	r2, #0
 8000890:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000892:	4836      	ldr	r0, [pc, #216]	; (800096c <MX_TIM1_Init+0x134>)
 8000894:	f002 fb9b 	bl	8002fce <HAL_TIM_PWM_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 800089e:	f000 fa37 	bl	8000d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008a2:	2300      	movs	r3, #0
 80008a4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008a6:	2300      	movs	r3, #0
 80008a8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80008ae:	4619      	mov	r1, r3
 80008b0:	482e      	ldr	r0, [pc, #184]	; (800096c <MX_TIM1_Init+0x134>)
 80008b2:	f003 fad7 	bl	8003e64 <HAL_TIMEx_MasterConfigSynchronization>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 80008bc:	f000 fa28 	bl	8000d10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008c0:	2360      	movs	r3, #96	; 0x60
 80008c2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008c8:	2300      	movs	r3, #0
 80008ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008cc:	2300      	movs	r3, #0
 80008ce:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008d0:	2300      	movs	r3, #0
 80008d2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008d4:	2300      	movs	r3, #0
 80008d6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008d8:	2300      	movs	r3, #0
 80008da:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e0:	2200      	movs	r2, #0
 80008e2:	4619      	mov	r1, r3
 80008e4:	4821      	ldr	r0, [pc, #132]	; (800096c <MX_TIM1_Init+0x134>)
 80008e6:	f002 fdd5 	bl	8003494 <HAL_TIM_PWM_ConfigChannel>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 80008f0:	f000 fa0e 	bl	8000d10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f8:	2208      	movs	r2, #8
 80008fa:	4619      	mov	r1, r3
 80008fc:	481b      	ldr	r0, [pc, #108]	; (800096c <MX_TIM1_Init+0x134>)
 80008fe:	f002 fdc9 	bl	8003494 <HAL_TIM_PWM_ConfigChannel>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000908:	f000 fa02 	bl	8000d10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800090c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000910:	220c      	movs	r2, #12
 8000912:	4619      	mov	r1, r3
 8000914:	4815      	ldr	r0, [pc, #84]	; (800096c <MX_TIM1_Init+0x134>)
 8000916:	f002 fdbd 	bl	8003494 <HAL_TIM_PWM_ConfigChannel>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8000920:	f000 f9f6 	bl	8000d10 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000924:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000928:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 800092a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800092e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000930:	2300      	movs	r3, #0
 8000932:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000934:	2300      	movs	r3, #0
 8000936:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8000938:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800093c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800093e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000942:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8000944:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000948:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	4619      	mov	r1, r3
 800094e:	4807      	ldr	r0, [pc, #28]	; (800096c <MX_TIM1_Init+0x134>)
 8000950:	f003 faf6 	bl	8003f40 <HAL_TIMEx_ConfigBreakDeadTime>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 800095a:	f000 f9d9 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800095e:	4803      	ldr	r0, [pc, #12]	; (800096c <MX_TIM1_Init+0x134>)
 8000960:	f000 fcd2 	bl	8001308 <HAL_TIM_MspPostInit>

}
 8000964:	bf00      	nop
 8000966:	3748      	adds	r7, #72	; 0x48
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	200000d4 	.word	0x200000d4
 8000970:	40010000 	.word	0x40010000

08000974 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08e      	sub	sp, #56	; 0x38
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800097a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	605a      	str	r2, [r3, #4]
 8000984:	609a      	str	r2, [r3, #8]
 8000986:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000988:	f107 0320 	add.w	r3, r7, #32
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000992:	1d3b      	adds	r3, r7, #4
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]
 80009a0:	615a      	str	r2, [r3, #20]
 80009a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009a4:	4b39      	ldr	r3, [pc, #228]	; (8000a8c <MX_TIM2_Init+0x118>)
 80009a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80009ac:	4b37      	ldr	r3, [pc, #220]	; (8000a8c <MX_TIM2_Init+0x118>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b2:	4b36      	ldr	r3, [pc, #216]	; (8000a8c <MX_TIM2_Init+0x118>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80009b8:	4b34      	ldr	r3, [pc, #208]	; (8000a8c <MX_TIM2_Init+0x118>)
 80009ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009c0:	4b32      	ldr	r3, [pc, #200]	; (8000a8c <MX_TIM2_Init+0x118>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c6:	4b31      	ldr	r3, [pc, #196]	; (8000a8c <MX_TIM2_Init+0x118>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009cc:	482f      	ldr	r0, [pc, #188]	; (8000a8c <MX_TIM2_Init+0x118>)
 80009ce:	f002 fa05 	bl	8002ddc <HAL_TIM_Base_Init>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80009d8:	f000 f99a 	bl	8000d10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009e0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009e6:	4619      	mov	r1, r3
 80009e8:	4828      	ldr	r0, [pc, #160]	; (8000a8c <MX_TIM2_Init+0x118>)
 80009ea:	f002 fe15 	bl	8003618 <HAL_TIM_ConfigClockSource>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80009f4:	f000 f98c 	bl	8000d10 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80009f8:	4824      	ldr	r0, [pc, #144]	; (8000a8c <MX_TIM2_Init+0x118>)
 80009fa:	f002 fa99 	bl	8002f30 <HAL_TIM_OC_Init>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000a04:	f000 f984 	bl	8000d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a10:	f107 0320 	add.w	r3, r7, #32
 8000a14:	4619      	mov	r1, r3
 8000a16:	481d      	ldr	r0, [pc, #116]	; (8000a8c <MX_TIM2_Init+0x118>)
 8000a18:	f003 fa24 	bl	8003e64 <HAL_TIMEx_MasterConfigSynchronization>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000a22:	f000 f975 	bl	8000d10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000a26:	2330      	movs	r3, #48	; 0x30
 8000a28:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a32:	2300      	movs	r3, #0
 8000a34:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a36:	1d3b      	adds	r3, r7, #4
 8000a38:	2200      	movs	r2, #0
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4813      	ldr	r0, [pc, #76]	; (8000a8c <MX_TIM2_Init+0x118>)
 8000a3e:	f002 fccd 	bl	80033dc <HAL_TIM_OC_ConfigChannel>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000a48:	f000 f962 	bl	8000d10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a50:	1d3b      	adds	r3, r7, #4
 8000a52:	2204      	movs	r2, #4
 8000a54:	4619      	mov	r1, r3
 8000a56:	480d      	ldr	r0, [pc, #52]	; (8000a8c <MX_TIM2_Init+0x118>)
 8000a58:	f002 fcc0 	bl	80033dc <HAL_TIM_OC_ConfigChannel>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8000a62:	f000 f955 	bl	8000d10 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a66:	1d3b      	adds	r3, r7, #4
 8000a68:	2208      	movs	r2, #8
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4807      	ldr	r0, [pc, #28]	; (8000a8c <MX_TIM2_Init+0x118>)
 8000a6e:	f002 fcb5 	bl	80033dc <HAL_TIM_OC_ConfigChannel>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 8000a78:	f000 f94a 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a7c:	4803      	ldr	r0, [pc, #12]	; (8000a8c <MX_TIM2_Init+0x118>)
 8000a7e:	f000 fc43 	bl	8001308 <HAL_TIM_MspPostInit>

}
 8000a82:	bf00      	nop
 8000a84:	3738      	adds	r7, #56	; 0x38
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	2000011c 	.word	0x2000011c

08000a90 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08a      	sub	sp, #40	; 0x28
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a96:	f107 0320 	add.w	r3, r7, #32
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000aa0:	1d3b      	adds	r3, r7, #4
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	605a      	str	r2, [r3, #4]
 8000aa8:	609a      	str	r2, [r3, #8]
 8000aaa:	60da      	str	r2, [r3, #12]
 8000aac:	611a      	str	r2, [r3, #16]
 8000aae:	615a      	str	r2, [r3, #20]
 8000ab0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ab2:	4b21      	ldr	r3, [pc, #132]	; (8000b38 <MX_TIM3_Init+0xa8>)
 8000ab4:	4a21      	ldr	r2, [pc, #132]	; (8000b3c <MX_TIM3_Init+0xac>)
 8000ab6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4200-1;
 8000ab8:	4b1f      	ldr	r3, [pc, #124]	; (8000b38 <MX_TIM3_Init+0xa8>)
 8000aba:	f241 0267 	movw	r2, #4199	; 0x1067
 8000abe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac0:	4b1d      	ldr	r3, [pc, #116]	; (8000b38 <MX_TIM3_Init+0xa8>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000ac6:	4b1c      	ldr	r3, [pc, #112]	; (8000b38 <MX_TIM3_Init+0xa8>)
 8000ac8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000acc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ace:	4b1a      	ldr	r3, [pc, #104]	; (8000b38 <MX_TIM3_Init+0xa8>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ad4:	4b18      	ldr	r3, [pc, #96]	; (8000b38 <MX_TIM3_Init+0xa8>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000ada:	4817      	ldr	r0, [pc, #92]	; (8000b38 <MX_TIM3_Init+0xa8>)
 8000adc:	f002 fa28 	bl	8002f30 <HAL_TIM_OC_Init>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000ae6:	f000 f913 	bl	8000d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000aea:	2320      	movs	r3, #32
 8000aec:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aee:	2300      	movs	r3, #0
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000af2:	f107 0320 	add.w	r3, r7, #32
 8000af6:	4619      	mov	r1, r3
 8000af8:	480f      	ldr	r0, [pc, #60]	; (8000b38 <MX_TIM3_Init+0xa8>)
 8000afa:	f003 f9b3 	bl	8003e64 <HAL_TIMEx_MasterConfigSynchronization>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000b04:	f000 f904 	bl	8000d10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b10:	2300      	movs	r3, #0
 8000b12:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b14:	2300      	movs	r3, #0
 8000b16:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b18:	1d3b      	adds	r3, r7, #4
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4806      	ldr	r0, [pc, #24]	; (8000b38 <MX_TIM3_Init+0xa8>)
 8000b20:	f002 fc5c 	bl	80033dc <HAL_TIM_OC_ConfigChannel>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000b2a:	f000 f8f1 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b2e:	bf00      	nop
 8000b30:	3728      	adds	r7, #40	; 0x28
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20000164 	.word	0x20000164
 8000b3c:	40000400 	.word	0x40000400

08000b40 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000b44:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <MX_USART6_UART_Init+0x4c>)
 8000b46:	4a12      	ldr	r2, [pc, #72]	; (8000b90 <MX_USART6_UART_Init+0x50>)
 8000b48:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000b4a:	4b10      	ldr	r3, [pc, #64]	; (8000b8c <MX_USART6_UART_Init+0x4c>)
 8000b4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b50:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000b52:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <MX_USART6_UART_Init+0x4c>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000b58:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <MX_USART6_UART_Init+0x4c>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000b5e:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <MX_USART6_UART_Init+0x4c>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000b64:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <MX_USART6_UART_Init+0x4c>)
 8000b66:	220c      	movs	r2, #12
 8000b68:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b6a:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <MX_USART6_UART_Init+0x4c>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b70:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <MX_USART6_UART_Init+0x4c>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000b76:	4805      	ldr	r0, [pc, #20]	; (8000b8c <MX_USART6_UART_Init+0x4c>)
 8000b78:	f003 fa3e 	bl	8003ff8 <HAL_UART_Init>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000b82:	f000 f8c5 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	200001ac 	.word	0x200001ac
 8000b90:	40011400 	.word	0x40011400

08000b94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08a      	sub	sp, #40	; 0x28
 8000b98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9a:	f107 0314 	add.w	r3, r7, #20
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	605a      	str	r2, [r3, #4]
 8000ba4:	609a      	str	r2, [r3, #8]
 8000ba6:	60da      	str	r2, [r3, #12]
 8000ba8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	613b      	str	r3, [r7, #16]
 8000bae:	4b3f      	ldr	r3, [pc, #252]	; (8000cac <MX_GPIO_Init+0x118>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	4a3e      	ldr	r2, [pc, #248]	; (8000cac <MX_GPIO_Init+0x118>)
 8000bb4:	f043 0301 	orr.w	r3, r3, #1
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bba:	4b3c      	ldr	r3, [pc, #240]	; (8000cac <MX_GPIO_Init+0x118>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	613b      	str	r3, [r7, #16]
 8000bc4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	4b38      	ldr	r3, [pc, #224]	; (8000cac <MX_GPIO_Init+0x118>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	4a37      	ldr	r2, [pc, #220]	; (8000cac <MX_GPIO_Init+0x118>)
 8000bd0:	f043 0310 	orr.w	r3, r3, #16
 8000bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd6:	4b35      	ldr	r3, [pc, #212]	; (8000cac <MX_GPIO_Init+0x118>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	f003 0310 	and.w	r3, r3, #16
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	60bb      	str	r3, [r7, #8]
 8000be6:	4b31      	ldr	r3, [pc, #196]	; (8000cac <MX_GPIO_Init+0x118>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	4a30      	ldr	r2, [pc, #192]	; (8000cac <MX_GPIO_Init+0x118>)
 8000bec:	f043 0302 	orr.w	r3, r3, #2
 8000bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf2:	4b2e      	ldr	r3, [pc, #184]	; (8000cac <MX_GPIO_Init+0x118>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	f003 0302 	and.w	r3, r3, #2
 8000bfa:	60bb      	str	r3, [r7, #8]
 8000bfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	607b      	str	r3, [r7, #4]
 8000c02:	4b2a      	ldr	r3, [pc, #168]	; (8000cac <MX_GPIO_Init+0x118>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	4a29      	ldr	r2, [pc, #164]	; (8000cac <MX_GPIO_Init+0x118>)
 8000c08:	f043 0308 	orr.w	r3, r3, #8
 8000c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0e:	4b27      	ldr	r3, [pc, #156]	; (8000cac <MX_GPIO_Init+0x118>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	f003 0308 	and.w	r3, r3, #8
 8000c16:	607b      	str	r3, [r7, #4]
 8000c18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	603b      	str	r3, [r7, #0]
 8000c1e:	4b23      	ldr	r3, [pc, #140]	; (8000cac <MX_GPIO_Init+0x118>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	4a22      	ldr	r2, [pc, #136]	; (8000cac <MX_GPIO_Init+0x118>)
 8000c24:	f043 0304 	orr.w	r3, r3, #4
 8000c28:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2a:	4b20      	ldr	r3, [pc, #128]	; (8000cac <MX_GPIO_Init+0x118>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	f003 0304 	and.w	r3, r3, #4
 8000c32:	603b      	str	r3, [r7, #0]
 8000c34:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PWM1EN_Pin|PWM2EN_Pin|PWM3EN_Pin, GPIO_PIN_RESET);
 8000c36:	2200      	movs	r2, #0
 8000c38:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8000c3c:	481c      	ldr	r0, [pc, #112]	; (8000cb0 <MX_GPIO_Init+0x11c>)
 8000c3e:	f001 fc41 	bl	80024c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD3_Pin|LD4_Pin|LD5_Pin|LDN_Pin, GPIO_PIN_RESET);
 8000c42:	2200      	movs	r2, #0
 8000c44:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000c48:	481a      	ldr	r0, [pc, #104]	; (8000cb4 <MX_GPIO_Init+0x120>)
 8000c4a:	f001 fc3b 	bl	80024c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000c5a:	f107 0314 	add.w	r3, r7, #20
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4815      	ldr	r0, [pc, #84]	; (8000cb8 <MX_GPIO_Init+0x124>)
 8000c62:	f001 fa93 	bl	800218c <HAL_GPIO_Init>

  /*Configure GPIO pins : PWM1EN_Pin PWM2EN_Pin PWM3EN_Pin */
  GPIO_InitStruct.Pin = PWM1EN_Pin|PWM2EN_Pin|PWM3EN_Pin;
 8000c66:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000c6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c74:	2300      	movs	r3, #0
 8000c76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c78:	f107 0314 	add.w	r3, r7, #20
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	480c      	ldr	r0, [pc, #48]	; (8000cb0 <MX_GPIO_Init+0x11c>)
 8000c80:	f001 fa84 	bl	800218c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin LD5_Pin LDN_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin|LD5_Pin|LDN_Pin;
 8000c84:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000c88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c92:	2302      	movs	r3, #2
 8000c94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c96:	f107 0314 	add.w	r3, r7, #20
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4805      	ldr	r0, [pc, #20]	; (8000cb4 <MX_GPIO_Init+0x120>)
 8000c9e:	f001 fa75 	bl	800218c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ca2:	bf00      	nop
 8000ca4:	3728      	adds	r7, #40	; 0x28
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40023800 	.word	0x40023800
 8000cb0:	40020400 	.word	0x40020400
 8000cb4:	40020c00 	.word	0x40020c00
 8000cb8:	40020000 	.word	0x40020000

08000cbc <HAL_TIMEx_CommutCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
	bldc_motor_six_step_algorithm();
 8000cc4:	f000 f8f8 	bl	8000eb8 <bldc_motor_six_step_algorithm>
}
 8000cc8:	bf00      	nop
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <__io_putchar>:

int __io_putchar(int ch)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
    if (ch == '\n') {
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2b0a      	cmp	r3, #10
 8000cdc:	d109      	bne.n	8000cf2 <__io_putchar+0x22>
        uint8_t ch6 = '\r';
 8000cde:	230d      	movs	r3, #13
 8000ce0:	73fb      	strb	r3, [r7, #15]
        HAL_UART_Transmit(&huart6, &ch6, 1, HAL_MAX_DELAY);
 8000ce2:	f107 010f 	add.w	r1, r7, #15
 8000ce6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cea:	2201      	movs	r2, #1
 8000cec:	4807      	ldr	r0, [pc, #28]	; (8000d0c <__io_putchar+0x3c>)
 8000cee:	f003 f9d0 	bl	8004092 <HAL_UART_Transmit>
    }

    HAL_UART_Transmit(&huart6, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000cf2:	1d39      	adds	r1, r7, #4
 8000cf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	4804      	ldr	r0, [pc, #16]	; (8000d0c <__io_putchar+0x3c>)
 8000cfc:	f003 f9c9 	bl	8004092 <HAL_UART_Transmit>
    return 1;
 8000d00:	2301      	movs	r3, #1
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3710      	adds	r7, #16
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	200001ac 	.word	0x200001ac

08000d10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d14:	b672      	cpsid	i
}
 8000d16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d18:	e7fe      	b.n	8000d18 <Error_Handler+0x8>
	...

08000d1c <bldc_motor_init>:

bool was_button_pressed = false;


void bldc_motor_init(TIM_HandleTypeDef *_tim_pwm, TIM_HandleTypeDef *_tim_com)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	6039      	str	r1, [r7, #0]
	bldc.tim_pwm = _tim_pwm;
 8000d26:	4a1b      	ldr	r2, [pc, #108]	; (8000d94 <bldc_motor_init+0x78>)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6113      	str	r3, [r2, #16]
	bldc.tim_com = _tim_com;
 8000d2c:	4a19      	ldr	r2, [pc, #100]	; (8000d94 <bldc_motor_init+0x78>)
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	60d3      	str	r3, [r2, #12]

	bldc.step_number = 1;
 8000d32:	4b18      	ldr	r3, [pc, #96]	; (8000d94 <bldc_motor_init+0x78>)
 8000d34:	2201      	movs	r2, #1
 8000d36:	701a      	strb	r2, [r3, #0]
	bldc.speed_pulse = 0;
 8000d38:	4b16      	ldr	r3, [pc, #88]	; (8000d94 <bldc_motor_init+0x78>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	605a      	str	r2, [r3, #4]
	bldc.dir = CW;
 8000d3e:	4b15      	ldr	r3, [pc, #84]	; (8000d94 <bldc_motor_init+0x78>)
 8000d40:	2201      	movs	r2, #1
 8000d42:	609a      	str	r2, [r3, #8]

	bldc_motor_Config_Channel_Init();
 8000d44:	f000 f850 	bl	8000de8 <bldc_motor_Config_Channel_Init>

	__HAL_TIM_SET_AUTORELOAD(bldc.tim_com, ARR_TIM3_VALUE);
 8000d48:	4b12      	ldr	r3, [pc, #72]	; (8000d94 <bldc_motor_init+0x78>)
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	2264      	movs	r2, #100	; 0x64
 8000d50:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d52:	4b10      	ldr	r3, [pc, #64]	; (8000d94 <bldc_motor_init+0x78>)
 8000d54:	68db      	ldr	r3, [r3, #12]
 8000d56:	2264      	movs	r2, #100	; 0x64
 8000d58:	60da      	str	r2, [r3, #12]

	HAL_TIM_Base_Start(bldc.tim_com);
 8000d5a:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <bldc_motor_init+0x78>)
 8000d5c:	68db      	ldr	r3, [r3, #12]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f002 f88c 	bl	8002e7c <HAL_TIM_Base_Start>
	HAL_TIMEx_ConfigCommutationEvent_IT(bldc.tim_pwm, TIM_TS_ITR2, TIM_COMMUTATION_TRGI);
 8000d64:	4b0b      	ldr	r3, [pc, #44]	; (8000d94 <bldc_motor_init+0x78>)
 8000d66:	691b      	ldr	r3, [r3, #16]
 8000d68:	2204      	movs	r2, #4
 8000d6a:	2120      	movs	r1, #32
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f003 f818 	bl	8003da2 <HAL_TIMEx_ConfigCommutEvent_IT>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000d72:	2100      	movs	r1, #0
 8000d74:	4808      	ldr	r0, [pc, #32]	; (8000d98 <bldc_motor_init+0x7c>)
 8000d76:	f002 f979 	bl	800306c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000d7a:	210c      	movs	r1, #12
 8000d7c:	4806      	ldr	r0, [pc, #24]	; (8000d98 <bldc_motor_init+0x7c>)
 8000d7e:	f002 f975 	bl	800306c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000d82:	2108      	movs	r1, #8
 8000d84:	4804      	ldr	r0, [pc, #16]	; (8000d98 <bldc_motor_init+0x7c>)
 8000d86:	f002 f971 	bl	800306c <HAL_TIM_PWM_Start>
}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	200001f4 	.word	0x200001f4
 8000d98:	200000d4 	.word	0x200000d4

08000d9c <bldc_motor_set_speed>:



bool bldc_motor_set_speed(uint32_t speed, direction dir)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b085      	sub	sp, #20
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	460b      	mov	r3, r1
 8000da6:	70fb      	strb	r3, [r7, #3]
	bool is_speed_changed = false;
 8000da8:	2300      	movs	r3, #0
 8000daa:	73fb      	strb	r3, [r7, #15]

	if(speed > BLDC_MOTOR_MAX_SPEED)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2b64      	cmp	r3, #100	; 0x64
 8000db0:	d903      	bls.n	8000dba <bldc_motor_set_speed+0x1e>
	{
		bldc.speed_pulse = BLDC_MOTOR_MAX_SPEED;
 8000db2:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <bldc_motor_set_speed+0x48>)
 8000db4:	2264      	movs	r2, #100	; 0x64
 8000db6:	605a      	str	r2, [r3, #4]
 8000db8:	e009      	b.n	8000dce <bldc_motor_set_speed+0x32>
	}
	else
	{
		if (bldc.speed_pulse != speed){
 8000dba:	4b0a      	ldr	r3, [pc, #40]	; (8000de4 <bldc_motor_set_speed+0x48>)
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	d001      	beq.n	8000dc8 <bldc_motor_set_speed+0x2c>
			is_speed_changed = true;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	73fb      	strb	r3, [r7, #15]
		}
		bldc.speed_pulse = speed;
 8000dc8:	4a06      	ldr	r2, [pc, #24]	; (8000de4 <bldc_motor_set_speed+0x48>)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6053      	str	r3, [r2, #4]
	}

	bldc.dir = dir;
 8000dce:	78fb      	ldrb	r3, [r7, #3]
 8000dd0:	4a04      	ldr	r2, [pc, #16]	; (8000de4 <bldc_motor_set_speed+0x48>)
 8000dd2:	6093      	str	r3, [r2, #8]

	return is_speed_changed;
 8000dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3714      	adds	r7, #20
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	200001f4 	.word	0x200001f4

08000de8 <bldc_motor_Config_Channel_Init>:
//}



void bldc_motor_Config_Channel_Init(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
	bldc.sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dec:	4b0c      	ldr	r3, [pc, #48]	; (8000e20 <bldc_motor_Config_Channel_Init+0x38>)
 8000dee:	2260      	movs	r2, #96	; 0x60
 8000df0:	615a      	str	r2, [r3, #20]
	bldc.sConfigOC.Pulse = 0;
 8000df2:	4b0b      	ldr	r3, [pc, #44]	; (8000e20 <bldc_motor_Config_Channel_Init+0x38>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	619a      	str	r2, [r3, #24]
	bldc.sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000df8:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <bldc_motor_Config_Channel_Init+0x38>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	61da      	str	r2, [r3, #28]
	bldc.sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000dfe:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <bldc_motor_Config_Channel_Init+0x38>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	621a      	str	r2, [r3, #32]
	bldc.sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e04:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <bldc_motor_Config_Channel_Init+0x38>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	625a      	str	r2, [r3, #36]	; 0x24
	bldc.sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e0a:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <bldc_motor_Config_Channel_Init+0x38>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	629a      	str	r2, [r3, #40]	; 0x28
	bldc.sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e10:	4b03      	ldr	r3, [pc, #12]	; (8000e20 <bldc_motor_Config_Channel_Init+0x38>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	62da      	str	r2, [r3, #44]	; 0x2c

//	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1|TIM_IT_CC3|TIM_IT_CC4);

}
 8000e16:	bf00      	nop
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	200001f4 	.word	0x200001f4

08000e24 <bldc_motor_set_pwm>:
//	HAL_TIMEx_OCN_Start(bldc.tim_pwm, channel);
}


void bldc_motor_set_pwm(uint16_t speedA, uint16_t speedB, uint16_t speedC)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	80fb      	strh	r3, [r7, #6]
 8000e2e:	460b      	mov	r3, r1
 8000e30:	80bb      	strh	r3, [r7, #4]
 8000e32:	4613      	mov	r3, r2
 8000e34:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speedA);
 8000e36:	4b09      	ldr	r3, [pc, #36]	; (8000e5c <bldc_motor_set_pwm+0x38>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	88fa      	ldrh	r2, [r7, #6]
 8000e3c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, speedB);
 8000e3e:	4b07      	ldr	r3, [pc, #28]	; (8000e5c <bldc_motor_set_pwm+0x38>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	88ba      	ldrh	r2, [r7, #4]
 8000e44:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, speedC);
 8000e46:	4b05      	ldr	r3, [pc, #20]	; (8000e5c <bldc_motor_set_pwm+0x38>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	887a      	ldrh	r2, [r7, #2]
 8000e4c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000e4e:	bf00      	nop
 8000e50:	370c      	adds	r7, #12
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	200000d4 	.word	0x200000d4

08000e60 <check_button_press>:


void check_button_press() {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
    static bool button_state = false;
    bool new_button_state = HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin);
 8000e66:	2101      	movs	r1, #1
 8000e68:	4810      	ldr	r0, [pc, #64]	; (8000eac <check_button_press+0x4c>)
 8000e6a:	f001 fb13 	bl	8002494 <HAL_GPIO_ReadPin>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	bf14      	ite	ne
 8000e74:	2301      	movne	r3, #1
 8000e76:	2300      	moveq	r3, #0
 8000e78:	71fb      	strb	r3, [r7, #7]

    if (new_button_state && !button_state) {
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d00a      	beq.n	8000e96 <check_button_press+0x36>
 8000e80:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <check_button_press+0x50>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	f083 0301 	eor.w	r3, r3, #1
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d003      	beq.n	8000e96 <check_button_press+0x36>
        was_button_pressed = true;
 8000e8e:	4b09      	ldr	r3, [pc, #36]	; (8000eb4 <check_button_press+0x54>)
 8000e90:	2201      	movs	r2, #1
 8000e92:	701a      	strb	r2, [r3, #0]
 8000e94:	e002      	b.n	8000e9c <check_button_press+0x3c>
    } else {
        was_button_pressed = false;
 8000e96:	4b07      	ldr	r3, [pc, #28]	; (8000eb4 <check_button_press+0x54>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	701a      	strb	r2, [r3, #0]
    }

    button_state = new_button_state;
 8000e9c:	4a04      	ldr	r2, [pc, #16]	; (8000eb0 <check_button_press+0x50>)
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	7013      	strb	r3, [r2, #0]
}
 8000ea2:	bf00      	nop
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40020000 	.word	0x40020000
 8000eb0:	20000225 	.word	0x20000225
 8000eb4:	20000224 	.word	0x20000224

08000eb8 <bldc_motor_six_step_algorithm>:



void bldc_motor_six_step_algorithm(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
    switch (bldc.step_number)
 8000ebc:	4ba4      	ldr	r3, [pc, #656]	; (8001150 <bldc_motor_six_step_algorithm+0x298>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	3b01      	subs	r3, #1
 8000ec2:	2b05      	cmp	r3, #5
 8000ec4:	f200 811e 	bhi.w	8001104 <bldc_motor_six_step_algorithm+0x24c>
 8000ec8:	a201      	add	r2, pc, #4	; (adr r2, 8000ed0 <bldc_motor_six_step_algorithm+0x18>)
 8000eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ece:	bf00      	nop
 8000ed0:	08000ee9 	.word	0x08000ee9
 8000ed4:	08000f43 	.word	0x08000f43
 8000ed8:	08000f9d 	.word	0x08000f9d
 8000edc:	08000ff7 	.word	0x08000ff7
 8000ee0:	08001051 	.word	0x08001051
 8000ee4:	080010ab 	.word	0x080010ab
    {
        case 1:
        	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, SET);
 8000ee8:	2201      	movs	r2, #1
 8000eea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000eee:	4899      	ldr	r0, [pc, #612]	; (8001154 <bldc_motor_six_step_algorithm+0x29c>)
 8000ef0:	f001 fae8 	bl	80024c4 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, RESET);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000efa:	4896      	ldr	r0, [pc, #600]	; (8001154 <bldc_motor_six_step_algorithm+0x29c>)
 8000efc:	f001 fae2 	bl	80024c4 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, RESET);
 8000f00:	2200      	movs	r2, #0
 8000f02:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f06:	4893      	ldr	r0, [pc, #588]	; (8001154 <bldc_motor_six_step_algorithm+0x29c>)
 8000f08:	f001 fadc 	bl	80024c4 <HAL_GPIO_WritePin>

        	HAL_GPIO_WritePin(PWM1EN_GPIO_Port, PWM1EN_Pin, GPIO_PIN_SET);
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f12:	4891      	ldr	r0, [pc, #580]	; (8001158 <bldc_motor_six_step_algorithm+0x2a0>)
 8000f14:	f001 fad6 	bl	80024c4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PWM2EN_GPIO_Port, PWM2EN_Pin, GPIO_PIN_SET);
 8000f18:	2201      	movs	r2, #1
 8000f1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f1e:	488e      	ldr	r0, [pc, #568]	; (8001158 <bldc_motor_six_step_algorithm+0x2a0>)
 8000f20:	f001 fad0 	bl	80024c4 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(PWM3EN_GPIO_Port, PWM3EN_Pin, GPIO_PIN_RESET);
 8000f24:	2200      	movs	r2, #0
 8000f26:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f2a:	488b      	ldr	r0, [pc, #556]	; (8001158 <bldc_motor_six_step_algorithm+0x2a0>)
 8000f2c:	f001 faca 	bl	80024c4 <HAL_GPIO_WritePin>

        	bldc_motor_set_pwm(bldc.speed_pulse, 0, 0);
 8000f30:	4b87      	ldr	r3, [pc, #540]	; (8001150 <bldc_motor_six_step_algorithm+0x298>)
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	b29b      	uxth	r3, r3
 8000f36:	2200      	movs	r2, #0
 8000f38:	2100      	movs	r1, #0
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff ff72 	bl	8000e24 <bldc_motor_set_pwm>

//            bldc_motor_PWM_Config_Channel(bldc.speed_pulse, TIM_CHANNEL_1);
//            bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_ACTIVE, TIM_CHANNEL_1);
//            bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_ACTIVE, TIM_CHANNEL_4);
//            bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_INACTIVE, TIM_CHANNEL_3);
            break;
 8000f40:	e0e0      	b.n	8001104 <bldc_motor_six_step_algorithm+0x24c>
        case 2:
        	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, SET);
 8000f42:	2201      	movs	r2, #1
 8000f44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f48:	4882      	ldr	r0, [pc, #520]	; (8001154 <bldc_motor_six_step_algorithm+0x29c>)
 8000f4a:	f001 fabb 	bl	80024c4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, RESET);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f54:	487f      	ldr	r0, [pc, #508]	; (8001154 <bldc_motor_six_step_algorithm+0x29c>)
 8000f56:	f001 fab5 	bl	80024c4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, RESET);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f60:	487c      	ldr	r0, [pc, #496]	; (8001154 <bldc_motor_six_step_algorithm+0x29c>)
 8000f62:	f001 faaf 	bl	80024c4 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(PWM1EN_GPIO_Port, PWM1EN_Pin, GPIO_PIN_SET);
 8000f66:	2201      	movs	r2, #1
 8000f68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f6c:	487a      	ldr	r0, [pc, #488]	; (8001158 <bldc_motor_six_step_algorithm+0x2a0>)
 8000f6e:	f001 faa9 	bl	80024c4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PWM2EN_GPIO_Port, PWM2EN_Pin, GPIO_PIN_RESET);
 8000f72:	2200      	movs	r2, #0
 8000f74:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f78:	4877      	ldr	r0, [pc, #476]	; (8001158 <bldc_motor_six_step_algorithm+0x2a0>)
 8000f7a:	f001 faa3 	bl	80024c4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PWM3EN_GPIO_Port, PWM3EN_Pin, GPIO_PIN_SET);
 8000f7e:	2201      	movs	r2, #1
 8000f80:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f84:	4874      	ldr	r0, [pc, #464]	; (8001158 <bldc_motor_six_step_algorithm+0x2a0>)
 8000f86:	f001 fa9d 	bl	80024c4 <HAL_GPIO_WritePin>

        	bldc_motor_set_pwm(bldc.speed_pulse, 0, 0);
 8000f8a:	4b71      	ldr	r3, [pc, #452]	; (8001150 <bldc_motor_six_step_algorithm+0x298>)
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	b29b      	uxth	r3, r3
 8000f90:	2200      	movs	r2, #0
 8000f92:	2100      	movs	r1, #0
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff ff45 	bl	8000e24 <bldc_motor_set_pwm>
//			bldc_motor_PWM_Config_Channel(bldc.speed_pulse, TIM_CHANNEL_1);
//			bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_ACTIVE, TIM_CHANNEL_1);
//			bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_INACTIVE, TIM_CHANNEL_4);
//			bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_INACTIVE, TIM_CHANNEL_3);

            break;
 8000f9a:	e0b3      	b.n	8001104 <bldc_motor_six_step_algorithm+0x24c>
        case 3:
        	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, RESET);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fa2:	486c      	ldr	r0, [pc, #432]	; (8001154 <bldc_motor_six_step_algorithm+0x29c>)
 8000fa4:	f001 fa8e 	bl	80024c4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, SET);
 8000fa8:	2201      	movs	r2, #1
 8000faa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fae:	4869      	ldr	r0, [pc, #420]	; (8001154 <bldc_motor_six_step_algorithm+0x29c>)
 8000fb0:	f001 fa88 	bl	80024c4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, RESET);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fba:	4866      	ldr	r0, [pc, #408]	; (8001154 <bldc_motor_six_step_algorithm+0x29c>)
 8000fbc:	f001 fa82 	bl	80024c4 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(PWM1EN_GPIO_Port, PWM1EN_Pin, GPIO_PIN_RESET);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fc6:	4864      	ldr	r0, [pc, #400]	; (8001158 <bldc_motor_six_step_algorithm+0x2a0>)
 8000fc8:	f001 fa7c 	bl	80024c4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PWM2EN_GPIO_Port, PWM2EN_Pin, GPIO_PIN_SET);
 8000fcc:	2201      	movs	r2, #1
 8000fce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fd2:	4861      	ldr	r0, [pc, #388]	; (8001158 <bldc_motor_six_step_algorithm+0x2a0>)
 8000fd4:	f001 fa76 	bl	80024c4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PWM3EN_GPIO_Port, PWM3EN_Pin, GPIO_PIN_SET);
 8000fd8:	2201      	movs	r2, #1
 8000fda:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fde:	485e      	ldr	r0, [pc, #376]	; (8001158 <bldc_motor_six_step_algorithm+0x2a0>)
 8000fe0:	f001 fa70 	bl	80024c4 <HAL_GPIO_WritePin>


        	bldc_motor_set_pwm(0, bldc.speed_pulse, 0);
 8000fe4:	4b5a      	ldr	r3, [pc, #360]	; (8001150 <bldc_motor_six_step_algorithm+0x298>)
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	2200      	movs	r2, #0
 8000fec:	4619      	mov	r1, r3
 8000fee:	2000      	movs	r0, #0
 8000ff0:	f7ff ff18 	bl	8000e24 <bldc_motor_set_pwm>
////			bldc_motor_PWM_Config_Channel(bldc.speed_pulse, TIM_CHANNEL_4);
//			bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_INACTIVE, TIM_CHANNEL_4);
//			bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_ACTIVE, TIM_CHANNEL_3);


            break;
 8000ff4:	e086      	b.n	8001104 <bldc_motor_six_step_algorithm+0x24c>
        case 4:
        	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, RESET);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ffc:	4855      	ldr	r0, [pc, #340]	; (8001154 <bldc_motor_six_step_algorithm+0x29c>)
 8000ffe:	f001 fa61 	bl	80024c4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, SET);
 8001002:	2201      	movs	r2, #1
 8001004:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001008:	4852      	ldr	r0, [pc, #328]	; (8001154 <bldc_motor_six_step_algorithm+0x29c>)
 800100a:	f001 fa5b 	bl	80024c4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, SET);
 800100e:	2201      	movs	r2, #1
 8001010:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001014:	484f      	ldr	r0, [pc, #316]	; (8001154 <bldc_motor_six_step_algorithm+0x29c>)
 8001016:	f001 fa55 	bl	80024c4 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(PWM1EN_GPIO_Port, PWM1EN_Pin, GPIO_PIN_SET);
 800101a:	2201      	movs	r2, #1
 800101c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001020:	484d      	ldr	r0, [pc, #308]	; (8001158 <bldc_motor_six_step_algorithm+0x2a0>)
 8001022:	f001 fa4f 	bl	80024c4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PWM2EN_GPIO_Port, PWM2EN_Pin, GPIO_PIN_SET);
 8001026:	2201      	movs	r2, #1
 8001028:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800102c:	484a      	ldr	r0, [pc, #296]	; (8001158 <bldc_motor_six_step_algorithm+0x2a0>)
 800102e:	f001 fa49 	bl	80024c4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PWM3EN_GPIO_Port, PWM3EN_Pin, GPIO_PIN_RESET);
 8001032:	2200      	movs	r2, #0
 8001034:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001038:	4847      	ldr	r0, [pc, #284]	; (8001158 <bldc_motor_six_step_algorithm+0x2a0>)
 800103a:	f001 fa43 	bl	80024c4 <HAL_GPIO_WritePin>

//        	bldc_motor_set_pwm(0, bldc.speed_pulse, bldc.speed_pulse);
        	bldc_motor_set_pwm(0, bldc.speed_pulse, 0);
 800103e:	4b44      	ldr	r3, [pc, #272]	; (8001150 <bldc_motor_six_step_algorithm+0x298>)
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	b29b      	uxth	r3, r3
 8001044:	2200      	movs	r2, #0
 8001046:	4619      	mov	r1, r3
 8001048:	2000      	movs	r0, #0
 800104a:	f7ff feeb 	bl	8000e24 <bldc_motor_set_pwm>

//			bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_INACTIVE, TIM_CHANNEL_1);
//			bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_INACTIVE, TIM_CHANNEL_4);
//			bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_ACTIVE, TIM_CHANNEL_3);

            break;
 800104e:	e059      	b.n	8001104 <bldc_motor_six_step_algorithm+0x24c>
        case 5:
        	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, RESET);
 8001050:	2200      	movs	r2, #0
 8001052:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001056:	483f      	ldr	r0, [pc, #252]	; (8001154 <bldc_motor_six_step_algorithm+0x29c>)
 8001058:	f001 fa34 	bl	80024c4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, SET);
 800105c:	2201      	movs	r2, #1
 800105e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001062:	483c      	ldr	r0, [pc, #240]	; (8001154 <bldc_motor_six_step_algorithm+0x29c>)
 8001064:	f001 fa2e 	bl	80024c4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, SET);
 8001068:	2201      	movs	r2, #1
 800106a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800106e:	4839      	ldr	r0, [pc, #228]	; (8001154 <bldc_motor_six_step_algorithm+0x29c>)
 8001070:	f001 fa28 	bl	80024c4 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(PWM1EN_GPIO_Port, PWM1EN_Pin, GPIO_PIN_SET);
 8001074:	2201      	movs	r2, #1
 8001076:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800107a:	4837      	ldr	r0, [pc, #220]	; (8001158 <bldc_motor_six_step_algorithm+0x2a0>)
 800107c:	f001 fa22 	bl	80024c4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PWM2EN_GPIO_Port, PWM2EN_Pin, GPIO_PIN_RESET);
 8001080:	2200      	movs	r2, #0
 8001082:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001086:	4834      	ldr	r0, [pc, #208]	; (8001158 <bldc_motor_six_step_algorithm+0x2a0>)
 8001088:	f001 fa1c 	bl	80024c4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PWM3EN_GPIO_Port, PWM3EN_Pin, GPIO_PIN_SET);
 800108c:	2201      	movs	r2, #1
 800108e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001092:	4831      	ldr	r0, [pc, #196]	; (8001158 <bldc_motor_six_step_algorithm+0x2a0>)
 8001094:	f001 fa16 	bl	80024c4 <HAL_GPIO_WritePin>


//        	bldc_motor_set_pwm(0, bldc.speed_pulse, bldc.speed_pulse);
        	bldc_motor_set_pwm(0, 0, bldc.speed_pulse);
 8001098:	4b2d      	ldr	r3, [pc, #180]	; (8001150 <bldc_motor_six_step_algorithm+0x298>)
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	b29b      	uxth	r3, r3
 800109e:	461a      	mov	r2, r3
 80010a0:	2100      	movs	r1, #0
 80010a2:	2000      	movs	r0, #0
 80010a4:	f7ff febe 	bl	8000e24 <bldc_motor_set_pwm>
//			bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_INACTIVE, TIM_CHANNEL_1);
//			bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_ACTIVE, TIM_CHANNEL_4);
//			bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_ACTIVE, TIM_CHANNEL_3);


            break;
 80010a8:	e02c      	b.n	8001104 <bldc_motor_six_step_algorithm+0x24c>
        case 6:
        	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, RESET);
 80010aa:	2200      	movs	r2, #0
 80010ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010b0:	4828      	ldr	r0, [pc, #160]	; (8001154 <bldc_motor_six_step_algorithm+0x29c>)
 80010b2:	f001 fa07 	bl	80024c4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, RESET);
 80010b6:	2200      	movs	r2, #0
 80010b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010bc:	4825      	ldr	r0, [pc, #148]	; (8001154 <bldc_motor_six_step_algorithm+0x29c>)
 80010be:	f001 fa01 	bl	80024c4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, SET);
 80010c2:	2201      	movs	r2, #1
 80010c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010c8:	4822      	ldr	r0, [pc, #136]	; (8001154 <bldc_motor_six_step_algorithm+0x29c>)
 80010ca:	f001 f9fb 	bl	80024c4 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(PWM1EN_GPIO_Port, PWM1EN_Pin, GPIO_PIN_RESET);
 80010ce:	2200      	movs	r2, #0
 80010d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010d4:	4820      	ldr	r0, [pc, #128]	; (8001158 <bldc_motor_six_step_algorithm+0x2a0>)
 80010d6:	f001 f9f5 	bl	80024c4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PWM2EN_GPIO_Port, PWM2EN_Pin, GPIO_PIN_SET);
 80010da:	2201      	movs	r2, #1
 80010dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010e0:	481d      	ldr	r0, [pc, #116]	; (8001158 <bldc_motor_six_step_algorithm+0x2a0>)
 80010e2:	f001 f9ef 	bl	80024c4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PWM3EN_GPIO_Port, PWM3EN_Pin, GPIO_PIN_SET);
 80010e6:	2201      	movs	r2, #1
 80010e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010ec:	481a      	ldr	r0, [pc, #104]	; (8001158 <bldc_motor_six_step_algorithm+0x2a0>)
 80010ee:	f001 f9e9 	bl	80024c4 <HAL_GPIO_WritePin>

        	bldc_motor_set_pwm(0, 0, bldc.speed_pulse);
 80010f2:	4b17      	ldr	r3, [pc, #92]	; (8001150 <bldc_motor_six_step_algorithm+0x298>)
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	461a      	mov	r2, r3
 80010fa:	2100      	movs	r1, #0
 80010fc:	2000      	movs	r0, #0
 80010fe:	f7ff fe91 	bl	8000e24 <bldc_motor_set_pwm>

//			bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_INACTIVE, TIM_CHANNEL_1);
//			bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_ACTIVE, TIM_CHANNEL_4);
//			bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_INACTIVE, TIM_CHANNEL_3);
            break;
 8001102:	bf00      	nop
    }

    if (bldc.dir == 1)  // CW direction
 8001104:	4b12      	ldr	r3, [pc, #72]	; (8001150 <bldc_motor_six_step_algorithm+0x298>)
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	2b01      	cmp	r3, #1
 800110a:	d10d      	bne.n	8001128 <bldc_motor_six_step_algorithm+0x270>
    {
        bldc.step_number++;
 800110c:	4b10      	ldr	r3, [pc, #64]	; (8001150 <bldc_motor_six_step_algorithm+0x298>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	3301      	adds	r3, #1
 8001112:	b2da      	uxtb	r2, r3
 8001114:	4b0e      	ldr	r3, [pc, #56]	; (8001150 <bldc_motor_six_step_algorithm+0x298>)
 8001116:	701a      	strb	r2, [r3, #0]
        if (bldc.step_number > 6)
 8001118:	4b0d      	ldr	r3, [pc, #52]	; (8001150 <bldc_motor_six_step_algorithm+0x298>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	2b06      	cmp	r3, #6
 800111e:	d914      	bls.n	800114a <bldc_motor_six_step_algorithm+0x292>
            bldc.step_number = 1;
 8001120:	4b0b      	ldr	r3, [pc, #44]	; (8001150 <bldc_motor_six_step_algorithm+0x298>)
 8001122:	2201      	movs	r2, #1
 8001124:	701a      	strb	r2, [r3, #0]
    {
        bldc.step_number--;
        if (bldc.step_number < 1)
            bldc.step_number = 6;
    }
}
 8001126:	e010      	b.n	800114a <bldc_motor_six_step_algorithm+0x292>
    else if (bldc.dir == 0)  // CCW direction
 8001128:	4b09      	ldr	r3, [pc, #36]	; (8001150 <bldc_motor_six_step_algorithm+0x298>)
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d10c      	bne.n	800114a <bldc_motor_six_step_algorithm+0x292>
        bldc.step_number--;
 8001130:	4b07      	ldr	r3, [pc, #28]	; (8001150 <bldc_motor_six_step_algorithm+0x298>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	3b01      	subs	r3, #1
 8001136:	b2da      	uxtb	r2, r3
 8001138:	4b05      	ldr	r3, [pc, #20]	; (8001150 <bldc_motor_six_step_algorithm+0x298>)
 800113a:	701a      	strb	r2, [r3, #0]
        if (bldc.step_number < 1)
 800113c:	4b04      	ldr	r3, [pc, #16]	; (8001150 <bldc_motor_six_step_algorithm+0x298>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d102      	bne.n	800114a <bldc_motor_six_step_algorithm+0x292>
            bldc.step_number = 6;
 8001144:	4b02      	ldr	r3, [pc, #8]	; (8001150 <bldc_motor_six_step_algorithm+0x298>)
 8001146:	2206      	movs	r2, #6
 8001148:	701a      	strb	r2, [r3, #0]
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	200001f4 	.word	0x200001f4
 8001154:	40020c00 	.word	0x40020c00
 8001158:	40020400 	.word	0x40020400

0800115c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	607b      	str	r3, [r7, #4]
 8001166:	4b10      	ldr	r3, [pc, #64]	; (80011a8 <HAL_MspInit+0x4c>)
 8001168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116a:	4a0f      	ldr	r2, [pc, #60]	; (80011a8 <HAL_MspInit+0x4c>)
 800116c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001170:	6453      	str	r3, [r2, #68]	; 0x44
 8001172:	4b0d      	ldr	r3, [pc, #52]	; (80011a8 <HAL_MspInit+0x4c>)
 8001174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001176:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	603b      	str	r3, [r7, #0]
 8001182:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <HAL_MspInit+0x4c>)
 8001184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001186:	4a08      	ldr	r2, [pc, #32]	; (80011a8 <HAL_MspInit+0x4c>)
 8001188:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800118c:	6413      	str	r3, [r2, #64]	; 0x40
 800118e:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <HAL_MspInit+0x4c>)
 8001190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001196:	603b      	str	r3, [r7, #0]
 8001198:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800119a:	bf00      	nop
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	40023800 	.word	0x40023800

080011ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08a      	sub	sp, #40	; 0x28
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b4:	f107 0314 	add.w	r3, r7, #20
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a17      	ldr	r2, [pc, #92]	; (8001228 <HAL_ADC_MspInit+0x7c>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d127      	bne.n	800121e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	613b      	str	r3, [r7, #16]
 80011d2:	4b16      	ldr	r3, [pc, #88]	; (800122c <HAL_ADC_MspInit+0x80>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d6:	4a15      	ldr	r2, [pc, #84]	; (800122c <HAL_ADC_MspInit+0x80>)
 80011d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011dc:	6453      	str	r3, [r2, #68]	; 0x44
 80011de:	4b13      	ldr	r3, [pc, #76]	; (800122c <HAL_ADC_MspInit+0x80>)
 80011e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011e6:	613b      	str	r3, [r7, #16]
 80011e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	4b0f      	ldr	r3, [pc, #60]	; (800122c <HAL_ADC_MspInit+0x80>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	4a0e      	ldr	r2, [pc, #56]	; (800122c <HAL_ADC_MspInit+0x80>)
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	6313      	str	r3, [r2, #48]	; 0x30
 80011fa:	4b0c      	ldr	r3, [pc, #48]	; (800122c <HAL_ADC_MspInit+0x80>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001206:	2340      	movs	r3, #64	; 0x40
 8001208:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800120a:	2303      	movs	r3, #3
 800120c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001212:	f107 0314 	add.w	r3, r7, #20
 8001216:	4619      	mov	r1, r3
 8001218:	4805      	ldr	r0, [pc, #20]	; (8001230 <HAL_ADC_MspInit+0x84>)
 800121a:	f000 ffb7 	bl	800218c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800121e:	bf00      	nop
 8001220:	3728      	adds	r7, #40	; 0x28
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40012000 	.word	0x40012000
 800122c:	40023800 	.word	0x40023800
 8001230:	40020000 	.word	0x40020000

08001234 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a0e      	ldr	r2, [pc, #56]	; (800127c <HAL_TIM_PWM_MspInit+0x48>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d115      	bne.n	8001272 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	4b0d      	ldr	r3, [pc, #52]	; (8001280 <HAL_TIM_PWM_MspInit+0x4c>)
 800124c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124e:	4a0c      	ldr	r2, [pc, #48]	; (8001280 <HAL_TIM_PWM_MspInit+0x4c>)
 8001250:	f043 0301 	orr.w	r3, r3, #1
 8001254:	6453      	str	r3, [r2, #68]	; 0x44
 8001256:	4b0a      	ldr	r3, [pc, #40]	; (8001280 <HAL_TIM_PWM_MspInit+0x4c>)
 8001258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001262:	2200      	movs	r2, #0
 8001264:	2100      	movs	r1, #0
 8001266:	201a      	movs	r0, #26
 8001268:	f000 ff59 	bl	800211e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800126c:	201a      	movs	r0, #26
 800126e:	f000 ff72 	bl	8002156 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001272:	bf00      	nop
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40010000 	.word	0x40010000
 8001280:	40023800 	.word	0x40023800

08001284 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001294:	d10d      	bne.n	80012b2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <HAL_TIM_Base_MspInit+0x3c>)
 800129c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129e:	4a08      	ldr	r2, [pc, #32]	; (80012c0 <HAL_TIM_Base_MspInit+0x3c>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	6413      	str	r3, [r2, #64]	; 0x40
 80012a6:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <HAL_TIM_Base_MspInit+0x3c>)
 80012a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80012b2:	bf00      	nop
 80012b4:	3714      	adds	r7, #20
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	40023800 	.word	0x40023800

080012c4 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a0b      	ldr	r2, [pc, #44]	; (8001300 <HAL_TIM_OC_MspInit+0x3c>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d10d      	bne.n	80012f2 <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	60fb      	str	r3, [r7, #12]
 80012da:	4b0a      	ldr	r3, [pc, #40]	; (8001304 <HAL_TIM_OC_MspInit+0x40>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	4a09      	ldr	r2, [pc, #36]	; (8001304 <HAL_TIM_OC_MspInit+0x40>)
 80012e0:	f043 0302 	orr.w	r3, r3, #2
 80012e4:	6413      	str	r3, [r2, #64]	; 0x40
 80012e6:	4b07      	ldr	r3, [pc, #28]	; (8001304 <HAL_TIM_OC_MspInit+0x40>)
 80012e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80012f2:	bf00      	nop
 80012f4:	3714      	adds	r7, #20
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	40000400 	.word	0x40000400
 8001304:	40023800 	.word	0x40023800

08001308 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08a      	sub	sp, #40	; 0x28
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a34      	ldr	r2, [pc, #208]	; (80013f8 <HAL_TIM_MspPostInit+0xf0>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d13e      	bne.n	80013a8 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	613b      	str	r3, [r7, #16]
 800132e:	4b33      	ldr	r3, [pc, #204]	; (80013fc <HAL_TIM_MspPostInit+0xf4>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	4a32      	ldr	r2, [pc, #200]	; (80013fc <HAL_TIM_MspPostInit+0xf4>)
 8001334:	f043 0310 	orr.w	r3, r3, #16
 8001338:	6313      	str	r3, [r2, #48]	; 0x30
 800133a:	4b30      	ldr	r3, [pc, #192]	; (80013fc <HAL_TIM_MspPostInit+0xf4>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	f003 0310 	and.w	r3, r3, #16
 8001342:	613b      	str	r3, [r7, #16]
 8001344:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	4b2c      	ldr	r3, [pc, #176]	; (80013fc <HAL_TIM_MspPostInit+0xf4>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	4a2b      	ldr	r2, [pc, #172]	; (80013fc <HAL_TIM_MspPostInit+0xf4>)
 8001350:	f043 0301 	orr.w	r3, r3, #1
 8001354:	6313      	str	r3, [r2, #48]	; 0x30
 8001356:	4b29      	ldr	r3, [pc, #164]	; (80013fc <HAL_TIM_MspPostInit+0xf4>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001362:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001366:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001368:	2302      	movs	r3, #2
 800136a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001370:	2300      	movs	r3, #0
 8001372:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001374:	2301      	movs	r3, #1
 8001376:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001378:	f107 0314 	add.w	r3, r7, #20
 800137c:	4619      	mov	r1, r3
 800137e:	4820      	ldr	r0, [pc, #128]	; (8001400 <HAL_TIM_MspPostInit+0xf8>)
 8001380:	f000 ff04 	bl	800218c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8001384:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001388:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138a:	2302      	movs	r3, #2
 800138c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001392:	2300      	movs	r3, #0
 8001394:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001396:	2301      	movs	r3, #1
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139a:	f107 0314 	add.w	r3, r7, #20
 800139e:	4619      	mov	r1, r3
 80013a0:	4818      	ldr	r0, [pc, #96]	; (8001404 <HAL_TIM_MspPostInit+0xfc>)
 80013a2:	f000 fef3 	bl	800218c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80013a6:	e022      	b.n	80013ee <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM2)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013b0:	d11d      	bne.n	80013ee <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	60bb      	str	r3, [r7, #8]
 80013b6:	4b11      	ldr	r3, [pc, #68]	; (80013fc <HAL_TIM_MspPostInit+0xf4>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	4a10      	ldr	r2, [pc, #64]	; (80013fc <HAL_TIM_MspPostInit+0xf4>)
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	6313      	str	r3, [r2, #48]	; 0x30
 80013c2:	4b0e      	ldr	r3, [pc, #56]	; (80013fc <HAL_TIM_MspPostInit+0xf4>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	60bb      	str	r3, [r7, #8]
 80013cc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_5;
 80013ce:	2326      	movs	r3, #38	; 0x26
 80013d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d2:	2302      	movs	r3, #2
 80013d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013da:	2300      	movs	r3, #0
 80013dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80013de:	2301      	movs	r3, #1
 80013e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e2:	f107 0314 	add.w	r3, r7, #20
 80013e6:	4619      	mov	r1, r3
 80013e8:	4806      	ldr	r0, [pc, #24]	; (8001404 <HAL_TIM_MspPostInit+0xfc>)
 80013ea:	f000 fecf 	bl	800218c <HAL_GPIO_Init>
}
 80013ee:	bf00      	nop
 80013f0:	3728      	adds	r7, #40	; 0x28
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40010000 	.word	0x40010000
 80013fc:	40023800 	.word	0x40023800
 8001400:	40021000 	.word	0x40021000
 8001404:	40020000 	.word	0x40020000

08001408 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08a      	sub	sp, #40	; 0x28
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
 800141e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a19      	ldr	r2, [pc, #100]	; (800148c <HAL_UART_MspInit+0x84>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d12b      	bne.n	8001482 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	613b      	str	r3, [r7, #16]
 800142e:	4b18      	ldr	r3, [pc, #96]	; (8001490 <HAL_UART_MspInit+0x88>)
 8001430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001432:	4a17      	ldr	r2, [pc, #92]	; (8001490 <HAL_UART_MspInit+0x88>)
 8001434:	f043 0320 	orr.w	r3, r3, #32
 8001438:	6453      	str	r3, [r2, #68]	; 0x44
 800143a:	4b15      	ldr	r3, [pc, #84]	; (8001490 <HAL_UART_MspInit+0x88>)
 800143c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143e:	f003 0320 	and.w	r3, r3, #32
 8001442:	613b      	str	r3, [r7, #16]
 8001444:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	4b11      	ldr	r3, [pc, #68]	; (8001490 <HAL_UART_MspInit+0x88>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	4a10      	ldr	r2, [pc, #64]	; (8001490 <HAL_UART_MspInit+0x88>)
 8001450:	f043 0304 	orr.w	r3, r3, #4
 8001454:	6313      	str	r3, [r2, #48]	; 0x30
 8001456:	4b0e      	ldr	r3, [pc, #56]	; (8001490 <HAL_UART_MspInit+0x88>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	f003 0304 	and.w	r3, r3, #4
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001462:	23c0      	movs	r3, #192	; 0xc0
 8001464:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001466:	2302      	movs	r3, #2
 8001468:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800146e:	2303      	movs	r3, #3
 8001470:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001472:	2308      	movs	r3, #8
 8001474:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001476:	f107 0314 	add.w	r3, r7, #20
 800147a:	4619      	mov	r1, r3
 800147c:	4805      	ldr	r0, [pc, #20]	; (8001494 <HAL_UART_MspInit+0x8c>)
 800147e:	f000 fe85 	bl	800218c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001482:	bf00      	nop
 8001484:	3728      	adds	r7, #40	; 0x28
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40011400 	.word	0x40011400
 8001490:	40023800 	.word	0x40023800
 8001494:	40020800 	.word	0x40020800

08001498 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800149c:	e7fe      	b.n	800149c <NMI_Handler+0x4>

0800149e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014a2:	e7fe      	b.n	80014a2 <HardFault_Handler+0x4>

080014a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014a8:	e7fe      	b.n	80014a8 <MemManage_Handler+0x4>

080014aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ae:	e7fe      	b.n	80014ae <BusFault_Handler+0x4>

080014b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014b4:	e7fe      	b.n	80014b4 <UsageFault_Handler+0x4>

080014b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014b6:	b480      	push	{r7}
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014c8:	bf00      	nop
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr

080014d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014d2:	b480      	push	{r7}
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014e4:	f000 f93e 	bl	8001764 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014e8:	bf00      	nop
 80014ea:	bd80      	pop	{r7, pc}

080014ec <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80014f0:	4802      	ldr	r0, [pc, #8]	; (80014fc <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80014f2:	f001 fe6b 	bl	80031cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	200000d4 	.word	0x200000d4

08001500 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800150c:	2300      	movs	r3, #0
 800150e:	617b      	str	r3, [r7, #20]
 8001510:	e00a      	b.n	8001528 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001512:	f3af 8000 	nop.w
 8001516:	4601      	mov	r1, r0
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	1c5a      	adds	r2, r3, #1
 800151c:	60ba      	str	r2, [r7, #8]
 800151e:	b2ca      	uxtb	r2, r1
 8001520:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	3301      	adds	r3, #1
 8001526:	617b      	str	r3, [r7, #20]
 8001528:	697a      	ldr	r2, [r7, #20]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	429a      	cmp	r2, r3
 800152e:	dbf0      	blt.n	8001512 <_read+0x12>
  }

  return len;
 8001530:	687b      	ldr	r3, [r7, #4]
}
 8001532:	4618      	mov	r0, r3
 8001534:	3718      	adds	r7, #24
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b086      	sub	sp, #24
 800153e:	af00      	add	r7, sp, #0
 8001540:	60f8      	str	r0, [r7, #12]
 8001542:	60b9      	str	r1, [r7, #8]
 8001544:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001546:	2300      	movs	r3, #0
 8001548:	617b      	str	r3, [r7, #20]
 800154a:	e009      	b.n	8001560 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	1c5a      	adds	r2, r3, #1
 8001550:	60ba      	str	r2, [r7, #8]
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff fbbb 	bl	8000cd0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	3301      	adds	r3, #1
 800155e:	617b      	str	r3, [r7, #20]
 8001560:	697a      	ldr	r2, [r7, #20]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	429a      	cmp	r2, r3
 8001566:	dbf1      	blt.n	800154c <_write+0x12>
  }
  return len;
 8001568:	687b      	ldr	r3, [r7, #4]
}
 800156a:	4618      	mov	r0, r3
 800156c:	3718      	adds	r7, #24
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <_close>:

int _close(int file)
{
 8001572:	b480      	push	{r7}
 8001574:	b083      	sub	sp, #12
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800157a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800157e:	4618      	mov	r0, r3
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr

0800158a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800158a:	b480      	push	{r7}
 800158c:	b083      	sub	sp, #12
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
 8001592:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800159a:	605a      	str	r2, [r3, #4]
  return 0;
 800159c:	2300      	movs	r3, #0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr

080015aa <_isatty>:

int _isatty(int file)
{
 80015aa:	b480      	push	{r7}
 80015ac:	b083      	sub	sp, #12
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015b2:	2301      	movs	r3, #1
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3714      	adds	r7, #20
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
	...

080015dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015e4:	4a14      	ldr	r2, [pc, #80]	; (8001638 <_sbrk+0x5c>)
 80015e6:	4b15      	ldr	r3, [pc, #84]	; (800163c <_sbrk+0x60>)
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015f0:	4b13      	ldr	r3, [pc, #76]	; (8001640 <_sbrk+0x64>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d102      	bne.n	80015fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015f8:	4b11      	ldr	r3, [pc, #68]	; (8001640 <_sbrk+0x64>)
 80015fa:	4a12      	ldr	r2, [pc, #72]	; (8001644 <_sbrk+0x68>)
 80015fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015fe:	4b10      	ldr	r3, [pc, #64]	; (8001640 <_sbrk+0x64>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4413      	add	r3, r2
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	429a      	cmp	r2, r3
 800160a:	d207      	bcs.n	800161c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800160c:	f003 f8b6 	bl	800477c <__errno>
 8001610:	4603      	mov	r3, r0
 8001612:	220c      	movs	r2, #12
 8001614:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001616:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800161a:	e009      	b.n	8001630 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800161c:	4b08      	ldr	r3, [pc, #32]	; (8001640 <_sbrk+0x64>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001622:	4b07      	ldr	r3, [pc, #28]	; (8001640 <_sbrk+0x64>)
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4413      	add	r3, r2
 800162a:	4a05      	ldr	r2, [pc, #20]	; (8001640 <_sbrk+0x64>)
 800162c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800162e:	68fb      	ldr	r3, [r7, #12]
}
 8001630:	4618      	mov	r0, r3
 8001632:	3718      	adds	r7, #24
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	20020000 	.word	0x20020000
 800163c:	00000400 	.word	0x00000400
 8001640:	20000228 	.word	0x20000228
 8001644:	20000240 	.word	0x20000240

08001648 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800164c:	4b06      	ldr	r3, [pc, #24]	; (8001668 <SystemInit+0x20>)
 800164e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001652:	4a05      	ldr	r2, [pc, #20]	; (8001668 <SystemInit+0x20>)
 8001654:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001658:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	e000ed00 	.word	0xe000ed00

0800166c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800166c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001670:	480d      	ldr	r0, [pc, #52]	; (80016a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001672:	490e      	ldr	r1, [pc, #56]	; (80016ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001674:	4a0e      	ldr	r2, [pc, #56]	; (80016b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001676:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001678:	e002      	b.n	8001680 <LoopCopyDataInit>

0800167a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800167a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800167c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800167e:	3304      	adds	r3, #4

08001680 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001680:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001682:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001684:	d3f9      	bcc.n	800167a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001686:	4a0b      	ldr	r2, [pc, #44]	; (80016b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001688:	4c0b      	ldr	r4, [pc, #44]	; (80016b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800168a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800168c:	e001      	b.n	8001692 <LoopFillZerobss>

0800168e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800168e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001690:	3204      	adds	r2, #4

08001692 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001692:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001694:	d3fb      	bcc.n	800168e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001696:	f7ff ffd7 	bl	8001648 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800169a:	f003 f875 	bl	8004788 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800169e:	f7fe ff71 	bl	8000584 <main>
  bx  lr    
 80016a2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80016a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016ac:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80016b0:	0800592c 	.word	0x0800592c
  ldr r2, =_sbss
 80016b4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80016b8:	20000240 	.word	0x20000240

080016bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016bc:	e7fe      	b.n	80016bc <ADC_IRQHandler>
	...

080016c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016c4:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <HAL_Init+0x40>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a0d      	ldr	r2, [pc, #52]	; (8001700 <HAL_Init+0x40>)
 80016ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016d0:	4b0b      	ldr	r3, [pc, #44]	; (8001700 <HAL_Init+0x40>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a0a      	ldr	r2, [pc, #40]	; (8001700 <HAL_Init+0x40>)
 80016d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016dc:	4b08      	ldr	r3, [pc, #32]	; (8001700 <HAL_Init+0x40>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a07      	ldr	r2, [pc, #28]	; (8001700 <HAL_Init+0x40>)
 80016e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016e8:	2003      	movs	r0, #3
 80016ea:	f000 fd0d 	bl	8002108 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ee:	200f      	movs	r0, #15
 80016f0:	f000 f808 	bl	8001704 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016f4:	f7ff fd32 	bl	800115c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40023c00 	.word	0x40023c00

08001704 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800170c:	4b12      	ldr	r3, [pc, #72]	; (8001758 <HAL_InitTick+0x54>)
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	4b12      	ldr	r3, [pc, #72]	; (800175c <HAL_InitTick+0x58>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	4619      	mov	r1, r3
 8001716:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800171a:	fbb3 f3f1 	udiv	r3, r3, r1
 800171e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001722:	4618      	mov	r0, r3
 8001724:	f000 fd25 	bl	8002172 <HAL_SYSTICK_Config>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e00e      	b.n	8001750 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2b0f      	cmp	r3, #15
 8001736:	d80a      	bhi.n	800174e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001738:	2200      	movs	r2, #0
 800173a:	6879      	ldr	r1, [r7, #4]
 800173c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001740:	f000 fced 	bl	800211e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001744:	4a06      	ldr	r2, [pc, #24]	; (8001760 <HAL_InitTick+0x5c>)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800174a:	2300      	movs	r3, #0
 800174c:	e000      	b.n	8001750 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
}
 8001750:	4618      	mov	r0, r3
 8001752:	3708      	adds	r7, #8
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	20000000 	.word	0x20000000
 800175c:	20000008 	.word	0x20000008
 8001760:	20000004 	.word	0x20000004

08001764 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001768:	4b06      	ldr	r3, [pc, #24]	; (8001784 <HAL_IncTick+0x20>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	461a      	mov	r2, r3
 800176e:	4b06      	ldr	r3, [pc, #24]	; (8001788 <HAL_IncTick+0x24>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4413      	add	r3, r2
 8001774:	4a04      	ldr	r2, [pc, #16]	; (8001788 <HAL_IncTick+0x24>)
 8001776:	6013      	str	r3, [r2, #0]
}
 8001778:	bf00      	nop
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	20000008 	.word	0x20000008
 8001788:	2000022c 	.word	0x2000022c

0800178c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  return uwTick;
 8001790:	4b03      	ldr	r3, [pc, #12]	; (80017a0 <HAL_GetTick+0x14>)
 8001792:	681b      	ldr	r3, [r3, #0]
}
 8001794:	4618      	mov	r0, r3
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	2000022c 	.word	0x2000022c

080017a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017ac:	f7ff ffee 	bl	800178c <HAL_GetTick>
 80017b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017bc:	d005      	beq.n	80017ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017be:	4b0a      	ldr	r3, [pc, #40]	; (80017e8 <HAL_Delay+0x44>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	461a      	mov	r2, r3
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	4413      	add	r3, r2
 80017c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017ca:	bf00      	nop
 80017cc:	f7ff ffde 	bl	800178c <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	68fa      	ldr	r2, [r7, #12]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d8f7      	bhi.n	80017cc <HAL_Delay+0x28>
  {
  }
}
 80017dc:	bf00      	nop
 80017de:	bf00      	nop
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	20000008 	.word	0x20000008

080017ec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017f4:	2300      	movs	r3, #0
 80017f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d101      	bne.n	8001802 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e033      	b.n	800186a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001806:	2b00      	cmp	r3, #0
 8001808:	d109      	bne.n	800181e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f7ff fcce 	bl	80011ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2200      	movs	r2, #0
 8001814:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001822:	f003 0310 	and.w	r3, r3, #16
 8001826:	2b00      	cmp	r3, #0
 8001828:	d118      	bne.n	800185c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001832:	f023 0302 	bic.w	r3, r3, #2
 8001836:	f043 0202 	orr.w	r2, r3, #2
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f000 fa96 	bl	8001d70 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2200      	movs	r2, #0
 8001848:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184e:	f023 0303 	bic.w	r3, r3, #3
 8001852:	f043 0201 	orr.w	r2, r3, #1
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	641a      	str	r2, [r3, #64]	; 0x40
 800185a:	e001      	b.n	8001860 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2200      	movs	r2, #0
 8001864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001868:	7bfb      	ldrb	r3, [r7, #15]
}
 800186a:	4618      	mov	r0, r3
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
	...

08001874 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800187c:	2300      	movs	r3, #0
 800187e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001886:	2b01      	cmp	r3, #1
 8001888:	d101      	bne.n	800188e <HAL_ADC_Start+0x1a>
 800188a:	2302      	movs	r3, #2
 800188c:	e097      	b.n	80019be <HAL_ADC_Start+0x14a>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2201      	movs	r2, #1
 8001892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	f003 0301 	and.w	r3, r3, #1
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d018      	beq.n	80018d6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	689a      	ldr	r2, [r3, #8]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f042 0201 	orr.w	r2, r2, #1
 80018b2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80018b4:	4b45      	ldr	r3, [pc, #276]	; (80019cc <HAL_ADC_Start+0x158>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a45      	ldr	r2, [pc, #276]	; (80019d0 <HAL_ADC_Start+0x15c>)
 80018ba:	fba2 2303 	umull	r2, r3, r2, r3
 80018be:	0c9a      	lsrs	r2, r3, #18
 80018c0:	4613      	mov	r3, r2
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	4413      	add	r3, r2
 80018c6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80018c8:	e002      	b.n	80018d0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	3b01      	subs	r3, #1
 80018ce:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d1f9      	bne.n	80018ca <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f003 0301 	and.w	r3, r3, #1
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d15f      	bne.n	80019a4 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80018ec:	f023 0301 	bic.w	r3, r3, #1
 80018f0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001902:	2b00      	cmp	r3, #0
 8001904:	d007      	beq.n	8001916 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800190e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800191e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001922:	d106      	bne.n	8001932 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001928:	f023 0206 	bic.w	r2, r3, #6
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	645a      	str	r2, [r3, #68]	; 0x44
 8001930:	e002      	b.n	8001938 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001940:	4b24      	ldr	r3, [pc, #144]	; (80019d4 <HAL_ADC_Start+0x160>)
 8001942:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800194c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f003 031f 	and.w	r3, r3, #31
 8001956:	2b00      	cmp	r3, #0
 8001958:	d10f      	bne.n	800197a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d129      	bne.n	80019bc <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	689a      	ldr	r2, [r3, #8]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001976:	609a      	str	r2, [r3, #8]
 8001978:	e020      	b.n	80019bc <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a16      	ldr	r2, [pc, #88]	; (80019d8 <HAL_ADC_Start+0x164>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d11b      	bne.n	80019bc <HAL_ADC_Start+0x148>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d114      	bne.n	80019bc <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	689a      	ldr	r2, [r3, #8]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80019a0:	609a      	str	r2, [r3, #8]
 80019a2:	e00b      	b.n	80019bc <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a8:	f043 0210 	orr.w	r2, r3, #16
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b4:	f043 0201 	orr.w	r2, r3, #1
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3714      	adds	r7, #20
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	20000000 	.word	0x20000000
 80019d0:	431bde83 	.word	0x431bde83
 80019d4:	40012300 	.word	0x40012300
 80019d8:	40012000 	.word	0x40012000

080019dc <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80019e6:	2300      	movs	r3, #0
 80019e8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019f8:	d113      	bne.n	8001a22 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001a04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a08:	d10b      	bne.n	8001a22 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0e:	f043 0220 	orr.w	r2, r3, #32
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e063      	b.n	8001aea <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001a22:	f7ff feb3 	bl	800178c <HAL_GetTick>
 8001a26:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a28:	e021      	b.n	8001a6e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a30:	d01d      	beq.n	8001a6e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d007      	beq.n	8001a48 <HAL_ADC_PollForConversion+0x6c>
 8001a38:	f7ff fea8 	bl	800178c <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	683a      	ldr	r2, [r7, #0]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d212      	bcs.n	8001a6e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d00b      	beq.n	8001a6e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5a:	f043 0204 	orr.w	r2, r3, #4
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e03d      	b.n	8001aea <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0302 	and.w	r3, r3, #2
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d1d6      	bne.n	8001a2a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f06f 0212 	mvn.w	r2, #18
 8001a84:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d123      	bne.n	8001ae8 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d11f      	bne.n	8001ae8 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aae:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d006      	beq.n	8001ac4 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d111      	bne.n	8001ae8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d105      	bne.n	8001ae8 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae0:	f043 0201 	orr.w	r2, r3, #1
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001af2:	b480      	push	{r7}
 8001af4:	b083      	sub	sp, #12
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b16:	2300      	movs	r3, #0
 8001b18:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d101      	bne.n	8001b28 <HAL_ADC_ConfigChannel+0x1c>
 8001b24:	2302      	movs	r3, #2
 8001b26:	e113      	b.n	8001d50 <HAL_ADC_ConfigChannel+0x244>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2b09      	cmp	r3, #9
 8001b36:	d925      	bls.n	8001b84 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	68d9      	ldr	r1, [r3, #12]
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	461a      	mov	r2, r3
 8001b46:	4613      	mov	r3, r2
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	4413      	add	r3, r2
 8001b4c:	3b1e      	subs	r3, #30
 8001b4e:	2207      	movs	r2, #7
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	43da      	mvns	r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	400a      	ands	r2, r1
 8001b5c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	68d9      	ldr	r1, [r3, #12]
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	4618      	mov	r0, r3
 8001b70:	4603      	mov	r3, r0
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	4403      	add	r3, r0
 8001b76:	3b1e      	subs	r3, #30
 8001b78:	409a      	lsls	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	60da      	str	r2, [r3, #12]
 8001b82:	e022      	b.n	8001bca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	6919      	ldr	r1, [r3, #16]
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	461a      	mov	r2, r3
 8001b92:	4613      	mov	r3, r2
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	4413      	add	r3, r2
 8001b98:	2207      	movs	r2, #7
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	43da      	mvns	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	400a      	ands	r2, r1
 8001ba6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	6919      	ldr	r1, [r3, #16]
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	689a      	ldr	r2, [r3, #8]
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	4618      	mov	r0, r3
 8001bba:	4603      	mov	r3, r0
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	4403      	add	r3, r0
 8001bc0:	409a      	lsls	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	430a      	orrs	r2, r1
 8001bc8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	2b06      	cmp	r3, #6
 8001bd0:	d824      	bhi.n	8001c1c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685a      	ldr	r2, [r3, #4]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	4413      	add	r3, r2
 8001be2:	3b05      	subs	r3, #5
 8001be4:	221f      	movs	r2, #31
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	43da      	mvns	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	400a      	ands	r2, r1
 8001bf2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	4618      	mov	r0, r3
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685a      	ldr	r2, [r3, #4]
 8001c06:	4613      	mov	r3, r2
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	4413      	add	r3, r2
 8001c0c:	3b05      	subs	r3, #5
 8001c0e:	fa00 f203 	lsl.w	r2, r0, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	430a      	orrs	r2, r1
 8001c18:	635a      	str	r2, [r3, #52]	; 0x34
 8001c1a:	e04c      	b.n	8001cb6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	2b0c      	cmp	r3, #12
 8001c22:	d824      	bhi.n	8001c6e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685a      	ldr	r2, [r3, #4]
 8001c2e:	4613      	mov	r3, r2
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	4413      	add	r3, r2
 8001c34:	3b23      	subs	r3, #35	; 0x23
 8001c36:	221f      	movs	r2, #31
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	43da      	mvns	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	400a      	ands	r2, r1
 8001c44:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	4618      	mov	r0, r3
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685a      	ldr	r2, [r3, #4]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	4413      	add	r3, r2
 8001c5e:	3b23      	subs	r3, #35	; 0x23
 8001c60:	fa00 f203 	lsl.w	r2, r0, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	631a      	str	r2, [r3, #48]	; 0x30
 8001c6c:	e023      	b.n	8001cb6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685a      	ldr	r2, [r3, #4]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	4413      	add	r3, r2
 8001c7e:	3b41      	subs	r3, #65	; 0x41
 8001c80:	221f      	movs	r2, #31
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	43da      	mvns	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	400a      	ands	r2, r1
 8001c8e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685a      	ldr	r2, [r3, #4]
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	4413      	add	r3, r2
 8001ca8:	3b41      	subs	r3, #65	; 0x41
 8001caa:	fa00 f203 	lsl.w	r2, r0, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cb6:	4b29      	ldr	r3, [pc, #164]	; (8001d5c <HAL_ADC_ConfigChannel+0x250>)
 8001cb8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a28      	ldr	r2, [pc, #160]	; (8001d60 <HAL_ADC_ConfigChannel+0x254>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d10f      	bne.n	8001ce4 <HAL_ADC_ConfigChannel+0x1d8>
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2b12      	cmp	r3, #18
 8001cca:	d10b      	bne.n	8001ce4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a1d      	ldr	r2, [pc, #116]	; (8001d60 <HAL_ADC_ConfigChannel+0x254>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d12b      	bne.n	8001d46 <HAL_ADC_ConfigChannel+0x23a>
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a1c      	ldr	r2, [pc, #112]	; (8001d64 <HAL_ADC_ConfigChannel+0x258>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d003      	beq.n	8001d00 <HAL_ADC_ConfigChannel+0x1f4>
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2b11      	cmp	r3, #17
 8001cfe:	d122      	bne.n	8001d46 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a11      	ldr	r2, [pc, #68]	; (8001d64 <HAL_ADC_ConfigChannel+0x258>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d111      	bne.n	8001d46 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d22:	4b11      	ldr	r3, [pc, #68]	; (8001d68 <HAL_ADC_ConfigChannel+0x25c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a11      	ldr	r2, [pc, #68]	; (8001d6c <HAL_ADC_ConfigChannel+0x260>)
 8001d28:	fba2 2303 	umull	r2, r3, r2, r3
 8001d2c:	0c9a      	lsrs	r2, r3, #18
 8001d2e:	4613      	mov	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	4413      	add	r3, r2
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d38:	e002      	b.n	8001d40 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	3b01      	subs	r3, #1
 8001d3e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1f9      	bne.n	8001d3a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3714      	adds	r7, #20
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr
 8001d5c:	40012300 	.word	0x40012300
 8001d60:	40012000 	.word	0x40012000
 8001d64:	10000012 	.word	0x10000012
 8001d68:	20000000 	.word	0x20000000
 8001d6c:	431bde83 	.word	0x431bde83

08001d70 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d78:	4b79      	ldr	r3, [pc, #484]	; (8001f60 <ADC_Init+0x1f0>)
 8001d7a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	685a      	ldr	r2, [r3, #4]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	431a      	orrs	r2, r3
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	685a      	ldr	r2, [r3, #4]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001da4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	6859      	ldr	r1, [r3, #4]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	691b      	ldr	r3, [r3, #16]
 8001db0:	021a      	lsls	r2, r3, #8
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	430a      	orrs	r2, r1
 8001db8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	685a      	ldr	r2, [r3, #4]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001dc8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	6859      	ldr	r1, [r3, #4]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689a      	ldr	r2, [r3, #8]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	689a      	ldr	r2, [r3, #8]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	6899      	ldr	r1, [r3, #8]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	68da      	ldr	r2, [r3, #12]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e02:	4a58      	ldr	r2, [pc, #352]	; (8001f64 <ADC_Init+0x1f4>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d022      	beq.n	8001e4e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	689a      	ldr	r2, [r3, #8]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e16:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	6899      	ldr	r1, [r3, #8]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	430a      	orrs	r2, r1
 8001e28:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	689a      	ldr	r2, [r3, #8]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e38:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	6899      	ldr	r1, [r3, #8]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	609a      	str	r2, [r3, #8]
 8001e4c:	e00f      	b.n	8001e6e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	689a      	ldr	r2, [r3, #8]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e5c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	689a      	ldr	r2, [r3, #8]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e6c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	689a      	ldr	r2, [r3, #8]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f022 0202 	bic.w	r2, r2, #2
 8001e7c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	6899      	ldr	r1, [r3, #8]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	7e1b      	ldrb	r3, [r3, #24]
 8001e88:	005a      	lsls	r2, r3, #1
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d01b      	beq.n	8001ed4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	685a      	ldr	r2, [r3, #4]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001eaa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	685a      	ldr	r2, [r3, #4]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001eba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	6859      	ldr	r1, [r3, #4]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	035a      	lsls	r2, r3, #13
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	605a      	str	r2, [r3, #4]
 8001ed2:	e007      	b.n	8001ee4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	685a      	ldr	r2, [r3, #4]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ee2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001ef2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	69db      	ldr	r3, [r3, #28]
 8001efe:	3b01      	subs	r3, #1
 8001f00:	051a      	lsls	r2, r3, #20
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	430a      	orrs	r2, r1
 8001f08:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	689a      	ldr	r2, [r3, #8]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	6899      	ldr	r1, [r3, #8]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f26:	025a      	lsls	r2, r3, #9
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	689a      	ldr	r2, [r3, #8]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f3e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	6899      	ldr	r1, [r3, #8]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	029a      	lsls	r2, r3, #10
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	430a      	orrs	r2, r1
 8001f52:	609a      	str	r2, [r3, #8]
}
 8001f54:	bf00      	nop
 8001f56:	3714      	adds	r7, #20
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	40012300 	.word	0x40012300
 8001f64:	0f000001 	.word	0x0f000001

08001f68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f003 0307 	and.w	r3, r3, #7
 8001f76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f78:	4b0c      	ldr	r3, [pc, #48]	; (8001fac <__NVIC_SetPriorityGrouping+0x44>)
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f7e:	68ba      	ldr	r2, [r7, #8]
 8001f80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f84:	4013      	ands	r3, r2
 8001f86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f9a:	4a04      	ldr	r2, [pc, #16]	; (8001fac <__NVIC_SetPriorityGrouping+0x44>)
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	60d3      	str	r3, [r2, #12]
}
 8001fa0:	bf00      	nop
 8001fa2:	3714      	adds	r7, #20
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr
 8001fac:	e000ed00 	.word	0xe000ed00

08001fb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fb4:	4b04      	ldr	r3, [pc, #16]	; (8001fc8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	0a1b      	lsrs	r3, r3, #8
 8001fba:	f003 0307 	and.w	r3, r3, #7
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr
 8001fc8:	e000ed00 	.word	0xe000ed00

08001fcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	db0b      	blt.n	8001ff6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fde:	79fb      	ldrb	r3, [r7, #7]
 8001fe0:	f003 021f 	and.w	r2, r3, #31
 8001fe4:	4907      	ldr	r1, [pc, #28]	; (8002004 <__NVIC_EnableIRQ+0x38>)
 8001fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fea:	095b      	lsrs	r3, r3, #5
 8001fec:	2001      	movs	r0, #1
 8001fee:	fa00 f202 	lsl.w	r2, r0, r2
 8001ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ff6:	bf00      	nop
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	e000e100 	.word	0xe000e100

08002008 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	4603      	mov	r3, r0
 8002010:	6039      	str	r1, [r7, #0]
 8002012:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002018:	2b00      	cmp	r3, #0
 800201a:	db0a      	blt.n	8002032 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	b2da      	uxtb	r2, r3
 8002020:	490c      	ldr	r1, [pc, #48]	; (8002054 <__NVIC_SetPriority+0x4c>)
 8002022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002026:	0112      	lsls	r2, r2, #4
 8002028:	b2d2      	uxtb	r2, r2
 800202a:	440b      	add	r3, r1
 800202c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002030:	e00a      	b.n	8002048 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	b2da      	uxtb	r2, r3
 8002036:	4908      	ldr	r1, [pc, #32]	; (8002058 <__NVIC_SetPriority+0x50>)
 8002038:	79fb      	ldrb	r3, [r7, #7]
 800203a:	f003 030f 	and.w	r3, r3, #15
 800203e:	3b04      	subs	r3, #4
 8002040:	0112      	lsls	r2, r2, #4
 8002042:	b2d2      	uxtb	r2, r2
 8002044:	440b      	add	r3, r1
 8002046:	761a      	strb	r2, [r3, #24]
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr
 8002054:	e000e100 	.word	0xe000e100
 8002058:	e000ed00 	.word	0xe000ed00

0800205c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800205c:	b480      	push	{r7}
 800205e:	b089      	sub	sp, #36	; 0x24
 8002060:	af00      	add	r7, sp, #0
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f003 0307 	and.w	r3, r3, #7
 800206e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	f1c3 0307 	rsb	r3, r3, #7
 8002076:	2b04      	cmp	r3, #4
 8002078:	bf28      	it	cs
 800207a:	2304      	movcs	r3, #4
 800207c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	3304      	adds	r3, #4
 8002082:	2b06      	cmp	r3, #6
 8002084:	d902      	bls.n	800208c <NVIC_EncodePriority+0x30>
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	3b03      	subs	r3, #3
 800208a:	e000      	b.n	800208e <NVIC_EncodePriority+0x32>
 800208c:	2300      	movs	r3, #0
 800208e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002090:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	43da      	mvns	r2, r3
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	401a      	ands	r2, r3
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	fa01 f303 	lsl.w	r3, r1, r3
 80020ae:	43d9      	mvns	r1, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b4:	4313      	orrs	r3, r2
         );
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3724      	adds	r7, #36	; 0x24
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
	...

080020c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	3b01      	subs	r3, #1
 80020d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020d4:	d301      	bcc.n	80020da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020d6:	2301      	movs	r3, #1
 80020d8:	e00f      	b.n	80020fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020da:	4a0a      	ldr	r2, [pc, #40]	; (8002104 <SysTick_Config+0x40>)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	3b01      	subs	r3, #1
 80020e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020e2:	210f      	movs	r1, #15
 80020e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020e8:	f7ff ff8e 	bl	8002008 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020ec:	4b05      	ldr	r3, [pc, #20]	; (8002104 <SysTick_Config+0x40>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020f2:	4b04      	ldr	r3, [pc, #16]	; (8002104 <SysTick_Config+0x40>)
 80020f4:	2207      	movs	r2, #7
 80020f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	e000e010 	.word	0xe000e010

08002108 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f7ff ff29 	bl	8001f68 <__NVIC_SetPriorityGrouping>
}
 8002116:	bf00      	nop
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800211e:	b580      	push	{r7, lr}
 8002120:	b086      	sub	sp, #24
 8002122:	af00      	add	r7, sp, #0
 8002124:	4603      	mov	r3, r0
 8002126:	60b9      	str	r1, [r7, #8]
 8002128:	607a      	str	r2, [r7, #4]
 800212a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800212c:	2300      	movs	r3, #0
 800212e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002130:	f7ff ff3e 	bl	8001fb0 <__NVIC_GetPriorityGrouping>
 8002134:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	68b9      	ldr	r1, [r7, #8]
 800213a:	6978      	ldr	r0, [r7, #20]
 800213c:	f7ff ff8e 	bl	800205c <NVIC_EncodePriority>
 8002140:	4602      	mov	r2, r0
 8002142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002146:	4611      	mov	r1, r2
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff ff5d 	bl	8002008 <__NVIC_SetPriority>
}
 800214e:	bf00      	nop
 8002150:	3718      	adds	r7, #24
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b082      	sub	sp, #8
 800215a:	af00      	add	r7, sp, #0
 800215c:	4603      	mov	r3, r0
 800215e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff ff31 	bl	8001fcc <__NVIC_EnableIRQ>
}
 800216a:	bf00      	nop
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b082      	sub	sp, #8
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f7ff ffa2 	bl	80020c4 <SysTick_Config>
 8002180:	4603      	mov	r3, r0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
	...

0800218c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800218c:	b480      	push	{r7}
 800218e:	b089      	sub	sp, #36	; 0x24
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002196:	2300      	movs	r3, #0
 8002198:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800219a:	2300      	movs	r3, #0
 800219c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800219e:	2300      	movs	r3, #0
 80021a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021a2:	2300      	movs	r3, #0
 80021a4:	61fb      	str	r3, [r7, #28]
 80021a6:	e159      	b.n	800245c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021a8:	2201      	movs	r2, #1
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	697a      	ldr	r2, [r7, #20]
 80021b8:	4013      	ands	r3, r2
 80021ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	f040 8148 	bne.w	8002456 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f003 0303 	and.w	r3, r3, #3
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d005      	beq.n	80021de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d130      	bne.n	8002240 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	2203      	movs	r2, #3
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	43db      	mvns	r3, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4013      	ands	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	68da      	ldr	r2, [r3, #12]
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	4313      	orrs	r3, r2
 8002206:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002214:	2201      	movs	r2, #1
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	43db      	mvns	r3, r3
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	4013      	ands	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	091b      	lsrs	r3, r3, #4
 800222a:	f003 0201 	and.w	r2, r3, #1
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	4313      	orrs	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f003 0303 	and.w	r3, r3, #3
 8002248:	2b03      	cmp	r3, #3
 800224a:	d017      	beq.n	800227c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	2203      	movs	r2, #3
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	43db      	mvns	r3, r3
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	4013      	ands	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	689a      	ldr	r2, [r3, #8]
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	4313      	orrs	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f003 0303 	and.w	r3, r3, #3
 8002284:	2b02      	cmp	r3, #2
 8002286:	d123      	bne.n	80022d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	08da      	lsrs	r2, r3, #3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	3208      	adds	r2, #8
 8002290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002294:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	f003 0307 	and.w	r3, r3, #7
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	220f      	movs	r2, #15
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	43db      	mvns	r3, r3
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4013      	ands	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	691a      	ldr	r2, [r3, #16]
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	f003 0307 	and.w	r3, r3, #7
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	4313      	orrs	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	08da      	lsrs	r2, r3, #3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	3208      	adds	r2, #8
 80022ca:	69b9      	ldr	r1, [r7, #24]
 80022cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	2203      	movs	r2, #3
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	43db      	mvns	r3, r3
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	4013      	ands	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f003 0203 	and.w	r2, r3, #3
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800230c:	2b00      	cmp	r3, #0
 800230e:	f000 80a2 	beq.w	8002456 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002312:	2300      	movs	r3, #0
 8002314:	60fb      	str	r3, [r7, #12]
 8002316:	4b57      	ldr	r3, [pc, #348]	; (8002474 <HAL_GPIO_Init+0x2e8>)
 8002318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231a:	4a56      	ldr	r2, [pc, #344]	; (8002474 <HAL_GPIO_Init+0x2e8>)
 800231c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002320:	6453      	str	r3, [r2, #68]	; 0x44
 8002322:	4b54      	ldr	r3, [pc, #336]	; (8002474 <HAL_GPIO_Init+0x2e8>)
 8002324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002326:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800232a:	60fb      	str	r3, [r7, #12]
 800232c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800232e:	4a52      	ldr	r2, [pc, #328]	; (8002478 <HAL_GPIO_Init+0x2ec>)
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	089b      	lsrs	r3, r3, #2
 8002334:	3302      	adds	r3, #2
 8002336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800233a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	f003 0303 	and.w	r3, r3, #3
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	220f      	movs	r2, #15
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	43db      	mvns	r3, r3
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4013      	ands	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a49      	ldr	r2, [pc, #292]	; (800247c <HAL_GPIO_Init+0x2f0>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d019      	beq.n	800238e <HAL_GPIO_Init+0x202>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a48      	ldr	r2, [pc, #288]	; (8002480 <HAL_GPIO_Init+0x2f4>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d013      	beq.n	800238a <HAL_GPIO_Init+0x1fe>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a47      	ldr	r2, [pc, #284]	; (8002484 <HAL_GPIO_Init+0x2f8>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d00d      	beq.n	8002386 <HAL_GPIO_Init+0x1fa>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a46      	ldr	r2, [pc, #280]	; (8002488 <HAL_GPIO_Init+0x2fc>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d007      	beq.n	8002382 <HAL_GPIO_Init+0x1f6>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a45      	ldr	r2, [pc, #276]	; (800248c <HAL_GPIO_Init+0x300>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d101      	bne.n	800237e <HAL_GPIO_Init+0x1f2>
 800237a:	2304      	movs	r3, #4
 800237c:	e008      	b.n	8002390 <HAL_GPIO_Init+0x204>
 800237e:	2307      	movs	r3, #7
 8002380:	e006      	b.n	8002390 <HAL_GPIO_Init+0x204>
 8002382:	2303      	movs	r3, #3
 8002384:	e004      	b.n	8002390 <HAL_GPIO_Init+0x204>
 8002386:	2302      	movs	r3, #2
 8002388:	e002      	b.n	8002390 <HAL_GPIO_Init+0x204>
 800238a:	2301      	movs	r3, #1
 800238c:	e000      	b.n	8002390 <HAL_GPIO_Init+0x204>
 800238e:	2300      	movs	r3, #0
 8002390:	69fa      	ldr	r2, [r7, #28]
 8002392:	f002 0203 	and.w	r2, r2, #3
 8002396:	0092      	lsls	r2, r2, #2
 8002398:	4093      	lsls	r3, r2
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	4313      	orrs	r3, r2
 800239e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023a0:	4935      	ldr	r1, [pc, #212]	; (8002478 <HAL_GPIO_Init+0x2ec>)
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	089b      	lsrs	r3, r3, #2
 80023a6:	3302      	adds	r3, #2
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023ae:	4b38      	ldr	r3, [pc, #224]	; (8002490 <HAL_GPIO_Init+0x304>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	43db      	mvns	r3, r3
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4013      	ands	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d003      	beq.n	80023d2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023d2:	4a2f      	ldr	r2, [pc, #188]	; (8002490 <HAL_GPIO_Init+0x304>)
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023d8:	4b2d      	ldr	r3, [pc, #180]	; (8002490 <HAL_GPIO_Init+0x304>)
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	43db      	mvns	r3, r3
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	4013      	ands	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d003      	beq.n	80023fc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023fc:	4a24      	ldr	r2, [pc, #144]	; (8002490 <HAL_GPIO_Init+0x304>)
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002402:	4b23      	ldr	r3, [pc, #140]	; (8002490 <HAL_GPIO_Init+0x304>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	43db      	mvns	r3, r3
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	4013      	ands	r3, r2
 8002410:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d003      	beq.n	8002426 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	4313      	orrs	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002426:	4a1a      	ldr	r2, [pc, #104]	; (8002490 <HAL_GPIO_Init+0x304>)
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800242c:	4b18      	ldr	r3, [pc, #96]	; (8002490 <HAL_GPIO_Init+0x304>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	43db      	mvns	r3, r3
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	4013      	ands	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d003      	beq.n	8002450 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	4313      	orrs	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002450:	4a0f      	ldr	r2, [pc, #60]	; (8002490 <HAL_GPIO_Init+0x304>)
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	3301      	adds	r3, #1
 800245a:	61fb      	str	r3, [r7, #28]
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	2b0f      	cmp	r3, #15
 8002460:	f67f aea2 	bls.w	80021a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002464:	bf00      	nop
 8002466:	bf00      	nop
 8002468:	3724      	adds	r7, #36	; 0x24
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	40023800 	.word	0x40023800
 8002478:	40013800 	.word	0x40013800
 800247c:	40020000 	.word	0x40020000
 8002480:	40020400 	.word	0x40020400
 8002484:	40020800 	.word	0x40020800
 8002488:	40020c00 	.word	0x40020c00
 800248c:	40021000 	.word	0x40021000
 8002490:	40013c00 	.word	0x40013c00

08002494 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	460b      	mov	r3, r1
 800249e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	691a      	ldr	r2, [r3, #16]
 80024a4:	887b      	ldrh	r3, [r7, #2]
 80024a6:	4013      	ands	r3, r2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d002      	beq.n	80024b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80024ac:	2301      	movs	r3, #1
 80024ae:	73fb      	strb	r3, [r7, #15]
 80024b0:	e001      	b.n	80024b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024b2:	2300      	movs	r3, #0
 80024b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3714      	adds	r7, #20
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	460b      	mov	r3, r1
 80024ce:	807b      	strh	r3, [r7, #2]
 80024d0:	4613      	mov	r3, r2
 80024d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024d4:	787b      	ldrb	r3, [r7, #1]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024da:	887a      	ldrh	r2, [r7, #2]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024e0:	e003      	b.n	80024ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024e2:	887b      	ldrh	r3, [r7, #2]
 80024e4:	041a      	lsls	r2, r3, #16
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	619a      	str	r2, [r3, #24]
}
 80024ea:	bf00      	nop
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr

080024f6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024f6:	b480      	push	{r7}
 80024f8:	b085      	sub	sp, #20
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
 80024fe:	460b      	mov	r3, r1
 8002500:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002508:	887a      	ldrh	r2, [r7, #2]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	4013      	ands	r3, r2
 800250e:	041a      	lsls	r2, r3, #16
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	43d9      	mvns	r1, r3
 8002514:	887b      	ldrh	r3, [r7, #2]
 8002516:	400b      	ands	r3, r1
 8002518:	431a      	orrs	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	619a      	str	r2, [r3, #24]
}
 800251e:	bf00      	nop
 8002520:	3714      	adds	r7, #20
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
	...

0800252c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b086      	sub	sp, #24
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d101      	bne.n	800253e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e267      	b.n	8002a0e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	2b00      	cmp	r3, #0
 8002548:	d075      	beq.n	8002636 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800254a:	4b88      	ldr	r3, [pc, #544]	; (800276c <HAL_RCC_OscConfig+0x240>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f003 030c 	and.w	r3, r3, #12
 8002552:	2b04      	cmp	r3, #4
 8002554:	d00c      	beq.n	8002570 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002556:	4b85      	ldr	r3, [pc, #532]	; (800276c <HAL_RCC_OscConfig+0x240>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800255e:	2b08      	cmp	r3, #8
 8002560:	d112      	bne.n	8002588 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002562:	4b82      	ldr	r3, [pc, #520]	; (800276c <HAL_RCC_OscConfig+0x240>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800256a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800256e:	d10b      	bne.n	8002588 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002570:	4b7e      	ldr	r3, [pc, #504]	; (800276c <HAL_RCC_OscConfig+0x240>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d05b      	beq.n	8002634 <HAL_RCC_OscConfig+0x108>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d157      	bne.n	8002634 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e242      	b.n	8002a0e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002590:	d106      	bne.n	80025a0 <HAL_RCC_OscConfig+0x74>
 8002592:	4b76      	ldr	r3, [pc, #472]	; (800276c <HAL_RCC_OscConfig+0x240>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a75      	ldr	r2, [pc, #468]	; (800276c <HAL_RCC_OscConfig+0x240>)
 8002598:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800259c:	6013      	str	r3, [r2, #0]
 800259e:	e01d      	b.n	80025dc <HAL_RCC_OscConfig+0xb0>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025a8:	d10c      	bne.n	80025c4 <HAL_RCC_OscConfig+0x98>
 80025aa:	4b70      	ldr	r3, [pc, #448]	; (800276c <HAL_RCC_OscConfig+0x240>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a6f      	ldr	r2, [pc, #444]	; (800276c <HAL_RCC_OscConfig+0x240>)
 80025b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025b4:	6013      	str	r3, [r2, #0]
 80025b6:	4b6d      	ldr	r3, [pc, #436]	; (800276c <HAL_RCC_OscConfig+0x240>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a6c      	ldr	r2, [pc, #432]	; (800276c <HAL_RCC_OscConfig+0x240>)
 80025bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025c0:	6013      	str	r3, [r2, #0]
 80025c2:	e00b      	b.n	80025dc <HAL_RCC_OscConfig+0xb0>
 80025c4:	4b69      	ldr	r3, [pc, #420]	; (800276c <HAL_RCC_OscConfig+0x240>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a68      	ldr	r2, [pc, #416]	; (800276c <HAL_RCC_OscConfig+0x240>)
 80025ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025ce:	6013      	str	r3, [r2, #0]
 80025d0:	4b66      	ldr	r3, [pc, #408]	; (800276c <HAL_RCC_OscConfig+0x240>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a65      	ldr	r2, [pc, #404]	; (800276c <HAL_RCC_OscConfig+0x240>)
 80025d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d013      	beq.n	800260c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e4:	f7ff f8d2 	bl	800178c <HAL_GetTick>
 80025e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025ec:	f7ff f8ce 	bl	800178c <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b64      	cmp	r3, #100	; 0x64
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e207      	b.n	8002a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025fe:	4b5b      	ldr	r3, [pc, #364]	; (800276c <HAL_RCC_OscConfig+0x240>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d0f0      	beq.n	80025ec <HAL_RCC_OscConfig+0xc0>
 800260a:	e014      	b.n	8002636 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800260c:	f7ff f8be 	bl	800178c <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002614:	f7ff f8ba 	bl	800178c <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b64      	cmp	r3, #100	; 0x64
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e1f3      	b.n	8002a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002626:	4b51      	ldr	r3, [pc, #324]	; (800276c <HAL_RCC_OscConfig+0x240>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1f0      	bne.n	8002614 <HAL_RCC_OscConfig+0xe8>
 8002632:	e000      	b.n	8002636 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002634:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d063      	beq.n	800270a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002642:	4b4a      	ldr	r3, [pc, #296]	; (800276c <HAL_RCC_OscConfig+0x240>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f003 030c 	and.w	r3, r3, #12
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00b      	beq.n	8002666 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800264e:	4b47      	ldr	r3, [pc, #284]	; (800276c <HAL_RCC_OscConfig+0x240>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002656:	2b08      	cmp	r3, #8
 8002658:	d11c      	bne.n	8002694 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800265a:	4b44      	ldr	r3, [pc, #272]	; (800276c <HAL_RCC_OscConfig+0x240>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d116      	bne.n	8002694 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002666:	4b41      	ldr	r3, [pc, #260]	; (800276c <HAL_RCC_OscConfig+0x240>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d005      	beq.n	800267e <HAL_RCC_OscConfig+0x152>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d001      	beq.n	800267e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e1c7      	b.n	8002a0e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800267e:	4b3b      	ldr	r3, [pc, #236]	; (800276c <HAL_RCC_OscConfig+0x240>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	00db      	lsls	r3, r3, #3
 800268c:	4937      	ldr	r1, [pc, #220]	; (800276c <HAL_RCC_OscConfig+0x240>)
 800268e:	4313      	orrs	r3, r2
 8002690:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002692:	e03a      	b.n	800270a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d020      	beq.n	80026de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800269c:	4b34      	ldr	r3, [pc, #208]	; (8002770 <HAL_RCC_OscConfig+0x244>)
 800269e:	2201      	movs	r2, #1
 80026a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a2:	f7ff f873 	bl	800178c <HAL_GetTick>
 80026a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026a8:	e008      	b.n	80026bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026aa:	f7ff f86f 	bl	800178c <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d901      	bls.n	80026bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e1a8      	b.n	8002a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026bc:	4b2b      	ldr	r3, [pc, #172]	; (800276c <HAL_RCC_OscConfig+0x240>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d0f0      	beq.n	80026aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026c8:	4b28      	ldr	r3, [pc, #160]	; (800276c <HAL_RCC_OscConfig+0x240>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	691b      	ldr	r3, [r3, #16]
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	4925      	ldr	r1, [pc, #148]	; (800276c <HAL_RCC_OscConfig+0x240>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	600b      	str	r3, [r1, #0]
 80026dc:	e015      	b.n	800270a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026de:	4b24      	ldr	r3, [pc, #144]	; (8002770 <HAL_RCC_OscConfig+0x244>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e4:	f7ff f852 	bl	800178c <HAL_GetTick>
 80026e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ea:	e008      	b.n	80026fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026ec:	f7ff f84e 	bl	800178c <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e187      	b.n	8002a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026fe:	4b1b      	ldr	r3, [pc, #108]	; (800276c <HAL_RCC_OscConfig+0x240>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1f0      	bne.n	80026ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0308 	and.w	r3, r3, #8
 8002712:	2b00      	cmp	r3, #0
 8002714:	d036      	beq.n	8002784 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d016      	beq.n	800274c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800271e:	4b15      	ldr	r3, [pc, #84]	; (8002774 <HAL_RCC_OscConfig+0x248>)
 8002720:	2201      	movs	r2, #1
 8002722:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002724:	f7ff f832 	bl	800178c <HAL_GetTick>
 8002728:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800272a:	e008      	b.n	800273e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800272c:	f7ff f82e 	bl	800178c <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b02      	cmp	r3, #2
 8002738:	d901      	bls.n	800273e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e167      	b.n	8002a0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800273e:	4b0b      	ldr	r3, [pc, #44]	; (800276c <HAL_RCC_OscConfig+0x240>)
 8002740:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	2b00      	cmp	r3, #0
 8002748:	d0f0      	beq.n	800272c <HAL_RCC_OscConfig+0x200>
 800274a:	e01b      	b.n	8002784 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800274c:	4b09      	ldr	r3, [pc, #36]	; (8002774 <HAL_RCC_OscConfig+0x248>)
 800274e:	2200      	movs	r2, #0
 8002750:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002752:	f7ff f81b 	bl	800178c <HAL_GetTick>
 8002756:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002758:	e00e      	b.n	8002778 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800275a:	f7ff f817 	bl	800178c <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	2b02      	cmp	r3, #2
 8002766:	d907      	bls.n	8002778 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e150      	b.n	8002a0e <HAL_RCC_OscConfig+0x4e2>
 800276c:	40023800 	.word	0x40023800
 8002770:	42470000 	.word	0x42470000
 8002774:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002778:	4b88      	ldr	r3, [pc, #544]	; (800299c <HAL_RCC_OscConfig+0x470>)
 800277a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800277c:	f003 0302 	and.w	r3, r3, #2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d1ea      	bne.n	800275a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0304 	and.w	r3, r3, #4
 800278c:	2b00      	cmp	r3, #0
 800278e:	f000 8097 	beq.w	80028c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002792:	2300      	movs	r3, #0
 8002794:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002796:	4b81      	ldr	r3, [pc, #516]	; (800299c <HAL_RCC_OscConfig+0x470>)
 8002798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d10f      	bne.n	80027c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027a2:	2300      	movs	r3, #0
 80027a4:	60bb      	str	r3, [r7, #8]
 80027a6:	4b7d      	ldr	r3, [pc, #500]	; (800299c <HAL_RCC_OscConfig+0x470>)
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	4a7c      	ldr	r2, [pc, #496]	; (800299c <HAL_RCC_OscConfig+0x470>)
 80027ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027b0:	6413      	str	r3, [r2, #64]	; 0x40
 80027b2:	4b7a      	ldr	r3, [pc, #488]	; (800299c <HAL_RCC_OscConfig+0x470>)
 80027b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ba:	60bb      	str	r3, [r7, #8]
 80027bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027be:	2301      	movs	r3, #1
 80027c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c2:	4b77      	ldr	r3, [pc, #476]	; (80029a0 <HAL_RCC_OscConfig+0x474>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d118      	bne.n	8002800 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027ce:	4b74      	ldr	r3, [pc, #464]	; (80029a0 <HAL_RCC_OscConfig+0x474>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a73      	ldr	r2, [pc, #460]	; (80029a0 <HAL_RCC_OscConfig+0x474>)
 80027d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027da:	f7fe ffd7 	bl	800178c <HAL_GetTick>
 80027de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027e0:	e008      	b.n	80027f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027e2:	f7fe ffd3 	bl	800178c <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d901      	bls.n	80027f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e10c      	b.n	8002a0e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027f4:	4b6a      	ldr	r3, [pc, #424]	; (80029a0 <HAL_RCC_OscConfig+0x474>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d0f0      	beq.n	80027e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	2b01      	cmp	r3, #1
 8002806:	d106      	bne.n	8002816 <HAL_RCC_OscConfig+0x2ea>
 8002808:	4b64      	ldr	r3, [pc, #400]	; (800299c <HAL_RCC_OscConfig+0x470>)
 800280a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800280c:	4a63      	ldr	r2, [pc, #396]	; (800299c <HAL_RCC_OscConfig+0x470>)
 800280e:	f043 0301 	orr.w	r3, r3, #1
 8002812:	6713      	str	r3, [r2, #112]	; 0x70
 8002814:	e01c      	b.n	8002850 <HAL_RCC_OscConfig+0x324>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	2b05      	cmp	r3, #5
 800281c:	d10c      	bne.n	8002838 <HAL_RCC_OscConfig+0x30c>
 800281e:	4b5f      	ldr	r3, [pc, #380]	; (800299c <HAL_RCC_OscConfig+0x470>)
 8002820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002822:	4a5e      	ldr	r2, [pc, #376]	; (800299c <HAL_RCC_OscConfig+0x470>)
 8002824:	f043 0304 	orr.w	r3, r3, #4
 8002828:	6713      	str	r3, [r2, #112]	; 0x70
 800282a:	4b5c      	ldr	r3, [pc, #368]	; (800299c <HAL_RCC_OscConfig+0x470>)
 800282c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800282e:	4a5b      	ldr	r2, [pc, #364]	; (800299c <HAL_RCC_OscConfig+0x470>)
 8002830:	f043 0301 	orr.w	r3, r3, #1
 8002834:	6713      	str	r3, [r2, #112]	; 0x70
 8002836:	e00b      	b.n	8002850 <HAL_RCC_OscConfig+0x324>
 8002838:	4b58      	ldr	r3, [pc, #352]	; (800299c <HAL_RCC_OscConfig+0x470>)
 800283a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800283c:	4a57      	ldr	r2, [pc, #348]	; (800299c <HAL_RCC_OscConfig+0x470>)
 800283e:	f023 0301 	bic.w	r3, r3, #1
 8002842:	6713      	str	r3, [r2, #112]	; 0x70
 8002844:	4b55      	ldr	r3, [pc, #340]	; (800299c <HAL_RCC_OscConfig+0x470>)
 8002846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002848:	4a54      	ldr	r2, [pc, #336]	; (800299c <HAL_RCC_OscConfig+0x470>)
 800284a:	f023 0304 	bic.w	r3, r3, #4
 800284e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d015      	beq.n	8002884 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002858:	f7fe ff98 	bl	800178c <HAL_GetTick>
 800285c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800285e:	e00a      	b.n	8002876 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002860:	f7fe ff94 	bl	800178c <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	f241 3288 	movw	r2, #5000	; 0x1388
 800286e:	4293      	cmp	r3, r2
 8002870:	d901      	bls.n	8002876 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e0cb      	b.n	8002a0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002876:	4b49      	ldr	r3, [pc, #292]	; (800299c <HAL_RCC_OscConfig+0x470>)
 8002878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d0ee      	beq.n	8002860 <HAL_RCC_OscConfig+0x334>
 8002882:	e014      	b.n	80028ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002884:	f7fe ff82 	bl	800178c <HAL_GetTick>
 8002888:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800288a:	e00a      	b.n	80028a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800288c:	f7fe ff7e 	bl	800178c <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	f241 3288 	movw	r2, #5000	; 0x1388
 800289a:	4293      	cmp	r3, r2
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e0b5      	b.n	8002a0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028a2:	4b3e      	ldr	r3, [pc, #248]	; (800299c <HAL_RCC_OscConfig+0x470>)
 80028a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d1ee      	bne.n	800288c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028ae:	7dfb      	ldrb	r3, [r7, #23]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d105      	bne.n	80028c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028b4:	4b39      	ldr	r3, [pc, #228]	; (800299c <HAL_RCC_OscConfig+0x470>)
 80028b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b8:	4a38      	ldr	r2, [pc, #224]	; (800299c <HAL_RCC_OscConfig+0x470>)
 80028ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	f000 80a1 	beq.w	8002a0c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028ca:	4b34      	ldr	r3, [pc, #208]	; (800299c <HAL_RCC_OscConfig+0x470>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 030c 	and.w	r3, r3, #12
 80028d2:	2b08      	cmp	r3, #8
 80028d4:	d05c      	beq.n	8002990 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	699b      	ldr	r3, [r3, #24]
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d141      	bne.n	8002962 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028de:	4b31      	ldr	r3, [pc, #196]	; (80029a4 <HAL_RCC_OscConfig+0x478>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e4:	f7fe ff52 	bl	800178c <HAL_GetTick>
 80028e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028ec:	f7fe ff4e 	bl	800178c <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e087      	b.n	8002a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028fe:	4b27      	ldr	r3, [pc, #156]	; (800299c <HAL_RCC_OscConfig+0x470>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1f0      	bne.n	80028ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	69da      	ldr	r2, [r3, #28]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a1b      	ldr	r3, [r3, #32]
 8002912:	431a      	orrs	r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002918:	019b      	lsls	r3, r3, #6
 800291a:	431a      	orrs	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002920:	085b      	lsrs	r3, r3, #1
 8002922:	3b01      	subs	r3, #1
 8002924:	041b      	lsls	r3, r3, #16
 8002926:	431a      	orrs	r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292c:	061b      	lsls	r3, r3, #24
 800292e:	491b      	ldr	r1, [pc, #108]	; (800299c <HAL_RCC_OscConfig+0x470>)
 8002930:	4313      	orrs	r3, r2
 8002932:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002934:	4b1b      	ldr	r3, [pc, #108]	; (80029a4 <HAL_RCC_OscConfig+0x478>)
 8002936:	2201      	movs	r2, #1
 8002938:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800293a:	f7fe ff27 	bl	800178c <HAL_GetTick>
 800293e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002940:	e008      	b.n	8002954 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002942:	f7fe ff23 	bl	800178c <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d901      	bls.n	8002954 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e05c      	b.n	8002a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002954:	4b11      	ldr	r3, [pc, #68]	; (800299c <HAL_RCC_OscConfig+0x470>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d0f0      	beq.n	8002942 <HAL_RCC_OscConfig+0x416>
 8002960:	e054      	b.n	8002a0c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002962:	4b10      	ldr	r3, [pc, #64]	; (80029a4 <HAL_RCC_OscConfig+0x478>)
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002968:	f7fe ff10 	bl	800178c <HAL_GetTick>
 800296c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800296e:	e008      	b.n	8002982 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002970:	f7fe ff0c 	bl	800178c <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b02      	cmp	r3, #2
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e045      	b.n	8002a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002982:	4b06      	ldr	r3, [pc, #24]	; (800299c <HAL_RCC_OscConfig+0x470>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1f0      	bne.n	8002970 <HAL_RCC_OscConfig+0x444>
 800298e:	e03d      	b.n	8002a0c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	699b      	ldr	r3, [r3, #24]
 8002994:	2b01      	cmp	r3, #1
 8002996:	d107      	bne.n	80029a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e038      	b.n	8002a0e <HAL_RCC_OscConfig+0x4e2>
 800299c:	40023800 	.word	0x40023800
 80029a0:	40007000 	.word	0x40007000
 80029a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029a8:	4b1b      	ldr	r3, [pc, #108]	; (8002a18 <HAL_RCC_OscConfig+0x4ec>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d028      	beq.n	8002a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d121      	bne.n	8002a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d11a      	bne.n	8002a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80029d8:	4013      	ands	r3, r2
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d111      	bne.n	8002a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ee:	085b      	lsrs	r3, r3, #1
 80029f0:	3b01      	subs	r3, #1
 80029f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d107      	bne.n	8002a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d001      	beq.n	8002a0c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e000      	b.n	8002a0e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3718      	adds	r7, #24
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	40023800 	.word	0x40023800

08002a1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d101      	bne.n	8002a30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e0cc      	b.n	8002bca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a30:	4b68      	ldr	r3, [pc, #416]	; (8002bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0307 	and.w	r3, r3, #7
 8002a38:	683a      	ldr	r2, [r7, #0]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d90c      	bls.n	8002a58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a3e:	4b65      	ldr	r3, [pc, #404]	; (8002bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	b2d2      	uxtb	r2, r2
 8002a44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a46:	4b63      	ldr	r3, [pc, #396]	; (8002bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0307 	and.w	r3, r3, #7
 8002a4e:	683a      	ldr	r2, [r7, #0]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d001      	beq.n	8002a58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e0b8      	b.n	8002bca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0302 	and.w	r3, r3, #2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d020      	beq.n	8002aa6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0304 	and.w	r3, r3, #4
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d005      	beq.n	8002a7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a70:	4b59      	ldr	r3, [pc, #356]	; (8002bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	4a58      	ldr	r2, [pc, #352]	; (8002bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0308 	and.w	r3, r3, #8
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d005      	beq.n	8002a94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a88:	4b53      	ldr	r3, [pc, #332]	; (8002bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	4a52      	ldr	r2, [pc, #328]	; (8002bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a94:	4b50      	ldr	r3, [pc, #320]	; (8002bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	494d      	ldr	r1, [pc, #308]	; (8002bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d044      	beq.n	8002b3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d107      	bne.n	8002aca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aba:	4b47      	ldr	r3, [pc, #284]	; (8002bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d119      	bne.n	8002afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e07f      	b.n	8002bca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d003      	beq.n	8002ada <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ad6:	2b03      	cmp	r3, #3
 8002ad8:	d107      	bne.n	8002aea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ada:	4b3f      	ldr	r3, [pc, #252]	; (8002bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d109      	bne.n	8002afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e06f      	b.n	8002bca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aea:	4b3b      	ldr	r3, [pc, #236]	; (8002bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0302 	and.w	r3, r3, #2
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d101      	bne.n	8002afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e067      	b.n	8002bca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002afa:	4b37      	ldr	r3, [pc, #220]	; (8002bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f023 0203 	bic.w	r2, r3, #3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	4934      	ldr	r1, [pc, #208]	; (8002bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b0c:	f7fe fe3e 	bl	800178c <HAL_GetTick>
 8002b10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b12:	e00a      	b.n	8002b2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b14:	f7fe fe3a 	bl	800178c <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e04f      	b.n	8002bca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b2a:	4b2b      	ldr	r3, [pc, #172]	; (8002bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f003 020c 	and.w	r2, r3, #12
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d1eb      	bne.n	8002b14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b3c:	4b25      	ldr	r3, [pc, #148]	; (8002bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0307 	and.w	r3, r3, #7
 8002b44:	683a      	ldr	r2, [r7, #0]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d20c      	bcs.n	8002b64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b4a:	4b22      	ldr	r3, [pc, #136]	; (8002bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b4c:	683a      	ldr	r2, [r7, #0]
 8002b4e:	b2d2      	uxtb	r2, r2
 8002b50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b52:	4b20      	ldr	r3, [pc, #128]	; (8002bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0307 	and.w	r3, r3, #7
 8002b5a:	683a      	ldr	r2, [r7, #0]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d001      	beq.n	8002b64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e032      	b.n	8002bca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0304 	and.w	r3, r3, #4
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d008      	beq.n	8002b82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b70:	4b19      	ldr	r3, [pc, #100]	; (8002bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	4916      	ldr	r1, [pc, #88]	; (8002bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0308 	and.w	r3, r3, #8
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d009      	beq.n	8002ba2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b8e:	4b12      	ldr	r3, [pc, #72]	; (8002bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	490e      	ldr	r1, [pc, #56]	; (8002bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ba2:	f000 f821 	bl	8002be8 <HAL_RCC_GetSysClockFreq>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	4b0b      	ldr	r3, [pc, #44]	; (8002bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	091b      	lsrs	r3, r3, #4
 8002bae:	f003 030f 	and.w	r3, r3, #15
 8002bb2:	490a      	ldr	r1, [pc, #40]	; (8002bdc <HAL_RCC_ClockConfig+0x1c0>)
 8002bb4:	5ccb      	ldrb	r3, [r1, r3]
 8002bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8002bba:	4a09      	ldr	r2, [pc, #36]	; (8002be0 <HAL_RCC_ClockConfig+0x1c4>)
 8002bbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002bbe:	4b09      	ldr	r3, [pc, #36]	; (8002be4 <HAL_RCC_ClockConfig+0x1c8>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7fe fd9e 	bl	8001704 <HAL_InitTick>

  return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3710      	adds	r7, #16
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	40023c00 	.word	0x40023c00
 8002bd8:	40023800 	.word	0x40023800
 8002bdc:	0800586c 	.word	0x0800586c
 8002be0:	20000000 	.word	0x20000000
 8002be4:	20000004 	.word	0x20000004

08002be8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002be8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bec:	b090      	sub	sp, #64	; 0x40
 8002bee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	637b      	str	r3, [r7, #52]	; 0x34
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c00:	4b59      	ldr	r3, [pc, #356]	; (8002d68 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f003 030c 	and.w	r3, r3, #12
 8002c08:	2b08      	cmp	r3, #8
 8002c0a:	d00d      	beq.n	8002c28 <HAL_RCC_GetSysClockFreq+0x40>
 8002c0c:	2b08      	cmp	r3, #8
 8002c0e:	f200 80a1 	bhi.w	8002d54 <HAL_RCC_GetSysClockFreq+0x16c>
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d002      	beq.n	8002c1c <HAL_RCC_GetSysClockFreq+0x34>
 8002c16:	2b04      	cmp	r3, #4
 8002c18:	d003      	beq.n	8002c22 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c1a:	e09b      	b.n	8002d54 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c1c:	4b53      	ldr	r3, [pc, #332]	; (8002d6c <HAL_RCC_GetSysClockFreq+0x184>)
 8002c1e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002c20:	e09b      	b.n	8002d5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c22:	4b53      	ldr	r3, [pc, #332]	; (8002d70 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c24:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c26:	e098      	b.n	8002d5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c28:	4b4f      	ldr	r3, [pc, #316]	; (8002d68 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c30:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c32:	4b4d      	ldr	r3, [pc, #308]	; (8002d68 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d028      	beq.n	8002c90 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c3e:	4b4a      	ldr	r3, [pc, #296]	; (8002d68 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	099b      	lsrs	r3, r3, #6
 8002c44:	2200      	movs	r2, #0
 8002c46:	623b      	str	r3, [r7, #32]
 8002c48:	627a      	str	r2, [r7, #36]	; 0x24
 8002c4a:	6a3b      	ldr	r3, [r7, #32]
 8002c4c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002c50:	2100      	movs	r1, #0
 8002c52:	4b47      	ldr	r3, [pc, #284]	; (8002d70 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c54:	fb03 f201 	mul.w	r2, r3, r1
 8002c58:	2300      	movs	r3, #0
 8002c5a:	fb00 f303 	mul.w	r3, r0, r3
 8002c5e:	4413      	add	r3, r2
 8002c60:	4a43      	ldr	r2, [pc, #268]	; (8002d70 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c62:	fba0 1202 	umull	r1, r2, r0, r2
 8002c66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c68:	460a      	mov	r2, r1
 8002c6a:	62ba      	str	r2, [r7, #40]	; 0x28
 8002c6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c6e:	4413      	add	r3, r2
 8002c70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c74:	2200      	movs	r2, #0
 8002c76:	61bb      	str	r3, [r7, #24]
 8002c78:	61fa      	str	r2, [r7, #28]
 8002c7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c7e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002c82:	f7fd fafd 	bl	8000280 <__aeabi_uldivmod>
 8002c86:	4602      	mov	r2, r0
 8002c88:	460b      	mov	r3, r1
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c8e:	e053      	b.n	8002d38 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c90:	4b35      	ldr	r3, [pc, #212]	; (8002d68 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	099b      	lsrs	r3, r3, #6
 8002c96:	2200      	movs	r2, #0
 8002c98:	613b      	str	r3, [r7, #16]
 8002c9a:	617a      	str	r2, [r7, #20]
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002ca2:	f04f 0b00 	mov.w	fp, #0
 8002ca6:	4652      	mov	r2, sl
 8002ca8:	465b      	mov	r3, fp
 8002caa:	f04f 0000 	mov.w	r0, #0
 8002cae:	f04f 0100 	mov.w	r1, #0
 8002cb2:	0159      	lsls	r1, r3, #5
 8002cb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cb8:	0150      	lsls	r0, r2, #5
 8002cba:	4602      	mov	r2, r0
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	ebb2 080a 	subs.w	r8, r2, sl
 8002cc2:	eb63 090b 	sbc.w	r9, r3, fp
 8002cc6:	f04f 0200 	mov.w	r2, #0
 8002cca:	f04f 0300 	mov.w	r3, #0
 8002cce:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002cd2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002cd6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002cda:	ebb2 0408 	subs.w	r4, r2, r8
 8002cde:	eb63 0509 	sbc.w	r5, r3, r9
 8002ce2:	f04f 0200 	mov.w	r2, #0
 8002ce6:	f04f 0300 	mov.w	r3, #0
 8002cea:	00eb      	lsls	r3, r5, #3
 8002cec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cf0:	00e2      	lsls	r2, r4, #3
 8002cf2:	4614      	mov	r4, r2
 8002cf4:	461d      	mov	r5, r3
 8002cf6:	eb14 030a 	adds.w	r3, r4, sl
 8002cfa:	603b      	str	r3, [r7, #0]
 8002cfc:	eb45 030b 	adc.w	r3, r5, fp
 8002d00:	607b      	str	r3, [r7, #4]
 8002d02:	f04f 0200 	mov.w	r2, #0
 8002d06:	f04f 0300 	mov.w	r3, #0
 8002d0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d0e:	4629      	mov	r1, r5
 8002d10:	028b      	lsls	r3, r1, #10
 8002d12:	4621      	mov	r1, r4
 8002d14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d18:	4621      	mov	r1, r4
 8002d1a:	028a      	lsls	r2, r1, #10
 8002d1c:	4610      	mov	r0, r2
 8002d1e:	4619      	mov	r1, r3
 8002d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d22:	2200      	movs	r2, #0
 8002d24:	60bb      	str	r3, [r7, #8]
 8002d26:	60fa      	str	r2, [r7, #12]
 8002d28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d2c:	f7fd faa8 	bl	8000280 <__aeabi_uldivmod>
 8002d30:	4602      	mov	r2, r0
 8002d32:	460b      	mov	r3, r1
 8002d34:	4613      	mov	r3, r2
 8002d36:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d38:	4b0b      	ldr	r3, [pc, #44]	; (8002d68 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	0c1b      	lsrs	r3, r3, #16
 8002d3e:	f003 0303 	and.w	r3, r3, #3
 8002d42:	3301      	adds	r3, #1
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002d48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d50:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d52:	e002      	b.n	8002d5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d54:	4b05      	ldr	r3, [pc, #20]	; (8002d6c <HAL_RCC_GetSysClockFreq+0x184>)
 8002d56:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3740      	adds	r7, #64	; 0x40
 8002d60:	46bd      	mov	sp, r7
 8002d62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d66:	bf00      	nop
 8002d68:	40023800 	.word	0x40023800
 8002d6c:	00f42400 	.word	0x00f42400
 8002d70:	017d7840 	.word	0x017d7840

08002d74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d78:	4b03      	ldr	r3, [pc, #12]	; (8002d88 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	20000000 	.word	0x20000000

08002d8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d90:	f7ff fff0 	bl	8002d74 <HAL_RCC_GetHCLKFreq>
 8002d94:	4602      	mov	r2, r0
 8002d96:	4b05      	ldr	r3, [pc, #20]	; (8002dac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	0a9b      	lsrs	r3, r3, #10
 8002d9c:	f003 0307 	and.w	r3, r3, #7
 8002da0:	4903      	ldr	r1, [pc, #12]	; (8002db0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002da2:	5ccb      	ldrb	r3, [r1, r3]
 8002da4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	40023800 	.word	0x40023800
 8002db0:	0800587c 	.word	0x0800587c

08002db4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002db8:	f7ff ffdc 	bl	8002d74 <HAL_RCC_GetHCLKFreq>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	4b05      	ldr	r3, [pc, #20]	; (8002dd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	0b5b      	lsrs	r3, r3, #13
 8002dc4:	f003 0307 	and.w	r3, r3, #7
 8002dc8:	4903      	ldr	r1, [pc, #12]	; (8002dd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dca:	5ccb      	ldrb	r3, [r1, r3]
 8002dcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	40023800 	.word	0x40023800
 8002dd8:	0800587c 	.word	0x0800587c

08002ddc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d101      	bne.n	8002dee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e041      	b.n	8002e72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d106      	bne.n	8002e08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f7fe fa3e 	bl	8001284 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2202      	movs	r2, #2
 8002e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	3304      	adds	r3, #4
 8002e18:	4619      	mov	r1, r3
 8002e1a:	4610      	mov	r0, r2
 8002e1c:	f000 fcf6 	bl	800380c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
	...

08002e7c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b085      	sub	sp, #20
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d001      	beq.n	8002e94 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e03c      	b.n	8002f0e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2202      	movs	r2, #2
 8002e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a1e      	ldr	r2, [pc, #120]	; (8002f1c <HAL_TIM_Base_Start+0xa0>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d018      	beq.n	8002ed8 <HAL_TIM_Base_Start+0x5c>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eae:	d013      	beq.n	8002ed8 <HAL_TIM_Base_Start+0x5c>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a1a      	ldr	r2, [pc, #104]	; (8002f20 <HAL_TIM_Base_Start+0xa4>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d00e      	beq.n	8002ed8 <HAL_TIM_Base_Start+0x5c>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a19      	ldr	r2, [pc, #100]	; (8002f24 <HAL_TIM_Base_Start+0xa8>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d009      	beq.n	8002ed8 <HAL_TIM_Base_Start+0x5c>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a17      	ldr	r2, [pc, #92]	; (8002f28 <HAL_TIM_Base_Start+0xac>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d004      	beq.n	8002ed8 <HAL_TIM_Base_Start+0x5c>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a16      	ldr	r2, [pc, #88]	; (8002f2c <HAL_TIM_Base_Start+0xb0>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d111      	bne.n	8002efc <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f003 0307 	and.w	r3, r3, #7
 8002ee2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2b06      	cmp	r3, #6
 8002ee8:	d010      	beq.n	8002f0c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f042 0201 	orr.w	r2, r2, #1
 8002ef8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002efa:	e007      	b.n	8002f0c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f042 0201 	orr.w	r2, r2, #1
 8002f0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3714      	adds	r7, #20
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	40010000 	.word	0x40010000
 8002f20:	40000400 	.word	0x40000400
 8002f24:	40000800 	.word	0x40000800
 8002f28:	40000c00 	.word	0x40000c00
 8002f2c:	40014000 	.word	0x40014000

08002f30 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e041      	b.n	8002fc6 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d106      	bne.n	8002f5c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f7fe f9b4 	bl	80012c4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2202      	movs	r2, #2
 8002f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	3304      	adds	r3, #4
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	4610      	mov	r0, r2
 8002f70:	f000 fc4c 	bl	800380c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b082      	sub	sp, #8
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d101      	bne.n	8002fe0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e041      	b.n	8003064 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d106      	bne.n	8002ffa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f7fe f91d 	bl	8001234 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2202      	movs	r2, #2
 8002ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	3304      	adds	r3, #4
 800300a:	4619      	mov	r1, r3
 800300c:	4610      	mov	r0, r2
 800300e:	f000 fbfd 	bl	800380c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2201      	movs	r2, #1
 8003016:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2201      	movs	r2, #1
 800301e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2201      	movs	r2, #1
 800302e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2201      	movs	r2, #1
 8003036:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2201      	movs	r2, #1
 800303e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2201      	movs	r2, #1
 800304e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2201      	movs	r2, #1
 8003056:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003062:	2300      	movs	r3, #0
}
 8003064:	4618      	mov	r0, r3
 8003066:	3708      	adds	r7, #8
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d109      	bne.n	8003090 <HAL_TIM_PWM_Start+0x24>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003082:	b2db      	uxtb	r3, r3
 8003084:	2b01      	cmp	r3, #1
 8003086:	bf14      	ite	ne
 8003088:	2301      	movne	r3, #1
 800308a:	2300      	moveq	r3, #0
 800308c:	b2db      	uxtb	r3, r3
 800308e:	e022      	b.n	80030d6 <HAL_TIM_PWM_Start+0x6a>
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	2b04      	cmp	r3, #4
 8003094:	d109      	bne.n	80030aa <HAL_TIM_PWM_Start+0x3e>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b01      	cmp	r3, #1
 80030a0:	bf14      	ite	ne
 80030a2:	2301      	movne	r3, #1
 80030a4:	2300      	moveq	r3, #0
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	e015      	b.n	80030d6 <HAL_TIM_PWM_Start+0x6a>
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	2b08      	cmp	r3, #8
 80030ae:	d109      	bne.n	80030c4 <HAL_TIM_PWM_Start+0x58>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	bf14      	ite	ne
 80030bc:	2301      	movne	r3, #1
 80030be:	2300      	moveq	r3, #0
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	e008      	b.n	80030d6 <HAL_TIM_PWM_Start+0x6a>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	bf14      	ite	ne
 80030d0:	2301      	movne	r3, #1
 80030d2:	2300      	moveq	r3, #0
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e068      	b.n	80031b0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d104      	bne.n	80030ee <HAL_TIM_PWM_Start+0x82>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2202      	movs	r2, #2
 80030e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030ec:	e013      	b.n	8003116 <HAL_TIM_PWM_Start+0xaa>
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	2b04      	cmp	r3, #4
 80030f2:	d104      	bne.n	80030fe <HAL_TIM_PWM_Start+0x92>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2202      	movs	r2, #2
 80030f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030fc:	e00b      	b.n	8003116 <HAL_TIM_PWM_Start+0xaa>
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	2b08      	cmp	r3, #8
 8003102:	d104      	bne.n	800310e <HAL_TIM_PWM_Start+0xa2>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2202      	movs	r2, #2
 8003108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800310c:	e003      	b.n	8003116 <HAL_TIM_PWM_Start+0xaa>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2202      	movs	r2, #2
 8003112:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2201      	movs	r2, #1
 800311c:	6839      	ldr	r1, [r7, #0]
 800311e:	4618      	mov	r0, r3
 8003120:	f000 fe1a 	bl	8003d58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a23      	ldr	r2, [pc, #140]	; (80031b8 <HAL_TIM_PWM_Start+0x14c>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d107      	bne.n	800313e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800313c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a1d      	ldr	r2, [pc, #116]	; (80031b8 <HAL_TIM_PWM_Start+0x14c>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d018      	beq.n	800317a <HAL_TIM_PWM_Start+0x10e>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003150:	d013      	beq.n	800317a <HAL_TIM_PWM_Start+0x10e>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a19      	ldr	r2, [pc, #100]	; (80031bc <HAL_TIM_PWM_Start+0x150>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d00e      	beq.n	800317a <HAL_TIM_PWM_Start+0x10e>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a17      	ldr	r2, [pc, #92]	; (80031c0 <HAL_TIM_PWM_Start+0x154>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d009      	beq.n	800317a <HAL_TIM_PWM_Start+0x10e>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a16      	ldr	r2, [pc, #88]	; (80031c4 <HAL_TIM_PWM_Start+0x158>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d004      	beq.n	800317a <HAL_TIM_PWM_Start+0x10e>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a14      	ldr	r2, [pc, #80]	; (80031c8 <HAL_TIM_PWM_Start+0x15c>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d111      	bne.n	800319e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f003 0307 	and.w	r3, r3, #7
 8003184:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2b06      	cmp	r3, #6
 800318a:	d010      	beq.n	80031ae <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f042 0201 	orr.w	r2, r2, #1
 800319a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800319c:	e007      	b.n	80031ae <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f042 0201 	orr.w	r2, r2, #1
 80031ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3710      	adds	r7, #16
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	40010000 	.word	0x40010000
 80031bc:	40000400 	.word	0x40000400
 80031c0:	40000800 	.word	0x40000800
 80031c4:	40000c00 	.word	0x40000c00
 80031c8:	40014000 	.word	0x40014000

080031cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d122      	bne.n	8003228 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	f003 0302 	and.w	r3, r3, #2
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d11b      	bne.n	8003228 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f06f 0202 	mvn.w	r2, #2
 80031f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2201      	movs	r2, #1
 80031fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	699b      	ldr	r3, [r3, #24]
 8003206:	f003 0303 	and.w	r3, r3, #3
 800320a:	2b00      	cmp	r3, #0
 800320c:	d003      	beq.n	8003216 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 fadd 	bl	80037ce <HAL_TIM_IC_CaptureCallback>
 8003214:	e005      	b.n	8003222 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 facf 	bl	80037ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f000 fae0 	bl	80037e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	f003 0304 	and.w	r3, r3, #4
 8003232:	2b04      	cmp	r3, #4
 8003234:	d122      	bne.n	800327c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	f003 0304 	and.w	r3, r3, #4
 8003240:	2b04      	cmp	r3, #4
 8003242:	d11b      	bne.n	800327c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f06f 0204 	mvn.w	r2, #4
 800324c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2202      	movs	r2, #2
 8003252:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800325e:	2b00      	cmp	r3, #0
 8003260:	d003      	beq.n	800326a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 fab3 	bl	80037ce <HAL_TIM_IC_CaptureCallback>
 8003268:	e005      	b.n	8003276 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 faa5 	bl	80037ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f000 fab6 	bl	80037e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	f003 0308 	and.w	r3, r3, #8
 8003286:	2b08      	cmp	r3, #8
 8003288:	d122      	bne.n	80032d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	f003 0308 	and.w	r3, r3, #8
 8003294:	2b08      	cmp	r3, #8
 8003296:	d11b      	bne.n	80032d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f06f 0208 	mvn.w	r2, #8
 80032a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2204      	movs	r2, #4
 80032a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	69db      	ldr	r3, [r3, #28]
 80032ae:	f003 0303 	and.w	r3, r3, #3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d003      	beq.n	80032be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 fa89 	bl	80037ce <HAL_TIM_IC_CaptureCallback>
 80032bc:	e005      	b.n	80032ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 fa7b 	bl	80037ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f000 fa8c 	bl	80037e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	f003 0310 	and.w	r3, r3, #16
 80032da:	2b10      	cmp	r3, #16
 80032dc:	d122      	bne.n	8003324 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	f003 0310 	and.w	r3, r3, #16
 80032e8:	2b10      	cmp	r3, #16
 80032ea:	d11b      	bne.n	8003324 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f06f 0210 	mvn.w	r2, #16
 80032f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2208      	movs	r2, #8
 80032fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	69db      	ldr	r3, [r3, #28]
 8003302:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003306:	2b00      	cmp	r3, #0
 8003308:	d003      	beq.n	8003312 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 fa5f 	bl	80037ce <HAL_TIM_IC_CaptureCallback>
 8003310:	e005      	b.n	800331e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 fa51 	bl	80037ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f000 fa62 	bl	80037e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	2b01      	cmp	r3, #1
 8003330:	d10e      	bne.n	8003350 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	f003 0301 	and.w	r3, r3, #1
 800333c:	2b01      	cmp	r3, #1
 800333e:	d107      	bne.n	8003350 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f06f 0201 	mvn.w	r2, #1
 8003348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 fa2b 	bl	80037a6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800335a:	2b80      	cmp	r3, #128	; 0x80
 800335c:	d10e      	bne.n	800337c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003368:	2b80      	cmp	r3, #128	; 0x80
 800336a:	d107      	bne.n	800337c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003374:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 fe34 	bl	8003fe4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003386:	2b40      	cmp	r3, #64	; 0x40
 8003388:	d10e      	bne.n	80033a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003394:	2b40      	cmp	r3, #64	; 0x40
 8003396:	d107      	bne.n	80033a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80033a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 fa27 	bl	80037f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	f003 0320 	and.w	r3, r3, #32
 80033b2:	2b20      	cmp	r3, #32
 80033b4:	d10e      	bne.n	80033d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	f003 0320 	and.w	r3, r3, #32
 80033c0:	2b20      	cmp	r3, #32
 80033c2:	d107      	bne.n	80033d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f06f 0220 	mvn.w	r2, #32
 80033cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f7fd fc74 	bl	8000cbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033d4:	bf00      	nop
 80033d6:	3708      	adds	r7, #8
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b086      	sub	sp, #24
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033e8:	2300      	movs	r3, #0
 80033ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d101      	bne.n	80033fa <HAL_TIM_OC_ConfigChannel+0x1e>
 80033f6:	2302      	movs	r3, #2
 80033f8:	e048      	b.n	800348c <HAL_TIM_OC_ConfigChannel+0xb0>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2201      	movs	r2, #1
 80033fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2b0c      	cmp	r3, #12
 8003406:	d839      	bhi.n	800347c <HAL_TIM_OC_ConfigChannel+0xa0>
 8003408:	a201      	add	r2, pc, #4	; (adr r2, 8003410 <HAL_TIM_OC_ConfigChannel+0x34>)
 800340a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800340e:	bf00      	nop
 8003410:	08003445 	.word	0x08003445
 8003414:	0800347d 	.word	0x0800347d
 8003418:	0800347d 	.word	0x0800347d
 800341c:	0800347d 	.word	0x0800347d
 8003420:	08003453 	.word	0x08003453
 8003424:	0800347d 	.word	0x0800347d
 8003428:	0800347d 	.word	0x0800347d
 800342c:	0800347d 	.word	0x0800347d
 8003430:	08003461 	.word	0x08003461
 8003434:	0800347d 	.word	0x0800347d
 8003438:	0800347d 	.word	0x0800347d
 800343c:	0800347d 	.word	0x0800347d
 8003440:	0800346f 	.word	0x0800346f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	68b9      	ldr	r1, [r7, #8]
 800344a:	4618      	mov	r0, r3
 800344c:	f000 fa5e 	bl	800390c <TIM_OC1_SetConfig>
      break;
 8003450:	e017      	b.n	8003482 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68b9      	ldr	r1, [r7, #8]
 8003458:	4618      	mov	r0, r3
 800345a:	f000 fabd 	bl	80039d8 <TIM_OC2_SetConfig>
      break;
 800345e:	e010      	b.n	8003482 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	68b9      	ldr	r1, [r7, #8]
 8003466:	4618      	mov	r0, r3
 8003468:	f000 fb22 	bl	8003ab0 <TIM_OC3_SetConfig>
      break;
 800346c:	e009      	b.n	8003482 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68b9      	ldr	r1, [r7, #8]
 8003474:	4618      	mov	r0, r3
 8003476:	f000 fb85 	bl	8003b84 <TIM_OC4_SetConfig>
      break;
 800347a:	e002      	b.n	8003482 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	75fb      	strb	r3, [r7, #23]
      break;
 8003480:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800348a:	7dfb      	ldrb	r3, [r7, #23]
}
 800348c:	4618      	mov	r0, r3
 800348e:	3718      	adds	r7, #24
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b086      	sub	sp, #24
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034a0:	2300      	movs	r3, #0
 80034a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d101      	bne.n	80034b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80034ae:	2302      	movs	r3, #2
 80034b0:	e0ae      	b.n	8003610 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2201      	movs	r2, #1
 80034b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2b0c      	cmp	r3, #12
 80034be:	f200 809f 	bhi.w	8003600 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80034c2:	a201      	add	r2, pc, #4	; (adr r2, 80034c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80034c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034c8:	080034fd 	.word	0x080034fd
 80034cc:	08003601 	.word	0x08003601
 80034d0:	08003601 	.word	0x08003601
 80034d4:	08003601 	.word	0x08003601
 80034d8:	0800353d 	.word	0x0800353d
 80034dc:	08003601 	.word	0x08003601
 80034e0:	08003601 	.word	0x08003601
 80034e4:	08003601 	.word	0x08003601
 80034e8:	0800357f 	.word	0x0800357f
 80034ec:	08003601 	.word	0x08003601
 80034f0:	08003601 	.word	0x08003601
 80034f4:	08003601 	.word	0x08003601
 80034f8:	080035bf 	.word	0x080035bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	68b9      	ldr	r1, [r7, #8]
 8003502:	4618      	mov	r0, r3
 8003504:	f000 fa02 	bl	800390c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	699a      	ldr	r2, [r3, #24]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f042 0208 	orr.w	r2, r2, #8
 8003516:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	699a      	ldr	r2, [r3, #24]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f022 0204 	bic.w	r2, r2, #4
 8003526:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	6999      	ldr	r1, [r3, #24]
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	691a      	ldr	r2, [r3, #16]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	430a      	orrs	r2, r1
 8003538:	619a      	str	r2, [r3, #24]
      break;
 800353a:	e064      	b.n	8003606 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	68b9      	ldr	r1, [r7, #8]
 8003542:	4618      	mov	r0, r3
 8003544:	f000 fa48 	bl	80039d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	699a      	ldr	r2, [r3, #24]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003556:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	699a      	ldr	r2, [r3, #24]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003566:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	6999      	ldr	r1, [r3, #24]
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	021a      	lsls	r2, r3, #8
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	430a      	orrs	r2, r1
 800357a:	619a      	str	r2, [r3, #24]
      break;
 800357c:	e043      	b.n	8003606 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68b9      	ldr	r1, [r7, #8]
 8003584:	4618      	mov	r0, r3
 8003586:	f000 fa93 	bl	8003ab0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	69da      	ldr	r2, [r3, #28]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f042 0208 	orr.w	r2, r2, #8
 8003598:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	69da      	ldr	r2, [r3, #28]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 0204 	bic.w	r2, r2, #4
 80035a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	69d9      	ldr	r1, [r3, #28]
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	691a      	ldr	r2, [r3, #16]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	430a      	orrs	r2, r1
 80035ba:	61da      	str	r2, [r3, #28]
      break;
 80035bc:	e023      	b.n	8003606 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68b9      	ldr	r1, [r7, #8]
 80035c4:	4618      	mov	r0, r3
 80035c6:	f000 fadd 	bl	8003b84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	69da      	ldr	r2, [r3, #28]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	69da      	ldr	r2, [r3, #28]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	69d9      	ldr	r1, [r3, #28]
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	691b      	ldr	r3, [r3, #16]
 80035f4:	021a      	lsls	r2, r3, #8
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	430a      	orrs	r2, r1
 80035fc:	61da      	str	r2, [r3, #28]
      break;
 80035fe:	e002      	b.n	8003606 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	75fb      	strb	r3, [r7, #23]
      break;
 8003604:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800360e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003610:	4618      	mov	r0, r3
 8003612:	3718      	adds	r7, #24
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003622:	2300      	movs	r3, #0
 8003624:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800362c:	2b01      	cmp	r3, #1
 800362e:	d101      	bne.n	8003634 <HAL_TIM_ConfigClockSource+0x1c>
 8003630:	2302      	movs	r3, #2
 8003632:	e0b4      	b.n	800379e <HAL_TIM_ConfigClockSource+0x186>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2202      	movs	r2, #2
 8003640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003652:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800365a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	68ba      	ldr	r2, [r7, #8]
 8003662:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800366c:	d03e      	beq.n	80036ec <HAL_TIM_ConfigClockSource+0xd4>
 800366e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003672:	f200 8087 	bhi.w	8003784 <HAL_TIM_ConfigClockSource+0x16c>
 8003676:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800367a:	f000 8086 	beq.w	800378a <HAL_TIM_ConfigClockSource+0x172>
 800367e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003682:	d87f      	bhi.n	8003784 <HAL_TIM_ConfigClockSource+0x16c>
 8003684:	2b70      	cmp	r3, #112	; 0x70
 8003686:	d01a      	beq.n	80036be <HAL_TIM_ConfigClockSource+0xa6>
 8003688:	2b70      	cmp	r3, #112	; 0x70
 800368a:	d87b      	bhi.n	8003784 <HAL_TIM_ConfigClockSource+0x16c>
 800368c:	2b60      	cmp	r3, #96	; 0x60
 800368e:	d050      	beq.n	8003732 <HAL_TIM_ConfigClockSource+0x11a>
 8003690:	2b60      	cmp	r3, #96	; 0x60
 8003692:	d877      	bhi.n	8003784 <HAL_TIM_ConfigClockSource+0x16c>
 8003694:	2b50      	cmp	r3, #80	; 0x50
 8003696:	d03c      	beq.n	8003712 <HAL_TIM_ConfigClockSource+0xfa>
 8003698:	2b50      	cmp	r3, #80	; 0x50
 800369a:	d873      	bhi.n	8003784 <HAL_TIM_ConfigClockSource+0x16c>
 800369c:	2b40      	cmp	r3, #64	; 0x40
 800369e:	d058      	beq.n	8003752 <HAL_TIM_ConfigClockSource+0x13a>
 80036a0:	2b40      	cmp	r3, #64	; 0x40
 80036a2:	d86f      	bhi.n	8003784 <HAL_TIM_ConfigClockSource+0x16c>
 80036a4:	2b30      	cmp	r3, #48	; 0x30
 80036a6:	d064      	beq.n	8003772 <HAL_TIM_ConfigClockSource+0x15a>
 80036a8:	2b30      	cmp	r3, #48	; 0x30
 80036aa:	d86b      	bhi.n	8003784 <HAL_TIM_ConfigClockSource+0x16c>
 80036ac:	2b20      	cmp	r3, #32
 80036ae:	d060      	beq.n	8003772 <HAL_TIM_ConfigClockSource+0x15a>
 80036b0:	2b20      	cmp	r3, #32
 80036b2:	d867      	bhi.n	8003784 <HAL_TIM_ConfigClockSource+0x16c>
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d05c      	beq.n	8003772 <HAL_TIM_ConfigClockSource+0x15a>
 80036b8:	2b10      	cmp	r3, #16
 80036ba:	d05a      	beq.n	8003772 <HAL_TIM_ConfigClockSource+0x15a>
 80036bc:	e062      	b.n	8003784 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6818      	ldr	r0, [r3, #0]
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	6899      	ldr	r1, [r3, #8]
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	685a      	ldr	r2, [r3, #4]
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	f000 fb23 	bl	8003d18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80036e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	68ba      	ldr	r2, [r7, #8]
 80036e8:	609a      	str	r2, [r3, #8]
      break;
 80036ea:	e04f      	b.n	800378c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6818      	ldr	r0, [r3, #0]
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	6899      	ldr	r1, [r3, #8]
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	685a      	ldr	r2, [r3, #4]
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	f000 fb0c 	bl	8003d18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	689a      	ldr	r2, [r3, #8]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800370e:	609a      	str	r2, [r3, #8]
      break;
 8003710:	e03c      	b.n	800378c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6818      	ldr	r0, [r3, #0]
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	6859      	ldr	r1, [r3, #4]
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	461a      	mov	r2, r3
 8003720:	f000 fa80 	bl	8003c24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2150      	movs	r1, #80	; 0x50
 800372a:	4618      	mov	r0, r3
 800372c:	f000 fad9 	bl	8003ce2 <TIM_ITRx_SetConfig>
      break;
 8003730:	e02c      	b.n	800378c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6818      	ldr	r0, [r3, #0]
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	6859      	ldr	r1, [r3, #4]
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	461a      	mov	r2, r3
 8003740:	f000 fa9f 	bl	8003c82 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2160      	movs	r1, #96	; 0x60
 800374a:	4618      	mov	r0, r3
 800374c:	f000 fac9 	bl	8003ce2 <TIM_ITRx_SetConfig>
      break;
 8003750:	e01c      	b.n	800378c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6818      	ldr	r0, [r3, #0]
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	6859      	ldr	r1, [r3, #4]
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	461a      	mov	r2, r3
 8003760:	f000 fa60 	bl	8003c24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2140      	movs	r1, #64	; 0x40
 800376a:	4618      	mov	r0, r3
 800376c:	f000 fab9 	bl	8003ce2 <TIM_ITRx_SetConfig>
      break;
 8003770:	e00c      	b.n	800378c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4619      	mov	r1, r3
 800377c:	4610      	mov	r0, r2
 800377e:	f000 fab0 	bl	8003ce2 <TIM_ITRx_SetConfig>
      break;
 8003782:	e003      	b.n	800378c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	73fb      	strb	r3, [r7, #15]
      break;
 8003788:	e000      	b.n	800378c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800378a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800379c:	7bfb      	ldrb	r3, [r7, #15]
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037a6:	b480      	push	{r7}
 80037a8:	b083      	sub	sp, #12
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80037ae:	bf00      	nop
 80037b0:	370c      	adds	r7, #12
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr

080037ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037ba:	b480      	push	{r7}
 80037bc:	b083      	sub	sp, #12
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037c2:	bf00      	nop
 80037c4:	370c      	adds	r7, #12
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr

080037ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037ce:	b480      	push	{r7}
 80037d0:	b083      	sub	sp, #12
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037d6:	bf00      	nop
 80037d8:	370c      	adds	r7, #12
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr

080037e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037e2:	b480      	push	{r7}
 80037e4:	b083      	sub	sp, #12
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037ea:	bf00      	nop
 80037ec:	370c      	adds	r7, #12
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr

080037f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037f6:	b480      	push	{r7}
 80037f8:	b083      	sub	sp, #12
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037fe:	bf00      	nop
 8003800:	370c      	adds	r7, #12
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
	...

0800380c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800380c:	b480      	push	{r7}
 800380e:	b085      	sub	sp, #20
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4a34      	ldr	r2, [pc, #208]	; (80038f0 <TIM_Base_SetConfig+0xe4>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d00f      	beq.n	8003844 <TIM_Base_SetConfig+0x38>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800382a:	d00b      	beq.n	8003844 <TIM_Base_SetConfig+0x38>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a31      	ldr	r2, [pc, #196]	; (80038f4 <TIM_Base_SetConfig+0xe8>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d007      	beq.n	8003844 <TIM_Base_SetConfig+0x38>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4a30      	ldr	r2, [pc, #192]	; (80038f8 <TIM_Base_SetConfig+0xec>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d003      	beq.n	8003844 <TIM_Base_SetConfig+0x38>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a2f      	ldr	r2, [pc, #188]	; (80038fc <TIM_Base_SetConfig+0xf0>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d108      	bne.n	8003856 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800384a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	68fa      	ldr	r2, [r7, #12]
 8003852:	4313      	orrs	r3, r2
 8003854:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a25      	ldr	r2, [pc, #148]	; (80038f0 <TIM_Base_SetConfig+0xe4>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d01b      	beq.n	8003896 <TIM_Base_SetConfig+0x8a>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003864:	d017      	beq.n	8003896 <TIM_Base_SetConfig+0x8a>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a22      	ldr	r2, [pc, #136]	; (80038f4 <TIM_Base_SetConfig+0xe8>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d013      	beq.n	8003896 <TIM_Base_SetConfig+0x8a>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a21      	ldr	r2, [pc, #132]	; (80038f8 <TIM_Base_SetConfig+0xec>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d00f      	beq.n	8003896 <TIM_Base_SetConfig+0x8a>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a20      	ldr	r2, [pc, #128]	; (80038fc <TIM_Base_SetConfig+0xf0>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d00b      	beq.n	8003896 <TIM_Base_SetConfig+0x8a>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a1f      	ldr	r2, [pc, #124]	; (8003900 <TIM_Base_SetConfig+0xf4>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d007      	beq.n	8003896 <TIM_Base_SetConfig+0x8a>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a1e      	ldr	r2, [pc, #120]	; (8003904 <TIM_Base_SetConfig+0xf8>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d003      	beq.n	8003896 <TIM_Base_SetConfig+0x8a>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a1d      	ldr	r2, [pc, #116]	; (8003908 <TIM_Base_SetConfig+0xfc>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d108      	bne.n	80038a8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800389c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	68fa      	ldr	r2, [r7, #12]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	68fa      	ldr	r2, [r7, #12]
 80038ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	689a      	ldr	r2, [r3, #8]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a08      	ldr	r2, [pc, #32]	; (80038f0 <TIM_Base_SetConfig+0xe4>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d103      	bne.n	80038dc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	691a      	ldr	r2, [r3, #16]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	615a      	str	r2, [r3, #20]
}
 80038e2:	bf00      	nop
 80038e4:	3714      	adds	r7, #20
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	40010000 	.word	0x40010000
 80038f4:	40000400 	.word	0x40000400
 80038f8:	40000800 	.word	0x40000800
 80038fc:	40000c00 	.word	0x40000c00
 8003900:	40014000 	.word	0x40014000
 8003904:	40014400 	.word	0x40014400
 8003908:	40014800 	.word	0x40014800

0800390c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800390c:	b480      	push	{r7}
 800390e:	b087      	sub	sp, #28
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a1b      	ldr	r3, [r3, #32]
 800391a:	f023 0201 	bic.w	r2, r3, #1
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a1b      	ldr	r3, [r3, #32]
 8003926:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800393a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f023 0303 	bic.w	r3, r3, #3
 8003942:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68fa      	ldr	r2, [r7, #12]
 800394a:	4313      	orrs	r3, r2
 800394c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	f023 0302 	bic.w	r3, r3, #2
 8003954:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	697a      	ldr	r2, [r7, #20]
 800395c:	4313      	orrs	r3, r2
 800395e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a1c      	ldr	r2, [pc, #112]	; (80039d4 <TIM_OC1_SetConfig+0xc8>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d10c      	bne.n	8003982 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	f023 0308 	bic.w	r3, r3, #8
 800396e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	697a      	ldr	r2, [r7, #20]
 8003976:	4313      	orrs	r3, r2
 8003978:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	f023 0304 	bic.w	r3, r3, #4
 8003980:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a13      	ldr	r2, [pc, #76]	; (80039d4 <TIM_OC1_SetConfig+0xc8>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d111      	bne.n	80039ae <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003990:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003998:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	699b      	ldr	r3, [r3, #24]
 80039a8:	693a      	ldr	r2, [r7, #16]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	693a      	ldr	r2, [r7, #16]
 80039b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	685a      	ldr	r2, [r3, #4]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	697a      	ldr	r2, [r7, #20]
 80039c6:	621a      	str	r2, [r3, #32]
}
 80039c8:	bf00      	nop
 80039ca:	371c      	adds	r7, #28
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr
 80039d4:	40010000 	.word	0x40010000

080039d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039d8:	b480      	push	{r7}
 80039da:	b087      	sub	sp, #28
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a1b      	ldr	r3, [r3, #32]
 80039e6:	f023 0210 	bic.w	r2, r3, #16
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a1b      	ldr	r3, [r3, #32]
 80039f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	021b      	lsls	r3, r3, #8
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	f023 0320 	bic.w	r3, r3, #32
 8003a22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	011b      	lsls	r3, r3, #4
 8003a2a:	697a      	ldr	r2, [r7, #20]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a1e      	ldr	r2, [pc, #120]	; (8003aac <TIM_OC2_SetConfig+0xd4>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d10d      	bne.n	8003a54 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	011b      	lsls	r3, r3, #4
 8003a46:	697a      	ldr	r2, [r7, #20]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a52:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4a15      	ldr	r2, [pc, #84]	; (8003aac <TIM_OC2_SetConfig+0xd4>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d113      	bne.n	8003a84 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	695b      	ldr	r3, [r3, #20]
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	693a      	ldr	r2, [r7, #16]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	699b      	ldr	r3, [r3, #24]
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	68fa      	ldr	r2, [r7, #12]
 8003a8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	685a      	ldr	r2, [r3, #4]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	697a      	ldr	r2, [r7, #20]
 8003a9c:	621a      	str	r2, [r3, #32]
}
 8003a9e:	bf00      	nop
 8003aa0:	371c      	adds	r7, #28
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop
 8003aac:	40010000 	.word	0x40010000

08003ab0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b087      	sub	sp, #28
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a1b      	ldr	r3, [r3, #32]
 8003abe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a1b      	ldr	r3, [r3, #32]
 8003aca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	69db      	ldr	r3, [r3, #28]
 8003ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ade:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f023 0303 	bic.w	r3, r3, #3
 8003ae6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003af8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	021b      	lsls	r3, r3, #8
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a1d      	ldr	r2, [pc, #116]	; (8003b80 <TIM_OC3_SetConfig+0xd0>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d10d      	bne.n	8003b2a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	021b      	lsls	r3, r3, #8
 8003b1c:	697a      	ldr	r2, [r7, #20]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a14      	ldr	r2, [pc, #80]	; (8003b80 <TIM_OC3_SetConfig+0xd0>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d113      	bne.n	8003b5a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	011b      	lsls	r3, r3, #4
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	011b      	lsls	r3, r3, #4
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	693a      	ldr	r2, [r7, #16]
 8003b5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	685a      	ldr	r2, [r3, #4]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	697a      	ldr	r2, [r7, #20]
 8003b72:	621a      	str	r2, [r3, #32]
}
 8003b74:	bf00      	nop
 8003b76:	371c      	adds	r7, #28
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr
 8003b80:	40010000 	.word	0x40010000

08003b84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b087      	sub	sp, #28
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	69db      	ldr	r3, [r3, #28]
 8003baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	021b      	lsls	r3, r3, #8
 8003bc2:	68fa      	ldr	r2, [r7, #12]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003bce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	031b      	lsls	r3, r3, #12
 8003bd6:	693a      	ldr	r2, [r7, #16]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a10      	ldr	r2, [pc, #64]	; (8003c20 <TIM_OC4_SetConfig+0x9c>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d109      	bne.n	8003bf8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	695b      	ldr	r3, [r3, #20]
 8003bf0:	019b      	lsls	r3, r3, #6
 8003bf2:	697a      	ldr	r2, [r7, #20]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	697a      	ldr	r2, [r7, #20]
 8003bfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	68fa      	ldr	r2, [r7, #12]
 8003c02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	685a      	ldr	r2, [r3, #4]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	621a      	str	r2, [r3, #32]
}
 8003c12:	bf00      	nop
 8003c14:	371c      	adds	r7, #28
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	40010000 	.word	0x40010000

08003c24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b087      	sub	sp, #28
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	60b9      	str	r1, [r7, #8]
 8003c2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6a1b      	ldr	r3, [r3, #32]
 8003c34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6a1b      	ldr	r3, [r3, #32]
 8003c3a:	f023 0201 	bic.w	r2, r3, #1
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	011b      	lsls	r3, r3, #4
 8003c54:	693a      	ldr	r2, [r7, #16]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	f023 030a 	bic.w	r3, r3, #10
 8003c60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c62:	697a      	ldr	r2, [r7, #20]
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	697a      	ldr	r2, [r7, #20]
 8003c74:	621a      	str	r2, [r3, #32]
}
 8003c76:	bf00      	nop
 8003c78:	371c      	adds	r7, #28
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr

08003c82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c82:	b480      	push	{r7}
 8003c84:	b087      	sub	sp, #28
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	60f8      	str	r0, [r7, #12]
 8003c8a:	60b9      	str	r1, [r7, #8]
 8003c8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	f023 0210 	bic.w	r2, r3, #16
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6a1b      	ldr	r3, [r3, #32]
 8003ca4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003cac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	031b      	lsls	r3, r3, #12
 8003cb2:	697a      	ldr	r2, [r7, #20]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003cbe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	011b      	lsls	r3, r3, #4
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	697a      	ldr	r2, [r7, #20]
 8003cce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	693a      	ldr	r2, [r7, #16]
 8003cd4:	621a      	str	r2, [r3, #32]
}
 8003cd6:	bf00      	nop
 8003cd8:	371c      	adds	r7, #28
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr

08003ce2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	b085      	sub	sp, #20
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
 8003cea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cf8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003cfa:	683a      	ldr	r2, [r7, #0]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	f043 0307 	orr.w	r3, r3, #7
 8003d04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	68fa      	ldr	r2, [r7, #12]
 8003d0a:	609a      	str	r2, [r3, #8]
}
 8003d0c:	bf00      	nop
 8003d0e:	3714      	adds	r7, #20
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b087      	sub	sp, #28
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	607a      	str	r2, [r7, #4]
 8003d24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	021a      	lsls	r2, r3, #8
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	431a      	orrs	r2, r3
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	697a      	ldr	r2, [r7, #20]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	697a      	ldr	r2, [r7, #20]
 8003d4a:	609a      	str	r2, [r3, #8]
}
 8003d4c:	bf00      	nop
 8003d4e:	371c      	adds	r7, #28
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b087      	sub	sp, #28
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	f003 031f 	and.w	r3, r3, #31
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6a1a      	ldr	r2, [r3, #32]
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	43db      	mvns	r3, r3
 8003d7a:	401a      	ands	r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6a1a      	ldr	r2, [r3, #32]
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	f003 031f 	and.w	r3, r3, #31
 8003d8a:	6879      	ldr	r1, [r7, #4]
 8003d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d90:	431a      	orrs	r2, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	621a      	str	r2, [r3, #32]
}
 8003d96:	bf00      	nop
 8003d98:	371c      	adds	r7, #28
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr

08003da2 <HAL_TIMEx_ConfigCommutEvent_IT>:
  *            @arg TIM_COMMUTATION_SOFTWARE:  Commutation source is set by software using the COMG bit
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigCommutEvent_IT(TIM_HandleTypeDef *htim, uint32_t  InputTrigger,
                                                 uint32_t  CommutationSource)
{
 8003da2:	b480      	push	{r7}
 8003da4:	b085      	sub	sp, #20
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	60f8      	str	r0, [r7, #12]
 8003daa:	60b9      	str	r1, [r7, #8]
 8003dac:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_COMMUTATION_EVENT_INSTANCE(htim->Instance));
  assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));

  __HAL_LOCK(htim);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d101      	bne.n	8003dbc <HAL_TIMEx_ConfigCommutEvent_IT+0x1a>
 8003db8:	2302      	movs	r3, #2
 8003dba:	e04c      	b.n	8003e56 <HAL_TIMEx_ConfigCommutEvent_IT+0xb4>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d008      	beq.n	8003ddc <HAL_TIMEx_ConfigCommutEvent_IT+0x3a>
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	2b10      	cmp	r3, #16
 8003dce:	d005      	beq.n	8003ddc <HAL_TIMEx_ConfigCommutEvent_IT+0x3a>
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	2b20      	cmp	r3, #32
 8003dd4:	d002      	beq.n	8003ddc <HAL_TIMEx_ConfigCommutEvent_IT+0x3a>
      (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	2b30      	cmp	r3, #48	; 0x30
 8003dda:	d10f      	bne.n	8003dfc <HAL_TIMEx_ConfigCommutEvent_IT+0x5a>
  {
    /* Select the Input trigger */
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	689a      	ldr	r2, [r3, #8]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003dea:	609a      	str	r2, [r3, #8]
    htim->Instance->SMCR |= InputTrigger;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	6899      	ldr	r1, [r3, #8]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68ba      	ldr	r2, [r7, #8]
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	609a      	str	r2, [r3, #8]
  }

  /* Select the Capture Compare preload feature */
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	685a      	ldr	r2, [r3, #4]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f042 0201 	orr.w	r2, r2, #1
 8003e0a:	605a      	str	r2, [r3, #4]
  /* Select the Commutation event source */
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	685a      	ldr	r2, [r3, #4]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f022 0204 	bic.w	r2, r2, #4
 8003e1a:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= CommutationSource;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	6859      	ldr	r1, [r3, #4]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	430a      	orrs	r2, r1
 8003e2a:	605a      	str	r2, [r3, #4]

  /* Disable Commutation DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_COM);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68da      	ldr	r2, [r3, #12]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e3a:	60da      	str	r2, [r3, #12]

  /* Enable the Commutation Interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_COM);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	68da      	ldr	r2, [r3, #12]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f042 0220 	orr.w	r2, r2, #32
 8003e4a:	60da      	str	r2, [r3, #12]

  __HAL_UNLOCK(htim);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3714      	adds	r7, #20
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
	...

08003e64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b085      	sub	sp, #20
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d101      	bne.n	8003e7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e78:	2302      	movs	r3, #2
 8003e7a:	e050      	b.n	8003f1e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2202      	movs	r2, #2
 8003e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ea2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68fa      	ldr	r2, [r7, #12]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a1c      	ldr	r2, [pc, #112]	; (8003f2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d018      	beq.n	8003ef2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ec8:	d013      	beq.n	8003ef2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a18      	ldr	r2, [pc, #96]	; (8003f30 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d00e      	beq.n	8003ef2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a16      	ldr	r2, [pc, #88]	; (8003f34 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d009      	beq.n	8003ef2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a15      	ldr	r2, [pc, #84]	; (8003f38 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d004      	beq.n	8003ef2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a13      	ldr	r2, [pc, #76]	; (8003f3c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d10c      	bne.n	8003f0c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ef8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	68ba      	ldr	r2, [r7, #8]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68ba      	ldr	r2, [r7, #8]
 8003f0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3714      	adds	r7, #20
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	40010000 	.word	0x40010000
 8003f30:	40000400 	.word	0x40000400
 8003f34:	40000800 	.word	0x40000800
 8003f38:	40000c00 	.word	0x40000c00
 8003f3c:	40014000 	.word	0x40014000

08003f40 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b085      	sub	sp, #20
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d101      	bne.n	8003f5c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003f58:	2302      	movs	r3, #2
 8003f5a:	e03d      	b.n	8003fd8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	695b      	ldr	r3, [r3, #20]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	69db      	ldr	r3, [r3, #28]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3714      	adds	r7, #20
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003fec:	bf00      	nop
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d101      	bne.n	800400a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e03f      	b.n	800408a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004010:	b2db      	uxtb	r3, r3
 8004012:	2b00      	cmp	r3, #0
 8004014:	d106      	bne.n	8004024 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f7fd f9f2 	bl	8001408 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2224      	movs	r2, #36	; 0x24
 8004028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68da      	ldr	r2, [r3, #12]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800403a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f000 f929 	bl	8004294 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	691a      	ldr	r2, [r3, #16]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004050:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	695a      	ldr	r2, [r3, #20]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004060:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68da      	ldr	r2, [r3, #12]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004070:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2220      	movs	r2, #32
 800407c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2220      	movs	r2, #32
 8004084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3708      	adds	r7, #8
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}

08004092 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004092:	b580      	push	{r7, lr}
 8004094:	b08a      	sub	sp, #40	; 0x28
 8004096:	af02      	add	r7, sp, #8
 8004098:	60f8      	str	r0, [r7, #12]
 800409a:	60b9      	str	r1, [r7, #8]
 800409c:	603b      	str	r3, [r7, #0]
 800409e:	4613      	mov	r3, r2
 80040a0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80040a2:	2300      	movs	r3, #0
 80040a4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	2b20      	cmp	r3, #32
 80040b0:	d17c      	bne.n	80041ac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d002      	beq.n	80040be <HAL_UART_Transmit+0x2c>
 80040b8:	88fb      	ldrh	r3, [r7, #6]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d101      	bne.n	80040c2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e075      	b.n	80041ae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d101      	bne.n	80040d0 <HAL_UART_Transmit+0x3e>
 80040cc:	2302      	movs	r3, #2
 80040ce:	e06e      	b.n	80041ae <HAL_UART_Transmit+0x11c>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2200      	movs	r2, #0
 80040dc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2221      	movs	r2, #33	; 0x21
 80040e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040e6:	f7fd fb51 	bl	800178c <HAL_GetTick>
 80040ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	88fa      	ldrh	r2, [r7, #6]
 80040f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	88fa      	ldrh	r2, [r7, #6]
 80040f6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004100:	d108      	bne.n	8004114 <HAL_UART_Transmit+0x82>
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d104      	bne.n	8004114 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800410a:	2300      	movs	r3, #0
 800410c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	61bb      	str	r3, [r7, #24]
 8004112:	e003      	b.n	800411c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004118:	2300      	movs	r3, #0
 800411a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004124:	e02a      	b.n	800417c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	9300      	str	r3, [sp, #0]
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	2200      	movs	r2, #0
 800412e:	2180      	movs	r1, #128	; 0x80
 8004130:	68f8      	ldr	r0, [r7, #12]
 8004132:	f000 f840 	bl	80041b6 <UART_WaitOnFlagUntilTimeout>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d001      	beq.n	8004140 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e036      	b.n	80041ae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d10b      	bne.n	800415e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	881b      	ldrh	r3, [r3, #0]
 800414a:	461a      	mov	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004154:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	3302      	adds	r3, #2
 800415a:	61bb      	str	r3, [r7, #24]
 800415c:	e007      	b.n	800416e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	781a      	ldrb	r2, [r3, #0]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	3301      	adds	r3, #1
 800416c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004172:	b29b      	uxth	r3, r3
 8004174:	3b01      	subs	r3, #1
 8004176:	b29a      	uxth	r2, r3
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004180:	b29b      	uxth	r3, r3
 8004182:	2b00      	cmp	r3, #0
 8004184:	d1cf      	bne.n	8004126 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	9300      	str	r3, [sp, #0]
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	2200      	movs	r2, #0
 800418e:	2140      	movs	r1, #64	; 0x40
 8004190:	68f8      	ldr	r0, [r7, #12]
 8004192:	f000 f810 	bl	80041b6 <UART_WaitOnFlagUntilTimeout>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d001      	beq.n	80041a0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e006      	b.n	80041ae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2220      	movs	r2, #32
 80041a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80041a8:	2300      	movs	r3, #0
 80041aa:	e000      	b.n	80041ae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80041ac:	2302      	movs	r3, #2
  }
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3720      	adds	r7, #32
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}

080041b6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b090      	sub	sp, #64	; 0x40
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	60f8      	str	r0, [r7, #12]
 80041be:	60b9      	str	r1, [r7, #8]
 80041c0:	603b      	str	r3, [r7, #0]
 80041c2:	4613      	mov	r3, r2
 80041c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041c6:	e050      	b.n	800426a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041ce:	d04c      	beq.n	800426a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80041d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d007      	beq.n	80041e6 <UART_WaitOnFlagUntilTimeout+0x30>
 80041d6:	f7fd fad9 	bl	800178c <HAL_GetTick>
 80041da:	4602      	mov	r2, r0
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d241      	bcs.n	800426a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	330c      	adds	r3, #12
 80041ec:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f0:	e853 3f00 	ldrex	r3, [r3]
 80041f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80041fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	330c      	adds	r3, #12
 8004204:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004206:	637a      	str	r2, [r7, #52]	; 0x34
 8004208:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800420a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800420c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800420e:	e841 2300 	strex	r3, r2, [r1]
 8004212:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1e5      	bne.n	80041e6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	3314      	adds	r3, #20
 8004220:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	e853 3f00 	ldrex	r3, [r3]
 8004228:	613b      	str	r3, [r7, #16]
   return(result);
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	f023 0301 	bic.w	r3, r3, #1
 8004230:	63bb      	str	r3, [r7, #56]	; 0x38
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	3314      	adds	r3, #20
 8004238:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800423a:	623a      	str	r2, [r7, #32]
 800423c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800423e:	69f9      	ldr	r1, [r7, #28]
 8004240:	6a3a      	ldr	r2, [r7, #32]
 8004242:	e841 2300 	strex	r3, r2, [r1]
 8004246:	61bb      	str	r3, [r7, #24]
   return(result);
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1e5      	bne.n	800421a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2220      	movs	r2, #32
 8004252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2220      	movs	r2, #32
 800425a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	e00f      	b.n	800428a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	4013      	ands	r3, r2
 8004274:	68ba      	ldr	r2, [r7, #8]
 8004276:	429a      	cmp	r2, r3
 8004278:	bf0c      	ite	eq
 800427a:	2301      	moveq	r3, #1
 800427c:	2300      	movne	r3, #0
 800427e:	b2db      	uxtb	r3, r3
 8004280:	461a      	mov	r2, r3
 8004282:	79fb      	ldrb	r3, [r7, #7]
 8004284:	429a      	cmp	r2, r3
 8004286:	d09f      	beq.n	80041c8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3740      	adds	r7, #64	; 0x40
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
	...

08004294 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004294:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004298:	b0c0      	sub	sp, #256	; 0x100
 800429a:	af00      	add	r7, sp, #0
 800429c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	691b      	ldr	r3, [r3, #16]
 80042a8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80042ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042b0:	68d9      	ldr	r1, [r3, #12]
 80042b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	ea40 0301 	orr.w	r3, r0, r1
 80042bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042c2:	689a      	ldr	r2, [r3, #8]
 80042c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	431a      	orrs	r2, r3
 80042cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042d0:	695b      	ldr	r3, [r3, #20]
 80042d2:	431a      	orrs	r2, r3
 80042d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042d8:	69db      	ldr	r3, [r3, #28]
 80042da:	4313      	orrs	r3, r2
 80042dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80042e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80042ec:	f021 010c 	bic.w	r1, r1, #12
 80042f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80042fa:	430b      	orrs	r3, r1
 80042fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	695b      	ldr	r3, [r3, #20]
 8004306:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800430a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800430e:	6999      	ldr	r1, [r3, #24]
 8004310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	ea40 0301 	orr.w	r3, r0, r1
 800431a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800431c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	4b8f      	ldr	r3, [pc, #572]	; (8004560 <UART_SetConfig+0x2cc>)
 8004324:	429a      	cmp	r2, r3
 8004326:	d005      	beq.n	8004334 <UART_SetConfig+0xa0>
 8004328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	4b8d      	ldr	r3, [pc, #564]	; (8004564 <UART_SetConfig+0x2d0>)
 8004330:	429a      	cmp	r2, r3
 8004332:	d104      	bne.n	800433e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004334:	f7fe fd3e 	bl	8002db4 <HAL_RCC_GetPCLK2Freq>
 8004338:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800433c:	e003      	b.n	8004346 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800433e:	f7fe fd25 	bl	8002d8c <HAL_RCC_GetPCLK1Freq>
 8004342:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800434a:	69db      	ldr	r3, [r3, #28]
 800434c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004350:	f040 810c 	bne.w	800456c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004354:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004358:	2200      	movs	r2, #0
 800435a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800435e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004362:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004366:	4622      	mov	r2, r4
 8004368:	462b      	mov	r3, r5
 800436a:	1891      	adds	r1, r2, r2
 800436c:	65b9      	str	r1, [r7, #88]	; 0x58
 800436e:	415b      	adcs	r3, r3
 8004370:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004372:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004376:	4621      	mov	r1, r4
 8004378:	eb12 0801 	adds.w	r8, r2, r1
 800437c:	4629      	mov	r1, r5
 800437e:	eb43 0901 	adc.w	r9, r3, r1
 8004382:	f04f 0200 	mov.w	r2, #0
 8004386:	f04f 0300 	mov.w	r3, #0
 800438a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800438e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004392:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004396:	4690      	mov	r8, r2
 8004398:	4699      	mov	r9, r3
 800439a:	4623      	mov	r3, r4
 800439c:	eb18 0303 	adds.w	r3, r8, r3
 80043a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80043a4:	462b      	mov	r3, r5
 80043a6:	eb49 0303 	adc.w	r3, r9, r3
 80043aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80043ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80043ba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80043be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80043c2:	460b      	mov	r3, r1
 80043c4:	18db      	adds	r3, r3, r3
 80043c6:	653b      	str	r3, [r7, #80]	; 0x50
 80043c8:	4613      	mov	r3, r2
 80043ca:	eb42 0303 	adc.w	r3, r2, r3
 80043ce:	657b      	str	r3, [r7, #84]	; 0x54
 80043d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80043d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80043d8:	f7fb ff52 	bl	8000280 <__aeabi_uldivmod>
 80043dc:	4602      	mov	r2, r0
 80043de:	460b      	mov	r3, r1
 80043e0:	4b61      	ldr	r3, [pc, #388]	; (8004568 <UART_SetConfig+0x2d4>)
 80043e2:	fba3 2302 	umull	r2, r3, r3, r2
 80043e6:	095b      	lsrs	r3, r3, #5
 80043e8:	011c      	lsls	r4, r3, #4
 80043ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043ee:	2200      	movs	r2, #0
 80043f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80043f4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80043f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80043fc:	4642      	mov	r2, r8
 80043fe:	464b      	mov	r3, r9
 8004400:	1891      	adds	r1, r2, r2
 8004402:	64b9      	str	r1, [r7, #72]	; 0x48
 8004404:	415b      	adcs	r3, r3
 8004406:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004408:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800440c:	4641      	mov	r1, r8
 800440e:	eb12 0a01 	adds.w	sl, r2, r1
 8004412:	4649      	mov	r1, r9
 8004414:	eb43 0b01 	adc.w	fp, r3, r1
 8004418:	f04f 0200 	mov.w	r2, #0
 800441c:	f04f 0300 	mov.w	r3, #0
 8004420:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004424:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004428:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800442c:	4692      	mov	sl, r2
 800442e:	469b      	mov	fp, r3
 8004430:	4643      	mov	r3, r8
 8004432:	eb1a 0303 	adds.w	r3, sl, r3
 8004436:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800443a:	464b      	mov	r3, r9
 800443c:	eb4b 0303 	adc.w	r3, fp, r3
 8004440:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004450:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004454:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004458:	460b      	mov	r3, r1
 800445a:	18db      	adds	r3, r3, r3
 800445c:	643b      	str	r3, [r7, #64]	; 0x40
 800445e:	4613      	mov	r3, r2
 8004460:	eb42 0303 	adc.w	r3, r2, r3
 8004464:	647b      	str	r3, [r7, #68]	; 0x44
 8004466:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800446a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800446e:	f7fb ff07 	bl	8000280 <__aeabi_uldivmod>
 8004472:	4602      	mov	r2, r0
 8004474:	460b      	mov	r3, r1
 8004476:	4611      	mov	r1, r2
 8004478:	4b3b      	ldr	r3, [pc, #236]	; (8004568 <UART_SetConfig+0x2d4>)
 800447a:	fba3 2301 	umull	r2, r3, r3, r1
 800447e:	095b      	lsrs	r3, r3, #5
 8004480:	2264      	movs	r2, #100	; 0x64
 8004482:	fb02 f303 	mul.w	r3, r2, r3
 8004486:	1acb      	subs	r3, r1, r3
 8004488:	00db      	lsls	r3, r3, #3
 800448a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800448e:	4b36      	ldr	r3, [pc, #216]	; (8004568 <UART_SetConfig+0x2d4>)
 8004490:	fba3 2302 	umull	r2, r3, r3, r2
 8004494:	095b      	lsrs	r3, r3, #5
 8004496:	005b      	lsls	r3, r3, #1
 8004498:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800449c:	441c      	add	r4, r3
 800449e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044a2:	2200      	movs	r2, #0
 80044a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044a8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80044ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80044b0:	4642      	mov	r2, r8
 80044b2:	464b      	mov	r3, r9
 80044b4:	1891      	adds	r1, r2, r2
 80044b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80044b8:	415b      	adcs	r3, r3
 80044ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80044c0:	4641      	mov	r1, r8
 80044c2:	1851      	adds	r1, r2, r1
 80044c4:	6339      	str	r1, [r7, #48]	; 0x30
 80044c6:	4649      	mov	r1, r9
 80044c8:	414b      	adcs	r3, r1
 80044ca:	637b      	str	r3, [r7, #52]	; 0x34
 80044cc:	f04f 0200 	mov.w	r2, #0
 80044d0:	f04f 0300 	mov.w	r3, #0
 80044d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80044d8:	4659      	mov	r1, fp
 80044da:	00cb      	lsls	r3, r1, #3
 80044dc:	4651      	mov	r1, sl
 80044de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044e2:	4651      	mov	r1, sl
 80044e4:	00ca      	lsls	r2, r1, #3
 80044e6:	4610      	mov	r0, r2
 80044e8:	4619      	mov	r1, r3
 80044ea:	4603      	mov	r3, r0
 80044ec:	4642      	mov	r2, r8
 80044ee:	189b      	adds	r3, r3, r2
 80044f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80044f4:	464b      	mov	r3, r9
 80044f6:	460a      	mov	r2, r1
 80044f8:	eb42 0303 	adc.w	r3, r2, r3
 80044fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800450c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004510:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004514:	460b      	mov	r3, r1
 8004516:	18db      	adds	r3, r3, r3
 8004518:	62bb      	str	r3, [r7, #40]	; 0x28
 800451a:	4613      	mov	r3, r2
 800451c:	eb42 0303 	adc.w	r3, r2, r3
 8004520:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004522:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004526:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800452a:	f7fb fea9 	bl	8000280 <__aeabi_uldivmod>
 800452e:	4602      	mov	r2, r0
 8004530:	460b      	mov	r3, r1
 8004532:	4b0d      	ldr	r3, [pc, #52]	; (8004568 <UART_SetConfig+0x2d4>)
 8004534:	fba3 1302 	umull	r1, r3, r3, r2
 8004538:	095b      	lsrs	r3, r3, #5
 800453a:	2164      	movs	r1, #100	; 0x64
 800453c:	fb01 f303 	mul.w	r3, r1, r3
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	00db      	lsls	r3, r3, #3
 8004544:	3332      	adds	r3, #50	; 0x32
 8004546:	4a08      	ldr	r2, [pc, #32]	; (8004568 <UART_SetConfig+0x2d4>)
 8004548:	fba2 2303 	umull	r2, r3, r2, r3
 800454c:	095b      	lsrs	r3, r3, #5
 800454e:	f003 0207 	and.w	r2, r3, #7
 8004552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4422      	add	r2, r4
 800455a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800455c:	e105      	b.n	800476a <UART_SetConfig+0x4d6>
 800455e:	bf00      	nop
 8004560:	40011000 	.word	0x40011000
 8004564:	40011400 	.word	0x40011400
 8004568:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800456c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004570:	2200      	movs	r2, #0
 8004572:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004576:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800457a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800457e:	4642      	mov	r2, r8
 8004580:	464b      	mov	r3, r9
 8004582:	1891      	adds	r1, r2, r2
 8004584:	6239      	str	r1, [r7, #32]
 8004586:	415b      	adcs	r3, r3
 8004588:	627b      	str	r3, [r7, #36]	; 0x24
 800458a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800458e:	4641      	mov	r1, r8
 8004590:	1854      	adds	r4, r2, r1
 8004592:	4649      	mov	r1, r9
 8004594:	eb43 0501 	adc.w	r5, r3, r1
 8004598:	f04f 0200 	mov.w	r2, #0
 800459c:	f04f 0300 	mov.w	r3, #0
 80045a0:	00eb      	lsls	r3, r5, #3
 80045a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045a6:	00e2      	lsls	r2, r4, #3
 80045a8:	4614      	mov	r4, r2
 80045aa:	461d      	mov	r5, r3
 80045ac:	4643      	mov	r3, r8
 80045ae:	18e3      	adds	r3, r4, r3
 80045b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80045b4:	464b      	mov	r3, r9
 80045b6:	eb45 0303 	adc.w	r3, r5, r3
 80045ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80045be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80045ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80045ce:	f04f 0200 	mov.w	r2, #0
 80045d2:	f04f 0300 	mov.w	r3, #0
 80045d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80045da:	4629      	mov	r1, r5
 80045dc:	008b      	lsls	r3, r1, #2
 80045de:	4621      	mov	r1, r4
 80045e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045e4:	4621      	mov	r1, r4
 80045e6:	008a      	lsls	r2, r1, #2
 80045e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80045ec:	f7fb fe48 	bl	8000280 <__aeabi_uldivmod>
 80045f0:	4602      	mov	r2, r0
 80045f2:	460b      	mov	r3, r1
 80045f4:	4b60      	ldr	r3, [pc, #384]	; (8004778 <UART_SetConfig+0x4e4>)
 80045f6:	fba3 2302 	umull	r2, r3, r3, r2
 80045fa:	095b      	lsrs	r3, r3, #5
 80045fc:	011c      	lsls	r4, r3, #4
 80045fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004602:	2200      	movs	r2, #0
 8004604:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004608:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800460c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004610:	4642      	mov	r2, r8
 8004612:	464b      	mov	r3, r9
 8004614:	1891      	adds	r1, r2, r2
 8004616:	61b9      	str	r1, [r7, #24]
 8004618:	415b      	adcs	r3, r3
 800461a:	61fb      	str	r3, [r7, #28]
 800461c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004620:	4641      	mov	r1, r8
 8004622:	1851      	adds	r1, r2, r1
 8004624:	6139      	str	r1, [r7, #16]
 8004626:	4649      	mov	r1, r9
 8004628:	414b      	adcs	r3, r1
 800462a:	617b      	str	r3, [r7, #20]
 800462c:	f04f 0200 	mov.w	r2, #0
 8004630:	f04f 0300 	mov.w	r3, #0
 8004634:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004638:	4659      	mov	r1, fp
 800463a:	00cb      	lsls	r3, r1, #3
 800463c:	4651      	mov	r1, sl
 800463e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004642:	4651      	mov	r1, sl
 8004644:	00ca      	lsls	r2, r1, #3
 8004646:	4610      	mov	r0, r2
 8004648:	4619      	mov	r1, r3
 800464a:	4603      	mov	r3, r0
 800464c:	4642      	mov	r2, r8
 800464e:	189b      	adds	r3, r3, r2
 8004650:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004654:	464b      	mov	r3, r9
 8004656:	460a      	mov	r2, r1
 8004658:	eb42 0303 	adc.w	r3, r2, r3
 800465c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	67bb      	str	r3, [r7, #120]	; 0x78
 800466a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800466c:	f04f 0200 	mov.w	r2, #0
 8004670:	f04f 0300 	mov.w	r3, #0
 8004674:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004678:	4649      	mov	r1, r9
 800467a:	008b      	lsls	r3, r1, #2
 800467c:	4641      	mov	r1, r8
 800467e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004682:	4641      	mov	r1, r8
 8004684:	008a      	lsls	r2, r1, #2
 8004686:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800468a:	f7fb fdf9 	bl	8000280 <__aeabi_uldivmod>
 800468e:	4602      	mov	r2, r0
 8004690:	460b      	mov	r3, r1
 8004692:	4b39      	ldr	r3, [pc, #228]	; (8004778 <UART_SetConfig+0x4e4>)
 8004694:	fba3 1302 	umull	r1, r3, r3, r2
 8004698:	095b      	lsrs	r3, r3, #5
 800469a:	2164      	movs	r1, #100	; 0x64
 800469c:	fb01 f303 	mul.w	r3, r1, r3
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	011b      	lsls	r3, r3, #4
 80046a4:	3332      	adds	r3, #50	; 0x32
 80046a6:	4a34      	ldr	r2, [pc, #208]	; (8004778 <UART_SetConfig+0x4e4>)
 80046a8:	fba2 2303 	umull	r2, r3, r2, r3
 80046ac:	095b      	lsrs	r3, r3, #5
 80046ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046b2:	441c      	add	r4, r3
 80046b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046b8:	2200      	movs	r2, #0
 80046ba:	673b      	str	r3, [r7, #112]	; 0x70
 80046bc:	677a      	str	r2, [r7, #116]	; 0x74
 80046be:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80046c2:	4642      	mov	r2, r8
 80046c4:	464b      	mov	r3, r9
 80046c6:	1891      	adds	r1, r2, r2
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	415b      	adcs	r3, r3
 80046cc:	60fb      	str	r3, [r7, #12]
 80046ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046d2:	4641      	mov	r1, r8
 80046d4:	1851      	adds	r1, r2, r1
 80046d6:	6039      	str	r1, [r7, #0]
 80046d8:	4649      	mov	r1, r9
 80046da:	414b      	adcs	r3, r1
 80046dc:	607b      	str	r3, [r7, #4]
 80046de:	f04f 0200 	mov.w	r2, #0
 80046e2:	f04f 0300 	mov.w	r3, #0
 80046e6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80046ea:	4659      	mov	r1, fp
 80046ec:	00cb      	lsls	r3, r1, #3
 80046ee:	4651      	mov	r1, sl
 80046f0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046f4:	4651      	mov	r1, sl
 80046f6:	00ca      	lsls	r2, r1, #3
 80046f8:	4610      	mov	r0, r2
 80046fa:	4619      	mov	r1, r3
 80046fc:	4603      	mov	r3, r0
 80046fe:	4642      	mov	r2, r8
 8004700:	189b      	adds	r3, r3, r2
 8004702:	66bb      	str	r3, [r7, #104]	; 0x68
 8004704:	464b      	mov	r3, r9
 8004706:	460a      	mov	r2, r1
 8004708:	eb42 0303 	adc.w	r3, r2, r3
 800470c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800470e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	663b      	str	r3, [r7, #96]	; 0x60
 8004718:	667a      	str	r2, [r7, #100]	; 0x64
 800471a:	f04f 0200 	mov.w	r2, #0
 800471e:	f04f 0300 	mov.w	r3, #0
 8004722:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004726:	4649      	mov	r1, r9
 8004728:	008b      	lsls	r3, r1, #2
 800472a:	4641      	mov	r1, r8
 800472c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004730:	4641      	mov	r1, r8
 8004732:	008a      	lsls	r2, r1, #2
 8004734:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004738:	f7fb fda2 	bl	8000280 <__aeabi_uldivmod>
 800473c:	4602      	mov	r2, r0
 800473e:	460b      	mov	r3, r1
 8004740:	4b0d      	ldr	r3, [pc, #52]	; (8004778 <UART_SetConfig+0x4e4>)
 8004742:	fba3 1302 	umull	r1, r3, r3, r2
 8004746:	095b      	lsrs	r3, r3, #5
 8004748:	2164      	movs	r1, #100	; 0x64
 800474a:	fb01 f303 	mul.w	r3, r1, r3
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	011b      	lsls	r3, r3, #4
 8004752:	3332      	adds	r3, #50	; 0x32
 8004754:	4a08      	ldr	r2, [pc, #32]	; (8004778 <UART_SetConfig+0x4e4>)
 8004756:	fba2 2303 	umull	r2, r3, r2, r3
 800475a:	095b      	lsrs	r3, r3, #5
 800475c:	f003 020f 	and.w	r2, r3, #15
 8004760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4422      	add	r2, r4
 8004768:	609a      	str	r2, [r3, #8]
}
 800476a:	bf00      	nop
 800476c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004770:	46bd      	mov	sp, r7
 8004772:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004776:	bf00      	nop
 8004778:	51eb851f 	.word	0x51eb851f

0800477c <__errno>:
 800477c:	4b01      	ldr	r3, [pc, #4]	; (8004784 <__errno+0x8>)
 800477e:	6818      	ldr	r0, [r3, #0]
 8004780:	4770      	bx	lr
 8004782:	bf00      	nop
 8004784:	2000000c 	.word	0x2000000c

08004788 <__libc_init_array>:
 8004788:	b570      	push	{r4, r5, r6, lr}
 800478a:	4d0d      	ldr	r5, [pc, #52]	; (80047c0 <__libc_init_array+0x38>)
 800478c:	4c0d      	ldr	r4, [pc, #52]	; (80047c4 <__libc_init_array+0x3c>)
 800478e:	1b64      	subs	r4, r4, r5
 8004790:	10a4      	asrs	r4, r4, #2
 8004792:	2600      	movs	r6, #0
 8004794:	42a6      	cmp	r6, r4
 8004796:	d109      	bne.n	80047ac <__libc_init_array+0x24>
 8004798:	4d0b      	ldr	r5, [pc, #44]	; (80047c8 <__libc_init_array+0x40>)
 800479a:	4c0c      	ldr	r4, [pc, #48]	; (80047cc <__libc_init_array+0x44>)
 800479c:	f001 f824 	bl	80057e8 <_init>
 80047a0:	1b64      	subs	r4, r4, r5
 80047a2:	10a4      	asrs	r4, r4, #2
 80047a4:	2600      	movs	r6, #0
 80047a6:	42a6      	cmp	r6, r4
 80047a8:	d105      	bne.n	80047b6 <__libc_init_array+0x2e>
 80047aa:	bd70      	pop	{r4, r5, r6, pc}
 80047ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80047b0:	4798      	blx	r3
 80047b2:	3601      	adds	r6, #1
 80047b4:	e7ee      	b.n	8004794 <__libc_init_array+0xc>
 80047b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80047ba:	4798      	blx	r3
 80047bc:	3601      	adds	r6, #1
 80047be:	e7f2      	b.n	80047a6 <__libc_init_array+0x1e>
 80047c0:	08005924 	.word	0x08005924
 80047c4:	08005924 	.word	0x08005924
 80047c8:	08005924 	.word	0x08005924
 80047cc:	08005928 	.word	0x08005928

080047d0 <memset>:
 80047d0:	4402      	add	r2, r0
 80047d2:	4603      	mov	r3, r0
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d100      	bne.n	80047da <memset+0xa>
 80047d8:	4770      	bx	lr
 80047da:	f803 1b01 	strb.w	r1, [r3], #1
 80047de:	e7f9      	b.n	80047d4 <memset+0x4>

080047e0 <iprintf>:
 80047e0:	b40f      	push	{r0, r1, r2, r3}
 80047e2:	4b0a      	ldr	r3, [pc, #40]	; (800480c <iprintf+0x2c>)
 80047e4:	b513      	push	{r0, r1, r4, lr}
 80047e6:	681c      	ldr	r4, [r3, #0]
 80047e8:	b124      	cbz	r4, 80047f4 <iprintf+0x14>
 80047ea:	69a3      	ldr	r3, [r4, #24]
 80047ec:	b913      	cbnz	r3, 80047f4 <iprintf+0x14>
 80047ee:	4620      	mov	r0, r4
 80047f0:	f000 fa5e 	bl	8004cb0 <__sinit>
 80047f4:	ab05      	add	r3, sp, #20
 80047f6:	9a04      	ldr	r2, [sp, #16]
 80047f8:	68a1      	ldr	r1, [r4, #8]
 80047fa:	9301      	str	r3, [sp, #4]
 80047fc:	4620      	mov	r0, r4
 80047fe:	f000 fc67 	bl	80050d0 <_vfiprintf_r>
 8004802:	b002      	add	sp, #8
 8004804:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004808:	b004      	add	sp, #16
 800480a:	4770      	bx	lr
 800480c:	2000000c 	.word	0x2000000c

08004810 <_puts_r>:
 8004810:	b570      	push	{r4, r5, r6, lr}
 8004812:	460e      	mov	r6, r1
 8004814:	4605      	mov	r5, r0
 8004816:	b118      	cbz	r0, 8004820 <_puts_r+0x10>
 8004818:	6983      	ldr	r3, [r0, #24]
 800481a:	b90b      	cbnz	r3, 8004820 <_puts_r+0x10>
 800481c:	f000 fa48 	bl	8004cb0 <__sinit>
 8004820:	69ab      	ldr	r3, [r5, #24]
 8004822:	68ac      	ldr	r4, [r5, #8]
 8004824:	b913      	cbnz	r3, 800482c <_puts_r+0x1c>
 8004826:	4628      	mov	r0, r5
 8004828:	f000 fa42 	bl	8004cb0 <__sinit>
 800482c:	4b2c      	ldr	r3, [pc, #176]	; (80048e0 <_puts_r+0xd0>)
 800482e:	429c      	cmp	r4, r3
 8004830:	d120      	bne.n	8004874 <_puts_r+0x64>
 8004832:	686c      	ldr	r4, [r5, #4]
 8004834:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004836:	07db      	lsls	r3, r3, #31
 8004838:	d405      	bmi.n	8004846 <_puts_r+0x36>
 800483a:	89a3      	ldrh	r3, [r4, #12]
 800483c:	0598      	lsls	r0, r3, #22
 800483e:	d402      	bmi.n	8004846 <_puts_r+0x36>
 8004840:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004842:	f000 fad3 	bl	8004dec <__retarget_lock_acquire_recursive>
 8004846:	89a3      	ldrh	r3, [r4, #12]
 8004848:	0719      	lsls	r1, r3, #28
 800484a:	d51d      	bpl.n	8004888 <_puts_r+0x78>
 800484c:	6923      	ldr	r3, [r4, #16]
 800484e:	b1db      	cbz	r3, 8004888 <_puts_r+0x78>
 8004850:	3e01      	subs	r6, #1
 8004852:	68a3      	ldr	r3, [r4, #8]
 8004854:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004858:	3b01      	subs	r3, #1
 800485a:	60a3      	str	r3, [r4, #8]
 800485c:	bb39      	cbnz	r1, 80048ae <_puts_r+0x9e>
 800485e:	2b00      	cmp	r3, #0
 8004860:	da38      	bge.n	80048d4 <_puts_r+0xc4>
 8004862:	4622      	mov	r2, r4
 8004864:	210a      	movs	r1, #10
 8004866:	4628      	mov	r0, r5
 8004868:	f000 f848 	bl	80048fc <__swbuf_r>
 800486c:	3001      	adds	r0, #1
 800486e:	d011      	beq.n	8004894 <_puts_r+0x84>
 8004870:	250a      	movs	r5, #10
 8004872:	e011      	b.n	8004898 <_puts_r+0x88>
 8004874:	4b1b      	ldr	r3, [pc, #108]	; (80048e4 <_puts_r+0xd4>)
 8004876:	429c      	cmp	r4, r3
 8004878:	d101      	bne.n	800487e <_puts_r+0x6e>
 800487a:	68ac      	ldr	r4, [r5, #8]
 800487c:	e7da      	b.n	8004834 <_puts_r+0x24>
 800487e:	4b1a      	ldr	r3, [pc, #104]	; (80048e8 <_puts_r+0xd8>)
 8004880:	429c      	cmp	r4, r3
 8004882:	bf08      	it	eq
 8004884:	68ec      	ldreq	r4, [r5, #12]
 8004886:	e7d5      	b.n	8004834 <_puts_r+0x24>
 8004888:	4621      	mov	r1, r4
 800488a:	4628      	mov	r0, r5
 800488c:	f000 f888 	bl	80049a0 <__swsetup_r>
 8004890:	2800      	cmp	r0, #0
 8004892:	d0dd      	beq.n	8004850 <_puts_r+0x40>
 8004894:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004898:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800489a:	07da      	lsls	r2, r3, #31
 800489c:	d405      	bmi.n	80048aa <_puts_r+0x9a>
 800489e:	89a3      	ldrh	r3, [r4, #12]
 80048a0:	059b      	lsls	r3, r3, #22
 80048a2:	d402      	bmi.n	80048aa <_puts_r+0x9a>
 80048a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048a6:	f000 faa2 	bl	8004dee <__retarget_lock_release_recursive>
 80048aa:	4628      	mov	r0, r5
 80048ac:	bd70      	pop	{r4, r5, r6, pc}
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	da04      	bge.n	80048bc <_puts_r+0xac>
 80048b2:	69a2      	ldr	r2, [r4, #24]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	dc06      	bgt.n	80048c6 <_puts_r+0xb6>
 80048b8:	290a      	cmp	r1, #10
 80048ba:	d004      	beq.n	80048c6 <_puts_r+0xb6>
 80048bc:	6823      	ldr	r3, [r4, #0]
 80048be:	1c5a      	adds	r2, r3, #1
 80048c0:	6022      	str	r2, [r4, #0]
 80048c2:	7019      	strb	r1, [r3, #0]
 80048c4:	e7c5      	b.n	8004852 <_puts_r+0x42>
 80048c6:	4622      	mov	r2, r4
 80048c8:	4628      	mov	r0, r5
 80048ca:	f000 f817 	bl	80048fc <__swbuf_r>
 80048ce:	3001      	adds	r0, #1
 80048d0:	d1bf      	bne.n	8004852 <_puts_r+0x42>
 80048d2:	e7df      	b.n	8004894 <_puts_r+0x84>
 80048d4:	6823      	ldr	r3, [r4, #0]
 80048d6:	250a      	movs	r5, #10
 80048d8:	1c5a      	adds	r2, r3, #1
 80048da:	6022      	str	r2, [r4, #0]
 80048dc:	701d      	strb	r5, [r3, #0]
 80048de:	e7db      	b.n	8004898 <_puts_r+0x88>
 80048e0:	080058a8 	.word	0x080058a8
 80048e4:	080058c8 	.word	0x080058c8
 80048e8:	08005888 	.word	0x08005888

080048ec <puts>:
 80048ec:	4b02      	ldr	r3, [pc, #8]	; (80048f8 <puts+0xc>)
 80048ee:	4601      	mov	r1, r0
 80048f0:	6818      	ldr	r0, [r3, #0]
 80048f2:	f7ff bf8d 	b.w	8004810 <_puts_r>
 80048f6:	bf00      	nop
 80048f8:	2000000c 	.word	0x2000000c

080048fc <__swbuf_r>:
 80048fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048fe:	460e      	mov	r6, r1
 8004900:	4614      	mov	r4, r2
 8004902:	4605      	mov	r5, r0
 8004904:	b118      	cbz	r0, 800490e <__swbuf_r+0x12>
 8004906:	6983      	ldr	r3, [r0, #24]
 8004908:	b90b      	cbnz	r3, 800490e <__swbuf_r+0x12>
 800490a:	f000 f9d1 	bl	8004cb0 <__sinit>
 800490e:	4b21      	ldr	r3, [pc, #132]	; (8004994 <__swbuf_r+0x98>)
 8004910:	429c      	cmp	r4, r3
 8004912:	d12b      	bne.n	800496c <__swbuf_r+0x70>
 8004914:	686c      	ldr	r4, [r5, #4]
 8004916:	69a3      	ldr	r3, [r4, #24]
 8004918:	60a3      	str	r3, [r4, #8]
 800491a:	89a3      	ldrh	r3, [r4, #12]
 800491c:	071a      	lsls	r2, r3, #28
 800491e:	d52f      	bpl.n	8004980 <__swbuf_r+0x84>
 8004920:	6923      	ldr	r3, [r4, #16]
 8004922:	b36b      	cbz	r3, 8004980 <__swbuf_r+0x84>
 8004924:	6923      	ldr	r3, [r4, #16]
 8004926:	6820      	ldr	r0, [r4, #0]
 8004928:	1ac0      	subs	r0, r0, r3
 800492a:	6963      	ldr	r3, [r4, #20]
 800492c:	b2f6      	uxtb	r6, r6
 800492e:	4283      	cmp	r3, r0
 8004930:	4637      	mov	r7, r6
 8004932:	dc04      	bgt.n	800493e <__swbuf_r+0x42>
 8004934:	4621      	mov	r1, r4
 8004936:	4628      	mov	r0, r5
 8004938:	f000 f926 	bl	8004b88 <_fflush_r>
 800493c:	bb30      	cbnz	r0, 800498c <__swbuf_r+0x90>
 800493e:	68a3      	ldr	r3, [r4, #8]
 8004940:	3b01      	subs	r3, #1
 8004942:	60a3      	str	r3, [r4, #8]
 8004944:	6823      	ldr	r3, [r4, #0]
 8004946:	1c5a      	adds	r2, r3, #1
 8004948:	6022      	str	r2, [r4, #0]
 800494a:	701e      	strb	r6, [r3, #0]
 800494c:	6963      	ldr	r3, [r4, #20]
 800494e:	3001      	adds	r0, #1
 8004950:	4283      	cmp	r3, r0
 8004952:	d004      	beq.n	800495e <__swbuf_r+0x62>
 8004954:	89a3      	ldrh	r3, [r4, #12]
 8004956:	07db      	lsls	r3, r3, #31
 8004958:	d506      	bpl.n	8004968 <__swbuf_r+0x6c>
 800495a:	2e0a      	cmp	r6, #10
 800495c:	d104      	bne.n	8004968 <__swbuf_r+0x6c>
 800495e:	4621      	mov	r1, r4
 8004960:	4628      	mov	r0, r5
 8004962:	f000 f911 	bl	8004b88 <_fflush_r>
 8004966:	b988      	cbnz	r0, 800498c <__swbuf_r+0x90>
 8004968:	4638      	mov	r0, r7
 800496a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800496c:	4b0a      	ldr	r3, [pc, #40]	; (8004998 <__swbuf_r+0x9c>)
 800496e:	429c      	cmp	r4, r3
 8004970:	d101      	bne.n	8004976 <__swbuf_r+0x7a>
 8004972:	68ac      	ldr	r4, [r5, #8]
 8004974:	e7cf      	b.n	8004916 <__swbuf_r+0x1a>
 8004976:	4b09      	ldr	r3, [pc, #36]	; (800499c <__swbuf_r+0xa0>)
 8004978:	429c      	cmp	r4, r3
 800497a:	bf08      	it	eq
 800497c:	68ec      	ldreq	r4, [r5, #12]
 800497e:	e7ca      	b.n	8004916 <__swbuf_r+0x1a>
 8004980:	4621      	mov	r1, r4
 8004982:	4628      	mov	r0, r5
 8004984:	f000 f80c 	bl	80049a0 <__swsetup_r>
 8004988:	2800      	cmp	r0, #0
 800498a:	d0cb      	beq.n	8004924 <__swbuf_r+0x28>
 800498c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004990:	e7ea      	b.n	8004968 <__swbuf_r+0x6c>
 8004992:	bf00      	nop
 8004994:	080058a8 	.word	0x080058a8
 8004998:	080058c8 	.word	0x080058c8
 800499c:	08005888 	.word	0x08005888

080049a0 <__swsetup_r>:
 80049a0:	4b32      	ldr	r3, [pc, #200]	; (8004a6c <__swsetup_r+0xcc>)
 80049a2:	b570      	push	{r4, r5, r6, lr}
 80049a4:	681d      	ldr	r5, [r3, #0]
 80049a6:	4606      	mov	r6, r0
 80049a8:	460c      	mov	r4, r1
 80049aa:	b125      	cbz	r5, 80049b6 <__swsetup_r+0x16>
 80049ac:	69ab      	ldr	r3, [r5, #24]
 80049ae:	b913      	cbnz	r3, 80049b6 <__swsetup_r+0x16>
 80049b0:	4628      	mov	r0, r5
 80049b2:	f000 f97d 	bl	8004cb0 <__sinit>
 80049b6:	4b2e      	ldr	r3, [pc, #184]	; (8004a70 <__swsetup_r+0xd0>)
 80049b8:	429c      	cmp	r4, r3
 80049ba:	d10f      	bne.n	80049dc <__swsetup_r+0x3c>
 80049bc:	686c      	ldr	r4, [r5, #4]
 80049be:	89a3      	ldrh	r3, [r4, #12]
 80049c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80049c4:	0719      	lsls	r1, r3, #28
 80049c6:	d42c      	bmi.n	8004a22 <__swsetup_r+0x82>
 80049c8:	06dd      	lsls	r5, r3, #27
 80049ca:	d411      	bmi.n	80049f0 <__swsetup_r+0x50>
 80049cc:	2309      	movs	r3, #9
 80049ce:	6033      	str	r3, [r6, #0]
 80049d0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80049d4:	81a3      	strh	r3, [r4, #12]
 80049d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80049da:	e03e      	b.n	8004a5a <__swsetup_r+0xba>
 80049dc:	4b25      	ldr	r3, [pc, #148]	; (8004a74 <__swsetup_r+0xd4>)
 80049de:	429c      	cmp	r4, r3
 80049e0:	d101      	bne.n	80049e6 <__swsetup_r+0x46>
 80049e2:	68ac      	ldr	r4, [r5, #8]
 80049e4:	e7eb      	b.n	80049be <__swsetup_r+0x1e>
 80049e6:	4b24      	ldr	r3, [pc, #144]	; (8004a78 <__swsetup_r+0xd8>)
 80049e8:	429c      	cmp	r4, r3
 80049ea:	bf08      	it	eq
 80049ec:	68ec      	ldreq	r4, [r5, #12]
 80049ee:	e7e6      	b.n	80049be <__swsetup_r+0x1e>
 80049f0:	0758      	lsls	r0, r3, #29
 80049f2:	d512      	bpl.n	8004a1a <__swsetup_r+0x7a>
 80049f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80049f6:	b141      	cbz	r1, 8004a0a <__swsetup_r+0x6a>
 80049f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80049fc:	4299      	cmp	r1, r3
 80049fe:	d002      	beq.n	8004a06 <__swsetup_r+0x66>
 8004a00:	4630      	mov	r0, r6
 8004a02:	f000 fa5b 	bl	8004ebc <_free_r>
 8004a06:	2300      	movs	r3, #0
 8004a08:	6363      	str	r3, [r4, #52]	; 0x34
 8004a0a:	89a3      	ldrh	r3, [r4, #12]
 8004a0c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004a10:	81a3      	strh	r3, [r4, #12]
 8004a12:	2300      	movs	r3, #0
 8004a14:	6063      	str	r3, [r4, #4]
 8004a16:	6923      	ldr	r3, [r4, #16]
 8004a18:	6023      	str	r3, [r4, #0]
 8004a1a:	89a3      	ldrh	r3, [r4, #12]
 8004a1c:	f043 0308 	orr.w	r3, r3, #8
 8004a20:	81a3      	strh	r3, [r4, #12]
 8004a22:	6923      	ldr	r3, [r4, #16]
 8004a24:	b94b      	cbnz	r3, 8004a3a <__swsetup_r+0x9a>
 8004a26:	89a3      	ldrh	r3, [r4, #12]
 8004a28:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004a2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a30:	d003      	beq.n	8004a3a <__swsetup_r+0x9a>
 8004a32:	4621      	mov	r1, r4
 8004a34:	4630      	mov	r0, r6
 8004a36:	f000 fa01 	bl	8004e3c <__smakebuf_r>
 8004a3a:	89a0      	ldrh	r0, [r4, #12]
 8004a3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004a40:	f010 0301 	ands.w	r3, r0, #1
 8004a44:	d00a      	beq.n	8004a5c <__swsetup_r+0xbc>
 8004a46:	2300      	movs	r3, #0
 8004a48:	60a3      	str	r3, [r4, #8]
 8004a4a:	6963      	ldr	r3, [r4, #20]
 8004a4c:	425b      	negs	r3, r3
 8004a4e:	61a3      	str	r3, [r4, #24]
 8004a50:	6923      	ldr	r3, [r4, #16]
 8004a52:	b943      	cbnz	r3, 8004a66 <__swsetup_r+0xc6>
 8004a54:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004a58:	d1ba      	bne.n	80049d0 <__swsetup_r+0x30>
 8004a5a:	bd70      	pop	{r4, r5, r6, pc}
 8004a5c:	0781      	lsls	r1, r0, #30
 8004a5e:	bf58      	it	pl
 8004a60:	6963      	ldrpl	r3, [r4, #20]
 8004a62:	60a3      	str	r3, [r4, #8]
 8004a64:	e7f4      	b.n	8004a50 <__swsetup_r+0xb0>
 8004a66:	2000      	movs	r0, #0
 8004a68:	e7f7      	b.n	8004a5a <__swsetup_r+0xba>
 8004a6a:	bf00      	nop
 8004a6c:	2000000c 	.word	0x2000000c
 8004a70:	080058a8 	.word	0x080058a8
 8004a74:	080058c8 	.word	0x080058c8
 8004a78:	08005888 	.word	0x08005888

08004a7c <__sflush_r>:
 8004a7c:	898a      	ldrh	r2, [r1, #12]
 8004a7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a82:	4605      	mov	r5, r0
 8004a84:	0710      	lsls	r0, r2, #28
 8004a86:	460c      	mov	r4, r1
 8004a88:	d458      	bmi.n	8004b3c <__sflush_r+0xc0>
 8004a8a:	684b      	ldr	r3, [r1, #4]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	dc05      	bgt.n	8004a9c <__sflush_r+0x20>
 8004a90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	dc02      	bgt.n	8004a9c <__sflush_r+0x20>
 8004a96:	2000      	movs	r0, #0
 8004a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a9e:	2e00      	cmp	r6, #0
 8004aa0:	d0f9      	beq.n	8004a96 <__sflush_r+0x1a>
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004aa8:	682f      	ldr	r7, [r5, #0]
 8004aaa:	602b      	str	r3, [r5, #0]
 8004aac:	d032      	beq.n	8004b14 <__sflush_r+0x98>
 8004aae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004ab0:	89a3      	ldrh	r3, [r4, #12]
 8004ab2:	075a      	lsls	r2, r3, #29
 8004ab4:	d505      	bpl.n	8004ac2 <__sflush_r+0x46>
 8004ab6:	6863      	ldr	r3, [r4, #4]
 8004ab8:	1ac0      	subs	r0, r0, r3
 8004aba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004abc:	b10b      	cbz	r3, 8004ac2 <__sflush_r+0x46>
 8004abe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004ac0:	1ac0      	subs	r0, r0, r3
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ac8:	6a21      	ldr	r1, [r4, #32]
 8004aca:	4628      	mov	r0, r5
 8004acc:	47b0      	blx	r6
 8004ace:	1c43      	adds	r3, r0, #1
 8004ad0:	89a3      	ldrh	r3, [r4, #12]
 8004ad2:	d106      	bne.n	8004ae2 <__sflush_r+0x66>
 8004ad4:	6829      	ldr	r1, [r5, #0]
 8004ad6:	291d      	cmp	r1, #29
 8004ad8:	d82c      	bhi.n	8004b34 <__sflush_r+0xb8>
 8004ada:	4a2a      	ldr	r2, [pc, #168]	; (8004b84 <__sflush_r+0x108>)
 8004adc:	40ca      	lsrs	r2, r1
 8004ade:	07d6      	lsls	r6, r2, #31
 8004ae0:	d528      	bpl.n	8004b34 <__sflush_r+0xb8>
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	6062      	str	r2, [r4, #4]
 8004ae6:	04d9      	lsls	r1, r3, #19
 8004ae8:	6922      	ldr	r2, [r4, #16]
 8004aea:	6022      	str	r2, [r4, #0]
 8004aec:	d504      	bpl.n	8004af8 <__sflush_r+0x7c>
 8004aee:	1c42      	adds	r2, r0, #1
 8004af0:	d101      	bne.n	8004af6 <__sflush_r+0x7a>
 8004af2:	682b      	ldr	r3, [r5, #0]
 8004af4:	b903      	cbnz	r3, 8004af8 <__sflush_r+0x7c>
 8004af6:	6560      	str	r0, [r4, #84]	; 0x54
 8004af8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004afa:	602f      	str	r7, [r5, #0]
 8004afc:	2900      	cmp	r1, #0
 8004afe:	d0ca      	beq.n	8004a96 <__sflush_r+0x1a>
 8004b00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b04:	4299      	cmp	r1, r3
 8004b06:	d002      	beq.n	8004b0e <__sflush_r+0x92>
 8004b08:	4628      	mov	r0, r5
 8004b0a:	f000 f9d7 	bl	8004ebc <_free_r>
 8004b0e:	2000      	movs	r0, #0
 8004b10:	6360      	str	r0, [r4, #52]	; 0x34
 8004b12:	e7c1      	b.n	8004a98 <__sflush_r+0x1c>
 8004b14:	6a21      	ldr	r1, [r4, #32]
 8004b16:	2301      	movs	r3, #1
 8004b18:	4628      	mov	r0, r5
 8004b1a:	47b0      	blx	r6
 8004b1c:	1c41      	adds	r1, r0, #1
 8004b1e:	d1c7      	bne.n	8004ab0 <__sflush_r+0x34>
 8004b20:	682b      	ldr	r3, [r5, #0]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d0c4      	beq.n	8004ab0 <__sflush_r+0x34>
 8004b26:	2b1d      	cmp	r3, #29
 8004b28:	d001      	beq.n	8004b2e <__sflush_r+0xb2>
 8004b2a:	2b16      	cmp	r3, #22
 8004b2c:	d101      	bne.n	8004b32 <__sflush_r+0xb6>
 8004b2e:	602f      	str	r7, [r5, #0]
 8004b30:	e7b1      	b.n	8004a96 <__sflush_r+0x1a>
 8004b32:	89a3      	ldrh	r3, [r4, #12]
 8004b34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b38:	81a3      	strh	r3, [r4, #12]
 8004b3a:	e7ad      	b.n	8004a98 <__sflush_r+0x1c>
 8004b3c:	690f      	ldr	r7, [r1, #16]
 8004b3e:	2f00      	cmp	r7, #0
 8004b40:	d0a9      	beq.n	8004a96 <__sflush_r+0x1a>
 8004b42:	0793      	lsls	r3, r2, #30
 8004b44:	680e      	ldr	r6, [r1, #0]
 8004b46:	bf08      	it	eq
 8004b48:	694b      	ldreq	r3, [r1, #20]
 8004b4a:	600f      	str	r7, [r1, #0]
 8004b4c:	bf18      	it	ne
 8004b4e:	2300      	movne	r3, #0
 8004b50:	eba6 0807 	sub.w	r8, r6, r7
 8004b54:	608b      	str	r3, [r1, #8]
 8004b56:	f1b8 0f00 	cmp.w	r8, #0
 8004b5a:	dd9c      	ble.n	8004a96 <__sflush_r+0x1a>
 8004b5c:	6a21      	ldr	r1, [r4, #32]
 8004b5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004b60:	4643      	mov	r3, r8
 8004b62:	463a      	mov	r2, r7
 8004b64:	4628      	mov	r0, r5
 8004b66:	47b0      	blx	r6
 8004b68:	2800      	cmp	r0, #0
 8004b6a:	dc06      	bgt.n	8004b7a <__sflush_r+0xfe>
 8004b6c:	89a3      	ldrh	r3, [r4, #12]
 8004b6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b72:	81a3      	strh	r3, [r4, #12]
 8004b74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b78:	e78e      	b.n	8004a98 <__sflush_r+0x1c>
 8004b7a:	4407      	add	r7, r0
 8004b7c:	eba8 0800 	sub.w	r8, r8, r0
 8004b80:	e7e9      	b.n	8004b56 <__sflush_r+0xda>
 8004b82:	bf00      	nop
 8004b84:	20400001 	.word	0x20400001

08004b88 <_fflush_r>:
 8004b88:	b538      	push	{r3, r4, r5, lr}
 8004b8a:	690b      	ldr	r3, [r1, #16]
 8004b8c:	4605      	mov	r5, r0
 8004b8e:	460c      	mov	r4, r1
 8004b90:	b913      	cbnz	r3, 8004b98 <_fflush_r+0x10>
 8004b92:	2500      	movs	r5, #0
 8004b94:	4628      	mov	r0, r5
 8004b96:	bd38      	pop	{r3, r4, r5, pc}
 8004b98:	b118      	cbz	r0, 8004ba2 <_fflush_r+0x1a>
 8004b9a:	6983      	ldr	r3, [r0, #24]
 8004b9c:	b90b      	cbnz	r3, 8004ba2 <_fflush_r+0x1a>
 8004b9e:	f000 f887 	bl	8004cb0 <__sinit>
 8004ba2:	4b14      	ldr	r3, [pc, #80]	; (8004bf4 <_fflush_r+0x6c>)
 8004ba4:	429c      	cmp	r4, r3
 8004ba6:	d11b      	bne.n	8004be0 <_fflush_r+0x58>
 8004ba8:	686c      	ldr	r4, [r5, #4]
 8004baa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d0ef      	beq.n	8004b92 <_fflush_r+0xa>
 8004bb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004bb4:	07d0      	lsls	r0, r2, #31
 8004bb6:	d404      	bmi.n	8004bc2 <_fflush_r+0x3a>
 8004bb8:	0599      	lsls	r1, r3, #22
 8004bba:	d402      	bmi.n	8004bc2 <_fflush_r+0x3a>
 8004bbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004bbe:	f000 f915 	bl	8004dec <__retarget_lock_acquire_recursive>
 8004bc2:	4628      	mov	r0, r5
 8004bc4:	4621      	mov	r1, r4
 8004bc6:	f7ff ff59 	bl	8004a7c <__sflush_r>
 8004bca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004bcc:	07da      	lsls	r2, r3, #31
 8004bce:	4605      	mov	r5, r0
 8004bd0:	d4e0      	bmi.n	8004b94 <_fflush_r+0xc>
 8004bd2:	89a3      	ldrh	r3, [r4, #12]
 8004bd4:	059b      	lsls	r3, r3, #22
 8004bd6:	d4dd      	bmi.n	8004b94 <_fflush_r+0xc>
 8004bd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004bda:	f000 f908 	bl	8004dee <__retarget_lock_release_recursive>
 8004bde:	e7d9      	b.n	8004b94 <_fflush_r+0xc>
 8004be0:	4b05      	ldr	r3, [pc, #20]	; (8004bf8 <_fflush_r+0x70>)
 8004be2:	429c      	cmp	r4, r3
 8004be4:	d101      	bne.n	8004bea <_fflush_r+0x62>
 8004be6:	68ac      	ldr	r4, [r5, #8]
 8004be8:	e7df      	b.n	8004baa <_fflush_r+0x22>
 8004bea:	4b04      	ldr	r3, [pc, #16]	; (8004bfc <_fflush_r+0x74>)
 8004bec:	429c      	cmp	r4, r3
 8004bee:	bf08      	it	eq
 8004bf0:	68ec      	ldreq	r4, [r5, #12]
 8004bf2:	e7da      	b.n	8004baa <_fflush_r+0x22>
 8004bf4:	080058a8 	.word	0x080058a8
 8004bf8:	080058c8 	.word	0x080058c8
 8004bfc:	08005888 	.word	0x08005888

08004c00 <std>:
 8004c00:	2300      	movs	r3, #0
 8004c02:	b510      	push	{r4, lr}
 8004c04:	4604      	mov	r4, r0
 8004c06:	e9c0 3300 	strd	r3, r3, [r0]
 8004c0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004c0e:	6083      	str	r3, [r0, #8]
 8004c10:	8181      	strh	r1, [r0, #12]
 8004c12:	6643      	str	r3, [r0, #100]	; 0x64
 8004c14:	81c2      	strh	r2, [r0, #14]
 8004c16:	6183      	str	r3, [r0, #24]
 8004c18:	4619      	mov	r1, r3
 8004c1a:	2208      	movs	r2, #8
 8004c1c:	305c      	adds	r0, #92	; 0x5c
 8004c1e:	f7ff fdd7 	bl	80047d0 <memset>
 8004c22:	4b05      	ldr	r3, [pc, #20]	; (8004c38 <std+0x38>)
 8004c24:	6263      	str	r3, [r4, #36]	; 0x24
 8004c26:	4b05      	ldr	r3, [pc, #20]	; (8004c3c <std+0x3c>)
 8004c28:	62a3      	str	r3, [r4, #40]	; 0x28
 8004c2a:	4b05      	ldr	r3, [pc, #20]	; (8004c40 <std+0x40>)
 8004c2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004c2e:	4b05      	ldr	r3, [pc, #20]	; (8004c44 <std+0x44>)
 8004c30:	6224      	str	r4, [r4, #32]
 8004c32:	6323      	str	r3, [r4, #48]	; 0x30
 8004c34:	bd10      	pop	{r4, pc}
 8004c36:	bf00      	nop
 8004c38:	08005679 	.word	0x08005679
 8004c3c:	0800569b 	.word	0x0800569b
 8004c40:	080056d3 	.word	0x080056d3
 8004c44:	080056f7 	.word	0x080056f7

08004c48 <_cleanup_r>:
 8004c48:	4901      	ldr	r1, [pc, #4]	; (8004c50 <_cleanup_r+0x8>)
 8004c4a:	f000 b8af 	b.w	8004dac <_fwalk_reent>
 8004c4e:	bf00      	nop
 8004c50:	08004b89 	.word	0x08004b89

08004c54 <__sfmoreglue>:
 8004c54:	b570      	push	{r4, r5, r6, lr}
 8004c56:	2268      	movs	r2, #104	; 0x68
 8004c58:	1e4d      	subs	r5, r1, #1
 8004c5a:	4355      	muls	r5, r2
 8004c5c:	460e      	mov	r6, r1
 8004c5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004c62:	f000 f997 	bl	8004f94 <_malloc_r>
 8004c66:	4604      	mov	r4, r0
 8004c68:	b140      	cbz	r0, 8004c7c <__sfmoreglue+0x28>
 8004c6a:	2100      	movs	r1, #0
 8004c6c:	e9c0 1600 	strd	r1, r6, [r0]
 8004c70:	300c      	adds	r0, #12
 8004c72:	60a0      	str	r0, [r4, #8]
 8004c74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004c78:	f7ff fdaa 	bl	80047d0 <memset>
 8004c7c:	4620      	mov	r0, r4
 8004c7e:	bd70      	pop	{r4, r5, r6, pc}

08004c80 <__sfp_lock_acquire>:
 8004c80:	4801      	ldr	r0, [pc, #4]	; (8004c88 <__sfp_lock_acquire+0x8>)
 8004c82:	f000 b8b3 	b.w	8004dec <__retarget_lock_acquire_recursive>
 8004c86:	bf00      	nop
 8004c88:	20000231 	.word	0x20000231

08004c8c <__sfp_lock_release>:
 8004c8c:	4801      	ldr	r0, [pc, #4]	; (8004c94 <__sfp_lock_release+0x8>)
 8004c8e:	f000 b8ae 	b.w	8004dee <__retarget_lock_release_recursive>
 8004c92:	bf00      	nop
 8004c94:	20000231 	.word	0x20000231

08004c98 <__sinit_lock_acquire>:
 8004c98:	4801      	ldr	r0, [pc, #4]	; (8004ca0 <__sinit_lock_acquire+0x8>)
 8004c9a:	f000 b8a7 	b.w	8004dec <__retarget_lock_acquire_recursive>
 8004c9e:	bf00      	nop
 8004ca0:	20000232 	.word	0x20000232

08004ca4 <__sinit_lock_release>:
 8004ca4:	4801      	ldr	r0, [pc, #4]	; (8004cac <__sinit_lock_release+0x8>)
 8004ca6:	f000 b8a2 	b.w	8004dee <__retarget_lock_release_recursive>
 8004caa:	bf00      	nop
 8004cac:	20000232 	.word	0x20000232

08004cb0 <__sinit>:
 8004cb0:	b510      	push	{r4, lr}
 8004cb2:	4604      	mov	r4, r0
 8004cb4:	f7ff fff0 	bl	8004c98 <__sinit_lock_acquire>
 8004cb8:	69a3      	ldr	r3, [r4, #24]
 8004cba:	b11b      	cbz	r3, 8004cc4 <__sinit+0x14>
 8004cbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cc0:	f7ff bff0 	b.w	8004ca4 <__sinit_lock_release>
 8004cc4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004cc8:	6523      	str	r3, [r4, #80]	; 0x50
 8004cca:	4b13      	ldr	r3, [pc, #76]	; (8004d18 <__sinit+0x68>)
 8004ccc:	4a13      	ldr	r2, [pc, #76]	; (8004d1c <__sinit+0x6c>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	62a2      	str	r2, [r4, #40]	; 0x28
 8004cd2:	42a3      	cmp	r3, r4
 8004cd4:	bf04      	itt	eq
 8004cd6:	2301      	moveq	r3, #1
 8004cd8:	61a3      	streq	r3, [r4, #24]
 8004cda:	4620      	mov	r0, r4
 8004cdc:	f000 f820 	bl	8004d20 <__sfp>
 8004ce0:	6060      	str	r0, [r4, #4]
 8004ce2:	4620      	mov	r0, r4
 8004ce4:	f000 f81c 	bl	8004d20 <__sfp>
 8004ce8:	60a0      	str	r0, [r4, #8]
 8004cea:	4620      	mov	r0, r4
 8004cec:	f000 f818 	bl	8004d20 <__sfp>
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	60e0      	str	r0, [r4, #12]
 8004cf4:	2104      	movs	r1, #4
 8004cf6:	6860      	ldr	r0, [r4, #4]
 8004cf8:	f7ff ff82 	bl	8004c00 <std>
 8004cfc:	68a0      	ldr	r0, [r4, #8]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	2109      	movs	r1, #9
 8004d02:	f7ff ff7d 	bl	8004c00 <std>
 8004d06:	68e0      	ldr	r0, [r4, #12]
 8004d08:	2202      	movs	r2, #2
 8004d0a:	2112      	movs	r1, #18
 8004d0c:	f7ff ff78 	bl	8004c00 <std>
 8004d10:	2301      	movs	r3, #1
 8004d12:	61a3      	str	r3, [r4, #24]
 8004d14:	e7d2      	b.n	8004cbc <__sinit+0xc>
 8004d16:	bf00      	nop
 8004d18:	08005884 	.word	0x08005884
 8004d1c:	08004c49 	.word	0x08004c49

08004d20 <__sfp>:
 8004d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d22:	4607      	mov	r7, r0
 8004d24:	f7ff ffac 	bl	8004c80 <__sfp_lock_acquire>
 8004d28:	4b1e      	ldr	r3, [pc, #120]	; (8004da4 <__sfp+0x84>)
 8004d2a:	681e      	ldr	r6, [r3, #0]
 8004d2c:	69b3      	ldr	r3, [r6, #24]
 8004d2e:	b913      	cbnz	r3, 8004d36 <__sfp+0x16>
 8004d30:	4630      	mov	r0, r6
 8004d32:	f7ff ffbd 	bl	8004cb0 <__sinit>
 8004d36:	3648      	adds	r6, #72	; 0x48
 8004d38:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004d3c:	3b01      	subs	r3, #1
 8004d3e:	d503      	bpl.n	8004d48 <__sfp+0x28>
 8004d40:	6833      	ldr	r3, [r6, #0]
 8004d42:	b30b      	cbz	r3, 8004d88 <__sfp+0x68>
 8004d44:	6836      	ldr	r6, [r6, #0]
 8004d46:	e7f7      	b.n	8004d38 <__sfp+0x18>
 8004d48:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004d4c:	b9d5      	cbnz	r5, 8004d84 <__sfp+0x64>
 8004d4e:	4b16      	ldr	r3, [pc, #88]	; (8004da8 <__sfp+0x88>)
 8004d50:	60e3      	str	r3, [r4, #12]
 8004d52:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004d56:	6665      	str	r5, [r4, #100]	; 0x64
 8004d58:	f000 f847 	bl	8004dea <__retarget_lock_init_recursive>
 8004d5c:	f7ff ff96 	bl	8004c8c <__sfp_lock_release>
 8004d60:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004d64:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004d68:	6025      	str	r5, [r4, #0]
 8004d6a:	61a5      	str	r5, [r4, #24]
 8004d6c:	2208      	movs	r2, #8
 8004d6e:	4629      	mov	r1, r5
 8004d70:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004d74:	f7ff fd2c 	bl	80047d0 <memset>
 8004d78:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004d7c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004d80:	4620      	mov	r0, r4
 8004d82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d84:	3468      	adds	r4, #104	; 0x68
 8004d86:	e7d9      	b.n	8004d3c <__sfp+0x1c>
 8004d88:	2104      	movs	r1, #4
 8004d8a:	4638      	mov	r0, r7
 8004d8c:	f7ff ff62 	bl	8004c54 <__sfmoreglue>
 8004d90:	4604      	mov	r4, r0
 8004d92:	6030      	str	r0, [r6, #0]
 8004d94:	2800      	cmp	r0, #0
 8004d96:	d1d5      	bne.n	8004d44 <__sfp+0x24>
 8004d98:	f7ff ff78 	bl	8004c8c <__sfp_lock_release>
 8004d9c:	230c      	movs	r3, #12
 8004d9e:	603b      	str	r3, [r7, #0]
 8004da0:	e7ee      	b.n	8004d80 <__sfp+0x60>
 8004da2:	bf00      	nop
 8004da4:	08005884 	.word	0x08005884
 8004da8:	ffff0001 	.word	0xffff0001

08004dac <_fwalk_reent>:
 8004dac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004db0:	4606      	mov	r6, r0
 8004db2:	4688      	mov	r8, r1
 8004db4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004db8:	2700      	movs	r7, #0
 8004dba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004dbe:	f1b9 0901 	subs.w	r9, r9, #1
 8004dc2:	d505      	bpl.n	8004dd0 <_fwalk_reent+0x24>
 8004dc4:	6824      	ldr	r4, [r4, #0]
 8004dc6:	2c00      	cmp	r4, #0
 8004dc8:	d1f7      	bne.n	8004dba <_fwalk_reent+0xe>
 8004dca:	4638      	mov	r0, r7
 8004dcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004dd0:	89ab      	ldrh	r3, [r5, #12]
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d907      	bls.n	8004de6 <_fwalk_reent+0x3a>
 8004dd6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004dda:	3301      	adds	r3, #1
 8004ddc:	d003      	beq.n	8004de6 <_fwalk_reent+0x3a>
 8004dde:	4629      	mov	r1, r5
 8004de0:	4630      	mov	r0, r6
 8004de2:	47c0      	blx	r8
 8004de4:	4307      	orrs	r7, r0
 8004de6:	3568      	adds	r5, #104	; 0x68
 8004de8:	e7e9      	b.n	8004dbe <_fwalk_reent+0x12>

08004dea <__retarget_lock_init_recursive>:
 8004dea:	4770      	bx	lr

08004dec <__retarget_lock_acquire_recursive>:
 8004dec:	4770      	bx	lr

08004dee <__retarget_lock_release_recursive>:
 8004dee:	4770      	bx	lr

08004df0 <__swhatbuf_r>:
 8004df0:	b570      	push	{r4, r5, r6, lr}
 8004df2:	460e      	mov	r6, r1
 8004df4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004df8:	2900      	cmp	r1, #0
 8004dfa:	b096      	sub	sp, #88	; 0x58
 8004dfc:	4614      	mov	r4, r2
 8004dfe:	461d      	mov	r5, r3
 8004e00:	da08      	bge.n	8004e14 <__swhatbuf_r+0x24>
 8004e02:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004e06:	2200      	movs	r2, #0
 8004e08:	602a      	str	r2, [r5, #0]
 8004e0a:	061a      	lsls	r2, r3, #24
 8004e0c:	d410      	bmi.n	8004e30 <__swhatbuf_r+0x40>
 8004e0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e12:	e00e      	b.n	8004e32 <__swhatbuf_r+0x42>
 8004e14:	466a      	mov	r2, sp
 8004e16:	f000 fc95 	bl	8005744 <_fstat_r>
 8004e1a:	2800      	cmp	r0, #0
 8004e1c:	dbf1      	blt.n	8004e02 <__swhatbuf_r+0x12>
 8004e1e:	9a01      	ldr	r2, [sp, #4]
 8004e20:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004e24:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004e28:	425a      	negs	r2, r3
 8004e2a:	415a      	adcs	r2, r3
 8004e2c:	602a      	str	r2, [r5, #0]
 8004e2e:	e7ee      	b.n	8004e0e <__swhatbuf_r+0x1e>
 8004e30:	2340      	movs	r3, #64	; 0x40
 8004e32:	2000      	movs	r0, #0
 8004e34:	6023      	str	r3, [r4, #0]
 8004e36:	b016      	add	sp, #88	; 0x58
 8004e38:	bd70      	pop	{r4, r5, r6, pc}
	...

08004e3c <__smakebuf_r>:
 8004e3c:	898b      	ldrh	r3, [r1, #12]
 8004e3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004e40:	079d      	lsls	r5, r3, #30
 8004e42:	4606      	mov	r6, r0
 8004e44:	460c      	mov	r4, r1
 8004e46:	d507      	bpl.n	8004e58 <__smakebuf_r+0x1c>
 8004e48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004e4c:	6023      	str	r3, [r4, #0]
 8004e4e:	6123      	str	r3, [r4, #16]
 8004e50:	2301      	movs	r3, #1
 8004e52:	6163      	str	r3, [r4, #20]
 8004e54:	b002      	add	sp, #8
 8004e56:	bd70      	pop	{r4, r5, r6, pc}
 8004e58:	ab01      	add	r3, sp, #4
 8004e5a:	466a      	mov	r2, sp
 8004e5c:	f7ff ffc8 	bl	8004df0 <__swhatbuf_r>
 8004e60:	9900      	ldr	r1, [sp, #0]
 8004e62:	4605      	mov	r5, r0
 8004e64:	4630      	mov	r0, r6
 8004e66:	f000 f895 	bl	8004f94 <_malloc_r>
 8004e6a:	b948      	cbnz	r0, 8004e80 <__smakebuf_r+0x44>
 8004e6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e70:	059a      	lsls	r2, r3, #22
 8004e72:	d4ef      	bmi.n	8004e54 <__smakebuf_r+0x18>
 8004e74:	f023 0303 	bic.w	r3, r3, #3
 8004e78:	f043 0302 	orr.w	r3, r3, #2
 8004e7c:	81a3      	strh	r3, [r4, #12]
 8004e7e:	e7e3      	b.n	8004e48 <__smakebuf_r+0xc>
 8004e80:	4b0d      	ldr	r3, [pc, #52]	; (8004eb8 <__smakebuf_r+0x7c>)
 8004e82:	62b3      	str	r3, [r6, #40]	; 0x28
 8004e84:	89a3      	ldrh	r3, [r4, #12]
 8004e86:	6020      	str	r0, [r4, #0]
 8004e88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e8c:	81a3      	strh	r3, [r4, #12]
 8004e8e:	9b00      	ldr	r3, [sp, #0]
 8004e90:	6163      	str	r3, [r4, #20]
 8004e92:	9b01      	ldr	r3, [sp, #4]
 8004e94:	6120      	str	r0, [r4, #16]
 8004e96:	b15b      	cbz	r3, 8004eb0 <__smakebuf_r+0x74>
 8004e98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e9c:	4630      	mov	r0, r6
 8004e9e:	f000 fc63 	bl	8005768 <_isatty_r>
 8004ea2:	b128      	cbz	r0, 8004eb0 <__smakebuf_r+0x74>
 8004ea4:	89a3      	ldrh	r3, [r4, #12]
 8004ea6:	f023 0303 	bic.w	r3, r3, #3
 8004eaa:	f043 0301 	orr.w	r3, r3, #1
 8004eae:	81a3      	strh	r3, [r4, #12]
 8004eb0:	89a0      	ldrh	r0, [r4, #12]
 8004eb2:	4305      	orrs	r5, r0
 8004eb4:	81a5      	strh	r5, [r4, #12]
 8004eb6:	e7cd      	b.n	8004e54 <__smakebuf_r+0x18>
 8004eb8:	08004c49 	.word	0x08004c49

08004ebc <_free_r>:
 8004ebc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004ebe:	2900      	cmp	r1, #0
 8004ec0:	d044      	beq.n	8004f4c <_free_r+0x90>
 8004ec2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ec6:	9001      	str	r0, [sp, #4]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	f1a1 0404 	sub.w	r4, r1, #4
 8004ece:	bfb8      	it	lt
 8004ed0:	18e4      	addlt	r4, r4, r3
 8004ed2:	f000 fc6b 	bl	80057ac <__malloc_lock>
 8004ed6:	4a1e      	ldr	r2, [pc, #120]	; (8004f50 <_free_r+0x94>)
 8004ed8:	9801      	ldr	r0, [sp, #4]
 8004eda:	6813      	ldr	r3, [r2, #0]
 8004edc:	b933      	cbnz	r3, 8004eec <_free_r+0x30>
 8004ede:	6063      	str	r3, [r4, #4]
 8004ee0:	6014      	str	r4, [r2, #0]
 8004ee2:	b003      	add	sp, #12
 8004ee4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004ee8:	f000 bc66 	b.w	80057b8 <__malloc_unlock>
 8004eec:	42a3      	cmp	r3, r4
 8004eee:	d908      	bls.n	8004f02 <_free_r+0x46>
 8004ef0:	6825      	ldr	r5, [r4, #0]
 8004ef2:	1961      	adds	r1, r4, r5
 8004ef4:	428b      	cmp	r3, r1
 8004ef6:	bf01      	itttt	eq
 8004ef8:	6819      	ldreq	r1, [r3, #0]
 8004efa:	685b      	ldreq	r3, [r3, #4]
 8004efc:	1949      	addeq	r1, r1, r5
 8004efe:	6021      	streq	r1, [r4, #0]
 8004f00:	e7ed      	b.n	8004ede <_free_r+0x22>
 8004f02:	461a      	mov	r2, r3
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	b10b      	cbz	r3, 8004f0c <_free_r+0x50>
 8004f08:	42a3      	cmp	r3, r4
 8004f0a:	d9fa      	bls.n	8004f02 <_free_r+0x46>
 8004f0c:	6811      	ldr	r1, [r2, #0]
 8004f0e:	1855      	adds	r5, r2, r1
 8004f10:	42a5      	cmp	r5, r4
 8004f12:	d10b      	bne.n	8004f2c <_free_r+0x70>
 8004f14:	6824      	ldr	r4, [r4, #0]
 8004f16:	4421      	add	r1, r4
 8004f18:	1854      	adds	r4, r2, r1
 8004f1a:	42a3      	cmp	r3, r4
 8004f1c:	6011      	str	r1, [r2, #0]
 8004f1e:	d1e0      	bne.n	8004ee2 <_free_r+0x26>
 8004f20:	681c      	ldr	r4, [r3, #0]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	6053      	str	r3, [r2, #4]
 8004f26:	4421      	add	r1, r4
 8004f28:	6011      	str	r1, [r2, #0]
 8004f2a:	e7da      	b.n	8004ee2 <_free_r+0x26>
 8004f2c:	d902      	bls.n	8004f34 <_free_r+0x78>
 8004f2e:	230c      	movs	r3, #12
 8004f30:	6003      	str	r3, [r0, #0]
 8004f32:	e7d6      	b.n	8004ee2 <_free_r+0x26>
 8004f34:	6825      	ldr	r5, [r4, #0]
 8004f36:	1961      	adds	r1, r4, r5
 8004f38:	428b      	cmp	r3, r1
 8004f3a:	bf04      	itt	eq
 8004f3c:	6819      	ldreq	r1, [r3, #0]
 8004f3e:	685b      	ldreq	r3, [r3, #4]
 8004f40:	6063      	str	r3, [r4, #4]
 8004f42:	bf04      	itt	eq
 8004f44:	1949      	addeq	r1, r1, r5
 8004f46:	6021      	streq	r1, [r4, #0]
 8004f48:	6054      	str	r4, [r2, #4]
 8004f4a:	e7ca      	b.n	8004ee2 <_free_r+0x26>
 8004f4c:	b003      	add	sp, #12
 8004f4e:	bd30      	pop	{r4, r5, pc}
 8004f50:	20000234 	.word	0x20000234

08004f54 <sbrk_aligned>:
 8004f54:	b570      	push	{r4, r5, r6, lr}
 8004f56:	4e0e      	ldr	r6, [pc, #56]	; (8004f90 <sbrk_aligned+0x3c>)
 8004f58:	460c      	mov	r4, r1
 8004f5a:	6831      	ldr	r1, [r6, #0]
 8004f5c:	4605      	mov	r5, r0
 8004f5e:	b911      	cbnz	r1, 8004f66 <sbrk_aligned+0x12>
 8004f60:	f000 fb7a 	bl	8005658 <_sbrk_r>
 8004f64:	6030      	str	r0, [r6, #0]
 8004f66:	4621      	mov	r1, r4
 8004f68:	4628      	mov	r0, r5
 8004f6a:	f000 fb75 	bl	8005658 <_sbrk_r>
 8004f6e:	1c43      	adds	r3, r0, #1
 8004f70:	d00a      	beq.n	8004f88 <sbrk_aligned+0x34>
 8004f72:	1cc4      	adds	r4, r0, #3
 8004f74:	f024 0403 	bic.w	r4, r4, #3
 8004f78:	42a0      	cmp	r0, r4
 8004f7a:	d007      	beq.n	8004f8c <sbrk_aligned+0x38>
 8004f7c:	1a21      	subs	r1, r4, r0
 8004f7e:	4628      	mov	r0, r5
 8004f80:	f000 fb6a 	bl	8005658 <_sbrk_r>
 8004f84:	3001      	adds	r0, #1
 8004f86:	d101      	bne.n	8004f8c <sbrk_aligned+0x38>
 8004f88:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004f8c:	4620      	mov	r0, r4
 8004f8e:	bd70      	pop	{r4, r5, r6, pc}
 8004f90:	20000238 	.word	0x20000238

08004f94 <_malloc_r>:
 8004f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f98:	1ccd      	adds	r5, r1, #3
 8004f9a:	f025 0503 	bic.w	r5, r5, #3
 8004f9e:	3508      	adds	r5, #8
 8004fa0:	2d0c      	cmp	r5, #12
 8004fa2:	bf38      	it	cc
 8004fa4:	250c      	movcc	r5, #12
 8004fa6:	2d00      	cmp	r5, #0
 8004fa8:	4607      	mov	r7, r0
 8004faa:	db01      	blt.n	8004fb0 <_malloc_r+0x1c>
 8004fac:	42a9      	cmp	r1, r5
 8004fae:	d905      	bls.n	8004fbc <_malloc_r+0x28>
 8004fb0:	230c      	movs	r3, #12
 8004fb2:	603b      	str	r3, [r7, #0]
 8004fb4:	2600      	movs	r6, #0
 8004fb6:	4630      	mov	r0, r6
 8004fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fbc:	4e2e      	ldr	r6, [pc, #184]	; (8005078 <_malloc_r+0xe4>)
 8004fbe:	f000 fbf5 	bl	80057ac <__malloc_lock>
 8004fc2:	6833      	ldr	r3, [r6, #0]
 8004fc4:	461c      	mov	r4, r3
 8004fc6:	bb34      	cbnz	r4, 8005016 <_malloc_r+0x82>
 8004fc8:	4629      	mov	r1, r5
 8004fca:	4638      	mov	r0, r7
 8004fcc:	f7ff ffc2 	bl	8004f54 <sbrk_aligned>
 8004fd0:	1c43      	adds	r3, r0, #1
 8004fd2:	4604      	mov	r4, r0
 8004fd4:	d14d      	bne.n	8005072 <_malloc_r+0xde>
 8004fd6:	6834      	ldr	r4, [r6, #0]
 8004fd8:	4626      	mov	r6, r4
 8004fda:	2e00      	cmp	r6, #0
 8004fdc:	d140      	bne.n	8005060 <_malloc_r+0xcc>
 8004fde:	6823      	ldr	r3, [r4, #0]
 8004fe0:	4631      	mov	r1, r6
 8004fe2:	4638      	mov	r0, r7
 8004fe4:	eb04 0803 	add.w	r8, r4, r3
 8004fe8:	f000 fb36 	bl	8005658 <_sbrk_r>
 8004fec:	4580      	cmp	r8, r0
 8004fee:	d13a      	bne.n	8005066 <_malloc_r+0xd2>
 8004ff0:	6821      	ldr	r1, [r4, #0]
 8004ff2:	3503      	adds	r5, #3
 8004ff4:	1a6d      	subs	r5, r5, r1
 8004ff6:	f025 0503 	bic.w	r5, r5, #3
 8004ffa:	3508      	adds	r5, #8
 8004ffc:	2d0c      	cmp	r5, #12
 8004ffe:	bf38      	it	cc
 8005000:	250c      	movcc	r5, #12
 8005002:	4629      	mov	r1, r5
 8005004:	4638      	mov	r0, r7
 8005006:	f7ff ffa5 	bl	8004f54 <sbrk_aligned>
 800500a:	3001      	adds	r0, #1
 800500c:	d02b      	beq.n	8005066 <_malloc_r+0xd2>
 800500e:	6823      	ldr	r3, [r4, #0]
 8005010:	442b      	add	r3, r5
 8005012:	6023      	str	r3, [r4, #0]
 8005014:	e00e      	b.n	8005034 <_malloc_r+0xa0>
 8005016:	6822      	ldr	r2, [r4, #0]
 8005018:	1b52      	subs	r2, r2, r5
 800501a:	d41e      	bmi.n	800505a <_malloc_r+0xc6>
 800501c:	2a0b      	cmp	r2, #11
 800501e:	d916      	bls.n	800504e <_malloc_r+0xba>
 8005020:	1961      	adds	r1, r4, r5
 8005022:	42a3      	cmp	r3, r4
 8005024:	6025      	str	r5, [r4, #0]
 8005026:	bf18      	it	ne
 8005028:	6059      	strne	r1, [r3, #4]
 800502a:	6863      	ldr	r3, [r4, #4]
 800502c:	bf08      	it	eq
 800502e:	6031      	streq	r1, [r6, #0]
 8005030:	5162      	str	r2, [r4, r5]
 8005032:	604b      	str	r3, [r1, #4]
 8005034:	4638      	mov	r0, r7
 8005036:	f104 060b 	add.w	r6, r4, #11
 800503a:	f000 fbbd 	bl	80057b8 <__malloc_unlock>
 800503e:	f026 0607 	bic.w	r6, r6, #7
 8005042:	1d23      	adds	r3, r4, #4
 8005044:	1af2      	subs	r2, r6, r3
 8005046:	d0b6      	beq.n	8004fb6 <_malloc_r+0x22>
 8005048:	1b9b      	subs	r3, r3, r6
 800504a:	50a3      	str	r3, [r4, r2]
 800504c:	e7b3      	b.n	8004fb6 <_malloc_r+0x22>
 800504e:	6862      	ldr	r2, [r4, #4]
 8005050:	42a3      	cmp	r3, r4
 8005052:	bf0c      	ite	eq
 8005054:	6032      	streq	r2, [r6, #0]
 8005056:	605a      	strne	r2, [r3, #4]
 8005058:	e7ec      	b.n	8005034 <_malloc_r+0xa0>
 800505a:	4623      	mov	r3, r4
 800505c:	6864      	ldr	r4, [r4, #4]
 800505e:	e7b2      	b.n	8004fc6 <_malloc_r+0x32>
 8005060:	4634      	mov	r4, r6
 8005062:	6876      	ldr	r6, [r6, #4]
 8005064:	e7b9      	b.n	8004fda <_malloc_r+0x46>
 8005066:	230c      	movs	r3, #12
 8005068:	603b      	str	r3, [r7, #0]
 800506a:	4638      	mov	r0, r7
 800506c:	f000 fba4 	bl	80057b8 <__malloc_unlock>
 8005070:	e7a1      	b.n	8004fb6 <_malloc_r+0x22>
 8005072:	6025      	str	r5, [r4, #0]
 8005074:	e7de      	b.n	8005034 <_malloc_r+0xa0>
 8005076:	bf00      	nop
 8005078:	20000234 	.word	0x20000234

0800507c <__sfputc_r>:
 800507c:	6893      	ldr	r3, [r2, #8]
 800507e:	3b01      	subs	r3, #1
 8005080:	2b00      	cmp	r3, #0
 8005082:	b410      	push	{r4}
 8005084:	6093      	str	r3, [r2, #8]
 8005086:	da08      	bge.n	800509a <__sfputc_r+0x1e>
 8005088:	6994      	ldr	r4, [r2, #24]
 800508a:	42a3      	cmp	r3, r4
 800508c:	db01      	blt.n	8005092 <__sfputc_r+0x16>
 800508e:	290a      	cmp	r1, #10
 8005090:	d103      	bne.n	800509a <__sfputc_r+0x1e>
 8005092:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005096:	f7ff bc31 	b.w	80048fc <__swbuf_r>
 800509a:	6813      	ldr	r3, [r2, #0]
 800509c:	1c58      	adds	r0, r3, #1
 800509e:	6010      	str	r0, [r2, #0]
 80050a0:	7019      	strb	r1, [r3, #0]
 80050a2:	4608      	mov	r0, r1
 80050a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80050a8:	4770      	bx	lr

080050aa <__sfputs_r>:
 80050aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ac:	4606      	mov	r6, r0
 80050ae:	460f      	mov	r7, r1
 80050b0:	4614      	mov	r4, r2
 80050b2:	18d5      	adds	r5, r2, r3
 80050b4:	42ac      	cmp	r4, r5
 80050b6:	d101      	bne.n	80050bc <__sfputs_r+0x12>
 80050b8:	2000      	movs	r0, #0
 80050ba:	e007      	b.n	80050cc <__sfputs_r+0x22>
 80050bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050c0:	463a      	mov	r2, r7
 80050c2:	4630      	mov	r0, r6
 80050c4:	f7ff ffda 	bl	800507c <__sfputc_r>
 80050c8:	1c43      	adds	r3, r0, #1
 80050ca:	d1f3      	bne.n	80050b4 <__sfputs_r+0xa>
 80050cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080050d0 <_vfiprintf_r>:
 80050d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050d4:	460d      	mov	r5, r1
 80050d6:	b09d      	sub	sp, #116	; 0x74
 80050d8:	4614      	mov	r4, r2
 80050da:	4698      	mov	r8, r3
 80050dc:	4606      	mov	r6, r0
 80050de:	b118      	cbz	r0, 80050e8 <_vfiprintf_r+0x18>
 80050e0:	6983      	ldr	r3, [r0, #24]
 80050e2:	b90b      	cbnz	r3, 80050e8 <_vfiprintf_r+0x18>
 80050e4:	f7ff fde4 	bl	8004cb0 <__sinit>
 80050e8:	4b89      	ldr	r3, [pc, #548]	; (8005310 <_vfiprintf_r+0x240>)
 80050ea:	429d      	cmp	r5, r3
 80050ec:	d11b      	bne.n	8005126 <_vfiprintf_r+0x56>
 80050ee:	6875      	ldr	r5, [r6, #4]
 80050f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80050f2:	07d9      	lsls	r1, r3, #31
 80050f4:	d405      	bmi.n	8005102 <_vfiprintf_r+0x32>
 80050f6:	89ab      	ldrh	r3, [r5, #12]
 80050f8:	059a      	lsls	r2, r3, #22
 80050fa:	d402      	bmi.n	8005102 <_vfiprintf_r+0x32>
 80050fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80050fe:	f7ff fe75 	bl	8004dec <__retarget_lock_acquire_recursive>
 8005102:	89ab      	ldrh	r3, [r5, #12]
 8005104:	071b      	lsls	r3, r3, #28
 8005106:	d501      	bpl.n	800510c <_vfiprintf_r+0x3c>
 8005108:	692b      	ldr	r3, [r5, #16]
 800510a:	b9eb      	cbnz	r3, 8005148 <_vfiprintf_r+0x78>
 800510c:	4629      	mov	r1, r5
 800510e:	4630      	mov	r0, r6
 8005110:	f7ff fc46 	bl	80049a0 <__swsetup_r>
 8005114:	b1c0      	cbz	r0, 8005148 <_vfiprintf_r+0x78>
 8005116:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005118:	07dc      	lsls	r4, r3, #31
 800511a:	d50e      	bpl.n	800513a <_vfiprintf_r+0x6a>
 800511c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005120:	b01d      	add	sp, #116	; 0x74
 8005122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005126:	4b7b      	ldr	r3, [pc, #492]	; (8005314 <_vfiprintf_r+0x244>)
 8005128:	429d      	cmp	r5, r3
 800512a:	d101      	bne.n	8005130 <_vfiprintf_r+0x60>
 800512c:	68b5      	ldr	r5, [r6, #8]
 800512e:	e7df      	b.n	80050f0 <_vfiprintf_r+0x20>
 8005130:	4b79      	ldr	r3, [pc, #484]	; (8005318 <_vfiprintf_r+0x248>)
 8005132:	429d      	cmp	r5, r3
 8005134:	bf08      	it	eq
 8005136:	68f5      	ldreq	r5, [r6, #12]
 8005138:	e7da      	b.n	80050f0 <_vfiprintf_r+0x20>
 800513a:	89ab      	ldrh	r3, [r5, #12]
 800513c:	0598      	lsls	r0, r3, #22
 800513e:	d4ed      	bmi.n	800511c <_vfiprintf_r+0x4c>
 8005140:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005142:	f7ff fe54 	bl	8004dee <__retarget_lock_release_recursive>
 8005146:	e7e9      	b.n	800511c <_vfiprintf_r+0x4c>
 8005148:	2300      	movs	r3, #0
 800514a:	9309      	str	r3, [sp, #36]	; 0x24
 800514c:	2320      	movs	r3, #32
 800514e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005152:	f8cd 800c 	str.w	r8, [sp, #12]
 8005156:	2330      	movs	r3, #48	; 0x30
 8005158:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800531c <_vfiprintf_r+0x24c>
 800515c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005160:	f04f 0901 	mov.w	r9, #1
 8005164:	4623      	mov	r3, r4
 8005166:	469a      	mov	sl, r3
 8005168:	f813 2b01 	ldrb.w	r2, [r3], #1
 800516c:	b10a      	cbz	r2, 8005172 <_vfiprintf_r+0xa2>
 800516e:	2a25      	cmp	r2, #37	; 0x25
 8005170:	d1f9      	bne.n	8005166 <_vfiprintf_r+0x96>
 8005172:	ebba 0b04 	subs.w	fp, sl, r4
 8005176:	d00b      	beq.n	8005190 <_vfiprintf_r+0xc0>
 8005178:	465b      	mov	r3, fp
 800517a:	4622      	mov	r2, r4
 800517c:	4629      	mov	r1, r5
 800517e:	4630      	mov	r0, r6
 8005180:	f7ff ff93 	bl	80050aa <__sfputs_r>
 8005184:	3001      	adds	r0, #1
 8005186:	f000 80aa 	beq.w	80052de <_vfiprintf_r+0x20e>
 800518a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800518c:	445a      	add	r2, fp
 800518e:	9209      	str	r2, [sp, #36]	; 0x24
 8005190:	f89a 3000 	ldrb.w	r3, [sl]
 8005194:	2b00      	cmp	r3, #0
 8005196:	f000 80a2 	beq.w	80052de <_vfiprintf_r+0x20e>
 800519a:	2300      	movs	r3, #0
 800519c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80051a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80051a4:	f10a 0a01 	add.w	sl, sl, #1
 80051a8:	9304      	str	r3, [sp, #16]
 80051aa:	9307      	str	r3, [sp, #28]
 80051ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80051b0:	931a      	str	r3, [sp, #104]	; 0x68
 80051b2:	4654      	mov	r4, sl
 80051b4:	2205      	movs	r2, #5
 80051b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051ba:	4858      	ldr	r0, [pc, #352]	; (800531c <_vfiprintf_r+0x24c>)
 80051bc:	f7fb f810 	bl	80001e0 <memchr>
 80051c0:	9a04      	ldr	r2, [sp, #16]
 80051c2:	b9d8      	cbnz	r0, 80051fc <_vfiprintf_r+0x12c>
 80051c4:	06d1      	lsls	r1, r2, #27
 80051c6:	bf44      	itt	mi
 80051c8:	2320      	movmi	r3, #32
 80051ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80051ce:	0713      	lsls	r3, r2, #28
 80051d0:	bf44      	itt	mi
 80051d2:	232b      	movmi	r3, #43	; 0x2b
 80051d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80051d8:	f89a 3000 	ldrb.w	r3, [sl]
 80051dc:	2b2a      	cmp	r3, #42	; 0x2a
 80051de:	d015      	beq.n	800520c <_vfiprintf_r+0x13c>
 80051e0:	9a07      	ldr	r2, [sp, #28]
 80051e2:	4654      	mov	r4, sl
 80051e4:	2000      	movs	r0, #0
 80051e6:	f04f 0c0a 	mov.w	ip, #10
 80051ea:	4621      	mov	r1, r4
 80051ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80051f0:	3b30      	subs	r3, #48	; 0x30
 80051f2:	2b09      	cmp	r3, #9
 80051f4:	d94e      	bls.n	8005294 <_vfiprintf_r+0x1c4>
 80051f6:	b1b0      	cbz	r0, 8005226 <_vfiprintf_r+0x156>
 80051f8:	9207      	str	r2, [sp, #28]
 80051fa:	e014      	b.n	8005226 <_vfiprintf_r+0x156>
 80051fc:	eba0 0308 	sub.w	r3, r0, r8
 8005200:	fa09 f303 	lsl.w	r3, r9, r3
 8005204:	4313      	orrs	r3, r2
 8005206:	9304      	str	r3, [sp, #16]
 8005208:	46a2      	mov	sl, r4
 800520a:	e7d2      	b.n	80051b2 <_vfiprintf_r+0xe2>
 800520c:	9b03      	ldr	r3, [sp, #12]
 800520e:	1d19      	adds	r1, r3, #4
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	9103      	str	r1, [sp, #12]
 8005214:	2b00      	cmp	r3, #0
 8005216:	bfbb      	ittet	lt
 8005218:	425b      	neglt	r3, r3
 800521a:	f042 0202 	orrlt.w	r2, r2, #2
 800521e:	9307      	strge	r3, [sp, #28]
 8005220:	9307      	strlt	r3, [sp, #28]
 8005222:	bfb8      	it	lt
 8005224:	9204      	strlt	r2, [sp, #16]
 8005226:	7823      	ldrb	r3, [r4, #0]
 8005228:	2b2e      	cmp	r3, #46	; 0x2e
 800522a:	d10c      	bne.n	8005246 <_vfiprintf_r+0x176>
 800522c:	7863      	ldrb	r3, [r4, #1]
 800522e:	2b2a      	cmp	r3, #42	; 0x2a
 8005230:	d135      	bne.n	800529e <_vfiprintf_r+0x1ce>
 8005232:	9b03      	ldr	r3, [sp, #12]
 8005234:	1d1a      	adds	r2, r3, #4
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	9203      	str	r2, [sp, #12]
 800523a:	2b00      	cmp	r3, #0
 800523c:	bfb8      	it	lt
 800523e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005242:	3402      	adds	r4, #2
 8005244:	9305      	str	r3, [sp, #20]
 8005246:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800532c <_vfiprintf_r+0x25c>
 800524a:	7821      	ldrb	r1, [r4, #0]
 800524c:	2203      	movs	r2, #3
 800524e:	4650      	mov	r0, sl
 8005250:	f7fa ffc6 	bl	80001e0 <memchr>
 8005254:	b140      	cbz	r0, 8005268 <_vfiprintf_r+0x198>
 8005256:	2340      	movs	r3, #64	; 0x40
 8005258:	eba0 000a 	sub.w	r0, r0, sl
 800525c:	fa03 f000 	lsl.w	r0, r3, r0
 8005260:	9b04      	ldr	r3, [sp, #16]
 8005262:	4303      	orrs	r3, r0
 8005264:	3401      	adds	r4, #1
 8005266:	9304      	str	r3, [sp, #16]
 8005268:	f814 1b01 	ldrb.w	r1, [r4], #1
 800526c:	482c      	ldr	r0, [pc, #176]	; (8005320 <_vfiprintf_r+0x250>)
 800526e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005272:	2206      	movs	r2, #6
 8005274:	f7fa ffb4 	bl	80001e0 <memchr>
 8005278:	2800      	cmp	r0, #0
 800527a:	d03f      	beq.n	80052fc <_vfiprintf_r+0x22c>
 800527c:	4b29      	ldr	r3, [pc, #164]	; (8005324 <_vfiprintf_r+0x254>)
 800527e:	bb1b      	cbnz	r3, 80052c8 <_vfiprintf_r+0x1f8>
 8005280:	9b03      	ldr	r3, [sp, #12]
 8005282:	3307      	adds	r3, #7
 8005284:	f023 0307 	bic.w	r3, r3, #7
 8005288:	3308      	adds	r3, #8
 800528a:	9303      	str	r3, [sp, #12]
 800528c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800528e:	443b      	add	r3, r7
 8005290:	9309      	str	r3, [sp, #36]	; 0x24
 8005292:	e767      	b.n	8005164 <_vfiprintf_r+0x94>
 8005294:	fb0c 3202 	mla	r2, ip, r2, r3
 8005298:	460c      	mov	r4, r1
 800529a:	2001      	movs	r0, #1
 800529c:	e7a5      	b.n	80051ea <_vfiprintf_r+0x11a>
 800529e:	2300      	movs	r3, #0
 80052a0:	3401      	adds	r4, #1
 80052a2:	9305      	str	r3, [sp, #20]
 80052a4:	4619      	mov	r1, r3
 80052a6:	f04f 0c0a 	mov.w	ip, #10
 80052aa:	4620      	mov	r0, r4
 80052ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80052b0:	3a30      	subs	r2, #48	; 0x30
 80052b2:	2a09      	cmp	r2, #9
 80052b4:	d903      	bls.n	80052be <_vfiprintf_r+0x1ee>
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d0c5      	beq.n	8005246 <_vfiprintf_r+0x176>
 80052ba:	9105      	str	r1, [sp, #20]
 80052bc:	e7c3      	b.n	8005246 <_vfiprintf_r+0x176>
 80052be:	fb0c 2101 	mla	r1, ip, r1, r2
 80052c2:	4604      	mov	r4, r0
 80052c4:	2301      	movs	r3, #1
 80052c6:	e7f0      	b.n	80052aa <_vfiprintf_r+0x1da>
 80052c8:	ab03      	add	r3, sp, #12
 80052ca:	9300      	str	r3, [sp, #0]
 80052cc:	462a      	mov	r2, r5
 80052ce:	4b16      	ldr	r3, [pc, #88]	; (8005328 <_vfiprintf_r+0x258>)
 80052d0:	a904      	add	r1, sp, #16
 80052d2:	4630      	mov	r0, r6
 80052d4:	f3af 8000 	nop.w
 80052d8:	4607      	mov	r7, r0
 80052da:	1c78      	adds	r0, r7, #1
 80052dc:	d1d6      	bne.n	800528c <_vfiprintf_r+0x1bc>
 80052de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80052e0:	07d9      	lsls	r1, r3, #31
 80052e2:	d405      	bmi.n	80052f0 <_vfiprintf_r+0x220>
 80052e4:	89ab      	ldrh	r3, [r5, #12]
 80052e6:	059a      	lsls	r2, r3, #22
 80052e8:	d402      	bmi.n	80052f0 <_vfiprintf_r+0x220>
 80052ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80052ec:	f7ff fd7f 	bl	8004dee <__retarget_lock_release_recursive>
 80052f0:	89ab      	ldrh	r3, [r5, #12]
 80052f2:	065b      	lsls	r3, r3, #25
 80052f4:	f53f af12 	bmi.w	800511c <_vfiprintf_r+0x4c>
 80052f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80052fa:	e711      	b.n	8005120 <_vfiprintf_r+0x50>
 80052fc:	ab03      	add	r3, sp, #12
 80052fe:	9300      	str	r3, [sp, #0]
 8005300:	462a      	mov	r2, r5
 8005302:	4b09      	ldr	r3, [pc, #36]	; (8005328 <_vfiprintf_r+0x258>)
 8005304:	a904      	add	r1, sp, #16
 8005306:	4630      	mov	r0, r6
 8005308:	f000 f880 	bl	800540c <_printf_i>
 800530c:	e7e4      	b.n	80052d8 <_vfiprintf_r+0x208>
 800530e:	bf00      	nop
 8005310:	080058a8 	.word	0x080058a8
 8005314:	080058c8 	.word	0x080058c8
 8005318:	08005888 	.word	0x08005888
 800531c:	080058e8 	.word	0x080058e8
 8005320:	080058f2 	.word	0x080058f2
 8005324:	00000000 	.word	0x00000000
 8005328:	080050ab 	.word	0x080050ab
 800532c:	080058ee 	.word	0x080058ee

08005330 <_printf_common>:
 8005330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005334:	4616      	mov	r6, r2
 8005336:	4699      	mov	r9, r3
 8005338:	688a      	ldr	r2, [r1, #8]
 800533a:	690b      	ldr	r3, [r1, #16]
 800533c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005340:	4293      	cmp	r3, r2
 8005342:	bfb8      	it	lt
 8005344:	4613      	movlt	r3, r2
 8005346:	6033      	str	r3, [r6, #0]
 8005348:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800534c:	4607      	mov	r7, r0
 800534e:	460c      	mov	r4, r1
 8005350:	b10a      	cbz	r2, 8005356 <_printf_common+0x26>
 8005352:	3301      	adds	r3, #1
 8005354:	6033      	str	r3, [r6, #0]
 8005356:	6823      	ldr	r3, [r4, #0]
 8005358:	0699      	lsls	r1, r3, #26
 800535a:	bf42      	ittt	mi
 800535c:	6833      	ldrmi	r3, [r6, #0]
 800535e:	3302      	addmi	r3, #2
 8005360:	6033      	strmi	r3, [r6, #0]
 8005362:	6825      	ldr	r5, [r4, #0]
 8005364:	f015 0506 	ands.w	r5, r5, #6
 8005368:	d106      	bne.n	8005378 <_printf_common+0x48>
 800536a:	f104 0a19 	add.w	sl, r4, #25
 800536e:	68e3      	ldr	r3, [r4, #12]
 8005370:	6832      	ldr	r2, [r6, #0]
 8005372:	1a9b      	subs	r3, r3, r2
 8005374:	42ab      	cmp	r3, r5
 8005376:	dc26      	bgt.n	80053c6 <_printf_common+0x96>
 8005378:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800537c:	1e13      	subs	r3, r2, #0
 800537e:	6822      	ldr	r2, [r4, #0]
 8005380:	bf18      	it	ne
 8005382:	2301      	movne	r3, #1
 8005384:	0692      	lsls	r2, r2, #26
 8005386:	d42b      	bmi.n	80053e0 <_printf_common+0xb0>
 8005388:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800538c:	4649      	mov	r1, r9
 800538e:	4638      	mov	r0, r7
 8005390:	47c0      	blx	r8
 8005392:	3001      	adds	r0, #1
 8005394:	d01e      	beq.n	80053d4 <_printf_common+0xa4>
 8005396:	6823      	ldr	r3, [r4, #0]
 8005398:	68e5      	ldr	r5, [r4, #12]
 800539a:	6832      	ldr	r2, [r6, #0]
 800539c:	f003 0306 	and.w	r3, r3, #6
 80053a0:	2b04      	cmp	r3, #4
 80053a2:	bf08      	it	eq
 80053a4:	1aad      	subeq	r5, r5, r2
 80053a6:	68a3      	ldr	r3, [r4, #8]
 80053a8:	6922      	ldr	r2, [r4, #16]
 80053aa:	bf0c      	ite	eq
 80053ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80053b0:	2500      	movne	r5, #0
 80053b2:	4293      	cmp	r3, r2
 80053b4:	bfc4      	itt	gt
 80053b6:	1a9b      	subgt	r3, r3, r2
 80053b8:	18ed      	addgt	r5, r5, r3
 80053ba:	2600      	movs	r6, #0
 80053bc:	341a      	adds	r4, #26
 80053be:	42b5      	cmp	r5, r6
 80053c0:	d11a      	bne.n	80053f8 <_printf_common+0xc8>
 80053c2:	2000      	movs	r0, #0
 80053c4:	e008      	b.n	80053d8 <_printf_common+0xa8>
 80053c6:	2301      	movs	r3, #1
 80053c8:	4652      	mov	r2, sl
 80053ca:	4649      	mov	r1, r9
 80053cc:	4638      	mov	r0, r7
 80053ce:	47c0      	blx	r8
 80053d0:	3001      	adds	r0, #1
 80053d2:	d103      	bne.n	80053dc <_printf_common+0xac>
 80053d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80053d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053dc:	3501      	adds	r5, #1
 80053de:	e7c6      	b.n	800536e <_printf_common+0x3e>
 80053e0:	18e1      	adds	r1, r4, r3
 80053e2:	1c5a      	adds	r2, r3, #1
 80053e4:	2030      	movs	r0, #48	; 0x30
 80053e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80053ea:	4422      	add	r2, r4
 80053ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80053f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80053f4:	3302      	adds	r3, #2
 80053f6:	e7c7      	b.n	8005388 <_printf_common+0x58>
 80053f8:	2301      	movs	r3, #1
 80053fa:	4622      	mov	r2, r4
 80053fc:	4649      	mov	r1, r9
 80053fe:	4638      	mov	r0, r7
 8005400:	47c0      	blx	r8
 8005402:	3001      	adds	r0, #1
 8005404:	d0e6      	beq.n	80053d4 <_printf_common+0xa4>
 8005406:	3601      	adds	r6, #1
 8005408:	e7d9      	b.n	80053be <_printf_common+0x8e>
	...

0800540c <_printf_i>:
 800540c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005410:	7e0f      	ldrb	r7, [r1, #24]
 8005412:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005414:	2f78      	cmp	r7, #120	; 0x78
 8005416:	4691      	mov	r9, r2
 8005418:	4680      	mov	r8, r0
 800541a:	460c      	mov	r4, r1
 800541c:	469a      	mov	sl, r3
 800541e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005422:	d807      	bhi.n	8005434 <_printf_i+0x28>
 8005424:	2f62      	cmp	r7, #98	; 0x62
 8005426:	d80a      	bhi.n	800543e <_printf_i+0x32>
 8005428:	2f00      	cmp	r7, #0
 800542a:	f000 80d8 	beq.w	80055de <_printf_i+0x1d2>
 800542e:	2f58      	cmp	r7, #88	; 0x58
 8005430:	f000 80a3 	beq.w	800557a <_printf_i+0x16e>
 8005434:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005438:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800543c:	e03a      	b.n	80054b4 <_printf_i+0xa8>
 800543e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005442:	2b15      	cmp	r3, #21
 8005444:	d8f6      	bhi.n	8005434 <_printf_i+0x28>
 8005446:	a101      	add	r1, pc, #4	; (adr r1, 800544c <_printf_i+0x40>)
 8005448:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800544c:	080054a5 	.word	0x080054a5
 8005450:	080054b9 	.word	0x080054b9
 8005454:	08005435 	.word	0x08005435
 8005458:	08005435 	.word	0x08005435
 800545c:	08005435 	.word	0x08005435
 8005460:	08005435 	.word	0x08005435
 8005464:	080054b9 	.word	0x080054b9
 8005468:	08005435 	.word	0x08005435
 800546c:	08005435 	.word	0x08005435
 8005470:	08005435 	.word	0x08005435
 8005474:	08005435 	.word	0x08005435
 8005478:	080055c5 	.word	0x080055c5
 800547c:	080054e9 	.word	0x080054e9
 8005480:	080055a7 	.word	0x080055a7
 8005484:	08005435 	.word	0x08005435
 8005488:	08005435 	.word	0x08005435
 800548c:	080055e7 	.word	0x080055e7
 8005490:	08005435 	.word	0x08005435
 8005494:	080054e9 	.word	0x080054e9
 8005498:	08005435 	.word	0x08005435
 800549c:	08005435 	.word	0x08005435
 80054a0:	080055af 	.word	0x080055af
 80054a4:	682b      	ldr	r3, [r5, #0]
 80054a6:	1d1a      	adds	r2, r3, #4
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	602a      	str	r2, [r5, #0]
 80054ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80054b4:	2301      	movs	r3, #1
 80054b6:	e0a3      	b.n	8005600 <_printf_i+0x1f4>
 80054b8:	6820      	ldr	r0, [r4, #0]
 80054ba:	6829      	ldr	r1, [r5, #0]
 80054bc:	0606      	lsls	r6, r0, #24
 80054be:	f101 0304 	add.w	r3, r1, #4
 80054c2:	d50a      	bpl.n	80054da <_printf_i+0xce>
 80054c4:	680e      	ldr	r6, [r1, #0]
 80054c6:	602b      	str	r3, [r5, #0]
 80054c8:	2e00      	cmp	r6, #0
 80054ca:	da03      	bge.n	80054d4 <_printf_i+0xc8>
 80054cc:	232d      	movs	r3, #45	; 0x2d
 80054ce:	4276      	negs	r6, r6
 80054d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054d4:	485e      	ldr	r0, [pc, #376]	; (8005650 <_printf_i+0x244>)
 80054d6:	230a      	movs	r3, #10
 80054d8:	e019      	b.n	800550e <_printf_i+0x102>
 80054da:	680e      	ldr	r6, [r1, #0]
 80054dc:	602b      	str	r3, [r5, #0]
 80054de:	f010 0f40 	tst.w	r0, #64	; 0x40
 80054e2:	bf18      	it	ne
 80054e4:	b236      	sxthne	r6, r6
 80054e6:	e7ef      	b.n	80054c8 <_printf_i+0xbc>
 80054e8:	682b      	ldr	r3, [r5, #0]
 80054ea:	6820      	ldr	r0, [r4, #0]
 80054ec:	1d19      	adds	r1, r3, #4
 80054ee:	6029      	str	r1, [r5, #0]
 80054f0:	0601      	lsls	r1, r0, #24
 80054f2:	d501      	bpl.n	80054f8 <_printf_i+0xec>
 80054f4:	681e      	ldr	r6, [r3, #0]
 80054f6:	e002      	b.n	80054fe <_printf_i+0xf2>
 80054f8:	0646      	lsls	r6, r0, #25
 80054fa:	d5fb      	bpl.n	80054f4 <_printf_i+0xe8>
 80054fc:	881e      	ldrh	r6, [r3, #0]
 80054fe:	4854      	ldr	r0, [pc, #336]	; (8005650 <_printf_i+0x244>)
 8005500:	2f6f      	cmp	r7, #111	; 0x6f
 8005502:	bf0c      	ite	eq
 8005504:	2308      	moveq	r3, #8
 8005506:	230a      	movne	r3, #10
 8005508:	2100      	movs	r1, #0
 800550a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800550e:	6865      	ldr	r5, [r4, #4]
 8005510:	60a5      	str	r5, [r4, #8]
 8005512:	2d00      	cmp	r5, #0
 8005514:	bfa2      	ittt	ge
 8005516:	6821      	ldrge	r1, [r4, #0]
 8005518:	f021 0104 	bicge.w	r1, r1, #4
 800551c:	6021      	strge	r1, [r4, #0]
 800551e:	b90e      	cbnz	r6, 8005524 <_printf_i+0x118>
 8005520:	2d00      	cmp	r5, #0
 8005522:	d04d      	beq.n	80055c0 <_printf_i+0x1b4>
 8005524:	4615      	mov	r5, r2
 8005526:	fbb6 f1f3 	udiv	r1, r6, r3
 800552a:	fb03 6711 	mls	r7, r3, r1, r6
 800552e:	5dc7      	ldrb	r7, [r0, r7]
 8005530:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005534:	4637      	mov	r7, r6
 8005536:	42bb      	cmp	r3, r7
 8005538:	460e      	mov	r6, r1
 800553a:	d9f4      	bls.n	8005526 <_printf_i+0x11a>
 800553c:	2b08      	cmp	r3, #8
 800553e:	d10b      	bne.n	8005558 <_printf_i+0x14c>
 8005540:	6823      	ldr	r3, [r4, #0]
 8005542:	07de      	lsls	r6, r3, #31
 8005544:	d508      	bpl.n	8005558 <_printf_i+0x14c>
 8005546:	6923      	ldr	r3, [r4, #16]
 8005548:	6861      	ldr	r1, [r4, #4]
 800554a:	4299      	cmp	r1, r3
 800554c:	bfde      	ittt	le
 800554e:	2330      	movle	r3, #48	; 0x30
 8005550:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005554:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005558:	1b52      	subs	r2, r2, r5
 800555a:	6122      	str	r2, [r4, #16]
 800555c:	f8cd a000 	str.w	sl, [sp]
 8005560:	464b      	mov	r3, r9
 8005562:	aa03      	add	r2, sp, #12
 8005564:	4621      	mov	r1, r4
 8005566:	4640      	mov	r0, r8
 8005568:	f7ff fee2 	bl	8005330 <_printf_common>
 800556c:	3001      	adds	r0, #1
 800556e:	d14c      	bne.n	800560a <_printf_i+0x1fe>
 8005570:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005574:	b004      	add	sp, #16
 8005576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800557a:	4835      	ldr	r0, [pc, #212]	; (8005650 <_printf_i+0x244>)
 800557c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005580:	6829      	ldr	r1, [r5, #0]
 8005582:	6823      	ldr	r3, [r4, #0]
 8005584:	f851 6b04 	ldr.w	r6, [r1], #4
 8005588:	6029      	str	r1, [r5, #0]
 800558a:	061d      	lsls	r5, r3, #24
 800558c:	d514      	bpl.n	80055b8 <_printf_i+0x1ac>
 800558e:	07df      	lsls	r7, r3, #31
 8005590:	bf44      	itt	mi
 8005592:	f043 0320 	orrmi.w	r3, r3, #32
 8005596:	6023      	strmi	r3, [r4, #0]
 8005598:	b91e      	cbnz	r6, 80055a2 <_printf_i+0x196>
 800559a:	6823      	ldr	r3, [r4, #0]
 800559c:	f023 0320 	bic.w	r3, r3, #32
 80055a0:	6023      	str	r3, [r4, #0]
 80055a2:	2310      	movs	r3, #16
 80055a4:	e7b0      	b.n	8005508 <_printf_i+0xfc>
 80055a6:	6823      	ldr	r3, [r4, #0]
 80055a8:	f043 0320 	orr.w	r3, r3, #32
 80055ac:	6023      	str	r3, [r4, #0]
 80055ae:	2378      	movs	r3, #120	; 0x78
 80055b0:	4828      	ldr	r0, [pc, #160]	; (8005654 <_printf_i+0x248>)
 80055b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80055b6:	e7e3      	b.n	8005580 <_printf_i+0x174>
 80055b8:	0659      	lsls	r1, r3, #25
 80055ba:	bf48      	it	mi
 80055bc:	b2b6      	uxthmi	r6, r6
 80055be:	e7e6      	b.n	800558e <_printf_i+0x182>
 80055c0:	4615      	mov	r5, r2
 80055c2:	e7bb      	b.n	800553c <_printf_i+0x130>
 80055c4:	682b      	ldr	r3, [r5, #0]
 80055c6:	6826      	ldr	r6, [r4, #0]
 80055c8:	6961      	ldr	r1, [r4, #20]
 80055ca:	1d18      	adds	r0, r3, #4
 80055cc:	6028      	str	r0, [r5, #0]
 80055ce:	0635      	lsls	r5, r6, #24
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	d501      	bpl.n	80055d8 <_printf_i+0x1cc>
 80055d4:	6019      	str	r1, [r3, #0]
 80055d6:	e002      	b.n	80055de <_printf_i+0x1d2>
 80055d8:	0670      	lsls	r0, r6, #25
 80055da:	d5fb      	bpl.n	80055d4 <_printf_i+0x1c8>
 80055dc:	8019      	strh	r1, [r3, #0]
 80055de:	2300      	movs	r3, #0
 80055e0:	6123      	str	r3, [r4, #16]
 80055e2:	4615      	mov	r5, r2
 80055e4:	e7ba      	b.n	800555c <_printf_i+0x150>
 80055e6:	682b      	ldr	r3, [r5, #0]
 80055e8:	1d1a      	adds	r2, r3, #4
 80055ea:	602a      	str	r2, [r5, #0]
 80055ec:	681d      	ldr	r5, [r3, #0]
 80055ee:	6862      	ldr	r2, [r4, #4]
 80055f0:	2100      	movs	r1, #0
 80055f2:	4628      	mov	r0, r5
 80055f4:	f7fa fdf4 	bl	80001e0 <memchr>
 80055f8:	b108      	cbz	r0, 80055fe <_printf_i+0x1f2>
 80055fa:	1b40      	subs	r0, r0, r5
 80055fc:	6060      	str	r0, [r4, #4]
 80055fe:	6863      	ldr	r3, [r4, #4]
 8005600:	6123      	str	r3, [r4, #16]
 8005602:	2300      	movs	r3, #0
 8005604:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005608:	e7a8      	b.n	800555c <_printf_i+0x150>
 800560a:	6923      	ldr	r3, [r4, #16]
 800560c:	462a      	mov	r2, r5
 800560e:	4649      	mov	r1, r9
 8005610:	4640      	mov	r0, r8
 8005612:	47d0      	blx	sl
 8005614:	3001      	adds	r0, #1
 8005616:	d0ab      	beq.n	8005570 <_printf_i+0x164>
 8005618:	6823      	ldr	r3, [r4, #0]
 800561a:	079b      	lsls	r3, r3, #30
 800561c:	d413      	bmi.n	8005646 <_printf_i+0x23a>
 800561e:	68e0      	ldr	r0, [r4, #12]
 8005620:	9b03      	ldr	r3, [sp, #12]
 8005622:	4298      	cmp	r0, r3
 8005624:	bfb8      	it	lt
 8005626:	4618      	movlt	r0, r3
 8005628:	e7a4      	b.n	8005574 <_printf_i+0x168>
 800562a:	2301      	movs	r3, #1
 800562c:	4632      	mov	r2, r6
 800562e:	4649      	mov	r1, r9
 8005630:	4640      	mov	r0, r8
 8005632:	47d0      	blx	sl
 8005634:	3001      	adds	r0, #1
 8005636:	d09b      	beq.n	8005570 <_printf_i+0x164>
 8005638:	3501      	adds	r5, #1
 800563a:	68e3      	ldr	r3, [r4, #12]
 800563c:	9903      	ldr	r1, [sp, #12]
 800563e:	1a5b      	subs	r3, r3, r1
 8005640:	42ab      	cmp	r3, r5
 8005642:	dcf2      	bgt.n	800562a <_printf_i+0x21e>
 8005644:	e7eb      	b.n	800561e <_printf_i+0x212>
 8005646:	2500      	movs	r5, #0
 8005648:	f104 0619 	add.w	r6, r4, #25
 800564c:	e7f5      	b.n	800563a <_printf_i+0x22e>
 800564e:	bf00      	nop
 8005650:	080058f9 	.word	0x080058f9
 8005654:	0800590a 	.word	0x0800590a

08005658 <_sbrk_r>:
 8005658:	b538      	push	{r3, r4, r5, lr}
 800565a:	4d06      	ldr	r5, [pc, #24]	; (8005674 <_sbrk_r+0x1c>)
 800565c:	2300      	movs	r3, #0
 800565e:	4604      	mov	r4, r0
 8005660:	4608      	mov	r0, r1
 8005662:	602b      	str	r3, [r5, #0]
 8005664:	f7fb ffba 	bl	80015dc <_sbrk>
 8005668:	1c43      	adds	r3, r0, #1
 800566a:	d102      	bne.n	8005672 <_sbrk_r+0x1a>
 800566c:	682b      	ldr	r3, [r5, #0]
 800566e:	b103      	cbz	r3, 8005672 <_sbrk_r+0x1a>
 8005670:	6023      	str	r3, [r4, #0]
 8005672:	bd38      	pop	{r3, r4, r5, pc}
 8005674:	2000023c 	.word	0x2000023c

08005678 <__sread>:
 8005678:	b510      	push	{r4, lr}
 800567a:	460c      	mov	r4, r1
 800567c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005680:	f000 f8a0 	bl	80057c4 <_read_r>
 8005684:	2800      	cmp	r0, #0
 8005686:	bfab      	itete	ge
 8005688:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800568a:	89a3      	ldrhlt	r3, [r4, #12]
 800568c:	181b      	addge	r3, r3, r0
 800568e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005692:	bfac      	ite	ge
 8005694:	6563      	strge	r3, [r4, #84]	; 0x54
 8005696:	81a3      	strhlt	r3, [r4, #12]
 8005698:	bd10      	pop	{r4, pc}

0800569a <__swrite>:
 800569a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800569e:	461f      	mov	r7, r3
 80056a0:	898b      	ldrh	r3, [r1, #12]
 80056a2:	05db      	lsls	r3, r3, #23
 80056a4:	4605      	mov	r5, r0
 80056a6:	460c      	mov	r4, r1
 80056a8:	4616      	mov	r6, r2
 80056aa:	d505      	bpl.n	80056b8 <__swrite+0x1e>
 80056ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056b0:	2302      	movs	r3, #2
 80056b2:	2200      	movs	r2, #0
 80056b4:	f000 f868 	bl	8005788 <_lseek_r>
 80056b8:	89a3      	ldrh	r3, [r4, #12]
 80056ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056c2:	81a3      	strh	r3, [r4, #12]
 80056c4:	4632      	mov	r2, r6
 80056c6:	463b      	mov	r3, r7
 80056c8:	4628      	mov	r0, r5
 80056ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056ce:	f000 b817 	b.w	8005700 <_write_r>

080056d2 <__sseek>:
 80056d2:	b510      	push	{r4, lr}
 80056d4:	460c      	mov	r4, r1
 80056d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056da:	f000 f855 	bl	8005788 <_lseek_r>
 80056de:	1c43      	adds	r3, r0, #1
 80056e0:	89a3      	ldrh	r3, [r4, #12]
 80056e2:	bf15      	itete	ne
 80056e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80056e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80056ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80056ee:	81a3      	strheq	r3, [r4, #12]
 80056f0:	bf18      	it	ne
 80056f2:	81a3      	strhne	r3, [r4, #12]
 80056f4:	bd10      	pop	{r4, pc}

080056f6 <__sclose>:
 80056f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056fa:	f000 b813 	b.w	8005724 <_close_r>
	...

08005700 <_write_r>:
 8005700:	b538      	push	{r3, r4, r5, lr}
 8005702:	4d07      	ldr	r5, [pc, #28]	; (8005720 <_write_r+0x20>)
 8005704:	4604      	mov	r4, r0
 8005706:	4608      	mov	r0, r1
 8005708:	4611      	mov	r1, r2
 800570a:	2200      	movs	r2, #0
 800570c:	602a      	str	r2, [r5, #0]
 800570e:	461a      	mov	r2, r3
 8005710:	f7fb ff13 	bl	800153a <_write>
 8005714:	1c43      	adds	r3, r0, #1
 8005716:	d102      	bne.n	800571e <_write_r+0x1e>
 8005718:	682b      	ldr	r3, [r5, #0]
 800571a:	b103      	cbz	r3, 800571e <_write_r+0x1e>
 800571c:	6023      	str	r3, [r4, #0]
 800571e:	bd38      	pop	{r3, r4, r5, pc}
 8005720:	2000023c 	.word	0x2000023c

08005724 <_close_r>:
 8005724:	b538      	push	{r3, r4, r5, lr}
 8005726:	4d06      	ldr	r5, [pc, #24]	; (8005740 <_close_r+0x1c>)
 8005728:	2300      	movs	r3, #0
 800572a:	4604      	mov	r4, r0
 800572c:	4608      	mov	r0, r1
 800572e:	602b      	str	r3, [r5, #0]
 8005730:	f7fb ff1f 	bl	8001572 <_close>
 8005734:	1c43      	adds	r3, r0, #1
 8005736:	d102      	bne.n	800573e <_close_r+0x1a>
 8005738:	682b      	ldr	r3, [r5, #0]
 800573a:	b103      	cbz	r3, 800573e <_close_r+0x1a>
 800573c:	6023      	str	r3, [r4, #0]
 800573e:	bd38      	pop	{r3, r4, r5, pc}
 8005740:	2000023c 	.word	0x2000023c

08005744 <_fstat_r>:
 8005744:	b538      	push	{r3, r4, r5, lr}
 8005746:	4d07      	ldr	r5, [pc, #28]	; (8005764 <_fstat_r+0x20>)
 8005748:	2300      	movs	r3, #0
 800574a:	4604      	mov	r4, r0
 800574c:	4608      	mov	r0, r1
 800574e:	4611      	mov	r1, r2
 8005750:	602b      	str	r3, [r5, #0]
 8005752:	f7fb ff1a 	bl	800158a <_fstat>
 8005756:	1c43      	adds	r3, r0, #1
 8005758:	d102      	bne.n	8005760 <_fstat_r+0x1c>
 800575a:	682b      	ldr	r3, [r5, #0]
 800575c:	b103      	cbz	r3, 8005760 <_fstat_r+0x1c>
 800575e:	6023      	str	r3, [r4, #0]
 8005760:	bd38      	pop	{r3, r4, r5, pc}
 8005762:	bf00      	nop
 8005764:	2000023c 	.word	0x2000023c

08005768 <_isatty_r>:
 8005768:	b538      	push	{r3, r4, r5, lr}
 800576a:	4d06      	ldr	r5, [pc, #24]	; (8005784 <_isatty_r+0x1c>)
 800576c:	2300      	movs	r3, #0
 800576e:	4604      	mov	r4, r0
 8005770:	4608      	mov	r0, r1
 8005772:	602b      	str	r3, [r5, #0]
 8005774:	f7fb ff19 	bl	80015aa <_isatty>
 8005778:	1c43      	adds	r3, r0, #1
 800577a:	d102      	bne.n	8005782 <_isatty_r+0x1a>
 800577c:	682b      	ldr	r3, [r5, #0]
 800577e:	b103      	cbz	r3, 8005782 <_isatty_r+0x1a>
 8005780:	6023      	str	r3, [r4, #0]
 8005782:	bd38      	pop	{r3, r4, r5, pc}
 8005784:	2000023c 	.word	0x2000023c

08005788 <_lseek_r>:
 8005788:	b538      	push	{r3, r4, r5, lr}
 800578a:	4d07      	ldr	r5, [pc, #28]	; (80057a8 <_lseek_r+0x20>)
 800578c:	4604      	mov	r4, r0
 800578e:	4608      	mov	r0, r1
 8005790:	4611      	mov	r1, r2
 8005792:	2200      	movs	r2, #0
 8005794:	602a      	str	r2, [r5, #0]
 8005796:	461a      	mov	r2, r3
 8005798:	f7fb ff12 	bl	80015c0 <_lseek>
 800579c:	1c43      	adds	r3, r0, #1
 800579e:	d102      	bne.n	80057a6 <_lseek_r+0x1e>
 80057a0:	682b      	ldr	r3, [r5, #0]
 80057a2:	b103      	cbz	r3, 80057a6 <_lseek_r+0x1e>
 80057a4:	6023      	str	r3, [r4, #0]
 80057a6:	bd38      	pop	{r3, r4, r5, pc}
 80057a8:	2000023c 	.word	0x2000023c

080057ac <__malloc_lock>:
 80057ac:	4801      	ldr	r0, [pc, #4]	; (80057b4 <__malloc_lock+0x8>)
 80057ae:	f7ff bb1d 	b.w	8004dec <__retarget_lock_acquire_recursive>
 80057b2:	bf00      	nop
 80057b4:	20000230 	.word	0x20000230

080057b8 <__malloc_unlock>:
 80057b8:	4801      	ldr	r0, [pc, #4]	; (80057c0 <__malloc_unlock+0x8>)
 80057ba:	f7ff bb18 	b.w	8004dee <__retarget_lock_release_recursive>
 80057be:	bf00      	nop
 80057c0:	20000230 	.word	0x20000230

080057c4 <_read_r>:
 80057c4:	b538      	push	{r3, r4, r5, lr}
 80057c6:	4d07      	ldr	r5, [pc, #28]	; (80057e4 <_read_r+0x20>)
 80057c8:	4604      	mov	r4, r0
 80057ca:	4608      	mov	r0, r1
 80057cc:	4611      	mov	r1, r2
 80057ce:	2200      	movs	r2, #0
 80057d0:	602a      	str	r2, [r5, #0]
 80057d2:	461a      	mov	r2, r3
 80057d4:	f7fb fe94 	bl	8001500 <_read>
 80057d8:	1c43      	adds	r3, r0, #1
 80057da:	d102      	bne.n	80057e2 <_read_r+0x1e>
 80057dc:	682b      	ldr	r3, [r5, #0]
 80057de:	b103      	cbz	r3, 80057e2 <_read_r+0x1e>
 80057e0:	6023      	str	r3, [r4, #0]
 80057e2:	bd38      	pop	{r3, r4, r5, pc}
 80057e4:	2000023c 	.word	0x2000023c

080057e8 <_init>:
 80057e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ea:	bf00      	nop
 80057ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057ee:	bc08      	pop	{r3}
 80057f0:	469e      	mov	lr, r3
 80057f2:	4770      	bx	lr

080057f4 <_fini>:
 80057f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057f6:	bf00      	nop
 80057f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057fa:	bc08      	pop	{r3}
 80057fc:	469e      	mov	lr, r3
 80057fe:	4770      	bx	lr
