
bldc-motor-control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b4a8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000894  0800b648  0800b648  0001b648  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bedc  0800bedc  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800bedc  0800bedc  0001bedc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bee4  0800bee4  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bee4  0800bee4  0001bee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bee8  0800bee8  0001bee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800beec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b40  200001f0  0800c0dc  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004d30  0800c0dc  00024d30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019974  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003628  00000000  00000000  00039b94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001608  00000000  00000000  0003d1c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014d0  00000000  00000000  0003e7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004fc0  00000000  00000000  0003fc98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000175d7  00000000  00000000  00044c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a6337  00000000  00000000  0005c22f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00102566  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006fc8  00000000  00000000  001025b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b630 	.word	0x0800b630

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	0800b630 	.word	0x0800b630

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint32_t dir = CW;
 8000f62:	2301      	movs	r3, #1
 8000f64:	617b      	str	r3, [r7, #20]
  volatile uint32_t torque = 70;
 8000f66:	2346      	movs	r3, #70	; 0x46
 8000f68:	607b      	str	r3, [r7, #4]
  uint32_t max_torque = 20000;
 8000f6a:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000f6e:	613b      	str	r3, [r7, #16]
  float max_step_size = 0.5;
 8000f70:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8000f74:	60fb      	str	r3, [r7, #12]

  uint32_t pot_max = 4095;
 8000f76:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000f7a:	60bb      	str	r3, [r7, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f7c:	f001 f936 	bl	80021ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f80:	f000 f866 	bl	8001050 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f84:	f000 facc 	bl	8001520 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000f88:	f000 f8ca 	bl	8001120 <MX_ADC1_Init>
  MX_USART6_UART_Init();
 8000f8c:	f000 fa9e 	bl	80014cc <MX_USART6_UART_Init>
  MX_TIM1_Init();
 8000f90:	f000 f918 	bl	80011c4 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000f94:	f000 fa42 	bl	800141c <MX_TIM3_Init>
  MX_TIM2_Init();
 8000f98:	f000 f9b2 	bl	8001300 <MX_TIM2_Init>

//  uint32_t time = HAL_GetTick();
//  uint32_t max_time = 3000;


  wasButtonPressed = false;
 8000f9c:	4b1f      	ldr	r3, [pc, #124]	; (800101c <main+0xc0>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	701a      	strb	r2, [r3, #0]

  MotorInit(&htim1, &htim3);
 8000fa2:	491f      	ldr	r1, [pc, #124]	; (8001020 <main+0xc4>)
 8000fa4:	481f      	ldr	r0, [pc, #124]	; (8001024 <main+0xc8>)
 8000fa6:	f000 fbf3 	bl	8001790 <MotorInit>
  MotorSetTorque(torque);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4618      	mov	r0, r3
 8000fae:	f000 fc3d 	bl	800182c <MotorSetTorque>
  MotorSetDir(dir);
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f000 fc58 	bl	800186c <MotorSetDir>
  MotorSetStepSize(step_size);
 8000fbc:	4b1a      	ldr	r3, [pc, #104]	; (8001028 <main+0xcc>)
 8000fbe:	edd3 7a00 	vldr	s15, [r3]
 8000fc2:	eeb0 0a67 	vmov.f32	s0, s15
 8000fc6:	f000 fd0f 	bl	80019e8 <MotorSetStepSize>


  // Create mutex in your initialization code
  stepSizeMutexHandle = osMutexNew(NULL);
 8000fca:	2000      	movs	r0, #0
 8000fcc:	f004 fa97 	bl	80054fe <osMutexNew>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	4a16      	ldr	r2, [pc, #88]	; (800102c <main+0xd0>)
 8000fd4:	6013      	str	r3, [r2, #0]
  torqueMutexHandle = osMutexNew(NULL);
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	f004 fa91 	bl	80054fe <osMutexNew>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	4a14      	ldr	r2, [pc, #80]	; (8001030 <main+0xd4>)
 8000fe0:	6013      	str	r3, [r2, #0]


  printf("motor initialized\n");
 8000fe2:	4814      	ldr	r0, [pc, #80]	; (8001034 <main+0xd8>)
 8000fe4:	f007 fd22 	bl	8008a2c <puts>

  MotorStart(torque);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	4618      	mov	r0, r3
 8000fec:	f000 fc6c 	bl	80018c8 <MotorStart>

//  HAL_ADC_Start(&hadc1);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000ff0:	f004 f98e 	bl	8005310 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of motorManager */
  motorManagerHandle = osThreadNew(StartDefaultTask, NULL, &motorManager_attributes);
 8000ff4:	4a10      	ldr	r2, [pc, #64]	; (8001038 <main+0xdc>)
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	4810      	ldr	r0, [pc, #64]	; (800103c <main+0xe0>)
 8000ffa:	f004 f9d3 	bl	80053a4 <osThreadNew>
 8000ffe:	4603      	mov	r3, r0
 8001000:	4a0f      	ldr	r2, [pc, #60]	; (8001040 <main+0xe4>)
 8001002:	6013      	str	r3, [r2, #0]

  /* creation of motorRunner */
  motorRunnerHandle = osThreadNew(StartTask02, NULL, &motorRunner_attributes);
 8001004:	4a0f      	ldr	r2, [pc, #60]	; (8001044 <main+0xe8>)
 8001006:	2100      	movs	r1, #0
 8001008:	480f      	ldr	r0, [pc, #60]	; (8001048 <main+0xec>)
 800100a:	f004 f9cb 	bl	80053a4 <osThreadNew>
 800100e:	4603      	mov	r3, r0
 8001010:	4a0e      	ldr	r2, [pc, #56]	; (800104c <main+0xf0>)
 8001012:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001014:	f004 f9a0 	bl	8005358 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001018:	e7fe      	b.n	8001018 <main+0xbc>
 800101a:	bf00      	nop
 800101c:	200003c0 	.word	0x200003c0
 8001020:	200002e4 	.word	0x200002e4
 8001024:	20000254 	.word	0x20000254
 8001028:	20000000 	.word	0x20000000
 800102c:	2000037c 	.word	0x2000037c
 8001030:	20000380 	.word	0x20000380
 8001034:	0800b664 	.word	0x0800b664
 8001038:	0800b6d4 	.word	0x0800b6d4
 800103c:	0800169d 	.word	0x0800169d
 8001040:	20000370 	.word	0x20000370
 8001044:	0800b6f8 	.word	0x0800b6f8
 8001048:	08001771 	.word	0x08001771
 800104c:	20000374 	.word	0x20000374

08001050 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b094      	sub	sp, #80	; 0x50
 8001054:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001056:	f107 0320 	add.w	r3, r7, #32
 800105a:	2230      	movs	r2, #48	; 0x30
 800105c:	2100      	movs	r1, #0
 800105e:	4618      	mov	r0, r3
 8001060:	f006 ffec 	bl	800803c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001064:	f107 030c 	add.w	r3, r7, #12
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001074:	2300      	movs	r3, #0
 8001076:	60bb      	str	r3, [r7, #8]
 8001078:	4b27      	ldr	r3, [pc, #156]	; (8001118 <SystemClock_Config+0xc8>)
 800107a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107c:	4a26      	ldr	r2, [pc, #152]	; (8001118 <SystemClock_Config+0xc8>)
 800107e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001082:	6413      	str	r3, [r2, #64]	; 0x40
 8001084:	4b24      	ldr	r3, [pc, #144]	; (8001118 <SystemClock_Config+0xc8>)
 8001086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001088:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800108c:	60bb      	str	r3, [r7, #8]
 800108e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001090:	2300      	movs	r3, #0
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	4b21      	ldr	r3, [pc, #132]	; (800111c <SystemClock_Config+0xcc>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a20      	ldr	r2, [pc, #128]	; (800111c <SystemClock_Config+0xcc>)
 800109a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800109e:	6013      	str	r3, [r2, #0]
 80010a0:	4b1e      	ldr	r3, [pc, #120]	; (800111c <SystemClock_Config+0xcc>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010a8:	607b      	str	r3, [r7, #4]
 80010aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010ac:	2302      	movs	r3, #2
 80010ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010b0:	2301      	movs	r3, #1
 80010b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010b4:	2310      	movs	r3, #16
 80010b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010b8:	2302      	movs	r3, #2
 80010ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010bc:	2300      	movs	r3, #0
 80010be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010c0:	2308      	movs	r3, #8
 80010c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80010c4:	2354      	movs	r3, #84	; 0x54
 80010c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010c8:	2302      	movs	r3, #2
 80010ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010cc:	2304      	movs	r3, #4
 80010ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010d0:	f107 0320 	add.w	r3, r7, #32
 80010d4:	4618      	mov	r0, r3
 80010d6:	f001 ffbf 	bl	8003058 <HAL_RCC_OscConfig>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010e0:	f000 fb50 	bl	8001784 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010e4:	230f      	movs	r3, #15
 80010e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010e8:	2302      	movs	r3, #2
 80010ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010f6:	2300      	movs	r3, #0
 80010f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010fa:	f107 030c 	add.w	r3, r7, #12
 80010fe:	2102      	movs	r1, #2
 8001100:	4618      	mov	r0, r3
 8001102:	f002 fa21 	bl	8003548 <HAL_RCC_ClockConfig>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800110c:	f000 fb3a 	bl	8001784 <Error_Handler>
  }
}
 8001110:	bf00      	nop
 8001112:	3750      	adds	r7, #80	; 0x50
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40023800 	.word	0x40023800
 800111c:	40007000 	.word	0x40007000

08001120 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001126:	463b      	mov	r3, r7
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001132:	4b21      	ldr	r3, [pc, #132]	; (80011b8 <MX_ADC1_Init+0x98>)
 8001134:	4a21      	ldr	r2, [pc, #132]	; (80011bc <MX_ADC1_Init+0x9c>)
 8001136:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001138:	4b1f      	ldr	r3, [pc, #124]	; (80011b8 <MX_ADC1_Init+0x98>)
 800113a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800113e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001140:	4b1d      	ldr	r3, [pc, #116]	; (80011b8 <MX_ADC1_Init+0x98>)
 8001142:	2200      	movs	r2, #0
 8001144:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001146:	4b1c      	ldr	r3, [pc, #112]	; (80011b8 <MX_ADC1_Init+0x98>)
 8001148:	2200      	movs	r2, #0
 800114a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800114c:	4b1a      	ldr	r3, [pc, #104]	; (80011b8 <MX_ADC1_Init+0x98>)
 800114e:	2201      	movs	r2, #1
 8001150:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001152:	4b19      	ldr	r3, [pc, #100]	; (80011b8 <MX_ADC1_Init+0x98>)
 8001154:	2200      	movs	r2, #0
 8001156:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800115a:	4b17      	ldr	r3, [pc, #92]	; (80011b8 <MX_ADC1_Init+0x98>)
 800115c:	2200      	movs	r2, #0
 800115e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001160:	4b15      	ldr	r3, [pc, #84]	; (80011b8 <MX_ADC1_Init+0x98>)
 8001162:	4a17      	ldr	r2, [pc, #92]	; (80011c0 <MX_ADC1_Init+0xa0>)
 8001164:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001166:	4b14      	ldr	r3, [pc, #80]	; (80011b8 <MX_ADC1_Init+0x98>)
 8001168:	2200      	movs	r2, #0
 800116a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800116c:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <MX_ADC1_Init+0x98>)
 800116e:	2201      	movs	r2, #1
 8001170:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001172:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <MX_ADC1_Init+0x98>)
 8001174:	2200      	movs	r2, #0
 8001176:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800117a:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <MX_ADC1_Init+0x98>)
 800117c:	2201      	movs	r2, #1
 800117e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001180:	480d      	ldr	r0, [pc, #52]	; (80011b8 <MX_ADC1_Init+0x98>)
 8001182:	f001 f8c9 	bl	8002318 <HAL_ADC_Init>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800118c:	f000 fafa 	bl	8001784 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001190:	2306      	movs	r3, #6
 8001192:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001194:	2301      	movs	r3, #1
 8001196:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001198:	2300      	movs	r3, #0
 800119a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800119c:	463b      	mov	r3, r7
 800119e:	4619      	mov	r1, r3
 80011a0:	4805      	ldr	r0, [pc, #20]	; (80011b8 <MX_ADC1_Init+0x98>)
 80011a2:	f001 fa49 	bl	8002638 <HAL_ADC_ConfigChannel>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80011ac:	f000 faea 	bl	8001784 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011b0:	bf00      	nop
 80011b2:	3710      	adds	r7, #16
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	2000020c 	.word	0x2000020c
 80011bc:	40012000 	.word	0x40012000
 80011c0:	0f000001 	.word	0x0f000001

080011c4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b092      	sub	sp, #72	; 0x48
 80011c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]
 80011e0:	60da      	str	r2, [r3, #12]
 80011e2:	611a      	str	r2, [r3, #16]
 80011e4:	615a      	str	r2, [r3, #20]
 80011e6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011e8:	1d3b      	adds	r3, r7, #4
 80011ea:	2220      	movs	r2, #32
 80011ec:	2100      	movs	r1, #0
 80011ee:	4618      	mov	r0, r3
 80011f0:	f006 ff24 	bl	800803c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011f4:	4b40      	ldr	r3, [pc, #256]	; (80012f8 <MX_TIM1_Init+0x134>)
 80011f6:	4a41      	ldr	r2, [pc, #260]	; (80012fc <MX_TIM1_Init+0x138>)
 80011f8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 42-1;
 80011fa:	4b3f      	ldr	r3, [pc, #252]	; (80012f8 <MX_TIM1_Init+0x134>)
 80011fc:	2229      	movs	r2, #41	; 0x29
 80011fe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001200:	4b3d      	ldr	r3, [pc, #244]	; (80012f8 <MX_TIM1_Init+0x134>)
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8001206:	4b3c      	ldr	r3, [pc, #240]	; (80012f8 <MX_TIM1_Init+0x134>)
 8001208:	2263      	movs	r2, #99	; 0x63
 800120a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800120c:	4b3a      	ldr	r3, [pc, #232]	; (80012f8 <MX_TIM1_Init+0x134>)
 800120e:	2200      	movs	r2, #0
 8001210:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001212:	4b39      	ldr	r3, [pc, #228]	; (80012f8 <MX_TIM1_Init+0x134>)
 8001214:	2200      	movs	r2, #0
 8001216:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001218:	4b37      	ldr	r3, [pc, #220]	; (80012f8 <MX_TIM1_Init+0x134>)
 800121a:	2200      	movs	r2, #0
 800121c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800121e:	4836      	ldr	r0, [pc, #216]	; (80012f8 <MX_TIM1_Init+0x134>)
 8001220:	f002 fc6b 	bl	8003afa <HAL_TIM_PWM_Init>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 800122a:	f000 faab 	bl	8001784 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800122e:	2300      	movs	r3, #0
 8001230:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001232:	2300      	movs	r3, #0
 8001234:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001236:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800123a:	4619      	mov	r1, r3
 800123c:	482e      	ldr	r0, [pc, #184]	; (80012f8 <MX_TIM1_Init+0x134>)
 800123e:	f003 fba7 	bl	8004990 <HAL_TIMEx_MasterConfigSynchronization>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8001248:	f000 fa9c 	bl	8001784 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800124c:	2360      	movs	r3, #96	; 0x60
 800124e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001250:	2300      	movs	r3, #0
 8001252:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001254:	2300      	movs	r3, #0
 8001256:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001258:	2300      	movs	r3, #0
 800125a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800125c:	2300      	movs	r3, #0
 800125e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001260:	2300      	movs	r3, #0
 8001262:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001264:	2300      	movs	r3, #0
 8001266:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001268:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800126c:	2200      	movs	r2, #0
 800126e:	4619      	mov	r1, r3
 8001270:	4821      	ldr	r0, [pc, #132]	; (80012f8 <MX_TIM1_Init+0x134>)
 8001272:	f002 fea5 	bl	8003fc0 <HAL_TIM_PWM_ConfigChannel>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 800127c:	f000 fa82 	bl	8001784 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001280:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001284:	2208      	movs	r2, #8
 8001286:	4619      	mov	r1, r3
 8001288:	481b      	ldr	r0, [pc, #108]	; (80012f8 <MX_TIM1_Init+0x134>)
 800128a:	f002 fe99 	bl	8003fc0 <HAL_TIM_PWM_ConfigChannel>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8001294:	f000 fa76 	bl	8001784 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001298:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800129c:	220c      	movs	r2, #12
 800129e:	4619      	mov	r1, r3
 80012a0:	4815      	ldr	r0, [pc, #84]	; (80012f8 <MX_TIM1_Init+0x134>)
 80012a2:	f002 fe8d 	bl	8003fc0 <HAL_TIM_PWM_ConfigChannel>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 80012ac:	f000 fa6a 	bl	8001784 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 80012b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80012b4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 80012b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012ba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012bc:	2300      	movs	r3, #0
 80012be:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 80012c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012c8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012ce:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 80012d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012d4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012d6:	1d3b      	adds	r3, r7, #4
 80012d8:	4619      	mov	r1, r3
 80012da:	4807      	ldr	r0, [pc, #28]	; (80012f8 <MX_TIM1_Init+0x134>)
 80012dc:	f003 fbc6 	bl	8004a6c <HAL_TIMEx_ConfigBreakDeadTime>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 80012e6:	f000 fa4d 	bl	8001784 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012ea:	4803      	ldr	r0, [pc, #12]	; (80012f8 <MX_TIM1_Init+0x134>)
 80012ec:	f000 fd86 	bl	8001dfc <HAL_TIM_MspPostInit>

}
 80012f0:	bf00      	nop
 80012f2:	3748      	adds	r7, #72	; 0x48
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	20000254 	.word	0x20000254
 80012fc:	40010000 	.word	0x40010000

08001300 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08e      	sub	sp, #56	; 0x38
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001306:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]
 8001310:	609a      	str	r2, [r3, #8]
 8001312:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001314:	f107 0320 	add.w	r3, r7, #32
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800131e:	1d3b      	adds	r3, r7, #4
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]
 800132a:	611a      	str	r2, [r3, #16]
 800132c:	615a      	str	r2, [r3, #20]
 800132e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001330:	4b39      	ldr	r3, [pc, #228]	; (8001418 <MX_TIM2_Init+0x118>)
 8001332:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001336:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001338:	4b37      	ldr	r3, [pc, #220]	; (8001418 <MX_TIM2_Init+0x118>)
 800133a:	2200      	movs	r2, #0
 800133c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800133e:	4b36      	ldr	r3, [pc, #216]	; (8001418 <MX_TIM2_Init+0x118>)
 8001340:	2200      	movs	r2, #0
 8001342:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001344:	4b34      	ldr	r3, [pc, #208]	; (8001418 <MX_TIM2_Init+0x118>)
 8001346:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800134a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800134c:	4b32      	ldr	r3, [pc, #200]	; (8001418 <MX_TIM2_Init+0x118>)
 800134e:	2200      	movs	r2, #0
 8001350:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001352:	4b31      	ldr	r3, [pc, #196]	; (8001418 <MX_TIM2_Init+0x118>)
 8001354:	2200      	movs	r2, #0
 8001356:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001358:	482f      	ldr	r0, [pc, #188]	; (8001418 <MX_TIM2_Init+0x118>)
 800135a:	f002 fad5 	bl	8003908 <HAL_TIM_Base_Init>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001364:	f000 fa0e 	bl	8001784 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001368:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800136c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800136e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001372:	4619      	mov	r1, r3
 8001374:	4828      	ldr	r0, [pc, #160]	; (8001418 <MX_TIM2_Init+0x118>)
 8001376:	f002 fee5 	bl	8004144 <HAL_TIM_ConfigClockSource>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001380:	f000 fa00 	bl	8001784 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001384:	4824      	ldr	r0, [pc, #144]	; (8001418 <MX_TIM2_Init+0x118>)
 8001386:	f002 fb69 	bl	8003a5c <HAL_TIM_OC_Init>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001390:	f000 f9f8 	bl	8001784 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001394:	2300      	movs	r3, #0
 8001396:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001398:	2300      	movs	r3, #0
 800139a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800139c:	f107 0320 	add.w	r3, r7, #32
 80013a0:	4619      	mov	r1, r3
 80013a2:	481d      	ldr	r0, [pc, #116]	; (8001418 <MX_TIM2_Init+0x118>)
 80013a4:	f003 faf4 	bl	8004990 <HAL_TIMEx_MasterConfigSynchronization>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80013ae:	f000 f9e9 	bl	8001784 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80013b2:	2330      	movs	r3, #48	; 0x30
 80013b4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013be:	2300      	movs	r3, #0
 80013c0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013c2:	1d3b      	adds	r3, r7, #4
 80013c4:	2200      	movs	r2, #0
 80013c6:	4619      	mov	r1, r3
 80013c8:	4813      	ldr	r0, [pc, #76]	; (8001418 <MX_TIM2_Init+0x118>)
 80013ca:	f002 fd9d 	bl	8003f08 <HAL_TIM_OC_ConfigChannel>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80013d4:	f000 f9d6 	bl	8001784 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80013d8:	2300      	movs	r3, #0
 80013da:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013dc:	1d3b      	adds	r3, r7, #4
 80013de:	2204      	movs	r2, #4
 80013e0:	4619      	mov	r1, r3
 80013e2:	480d      	ldr	r0, [pc, #52]	; (8001418 <MX_TIM2_Init+0x118>)
 80013e4:	f002 fd90 	bl	8003f08 <HAL_TIM_OC_ConfigChannel>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 80013ee:	f000 f9c9 	bl	8001784 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013f2:	1d3b      	adds	r3, r7, #4
 80013f4:	2208      	movs	r2, #8
 80013f6:	4619      	mov	r1, r3
 80013f8:	4807      	ldr	r0, [pc, #28]	; (8001418 <MX_TIM2_Init+0x118>)
 80013fa:	f002 fd85 	bl	8003f08 <HAL_TIM_OC_ConfigChannel>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 8001404:	f000 f9be 	bl	8001784 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001408:	4803      	ldr	r0, [pc, #12]	; (8001418 <MX_TIM2_Init+0x118>)
 800140a:	f000 fcf7 	bl	8001dfc <HAL_TIM_MspPostInit>

}
 800140e:	bf00      	nop
 8001410:	3738      	adds	r7, #56	; 0x38
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	2000029c 	.word	0x2000029c

0800141c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08a      	sub	sp, #40	; 0x28
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001422:	f107 0320 	add.w	r3, r7, #32
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800142c:	1d3b      	adds	r3, r7, #4
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	605a      	str	r2, [r3, #4]
 8001434:	609a      	str	r2, [r3, #8]
 8001436:	60da      	str	r2, [r3, #12]
 8001438:	611a      	str	r2, [r3, #16]
 800143a:	615a      	str	r2, [r3, #20]
 800143c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800143e:	4b21      	ldr	r3, [pc, #132]	; (80014c4 <MX_TIM3_Init+0xa8>)
 8001440:	4a21      	ldr	r2, [pc, #132]	; (80014c8 <MX_TIM3_Init+0xac>)
 8001442:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2100-1;
 8001444:	4b1f      	ldr	r3, [pc, #124]	; (80014c4 <MX_TIM3_Init+0xa8>)
 8001446:	f640 0233 	movw	r2, #2099	; 0x833
 800144a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800144c:	4b1d      	ldr	r3, [pc, #116]	; (80014c4 <MX_TIM3_Init+0xa8>)
 800144e:	2200      	movs	r2, #0
 8001450:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001452:	4b1c      	ldr	r3, [pc, #112]	; (80014c4 <MX_TIM3_Init+0xa8>)
 8001454:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001458:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800145a:	4b1a      	ldr	r3, [pc, #104]	; (80014c4 <MX_TIM3_Init+0xa8>)
 800145c:	2200      	movs	r2, #0
 800145e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001460:	4b18      	ldr	r3, [pc, #96]	; (80014c4 <MX_TIM3_Init+0xa8>)
 8001462:	2200      	movs	r2, #0
 8001464:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001466:	4817      	ldr	r0, [pc, #92]	; (80014c4 <MX_TIM3_Init+0xa8>)
 8001468:	f002 faf8 	bl	8003a5c <HAL_TIM_OC_Init>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001472:	f000 f987 	bl	8001784 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001476:	2320      	movs	r3, #32
 8001478:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800147a:	2300      	movs	r3, #0
 800147c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800147e:	f107 0320 	add.w	r3, r7, #32
 8001482:	4619      	mov	r1, r3
 8001484:	480f      	ldr	r0, [pc, #60]	; (80014c4 <MX_TIM3_Init+0xa8>)
 8001486:	f003 fa83 	bl	8004990 <HAL_TIMEx_MasterConfigSynchronization>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001490:	f000 f978 	bl	8001784 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001494:	2300      	movs	r3, #0
 8001496:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001498:	2300      	movs	r3, #0
 800149a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800149c:	2300      	movs	r3, #0
 800149e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014a0:	2300      	movs	r3, #0
 80014a2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014a4:	1d3b      	adds	r3, r7, #4
 80014a6:	2200      	movs	r2, #0
 80014a8:	4619      	mov	r1, r3
 80014aa:	4806      	ldr	r0, [pc, #24]	; (80014c4 <MX_TIM3_Init+0xa8>)
 80014ac:	f002 fd2c 	bl	8003f08 <HAL_TIM_OC_ConfigChannel>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80014b6:	f000 f965 	bl	8001784 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014ba:	bf00      	nop
 80014bc:	3728      	adds	r7, #40	; 0x28
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	200002e4 	.word	0x200002e4
 80014c8:	40000400 	.word	0x40000400

080014cc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80014d0:	4b11      	ldr	r3, [pc, #68]	; (8001518 <MX_USART6_UART_Init+0x4c>)
 80014d2:	4a12      	ldr	r2, [pc, #72]	; (800151c <MX_USART6_UART_Init+0x50>)
 80014d4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80014d6:	4b10      	ldr	r3, [pc, #64]	; (8001518 <MX_USART6_UART_Init+0x4c>)
 80014d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014dc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80014de:	4b0e      	ldr	r3, [pc, #56]	; (8001518 <MX_USART6_UART_Init+0x4c>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80014e4:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <MX_USART6_UART_Init+0x4c>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80014ea:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <MX_USART6_UART_Init+0x4c>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80014f0:	4b09      	ldr	r3, [pc, #36]	; (8001518 <MX_USART6_UART_Init+0x4c>)
 80014f2:	220c      	movs	r2, #12
 80014f4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014f6:	4b08      	ldr	r3, [pc, #32]	; (8001518 <MX_USART6_UART_Init+0x4c>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80014fc:	4b06      	ldr	r3, [pc, #24]	; (8001518 <MX_USART6_UART_Init+0x4c>)
 80014fe:	2200      	movs	r2, #0
 8001500:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001502:	4805      	ldr	r0, [pc, #20]	; (8001518 <MX_USART6_UART_Init+0x4c>)
 8001504:	f003 fb0e 	bl	8004b24 <HAL_UART_Init>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800150e:	f000 f939 	bl	8001784 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	2000032c 	.word	0x2000032c
 800151c:	40011400 	.word	0x40011400

08001520 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b08a      	sub	sp, #40	; 0x28
 8001524:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001526:	f107 0314 	add.w	r3, r7, #20
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	605a      	str	r2, [r3, #4]
 8001530:	609a      	str	r2, [r3, #8]
 8001532:	60da      	str	r2, [r3, #12]
 8001534:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	613b      	str	r3, [r7, #16]
 800153a:	4b3f      	ldr	r3, [pc, #252]	; (8001638 <MX_GPIO_Init+0x118>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	4a3e      	ldr	r2, [pc, #248]	; (8001638 <MX_GPIO_Init+0x118>)
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	6313      	str	r3, [r2, #48]	; 0x30
 8001546:	4b3c      	ldr	r3, [pc, #240]	; (8001638 <MX_GPIO_Init+0x118>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	613b      	str	r3, [r7, #16]
 8001550:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	4b38      	ldr	r3, [pc, #224]	; (8001638 <MX_GPIO_Init+0x118>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	4a37      	ldr	r2, [pc, #220]	; (8001638 <MX_GPIO_Init+0x118>)
 800155c:	f043 0310 	orr.w	r3, r3, #16
 8001560:	6313      	str	r3, [r2, #48]	; 0x30
 8001562:	4b35      	ldr	r3, [pc, #212]	; (8001638 <MX_GPIO_Init+0x118>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	f003 0310 	and.w	r3, r3, #16
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	60bb      	str	r3, [r7, #8]
 8001572:	4b31      	ldr	r3, [pc, #196]	; (8001638 <MX_GPIO_Init+0x118>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	4a30      	ldr	r2, [pc, #192]	; (8001638 <MX_GPIO_Init+0x118>)
 8001578:	f043 0302 	orr.w	r3, r3, #2
 800157c:	6313      	str	r3, [r2, #48]	; 0x30
 800157e:	4b2e      	ldr	r3, [pc, #184]	; (8001638 <MX_GPIO_Init+0x118>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	60bb      	str	r3, [r7, #8]
 8001588:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	607b      	str	r3, [r7, #4]
 800158e:	4b2a      	ldr	r3, [pc, #168]	; (8001638 <MX_GPIO_Init+0x118>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	4a29      	ldr	r2, [pc, #164]	; (8001638 <MX_GPIO_Init+0x118>)
 8001594:	f043 0308 	orr.w	r3, r3, #8
 8001598:	6313      	str	r3, [r2, #48]	; 0x30
 800159a:	4b27      	ldr	r3, [pc, #156]	; (8001638 <MX_GPIO_Init+0x118>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	f003 0308 	and.w	r3, r3, #8
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	603b      	str	r3, [r7, #0]
 80015aa:	4b23      	ldr	r3, [pc, #140]	; (8001638 <MX_GPIO_Init+0x118>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	4a22      	ldr	r2, [pc, #136]	; (8001638 <MX_GPIO_Init+0x118>)
 80015b0:	f043 0304 	orr.w	r3, r3, #4
 80015b4:	6313      	str	r3, [r2, #48]	; 0x30
 80015b6:	4b20      	ldr	r3, [pc, #128]	; (8001638 <MX_GPIO_Init+0x118>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	f003 0304 	and.w	r3, r3, #4
 80015be:	603b      	str	r3, [r7, #0]
 80015c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PWM1EN_Pin|PWM2EN_Pin|PWM3EN_Pin, GPIO_PIN_RESET);
 80015c2:	2200      	movs	r2, #0
 80015c4:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 80015c8:	481c      	ldr	r0, [pc, #112]	; (800163c <MX_GPIO_Init+0x11c>)
 80015ca:	f001 fd11 	bl	8002ff0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD3_Pin|LD4_Pin|LD5_Pin|LDN_Pin, GPIO_PIN_RESET);
 80015ce:	2200      	movs	r2, #0
 80015d0:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80015d4:	481a      	ldr	r0, [pc, #104]	; (8001640 <MX_GPIO_Init+0x120>)
 80015d6:	f001 fd0b 	bl	8002ff0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80015da:	2301      	movs	r3, #1
 80015dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015de:	2300      	movs	r3, #0
 80015e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e2:	2300      	movs	r3, #0
 80015e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80015e6:	f107 0314 	add.w	r3, r7, #20
 80015ea:	4619      	mov	r1, r3
 80015ec:	4815      	ldr	r0, [pc, #84]	; (8001644 <MX_GPIO_Init+0x124>)
 80015ee:	f001 fb63 	bl	8002cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWM1EN_Pin PWM2EN_Pin PWM3EN_Pin */
  GPIO_InitStruct.Pin = PWM1EN_Pin|PWM2EN_Pin|PWM3EN_Pin;
 80015f2:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80015f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f8:	2301      	movs	r3, #1
 80015fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001600:	2300      	movs	r3, #0
 8001602:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001604:	f107 0314 	add.w	r3, r7, #20
 8001608:	4619      	mov	r1, r3
 800160a:	480c      	ldr	r0, [pc, #48]	; (800163c <MX_GPIO_Init+0x11c>)
 800160c:	f001 fb54 	bl	8002cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin LD5_Pin LDN_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin|LD5_Pin|LDN_Pin;
 8001610:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001614:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001616:	2301      	movs	r3, #1
 8001618:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	2300      	movs	r3, #0
 800161c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800161e:	2302      	movs	r3, #2
 8001620:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001622:	f107 0314 	add.w	r3, r7, #20
 8001626:	4619      	mov	r1, r3
 8001628:	4805      	ldr	r0, [pc, #20]	; (8001640 <MX_GPIO_Init+0x120>)
 800162a:	f001 fb45 	bl	8002cb8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800162e:	bf00      	nop
 8001630:	3728      	adds	r7, #40	; 0x28
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40023800 	.word	0x40023800
 800163c:	40020400 	.word	0x40020400
 8001640:	40020c00 	.word	0x40020c00
 8001644:	40020000 	.word	0x40020000

08001648 <HAL_TIMEx_CommutCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
//	MotorSixStepAlgorithm();
}
 8001650:	bf00      	nop
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <__io_putchar>:

int __io_putchar(int ch)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
    if (ch == '\n') {
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2b0a      	cmp	r3, #10
 8001668:	d109      	bne.n	800167e <__io_putchar+0x22>
        uint8_t ch6 = '\r';
 800166a:	230d      	movs	r3, #13
 800166c:	73fb      	strb	r3, [r7, #15]
        HAL_UART_Transmit(&huart6, &ch6, 1, HAL_MAX_DELAY);
 800166e:	f107 010f 	add.w	r1, r7, #15
 8001672:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001676:	2201      	movs	r2, #1
 8001678:	4807      	ldr	r0, [pc, #28]	; (8001698 <__io_putchar+0x3c>)
 800167a:	f003 faa0 	bl	8004bbe <HAL_UART_Transmit>
    }

    HAL_UART_Transmit(&huart6, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 800167e:	1d39      	adds	r1, r7, #4
 8001680:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001684:	2201      	movs	r2, #1
 8001686:	4804      	ldr	r0, [pc, #16]	; (8001698 <__io_putchar+0x3c>)
 8001688:	f003 fa99 	bl	8004bbe <HAL_UART_Transmit>
    return 1;
 800168c:	2301      	movs	r3, #1
}
 800168e:	4618      	mov	r0, r3
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	2000032c 	.word	0x2000032c

0800169c <StartDefaultTask>:
float max_step_size = 0.5;

uint32_t pot_max = 4095;
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b086      	sub	sp, #24
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
	printf("dupa1\n");
 80016a4:	4829      	ldr	r0, [pc, #164]	; (800174c <StartDefaultTask+0xb0>)
 80016a6:	f007 f9c1 	bl	8008a2c <puts>
	HAL_GPIO_TogglePin(LDN_GPIO_Port, LDN_Pin);
 80016aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016ae:	4828      	ldr	r0, [pc, #160]	; (8001750 <StartDefaultTask+0xb4>)
 80016b0:	f001 fcb7 	bl	8003022 <HAL_GPIO_TogglePin>

	HAL_ADC_Start(&hadc1);
 80016b4:	4827      	ldr	r0, [pc, #156]	; (8001754 <StartDefaultTask+0xb8>)
 80016b6:	f000 fe73 	bl	80023a0 <HAL_ADC_Start>

	if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 80016ba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016be:	4825      	ldr	r0, [pc, #148]	; (8001754 <StartDefaultTask+0xb8>)
 80016c0:	f000 ff22 	bl	8002508 <HAL_ADC_PollForConversion>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d106      	bne.n	80016d8 <StartDefaultTask+0x3c>
		pot = HAL_ADC_GetValue(&hadc1);
 80016ca:	4822      	ldr	r0, [pc, #136]	; (8001754 <StartDefaultTask+0xb8>)
 80016cc:	f000 ffa7 	bl	800261e <HAL_ADC_GetValue>
 80016d0:	4603      	mov	r3, r0
 80016d2:	4a21      	ldr	r2, [pc, #132]	; (8001758 <StartDefaultTask+0xbc>)
 80016d4:	6013      	str	r3, [r2, #0]
 80016d6:	e002      	b.n	80016de <StartDefaultTask+0x42>

  //		printf("Potentiometer value: %lu\n", pot);
	} else {
		printf("ADC PollForConversion failed\n");
 80016d8:	4820      	ldr	r0, [pc, #128]	; (800175c <StartDefaultTask+0xc0>)
 80016da:	f007 f9a7 	bl	8008a2c <puts>
	}


	float pot_ratio = (float)pot / (float)pot_max;
 80016de:	4b1e      	ldr	r3, [pc, #120]	; (8001758 <StartDefaultTask+0xbc>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	ee07 3a90 	vmov	s15, r3
 80016e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80016ea:	4b1d      	ldr	r3, [pc, #116]	; (8001760 <StartDefaultTask+0xc4>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	ee07 3a90 	vmov	s15, r3
 80016f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80016f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016fa:	edc7 7a05 	vstr	s15, [r7, #20]
  //	int new_torque = (int)(pot_ratio * max_torque);
	int new_torque = (int)(pot_ratio * max_torque);
 80016fe:	4b19      	ldr	r3, [pc, #100]	; (8001764 <StartDefaultTask+0xc8>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	ee07 3a90 	vmov	s15, r3
 8001706:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800170a:	edd7 7a05 	vldr	s15, [r7, #20]
 800170e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001712:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001716:	ee17 3a90 	vmov	r3, s15
 800171a:	613b      	str	r3, [r7, #16]

	volatile float new_step_size = (pot_ratio * max_step_size);
 800171c:	4b12      	ldr	r3, [pc, #72]	; (8001768 <StartDefaultTask+0xcc>)
 800171e:	ed93 7a00 	vldr	s14, [r3]
 8001722:	edd7 7a05 	vldr	s15, [r7, #20]
 8001726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800172a:	edc7 7a03 	vstr	s15, [r7, #12]

  //	printf("Calculated new torque: %d\n", new_torque);

	// Protect access to step_size
//	osMutexWait(stepSizeMutexHandle, osWaitForever);
	MotorSetStepSize(new_step_size);
 800172e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001732:	eeb0 0a67 	vmov.f32	s0, s15
 8001736:	f000 f957 	bl	80019e8 <MotorSetStepSize>

//	osMutexWait(torqueMutexHandle, osWaitForever);
	// Update torque logic here
//	osMutexRelease(torqueMutexHandle);

	CheckButtonPress();
 800173a:	f000 f929 	bl	8001990 <CheckButtonPress>

	if (wasButtonPressed)
 800173e:	4b0b      	ldr	r3, [pc, #44]	; (800176c <StartDefaultTask+0xd0>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d0ae      	beq.n	80016a4 <StartDefaultTask+0x8>
	{
		MotorDirChange();
 8001746:	f000 f8db 	bl	8001900 <MotorDirChange>
  {
 800174a:	e7ab      	b.n	80016a4 <StartDefaultTask+0x8>
 800174c:	0800b678 	.word	0x0800b678
 8001750:	40020c00 	.word	0x40020c00
 8001754:	2000020c 	.word	0x2000020c
 8001758:	20000378 	.word	0x20000378
 800175c:	0800b680 	.word	0x0800b680
 8001760:	2000000c 	.word	0x2000000c
 8001764:	20000004 	.word	0x20000004
 8001768:	20000008 	.word	0x20000008
 800176c:	200003c0 	.word	0x200003c0

08001770 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
//	  osMutexWait(stepSizeMutexHandle, osWaitForever);
	  MotorSine();
 8001778:	f000 f95a 	bl	8001a30 <MotorSine>
//	  osMutexRelease(stepSizeMutexHandle);

	  osDelay(1);
 800177c:	2001      	movs	r0, #1
 800177e:	f003 fea3 	bl	80054c8 <osDelay>
	  MotorSine();
 8001782:	e7f9      	b.n	8001778 <StartTask02+0x8>

08001784 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001788:	b672      	cpsid	i
}
 800178a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800178c:	e7fe      	b.n	800178c <Error_Handler+0x8>
	...

08001790 <MotorInit>:

bool wasButtonPressed = false;


void MotorInit(TIM_HandleTypeDef *_tim_pwm, TIM_HandleTypeDef *_tim_com)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
	bldc.tim_pwm = _tim_pwm;
 800179a:	4a22      	ldr	r2, [pc, #136]	; (8001824 <MotorInit+0x94>)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	61d3      	str	r3, [r2, #28]
	bldc.tim_com = _tim_com;
 80017a0:	4a20      	ldr	r2, [pc, #128]	; (8001824 <MotorInit+0x94>)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	6193      	str	r3, [r2, #24]

	bldc.step_number = 1;
 80017a6:	4b1f      	ldr	r3, [pc, #124]	; (8001824 <MotorInit+0x94>)
 80017a8:	2201      	movs	r2, #1
 80017aa:	701a      	strb	r2, [r3, #0]
	bldc.step_size = 2;
 80017ac:	4b1d      	ldr	r3, [pc, #116]	; (8001824 <MotorInit+0x94>)
 80017ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017b2:	605a      	str	r2, [r3, #4]
	bldc.torque = 0;
 80017b4:	4b1b      	ldr	r3, [pc, #108]	; (8001824 <MotorInit+0x94>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	609a      	str	r2, [r3, #8]
	bldc.speed = 0;
 80017ba:	4b1a      	ldr	r3, [pc, #104]	; (8001824 <MotorInit+0x94>)
 80017bc:	2200      	movs	r2, #0
 80017be:	611a      	str	r2, [r3, #16]
	bldc.dir = CW;
 80017c0:	4b18      	ldr	r3, [pc, #96]	; (8001824 <MotorInit+0x94>)
 80017c2:	2201      	movs	r2, #1
 80017c4:	60da      	str	r2, [r3, #12]
	bldc.speed_change_delay = 50;
 80017c6:	4b17      	ldr	r3, [pc, #92]	; (8001824 <MotorInit+0x94>)
 80017c8:	2232      	movs	r2, #50	; 0x32
 80017ca:	615a      	str	r2, [r3, #20]

	MotorConfigChannelInit();
 80017cc:	f000 f85e 	bl	800188c <MotorConfigChannelInit>

	__HAL_TIM_SET_AUTORELOAD(bldc.tim_com, ARR_TIM3_VALUE);
 80017d0:	4b14      	ldr	r3, [pc, #80]	; (8001824 <MotorInit+0x94>)
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2264      	movs	r2, #100	; 0x64
 80017d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80017da:	4b12      	ldr	r3, [pc, #72]	; (8001824 <MotorInit+0x94>)
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	2264      	movs	r2, #100	; 0x64
 80017e0:	60da      	str	r2, [r3, #12]

	HAL_TIM_Base_Start(bldc.tim_com);
 80017e2:	4b10      	ldr	r3, [pc, #64]	; (8001824 <MotorInit+0x94>)
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f002 f8de 	bl	80039a8 <HAL_TIM_Base_Start>
	HAL_TIMEx_ConfigCommutationEvent_IT(bldc.tim_pwm, TIM_TS_ITR2, TIM_COMMUTATION_TRGI);
 80017ec:	4b0d      	ldr	r3, [pc, #52]	; (8001824 <MotorInit+0x94>)
 80017ee:	69db      	ldr	r3, [r3, #28]
 80017f0:	2204      	movs	r2, #4
 80017f2:	2120      	movs	r1, #32
 80017f4:	4618      	mov	r0, r3
 80017f6:	f003 f86a 	bl	80048ce <HAL_TIMEx_ConfigCommutEvent_IT>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80017fa:	2100      	movs	r1, #0
 80017fc:	480a      	ldr	r0, [pc, #40]	; (8001828 <MotorInit+0x98>)
 80017fe:	f002 f9cb 	bl	8003b98 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001802:	210c      	movs	r1, #12
 8001804:	4808      	ldr	r0, [pc, #32]	; (8001828 <MotorInit+0x98>)
 8001806:	f002 f9c7 	bl	8003b98 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800180a:	2108      	movs	r1, #8
 800180c:	4806      	ldr	r0, [pc, #24]	; (8001828 <MotorInit+0x98>)
 800180e:	f002 f9c3 	bl	8003b98 <HAL_TIM_PWM_Start>

	MotorSetPWM(0, 0, 0);  // Ensure all PWM channels are low at the beginning
 8001812:	2200      	movs	r2, #0
 8001814:	2100      	movs	r1, #0
 8001816:	2000      	movs	r0, #0
 8001818:	f000 f89c 	bl	8001954 <MotorSetPWM>
}
 800181c:	bf00      	nop
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20000384 	.word	0x20000384
 8001828:	20000254 	.word	0x20000254

0800182c <MotorSetTorque>:



bool MotorSetTorque(uint32_t torque)
{
 800182c:	b480      	push	{r7}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
	bool isTorqueChanged = false;
 8001834:	2300      	movs	r3, #0
 8001836:	73fb      	strb	r3, [r7, #15]

	if(torque > BLDC_MOTOR_MAX_TORQUE)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2b64      	cmp	r3, #100	; 0x64
 800183c:	d903      	bls.n	8001846 <MotorSetTorque+0x1a>
	{
		bldc.torque = BLDC_MOTOR_MAX_TORQUE;
 800183e:	4b0a      	ldr	r3, [pc, #40]	; (8001868 <MotorSetTorque+0x3c>)
 8001840:	2264      	movs	r2, #100	; 0x64
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	e009      	b.n	800185a <MotorSetTorque+0x2e>
	}
	else
	{
		if (bldc.torque != torque){
 8001846:	4b08      	ldr	r3, [pc, #32]	; (8001868 <MotorSetTorque+0x3c>)
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	429a      	cmp	r2, r3
 800184e:	d001      	beq.n	8001854 <MotorSetTorque+0x28>
			isTorqueChanged = true;
 8001850:	2301      	movs	r3, #1
 8001852:	73fb      	strb	r3, [r7, #15]
//			while (bldc.torque >= torque){
//				bldc.torque--;
//				HAL_Delay(bldc.torque_change_delay);
//			}
//		}
		bldc.torque = torque;
 8001854:	4a04      	ldr	r2, [pc, #16]	; (8001868 <MotorSetTorque+0x3c>)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6093      	str	r3, [r2, #8]
	}

	return isTorqueChanged;
 800185a:	7bfb      	ldrb	r3, [r7, #15]
}
 800185c:	4618      	mov	r0, r3
 800185e:	3714      	adds	r7, #20
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	20000384 	.word	0x20000384

0800186c <MotorSetDir>:
	}

	return isSpeedChanged;
}

void MotorSetDir(direction dir){
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	4603      	mov	r3, r0
 8001874:	71fb      	strb	r3, [r7, #7]
	bldc.dir = dir;
 8001876:	79fb      	ldrb	r3, [r7, #7]
 8001878:	4a03      	ldr	r2, [pc, #12]	; (8001888 <MotorSetDir+0x1c>)
 800187a:	60d3      	str	r3, [r2, #12]
}
 800187c:	bf00      	nop
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	20000384 	.word	0x20000384

0800188c <MotorConfigChannelInit>:


void MotorConfigChannelInit(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
	bldc.sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001890:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <MotorConfigChannelInit+0x38>)
 8001892:	2260      	movs	r2, #96	; 0x60
 8001894:	621a      	str	r2, [r3, #32]
	bldc.sConfigOC.Pulse = 0;
 8001896:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <MotorConfigChannelInit+0x38>)
 8001898:	2200      	movs	r2, #0
 800189a:	625a      	str	r2, [r3, #36]	; 0x24
	bldc.sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800189c:	4b09      	ldr	r3, [pc, #36]	; (80018c4 <MotorConfigChannelInit+0x38>)
 800189e:	2200      	movs	r2, #0
 80018a0:	629a      	str	r2, [r3, #40]	; 0x28
	bldc.sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018a2:	4b08      	ldr	r3, [pc, #32]	; (80018c4 <MotorConfigChannelInit+0x38>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	62da      	str	r2, [r3, #44]	; 0x2c
	bldc.sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018a8:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <MotorConfigChannelInit+0x38>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	631a      	str	r2, [r3, #48]	; 0x30
	bldc.sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018ae:	4b05      	ldr	r3, [pc, #20]	; (80018c4 <MotorConfigChannelInit+0x38>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	635a      	str	r2, [r3, #52]	; 0x34
	bldc.sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018b4:	4b03      	ldr	r3, [pc, #12]	; (80018c4 <MotorConfigChannelInit+0x38>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	639a      	str	r2, [r3, #56]	; 0x38

//	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1|TIM_IT_CC3|TIM_IT_CC4);

}
 80018ba:	bf00      	nop
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	20000384 	.word	0x20000384

080018c8 <MotorStart>:

    HAL_TIM_OC_Stop(bldc.tim_pwm, channel);
//	HAL_TIMEx_OCN_Start(bldc.tim_pwm, channel);
}

void MotorStart(int torque){
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
	int delay = 50;
 80018d0:	2332      	movs	r3, #50	; 0x32
 80018d2:	60fb      	str	r3, [r7, #12]
	while(bldc.torque <= torque){
 80018d4:	e008      	b.n	80018e8 <MotorStart+0x20>
		bldc.torque++;
 80018d6:	4b09      	ldr	r3, [pc, #36]	; (80018fc <MotorStart+0x34>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	3301      	adds	r3, #1
 80018dc:	4a07      	ldr	r2, [pc, #28]	; (80018fc <MotorStart+0x34>)
 80018de:	6093      	str	r3, [r2, #8]
		HAL_Delay(delay);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f000 fcf4 	bl	80022d0 <HAL_Delay>
	while(bldc.torque <= torque){
 80018e8:	4b04      	ldr	r3, [pc, #16]	; (80018fc <MotorStart+0x34>)
 80018ea:	689a      	ldr	r2, [r3, #8]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d9f1      	bls.n	80018d6 <MotorStart+0xe>
	}
}
 80018f2:	bf00      	nop
 80018f4:	bf00      	nop
 80018f6:	3710      	adds	r7, #16
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	20000384 	.word	0x20000384

08001900 <MotorDirChange>:

void MotorDirChange(){
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
	int old_torque = bldc.torque;
 8001906:	4b12      	ldr	r3, [pc, #72]	; (8001950 <MotorDirChange+0x50>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	607b      	str	r3, [r7, #4]
	int delay = 50;
 800190c:	2332      	movs	r3, #50	; 0x32
 800190e:	603b      	str	r3, [r7, #0]

	while(bldc.torque > 0){
 8001910:	e008      	b.n	8001924 <MotorDirChange+0x24>
		bldc.torque--;
 8001912:	4b0f      	ldr	r3, [pc, #60]	; (8001950 <MotorDirChange+0x50>)
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	3b01      	subs	r3, #1
 8001918:	4a0d      	ldr	r2, [pc, #52]	; (8001950 <MotorDirChange+0x50>)
 800191a:	6093      	str	r3, [r2, #8]
		HAL_Delay(delay);
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	f000 fcd6 	bl	80022d0 <HAL_Delay>
	while(bldc.torque > 0){
 8001924:	4b0a      	ldr	r3, [pc, #40]	; (8001950 <MotorDirChange+0x50>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d1f2      	bne.n	8001912 <MotorDirChange+0x12>
	}
	if (bldc.dir == CW){
 800192c:	4b08      	ldr	r3, [pc, #32]	; (8001950 <MotorDirChange+0x50>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	2b01      	cmp	r3, #1
 8001932:	d103      	bne.n	800193c <MotorDirChange+0x3c>
		bldc.dir = CCW;
 8001934:	4b06      	ldr	r3, [pc, #24]	; (8001950 <MotorDirChange+0x50>)
 8001936:	2200      	movs	r2, #0
 8001938:	60da      	str	r2, [r3, #12]
 800193a:	e002      	b.n	8001942 <MotorDirChange+0x42>
	} else {
		bldc.dir = CW;
 800193c:	4b04      	ldr	r3, [pc, #16]	; (8001950 <MotorDirChange+0x50>)
 800193e:	2201      	movs	r2, #1
 8001940:	60da      	str	r2, [r3, #12]
	}
	MotorStart(old_torque);
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f7ff ffc0 	bl	80018c8 <MotorStart>
}
 8001948:	bf00      	nop
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	20000384 	.word	0x20000384

08001954 <MotorSetPWM>:



void MotorSetPWM(uint16_t torqueA, uint16_t torqueB, uint16_t torqueC)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	4603      	mov	r3, r0
 800195c:	80fb      	strh	r3, [r7, #6]
 800195e:	460b      	mov	r3, r1
 8001960:	80bb      	strh	r3, [r7, #4]
 8001962:	4613      	mov	r3, r2
 8001964:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, torqueA);
 8001966:	4b09      	ldr	r3, [pc, #36]	; (800198c <MotorSetPWM+0x38>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	88fa      	ldrh	r2, [r7, #6]
 800196c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, torqueB);
 800196e:	4b07      	ldr	r3, [pc, #28]	; (800198c <MotorSetPWM+0x38>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	88ba      	ldrh	r2, [r7, #4]
 8001974:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, torqueC);
 8001976:	4b05      	ldr	r3, [pc, #20]	; (800198c <MotorSetPWM+0x38>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	887a      	ldrh	r2, [r7, #2]
 800197c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800197e:	bf00      	nop
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	20000254 	.word	0x20000254

08001990 <CheckButtonPress>:


void CheckButtonPress() {
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
    static bool button_state = false;
    bool new_button_state = HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin);
 8001996:	2101      	movs	r1, #1
 8001998:	4810      	ldr	r0, [pc, #64]	; (80019dc <CheckButtonPress+0x4c>)
 800199a:	f001 fb11 	bl	8002fc0 <HAL_GPIO_ReadPin>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	bf14      	ite	ne
 80019a4:	2301      	movne	r3, #1
 80019a6:	2300      	moveq	r3, #0
 80019a8:	71fb      	strb	r3, [r7, #7]

    if (new_button_state && !button_state) {
 80019aa:	79fb      	ldrb	r3, [r7, #7]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d00a      	beq.n	80019c6 <CheckButtonPress+0x36>
 80019b0:	4b0b      	ldr	r3, [pc, #44]	; (80019e0 <CheckButtonPress+0x50>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	f083 0301 	eor.w	r3, r3, #1
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d003      	beq.n	80019c6 <CheckButtonPress+0x36>
        wasButtonPressed = true;
 80019be:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <CheckButtonPress+0x54>)
 80019c0:	2201      	movs	r2, #1
 80019c2:	701a      	strb	r2, [r3, #0]
 80019c4:	e002      	b.n	80019cc <CheckButtonPress+0x3c>
    } else {
        wasButtonPressed = false;
 80019c6:	4b07      	ldr	r3, [pc, #28]	; (80019e4 <CheckButtonPress+0x54>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	701a      	strb	r2, [r3, #0]
    }

    button_state = new_button_state;
 80019cc:	4a04      	ldr	r2, [pc, #16]	; (80019e0 <CheckButtonPress+0x50>)
 80019ce:	79fb      	ldrb	r3, [r7, #7]
 80019d0:	7013      	strb	r3, [r2, #0]
}
 80019d2:	bf00      	nop
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40020000 	.word	0x40020000
 80019e0:	200003c1 	.word	0x200003c1
 80019e4:	200003c0 	.word	0x200003c0

080019e8 <MotorSetStepSize>:

volatile void MotorSetStepSize(volatile float newStepSize) {
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	ed87 0a01 	vstr	s0, [r7, #4]
    if (bldc.step_size != newStepSize){
 80019f2:	4b0d      	ldr	r3, [pc, #52]	; (8001a28 <MotorSetStepSize+0x40>)
 80019f4:	ed93 7a01 	vldr	s14, [r3, #4]
 80019f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80019fc:	eeb4 7a67 	vcmp.f32	s14, s15
 8001a00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a04:	d00c      	beq.n	8001a20 <MotorSetStepSize+0x38>
		bldc.step_size = newStepSize;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a07      	ldr	r2, [pc, #28]	; (8001a28 <MotorSetStepSize+0x40>)
 8001a0a:	6053      	str	r3, [r2, #4]
		printf("New step size set: %.2f\n", bldc.step_size);  // Debug output
 8001a0c:	4b06      	ldr	r3, [pc, #24]	; (8001a28 <MotorSetStepSize+0x40>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7fe fda1 	bl	8000558 <__aeabi_f2d>
 8001a16:	4602      	mov	r2, r0
 8001a18:	460b      	mov	r3, r1
 8001a1a:	4804      	ldr	r0, [pc, #16]	; (8001a2c <MotorSetStepSize+0x44>)
 8001a1c:	f006 ff80 	bl	8008920 <iprintf>
    }

}
 8001a20:	bf00      	nop
 8001a22:	3708      	adds	r7, #8
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	20000384 	.word	0x20000384
 8001a2c:	0800b6a0 	.word	0x0800b6a0

08001a30 <MotorSine>:

volatile void MotorSine(void) {
 8001a30:	b580      	push	{r7, lr}
 8001a32:	ed2d 8b02 	vpush	{d8}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af00      	add	r7, sp, #0

    static float phase = 0.0;
    float torqueA, torqueB, torqueC;

    // Calculate sine wave values for each phase
    torqueA = bldc.torque * sinf(phase);
 8001a3a:	4b7f      	ldr	r3, [pc, #508]	; (8001c38 <MotorSine+0x208>)
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	ee07 3a90 	vmov	s15, r3
 8001a42:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001a46:	4b7d      	ldr	r3, [pc, #500]	; (8001c3c <MotorSine+0x20c>)
 8001a48:	edd3 7a00 	vldr	s15, [r3]
 8001a4c:	eeb0 0a67 	vmov.f32	s0, s15
 8001a50:	f009 f892 	bl	800ab78 <sinf>
 8001a54:	eef0 7a40 	vmov.f32	s15, s0
 8001a58:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001a5c:	edc7 7a05 	vstr	s15, [r7, #20]
    torqueB = bldc.torque * sinf(phase + 2.0 * PI / 3.0);
 8001a60:	4b75      	ldr	r3, [pc, #468]	; (8001c38 <MotorSine+0x208>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	ee07 3a90 	vmov	s15, r3
 8001a68:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001a6c:	4b73      	ldr	r3, [pc, #460]	; (8001c3c <MotorSine+0x20c>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7fe fd71 	bl	8000558 <__aeabi_f2d>
 8001a76:	a36a      	add	r3, pc, #424	; (adr r3, 8001c20 <MotorSine+0x1f0>)
 8001a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a7c:	f7fe fc0e 	bl	800029c <__adddf3>
 8001a80:	4602      	mov	r2, r0
 8001a82:	460b      	mov	r3, r1
 8001a84:	4610      	mov	r0, r2
 8001a86:	4619      	mov	r1, r3
 8001a88:	f7ff f896 	bl	8000bb8 <__aeabi_d2f>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	ee00 3a10 	vmov	s0, r3
 8001a92:	f009 f871 	bl	800ab78 <sinf>
 8001a96:	eef0 7a40 	vmov.f32	s15, s0
 8001a9a:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001a9e:	edc7 7a04 	vstr	s15, [r7, #16]
    torqueC = bldc.torque * sinf(phase + 4.0 * PI / 3.0);
 8001aa2:	4b65      	ldr	r3, [pc, #404]	; (8001c38 <MotorSine+0x208>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	ee07 3a90 	vmov	s15, r3
 8001aaa:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001aae:	4b63      	ldr	r3, [pc, #396]	; (8001c3c <MotorSine+0x20c>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7fe fd50 	bl	8000558 <__aeabi_f2d>
 8001ab8:	a35b      	add	r3, pc, #364	; (adr r3, 8001c28 <MotorSine+0x1f8>)
 8001aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001abe:	f7fe fbed 	bl	800029c <__adddf3>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	4610      	mov	r0, r2
 8001ac8:	4619      	mov	r1, r3
 8001aca:	f7ff f875 	bl	8000bb8 <__aeabi_d2f>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	ee00 3a10 	vmov	s0, r3
 8001ad4:	f009 f850 	bl	800ab78 <sinf>
 8001ad8:	eef0 7a40 	vmov.f32	s15, s0
 8001adc:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001ae0:	edc7 7a03 	vstr	s15, [r7, #12]

    // Convert float torque values to uint16_t for PWM output (Assuming signed center-aligned PWM)
    uint16_t pwmA = (uint16_t)((torqueA + bldc.torque) / (2 * bldc.torque) * PWM_MAX_VALUE);
 8001ae4:	4b54      	ldr	r3, [pc, #336]	; (8001c38 <MotorSine+0x208>)
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	ee07 3a90 	vmov	s15, r3
 8001aec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001af0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001af4:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001af8:	4b4f      	ldr	r3, [pc, #316]	; (8001c38 <MotorSine+0x208>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	ee07 3a90 	vmov	s15, r3
 8001b02:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b0a:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8001c40 <MotorSine+0x210>
 8001b0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b16:	ee17 3a90 	vmov	r3, s15
 8001b1a:	817b      	strh	r3, [r7, #10]
    uint16_t pwmB = (uint16_t)((torqueB + bldc.torque) / (2 * bldc.torque) * PWM_MAX_VALUE);
 8001b1c:	4b46      	ldr	r3, [pc, #280]	; (8001c38 <MotorSine+0x208>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	ee07 3a90 	vmov	s15, r3
 8001b24:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b28:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b2c:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001b30:	4b41      	ldr	r3, [pc, #260]	; (8001c38 <MotorSine+0x208>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	ee07 3a90 	vmov	s15, r3
 8001b3a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b42:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8001c40 <MotorSine+0x210>
 8001b46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b4e:	ee17 3a90 	vmov	r3, s15
 8001b52:	813b      	strh	r3, [r7, #8]
    uint16_t pwmC = (uint16_t)((torqueC + bldc.torque) / (2 * bldc.torque) * PWM_MAX_VALUE);
 8001b54:	4b38      	ldr	r3, [pc, #224]	; (8001c38 <MotorSine+0x208>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	ee07 3a90 	vmov	s15, r3
 8001b5c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b60:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b64:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001b68:	4b33      	ldr	r3, [pc, #204]	; (8001c38 <MotorSine+0x208>)
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	ee07 3a90 	vmov	s15, r3
 8001b72:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b7a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8001c40 <MotorSine+0x210>
 8001b7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b86:	ee17 3a90 	vmov	r3, s15
 8001b8a:	80fb      	strh	r3, [r7, #6]
//    printf("PWM A: %u, PWM B: %u, PWM C: %u\n", (unsigned int)(pwmA), (unsigned int)(pwmB), (unsigned int)(pwmC));

//    printf("Torque: %i, Step Size: %i\n", (int)(bldc.torque), (int)(bldc.step_size));

    // Set PWM values
    MotorSetPWM(pwmA, pwmB, pwmC);
 8001b8c:	88fa      	ldrh	r2, [r7, #6]
 8001b8e:	8939      	ldrh	r1, [r7, #8]
 8001b90:	897b      	ldrh	r3, [r7, #10]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff fede 	bl	8001954 <MotorSetPWM>

    // Increment phase
    phase += bldc.step_size;
 8001b98:	4b27      	ldr	r3, [pc, #156]	; (8001c38 <MotorSine+0x208>)
 8001b9a:	ed93 7a01 	vldr	s14, [r3, #4]
 8001b9e:	4b27      	ldr	r3, [pc, #156]	; (8001c3c <MotorSine+0x20c>)
 8001ba0:	edd3 7a00 	vldr	s15, [r3]
 8001ba4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ba8:	4b24      	ldr	r3, [pc, #144]	; (8001c3c <MotorSine+0x20c>)
 8001baa:	edc3 7a00 	vstr	s15, [r3]

    // Keep the phase within the range of 0 to 2*PI
    if (phase >= 2.0 * PI) {
 8001bae:	4b23      	ldr	r3, [pc, #140]	; (8001c3c <MotorSine+0x20c>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7fe fcd0 	bl	8000558 <__aeabi_f2d>
 8001bb8:	a31d      	add	r3, pc, #116	; (adr r3, 8001c30 <MotorSine+0x200>)
 8001bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bbe:	f7fe ffa9 	bl	8000b14 <__aeabi_dcmpge>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d012      	beq.n	8001bee <MotorSine+0x1be>
        phase -= 2.0 * PI;
 8001bc8:	4b1c      	ldr	r3, [pc, #112]	; (8001c3c <MotorSine+0x20c>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7fe fcc3 	bl	8000558 <__aeabi_f2d>
 8001bd2:	a317      	add	r3, pc, #92	; (adr r3, 8001c30 <MotorSine+0x200>)
 8001bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd8:	f7fe fb5e 	bl	8000298 <__aeabi_dsub>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	460b      	mov	r3, r1
 8001be0:	4610      	mov	r0, r2
 8001be2:	4619      	mov	r1, r3
 8001be4:	f7fe ffe8 	bl	8000bb8 <__aeabi_d2f>
 8001be8:	4603      	mov	r3, r0
 8001bea:	4a14      	ldr	r2, [pc, #80]	; (8001c3c <MotorSine+0x20c>)
 8001bec:	6013      	str	r3, [r2, #0]
    }

//    osMutexRelease(stepSizeMutexHandle);

    HAL_GPIO_WritePin(PWM1EN_GPIO_Port, PWM1EN_Pin, GPIO_PIN_SET);
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bf4:	4813      	ldr	r0, [pc, #76]	; (8001c44 <MotorSine+0x214>)
 8001bf6:	f001 f9fb 	bl	8002ff0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PWM2EN_GPIO_Port, PWM2EN_Pin, GPIO_PIN_SET);
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c00:	4810      	ldr	r0, [pc, #64]	; (8001c44 <MotorSine+0x214>)
 8001c02:	f001 f9f5 	bl	8002ff0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PWM3EN_GPIO_Port, PWM3EN_Pin, GPIO_PIN_SET);
 8001c06:	2201      	movs	r2, #1
 8001c08:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c0c:	480d      	ldr	r0, [pc, #52]	; (8001c44 <MotorSine+0x214>)
 8001c0e:	f001 f9ef 	bl	8002ff0 <HAL_GPIO_WritePin>
}
 8001c12:	bf00      	nop
 8001c14:	3718      	adds	r7, #24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	ecbd 8b02 	vpop	{d8}
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	382d7365 	.word	0x382d7365
 8001c24:	4000c152 	.word	0x4000c152
 8001c28:	382d7365 	.word	0x382d7365
 8001c2c:	4010c152 	.word	0x4010c152
 8001c30:	54442d18 	.word	0x54442d18
 8001c34:	401921fb 	.word	0x401921fb
 8001c38:	20000384 	.word	0x20000384
 8001c3c:	200003c4 	.word	0x200003c4
 8001c40:	45800000 	.word	0x45800000
 8001c44:	40020400 	.word	0x40020400

08001c48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	607b      	str	r3, [r7, #4]
 8001c52:	4b12      	ldr	r3, [pc, #72]	; (8001c9c <HAL_MspInit+0x54>)
 8001c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c56:	4a11      	ldr	r2, [pc, #68]	; (8001c9c <HAL_MspInit+0x54>)
 8001c58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c5e:	4b0f      	ldr	r3, [pc, #60]	; (8001c9c <HAL_MspInit+0x54>)
 8001c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c66:	607b      	str	r3, [r7, #4]
 8001c68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	603b      	str	r3, [r7, #0]
 8001c6e:	4b0b      	ldr	r3, [pc, #44]	; (8001c9c <HAL_MspInit+0x54>)
 8001c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c72:	4a0a      	ldr	r2, [pc, #40]	; (8001c9c <HAL_MspInit+0x54>)
 8001c74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c78:	6413      	str	r3, [r2, #64]	; 0x40
 8001c7a:	4b08      	ldr	r3, [pc, #32]	; (8001c9c <HAL_MspInit+0x54>)
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c82:	603b      	str	r3, [r7, #0]
 8001c84:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c86:	2200      	movs	r2, #0
 8001c88:	210f      	movs	r1, #15
 8001c8a:	f06f 0001 	mvn.w	r0, #1
 8001c8e:	f000 ffdc 	bl	8002c4a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c92:	bf00      	nop
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40023800 	.word	0x40023800

08001ca0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b08a      	sub	sp, #40	; 0x28
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca8:	f107 0314 	add.w	r3, r7, #20
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	605a      	str	r2, [r3, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
 8001cb4:	60da      	str	r2, [r3, #12]
 8001cb6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a17      	ldr	r2, [pc, #92]	; (8001d1c <HAL_ADC_MspInit+0x7c>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d127      	bne.n	8001d12 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	613b      	str	r3, [r7, #16]
 8001cc6:	4b16      	ldr	r3, [pc, #88]	; (8001d20 <HAL_ADC_MspInit+0x80>)
 8001cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cca:	4a15      	ldr	r2, [pc, #84]	; (8001d20 <HAL_ADC_MspInit+0x80>)
 8001ccc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cd0:	6453      	str	r3, [r2, #68]	; 0x44
 8001cd2:	4b13      	ldr	r3, [pc, #76]	; (8001d20 <HAL_ADC_MspInit+0x80>)
 8001cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cda:	613b      	str	r3, [r7, #16]
 8001cdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60fb      	str	r3, [r7, #12]
 8001ce2:	4b0f      	ldr	r3, [pc, #60]	; (8001d20 <HAL_ADC_MspInit+0x80>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	4a0e      	ldr	r2, [pc, #56]	; (8001d20 <HAL_ADC_MspInit+0x80>)
 8001ce8:	f043 0301 	orr.w	r3, r3, #1
 8001cec:	6313      	str	r3, [r2, #48]	; 0x30
 8001cee:	4b0c      	ldr	r3, [pc, #48]	; (8001d20 <HAL_ADC_MspInit+0x80>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001cfa:	2340      	movs	r3, #64	; 0x40
 8001cfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d02:	2300      	movs	r3, #0
 8001d04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d06:	f107 0314 	add.w	r3, r7, #20
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	4805      	ldr	r0, [pc, #20]	; (8001d24 <HAL_ADC_MspInit+0x84>)
 8001d0e:	f000 ffd3 	bl	8002cb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d12:	bf00      	nop
 8001d14:	3728      	adds	r7, #40	; 0x28
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40012000 	.word	0x40012000
 8001d20:	40023800 	.word	0x40023800
 8001d24:	40020000 	.word	0x40020000

08001d28 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a0e      	ldr	r2, [pc, #56]	; (8001d70 <HAL_TIM_PWM_MspInit+0x48>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d115      	bne.n	8001d66 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60fb      	str	r3, [r7, #12]
 8001d3e:	4b0d      	ldr	r3, [pc, #52]	; (8001d74 <HAL_TIM_PWM_MspInit+0x4c>)
 8001d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d42:	4a0c      	ldr	r2, [pc, #48]	; (8001d74 <HAL_TIM_PWM_MspInit+0x4c>)
 8001d44:	f043 0301 	orr.w	r3, r3, #1
 8001d48:	6453      	str	r3, [r2, #68]	; 0x44
 8001d4a:	4b0a      	ldr	r3, [pc, #40]	; (8001d74 <HAL_TIM_PWM_MspInit+0x4c>)
 8001d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8001d56:	2200      	movs	r2, #0
 8001d58:	2105      	movs	r1, #5
 8001d5a:	201a      	movs	r0, #26
 8001d5c:	f000 ff75 	bl	8002c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001d60:	201a      	movs	r0, #26
 8001d62:	f000 ff8e 	bl	8002c82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001d66:	bf00      	nop
 8001d68:	3710      	adds	r7, #16
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	40010000 	.word	0x40010000
 8001d74:	40023800 	.word	0x40023800

08001d78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d88:	d10d      	bne.n	8001da6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	4b09      	ldr	r3, [pc, #36]	; (8001db4 <HAL_TIM_Base_MspInit+0x3c>)
 8001d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d92:	4a08      	ldr	r2, [pc, #32]	; (8001db4 <HAL_TIM_Base_MspInit+0x3c>)
 8001d94:	f043 0301 	orr.w	r3, r3, #1
 8001d98:	6413      	str	r3, [r2, #64]	; 0x40
 8001d9a:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <HAL_TIM_Base_MspInit+0x3c>)
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001da6:	bf00      	nop
 8001da8:	3714      	adds	r7, #20
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	40023800 	.word	0x40023800

08001db8 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a0b      	ldr	r2, [pc, #44]	; (8001df4 <HAL_TIM_OC_MspInit+0x3c>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d10d      	bne.n	8001de6 <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60fb      	str	r3, [r7, #12]
 8001dce:	4b0a      	ldr	r3, [pc, #40]	; (8001df8 <HAL_TIM_OC_MspInit+0x40>)
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	4a09      	ldr	r2, [pc, #36]	; (8001df8 <HAL_TIM_OC_MspInit+0x40>)
 8001dd4:	f043 0302 	orr.w	r3, r3, #2
 8001dd8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dda:	4b07      	ldr	r3, [pc, #28]	; (8001df8 <HAL_TIM_OC_MspInit+0x40>)
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	60fb      	str	r3, [r7, #12]
 8001de4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001de6:	bf00      	nop
 8001de8:	3714      	adds	r7, #20
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	40000400 	.word	0x40000400
 8001df8:	40023800 	.word	0x40023800

08001dfc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b08a      	sub	sp, #40	; 0x28
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e04:	f107 0314 	add.w	r3, r7, #20
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	605a      	str	r2, [r3, #4]
 8001e0e:	609a      	str	r2, [r3, #8]
 8001e10:	60da      	str	r2, [r3, #12]
 8001e12:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a34      	ldr	r2, [pc, #208]	; (8001eec <HAL_TIM_MspPostInit+0xf0>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d13e      	bne.n	8001e9c <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	613b      	str	r3, [r7, #16]
 8001e22:	4b33      	ldr	r3, [pc, #204]	; (8001ef0 <HAL_TIM_MspPostInit+0xf4>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	4a32      	ldr	r2, [pc, #200]	; (8001ef0 <HAL_TIM_MspPostInit+0xf4>)
 8001e28:	f043 0310 	orr.w	r3, r3, #16
 8001e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2e:	4b30      	ldr	r3, [pc, #192]	; (8001ef0 <HAL_TIM_MspPostInit+0xf4>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	f003 0310 	and.w	r3, r3, #16
 8001e36:	613b      	str	r3, [r7, #16]
 8001e38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	60fb      	str	r3, [r7, #12]
 8001e3e:	4b2c      	ldr	r3, [pc, #176]	; (8001ef0 <HAL_TIM_MspPostInit+0xf4>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	4a2b      	ldr	r2, [pc, #172]	; (8001ef0 <HAL_TIM_MspPostInit+0xf4>)
 8001e44:	f043 0301 	orr.w	r3, r3, #1
 8001e48:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4a:	4b29      	ldr	r3, [pc, #164]	; (8001ef0 <HAL_TIM_MspPostInit+0xf4>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001e56:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e64:	2300      	movs	r3, #0
 8001e66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e6c:	f107 0314 	add.w	r3, r7, #20
 8001e70:	4619      	mov	r1, r3
 8001e72:	4820      	ldr	r0, [pc, #128]	; (8001ef4 <HAL_TIM_MspPostInit+0xf8>)
 8001e74:	f000 ff20 	bl	8002cb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8001e78:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001e7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e7e:	2302      	movs	r3, #2
 8001e80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e82:	2300      	movs	r3, #0
 8001e84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e86:	2300      	movs	r3, #0
 8001e88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e8e:	f107 0314 	add.w	r3, r7, #20
 8001e92:	4619      	mov	r1, r3
 8001e94:	4818      	ldr	r0, [pc, #96]	; (8001ef8 <HAL_TIM_MspPostInit+0xfc>)
 8001e96:	f000 ff0f 	bl	8002cb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001e9a:	e022      	b.n	8001ee2 <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM2)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ea4:	d11d      	bne.n	8001ee2 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60bb      	str	r3, [r7, #8]
 8001eaa:	4b11      	ldr	r3, [pc, #68]	; (8001ef0 <HAL_TIM_MspPostInit+0xf4>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	4a10      	ldr	r2, [pc, #64]	; (8001ef0 <HAL_TIM_MspPostInit+0xf4>)
 8001eb0:	f043 0301 	orr.w	r3, r3, #1
 8001eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb6:	4b0e      	ldr	r3, [pc, #56]	; (8001ef0 <HAL_TIM_MspPostInit+0xf4>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	60bb      	str	r3, [r7, #8]
 8001ec0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_5;
 8001ec2:	2326      	movs	r3, #38	; 0x26
 8001ec4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed6:	f107 0314 	add.w	r3, r7, #20
 8001eda:	4619      	mov	r1, r3
 8001edc:	4806      	ldr	r0, [pc, #24]	; (8001ef8 <HAL_TIM_MspPostInit+0xfc>)
 8001ede:	f000 feeb 	bl	8002cb8 <HAL_GPIO_Init>
}
 8001ee2:	bf00      	nop
 8001ee4:	3728      	adds	r7, #40	; 0x28
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40010000 	.word	0x40010000
 8001ef0:	40023800 	.word	0x40023800
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	40020000 	.word	0x40020000

08001efc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b08a      	sub	sp, #40	; 0x28
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f04:	f107 0314 	add.w	r3, r7, #20
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	605a      	str	r2, [r3, #4]
 8001f0e:	609a      	str	r2, [r3, #8]
 8001f10:	60da      	str	r2, [r3, #12]
 8001f12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a19      	ldr	r2, [pc, #100]	; (8001f80 <HAL_UART_MspInit+0x84>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d12b      	bne.n	8001f76 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001f1e:	2300      	movs	r3, #0
 8001f20:	613b      	str	r3, [r7, #16]
 8001f22:	4b18      	ldr	r3, [pc, #96]	; (8001f84 <HAL_UART_MspInit+0x88>)
 8001f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f26:	4a17      	ldr	r2, [pc, #92]	; (8001f84 <HAL_UART_MspInit+0x88>)
 8001f28:	f043 0320 	orr.w	r3, r3, #32
 8001f2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f2e:	4b15      	ldr	r3, [pc, #84]	; (8001f84 <HAL_UART_MspInit+0x88>)
 8001f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f32:	f003 0320 	and.w	r3, r3, #32
 8001f36:	613b      	str	r3, [r7, #16]
 8001f38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60fb      	str	r3, [r7, #12]
 8001f3e:	4b11      	ldr	r3, [pc, #68]	; (8001f84 <HAL_UART_MspInit+0x88>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f42:	4a10      	ldr	r2, [pc, #64]	; (8001f84 <HAL_UART_MspInit+0x88>)
 8001f44:	f043 0304 	orr.w	r3, r3, #4
 8001f48:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4a:	4b0e      	ldr	r3, [pc, #56]	; (8001f84 <HAL_UART_MspInit+0x88>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4e:	f003 0304 	and.w	r3, r3, #4
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f56:	23c0      	movs	r3, #192	; 0xc0
 8001f58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f62:	2303      	movs	r3, #3
 8001f64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001f66:	2308      	movs	r3, #8
 8001f68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f6a:	f107 0314 	add.w	r3, r7, #20
 8001f6e:	4619      	mov	r1, r3
 8001f70:	4805      	ldr	r0, [pc, #20]	; (8001f88 <HAL_UART_MspInit+0x8c>)
 8001f72:	f000 fea1 	bl	8002cb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001f76:	bf00      	nop
 8001f78:	3728      	adds	r7, #40	; 0x28
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	40011400 	.word	0x40011400
 8001f84:	40023800 	.word	0x40023800
 8001f88:	40020800 	.word	0x40020800

08001f8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f90:	e7fe      	b.n	8001f90 <NMI_Handler+0x4>

08001f92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f92:	b480      	push	{r7}
 8001f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f96:	e7fe      	b.n	8001f96 <HardFault_Handler+0x4>

08001f98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f9c:	e7fe      	b.n	8001f9c <MemManage_Handler+0x4>

08001f9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fa2:	e7fe      	b.n	8001fa2 <BusFault_Handler+0x4>

08001fa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fa8:	e7fe      	b.n	8001fa8 <UsageFault_Handler+0x4>

08001faa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001faa:	b480      	push	{r7}
 8001fac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fae:	bf00      	nop
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fbc:	f000 f968 	bl	8002290 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001fc0:	f004 ff9c 	bl	8006efc <xTaskGetSchedulerState>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d001      	beq.n	8001fce <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001fca:	f005 fd85 	bl	8007ad8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}
	...

08001fd4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001fd8:	4802      	ldr	r0, [pc, #8]	; (8001fe4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001fda:	f001 fe8d 	bl	8003cf8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	20000254 	.word	0x20000254

08001fe8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  return 1;
 8001fec:	2301      	movs	r3, #1
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <_kill>:

int _kill(int pid, int sig)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002002:	f005 ffe3 	bl	8007fcc <__errno>
 8002006:	4603      	mov	r3, r0
 8002008:	2216      	movs	r2, #22
 800200a:	601a      	str	r2, [r3, #0]
  return -1;
 800200c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002010:	4618      	mov	r0, r3
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <_exit>:

void _exit (int status)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002020:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f7ff ffe7 	bl	8001ff8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800202a:	e7fe      	b.n	800202a <_exit+0x12>

0800202c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002038:	2300      	movs	r3, #0
 800203a:	617b      	str	r3, [r7, #20]
 800203c:	e00a      	b.n	8002054 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800203e:	f3af 8000 	nop.w
 8002042:	4601      	mov	r1, r0
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	1c5a      	adds	r2, r3, #1
 8002048:	60ba      	str	r2, [r7, #8]
 800204a:	b2ca      	uxtb	r2, r1
 800204c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	3301      	adds	r3, #1
 8002052:	617b      	str	r3, [r7, #20]
 8002054:	697a      	ldr	r2, [r7, #20]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	429a      	cmp	r2, r3
 800205a:	dbf0      	blt.n	800203e <_read+0x12>
  }

  return len;
 800205c:	687b      	ldr	r3, [r7, #4]
}
 800205e:	4618      	mov	r0, r3
 8002060:	3718      	adds	r7, #24
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b086      	sub	sp, #24
 800206a:	af00      	add	r7, sp, #0
 800206c:	60f8      	str	r0, [r7, #12]
 800206e:	60b9      	str	r1, [r7, #8]
 8002070:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002072:	2300      	movs	r3, #0
 8002074:	617b      	str	r3, [r7, #20]
 8002076:	e009      	b.n	800208c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	1c5a      	adds	r2, r3, #1
 800207c:	60ba      	str	r2, [r7, #8]
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff faeb 	bl	800165c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	3301      	adds	r3, #1
 800208a:	617b      	str	r3, [r7, #20]
 800208c:	697a      	ldr	r2, [r7, #20]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	429a      	cmp	r2, r3
 8002092:	dbf1      	blt.n	8002078 <_write+0x12>
  }
  return len;
 8002094:	687b      	ldr	r3, [r7, #4]
}
 8002096:	4618      	mov	r0, r3
 8002098:	3718      	adds	r7, #24
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <_close>:

int _close(int file)
{
 800209e:	b480      	push	{r7}
 80020a0:	b083      	sub	sp, #12
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr

080020b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020b6:	b480      	push	{r7}
 80020b8:	b083      	sub	sp, #12
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
 80020be:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020c6:	605a      	str	r2, [r3, #4]
  return 0;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <_isatty>:

int _isatty(int file)
{
 80020d6:	b480      	push	{r7}
 80020d8:	b083      	sub	sp, #12
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020de:	2301      	movs	r3, #1
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3714      	adds	r7, #20
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
	...

08002108 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002110:	4a14      	ldr	r2, [pc, #80]	; (8002164 <_sbrk+0x5c>)
 8002112:	4b15      	ldr	r3, [pc, #84]	; (8002168 <_sbrk+0x60>)
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800211c:	4b13      	ldr	r3, [pc, #76]	; (800216c <_sbrk+0x64>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d102      	bne.n	800212a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002124:	4b11      	ldr	r3, [pc, #68]	; (800216c <_sbrk+0x64>)
 8002126:	4a12      	ldr	r2, [pc, #72]	; (8002170 <_sbrk+0x68>)
 8002128:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800212a:	4b10      	ldr	r3, [pc, #64]	; (800216c <_sbrk+0x64>)
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4413      	add	r3, r2
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	429a      	cmp	r2, r3
 8002136:	d207      	bcs.n	8002148 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002138:	f005 ff48 	bl	8007fcc <__errno>
 800213c:	4603      	mov	r3, r0
 800213e:	220c      	movs	r2, #12
 8002140:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002142:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002146:	e009      	b.n	800215c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002148:	4b08      	ldr	r3, [pc, #32]	; (800216c <_sbrk+0x64>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800214e:	4b07      	ldr	r3, [pc, #28]	; (800216c <_sbrk+0x64>)
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4413      	add	r3, r2
 8002156:	4a05      	ldr	r2, [pc, #20]	; (800216c <_sbrk+0x64>)
 8002158:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800215a:	68fb      	ldr	r3, [r7, #12]
}
 800215c:	4618      	mov	r0, r3
 800215e:	3718      	adds	r7, #24
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	20020000 	.word	0x20020000
 8002168:	00000400 	.word	0x00000400
 800216c:	200003c8 	.word	0x200003c8
 8002170:	20004d30 	.word	0x20004d30

08002174 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002178:	4b06      	ldr	r3, [pc, #24]	; (8002194 <SystemInit+0x20>)
 800217a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800217e:	4a05      	ldr	r2, [pc, #20]	; (8002194 <SystemInit+0x20>)
 8002180:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002184:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002188:	bf00      	nop
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	e000ed00 	.word	0xe000ed00

08002198 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002198:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800219c:	480d      	ldr	r0, [pc, #52]	; (80021d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800219e:	490e      	ldr	r1, [pc, #56]	; (80021d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80021a0:	4a0e      	ldr	r2, [pc, #56]	; (80021dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80021a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021a4:	e002      	b.n	80021ac <LoopCopyDataInit>

080021a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021aa:	3304      	adds	r3, #4

080021ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021b0:	d3f9      	bcc.n	80021a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021b2:	4a0b      	ldr	r2, [pc, #44]	; (80021e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80021b4:	4c0b      	ldr	r4, [pc, #44]	; (80021e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80021b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021b8:	e001      	b.n	80021be <LoopFillZerobss>

080021ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021bc:	3204      	adds	r2, #4

080021be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021c0:	d3fb      	bcc.n	80021ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80021c2:	f7ff ffd7 	bl	8002174 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021c6:	f005 ff07 	bl	8007fd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021ca:	f7fe fec7 	bl	8000f5c <main>
  bx  lr    
 80021ce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80021d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021d8:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80021dc:	0800beec 	.word	0x0800beec
  ldr r2, =_sbss
 80021e0:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80021e4:	20004d30 	.word	0x20004d30

080021e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021e8:	e7fe      	b.n	80021e8 <ADC_IRQHandler>
	...

080021ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021f0:	4b0e      	ldr	r3, [pc, #56]	; (800222c <HAL_Init+0x40>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a0d      	ldr	r2, [pc, #52]	; (800222c <HAL_Init+0x40>)
 80021f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021fc:	4b0b      	ldr	r3, [pc, #44]	; (800222c <HAL_Init+0x40>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a0a      	ldr	r2, [pc, #40]	; (800222c <HAL_Init+0x40>)
 8002202:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002206:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002208:	4b08      	ldr	r3, [pc, #32]	; (800222c <HAL_Init+0x40>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a07      	ldr	r2, [pc, #28]	; (800222c <HAL_Init+0x40>)
 800220e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002212:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002214:	2003      	movs	r0, #3
 8002216:	f000 fd0d 	bl	8002c34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800221a:	200f      	movs	r0, #15
 800221c:	f000 f808 	bl	8002230 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002220:	f7ff fd12 	bl	8001c48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	40023c00 	.word	0x40023c00

08002230 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002238:	4b12      	ldr	r3, [pc, #72]	; (8002284 <HAL_InitTick+0x54>)
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	4b12      	ldr	r3, [pc, #72]	; (8002288 <HAL_InitTick+0x58>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	4619      	mov	r1, r3
 8002242:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002246:	fbb3 f3f1 	udiv	r3, r3, r1
 800224a:	fbb2 f3f3 	udiv	r3, r2, r3
 800224e:	4618      	mov	r0, r3
 8002250:	f000 fd25 	bl	8002c9e <HAL_SYSTICK_Config>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e00e      	b.n	800227c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2b0f      	cmp	r3, #15
 8002262:	d80a      	bhi.n	800227a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002264:	2200      	movs	r2, #0
 8002266:	6879      	ldr	r1, [r7, #4]
 8002268:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800226c:	f000 fced 	bl	8002c4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002270:	4a06      	ldr	r2, [pc, #24]	; (800228c <HAL_InitTick+0x5c>)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002276:	2300      	movs	r3, #0
 8002278:	e000      	b.n	800227c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
}
 800227c:	4618      	mov	r0, r3
 800227e:	3708      	adds	r7, #8
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	20000010 	.word	0x20000010
 8002288:	20000018 	.word	0x20000018
 800228c:	20000014 	.word	0x20000014

08002290 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002294:	4b06      	ldr	r3, [pc, #24]	; (80022b0 <HAL_IncTick+0x20>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	461a      	mov	r2, r3
 800229a:	4b06      	ldr	r3, [pc, #24]	; (80022b4 <HAL_IncTick+0x24>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4413      	add	r3, r2
 80022a0:	4a04      	ldr	r2, [pc, #16]	; (80022b4 <HAL_IncTick+0x24>)
 80022a2:	6013      	str	r3, [r2, #0]
}
 80022a4:	bf00      	nop
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	20000018 	.word	0x20000018
 80022b4:	200003cc 	.word	0x200003cc

080022b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  return uwTick;
 80022bc:	4b03      	ldr	r3, [pc, #12]	; (80022cc <HAL_GetTick+0x14>)
 80022be:	681b      	ldr	r3, [r3, #0]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	200003cc 	.word	0x200003cc

080022d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022d8:	f7ff ffee 	bl	80022b8 <HAL_GetTick>
 80022dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022e8:	d005      	beq.n	80022f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022ea:	4b0a      	ldr	r3, [pc, #40]	; (8002314 <HAL_Delay+0x44>)
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	461a      	mov	r2, r3
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	4413      	add	r3, r2
 80022f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022f6:	bf00      	nop
 80022f8:	f7ff ffde 	bl	80022b8 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	429a      	cmp	r2, r3
 8002306:	d8f7      	bhi.n	80022f8 <HAL_Delay+0x28>
  {
  }
}
 8002308:	bf00      	nop
 800230a:	bf00      	nop
 800230c:	3710      	adds	r7, #16
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	20000018 	.word	0x20000018

08002318 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002320:	2300      	movs	r3, #0
 8002322:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e033      	b.n	8002396 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	2b00      	cmp	r3, #0
 8002334:	d109      	bne.n	800234a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f7ff fcb2 	bl	8001ca0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234e:	f003 0310 	and.w	r3, r3, #16
 8002352:	2b00      	cmp	r3, #0
 8002354:	d118      	bne.n	8002388 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800235e:	f023 0302 	bic.w	r3, r3, #2
 8002362:	f043 0202 	orr.w	r2, r3, #2
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 fa96 	bl	800289c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	f023 0303 	bic.w	r3, r3, #3
 800237e:	f043 0201 	orr.w	r2, r3, #1
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	641a      	str	r2, [r3, #64]	; 0x40
 8002386:	e001      	b.n	800238c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002394:	7bfb      	ldrb	r3, [r7, #15]
}
 8002396:	4618      	mov	r0, r3
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
	...

080023a0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80023a8:	2300      	movs	r3, #0
 80023aa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d101      	bne.n	80023ba <HAL_ADC_Start+0x1a>
 80023b6:	2302      	movs	r3, #2
 80023b8:	e097      	b.n	80024ea <HAL_ADC_Start+0x14a>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2201      	movs	r2, #1
 80023be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f003 0301 	and.w	r3, r3, #1
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d018      	beq.n	8002402 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	689a      	ldr	r2, [r3, #8]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f042 0201 	orr.w	r2, r2, #1
 80023de:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80023e0:	4b45      	ldr	r3, [pc, #276]	; (80024f8 <HAL_ADC_Start+0x158>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a45      	ldr	r2, [pc, #276]	; (80024fc <HAL_ADC_Start+0x15c>)
 80023e6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ea:	0c9a      	lsrs	r2, r3, #18
 80023ec:	4613      	mov	r3, r2
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	4413      	add	r3, r2
 80023f2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80023f4:	e002      	b.n	80023fc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	3b01      	subs	r3, #1
 80023fa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1f9      	bne.n	80023f6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	2b01      	cmp	r3, #1
 800240e:	d15f      	bne.n	80024d0 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002414:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002418:	f023 0301 	bic.w	r3, r3, #1
 800241c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800242e:	2b00      	cmp	r3, #0
 8002430:	d007      	beq.n	8002442 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002436:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800243a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002446:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800244a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800244e:	d106      	bne.n	800245e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002454:	f023 0206 	bic.w	r2, r3, #6
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	645a      	str	r2, [r3, #68]	; 0x44
 800245c:	e002      	b.n	8002464 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800246c:	4b24      	ldr	r3, [pc, #144]	; (8002500 <HAL_ADC_Start+0x160>)
 800246e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002478:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f003 031f 	and.w	r3, r3, #31
 8002482:	2b00      	cmp	r3, #0
 8002484:	d10f      	bne.n	80024a6 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d129      	bne.n	80024e8 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	689a      	ldr	r2, [r3, #8]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80024a2:	609a      	str	r2, [r3, #8]
 80024a4:	e020      	b.n	80024e8 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a16      	ldr	r2, [pc, #88]	; (8002504 <HAL_ADC_Start+0x164>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d11b      	bne.n	80024e8 <HAL_ADC_Start+0x148>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d114      	bne.n	80024e8 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	689a      	ldr	r2, [r3, #8]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80024cc:	609a      	str	r2, [r3, #8]
 80024ce:	e00b      	b.n	80024e8 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d4:	f043 0210 	orr.w	r2, r3, #16
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e0:	f043 0201 	orr.w	r2, r3, #1
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3714      	adds	r7, #20
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	20000010 	.word	0x20000010
 80024fc:	431bde83 	.word	0x431bde83
 8002500:	40012300 	.word	0x40012300
 8002504:	40012000 	.word	0x40012000

08002508 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002512:	2300      	movs	r3, #0
 8002514:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002520:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002524:	d113      	bne.n	800254e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002530:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002534:	d10b      	bne.n	800254e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253a:	f043 0220 	orr.w	r2, r3, #32
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e063      	b.n	8002616 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800254e:	f7ff feb3 	bl	80022b8 <HAL_GetTick>
 8002552:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002554:	e021      	b.n	800259a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800255c:	d01d      	beq.n	800259a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d007      	beq.n	8002574 <HAL_ADC_PollForConversion+0x6c>
 8002564:	f7ff fea8 	bl	80022b8 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	683a      	ldr	r2, [r7, #0]
 8002570:	429a      	cmp	r2, r3
 8002572:	d212      	bcs.n	800259a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b02      	cmp	r3, #2
 8002580:	d00b      	beq.n	800259a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	f043 0204 	orr.w	r2, r3, #4
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e03d      	b.n	8002616 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0302 	and.w	r3, r3, #2
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d1d6      	bne.n	8002556 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f06f 0212 	mvn.w	r2, #18
 80025b0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d123      	bne.n	8002614 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d11f      	bne.n	8002614 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025da:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d006      	beq.n	80025f0 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d111      	bne.n	8002614 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002600:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d105      	bne.n	8002614 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260c:	f043 0201 	orr.w	r2, r3, #1
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3710      	adds	r7, #16
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800261e:	b480      	push	{r7}
 8002620:	b083      	sub	sp, #12
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800262c:	4618      	mov	r0, r3
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002638:	b480      	push	{r7}
 800263a:	b085      	sub	sp, #20
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002642:	2300      	movs	r3, #0
 8002644:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800264c:	2b01      	cmp	r3, #1
 800264e:	d101      	bne.n	8002654 <HAL_ADC_ConfigChannel+0x1c>
 8002650:	2302      	movs	r3, #2
 8002652:	e113      	b.n	800287c <HAL_ADC_ConfigChannel+0x244>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2b09      	cmp	r3, #9
 8002662:	d925      	bls.n	80026b0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	68d9      	ldr	r1, [r3, #12]
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	b29b      	uxth	r3, r3
 8002670:	461a      	mov	r2, r3
 8002672:	4613      	mov	r3, r2
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	4413      	add	r3, r2
 8002678:	3b1e      	subs	r3, #30
 800267a:	2207      	movs	r2, #7
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	43da      	mvns	r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	400a      	ands	r2, r1
 8002688:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	68d9      	ldr	r1, [r3, #12]
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	689a      	ldr	r2, [r3, #8]
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	b29b      	uxth	r3, r3
 800269a:	4618      	mov	r0, r3
 800269c:	4603      	mov	r3, r0
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	4403      	add	r3, r0
 80026a2:	3b1e      	subs	r3, #30
 80026a4:	409a      	lsls	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	430a      	orrs	r2, r1
 80026ac:	60da      	str	r2, [r3, #12]
 80026ae:	e022      	b.n	80026f6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6919      	ldr	r1, [r3, #16]
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	461a      	mov	r2, r3
 80026be:	4613      	mov	r3, r2
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	4413      	add	r3, r2
 80026c4:	2207      	movs	r2, #7
 80026c6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ca:	43da      	mvns	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	400a      	ands	r2, r1
 80026d2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	6919      	ldr	r1, [r3, #16]
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	689a      	ldr	r2, [r3, #8]
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	4618      	mov	r0, r3
 80026e6:	4603      	mov	r3, r0
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	4403      	add	r3, r0
 80026ec:	409a      	lsls	r2, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	430a      	orrs	r2, r1
 80026f4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	2b06      	cmp	r3, #6
 80026fc:	d824      	bhi.n	8002748 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685a      	ldr	r2, [r3, #4]
 8002708:	4613      	mov	r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	4413      	add	r3, r2
 800270e:	3b05      	subs	r3, #5
 8002710:	221f      	movs	r2, #31
 8002712:	fa02 f303 	lsl.w	r3, r2, r3
 8002716:	43da      	mvns	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	400a      	ands	r2, r1
 800271e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	b29b      	uxth	r3, r3
 800272c:	4618      	mov	r0, r3
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685a      	ldr	r2, [r3, #4]
 8002732:	4613      	mov	r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	4413      	add	r3, r2
 8002738:	3b05      	subs	r3, #5
 800273a:	fa00 f203 	lsl.w	r2, r0, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	430a      	orrs	r2, r1
 8002744:	635a      	str	r2, [r3, #52]	; 0x34
 8002746:	e04c      	b.n	80027e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	2b0c      	cmp	r3, #12
 800274e:	d824      	bhi.n	800279a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685a      	ldr	r2, [r3, #4]
 800275a:	4613      	mov	r3, r2
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	4413      	add	r3, r2
 8002760:	3b23      	subs	r3, #35	; 0x23
 8002762:	221f      	movs	r2, #31
 8002764:	fa02 f303 	lsl.w	r3, r2, r3
 8002768:	43da      	mvns	r2, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	400a      	ands	r2, r1
 8002770:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	b29b      	uxth	r3, r3
 800277e:	4618      	mov	r0, r3
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685a      	ldr	r2, [r3, #4]
 8002784:	4613      	mov	r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	4413      	add	r3, r2
 800278a:	3b23      	subs	r3, #35	; 0x23
 800278c:	fa00 f203 	lsl.w	r2, r0, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	430a      	orrs	r2, r1
 8002796:	631a      	str	r2, [r3, #48]	; 0x30
 8002798:	e023      	b.n	80027e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685a      	ldr	r2, [r3, #4]
 80027a4:	4613      	mov	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	4413      	add	r3, r2
 80027aa:	3b41      	subs	r3, #65	; 0x41
 80027ac:	221f      	movs	r2, #31
 80027ae:	fa02 f303 	lsl.w	r3, r2, r3
 80027b2:	43da      	mvns	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	400a      	ands	r2, r1
 80027ba:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	4618      	mov	r0, r3
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685a      	ldr	r2, [r3, #4]
 80027ce:	4613      	mov	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	4413      	add	r3, r2
 80027d4:	3b41      	subs	r3, #65	; 0x41
 80027d6:	fa00 f203 	lsl.w	r2, r0, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	430a      	orrs	r2, r1
 80027e0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027e2:	4b29      	ldr	r3, [pc, #164]	; (8002888 <HAL_ADC_ConfigChannel+0x250>)
 80027e4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a28      	ldr	r2, [pc, #160]	; (800288c <HAL_ADC_ConfigChannel+0x254>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d10f      	bne.n	8002810 <HAL_ADC_ConfigChannel+0x1d8>
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2b12      	cmp	r3, #18
 80027f6:	d10b      	bne.n	8002810 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a1d      	ldr	r2, [pc, #116]	; (800288c <HAL_ADC_ConfigChannel+0x254>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d12b      	bne.n	8002872 <HAL_ADC_ConfigChannel+0x23a>
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a1c      	ldr	r2, [pc, #112]	; (8002890 <HAL_ADC_ConfigChannel+0x258>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d003      	beq.n	800282c <HAL_ADC_ConfigChannel+0x1f4>
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2b11      	cmp	r3, #17
 800282a:	d122      	bne.n	8002872 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a11      	ldr	r2, [pc, #68]	; (8002890 <HAL_ADC_ConfigChannel+0x258>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d111      	bne.n	8002872 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800284e:	4b11      	ldr	r3, [pc, #68]	; (8002894 <HAL_ADC_ConfigChannel+0x25c>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a11      	ldr	r2, [pc, #68]	; (8002898 <HAL_ADC_ConfigChannel+0x260>)
 8002854:	fba2 2303 	umull	r2, r3, r2, r3
 8002858:	0c9a      	lsrs	r2, r3, #18
 800285a:	4613      	mov	r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	4413      	add	r3, r2
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002864:	e002      	b.n	800286c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	3b01      	subs	r3, #1
 800286a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1f9      	bne.n	8002866 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800287a:	2300      	movs	r3, #0
}
 800287c:	4618      	mov	r0, r3
 800287e:	3714      	adds	r7, #20
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr
 8002888:	40012300 	.word	0x40012300
 800288c:	40012000 	.word	0x40012000
 8002890:	10000012 	.word	0x10000012
 8002894:	20000010 	.word	0x20000010
 8002898:	431bde83 	.word	0x431bde83

0800289c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800289c:	b480      	push	{r7}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028a4:	4b79      	ldr	r3, [pc, #484]	; (8002a8c <ADC_Init+0x1f0>)
 80028a6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	685a      	ldr	r2, [r3, #4]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	431a      	orrs	r2, r3
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	685a      	ldr	r2, [r3, #4]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	6859      	ldr	r1, [r3, #4]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	691b      	ldr	r3, [r3, #16]
 80028dc:	021a      	lsls	r2, r3, #8
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	430a      	orrs	r2, r1
 80028e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	685a      	ldr	r2, [r3, #4]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80028f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	6859      	ldr	r1, [r3, #4]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689a      	ldr	r2, [r3, #8]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	430a      	orrs	r2, r1
 8002906:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	689a      	ldr	r2, [r3, #8]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002916:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	6899      	ldr	r1, [r3, #8]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	68da      	ldr	r2, [r3, #12]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	430a      	orrs	r2, r1
 8002928:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800292e:	4a58      	ldr	r2, [pc, #352]	; (8002a90 <ADC_Init+0x1f4>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d022      	beq.n	800297a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	689a      	ldr	r2, [r3, #8]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002942:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	6899      	ldr	r1, [r3, #8]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	430a      	orrs	r2, r1
 8002954:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	689a      	ldr	r2, [r3, #8]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002964:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	6899      	ldr	r1, [r3, #8]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	430a      	orrs	r2, r1
 8002976:	609a      	str	r2, [r3, #8]
 8002978:	e00f      	b.n	800299a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	689a      	ldr	r2, [r3, #8]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002988:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	689a      	ldr	r2, [r3, #8]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002998:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	689a      	ldr	r2, [r3, #8]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f022 0202 	bic.w	r2, r2, #2
 80029a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	6899      	ldr	r1, [r3, #8]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	7e1b      	ldrb	r3, [r3, #24]
 80029b4:	005a      	lsls	r2, r3, #1
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	430a      	orrs	r2, r1
 80029bc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d01b      	beq.n	8002a00 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	685a      	ldr	r2, [r3, #4]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029d6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	685a      	ldr	r2, [r3, #4]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80029e6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	6859      	ldr	r1, [r3, #4]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f2:	3b01      	subs	r3, #1
 80029f4:	035a      	lsls	r2, r3, #13
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	430a      	orrs	r2, r1
 80029fc:	605a      	str	r2, [r3, #4]
 80029fe:	e007      	b.n	8002a10 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	685a      	ldr	r2, [r3, #4]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a0e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002a1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	69db      	ldr	r3, [r3, #28]
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	051a      	lsls	r2, r3, #20
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	430a      	orrs	r2, r1
 8002a34:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	689a      	ldr	r2, [r3, #8]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a44:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	6899      	ldr	r1, [r3, #8]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a52:	025a      	lsls	r2, r3, #9
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	689a      	ldr	r2, [r3, #8]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a6a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	6899      	ldr	r1, [r3, #8]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	695b      	ldr	r3, [r3, #20]
 8002a76:	029a      	lsls	r2, r3, #10
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	609a      	str	r2, [r3, #8]
}
 8002a80:	bf00      	nop
 8002a82:	3714      	adds	r7, #20
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr
 8002a8c:	40012300 	.word	0x40012300
 8002a90:	0f000001 	.word	0x0f000001

08002a94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f003 0307 	and.w	r3, r3, #7
 8002aa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002aa4:	4b0c      	ldr	r3, [pc, #48]	; (8002ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aaa:	68ba      	ldr	r2, [r7, #8]
 8002aac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002abc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ac0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ac4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ac6:	4a04      	ldr	r2, [pc, #16]	; (8002ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	60d3      	str	r3, [r2, #12]
}
 8002acc:	bf00      	nop
 8002ace:	3714      	adds	r7, #20
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr
 8002ad8:	e000ed00 	.word	0xe000ed00

08002adc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ae0:	4b04      	ldr	r3, [pc, #16]	; (8002af4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	0a1b      	lsrs	r3, r3, #8
 8002ae6:	f003 0307 	and.w	r3, r3, #7
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr
 8002af4:	e000ed00 	.word	0xe000ed00

08002af8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	4603      	mov	r3, r0
 8002b00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	db0b      	blt.n	8002b22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b0a:	79fb      	ldrb	r3, [r7, #7]
 8002b0c:	f003 021f 	and.w	r2, r3, #31
 8002b10:	4907      	ldr	r1, [pc, #28]	; (8002b30 <__NVIC_EnableIRQ+0x38>)
 8002b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b16:	095b      	lsrs	r3, r3, #5
 8002b18:	2001      	movs	r0, #1
 8002b1a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b22:	bf00      	nop
 8002b24:	370c      	adds	r7, #12
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	e000e100 	.word	0xe000e100

08002b34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	6039      	str	r1, [r7, #0]
 8002b3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	db0a      	blt.n	8002b5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	b2da      	uxtb	r2, r3
 8002b4c:	490c      	ldr	r1, [pc, #48]	; (8002b80 <__NVIC_SetPriority+0x4c>)
 8002b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b52:	0112      	lsls	r2, r2, #4
 8002b54:	b2d2      	uxtb	r2, r2
 8002b56:	440b      	add	r3, r1
 8002b58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b5c:	e00a      	b.n	8002b74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	b2da      	uxtb	r2, r3
 8002b62:	4908      	ldr	r1, [pc, #32]	; (8002b84 <__NVIC_SetPriority+0x50>)
 8002b64:	79fb      	ldrb	r3, [r7, #7]
 8002b66:	f003 030f 	and.w	r3, r3, #15
 8002b6a:	3b04      	subs	r3, #4
 8002b6c:	0112      	lsls	r2, r2, #4
 8002b6e:	b2d2      	uxtb	r2, r2
 8002b70:	440b      	add	r3, r1
 8002b72:	761a      	strb	r2, [r3, #24]
}
 8002b74:	bf00      	nop
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr
 8002b80:	e000e100 	.word	0xe000e100
 8002b84:	e000ed00 	.word	0xe000ed00

08002b88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b089      	sub	sp, #36	; 0x24
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f003 0307 	and.w	r3, r3, #7
 8002b9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	f1c3 0307 	rsb	r3, r3, #7
 8002ba2:	2b04      	cmp	r3, #4
 8002ba4:	bf28      	it	cs
 8002ba6:	2304      	movcs	r3, #4
 8002ba8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	3304      	adds	r3, #4
 8002bae:	2b06      	cmp	r3, #6
 8002bb0:	d902      	bls.n	8002bb8 <NVIC_EncodePriority+0x30>
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	3b03      	subs	r3, #3
 8002bb6:	e000      	b.n	8002bba <NVIC_EncodePriority+0x32>
 8002bb8:	2300      	movs	r3, #0
 8002bba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc6:	43da      	mvns	r2, r3
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	401a      	ands	r2, r3
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bd0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bda:	43d9      	mvns	r1, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002be0:	4313      	orrs	r3, r2
         );
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3724      	adds	r7, #36	; 0x24
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
	...

08002bf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c00:	d301      	bcc.n	8002c06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c02:	2301      	movs	r3, #1
 8002c04:	e00f      	b.n	8002c26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c06:	4a0a      	ldr	r2, [pc, #40]	; (8002c30 <SysTick_Config+0x40>)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c0e:	210f      	movs	r1, #15
 8002c10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c14:	f7ff ff8e 	bl	8002b34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c18:	4b05      	ldr	r3, [pc, #20]	; (8002c30 <SysTick_Config+0x40>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c1e:	4b04      	ldr	r3, [pc, #16]	; (8002c30 <SysTick_Config+0x40>)
 8002c20:	2207      	movs	r2, #7
 8002c22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	e000e010 	.word	0xe000e010

08002c34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f7ff ff29 	bl	8002a94 <__NVIC_SetPriorityGrouping>
}
 8002c42:	bf00      	nop
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b086      	sub	sp, #24
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	4603      	mov	r3, r0
 8002c52:	60b9      	str	r1, [r7, #8]
 8002c54:	607a      	str	r2, [r7, #4]
 8002c56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c5c:	f7ff ff3e 	bl	8002adc <__NVIC_GetPriorityGrouping>
 8002c60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	68b9      	ldr	r1, [r7, #8]
 8002c66:	6978      	ldr	r0, [r7, #20]
 8002c68:	f7ff ff8e 	bl	8002b88 <NVIC_EncodePriority>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c72:	4611      	mov	r1, r2
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7ff ff5d 	bl	8002b34 <__NVIC_SetPriority>
}
 8002c7a:	bf00      	nop
 8002c7c:	3718      	adds	r7, #24
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b082      	sub	sp, #8
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	4603      	mov	r3, r0
 8002c8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7ff ff31 	bl	8002af8 <__NVIC_EnableIRQ>
}
 8002c96:	bf00      	nop
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b082      	sub	sp, #8
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f7ff ffa2 	bl	8002bf0 <SysTick_Config>
 8002cac:	4603      	mov	r3, r0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
	...

08002cb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b089      	sub	sp, #36	; 0x24
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cce:	2300      	movs	r3, #0
 8002cd0:	61fb      	str	r3, [r7, #28]
 8002cd2:	e159      	b.n	8002f88 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cdc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	697a      	ldr	r2, [r7, #20]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	f040 8148 	bne.w	8002f82 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f003 0303 	and.w	r3, r3, #3
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d005      	beq.n	8002d0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d130      	bne.n	8002d6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	2203      	movs	r2, #3
 8002d16:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1a:	43db      	mvns	r3, r3
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	68da      	ldr	r2, [r3, #12]
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	69ba      	ldr	r2, [r7, #24]
 8002d38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d40:	2201      	movs	r2, #1
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	091b      	lsrs	r3, r3, #4
 8002d56:	f003 0201 	and.w	r2, r3, #1
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f003 0303 	and.w	r3, r3, #3
 8002d74:	2b03      	cmp	r3, #3
 8002d76:	d017      	beq.n	8002da8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	2203      	movs	r2, #3
 8002d84:	fa02 f303 	lsl.w	r3, r2, r3
 8002d88:	43db      	mvns	r3, r3
 8002d8a:	69ba      	ldr	r2, [r7, #24]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	689a      	ldr	r2, [r3, #8]
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9c:	69ba      	ldr	r2, [r7, #24]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f003 0303 	and.w	r3, r3, #3
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d123      	bne.n	8002dfc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	08da      	lsrs	r2, r3, #3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	3208      	adds	r2, #8
 8002dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	f003 0307 	and.w	r3, r3, #7
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	220f      	movs	r2, #15
 8002dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd0:	43db      	mvns	r3, r3
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	691a      	ldr	r2, [r3, #16]
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	f003 0307 	and.w	r3, r3, #7
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	08da      	lsrs	r2, r3, #3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	3208      	adds	r2, #8
 8002df6:	69b9      	ldr	r1, [r7, #24]
 8002df8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	2203      	movs	r2, #3
 8002e08:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	4013      	ands	r3, r2
 8002e12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f003 0203 	and.w	r2, r3, #3
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	005b      	lsls	r3, r3, #1
 8002e20:	fa02 f303 	lsl.w	r3, r2, r3
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	f000 80a2 	beq.w	8002f82 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e3e:	2300      	movs	r3, #0
 8002e40:	60fb      	str	r3, [r7, #12]
 8002e42:	4b57      	ldr	r3, [pc, #348]	; (8002fa0 <HAL_GPIO_Init+0x2e8>)
 8002e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e46:	4a56      	ldr	r2, [pc, #344]	; (8002fa0 <HAL_GPIO_Init+0x2e8>)
 8002e48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e4c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e4e:	4b54      	ldr	r3, [pc, #336]	; (8002fa0 <HAL_GPIO_Init+0x2e8>)
 8002e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e56:	60fb      	str	r3, [r7, #12]
 8002e58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e5a:	4a52      	ldr	r2, [pc, #328]	; (8002fa4 <HAL_GPIO_Init+0x2ec>)
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	089b      	lsrs	r3, r3, #2
 8002e60:	3302      	adds	r3, #2
 8002e62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	f003 0303 	and.w	r3, r3, #3
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	220f      	movs	r2, #15
 8002e72:	fa02 f303 	lsl.w	r3, r2, r3
 8002e76:	43db      	mvns	r3, r3
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a49      	ldr	r2, [pc, #292]	; (8002fa8 <HAL_GPIO_Init+0x2f0>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d019      	beq.n	8002eba <HAL_GPIO_Init+0x202>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a48      	ldr	r2, [pc, #288]	; (8002fac <HAL_GPIO_Init+0x2f4>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d013      	beq.n	8002eb6 <HAL_GPIO_Init+0x1fe>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a47      	ldr	r2, [pc, #284]	; (8002fb0 <HAL_GPIO_Init+0x2f8>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d00d      	beq.n	8002eb2 <HAL_GPIO_Init+0x1fa>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a46      	ldr	r2, [pc, #280]	; (8002fb4 <HAL_GPIO_Init+0x2fc>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d007      	beq.n	8002eae <HAL_GPIO_Init+0x1f6>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a45      	ldr	r2, [pc, #276]	; (8002fb8 <HAL_GPIO_Init+0x300>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d101      	bne.n	8002eaa <HAL_GPIO_Init+0x1f2>
 8002ea6:	2304      	movs	r3, #4
 8002ea8:	e008      	b.n	8002ebc <HAL_GPIO_Init+0x204>
 8002eaa:	2307      	movs	r3, #7
 8002eac:	e006      	b.n	8002ebc <HAL_GPIO_Init+0x204>
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e004      	b.n	8002ebc <HAL_GPIO_Init+0x204>
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	e002      	b.n	8002ebc <HAL_GPIO_Init+0x204>
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e000      	b.n	8002ebc <HAL_GPIO_Init+0x204>
 8002eba:	2300      	movs	r3, #0
 8002ebc:	69fa      	ldr	r2, [r7, #28]
 8002ebe:	f002 0203 	and.w	r2, r2, #3
 8002ec2:	0092      	lsls	r2, r2, #2
 8002ec4:	4093      	lsls	r3, r2
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ecc:	4935      	ldr	r1, [pc, #212]	; (8002fa4 <HAL_GPIO_Init+0x2ec>)
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	089b      	lsrs	r3, r3, #2
 8002ed2:	3302      	adds	r3, #2
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002eda:	4b38      	ldr	r3, [pc, #224]	; (8002fbc <HAL_GPIO_Init+0x304>)
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	43db      	mvns	r3, r3
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d003      	beq.n	8002efe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002efe:	4a2f      	ldr	r2, [pc, #188]	; (8002fbc <HAL_GPIO_Init+0x304>)
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f04:	4b2d      	ldr	r3, [pc, #180]	; (8002fbc <HAL_GPIO_Init+0x304>)
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	43db      	mvns	r3, r3
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	4013      	ands	r3, r2
 8002f12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d003      	beq.n	8002f28 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002f20:	69ba      	ldr	r2, [r7, #24]
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f28:	4a24      	ldr	r2, [pc, #144]	; (8002fbc <HAL_GPIO_Init+0x304>)
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f2e:	4b23      	ldr	r3, [pc, #140]	; (8002fbc <HAL_GPIO_Init+0x304>)
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	43db      	mvns	r3, r3
 8002f38:	69ba      	ldr	r2, [r7, #24]
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d003      	beq.n	8002f52 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002f4a:	69ba      	ldr	r2, [r7, #24]
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f52:	4a1a      	ldr	r2, [pc, #104]	; (8002fbc <HAL_GPIO_Init+0x304>)
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f58:	4b18      	ldr	r3, [pc, #96]	; (8002fbc <HAL_GPIO_Init+0x304>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	43db      	mvns	r3, r3
 8002f62:	69ba      	ldr	r2, [r7, #24]
 8002f64:	4013      	ands	r3, r2
 8002f66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d003      	beq.n	8002f7c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002f74:	69ba      	ldr	r2, [r7, #24]
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f7c:	4a0f      	ldr	r2, [pc, #60]	; (8002fbc <HAL_GPIO_Init+0x304>)
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	3301      	adds	r3, #1
 8002f86:	61fb      	str	r3, [r7, #28]
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	2b0f      	cmp	r3, #15
 8002f8c:	f67f aea2 	bls.w	8002cd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f90:	bf00      	nop
 8002f92:	bf00      	nop
 8002f94:	3724      	adds	r7, #36	; 0x24
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	40023800 	.word	0x40023800
 8002fa4:	40013800 	.word	0x40013800
 8002fa8:	40020000 	.word	0x40020000
 8002fac:	40020400 	.word	0x40020400
 8002fb0:	40020800 	.word	0x40020800
 8002fb4:	40020c00 	.word	0x40020c00
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	40013c00 	.word	0x40013c00

08002fc0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	460b      	mov	r3, r1
 8002fca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	691a      	ldr	r2, [r3, #16]
 8002fd0:	887b      	ldrh	r3, [r7, #2]
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d002      	beq.n	8002fde <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	73fb      	strb	r3, [r7, #15]
 8002fdc:	e001      	b.n	8002fe2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3714      	adds	r7, #20
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	807b      	strh	r3, [r7, #2]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003000:	787b      	ldrb	r3, [r7, #1]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d003      	beq.n	800300e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003006:	887a      	ldrh	r2, [r7, #2]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800300c:	e003      	b.n	8003016 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800300e:	887b      	ldrh	r3, [r7, #2]
 8003010:	041a      	lsls	r2, r3, #16
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	619a      	str	r2, [r3, #24]
}
 8003016:	bf00      	nop
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr

08003022 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003022:	b480      	push	{r7}
 8003024:	b085      	sub	sp, #20
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
 800302a:	460b      	mov	r3, r1
 800302c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003034:	887a      	ldrh	r2, [r7, #2]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	4013      	ands	r3, r2
 800303a:	041a      	lsls	r2, r3, #16
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	43d9      	mvns	r1, r3
 8003040:	887b      	ldrh	r3, [r7, #2]
 8003042:	400b      	ands	r3, r1
 8003044:	431a      	orrs	r2, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	619a      	str	r2, [r3, #24]
}
 800304a:	bf00      	nop
 800304c:	3714      	adds	r7, #20
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
	...

08003058 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b086      	sub	sp, #24
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d101      	bne.n	800306a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e267      	b.n	800353a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	2b00      	cmp	r3, #0
 8003074:	d075      	beq.n	8003162 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003076:	4b88      	ldr	r3, [pc, #544]	; (8003298 <HAL_RCC_OscConfig+0x240>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f003 030c 	and.w	r3, r3, #12
 800307e:	2b04      	cmp	r3, #4
 8003080:	d00c      	beq.n	800309c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003082:	4b85      	ldr	r3, [pc, #532]	; (8003298 <HAL_RCC_OscConfig+0x240>)
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800308a:	2b08      	cmp	r3, #8
 800308c:	d112      	bne.n	80030b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800308e:	4b82      	ldr	r3, [pc, #520]	; (8003298 <HAL_RCC_OscConfig+0x240>)
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003096:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800309a:	d10b      	bne.n	80030b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800309c:	4b7e      	ldr	r3, [pc, #504]	; (8003298 <HAL_RCC_OscConfig+0x240>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d05b      	beq.n	8003160 <HAL_RCC_OscConfig+0x108>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d157      	bne.n	8003160 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e242      	b.n	800353a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030bc:	d106      	bne.n	80030cc <HAL_RCC_OscConfig+0x74>
 80030be:	4b76      	ldr	r3, [pc, #472]	; (8003298 <HAL_RCC_OscConfig+0x240>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a75      	ldr	r2, [pc, #468]	; (8003298 <HAL_RCC_OscConfig+0x240>)
 80030c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030c8:	6013      	str	r3, [r2, #0]
 80030ca:	e01d      	b.n	8003108 <HAL_RCC_OscConfig+0xb0>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030d4:	d10c      	bne.n	80030f0 <HAL_RCC_OscConfig+0x98>
 80030d6:	4b70      	ldr	r3, [pc, #448]	; (8003298 <HAL_RCC_OscConfig+0x240>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a6f      	ldr	r2, [pc, #444]	; (8003298 <HAL_RCC_OscConfig+0x240>)
 80030dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030e0:	6013      	str	r3, [r2, #0]
 80030e2:	4b6d      	ldr	r3, [pc, #436]	; (8003298 <HAL_RCC_OscConfig+0x240>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a6c      	ldr	r2, [pc, #432]	; (8003298 <HAL_RCC_OscConfig+0x240>)
 80030e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030ec:	6013      	str	r3, [r2, #0]
 80030ee:	e00b      	b.n	8003108 <HAL_RCC_OscConfig+0xb0>
 80030f0:	4b69      	ldr	r3, [pc, #420]	; (8003298 <HAL_RCC_OscConfig+0x240>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a68      	ldr	r2, [pc, #416]	; (8003298 <HAL_RCC_OscConfig+0x240>)
 80030f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030fa:	6013      	str	r3, [r2, #0]
 80030fc:	4b66      	ldr	r3, [pc, #408]	; (8003298 <HAL_RCC_OscConfig+0x240>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a65      	ldr	r2, [pc, #404]	; (8003298 <HAL_RCC_OscConfig+0x240>)
 8003102:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003106:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d013      	beq.n	8003138 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003110:	f7ff f8d2 	bl	80022b8 <HAL_GetTick>
 8003114:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003116:	e008      	b.n	800312a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003118:	f7ff f8ce 	bl	80022b8 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b64      	cmp	r3, #100	; 0x64
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e207      	b.n	800353a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800312a:	4b5b      	ldr	r3, [pc, #364]	; (8003298 <HAL_RCC_OscConfig+0x240>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d0f0      	beq.n	8003118 <HAL_RCC_OscConfig+0xc0>
 8003136:	e014      	b.n	8003162 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003138:	f7ff f8be 	bl	80022b8 <HAL_GetTick>
 800313c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800313e:	e008      	b.n	8003152 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003140:	f7ff f8ba 	bl	80022b8 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b64      	cmp	r3, #100	; 0x64
 800314c:	d901      	bls.n	8003152 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e1f3      	b.n	800353a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003152:	4b51      	ldr	r3, [pc, #324]	; (8003298 <HAL_RCC_OscConfig+0x240>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1f0      	bne.n	8003140 <HAL_RCC_OscConfig+0xe8>
 800315e:	e000      	b.n	8003162 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003160:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d063      	beq.n	8003236 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800316e:	4b4a      	ldr	r3, [pc, #296]	; (8003298 <HAL_RCC_OscConfig+0x240>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f003 030c 	and.w	r3, r3, #12
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00b      	beq.n	8003192 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800317a:	4b47      	ldr	r3, [pc, #284]	; (8003298 <HAL_RCC_OscConfig+0x240>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003182:	2b08      	cmp	r3, #8
 8003184:	d11c      	bne.n	80031c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003186:	4b44      	ldr	r3, [pc, #272]	; (8003298 <HAL_RCC_OscConfig+0x240>)
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d116      	bne.n	80031c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003192:	4b41      	ldr	r3, [pc, #260]	; (8003298 <HAL_RCC_OscConfig+0x240>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d005      	beq.n	80031aa <HAL_RCC_OscConfig+0x152>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d001      	beq.n	80031aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e1c7      	b.n	800353a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031aa:	4b3b      	ldr	r3, [pc, #236]	; (8003298 <HAL_RCC_OscConfig+0x240>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	00db      	lsls	r3, r3, #3
 80031b8:	4937      	ldr	r1, [pc, #220]	; (8003298 <HAL_RCC_OscConfig+0x240>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031be:	e03a      	b.n	8003236 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d020      	beq.n	800320a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031c8:	4b34      	ldr	r3, [pc, #208]	; (800329c <HAL_RCC_OscConfig+0x244>)
 80031ca:	2201      	movs	r2, #1
 80031cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ce:	f7ff f873 	bl	80022b8 <HAL_GetTick>
 80031d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031d4:	e008      	b.n	80031e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031d6:	f7ff f86f 	bl	80022b8 <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d901      	bls.n	80031e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	e1a8      	b.n	800353a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031e8:	4b2b      	ldr	r3, [pc, #172]	; (8003298 <HAL_RCC_OscConfig+0x240>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d0f0      	beq.n	80031d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031f4:	4b28      	ldr	r3, [pc, #160]	; (8003298 <HAL_RCC_OscConfig+0x240>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	691b      	ldr	r3, [r3, #16]
 8003200:	00db      	lsls	r3, r3, #3
 8003202:	4925      	ldr	r1, [pc, #148]	; (8003298 <HAL_RCC_OscConfig+0x240>)
 8003204:	4313      	orrs	r3, r2
 8003206:	600b      	str	r3, [r1, #0]
 8003208:	e015      	b.n	8003236 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800320a:	4b24      	ldr	r3, [pc, #144]	; (800329c <HAL_RCC_OscConfig+0x244>)
 800320c:	2200      	movs	r2, #0
 800320e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003210:	f7ff f852 	bl	80022b8 <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003216:	e008      	b.n	800322a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003218:	f7ff f84e 	bl	80022b8 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b02      	cmp	r3, #2
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e187      	b.n	800353a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800322a:	4b1b      	ldr	r3, [pc, #108]	; (8003298 <HAL_RCC_OscConfig+0x240>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1f0      	bne.n	8003218 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0308 	and.w	r3, r3, #8
 800323e:	2b00      	cmp	r3, #0
 8003240:	d036      	beq.n	80032b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d016      	beq.n	8003278 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800324a:	4b15      	ldr	r3, [pc, #84]	; (80032a0 <HAL_RCC_OscConfig+0x248>)
 800324c:	2201      	movs	r2, #1
 800324e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003250:	f7ff f832 	bl	80022b8 <HAL_GetTick>
 8003254:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003256:	e008      	b.n	800326a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003258:	f7ff f82e 	bl	80022b8 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	d901      	bls.n	800326a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e167      	b.n	800353a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800326a:	4b0b      	ldr	r3, [pc, #44]	; (8003298 <HAL_RCC_OscConfig+0x240>)
 800326c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d0f0      	beq.n	8003258 <HAL_RCC_OscConfig+0x200>
 8003276:	e01b      	b.n	80032b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003278:	4b09      	ldr	r3, [pc, #36]	; (80032a0 <HAL_RCC_OscConfig+0x248>)
 800327a:	2200      	movs	r2, #0
 800327c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800327e:	f7ff f81b 	bl	80022b8 <HAL_GetTick>
 8003282:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003284:	e00e      	b.n	80032a4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003286:	f7ff f817 	bl	80022b8 <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	2b02      	cmp	r3, #2
 8003292:	d907      	bls.n	80032a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e150      	b.n	800353a <HAL_RCC_OscConfig+0x4e2>
 8003298:	40023800 	.word	0x40023800
 800329c:	42470000 	.word	0x42470000
 80032a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032a4:	4b88      	ldr	r3, [pc, #544]	; (80034c8 <HAL_RCC_OscConfig+0x470>)
 80032a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032a8:	f003 0302 	and.w	r3, r3, #2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d1ea      	bne.n	8003286 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0304 	and.w	r3, r3, #4
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	f000 8097 	beq.w	80033ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032be:	2300      	movs	r3, #0
 80032c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032c2:	4b81      	ldr	r3, [pc, #516]	; (80034c8 <HAL_RCC_OscConfig+0x470>)
 80032c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d10f      	bne.n	80032ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032ce:	2300      	movs	r3, #0
 80032d0:	60bb      	str	r3, [r7, #8]
 80032d2:	4b7d      	ldr	r3, [pc, #500]	; (80034c8 <HAL_RCC_OscConfig+0x470>)
 80032d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d6:	4a7c      	ldr	r2, [pc, #496]	; (80034c8 <HAL_RCC_OscConfig+0x470>)
 80032d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032dc:	6413      	str	r3, [r2, #64]	; 0x40
 80032de:	4b7a      	ldr	r3, [pc, #488]	; (80034c8 <HAL_RCC_OscConfig+0x470>)
 80032e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032e6:	60bb      	str	r3, [r7, #8]
 80032e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032ea:	2301      	movs	r3, #1
 80032ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ee:	4b77      	ldr	r3, [pc, #476]	; (80034cc <HAL_RCC_OscConfig+0x474>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d118      	bne.n	800332c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032fa:	4b74      	ldr	r3, [pc, #464]	; (80034cc <HAL_RCC_OscConfig+0x474>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a73      	ldr	r2, [pc, #460]	; (80034cc <HAL_RCC_OscConfig+0x474>)
 8003300:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003304:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003306:	f7fe ffd7 	bl	80022b8 <HAL_GetTick>
 800330a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800330c:	e008      	b.n	8003320 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800330e:	f7fe ffd3 	bl	80022b8 <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	2b02      	cmp	r3, #2
 800331a:	d901      	bls.n	8003320 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e10c      	b.n	800353a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003320:	4b6a      	ldr	r3, [pc, #424]	; (80034cc <HAL_RCC_OscConfig+0x474>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003328:	2b00      	cmp	r3, #0
 800332a:	d0f0      	beq.n	800330e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	2b01      	cmp	r3, #1
 8003332:	d106      	bne.n	8003342 <HAL_RCC_OscConfig+0x2ea>
 8003334:	4b64      	ldr	r3, [pc, #400]	; (80034c8 <HAL_RCC_OscConfig+0x470>)
 8003336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003338:	4a63      	ldr	r2, [pc, #396]	; (80034c8 <HAL_RCC_OscConfig+0x470>)
 800333a:	f043 0301 	orr.w	r3, r3, #1
 800333e:	6713      	str	r3, [r2, #112]	; 0x70
 8003340:	e01c      	b.n	800337c <HAL_RCC_OscConfig+0x324>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	2b05      	cmp	r3, #5
 8003348:	d10c      	bne.n	8003364 <HAL_RCC_OscConfig+0x30c>
 800334a:	4b5f      	ldr	r3, [pc, #380]	; (80034c8 <HAL_RCC_OscConfig+0x470>)
 800334c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800334e:	4a5e      	ldr	r2, [pc, #376]	; (80034c8 <HAL_RCC_OscConfig+0x470>)
 8003350:	f043 0304 	orr.w	r3, r3, #4
 8003354:	6713      	str	r3, [r2, #112]	; 0x70
 8003356:	4b5c      	ldr	r3, [pc, #368]	; (80034c8 <HAL_RCC_OscConfig+0x470>)
 8003358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800335a:	4a5b      	ldr	r2, [pc, #364]	; (80034c8 <HAL_RCC_OscConfig+0x470>)
 800335c:	f043 0301 	orr.w	r3, r3, #1
 8003360:	6713      	str	r3, [r2, #112]	; 0x70
 8003362:	e00b      	b.n	800337c <HAL_RCC_OscConfig+0x324>
 8003364:	4b58      	ldr	r3, [pc, #352]	; (80034c8 <HAL_RCC_OscConfig+0x470>)
 8003366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003368:	4a57      	ldr	r2, [pc, #348]	; (80034c8 <HAL_RCC_OscConfig+0x470>)
 800336a:	f023 0301 	bic.w	r3, r3, #1
 800336e:	6713      	str	r3, [r2, #112]	; 0x70
 8003370:	4b55      	ldr	r3, [pc, #340]	; (80034c8 <HAL_RCC_OscConfig+0x470>)
 8003372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003374:	4a54      	ldr	r2, [pc, #336]	; (80034c8 <HAL_RCC_OscConfig+0x470>)
 8003376:	f023 0304 	bic.w	r3, r3, #4
 800337a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d015      	beq.n	80033b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003384:	f7fe ff98 	bl	80022b8 <HAL_GetTick>
 8003388:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800338a:	e00a      	b.n	80033a2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800338c:	f7fe ff94 	bl	80022b8 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	f241 3288 	movw	r2, #5000	; 0x1388
 800339a:	4293      	cmp	r3, r2
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e0cb      	b.n	800353a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033a2:	4b49      	ldr	r3, [pc, #292]	; (80034c8 <HAL_RCC_OscConfig+0x470>)
 80033a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d0ee      	beq.n	800338c <HAL_RCC_OscConfig+0x334>
 80033ae:	e014      	b.n	80033da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033b0:	f7fe ff82 	bl	80022b8 <HAL_GetTick>
 80033b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033b6:	e00a      	b.n	80033ce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033b8:	f7fe ff7e 	bl	80022b8 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e0b5      	b.n	800353a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033ce:	4b3e      	ldr	r3, [pc, #248]	; (80034c8 <HAL_RCC_OscConfig+0x470>)
 80033d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1ee      	bne.n	80033b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033da:	7dfb      	ldrb	r3, [r7, #23]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d105      	bne.n	80033ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033e0:	4b39      	ldr	r3, [pc, #228]	; (80034c8 <HAL_RCC_OscConfig+0x470>)
 80033e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e4:	4a38      	ldr	r2, [pc, #224]	; (80034c8 <HAL_RCC_OscConfig+0x470>)
 80033e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f000 80a1 	beq.w	8003538 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033f6:	4b34      	ldr	r3, [pc, #208]	; (80034c8 <HAL_RCC_OscConfig+0x470>)
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f003 030c 	and.w	r3, r3, #12
 80033fe:	2b08      	cmp	r3, #8
 8003400:	d05c      	beq.n	80034bc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	699b      	ldr	r3, [r3, #24]
 8003406:	2b02      	cmp	r3, #2
 8003408:	d141      	bne.n	800348e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800340a:	4b31      	ldr	r3, [pc, #196]	; (80034d0 <HAL_RCC_OscConfig+0x478>)
 800340c:	2200      	movs	r2, #0
 800340e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003410:	f7fe ff52 	bl	80022b8 <HAL_GetTick>
 8003414:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003416:	e008      	b.n	800342a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003418:	f7fe ff4e 	bl	80022b8 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	2b02      	cmp	r3, #2
 8003424:	d901      	bls.n	800342a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e087      	b.n	800353a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800342a:	4b27      	ldr	r3, [pc, #156]	; (80034c8 <HAL_RCC_OscConfig+0x470>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1f0      	bne.n	8003418 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	69da      	ldr	r2, [r3, #28]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a1b      	ldr	r3, [r3, #32]
 800343e:	431a      	orrs	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003444:	019b      	lsls	r3, r3, #6
 8003446:	431a      	orrs	r2, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800344c:	085b      	lsrs	r3, r3, #1
 800344e:	3b01      	subs	r3, #1
 8003450:	041b      	lsls	r3, r3, #16
 8003452:	431a      	orrs	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003458:	061b      	lsls	r3, r3, #24
 800345a:	491b      	ldr	r1, [pc, #108]	; (80034c8 <HAL_RCC_OscConfig+0x470>)
 800345c:	4313      	orrs	r3, r2
 800345e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003460:	4b1b      	ldr	r3, [pc, #108]	; (80034d0 <HAL_RCC_OscConfig+0x478>)
 8003462:	2201      	movs	r2, #1
 8003464:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003466:	f7fe ff27 	bl	80022b8 <HAL_GetTick>
 800346a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800346c:	e008      	b.n	8003480 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800346e:	f7fe ff23 	bl	80022b8 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	2b02      	cmp	r3, #2
 800347a:	d901      	bls.n	8003480 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e05c      	b.n	800353a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003480:	4b11      	ldr	r3, [pc, #68]	; (80034c8 <HAL_RCC_OscConfig+0x470>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d0f0      	beq.n	800346e <HAL_RCC_OscConfig+0x416>
 800348c:	e054      	b.n	8003538 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800348e:	4b10      	ldr	r3, [pc, #64]	; (80034d0 <HAL_RCC_OscConfig+0x478>)
 8003490:	2200      	movs	r2, #0
 8003492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003494:	f7fe ff10 	bl	80022b8 <HAL_GetTick>
 8003498:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800349a:	e008      	b.n	80034ae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800349c:	f7fe ff0c 	bl	80022b8 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e045      	b.n	800353a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ae:	4b06      	ldr	r3, [pc, #24]	; (80034c8 <HAL_RCC_OscConfig+0x470>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1f0      	bne.n	800349c <HAL_RCC_OscConfig+0x444>
 80034ba:	e03d      	b.n	8003538 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	699b      	ldr	r3, [r3, #24]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d107      	bne.n	80034d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e038      	b.n	800353a <HAL_RCC_OscConfig+0x4e2>
 80034c8:	40023800 	.word	0x40023800
 80034cc:	40007000 	.word	0x40007000
 80034d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034d4:	4b1b      	ldr	r3, [pc, #108]	; (8003544 <HAL_RCC_OscConfig+0x4ec>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d028      	beq.n	8003534 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d121      	bne.n	8003534 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d11a      	bne.n	8003534 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034fe:	68fa      	ldr	r2, [r7, #12]
 8003500:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003504:	4013      	ands	r3, r2
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800350a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800350c:	4293      	cmp	r3, r2
 800350e:	d111      	bne.n	8003534 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800351a:	085b      	lsrs	r3, r3, #1
 800351c:	3b01      	subs	r3, #1
 800351e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003520:	429a      	cmp	r2, r3
 8003522:	d107      	bne.n	8003534 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003530:	429a      	cmp	r2, r3
 8003532:	d001      	beq.n	8003538 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e000      	b.n	800353a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3718      	adds	r7, #24
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	40023800 	.word	0x40023800

08003548 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d101      	bne.n	800355c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e0cc      	b.n	80036f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800355c:	4b68      	ldr	r3, [pc, #416]	; (8003700 <HAL_RCC_ClockConfig+0x1b8>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0307 	and.w	r3, r3, #7
 8003564:	683a      	ldr	r2, [r7, #0]
 8003566:	429a      	cmp	r2, r3
 8003568:	d90c      	bls.n	8003584 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800356a:	4b65      	ldr	r3, [pc, #404]	; (8003700 <HAL_RCC_ClockConfig+0x1b8>)
 800356c:	683a      	ldr	r2, [r7, #0]
 800356e:	b2d2      	uxtb	r2, r2
 8003570:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003572:	4b63      	ldr	r3, [pc, #396]	; (8003700 <HAL_RCC_ClockConfig+0x1b8>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0307 	and.w	r3, r3, #7
 800357a:	683a      	ldr	r2, [r7, #0]
 800357c:	429a      	cmp	r2, r3
 800357e:	d001      	beq.n	8003584 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e0b8      	b.n	80036f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0302 	and.w	r3, r3, #2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d020      	beq.n	80035d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0304 	and.w	r3, r3, #4
 8003598:	2b00      	cmp	r3, #0
 800359a:	d005      	beq.n	80035a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800359c:	4b59      	ldr	r3, [pc, #356]	; (8003704 <HAL_RCC_ClockConfig+0x1bc>)
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	4a58      	ldr	r2, [pc, #352]	; (8003704 <HAL_RCC_ClockConfig+0x1bc>)
 80035a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80035a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0308 	and.w	r3, r3, #8
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d005      	beq.n	80035c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035b4:	4b53      	ldr	r3, [pc, #332]	; (8003704 <HAL_RCC_ClockConfig+0x1bc>)
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	4a52      	ldr	r2, [pc, #328]	; (8003704 <HAL_RCC_ClockConfig+0x1bc>)
 80035ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80035be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035c0:	4b50      	ldr	r3, [pc, #320]	; (8003704 <HAL_RCC_ClockConfig+0x1bc>)
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	494d      	ldr	r1, [pc, #308]	; (8003704 <HAL_RCC_ClockConfig+0x1bc>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d044      	beq.n	8003668 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d107      	bne.n	80035f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035e6:	4b47      	ldr	r3, [pc, #284]	; (8003704 <HAL_RCC_ClockConfig+0x1bc>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d119      	bne.n	8003626 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e07f      	b.n	80036f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d003      	beq.n	8003606 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003602:	2b03      	cmp	r3, #3
 8003604:	d107      	bne.n	8003616 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003606:	4b3f      	ldr	r3, [pc, #252]	; (8003704 <HAL_RCC_ClockConfig+0x1bc>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d109      	bne.n	8003626 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e06f      	b.n	80036f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003616:	4b3b      	ldr	r3, [pc, #236]	; (8003704 <HAL_RCC_ClockConfig+0x1bc>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b00      	cmp	r3, #0
 8003620:	d101      	bne.n	8003626 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e067      	b.n	80036f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003626:	4b37      	ldr	r3, [pc, #220]	; (8003704 <HAL_RCC_ClockConfig+0x1bc>)
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f023 0203 	bic.w	r2, r3, #3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	4934      	ldr	r1, [pc, #208]	; (8003704 <HAL_RCC_ClockConfig+0x1bc>)
 8003634:	4313      	orrs	r3, r2
 8003636:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003638:	f7fe fe3e 	bl	80022b8 <HAL_GetTick>
 800363c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800363e:	e00a      	b.n	8003656 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003640:	f7fe fe3a 	bl	80022b8 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	f241 3288 	movw	r2, #5000	; 0x1388
 800364e:	4293      	cmp	r3, r2
 8003650:	d901      	bls.n	8003656 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e04f      	b.n	80036f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003656:	4b2b      	ldr	r3, [pc, #172]	; (8003704 <HAL_RCC_ClockConfig+0x1bc>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f003 020c 	and.w	r2, r3, #12
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	429a      	cmp	r2, r3
 8003666:	d1eb      	bne.n	8003640 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003668:	4b25      	ldr	r3, [pc, #148]	; (8003700 <HAL_RCC_ClockConfig+0x1b8>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0307 	and.w	r3, r3, #7
 8003670:	683a      	ldr	r2, [r7, #0]
 8003672:	429a      	cmp	r2, r3
 8003674:	d20c      	bcs.n	8003690 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003676:	4b22      	ldr	r3, [pc, #136]	; (8003700 <HAL_RCC_ClockConfig+0x1b8>)
 8003678:	683a      	ldr	r2, [r7, #0]
 800367a:	b2d2      	uxtb	r2, r2
 800367c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800367e:	4b20      	ldr	r3, [pc, #128]	; (8003700 <HAL_RCC_ClockConfig+0x1b8>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0307 	and.w	r3, r3, #7
 8003686:	683a      	ldr	r2, [r7, #0]
 8003688:	429a      	cmp	r2, r3
 800368a:	d001      	beq.n	8003690 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e032      	b.n	80036f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0304 	and.w	r3, r3, #4
 8003698:	2b00      	cmp	r3, #0
 800369a:	d008      	beq.n	80036ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800369c:	4b19      	ldr	r3, [pc, #100]	; (8003704 <HAL_RCC_ClockConfig+0x1bc>)
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	4916      	ldr	r1, [pc, #88]	; (8003704 <HAL_RCC_ClockConfig+0x1bc>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0308 	and.w	r3, r3, #8
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d009      	beq.n	80036ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036ba:	4b12      	ldr	r3, [pc, #72]	; (8003704 <HAL_RCC_ClockConfig+0x1bc>)
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	00db      	lsls	r3, r3, #3
 80036c8:	490e      	ldr	r1, [pc, #56]	; (8003704 <HAL_RCC_ClockConfig+0x1bc>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80036ce:	f000 f821 	bl	8003714 <HAL_RCC_GetSysClockFreq>
 80036d2:	4602      	mov	r2, r0
 80036d4:	4b0b      	ldr	r3, [pc, #44]	; (8003704 <HAL_RCC_ClockConfig+0x1bc>)
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	091b      	lsrs	r3, r3, #4
 80036da:	f003 030f 	and.w	r3, r3, #15
 80036de:	490a      	ldr	r1, [pc, #40]	; (8003708 <HAL_RCC_ClockConfig+0x1c0>)
 80036e0:	5ccb      	ldrb	r3, [r1, r3]
 80036e2:	fa22 f303 	lsr.w	r3, r2, r3
 80036e6:	4a09      	ldr	r2, [pc, #36]	; (800370c <HAL_RCC_ClockConfig+0x1c4>)
 80036e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80036ea:	4b09      	ldr	r3, [pc, #36]	; (8003710 <HAL_RCC_ClockConfig+0x1c8>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4618      	mov	r0, r3
 80036f0:	f7fe fd9e 	bl	8002230 <HAL_InitTick>

  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3710      	adds	r7, #16
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	40023c00 	.word	0x40023c00
 8003704:	40023800 	.word	0x40023800
 8003708:	0800b71c 	.word	0x0800b71c
 800370c:	20000010 	.word	0x20000010
 8003710:	20000014 	.word	0x20000014

08003714 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003714:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003718:	b090      	sub	sp, #64	; 0x40
 800371a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800371c:	2300      	movs	r3, #0
 800371e:	637b      	str	r3, [r7, #52]	; 0x34
 8003720:	2300      	movs	r3, #0
 8003722:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003724:	2300      	movs	r3, #0
 8003726:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003728:	2300      	movs	r3, #0
 800372a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800372c:	4b59      	ldr	r3, [pc, #356]	; (8003894 <HAL_RCC_GetSysClockFreq+0x180>)
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f003 030c 	and.w	r3, r3, #12
 8003734:	2b08      	cmp	r3, #8
 8003736:	d00d      	beq.n	8003754 <HAL_RCC_GetSysClockFreq+0x40>
 8003738:	2b08      	cmp	r3, #8
 800373a:	f200 80a1 	bhi.w	8003880 <HAL_RCC_GetSysClockFreq+0x16c>
 800373e:	2b00      	cmp	r3, #0
 8003740:	d002      	beq.n	8003748 <HAL_RCC_GetSysClockFreq+0x34>
 8003742:	2b04      	cmp	r3, #4
 8003744:	d003      	beq.n	800374e <HAL_RCC_GetSysClockFreq+0x3a>
 8003746:	e09b      	b.n	8003880 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003748:	4b53      	ldr	r3, [pc, #332]	; (8003898 <HAL_RCC_GetSysClockFreq+0x184>)
 800374a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800374c:	e09b      	b.n	8003886 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800374e:	4b53      	ldr	r3, [pc, #332]	; (800389c <HAL_RCC_GetSysClockFreq+0x188>)
 8003750:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003752:	e098      	b.n	8003886 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003754:	4b4f      	ldr	r3, [pc, #316]	; (8003894 <HAL_RCC_GetSysClockFreq+0x180>)
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800375c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800375e:	4b4d      	ldr	r3, [pc, #308]	; (8003894 <HAL_RCC_GetSysClockFreq+0x180>)
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d028      	beq.n	80037bc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800376a:	4b4a      	ldr	r3, [pc, #296]	; (8003894 <HAL_RCC_GetSysClockFreq+0x180>)
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	099b      	lsrs	r3, r3, #6
 8003770:	2200      	movs	r2, #0
 8003772:	623b      	str	r3, [r7, #32]
 8003774:	627a      	str	r2, [r7, #36]	; 0x24
 8003776:	6a3b      	ldr	r3, [r7, #32]
 8003778:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800377c:	2100      	movs	r1, #0
 800377e:	4b47      	ldr	r3, [pc, #284]	; (800389c <HAL_RCC_GetSysClockFreq+0x188>)
 8003780:	fb03 f201 	mul.w	r2, r3, r1
 8003784:	2300      	movs	r3, #0
 8003786:	fb00 f303 	mul.w	r3, r0, r3
 800378a:	4413      	add	r3, r2
 800378c:	4a43      	ldr	r2, [pc, #268]	; (800389c <HAL_RCC_GetSysClockFreq+0x188>)
 800378e:	fba0 1202 	umull	r1, r2, r0, r2
 8003792:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003794:	460a      	mov	r2, r1
 8003796:	62ba      	str	r2, [r7, #40]	; 0x28
 8003798:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800379a:	4413      	add	r3, r2
 800379c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800379e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037a0:	2200      	movs	r2, #0
 80037a2:	61bb      	str	r3, [r7, #24]
 80037a4:	61fa      	str	r2, [r7, #28]
 80037a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037aa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80037ae:	f7fd fa53 	bl	8000c58 <__aeabi_uldivmod>
 80037b2:	4602      	mov	r2, r0
 80037b4:	460b      	mov	r3, r1
 80037b6:	4613      	mov	r3, r2
 80037b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037ba:	e053      	b.n	8003864 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037bc:	4b35      	ldr	r3, [pc, #212]	; (8003894 <HAL_RCC_GetSysClockFreq+0x180>)
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	099b      	lsrs	r3, r3, #6
 80037c2:	2200      	movs	r2, #0
 80037c4:	613b      	str	r3, [r7, #16]
 80037c6:	617a      	str	r2, [r7, #20]
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80037ce:	f04f 0b00 	mov.w	fp, #0
 80037d2:	4652      	mov	r2, sl
 80037d4:	465b      	mov	r3, fp
 80037d6:	f04f 0000 	mov.w	r0, #0
 80037da:	f04f 0100 	mov.w	r1, #0
 80037de:	0159      	lsls	r1, r3, #5
 80037e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037e4:	0150      	lsls	r0, r2, #5
 80037e6:	4602      	mov	r2, r0
 80037e8:	460b      	mov	r3, r1
 80037ea:	ebb2 080a 	subs.w	r8, r2, sl
 80037ee:	eb63 090b 	sbc.w	r9, r3, fp
 80037f2:	f04f 0200 	mov.w	r2, #0
 80037f6:	f04f 0300 	mov.w	r3, #0
 80037fa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80037fe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003802:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003806:	ebb2 0408 	subs.w	r4, r2, r8
 800380a:	eb63 0509 	sbc.w	r5, r3, r9
 800380e:	f04f 0200 	mov.w	r2, #0
 8003812:	f04f 0300 	mov.w	r3, #0
 8003816:	00eb      	lsls	r3, r5, #3
 8003818:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800381c:	00e2      	lsls	r2, r4, #3
 800381e:	4614      	mov	r4, r2
 8003820:	461d      	mov	r5, r3
 8003822:	eb14 030a 	adds.w	r3, r4, sl
 8003826:	603b      	str	r3, [r7, #0]
 8003828:	eb45 030b 	adc.w	r3, r5, fp
 800382c:	607b      	str	r3, [r7, #4]
 800382e:	f04f 0200 	mov.w	r2, #0
 8003832:	f04f 0300 	mov.w	r3, #0
 8003836:	e9d7 4500 	ldrd	r4, r5, [r7]
 800383a:	4629      	mov	r1, r5
 800383c:	028b      	lsls	r3, r1, #10
 800383e:	4621      	mov	r1, r4
 8003840:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003844:	4621      	mov	r1, r4
 8003846:	028a      	lsls	r2, r1, #10
 8003848:	4610      	mov	r0, r2
 800384a:	4619      	mov	r1, r3
 800384c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800384e:	2200      	movs	r2, #0
 8003850:	60bb      	str	r3, [r7, #8]
 8003852:	60fa      	str	r2, [r7, #12]
 8003854:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003858:	f7fd f9fe 	bl	8000c58 <__aeabi_uldivmod>
 800385c:	4602      	mov	r2, r0
 800385e:	460b      	mov	r3, r1
 8003860:	4613      	mov	r3, r2
 8003862:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003864:	4b0b      	ldr	r3, [pc, #44]	; (8003894 <HAL_RCC_GetSysClockFreq+0x180>)
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	0c1b      	lsrs	r3, r3, #16
 800386a:	f003 0303 	and.w	r3, r3, #3
 800386e:	3301      	adds	r3, #1
 8003870:	005b      	lsls	r3, r3, #1
 8003872:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003874:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003878:	fbb2 f3f3 	udiv	r3, r2, r3
 800387c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800387e:	e002      	b.n	8003886 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003880:	4b05      	ldr	r3, [pc, #20]	; (8003898 <HAL_RCC_GetSysClockFreq+0x184>)
 8003882:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003884:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003888:	4618      	mov	r0, r3
 800388a:	3740      	adds	r7, #64	; 0x40
 800388c:	46bd      	mov	sp, r7
 800388e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003892:	bf00      	nop
 8003894:	40023800 	.word	0x40023800
 8003898:	00f42400 	.word	0x00f42400
 800389c:	017d7840 	.word	0x017d7840

080038a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038a0:	b480      	push	{r7}
 80038a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038a4:	4b03      	ldr	r3, [pc, #12]	; (80038b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80038a6:	681b      	ldr	r3, [r3, #0]
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	20000010 	.word	0x20000010

080038b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80038bc:	f7ff fff0 	bl	80038a0 <HAL_RCC_GetHCLKFreq>
 80038c0:	4602      	mov	r2, r0
 80038c2:	4b05      	ldr	r3, [pc, #20]	; (80038d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	0a9b      	lsrs	r3, r3, #10
 80038c8:	f003 0307 	and.w	r3, r3, #7
 80038cc:	4903      	ldr	r1, [pc, #12]	; (80038dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80038ce:	5ccb      	ldrb	r3, [r1, r3]
 80038d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	40023800 	.word	0x40023800
 80038dc:	0800b72c 	.word	0x0800b72c

080038e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80038e4:	f7ff ffdc 	bl	80038a0 <HAL_RCC_GetHCLKFreq>
 80038e8:	4602      	mov	r2, r0
 80038ea:	4b05      	ldr	r3, [pc, #20]	; (8003900 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	0b5b      	lsrs	r3, r3, #13
 80038f0:	f003 0307 	and.w	r3, r3, #7
 80038f4:	4903      	ldr	r1, [pc, #12]	; (8003904 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038f6:	5ccb      	ldrb	r3, [r1, r3]
 80038f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	40023800 	.word	0x40023800
 8003904:	0800b72c 	.word	0x0800b72c

08003908 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d101      	bne.n	800391a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e041      	b.n	800399e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003920:	b2db      	uxtb	r3, r3
 8003922:	2b00      	cmp	r3, #0
 8003924:	d106      	bne.n	8003934 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f7fe fa22 	bl	8001d78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2202      	movs	r2, #2
 8003938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	3304      	adds	r3, #4
 8003944:	4619      	mov	r1, r3
 8003946:	4610      	mov	r0, r2
 8003948:	f000 fcf6 	bl	8004338 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
	...

080039a8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b085      	sub	sp, #20
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d001      	beq.n	80039c0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e03c      	b.n	8003a3a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2202      	movs	r2, #2
 80039c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a1e      	ldr	r2, [pc, #120]	; (8003a48 <HAL_TIM_Base_Start+0xa0>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d018      	beq.n	8003a04 <HAL_TIM_Base_Start+0x5c>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039da:	d013      	beq.n	8003a04 <HAL_TIM_Base_Start+0x5c>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a1a      	ldr	r2, [pc, #104]	; (8003a4c <HAL_TIM_Base_Start+0xa4>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d00e      	beq.n	8003a04 <HAL_TIM_Base_Start+0x5c>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a19      	ldr	r2, [pc, #100]	; (8003a50 <HAL_TIM_Base_Start+0xa8>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d009      	beq.n	8003a04 <HAL_TIM_Base_Start+0x5c>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a17      	ldr	r2, [pc, #92]	; (8003a54 <HAL_TIM_Base_Start+0xac>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d004      	beq.n	8003a04 <HAL_TIM_Base_Start+0x5c>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a16      	ldr	r2, [pc, #88]	; (8003a58 <HAL_TIM_Base_Start+0xb0>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d111      	bne.n	8003a28 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f003 0307 	and.w	r3, r3, #7
 8003a0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2b06      	cmp	r3, #6
 8003a14:	d010      	beq.n	8003a38 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f042 0201 	orr.w	r2, r2, #1
 8003a24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a26:	e007      	b.n	8003a38 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f042 0201 	orr.w	r2, r2, #1
 8003a36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3714      	adds	r7, #20
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	40010000 	.word	0x40010000
 8003a4c:	40000400 	.word	0x40000400
 8003a50:	40000800 	.word	0x40000800
 8003a54:	40000c00 	.word	0x40000c00
 8003a58:	40014000 	.word	0x40014000

08003a5c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d101      	bne.n	8003a6e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e041      	b.n	8003af2 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d106      	bne.n	8003a88 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f7fe f998 	bl	8001db8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2202      	movs	r2, #2
 8003a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	3304      	adds	r3, #4
 8003a98:	4619      	mov	r1, r3
 8003a9a:	4610      	mov	r0, r2
 8003a9c:	f000 fc4c 	bl	8004338 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3708      	adds	r7, #8
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b082      	sub	sp, #8
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d101      	bne.n	8003b0c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e041      	b.n	8003b90 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d106      	bne.n	8003b26 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f7fe f901 	bl	8001d28 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2202      	movs	r2, #2
 8003b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	3304      	adds	r3, #4
 8003b36:	4619      	mov	r1, r3
 8003b38:	4610      	mov	r0, r2
 8003b3a:	f000 fbfd 	bl	8004338 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2201      	movs	r2, #1
 8003b42:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2201      	movs	r2, #1
 8003b4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2201      	movs	r2, #1
 8003b52:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2201      	movs	r2, #1
 8003b5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2201      	movs	r2, #1
 8003b62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2201      	movs	r2, #1
 8003b72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3708      	adds	r7, #8
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d109      	bne.n	8003bbc <HAL_TIM_PWM_Start+0x24>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	bf14      	ite	ne
 8003bb4:	2301      	movne	r3, #1
 8003bb6:	2300      	moveq	r3, #0
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	e022      	b.n	8003c02 <HAL_TIM_PWM_Start+0x6a>
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	2b04      	cmp	r3, #4
 8003bc0:	d109      	bne.n	8003bd6 <HAL_TIM_PWM_Start+0x3e>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	bf14      	ite	ne
 8003bce:	2301      	movne	r3, #1
 8003bd0:	2300      	moveq	r3, #0
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	e015      	b.n	8003c02 <HAL_TIM_PWM_Start+0x6a>
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	2b08      	cmp	r3, #8
 8003bda:	d109      	bne.n	8003bf0 <HAL_TIM_PWM_Start+0x58>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	bf14      	ite	ne
 8003be8:	2301      	movne	r3, #1
 8003bea:	2300      	moveq	r3, #0
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	e008      	b.n	8003c02 <HAL_TIM_PWM_Start+0x6a>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	bf14      	ite	ne
 8003bfc:	2301      	movne	r3, #1
 8003bfe:	2300      	moveq	r3, #0
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d001      	beq.n	8003c0a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e068      	b.n	8003cdc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d104      	bne.n	8003c1a <HAL_TIM_PWM_Start+0x82>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2202      	movs	r2, #2
 8003c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c18:	e013      	b.n	8003c42 <HAL_TIM_PWM_Start+0xaa>
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	2b04      	cmp	r3, #4
 8003c1e:	d104      	bne.n	8003c2a <HAL_TIM_PWM_Start+0x92>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2202      	movs	r2, #2
 8003c24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c28:	e00b      	b.n	8003c42 <HAL_TIM_PWM_Start+0xaa>
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	2b08      	cmp	r3, #8
 8003c2e:	d104      	bne.n	8003c3a <HAL_TIM_PWM_Start+0xa2>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2202      	movs	r2, #2
 8003c34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c38:	e003      	b.n	8003c42 <HAL_TIM_PWM_Start+0xaa>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2202      	movs	r2, #2
 8003c3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2201      	movs	r2, #1
 8003c48:	6839      	ldr	r1, [r7, #0]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f000 fe1a 	bl	8004884 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a23      	ldr	r2, [pc, #140]	; (8003ce4 <HAL_TIM_PWM_Start+0x14c>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d107      	bne.n	8003c6a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c68:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a1d      	ldr	r2, [pc, #116]	; (8003ce4 <HAL_TIM_PWM_Start+0x14c>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d018      	beq.n	8003ca6 <HAL_TIM_PWM_Start+0x10e>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c7c:	d013      	beq.n	8003ca6 <HAL_TIM_PWM_Start+0x10e>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a19      	ldr	r2, [pc, #100]	; (8003ce8 <HAL_TIM_PWM_Start+0x150>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d00e      	beq.n	8003ca6 <HAL_TIM_PWM_Start+0x10e>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a17      	ldr	r2, [pc, #92]	; (8003cec <HAL_TIM_PWM_Start+0x154>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d009      	beq.n	8003ca6 <HAL_TIM_PWM_Start+0x10e>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a16      	ldr	r2, [pc, #88]	; (8003cf0 <HAL_TIM_PWM_Start+0x158>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d004      	beq.n	8003ca6 <HAL_TIM_PWM_Start+0x10e>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a14      	ldr	r2, [pc, #80]	; (8003cf4 <HAL_TIM_PWM_Start+0x15c>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d111      	bne.n	8003cca <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f003 0307 	and.w	r3, r3, #7
 8003cb0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2b06      	cmp	r3, #6
 8003cb6:	d010      	beq.n	8003cda <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f042 0201 	orr.w	r2, r2, #1
 8003cc6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cc8:	e007      	b.n	8003cda <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f042 0201 	orr.w	r2, r2, #1
 8003cd8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003cda:	2300      	movs	r3, #0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3710      	adds	r7, #16
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	40010000 	.word	0x40010000
 8003ce8:	40000400 	.word	0x40000400
 8003cec:	40000800 	.word	0x40000800
 8003cf0:	40000c00 	.word	0x40000c00
 8003cf4:	40014000 	.word	0x40014000

08003cf8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d122      	bne.n	8003d54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	f003 0302 	and.w	r3, r3, #2
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d11b      	bne.n	8003d54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f06f 0202 	mvn.w	r2, #2
 8003d24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	f003 0303 	and.w	r3, r3, #3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d003      	beq.n	8003d42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f000 fadd 	bl	80042fa <HAL_TIM_IC_CaptureCallback>
 8003d40:	e005      	b.n	8003d4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f000 facf 	bl	80042e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f000 fae0 	bl	800430e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	f003 0304 	and.w	r3, r3, #4
 8003d5e:	2b04      	cmp	r3, #4
 8003d60:	d122      	bne.n	8003da8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	f003 0304 	and.w	r3, r3, #4
 8003d6c:	2b04      	cmp	r3, #4
 8003d6e:	d11b      	bne.n	8003da8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f06f 0204 	mvn.w	r2, #4
 8003d78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2202      	movs	r2, #2
 8003d7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d003      	beq.n	8003d96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 fab3 	bl	80042fa <HAL_TIM_IC_CaptureCallback>
 8003d94:	e005      	b.n	8003da2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 faa5 	bl	80042e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f000 fab6 	bl	800430e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	f003 0308 	and.w	r3, r3, #8
 8003db2:	2b08      	cmp	r3, #8
 8003db4:	d122      	bne.n	8003dfc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	f003 0308 	and.w	r3, r3, #8
 8003dc0:	2b08      	cmp	r3, #8
 8003dc2:	d11b      	bne.n	8003dfc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f06f 0208 	mvn.w	r2, #8
 8003dcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2204      	movs	r2, #4
 8003dd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	69db      	ldr	r3, [r3, #28]
 8003dda:	f003 0303 	and.w	r3, r3, #3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d003      	beq.n	8003dea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 fa89 	bl	80042fa <HAL_TIM_IC_CaptureCallback>
 8003de8:	e005      	b.n	8003df6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 fa7b 	bl	80042e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f000 fa8c 	bl	800430e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	f003 0310 	and.w	r3, r3, #16
 8003e06:	2b10      	cmp	r3, #16
 8003e08:	d122      	bne.n	8003e50 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	f003 0310 	and.w	r3, r3, #16
 8003e14:	2b10      	cmp	r3, #16
 8003e16:	d11b      	bne.n	8003e50 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f06f 0210 	mvn.w	r2, #16
 8003e20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2208      	movs	r2, #8
 8003e26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	69db      	ldr	r3, [r3, #28]
 8003e2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d003      	beq.n	8003e3e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 fa5f 	bl	80042fa <HAL_TIM_IC_CaptureCallback>
 8003e3c:	e005      	b.n	8003e4a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 fa51 	bl	80042e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f000 fa62 	bl	800430e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	f003 0301 	and.w	r3, r3, #1
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d10e      	bne.n	8003e7c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	f003 0301 	and.w	r3, r3, #1
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d107      	bne.n	8003e7c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f06f 0201 	mvn.w	r2, #1
 8003e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 fa2b 	bl	80042d2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e86:	2b80      	cmp	r3, #128	; 0x80
 8003e88:	d10e      	bne.n	8003ea8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e94:	2b80      	cmp	r3, #128	; 0x80
 8003e96:	d107      	bne.n	8003ea8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f000 fe34 	bl	8004b10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eb2:	2b40      	cmp	r3, #64	; 0x40
 8003eb4:	d10e      	bne.n	8003ed4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec0:	2b40      	cmp	r3, #64	; 0x40
 8003ec2:	d107      	bne.n	8003ed4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 fa27 	bl	8004322 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	f003 0320 	and.w	r3, r3, #32
 8003ede:	2b20      	cmp	r3, #32
 8003ee0:	d10e      	bne.n	8003f00 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	f003 0320 	and.w	r3, r3, #32
 8003eec:	2b20      	cmp	r3, #32
 8003eee:	d107      	bne.n	8003f00 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f06f 0220 	mvn.w	r2, #32
 8003ef8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f7fd fba4 	bl	8001648 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f00:	bf00      	nop
 8003f02:	3708      	adds	r7, #8
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b086      	sub	sp, #24
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f14:	2300      	movs	r3, #0
 8003f16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d101      	bne.n	8003f26 <HAL_TIM_OC_ConfigChannel+0x1e>
 8003f22:	2302      	movs	r3, #2
 8003f24:	e048      	b.n	8003fb8 <HAL_TIM_OC_ConfigChannel+0xb0>
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2b0c      	cmp	r3, #12
 8003f32:	d839      	bhi.n	8003fa8 <HAL_TIM_OC_ConfigChannel+0xa0>
 8003f34:	a201      	add	r2, pc, #4	; (adr r2, 8003f3c <HAL_TIM_OC_ConfigChannel+0x34>)
 8003f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f3a:	bf00      	nop
 8003f3c:	08003f71 	.word	0x08003f71
 8003f40:	08003fa9 	.word	0x08003fa9
 8003f44:	08003fa9 	.word	0x08003fa9
 8003f48:	08003fa9 	.word	0x08003fa9
 8003f4c:	08003f7f 	.word	0x08003f7f
 8003f50:	08003fa9 	.word	0x08003fa9
 8003f54:	08003fa9 	.word	0x08003fa9
 8003f58:	08003fa9 	.word	0x08003fa9
 8003f5c:	08003f8d 	.word	0x08003f8d
 8003f60:	08003fa9 	.word	0x08003fa9
 8003f64:	08003fa9 	.word	0x08003fa9
 8003f68:	08003fa9 	.word	0x08003fa9
 8003f6c:	08003f9b 	.word	0x08003f9b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68b9      	ldr	r1, [r7, #8]
 8003f76:	4618      	mov	r0, r3
 8003f78:	f000 fa5e 	bl	8004438 <TIM_OC1_SetConfig>
      break;
 8003f7c:	e017      	b.n	8003fae <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68b9      	ldr	r1, [r7, #8]
 8003f84:	4618      	mov	r0, r3
 8003f86:	f000 fabd 	bl	8004504 <TIM_OC2_SetConfig>
      break;
 8003f8a:	e010      	b.n	8003fae <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68b9      	ldr	r1, [r7, #8]
 8003f92:	4618      	mov	r0, r3
 8003f94:	f000 fb22 	bl	80045dc <TIM_OC3_SetConfig>
      break;
 8003f98:	e009      	b.n	8003fae <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68b9      	ldr	r1, [r7, #8]
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f000 fb85 	bl	80046b0 <TIM_OC4_SetConfig>
      break;
 8003fa6:	e002      	b.n	8003fae <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	75fb      	strb	r3, [r7, #23]
      break;
 8003fac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003fb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3718      	adds	r7, #24
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b086      	sub	sp, #24
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d101      	bne.n	8003fde <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003fda:	2302      	movs	r3, #2
 8003fdc:	e0ae      	b.n	800413c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2b0c      	cmp	r3, #12
 8003fea:	f200 809f 	bhi.w	800412c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003fee:	a201      	add	r2, pc, #4	; (adr r2, 8003ff4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff4:	08004029 	.word	0x08004029
 8003ff8:	0800412d 	.word	0x0800412d
 8003ffc:	0800412d 	.word	0x0800412d
 8004000:	0800412d 	.word	0x0800412d
 8004004:	08004069 	.word	0x08004069
 8004008:	0800412d 	.word	0x0800412d
 800400c:	0800412d 	.word	0x0800412d
 8004010:	0800412d 	.word	0x0800412d
 8004014:	080040ab 	.word	0x080040ab
 8004018:	0800412d 	.word	0x0800412d
 800401c:	0800412d 	.word	0x0800412d
 8004020:	0800412d 	.word	0x0800412d
 8004024:	080040eb 	.word	0x080040eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68b9      	ldr	r1, [r7, #8]
 800402e:	4618      	mov	r0, r3
 8004030:	f000 fa02 	bl	8004438 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	699a      	ldr	r2, [r3, #24]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f042 0208 	orr.w	r2, r2, #8
 8004042:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	699a      	ldr	r2, [r3, #24]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f022 0204 	bic.w	r2, r2, #4
 8004052:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	6999      	ldr	r1, [r3, #24]
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	691a      	ldr	r2, [r3, #16]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	430a      	orrs	r2, r1
 8004064:	619a      	str	r2, [r3, #24]
      break;
 8004066:	e064      	b.n	8004132 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68b9      	ldr	r1, [r7, #8]
 800406e:	4618      	mov	r0, r3
 8004070:	f000 fa48 	bl	8004504 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	699a      	ldr	r2, [r3, #24]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004082:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	699a      	ldr	r2, [r3, #24]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004092:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	6999      	ldr	r1, [r3, #24]
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	021a      	lsls	r2, r3, #8
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	430a      	orrs	r2, r1
 80040a6:	619a      	str	r2, [r3, #24]
      break;
 80040a8:	e043      	b.n	8004132 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68b9      	ldr	r1, [r7, #8]
 80040b0:	4618      	mov	r0, r3
 80040b2:	f000 fa93 	bl	80045dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	69da      	ldr	r2, [r3, #28]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f042 0208 	orr.w	r2, r2, #8
 80040c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	69da      	ldr	r2, [r3, #28]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f022 0204 	bic.w	r2, r2, #4
 80040d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	69d9      	ldr	r1, [r3, #28]
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	691a      	ldr	r2, [r3, #16]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	430a      	orrs	r2, r1
 80040e6:	61da      	str	r2, [r3, #28]
      break;
 80040e8:	e023      	b.n	8004132 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68b9      	ldr	r1, [r7, #8]
 80040f0:	4618      	mov	r0, r3
 80040f2:	f000 fadd 	bl	80046b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	69da      	ldr	r2, [r3, #28]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004104:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	69da      	ldr	r2, [r3, #28]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004114:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	69d9      	ldr	r1, [r3, #28]
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	691b      	ldr	r3, [r3, #16]
 8004120:	021a      	lsls	r2, r3, #8
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	430a      	orrs	r2, r1
 8004128:	61da      	str	r2, [r3, #28]
      break;
 800412a:	e002      	b.n	8004132 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	75fb      	strb	r3, [r7, #23]
      break;
 8004130:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800413a:	7dfb      	ldrb	r3, [r7, #23]
}
 800413c:	4618      	mov	r0, r3
 800413e:	3718      	adds	r7, #24
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800414e:	2300      	movs	r3, #0
 8004150:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004158:	2b01      	cmp	r3, #1
 800415a:	d101      	bne.n	8004160 <HAL_TIM_ConfigClockSource+0x1c>
 800415c:	2302      	movs	r3, #2
 800415e:	e0b4      	b.n	80042ca <HAL_TIM_ConfigClockSource+0x186>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2202      	movs	r2, #2
 800416c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800417e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004186:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68ba      	ldr	r2, [r7, #8]
 800418e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004198:	d03e      	beq.n	8004218 <HAL_TIM_ConfigClockSource+0xd4>
 800419a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800419e:	f200 8087 	bhi.w	80042b0 <HAL_TIM_ConfigClockSource+0x16c>
 80041a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041a6:	f000 8086 	beq.w	80042b6 <HAL_TIM_ConfigClockSource+0x172>
 80041aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041ae:	d87f      	bhi.n	80042b0 <HAL_TIM_ConfigClockSource+0x16c>
 80041b0:	2b70      	cmp	r3, #112	; 0x70
 80041b2:	d01a      	beq.n	80041ea <HAL_TIM_ConfigClockSource+0xa6>
 80041b4:	2b70      	cmp	r3, #112	; 0x70
 80041b6:	d87b      	bhi.n	80042b0 <HAL_TIM_ConfigClockSource+0x16c>
 80041b8:	2b60      	cmp	r3, #96	; 0x60
 80041ba:	d050      	beq.n	800425e <HAL_TIM_ConfigClockSource+0x11a>
 80041bc:	2b60      	cmp	r3, #96	; 0x60
 80041be:	d877      	bhi.n	80042b0 <HAL_TIM_ConfigClockSource+0x16c>
 80041c0:	2b50      	cmp	r3, #80	; 0x50
 80041c2:	d03c      	beq.n	800423e <HAL_TIM_ConfigClockSource+0xfa>
 80041c4:	2b50      	cmp	r3, #80	; 0x50
 80041c6:	d873      	bhi.n	80042b0 <HAL_TIM_ConfigClockSource+0x16c>
 80041c8:	2b40      	cmp	r3, #64	; 0x40
 80041ca:	d058      	beq.n	800427e <HAL_TIM_ConfigClockSource+0x13a>
 80041cc:	2b40      	cmp	r3, #64	; 0x40
 80041ce:	d86f      	bhi.n	80042b0 <HAL_TIM_ConfigClockSource+0x16c>
 80041d0:	2b30      	cmp	r3, #48	; 0x30
 80041d2:	d064      	beq.n	800429e <HAL_TIM_ConfigClockSource+0x15a>
 80041d4:	2b30      	cmp	r3, #48	; 0x30
 80041d6:	d86b      	bhi.n	80042b0 <HAL_TIM_ConfigClockSource+0x16c>
 80041d8:	2b20      	cmp	r3, #32
 80041da:	d060      	beq.n	800429e <HAL_TIM_ConfigClockSource+0x15a>
 80041dc:	2b20      	cmp	r3, #32
 80041de:	d867      	bhi.n	80042b0 <HAL_TIM_ConfigClockSource+0x16c>
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d05c      	beq.n	800429e <HAL_TIM_ConfigClockSource+0x15a>
 80041e4:	2b10      	cmp	r3, #16
 80041e6:	d05a      	beq.n	800429e <HAL_TIM_ConfigClockSource+0x15a>
 80041e8:	e062      	b.n	80042b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6818      	ldr	r0, [r3, #0]
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	6899      	ldr	r1, [r3, #8]
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	685a      	ldr	r2, [r3, #4]
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	f000 fb23 	bl	8004844 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800420c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68ba      	ldr	r2, [r7, #8]
 8004214:	609a      	str	r2, [r3, #8]
      break;
 8004216:	e04f      	b.n	80042b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6818      	ldr	r0, [r3, #0]
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	6899      	ldr	r1, [r3, #8]
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	685a      	ldr	r2, [r3, #4]
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	f000 fb0c 	bl	8004844 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	689a      	ldr	r2, [r3, #8]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800423a:	609a      	str	r2, [r3, #8]
      break;
 800423c:	e03c      	b.n	80042b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6818      	ldr	r0, [r3, #0]
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	6859      	ldr	r1, [r3, #4]
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	461a      	mov	r2, r3
 800424c:	f000 fa80 	bl	8004750 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2150      	movs	r1, #80	; 0x50
 8004256:	4618      	mov	r0, r3
 8004258:	f000 fad9 	bl	800480e <TIM_ITRx_SetConfig>
      break;
 800425c:	e02c      	b.n	80042b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6818      	ldr	r0, [r3, #0]
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	6859      	ldr	r1, [r3, #4]
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	461a      	mov	r2, r3
 800426c:	f000 fa9f 	bl	80047ae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2160      	movs	r1, #96	; 0x60
 8004276:	4618      	mov	r0, r3
 8004278:	f000 fac9 	bl	800480e <TIM_ITRx_SetConfig>
      break;
 800427c:	e01c      	b.n	80042b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6818      	ldr	r0, [r3, #0]
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	6859      	ldr	r1, [r3, #4]
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	461a      	mov	r2, r3
 800428c:	f000 fa60 	bl	8004750 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2140      	movs	r1, #64	; 0x40
 8004296:	4618      	mov	r0, r3
 8004298:	f000 fab9 	bl	800480e <TIM_ITRx_SetConfig>
      break;
 800429c:	e00c      	b.n	80042b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4619      	mov	r1, r3
 80042a8:	4610      	mov	r0, r2
 80042aa:	f000 fab0 	bl	800480e <TIM_ITRx_SetConfig>
      break;
 80042ae:	e003      	b.n	80042b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	73fb      	strb	r3, [r7, #15]
      break;
 80042b4:	e000      	b.n	80042b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80042b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80042c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3710      	adds	r7, #16
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042d2:	b480      	push	{r7}
 80042d4:	b083      	sub	sp, #12
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80042da:	bf00      	nop
 80042dc:	370c      	adds	r7, #12
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr

080042e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042e6:	b480      	push	{r7}
 80042e8:	b083      	sub	sp, #12
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042ee:	bf00      	nop
 80042f0:	370c      	adds	r7, #12
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr

080042fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042fa:	b480      	push	{r7}
 80042fc:	b083      	sub	sp, #12
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004302:	bf00      	nop
 8004304:	370c      	adds	r7, #12
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr

0800430e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800430e:	b480      	push	{r7}
 8004310:	b083      	sub	sp, #12
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004316:	bf00      	nop
 8004318:	370c      	adds	r7, #12
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr

08004322 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004322:	b480      	push	{r7}
 8004324:	b083      	sub	sp, #12
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800432a:	bf00      	nop
 800432c:	370c      	adds	r7, #12
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr
	...

08004338 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004338:	b480      	push	{r7}
 800433a:	b085      	sub	sp, #20
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a34      	ldr	r2, [pc, #208]	; (800441c <TIM_Base_SetConfig+0xe4>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d00f      	beq.n	8004370 <TIM_Base_SetConfig+0x38>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004356:	d00b      	beq.n	8004370 <TIM_Base_SetConfig+0x38>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a31      	ldr	r2, [pc, #196]	; (8004420 <TIM_Base_SetConfig+0xe8>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d007      	beq.n	8004370 <TIM_Base_SetConfig+0x38>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a30      	ldr	r2, [pc, #192]	; (8004424 <TIM_Base_SetConfig+0xec>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d003      	beq.n	8004370 <TIM_Base_SetConfig+0x38>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a2f      	ldr	r2, [pc, #188]	; (8004428 <TIM_Base_SetConfig+0xf0>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d108      	bne.n	8004382 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004376:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	68fa      	ldr	r2, [r7, #12]
 800437e:	4313      	orrs	r3, r2
 8004380:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a25      	ldr	r2, [pc, #148]	; (800441c <TIM_Base_SetConfig+0xe4>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d01b      	beq.n	80043c2 <TIM_Base_SetConfig+0x8a>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004390:	d017      	beq.n	80043c2 <TIM_Base_SetConfig+0x8a>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a22      	ldr	r2, [pc, #136]	; (8004420 <TIM_Base_SetConfig+0xe8>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d013      	beq.n	80043c2 <TIM_Base_SetConfig+0x8a>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a21      	ldr	r2, [pc, #132]	; (8004424 <TIM_Base_SetConfig+0xec>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d00f      	beq.n	80043c2 <TIM_Base_SetConfig+0x8a>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a20      	ldr	r2, [pc, #128]	; (8004428 <TIM_Base_SetConfig+0xf0>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d00b      	beq.n	80043c2 <TIM_Base_SetConfig+0x8a>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a1f      	ldr	r2, [pc, #124]	; (800442c <TIM_Base_SetConfig+0xf4>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d007      	beq.n	80043c2 <TIM_Base_SetConfig+0x8a>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a1e      	ldr	r2, [pc, #120]	; (8004430 <TIM_Base_SetConfig+0xf8>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d003      	beq.n	80043c2 <TIM_Base_SetConfig+0x8a>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a1d      	ldr	r2, [pc, #116]	; (8004434 <TIM_Base_SetConfig+0xfc>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d108      	bne.n	80043d4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	695b      	ldr	r3, [r3, #20]
 80043de:	4313      	orrs	r3, r2
 80043e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	68fa      	ldr	r2, [r7, #12]
 80043e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	689a      	ldr	r2, [r3, #8]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4a08      	ldr	r2, [pc, #32]	; (800441c <TIM_Base_SetConfig+0xe4>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d103      	bne.n	8004408 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	691a      	ldr	r2, [r3, #16]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	615a      	str	r2, [r3, #20]
}
 800440e:	bf00      	nop
 8004410:	3714      	adds	r7, #20
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	40010000 	.word	0x40010000
 8004420:	40000400 	.word	0x40000400
 8004424:	40000800 	.word	0x40000800
 8004428:	40000c00 	.word	0x40000c00
 800442c:	40014000 	.word	0x40014000
 8004430:	40014400 	.word	0x40014400
 8004434:	40014800 	.word	0x40014800

08004438 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004438:	b480      	push	{r7}
 800443a:	b087      	sub	sp, #28
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a1b      	ldr	r3, [r3, #32]
 8004446:	f023 0201 	bic.w	r2, r3, #1
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a1b      	ldr	r3, [r3, #32]
 8004452:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004466:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f023 0303 	bic.w	r3, r3, #3
 800446e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68fa      	ldr	r2, [r7, #12]
 8004476:	4313      	orrs	r3, r2
 8004478:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	f023 0302 	bic.w	r3, r3, #2
 8004480:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	697a      	ldr	r2, [r7, #20]
 8004488:	4313      	orrs	r3, r2
 800448a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4a1c      	ldr	r2, [pc, #112]	; (8004500 <TIM_OC1_SetConfig+0xc8>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d10c      	bne.n	80044ae <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	f023 0308 	bic.w	r3, r3, #8
 800449a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	697a      	ldr	r2, [r7, #20]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	f023 0304 	bic.w	r3, r3, #4
 80044ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a13      	ldr	r2, [pc, #76]	; (8004500 <TIM_OC1_SetConfig+0xc8>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d111      	bne.n	80044da <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	693a      	ldr	r2, [r7, #16]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	699b      	ldr	r3, [r3, #24]
 80044d4:	693a      	ldr	r2, [r7, #16]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	693a      	ldr	r2, [r7, #16]
 80044de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	68fa      	ldr	r2, [r7, #12]
 80044e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	685a      	ldr	r2, [r3, #4]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	697a      	ldr	r2, [r7, #20]
 80044f2:	621a      	str	r2, [r3, #32]
}
 80044f4:	bf00      	nop
 80044f6:	371c      	adds	r7, #28
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr
 8004500:	40010000 	.word	0x40010000

08004504 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004504:	b480      	push	{r7}
 8004506:	b087      	sub	sp, #28
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a1b      	ldr	r3, [r3, #32]
 8004512:	f023 0210 	bic.w	r2, r3, #16
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a1b      	ldr	r3, [r3, #32]
 800451e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	699b      	ldr	r3, [r3, #24]
 800452a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004532:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800453a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	021b      	lsls	r3, r3, #8
 8004542:	68fa      	ldr	r2, [r7, #12]
 8004544:	4313      	orrs	r3, r2
 8004546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	f023 0320 	bic.w	r3, r3, #32
 800454e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	011b      	lsls	r3, r3, #4
 8004556:	697a      	ldr	r2, [r7, #20]
 8004558:	4313      	orrs	r3, r2
 800455a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4a1e      	ldr	r2, [pc, #120]	; (80045d8 <TIM_OC2_SetConfig+0xd4>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d10d      	bne.n	8004580 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800456a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	011b      	lsls	r3, r3, #4
 8004572:	697a      	ldr	r2, [r7, #20]
 8004574:	4313      	orrs	r3, r2
 8004576:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800457e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	4a15      	ldr	r2, [pc, #84]	; (80045d8 <TIM_OC2_SetConfig+0xd4>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d113      	bne.n	80045b0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800458e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004596:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	695b      	ldr	r3, [r3, #20]
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	693a      	ldr	r2, [r7, #16]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	693a      	ldr	r2, [r7, #16]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	693a      	ldr	r2, [r7, #16]
 80045b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	68fa      	ldr	r2, [r7, #12]
 80045ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	685a      	ldr	r2, [r3, #4]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	697a      	ldr	r2, [r7, #20]
 80045c8:	621a      	str	r2, [r3, #32]
}
 80045ca:	bf00      	nop
 80045cc:	371c      	adds	r7, #28
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop
 80045d8:	40010000 	.word	0x40010000

080045dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045dc:	b480      	push	{r7}
 80045de:	b087      	sub	sp, #28
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a1b      	ldr	r3, [r3, #32]
 80045f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	69db      	ldr	r3, [r3, #28]
 8004602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800460a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f023 0303 	bic.w	r3, r3, #3
 8004612:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	68fa      	ldr	r2, [r7, #12]
 800461a:	4313      	orrs	r3, r2
 800461c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004624:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	021b      	lsls	r3, r3, #8
 800462c:	697a      	ldr	r2, [r7, #20]
 800462e:	4313      	orrs	r3, r2
 8004630:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4a1d      	ldr	r2, [pc, #116]	; (80046ac <TIM_OC3_SetConfig+0xd0>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d10d      	bne.n	8004656 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004640:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	021b      	lsls	r3, r3, #8
 8004648:	697a      	ldr	r2, [r7, #20]
 800464a:	4313      	orrs	r3, r2
 800464c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004654:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a14      	ldr	r2, [pc, #80]	; (80046ac <TIM_OC3_SetConfig+0xd0>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d113      	bne.n	8004686 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004664:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800466c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	011b      	lsls	r3, r3, #4
 8004674:	693a      	ldr	r2, [r7, #16]
 8004676:	4313      	orrs	r3, r2
 8004678:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	011b      	lsls	r3, r3, #4
 8004680:	693a      	ldr	r2, [r7, #16]
 8004682:	4313      	orrs	r3, r2
 8004684:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	693a      	ldr	r2, [r7, #16]
 800468a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	685a      	ldr	r2, [r3, #4]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	697a      	ldr	r2, [r7, #20]
 800469e:	621a      	str	r2, [r3, #32]
}
 80046a0:	bf00      	nop
 80046a2:	371c      	adds	r7, #28
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr
 80046ac:	40010000 	.word	0x40010000

080046b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b087      	sub	sp, #28
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a1b      	ldr	r3, [r3, #32]
 80046be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a1b      	ldr	r3, [r3, #32]
 80046ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	69db      	ldr	r3, [r3, #28]
 80046d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	021b      	lsls	r3, r3, #8
 80046ee:	68fa      	ldr	r2, [r7, #12]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	031b      	lsls	r3, r3, #12
 8004702:	693a      	ldr	r2, [r7, #16]
 8004704:	4313      	orrs	r3, r2
 8004706:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4a10      	ldr	r2, [pc, #64]	; (800474c <TIM_OC4_SetConfig+0x9c>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d109      	bne.n	8004724 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004716:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	695b      	ldr	r3, [r3, #20]
 800471c:	019b      	lsls	r3, r3, #6
 800471e:	697a      	ldr	r2, [r7, #20]
 8004720:	4313      	orrs	r3, r2
 8004722:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	697a      	ldr	r2, [r7, #20]
 8004728:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	68fa      	ldr	r2, [r7, #12]
 800472e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	685a      	ldr	r2, [r3, #4]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	693a      	ldr	r2, [r7, #16]
 800473c:	621a      	str	r2, [r3, #32]
}
 800473e:	bf00      	nop
 8004740:	371c      	adds	r7, #28
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	40010000 	.word	0x40010000

08004750 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004750:	b480      	push	{r7}
 8004752:	b087      	sub	sp, #28
 8004754:	af00      	add	r7, sp, #0
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6a1b      	ldr	r3, [r3, #32]
 8004760:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6a1b      	ldr	r3, [r3, #32]
 8004766:	f023 0201 	bic.w	r2, r3, #1
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	699b      	ldr	r3, [r3, #24]
 8004772:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800477a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	011b      	lsls	r3, r3, #4
 8004780:	693a      	ldr	r2, [r7, #16]
 8004782:	4313      	orrs	r3, r2
 8004784:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	f023 030a 	bic.w	r3, r3, #10
 800478c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800478e:	697a      	ldr	r2, [r7, #20]
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	4313      	orrs	r3, r2
 8004794:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	693a      	ldr	r2, [r7, #16]
 800479a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	697a      	ldr	r2, [r7, #20]
 80047a0:	621a      	str	r2, [r3, #32]
}
 80047a2:	bf00      	nop
 80047a4:	371c      	adds	r7, #28
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr

080047ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047ae:	b480      	push	{r7}
 80047b0:	b087      	sub	sp, #28
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	60f8      	str	r0, [r7, #12]
 80047b6:	60b9      	str	r1, [r7, #8]
 80047b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6a1b      	ldr	r3, [r3, #32]
 80047be:	f023 0210 	bic.w	r2, r3, #16
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6a1b      	ldr	r3, [r3, #32]
 80047d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	031b      	lsls	r3, r3, #12
 80047de:	697a      	ldr	r2, [r7, #20]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80047ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	011b      	lsls	r3, r3, #4
 80047f0:	693a      	ldr	r2, [r7, #16]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	697a      	ldr	r2, [r7, #20]
 80047fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	693a      	ldr	r2, [r7, #16]
 8004800:	621a      	str	r2, [r3, #32]
}
 8004802:	bf00      	nop
 8004804:	371c      	adds	r7, #28
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr

0800480e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800480e:	b480      	push	{r7}
 8004810:	b085      	sub	sp, #20
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
 8004816:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004824:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004826:	683a      	ldr	r2, [r7, #0]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	4313      	orrs	r3, r2
 800482c:	f043 0307 	orr.w	r3, r3, #7
 8004830:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	68fa      	ldr	r2, [r7, #12]
 8004836:	609a      	str	r2, [r3, #8]
}
 8004838:	bf00      	nop
 800483a:	3714      	adds	r7, #20
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004844:	b480      	push	{r7}
 8004846:	b087      	sub	sp, #28
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	607a      	str	r2, [r7, #4]
 8004850:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800485e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	021a      	lsls	r2, r3, #8
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	431a      	orrs	r2, r3
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	4313      	orrs	r3, r2
 800486c:	697a      	ldr	r2, [r7, #20]
 800486e:	4313      	orrs	r3, r2
 8004870:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	697a      	ldr	r2, [r7, #20]
 8004876:	609a      	str	r2, [r3, #8]
}
 8004878:	bf00      	nop
 800487a:	371c      	adds	r7, #28
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004884:	b480      	push	{r7}
 8004886:	b087      	sub	sp, #28
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	f003 031f 	and.w	r3, r3, #31
 8004896:	2201      	movs	r2, #1
 8004898:	fa02 f303 	lsl.w	r3, r2, r3
 800489c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6a1a      	ldr	r2, [r3, #32]
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	43db      	mvns	r3, r3
 80048a6:	401a      	ands	r2, r3
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6a1a      	ldr	r2, [r3, #32]
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	f003 031f 	and.w	r3, r3, #31
 80048b6:	6879      	ldr	r1, [r7, #4]
 80048b8:	fa01 f303 	lsl.w	r3, r1, r3
 80048bc:	431a      	orrs	r2, r3
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	621a      	str	r2, [r3, #32]
}
 80048c2:	bf00      	nop
 80048c4:	371c      	adds	r7, #28
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr

080048ce <HAL_TIMEx_ConfigCommutEvent_IT>:
  *            @arg TIM_COMMUTATION_SOFTWARE:  Commutation source is set by software using the COMG bit
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigCommutEvent_IT(TIM_HandleTypeDef *htim, uint32_t  InputTrigger,
                                                 uint32_t  CommutationSource)
{
 80048ce:	b480      	push	{r7}
 80048d0:	b085      	sub	sp, #20
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	60f8      	str	r0, [r7, #12]
 80048d6:	60b9      	str	r1, [r7, #8]
 80048d8:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_COMMUTATION_EVENT_INSTANCE(htim->Instance));
  assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));

  __HAL_LOCK(htim);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d101      	bne.n	80048e8 <HAL_TIMEx_ConfigCommutEvent_IT+0x1a>
 80048e4:	2302      	movs	r3, #2
 80048e6:	e04c      	b.n	8004982 <HAL_TIMEx_ConfigCommutEvent_IT+0xb4>
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d008      	beq.n	8004908 <HAL_TIMEx_ConfigCommutEvent_IT+0x3a>
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	2b10      	cmp	r3, #16
 80048fa:	d005      	beq.n	8004908 <HAL_TIMEx_ConfigCommutEvent_IT+0x3a>
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	2b20      	cmp	r3, #32
 8004900:	d002      	beq.n	8004908 <HAL_TIMEx_ConfigCommutEvent_IT+0x3a>
      (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	2b30      	cmp	r3, #48	; 0x30
 8004906:	d10f      	bne.n	8004928 <HAL_TIMEx_ConfigCommutEvent_IT+0x5a>
  {
    /* Select the Input trigger */
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	689a      	ldr	r2, [r3, #8]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004916:	609a      	str	r2, [r3, #8]
    htim->Instance->SMCR |= InputTrigger;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	6899      	ldr	r1, [r3, #8]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	68ba      	ldr	r2, [r7, #8]
 8004924:	430a      	orrs	r2, r1
 8004926:	609a      	str	r2, [r3, #8]
  }

  /* Select the Capture Compare preload feature */
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	685a      	ldr	r2, [r3, #4]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f042 0201 	orr.w	r2, r2, #1
 8004936:	605a      	str	r2, [r3, #4]
  /* Select the Commutation event source */
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	685a      	ldr	r2, [r3, #4]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f022 0204 	bic.w	r2, r2, #4
 8004946:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= CommutationSource;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	6859      	ldr	r1, [r3, #4]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	430a      	orrs	r2, r1
 8004956:	605a      	str	r2, [r3, #4]

  /* Disable Commutation DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_COM);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68da      	ldr	r2, [r3, #12]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004966:	60da      	str	r2, [r3, #12]

  /* Enable the Commutation Interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_COM);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	68da      	ldr	r2, [r3, #12]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f042 0220 	orr.w	r2, r2, #32
 8004976:	60da      	str	r2, [r3, #12]

  __HAL_UNLOCK(htim);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2200      	movs	r2, #0
 800497c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004980:	2300      	movs	r3, #0
}
 8004982:	4618      	mov	r0, r3
 8004984:	3714      	adds	r7, #20
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
	...

08004990 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004990:	b480      	push	{r7}
 8004992:	b085      	sub	sp, #20
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d101      	bne.n	80049a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049a4:	2302      	movs	r3, #2
 80049a6:	e050      	b.n	8004a4a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2202      	movs	r2, #2
 80049b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68fa      	ldr	r2, [r7, #12]
 80049e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a1c      	ldr	r2, [pc, #112]	; (8004a58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d018      	beq.n	8004a1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049f4:	d013      	beq.n	8004a1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a18      	ldr	r2, [pc, #96]	; (8004a5c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d00e      	beq.n	8004a1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a16      	ldr	r2, [pc, #88]	; (8004a60 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d009      	beq.n	8004a1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a15      	ldr	r2, [pc, #84]	; (8004a64 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d004      	beq.n	8004a1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a13      	ldr	r2, [pc, #76]	; (8004a68 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d10c      	bne.n	8004a38 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	68ba      	ldr	r2, [r7, #8]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68ba      	ldr	r2, [r7, #8]
 8004a36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3714      	adds	r7, #20
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	40010000 	.word	0x40010000
 8004a5c:	40000400 	.word	0x40000400
 8004a60:	40000800 	.word	0x40000800
 8004a64:	40000c00 	.word	0x40000c00
 8004a68:	40014000 	.word	0x40014000

08004a6c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b085      	sub	sp, #20
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004a76:	2300      	movs	r3, #0
 8004a78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d101      	bne.n	8004a88 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004a84:	2302      	movs	r3, #2
 8004a86:	e03d      	b.n	8004b04 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	695b      	ldr	r3, [r3, #20]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	69db      	ldr	r3, [r3, #28]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68fa      	ldr	r2, [r7, #12]
 8004af8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3714      	adds	r7, #20
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b18:	bf00      	nop
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr

08004b24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b082      	sub	sp, #8
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d101      	bne.n	8004b36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e03f      	b.n	8004bb6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d106      	bne.n	8004b50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f7fd f9d6 	bl	8001efc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2224      	movs	r2, #36	; 0x24
 8004b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68da      	ldr	r2, [r3, #12]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f000 f929 	bl	8004dc0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	691a      	ldr	r2, [r3, #16]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	695a      	ldr	r2, [r3, #20]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	68da      	ldr	r2, [r3, #12]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2220      	movs	r2, #32
 8004ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2220      	movs	r2, #32
 8004bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3708      	adds	r7, #8
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}

08004bbe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bbe:	b580      	push	{r7, lr}
 8004bc0:	b08a      	sub	sp, #40	; 0x28
 8004bc2:	af02      	add	r7, sp, #8
 8004bc4:	60f8      	str	r0, [r7, #12]
 8004bc6:	60b9      	str	r1, [r7, #8]
 8004bc8:	603b      	str	r3, [r7, #0]
 8004bca:	4613      	mov	r3, r2
 8004bcc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	2b20      	cmp	r3, #32
 8004bdc:	d17c      	bne.n	8004cd8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d002      	beq.n	8004bea <HAL_UART_Transmit+0x2c>
 8004be4:	88fb      	ldrh	r3, [r7, #6]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d101      	bne.n	8004bee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e075      	b.n	8004cda <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d101      	bne.n	8004bfc <HAL_UART_Transmit+0x3e>
 8004bf8:	2302      	movs	r3, #2
 8004bfa:	e06e      	b.n	8004cda <HAL_UART_Transmit+0x11c>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2200      	movs	r2, #0
 8004c08:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2221      	movs	r2, #33	; 0x21
 8004c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c12:	f7fd fb51 	bl	80022b8 <HAL_GetTick>
 8004c16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	88fa      	ldrh	r2, [r7, #6]
 8004c1c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	88fa      	ldrh	r2, [r7, #6]
 8004c22:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c2c:	d108      	bne.n	8004c40 <HAL_UART_Transmit+0x82>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d104      	bne.n	8004c40 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004c36:	2300      	movs	r3, #0
 8004c38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	61bb      	str	r3, [r7, #24]
 8004c3e:	e003      	b.n	8004c48 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c44:	2300      	movs	r3, #0
 8004c46:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004c50:	e02a      	b.n	8004ca8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	9300      	str	r3, [sp, #0]
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	2180      	movs	r1, #128	; 0x80
 8004c5c:	68f8      	ldr	r0, [r7, #12]
 8004c5e:	f000 f840 	bl	8004ce2 <UART_WaitOnFlagUntilTimeout>
 8004c62:	4603      	mov	r3, r0
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d001      	beq.n	8004c6c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	e036      	b.n	8004cda <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d10b      	bne.n	8004c8a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	881b      	ldrh	r3, [r3, #0]
 8004c76:	461a      	mov	r2, r3
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c80:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	3302      	adds	r3, #2
 8004c86:	61bb      	str	r3, [r7, #24]
 8004c88:	e007      	b.n	8004c9a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	781a      	ldrb	r2, [r3, #0]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	3301      	adds	r3, #1
 8004c98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	3b01      	subs	r3, #1
 8004ca2:	b29a      	uxth	r2, r3
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d1cf      	bne.n	8004c52 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	9300      	str	r3, [sp, #0]
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	2140      	movs	r1, #64	; 0x40
 8004cbc:	68f8      	ldr	r0, [r7, #12]
 8004cbe:	f000 f810 	bl	8004ce2 <UART_WaitOnFlagUntilTimeout>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d001      	beq.n	8004ccc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004cc8:	2303      	movs	r3, #3
 8004cca:	e006      	b.n	8004cda <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2220      	movs	r2, #32
 8004cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	e000      	b.n	8004cda <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004cd8:	2302      	movs	r3, #2
  }
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3720      	adds	r7, #32
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}

08004ce2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004ce2:	b580      	push	{r7, lr}
 8004ce4:	b090      	sub	sp, #64	; 0x40
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	60f8      	str	r0, [r7, #12]
 8004cea:	60b9      	str	r1, [r7, #8]
 8004cec:	603b      	str	r3, [r7, #0]
 8004cee:	4613      	mov	r3, r2
 8004cf0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cf2:	e050      	b.n	8004d96 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cfa:	d04c      	beq.n	8004d96 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004cfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d007      	beq.n	8004d12 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d02:	f7fd fad9 	bl	80022b8 <HAL_GetTick>
 8004d06:	4602      	mov	r2, r0
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d241      	bcs.n	8004d96 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	330c      	adds	r3, #12
 8004d18:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d1c:	e853 3f00 	ldrex	r3, [r3]
 8004d20:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d24:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	330c      	adds	r3, #12
 8004d30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d32:	637a      	str	r2, [r7, #52]	; 0x34
 8004d34:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d36:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d3a:	e841 2300 	strex	r3, r2, [r1]
 8004d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d1e5      	bne.n	8004d12 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	3314      	adds	r3, #20
 8004d4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	e853 3f00 	ldrex	r3, [r3]
 8004d54:	613b      	str	r3, [r7, #16]
   return(result);
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	f023 0301 	bic.w	r3, r3, #1
 8004d5c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	3314      	adds	r3, #20
 8004d64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d66:	623a      	str	r2, [r7, #32]
 8004d68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d6a:	69f9      	ldr	r1, [r7, #28]
 8004d6c:	6a3a      	ldr	r2, [r7, #32]
 8004d6e:	e841 2300 	strex	r3, r2, [r1]
 8004d72:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d1e5      	bne.n	8004d46 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2220      	movs	r2, #32
 8004d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2220      	movs	r2, #32
 8004d86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e00f      	b.n	8004db6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	4013      	ands	r3, r2
 8004da0:	68ba      	ldr	r2, [r7, #8]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	bf0c      	ite	eq
 8004da6:	2301      	moveq	r3, #1
 8004da8:	2300      	movne	r3, #0
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	461a      	mov	r2, r3
 8004dae:	79fb      	ldrb	r3, [r7, #7]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d09f      	beq.n	8004cf4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3740      	adds	r7, #64	; 0x40
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
	...

08004dc0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004dc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dc4:	b0c0      	sub	sp, #256	; 0x100
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ddc:	68d9      	ldr	r1, [r3, #12]
 8004dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	ea40 0301 	orr.w	r3, r0, r1
 8004de8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dee:	689a      	ldr	r2, [r3, #8]
 8004df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	431a      	orrs	r2, r3
 8004df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dfc:	695b      	ldr	r3, [r3, #20]
 8004dfe:	431a      	orrs	r2, r3
 8004e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e04:	69db      	ldr	r3, [r3, #28]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004e18:	f021 010c 	bic.w	r1, r1, #12
 8004e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e26:	430b      	orrs	r3, r1
 8004e28:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	695b      	ldr	r3, [r3, #20]
 8004e32:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e3a:	6999      	ldr	r1, [r3, #24]
 8004e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	ea40 0301 	orr.w	r3, r0, r1
 8004e46:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	4b8f      	ldr	r3, [pc, #572]	; (800508c <UART_SetConfig+0x2cc>)
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d005      	beq.n	8004e60 <UART_SetConfig+0xa0>
 8004e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	4b8d      	ldr	r3, [pc, #564]	; (8005090 <UART_SetConfig+0x2d0>)
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d104      	bne.n	8004e6a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e60:	f7fe fd3e 	bl	80038e0 <HAL_RCC_GetPCLK2Freq>
 8004e64:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004e68:	e003      	b.n	8004e72 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e6a:	f7fe fd25 	bl	80038b8 <HAL_RCC_GetPCLK1Freq>
 8004e6e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e76:	69db      	ldr	r3, [r3, #28]
 8004e78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e7c:	f040 810c 	bne.w	8005098 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e84:	2200      	movs	r2, #0
 8004e86:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004e8a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004e8e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004e92:	4622      	mov	r2, r4
 8004e94:	462b      	mov	r3, r5
 8004e96:	1891      	adds	r1, r2, r2
 8004e98:	65b9      	str	r1, [r7, #88]	; 0x58
 8004e9a:	415b      	adcs	r3, r3
 8004e9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e9e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004ea2:	4621      	mov	r1, r4
 8004ea4:	eb12 0801 	adds.w	r8, r2, r1
 8004ea8:	4629      	mov	r1, r5
 8004eaa:	eb43 0901 	adc.w	r9, r3, r1
 8004eae:	f04f 0200 	mov.w	r2, #0
 8004eb2:	f04f 0300 	mov.w	r3, #0
 8004eb6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004eba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ebe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ec2:	4690      	mov	r8, r2
 8004ec4:	4699      	mov	r9, r3
 8004ec6:	4623      	mov	r3, r4
 8004ec8:	eb18 0303 	adds.w	r3, r8, r3
 8004ecc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004ed0:	462b      	mov	r3, r5
 8004ed2:	eb49 0303 	adc.w	r3, r9, r3
 8004ed6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004ee6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004eea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004eee:	460b      	mov	r3, r1
 8004ef0:	18db      	adds	r3, r3, r3
 8004ef2:	653b      	str	r3, [r7, #80]	; 0x50
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	eb42 0303 	adc.w	r3, r2, r3
 8004efa:	657b      	str	r3, [r7, #84]	; 0x54
 8004efc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004f00:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004f04:	f7fb fea8 	bl	8000c58 <__aeabi_uldivmod>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	4b61      	ldr	r3, [pc, #388]	; (8005094 <UART_SetConfig+0x2d4>)
 8004f0e:	fba3 2302 	umull	r2, r3, r3, r2
 8004f12:	095b      	lsrs	r3, r3, #5
 8004f14:	011c      	lsls	r4, r3, #4
 8004f16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f20:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004f24:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004f28:	4642      	mov	r2, r8
 8004f2a:	464b      	mov	r3, r9
 8004f2c:	1891      	adds	r1, r2, r2
 8004f2e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004f30:	415b      	adcs	r3, r3
 8004f32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f34:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004f38:	4641      	mov	r1, r8
 8004f3a:	eb12 0a01 	adds.w	sl, r2, r1
 8004f3e:	4649      	mov	r1, r9
 8004f40:	eb43 0b01 	adc.w	fp, r3, r1
 8004f44:	f04f 0200 	mov.w	r2, #0
 8004f48:	f04f 0300 	mov.w	r3, #0
 8004f4c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004f50:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004f54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f58:	4692      	mov	sl, r2
 8004f5a:	469b      	mov	fp, r3
 8004f5c:	4643      	mov	r3, r8
 8004f5e:	eb1a 0303 	adds.w	r3, sl, r3
 8004f62:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004f66:	464b      	mov	r3, r9
 8004f68:	eb4b 0303 	adc.w	r3, fp, r3
 8004f6c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f7c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004f80:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004f84:	460b      	mov	r3, r1
 8004f86:	18db      	adds	r3, r3, r3
 8004f88:	643b      	str	r3, [r7, #64]	; 0x40
 8004f8a:	4613      	mov	r3, r2
 8004f8c:	eb42 0303 	adc.w	r3, r2, r3
 8004f90:	647b      	str	r3, [r7, #68]	; 0x44
 8004f92:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004f96:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004f9a:	f7fb fe5d 	bl	8000c58 <__aeabi_uldivmod>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	460b      	mov	r3, r1
 8004fa2:	4611      	mov	r1, r2
 8004fa4:	4b3b      	ldr	r3, [pc, #236]	; (8005094 <UART_SetConfig+0x2d4>)
 8004fa6:	fba3 2301 	umull	r2, r3, r3, r1
 8004faa:	095b      	lsrs	r3, r3, #5
 8004fac:	2264      	movs	r2, #100	; 0x64
 8004fae:	fb02 f303 	mul.w	r3, r2, r3
 8004fb2:	1acb      	subs	r3, r1, r3
 8004fb4:	00db      	lsls	r3, r3, #3
 8004fb6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004fba:	4b36      	ldr	r3, [pc, #216]	; (8005094 <UART_SetConfig+0x2d4>)
 8004fbc:	fba3 2302 	umull	r2, r3, r3, r2
 8004fc0:	095b      	lsrs	r3, r3, #5
 8004fc2:	005b      	lsls	r3, r3, #1
 8004fc4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004fc8:	441c      	add	r4, r3
 8004fca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004fd4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004fd8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004fdc:	4642      	mov	r2, r8
 8004fde:	464b      	mov	r3, r9
 8004fe0:	1891      	adds	r1, r2, r2
 8004fe2:	63b9      	str	r1, [r7, #56]	; 0x38
 8004fe4:	415b      	adcs	r3, r3
 8004fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fe8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004fec:	4641      	mov	r1, r8
 8004fee:	1851      	adds	r1, r2, r1
 8004ff0:	6339      	str	r1, [r7, #48]	; 0x30
 8004ff2:	4649      	mov	r1, r9
 8004ff4:	414b      	adcs	r3, r1
 8004ff6:	637b      	str	r3, [r7, #52]	; 0x34
 8004ff8:	f04f 0200 	mov.w	r2, #0
 8004ffc:	f04f 0300 	mov.w	r3, #0
 8005000:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005004:	4659      	mov	r1, fp
 8005006:	00cb      	lsls	r3, r1, #3
 8005008:	4651      	mov	r1, sl
 800500a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800500e:	4651      	mov	r1, sl
 8005010:	00ca      	lsls	r2, r1, #3
 8005012:	4610      	mov	r0, r2
 8005014:	4619      	mov	r1, r3
 8005016:	4603      	mov	r3, r0
 8005018:	4642      	mov	r2, r8
 800501a:	189b      	adds	r3, r3, r2
 800501c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005020:	464b      	mov	r3, r9
 8005022:	460a      	mov	r2, r1
 8005024:	eb42 0303 	adc.w	r3, r2, r3
 8005028:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800502c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005038:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800503c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005040:	460b      	mov	r3, r1
 8005042:	18db      	adds	r3, r3, r3
 8005044:	62bb      	str	r3, [r7, #40]	; 0x28
 8005046:	4613      	mov	r3, r2
 8005048:	eb42 0303 	adc.w	r3, r2, r3
 800504c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800504e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005052:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005056:	f7fb fdff 	bl	8000c58 <__aeabi_uldivmod>
 800505a:	4602      	mov	r2, r0
 800505c:	460b      	mov	r3, r1
 800505e:	4b0d      	ldr	r3, [pc, #52]	; (8005094 <UART_SetConfig+0x2d4>)
 8005060:	fba3 1302 	umull	r1, r3, r3, r2
 8005064:	095b      	lsrs	r3, r3, #5
 8005066:	2164      	movs	r1, #100	; 0x64
 8005068:	fb01 f303 	mul.w	r3, r1, r3
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	00db      	lsls	r3, r3, #3
 8005070:	3332      	adds	r3, #50	; 0x32
 8005072:	4a08      	ldr	r2, [pc, #32]	; (8005094 <UART_SetConfig+0x2d4>)
 8005074:	fba2 2303 	umull	r2, r3, r2, r3
 8005078:	095b      	lsrs	r3, r3, #5
 800507a:	f003 0207 	and.w	r2, r3, #7
 800507e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4422      	add	r2, r4
 8005086:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005088:	e105      	b.n	8005296 <UART_SetConfig+0x4d6>
 800508a:	bf00      	nop
 800508c:	40011000 	.word	0x40011000
 8005090:	40011400 	.word	0x40011400
 8005094:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005098:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800509c:	2200      	movs	r2, #0
 800509e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80050a2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80050a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80050aa:	4642      	mov	r2, r8
 80050ac:	464b      	mov	r3, r9
 80050ae:	1891      	adds	r1, r2, r2
 80050b0:	6239      	str	r1, [r7, #32]
 80050b2:	415b      	adcs	r3, r3
 80050b4:	627b      	str	r3, [r7, #36]	; 0x24
 80050b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80050ba:	4641      	mov	r1, r8
 80050bc:	1854      	adds	r4, r2, r1
 80050be:	4649      	mov	r1, r9
 80050c0:	eb43 0501 	adc.w	r5, r3, r1
 80050c4:	f04f 0200 	mov.w	r2, #0
 80050c8:	f04f 0300 	mov.w	r3, #0
 80050cc:	00eb      	lsls	r3, r5, #3
 80050ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050d2:	00e2      	lsls	r2, r4, #3
 80050d4:	4614      	mov	r4, r2
 80050d6:	461d      	mov	r5, r3
 80050d8:	4643      	mov	r3, r8
 80050da:	18e3      	adds	r3, r4, r3
 80050dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80050e0:	464b      	mov	r3, r9
 80050e2:	eb45 0303 	adc.w	r3, r5, r3
 80050e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80050ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80050f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80050fa:	f04f 0200 	mov.w	r2, #0
 80050fe:	f04f 0300 	mov.w	r3, #0
 8005102:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005106:	4629      	mov	r1, r5
 8005108:	008b      	lsls	r3, r1, #2
 800510a:	4621      	mov	r1, r4
 800510c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005110:	4621      	mov	r1, r4
 8005112:	008a      	lsls	r2, r1, #2
 8005114:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005118:	f7fb fd9e 	bl	8000c58 <__aeabi_uldivmod>
 800511c:	4602      	mov	r2, r0
 800511e:	460b      	mov	r3, r1
 8005120:	4b60      	ldr	r3, [pc, #384]	; (80052a4 <UART_SetConfig+0x4e4>)
 8005122:	fba3 2302 	umull	r2, r3, r3, r2
 8005126:	095b      	lsrs	r3, r3, #5
 8005128:	011c      	lsls	r4, r3, #4
 800512a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800512e:	2200      	movs	r2, #0
 8005130:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005134:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005138:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800513c:	4642      	mov	r2, r8
 800513e:	464b      	mov	r3, r9
 8005140:	1891      	adds	r1, r2, r2
 8005142:	61b9      	str	r1, [r7, #24]
 8005144:	415b      	adcs	r3, r3
 8005146:	61fb      	str	r3, [r7, #28]
 8005148:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800514c:	4641      	mov	r1, r8
 800514e:	1851      	adds	r1, r2, r1
 8005150:	6139      	str	r1, [r7, #16]
 8005152:	4649      	mov	r1, r9
 8005154:	414b      	adcs	r3, r1
 8005156:	617b      	str	r3, [r7, #20]
 8005158:	f04f 0200 	mov.w	r2, #0
 800515c:	f04f 0300 	mov.w	r3, #0
 8005160:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005164:	4659      	mov	r1, fp
 8005166:	00cb      	lsls	r3, r1, #3
 8005168:	4651      	mov	r1, sl
 800516a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800516e:	4651      	mov	r1, sl
 8005170:	00ca      	lsls	r2, r1, #3
 8005172:	4610      	mov	r0, r2
 8005174:	4619      	mov	r1, r3
 8005176:	4603      	mov	r3, r0
 8005178:	4642      	mov	r2, r8
 800517a:	189b      	adds	r3, r3, r2
 800517c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005180:	464b      	mov	r3, r9
 8005182:	460a      	mov	r2, r1
 8005184:	eb42 0303 	adc.w	r3, r2, r3
 8005188:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800518c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	67bb      	str	r3, [r7, #120]	; 0x78
 8005196:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005198:	f04f 0200 	mov.w	r2, #0
 800519c:	f04f 0300 	mov.w	r3, #0
 80051a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80051a4:	4649      	mov	r1, r9
 80051a6:	008b      	lsls	r3, r1, #2
 80051a8:	4641      	mov	r1, r8
 80051aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051ae:	4641      	mov	r1, r8
 80051b0:	008a      	lsls	r2, r1, #2
 80051b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80051b6:	f7fb fd4f 	bl	8000c58 <__aeabi_uldivmod>
 80051ba:	4602      	mov	r2, r0
 80051bc:	460b      	mov	r3, r1
 80051be:	4b39      	ldr	r3, [pc, #228]	; (80052a4 <UART_SetConfig+0x4e4>)
 80051c0:	fba3 1302 	umull	r1, r3, r3, r2
 80051c4:	095b      	lsrs	r3, r3, #5
 80051c6:	2164      	movs	r1, #100	; 0x64
 80051c8:	fb01 f303 	mul.w	r3, r1, r3
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	011b      	lsls	r3, r3, #4
 80051d0:	3332      	adds	r3, #50	; 0x32
 80051d2:	4a34      	ldr	r2, [pc, #208]	; (80052a4 <UART_SetConfig+0x4e4>)
 80051d4:	fba2 2303 	umull	r2, r3, r2, r3
 80051d8:	095b      	lsrs	r3, r3, #5
 80051da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051de:	441c      	add	r4, r3
 80051e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051e4:	2200      	movs	r2, #0
 80051e6:	673b      	str	r3, [r7, #112]	; 0x70
 80051e8:	677a      	str	r2, [r7, #116]	; 0x74
 80051ea:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80051ee:	4642      	mov	r2, r8
 80051f0:	464b      	mov	r3, r9
 80051f2:	1891      	adds	r1, r2, r2
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	415b      	adcs	r3, r3
 80051f8:	60fb      	str	r3, [r7, #12]
 80051fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051fe:	4641      	mov	r1, r8
 8005200:	1851      	adds	r1, r2, r1
 8005202:	6039      	str	r1, [r7, #0]
 8005204:	4649      	mov	r1, r9
 8005206:	414b      	adcs	r3, r1
 8005208:	607b      	str	r3, [r7, #4]
 800520a:	f04f 0200 	mov.w	r2, #0
 800520e:	f04f 0300 	mov.w	r3, #0
 8005212:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005216:	4659      	mov	r1, fp
 8005218:	00cb      	lsls	r3, r1, #3
 800521a:	4651      	mov	r1, sl
 800521c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005220:	4651      	mov	r1, sl
 8005222:	00ca      	lsls	r2, r1, #3
 8005224:	4610      	mov	r0, r2
 8005226:	4619      	mov	r1, r3
 8005228:	4603      	mov	r3, r0
 800522a:	4642      	mov	r2, r8
 800522c:	189b      	adds	r3, r3, r2
 800522e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005230:	464b      	mov	r3, r9
 8005232:	460a      	mov	r2, r1
 8005234:	eb42 0303 	adc.w	r3, r2, r3
 8005238:	66fb      	str	r3, [r7, #108]	; 0x6c
 800523a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	663b      	str	r3, [r7, #96]	; 0x60
 8005244:	667a      	str	r2, [r7, #100]	; 0x64
 8005246:	f04f 0200 	mov.w	r2, #0
 800524a:	f04f 0300 	mov.w	r3, #0
 800524e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005252:	4649      	mov	r1, r9
 8005254:	008b      	lsls	r3, r1, #2
 8005256:	4641      	mov	r1, r8
 8005258:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800525c:	4641      	mov	r1, r8
 800525e:	008a      	lsls	r2, r1, #2
 8005260:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005264:	f7fb fcf8 	bl	8000c58 <__aeabi_uldivmod>
 8005268:	4602      	mov	r2, r0
 800526a:	460b      	mov	r3, r1
 800526c:	4b0d      	ldr	r3, [pc, #52]	; (80052a4 <UART_SetConfig+0x4e4>)
 800526e:	fba3 1302 	umull	r1, r3, r3, r2
 8005272:	095b      	lsrs	r3, r3, #5
 8005274:	2164      	movs	r1, #100	; 0x64
 8005276:	fb01 f303 	mul.w	r3, r1, r3
 800527a:	1ad3      	subs	r3, r2, r3
 800527c:	011b      	lsls	r3, r3, #4
 800527e:	3332      	adds	r3, #50	; 0x32
 8005280:	4a08      	ldr	r2, [pc, #32]	; (80052a4 <UART_SetConfig+0x4e4>)
 8005282:	fba2 2303 	umull	r2, r3, r2, r3
 8005286:	095b      	lsrs	r3, r3, #5
 8005288:	f003 020f 	and.w	r2, r3, #15
 800528c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4422      	add	r2, r4
 8005294:	609a      	str	r2, [r3, #8]
}
 8005296:	bf00      	nop
 8005298:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800529c:	46bd      	mov	sp, r7
 800529e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052a2:	bf00      	nop
 80052a4:	51eb851f 	.word	0x51eb851f

080052a8 <__NVIC_SetPriority>:
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	4603      	mov	r3, r0
 80052b0:	6039      	str	r1, [r7, #0]
 80052b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	db0a      	blt.n	80052d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	b2da      	uxtb	r2, r3
 80052c0:	490c      	ldr	r1, [pc, #48]	; (80052f4 <__NVIC_SetPriority+0x4c>)
 80052c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052c6:	0112      	lsls	r2, r2, #4
 80052c8:	b2d2      	uxtb	r2, r2
 80052ca:	440b      	add	r3, r1
 80052cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80052d0:	e00a      	b.n	80052e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	b2da      	uxtb	r2, r3
 80052d6:	4908      	ldr	r1, [pc, #32]	; (80052f8 <__NVIC_SetPriority+0x50>)
 80052d8:	79fb      	ldrb	r3, [r7, #7]
 80052da:	f003 030f 	and.w	r3, r3, #15
 80052de:	3b04      	subs	r3, #4
 80052e0:	0112      	lsls	r2, r2, #4
 80052e2:	b2d2      	uxtb	r2, r2
 80052e4:	440b      	add	r3, r1
 80052e6:	761a      	strb	r2, [r3, #24]
}
 80052e8:	bf00      	nop
 80052ea:	370c      	adds	r7, #12
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr
 80052f4:	e000e100 	.word	0xe000e100
 80052f8:	e000ed00 	.word	0xe000ed00

080052fc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80052fc:	b580      	push	{r7, lr}
 80052fe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005300:	2100      	movs	r1, #0
 8005302:	f06f 0004 	mvn.w	r0, #4
 8005306:	f7ff ffcf 	bl	80052a8 <__NVIC_SetPriority>
#endif
}
 800530a:	bf00      	nop
 800530c:	bd80      	pop	{r7, pc}
	...

08005310 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005316:	f3ef 8305 	mrs	r3, IPSR
 800531a:	603b      	str	r3, [r7, #0]
  return(result);
 800531c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800531e:	2b00      	cmp	r3, #0
 8005320:	d003      	beq.n	800532a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005322:	f06f 0305 	mvn.w	r3, #5
 8005326:	607b      	str	r3, [r7, #4]
 8005328:	e00c      	b.n	8005344 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800532a:	4b0a      	ldr	r3, [pc, #40]	; (8005354 <osKernelInitialize+0x44>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d105      	bne.n	800533e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005332:	4b08      	ldr	r3, [pc, #32]	; (8005354 <osKernelInitialize+0x44>)
 8005334:	2201      	movs	r2, #1
 8005336:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005338:	2300      	movs	r3, #0
 800533a:	607b      	str	r3, [r7, #4]
 800533c:	e002      	b.n	8005344 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800533e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005342:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005344:	687b      	ldr	r3, [r7, #4]
}
 8005346:	4618      	mov	r0, r3
 8005348:	370c      	adds	r7, #12
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr
 8005352:	bf00      	nop
 8005354:	200003d0 	.word	0x200003d0

08005358 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005358:	b580      	push	{r7, lr}
 800535a:	b082      	sub	sp, #8
 800535c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800535e:	f3ef 8305 	mrs	r3, IPSR
 8005362:	603b      	str	r3, [r7, #0]
  return(result);
 8005364:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005366:	2b00      	cmp	r3, #0
 8005368:	d003      	beq.n	8005372 <osKernelStart+0x1a>
    stat = osErrorISR;
 800536a:	f06f 0305 	mvn.w	r3, #5
 800536e:	607b      	str	r3, [r7, #4]
 8005370:	e010      	b.n	8005394 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005372:	4b0b      	ldr	r3, [pc, #44]	; (80053a0 <osKernelStart+0x48>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	2b01      	cmp	r3, #1
 8005378:	d109      	bne.n	800538e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800537a:	f7ff ffbf 	bl	80052fc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800537e:	4b08      	ldr	r3, [pc, #32]	; (80053a0 <osKernelStart+0x48>)
 8005380:	2202      	movs	r2, #2
 8005382:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005384:	f001 f972 	bl	800666c <vTaskStartScheduler>
      stat = osOK;
 8005388:	2300      	movs	r3, #0
 800538a:	607b      	str	r3, [r7, #4]
 800538c:	e002      	b.n	8005394 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800538e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005392:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005394:	687b      	ldr	r3, [r7, #4]
}
 8005396:	4618      	mov	r0, r3
 8005398:	3708      	adds	r7, #8
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	200003d0 	.word	0x200003d0

080053a4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b08e      	sub	sp, #56	; 0x38
 80053a8:	af04      	add	r7, sp, #16
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80053b0:	2300      	movs	r3, #0
 80053b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053b4:	f3ef 8305 	mrs	r3, IPSR
 80053b8:	617b      	str	r3, [r7, #20]
  return(result);
 80053ba:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d17e      	bne.n	80054be <osThreadNew+0x11a>
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d07b      	beq.n	80054be <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80053c6:	2380      	movs	r3, #128	; 0x80
 80053c8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80053ca:	2318      	movs	r3, #24
 80053cc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80053ce:	2300      	movs	r3, #0
 80053d0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80053d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053d6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d045      	beq.n	800546a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d002      	beq.n	80053ec <osThreadNew+0x48>
        name = attr->name;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	699b      	ldr	r3, [r3, #24]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d002      	beq.n	80053fa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	699b      	ldr	r3, [r3, #24]
 80053f8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80053fa:	69fb      	ldr	r3, [r7, #28]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d008      	beq.n	8005412 <osThreadNew+0x6e>
 8005400:	69fb      	ldr	r3, [r7, #28]
 8005402:	2b38      	cmp	r3, #56	; 0x38
 8005404:	d805      	bhi.n	8005412 <osThreadNew+0x6e>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	f003 0301 	and.w	r3, r3, #1
 800540e:	2b00      	cmp	r3, #0
 8005410:	d001      	beq.n	8005416 <osThreadNew+0x72>
        return (NULL);
 8005412:	2300      	movs	r3, #0
 8005414:	e054      	b.n	80054c0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	695b      	ldr	r3, [r3, #20]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d003      	beq.n	8005426 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	695b      	ldr	r3, [r3, #20]
 8005422:	089b      	lsrs	r3, r3, #2
 8005424:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d00e      	beq.n	800544c <osThreadNew+0xa8>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	2b5b      	cmp	r3, #91	; 0x5b
 8005434:	d90a      	bls.n	800544c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800543a:	2b00      	cmp	r3, #0
 800543c:	d006      	beq.n	800544c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	695b      	ldr	r3, [r3, #20]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d002      	beq.n	800544c <osThreadNew+0xa8>
        mem = 1;
 8005446:	2301      	movs	r3, #1
 8005448:	61bb      	str	r3, [r7, #24]
 800544a:	e010      	b.n	800546e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d10c      	bne.n	800546e <osThreadNew+0xca>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d108      	bne.n	800546e <osThreadNew+0xca>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d104      	bne.n	800546e <osThreadNew+0xca>
          mem = 0;
 8005464:	2300      	movs	r3, #0
 8005466:	61bb      	str	r3, [r7, #24]
 8005468:	e001      	b.n	800546e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800546a:	2300      	movs	r3, #0
 800546c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800546e:	69bb      	ldr	r3, [r7, #24]
 8005470:	2b01      	cmp	r3, #1
 8005472:	d110      	bne.n	8005496 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800547c:	9202      	str	r2, [sp, #8]
 800547e:	9301      	str	r3, [sp, #4]
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	9300      	str	r3, [sp, #0]
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	6a3a      	ldr	r2, [r7, #32]
 8005488:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800548a:	68f8      	ldr	r0, [r7, #12]
 800548c:	f000 ff18 	bl	80062c0 <xTaskCreateStatic>
 8005490:	4603      	mov	r3, r0
 8005492:	613b      	str	r3, [r7, #16]
 8005494:	e013      	b.n	80054be <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d110      	bne.n	80054be <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800549c:	6a3b      	ldr	r3, [r7, #32]
 800549e:	b29a      	uxth	r2, r3
 80054a0:	f107 0310 	add.w	r3, r7, #16
 80054a4:	9301      	str	r3, [sp, #4]
 80054a6:	69fb      	ldr	r3, [r7, #28]
 80054a8:	9300      	str	r3, [sp, #0]
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80054ae:	68f8      	ldr	r0, [r7, #12]
 80054b0:	f000 ff63 	bl	800637a <xTaskCreate>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d001      	beq.n	80054be <osThreadNew+0x11a>
            hTask = NULL;
 80054ba:	2300      	movs	r3, #0
 80054bc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80054be:	693b      	ldr	r3, [r7, #16]
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3728      	adds	r7, #40	; 0x28
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054d0:	f3ef 8305 	mrs	r3, IPSR
 80054d4:	60bb      	str	r3, [r7, #8]
  return(result);
 80054d6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d003      	beq.n	80054e4 <osDelay+0x1c>
    stat = osErrorISR;
 80054dc:	f06f 0305 	mvn.w	r3, #5
 80054e0:	60fb      	str	r3, [r7, #12]
 80054e2:	e007      	b.n	80054f4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80054e4:	2300      	movs	r3, #0
 80054e6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d002      	beq.n	80054f4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f001 f888 	bl	8006604 <vTaskDelay>
    }
  }

  return (stat);
 80054f4:	68fb      	ldr	r3, [r7, #12]
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3710      	adds	r7, #16
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}

080054fe <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80054fe:	b580      	push	{r7, lr}
 8005500:	b088      	sub	sp, #32
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8005506:	2300      	movs	r3, #0
 8005508:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800550a:	f3ef 8305 	mrs	r3, IPSR
 800550e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005510:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8005512:	2b00      	cmp	r3, #0
 8005514:	d174      	bne.n	8005600 <osMutexNew+0x102>
    if (attr != NULL) {
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d003      	beq.n	8005524 <osMutexNew+0x26>
      type = attr->attr_bits;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	61bb      	str	r3, [r7, #24]
 8005522:	e001      	b.n	8005528 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8005524:	2300      	movs	r3, #0
 8005526:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005528:	69bb      	ldr	r3, [r7, #24]
 800552a:	f003 0301 	and.w	r3, r3, #1
 800552e:	2b00      	cmp	r3, #0
 8005530:	d002      	beq.n	8005538 <osMutexNew+0x3a>
      rmtx = 1U;
 8005532:	2301      	movs	r3, #1
 8005534:	617b      	str	r3, [r7, #20]
 8005536:	e001      	b.n	800553c <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8005538:	2300      	movs	r3, #0
 800553a:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800553c:	69bb      	ldr	r3, [r7, #24]
 800553e:	f003 0308 	and.w	r3, r3, #8
 8005542:	2b00      	cmp	r3, #0
 8005544:	d15c      	bne.n	8005600 <osMutexNew+0x102>
      mem = -1;
 8005546:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800554a:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d015      	beq.n	800557e <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d006      	beq.n	8005568 <osMutexNew+0x6a>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	2b4f      	cmp	r3, #79	; 0x4f
 8005560:	d902      	bls.n	8005568 <osMutexNew+0x6a>
          mem = 1;
 8005562:	2301      	movs	r3, #1
 8005564:	613b      	str	r3, [r7, #16]
 8005566:	e00c      	b.n	8005582 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d108      	bne.n	8005582 <osMutexNew+0x84>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d104      	bne.n	8005582 <osMutexNew+0x84>
            mem = 0;
 8005578:	2300      	movs	r3, #0
 800557a:	613b      	str	r3, [r7, #16]
 800557c:	e001      	b.n	8005582 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800557e:	2300      	movs	r3, #0
 8005580:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	2b01      	cmp	r3, #1
 8005586:	d112      	bne.n	80055ae <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d007      	beq.n	800559e <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	4619      	mov	r1, r3
 8005594:	2004      	movs	r0, #4
 8005596:	f000 fa90 	bl	8005aba <xQueueCreateMutexStatic>
 800559a:	61f8      	str	r0, [r7, #28]
 800559c:	e016      	b.n	80055cc <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	4619      	mov	r1, r3
 80055a4:	2001      	movs	r0, #1
 80055a6:	f000 fa88 	bl	8005aba <xQueueCreateMutexStatic>
 80055aa:	61f8      	str	r0, [r7, #28]
 80055ac:	e00e      	b.n	80055cc <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d10b      	bne.n	80055cc <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d004      	beq.n	80055c4 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80055ba:	2004      	movs	r0, #4
 80055bc:	f000 fa65 	bl	8005a8a <xQueueCreateMutex>
 80055c0:	61f8      	str	r0, [r7, #28]
 80055c2:	e003      	b.n	80055cc <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80055c4:	2001      	movs	r0, #1
 80055c6:	f000 fa60 	bl	8005a8a <xQueueCreateMutex>
 80055ca:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00c      	beq.n	80055ec <osMutexNew+0xee>
        if (attr != NULL) {
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d003      	beq.n	80055e0 <osMutexNew+0xe2>
          name = attr->name;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	60fb      	str	r3, [r7, #12]
 80055de:	e001      	b.n	80055e4 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80055e0:	2300      	movs	r3, #0
 80055e2:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80055e4:	68f9      	ldr	r1, [r7, #12]
 80055e6:	69f8      	ldr	r0, [r7, #28]
 80055e8:	f000 fe0c 	bl	8006204 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d006      	beq.n	8005600 <osMutexNew+0x102>
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d003      	beq.n	8005600 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	f043 0301 	orr.w	r3, r3, #1
 80055fe:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005600:	69fb      	ldr	r3, [r7, #28]
}
 8005602:	4618      	mov	r0, r3
 8005604:	3720      	adds	r7, #32
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
	...

0800560c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800560c:	b480      	push	{r7}
 800560e:	b085      	sub	sp, #20
 8005610:	af00      	add	r7, sp, #0
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	4a07      	ldr	r2, [pc, #28]	; (8005638 <vApplicationGetIdleTaskMemory+0x2c>)
 800561c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	4a06      	ldr	r2, [pc, #24]	; (800563c <vApplicationGetIdleTaskMemory+0x30>)
 8005622:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2280      	movs	r2, #128	; 0x80
 8005628:	601a      	str	r2, [r3, #0]
}
 800562a:	bf00      	nop
 800562c:	3714      	adds	r7, #20
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr
 8005636:	bf00      	nop
 8005638:	200003d4 	.word	0x200003d4
 800563c:	20000430 	.word	0x20000430

08005640 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005640:	b480      	push	{r7}
 8005642:	b085      	sub	sp, #20
 8005644:	af00      	add	r7, sp, #0
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	4a07      	ldr	r2, [pc, #28]	; (800566c <vApplicationGetTimerTaskMemory+0x2c>)
 8005650:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	4a06      	ldr	r2, [pc, #24]	; (8005670 <vApplicationGetTimerTaskMemory+0x30>)
 8005656:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800565e:	601a      	str	r2, [r3, #0]
}
 8005660:	bf00      	nop
 8005662:	3714      	adds	r7, #20
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr
 800566c:	20000630 	.word	0x20000630
 8005670:	2000068c 	.word	0x2000068c

08005674 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f103 0208 	add.w	r2, r3, #8
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800568c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f103 0208 	add.w	r2, r3, #8
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f103 0208 	add.w	r2, r3, #8
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80056a8:	bf00      	nop
 80056aa:	370c      	adds	r7, #12
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80056b4:	b480      	push	{r7}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80056c2:	bf00      	nop
 80056c4:	370c      	adds	r7, #12
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr

080056ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80056ce:	b480      	push	{r7}
 80056d0:	b085      	sub	sp, #20
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
 80056d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	68fa      	ldr	r2, [r7, #12]
 80056e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	689a      	ldr	r2, [r3, #8]
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	683a      	ldr	r2, [r7, #0]
 80056f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	683a      	ldr	r2, [r7, #0]
 80056f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	1c5a      	adds	r2, r3, #1
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	601a      	str	r2, [r3, #0]
}
 800570a:	bf00      	nop
 800570c:	3714      	adds	r7, #20
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr

08005716 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005716:	b480      	push	{r7}
 8005718:	b085      	sub	sp, #20
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
 800571e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800572c:	d103      	bne.n	8005736 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	60fb      	str	r3, [r7, #12]
 8005734:	e00c      	b.n	8005750 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	3308      	adds	r3, #8
 800573a:	60fb      	str	r3, [r7, #12]
 800573c:	e002      	b.n	8005744 <vListInsert+0x2e>
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	60fb      	str	r3, [r7, #12]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	68ba      	ldr	r2, [r7, #8]
 800574c:	429a      	cmp	r2, r3
 800574e:	d2f6      	bcs.n	800573e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	685a      	ldr	r2, [r3, #4]
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	683a      	ldr	r2, [r7, #0]
 800575e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	683a      	ldr	r2, [r7, #0]
 800576a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	1c5a      	adds	r2, r3, #1
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	601a      	str	r2, [r3, #0]
}
 800577c:	bf00      	nop
 800577e:	3714      	adds	r7, #20
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005788:	b480      	push	{r7}
 800578a:	b085      	sub	sp, #20
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	691b      	ldr	r3, [r3, #16]
 8005794:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	6892      	ldr	r2, [r2, #8]
 800579e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	6852      	ldr	r2, [r2, #4]
 80057a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d103      	bne.n	80057bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	689a      	ldr	r2, [r3, #8]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	1e5a      	subs	r2, r3, #1
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3714      	adds	r7, #20
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr

080057dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d10a      	bne.n	8005806 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80057f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f4:	f383 8811 	msr	BASEPRI, r3
 80057f8:	f3bf 8f6f 	isb	sy
 80057fc:	f3bf 8f4f 	dsb	sy
 8005800:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005802:	bf00      	nop
 8005804:	e7fe      	b.n	8005804 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005806:	f002 f8d5 	bl	80079b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005812:	68f9      	ldr	r1, [r7, #12]
 8005814:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005816:	fb01 f303 	mul.w	r3, r1, r3
 800581a:	441a      	add	r2, r3
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2200      	movs	r2, #0
 8005824:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005836:	3b01      	subs	r3, #1
 8005838:	68f9      	ldr	r1, [r7, #12]
 800583a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800583c:	fb01 f303 	mul.w	r3, r1, r3
 8005840:	441a      	add	r2, r3
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	22ff      	movs	r2, #255	; 0xff
 800584a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	22ff      	movs	r2, #255	; 0xff
 8005852:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d114      	bne.n	8005886 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d01a      	beq.n	800589a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	3310      	adds	r3, #16
 8005868:	4618      	mov	r0, r3
 800586a:	f001 f989 	bl	8006b80 <xTaskRemoveFromEventList>
 800586e:	4603      	mov	r3, r0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d012      	beq.n	800589a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005874:	4b0c      	ldr	r3, [pc, #48]	; (80058a8 <xQueueGenericReset+0xcc>)
 8005876:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800587a:	601a      	str	r2, [r3, #0]
 800587c:	f3bf 8f4f 	dsb	sy
 8005880:	f3bf 8f6f 	isb	sy
 8005884:	e009      	b.n	800589a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	3310      	adds	r3, #16
 800588a:	4618      	mov	r0, r3
 800588c:	f7ff fef2 	bl	8005674 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	3324      	adds	r3, #36	; 0x24
 8005894:	4618      	mov	r0, r3
 8005896:	f7ff feed 	bl	8005674 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800589a:	f002 f8bb 	bl	8007a14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800589e:	2301      	movs	r3, #1
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3710      	adds	r7, #16
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	e000ed04 	.word	0xe000ed04

080058ac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b08e      	sub	sp, #56	; 0x38
 80058b0:	af02      	add	r7, sp, #8
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	607a      	str	r2, [r7, #4]
 80058b8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d10a      	bne.n	80058d6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80058c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c4:	f383 8811 	msr	BASEPRI, r3
 80058c8:	f3bf 8f6f 	isb	sy
 80058cc:	f3bf 8f4f 	dsb	sy
 80058d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80058d2:	bf00      	nop
 80058d4:	e7fe      	b.n	80058d4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d10a      	bne.n	80058f2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80058dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e0:	f383 8811 	msr	BASEPRI, r3
 80058e4:	f3bf 8f6f 	isb	sy
 80058e8:	f3bf 8f4f 	dsb	sy
 80058ec:	627b      	str	r3, [r7, #36]	; 0x24
}
 80058ee:	bf00      	nop
 80058f0:	e7fe      	b.n	80058f0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d002      	beq.n	80058fe <xQueueGenericCreateStatic+0x52>
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d001      	beq.n	8005902 <xQueueGenericCreateStatic+0x56>
 80058fe:	2301      	movs	r3, #1
 8005900:	e000      	b.n	8005904 <xQueueGenericCreateStatic+0x58>
 8005902:	2300      	movs	r3, #0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d10a      	bne.n	800591e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800590c:	f383 8811 	msr	BASEPRI, r3
 8005910:	f3bf 8f6f 	isb	sy
 8005914:	f3bf 8f4f 	dsb	sy
 8005918:	623b      	str	r3, [r7, #32]
}
 800591a:	bf00      	nop
 800591c:	e7fe      	b.n	800591c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d102      	bne.n	800592a <xQueueGenericCreateStatic+0x7e>
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d101      	bne.n	800592e <xQueueGenericCreateStatic+0x82>
 800592a:	2301      	movs	r3, #1
 800592c:	e000      	b.n	8005930 <xQueueGenericCreateStatic+0x84>
 800592e:	2300      	movs	r3, #0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d10a      	bne.n	800594a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005938:	f383 8811 	msr	BASEPRI, r3
 800593c:	f3bf 8f6f 	isb	sy
 8005940:	f3bf 8f4f 	dsb	sy
 8005944:	61fb      	str	r3, [r7, #28]
}
 8005946:	bf00      	nop
 8005948:	e7fe      	b.n	8005948 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800594a:	2350      	movs	r3, #80	; 0x50
 800594c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	2b50      	cmp	r3, #80	; 0x50
 8005952:	d00a      	beq.n	800596a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005958:	f383 8811 	msr	BASEPRI, r3
 800595c:	f3bf 8f6f 	isb	sy
 8005960:	f3bf 8f4f 	dsb	sy
 8005964:	61bb      	str	r3, [r7, #24]
}
 8005966:	bf00      	nop
 8005968:	e7fe      	b.n	8005968 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800596a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005972:	2b00      	cmp	r3, #0
 8005974:	d00d      	beq.n	8005992 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005978:	2201      	movs	r2, #1
 800597a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800597e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005984:	9300      	str	r3, [sp, #0]
 8005986:	4613      	mov	r3, r2
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	68b9      	ldr	r1, [r7, #8]
 800598c:	68f8      	ldr	r0, [r7, #12]
 800598e:	f000 f83f 	bl	8005a10 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005994:	4618      	mov	r0, r3
 8005996:	3730      	adds	r7, #48	; 0x30
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800599c:	b580      	push	{r7, lr}
 800599e:	b08a      	sub	sp, #40	; 0x28
 80059a0:	af02      	add	r7, sp, #8
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	60b9      	str	r1, [r7, #8]
 80059a6:	4613      	mov	r3, r2
 80059a8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d10a      	bne.n	80059c6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80059b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b4:	f383 8811 	msr	BASEPRI, r3
 80059b8:	f3bf 8f6f 	isb	sy
 80059bc:	f3bf 8f4f 	dsb	sy
 80059c0:	613b      	str	r3, [r7, #16]
}
 80059c2:	bf00      	nop
 80059c4:	e7fe      	b.n	80059c4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	68ba      	ldr	r2, [r7, #8]
 80059ca:	fb02 f303 	mul.w	r3, r2, r3
 80059ce:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	3350      	adds	r3, #80	; 0x50
 80059d4:	4618      	mov	r0, r3
 80059d6:	f002 f90f 	bl	8007bf8 <pvPortMalloc>
 80059da:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d011      	beq.n	8005a06 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	3350      	adds	r3, #80	; 0x50
 80059ea:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80059ec:	69bb      	ldr	r3, [r7, #24]
 80059ee:	2200      	movs	r2, #0
 80059f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80059f4:	79fa      	ldrb	r2, [r7, #7]
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	9300      	str	r3, [sp, #0]
 80059fa:	4613      	mov	r3, r2
 80059fc:	697a      	ldr	r2, [r7, #20]
 80059fe:	68b9      	ldr	r1, [r7, #8]
 8005a00:	68f8      	ldr	r0, [r7, #12]
 8005a02:	f000 f805 	bl	8005a10 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005a06:	69bb      	ldr	r3, [r7, #24]
	}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3720      	adds	r7, #32
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	60b9      	str	r1, [r7, #8]
 8005a1a:	607a      	str	r2, [r7, #4]
 8005a1c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d103      	bne.n	8005a2c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005a24:	69bb      	ldr	r3, [r7, #24]
 8005a26:	69ba      	ldr	r2, [r7, #24]
 8005a28:	601a      	str	r2, [r3, #0]
 8005a2a:	e002      	b.n	8005a32 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005a2c:	69bb      	ldr	r3, [r7, #24]
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005a32:	69bb      	ldr	r3, [r7, #24]
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	68ba      	ldr	r2, [r7, #8]
 8005a3c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005a3e:	2101      	movs	r1, #1
 8005a40:	69b8      	ldr	r0, [r7, #24]
 8005a42:	f7ff fecb 	bl	80057dc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	78fa      	ldrb	r2, [r7, #3]
 8005a4a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005a4e:	bf00      	nop
 8005a50:	3710      	adds	r7, #16
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}

08005a56 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005a56:	b580      	push	{r7, lr}
 8005a58:	b082      	sub	sp, #8
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d00e      	beq.n	8005a82 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005a76:	2300      	movs	r3, #0
 8005a78:	2200      	movs	r2, #0
 8005a7a:	2100      	movs	r1, #0
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f000 f837 	bl	8005af0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005a82:	bf00      	nop
 8005a84:	3708      	adds	r7, #8
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}

08005a8a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005a8a:	b580      	push	{r7, lr}
 8005a8c:	b086      	sub	sp, #24
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	4603      	mov	r3, r0
 8005a92:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005a94:	2301      	movs	r3, #1
 8005a96:	617b      	str	r3, [r7, #20]
 8005a98:	2300      	movs	r3, #0
 8005a9a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005a9c:	79fb      	ldrb	r3, [r7, #7]
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	6939      	ldr	r1, [r7, #16]
 8005aa2:	6978      	ldr	r0, [r7, #20]
 8005aa4:	f7ff ff7a 	bl	800599c <xQueueGenericCreate>
 8005aa8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005aaa:	68f8      	ldr	r0, [r7, #12]
 8005aac:	f7ff ffd3 	bl	8005a56 <prvInitialiseMutex>

		return xNewQueue;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
	}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3718      	adds	r7, #24
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}

08005aba <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005aba:	b580      	push	{r7, lr}
 8005abc:	b088      	sub	sp, #32
 8005abe:	af02      	add	r7, sp, #8
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	6039      	str	r1, [r7, #0]
 8005ac4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	617b      	str	r3, [r7, #20]
 8005aca:	2300      	movs	r3, #0
 8005acc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005ace:	79fb      	ldrb	r3, [r7, #7]
 8005ad0:	9300      	str	r3, [sp, #0]
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	6939      	ldr	r1, [r7, #16]
 8005ad8:	6978      	ldr	r0, [r7, #20]
 8005ada:	f7ff fee7 	bl	80058ac <xQueueGenericCreateStatic>
 8005ade:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005ae0:	68f8      	ldr	r0, [r7, #12]
 8005ae2:	f7ff ffb8 	bl	8005a56 <prvInitialiseMutex>

		return xNewQueue;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
	}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3718      	adds	r7, #24
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b08e      	sub	sp, #56	; 0x38
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	60b9      	str	r1, [r7, #8]
 8005afa:	607a      	str	r2, [r7, #4]
 8005afc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005afe:	2300      	movs	r3, #0
 8005b00:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d10a      	bne.n	8005b22 <xQueueGenericSend+0x32>
	__asm volatile
 8005b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b10:	f383 8811 	msr	BASEPRI, r3
 8005b14:	f3bf 8f6f 	isb	sy
 8005b18:	f3bf 8f4f 	dsb	sy
 8005b1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005b1e:	bf00      	nop
 8005b20:	e7fe      	b.n	8005b20 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d103      	bne.n	8005b30 <xQueueGenericSend+0x40>
 8005b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d101      	bne.n	8005b34 <xQueueGenericSend+0x44>
 8005b30:	2301      	movs	r3, #1
 8005b32:	e000      	b.n	8005b36 <xQueueGenericSend+0x46>
 8005b34:	2300      	movs	r3, #0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d10a      	bne.n	8005b50 <xQueueGenericSend+0x60>
	__asm volatile
 8005b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b3e:	f383 8811 	msr	BASEPRI, r3
 8005b42:	f3bf 8f6f 	isb	sy
 8005b46:	f3bf 8f4f 	dsb	sy
 8005b4a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005b4c:	bf00      	nop
 8005b4e:	e7fe      	b.n	8005b4e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	2b02      	cmp	r3, #2
 8005b54:	d103      	bne.n	8005b5e <xQueueGenericSend+0x6e>
 8005b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d101      	bne.n	8005b62 <xQueueGenericSend+0x72>
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e000      	b.n	8005b64 <xQueueGenericSend+0x74>
 8005b62:	2300      	movs	r3, #0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d10a      	bne.n	8005b7e <xQueueGenericSend+0x8e>
	__asm volatile
 8005b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b6c:	f383 8811 	msr	BASEPRI, r3
 8005b70:	f3bf 8f6f 	isb	sy
 8005b74:	f3bf 8f4f 	dsb	sy
 8005b78:	623b      	str	r3, [r7, #32]
}
 8005b7a:	bf00      	nop
 8005b7c:	e7fe      	b.n	8005b7c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b7e:	f001 f9bd 	bl	8006efc <xTaskGetSchedulerState>
 8005b82:	4603      	mov	r3, r0
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d102      	bne.n	8005b8e <xQueueGenericSend+0x9e>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d101      	bne.n	8005b92 <xQueueGenericSend+0xa2>
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e000      	b.n	8005b94 <xQueueGenericSend+0xa4>
 8005b92:	2300      	movs	r3, #0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d10a      	bne.n	8005bae <xQueueGenericSend+0xbe>
	__asm volatile
 8005b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b9c:	f383 8811 	msr	BASEPRI, r3
 8005ba0:	f3bf 8f6f 	isb	sy
 8005ba4:	f3bf 8f4f 	dsb	sy
 8005ba8:	61fb      	str	r3, [r7, #28]
}
 8005baa:	bf00      	nop
 8005bac:	e7fe      	b.n	8005bac <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005bae:	f001 ff01 	bl	80079b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d302      	bcc.n	8005bc4 <xQueueGenericSend+0xd4>
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	2b02      	cmp	r3, #2
 8005bc2:	d129      	bne.n	8005c18 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005bc4:	683a      	ldr	r2, [r7, #0]
 8005bc6:	68b9      	ldr	r1, [r7, #8]
 8005bc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005bca:	f000 fa0b 	bl	8005fe4 <prvCopyDataToQueue>
 8005bce:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d010      	beq.n	8005bfa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bda:	3324      	adds	r3, #36	; 0x24
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f000 ffcf 	bl	8006b80 <xTaskRemoveFromEventList>
 8005be2:	4603      	mov	r3, r0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d013      	beq.n	8005c10 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005be8:	4b3f      	ldr	r3, [pc, #252]	; (8005ce8 <xQueueGenericSend+0x1f8>)
 8005bea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bee:	601a      	str	r2, [r3, #0]
 8005bf0:	f3bf 8f4f 	dsb	sy
 8005bf4:	f3bf 8f6f 	isb	sy
 8005bf8:	e00a      	b.n	8005c10 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d007      	beq.n	8005c10 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005c00:	4b39      	ldr	r3, [pc, #228]	; (8005ce8 <xQueueGenericSend+0x1f8>)
 8005c02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c06:	601a      	str	r2, [r3, #0]
 8005c08:	f3bf 8f4f 	dsb	sy
 8005c0c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005c10:	f001 ff00 	bl	8007a14 <vPortExitCritical>
				return pdPASS;
 8005c14:	2301      	movs	r3, #1
 8005c16:	e063      	b.n	8005ce0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d103      	bne.n	8005c26 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005c1e:	f001 fef9 	bl	8007a14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005c22:	2300      	movs	r3, #0
 8005c24:	e05c      	b.n	8005ce0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d106      	bne.n	8005c3a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c2c:	f107 0314 	add.w	r3, r7, #20
 8005c30:	4618      	mov	r0, r3
 8005c32:	f001 f809 	bl	8006c48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c36:	2301      	movs	r3, #1
 8005c38:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c3a:	f001 feeb 	bl	8007a14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c3e:	f000 fd7b 	bl	8006738 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c42:	f001 feb7 	bl	80079b4 <vPortEnterCritical>
 8005c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c4c:	b25b      	sxtb	r3, r3
 8005c4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c52:	d103      	bne.n	8005c5c <xQueueGenericSend+0x16c>
 8005c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c56:	2200      	movs	r2, #0
 8005c58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c62:	b25b      	sxtb	r3, r3
 8005c64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c68:	d103      	bne.n	8005c72 <xQueueGenericSend+0x182>
 8005c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c72:	f001 fecf 	bl	8007a14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c76:	1d3a      	adds	r2, r7, #4
 8005c78:	f107 0314 	add.w	r3, r7, #20
 8005c7c:	4611      	mov	r1, r2
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f000 fff8 	bl	8006c74 <xTaskCheckForTimeOut>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d124      	bne.n	8005cd4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005c8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c8c:	f000 faa2 	bl	80061d4 <prvIsQueueFull>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d018      	beq.n	8005cc8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c98:	3310      	adds	r3, #16
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	4611      	mov	r1, r2
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f000 ff1e 	bl	8006ae0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005ca4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ca6:	f000 fa2d 	bl	8006104 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005caa:	f000 fd53 	bl	8006754 <xTaskResumeAll>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	f47f af7c 	bne.w	8005bae <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005cb6:	4b0c      	ldr	r3, [pc, #48]	; (8005ce8 <xQueueGenericSend+0x1f8>)
 8005cb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cbc:	601a      	str	r2, [r3, #0]
 8005cbe:	f3bf 8f4f 	dsb	sy
 8005cc2:	f3bf 8f6f 	isb	sy
 8005cc6:	e772      	b.n	8005bae <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005cc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005cca:	f000 fa1b 	bl	8006104 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005cce:	f000 fd41 	bl	8006754 <xTaskResumeAll>
 8005cd2:	e76c      	b.n	8005bae <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005cd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005cd6:	f000 fa15 	bl	8006104 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005cda:	f000 fd3b 	bl	8006754 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005cde:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3738      	adds	r7, #56	; 0x38
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}
 8005ce8:	e000ed04 	.word	0xe000ed04

08005cec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b090      	sub	sp, #64	; 0x40
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	60f8      	str	r0, [r7, #12]
 8005cf4:	60b9      	str	r1, [r7, #8]
 8005cf6:	607a      	str	r2, [r7, #4]
 8005cf8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d10a      	bne.n	8005d1a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d08:	f383 8811 	msr	BASEPRI, r3
 8005d0c:	f3bf 8f6f 	isb	sy
 8005d10:	f3bf 8f4f 	dsb	sy
 8005d14:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005d16:	bf00      	nop
 8005d18:	e7fe      	b.n	8005d18 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d103      	bne.n	8005d28 <xQueueGenericSendFromISR+0x3c>
 8005d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d101      	bne.n	8005d2c <xQueueGenericSendFromISR+0x40>
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e000      	b.n	8005d2e <xQueueGenericSendFromISR+0x42>
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d10a      	bne.n	8005d48 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d36:	f383 8811 	msr	BASEPRI, r3
 8005d3a:	f3bf 8f6f 	isb	sy
 8005d3e:	f3bf 8f4f 	dsb	sy
 8005d42:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005d44:	bf00      	nop
 8005d46:	e7fe      	b.n	8005d46 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	2b02      	cmp	r3, #2
 8005d4c:	d103      	bne.n	8005d56 <xQueueGenericSendFromISR+0x6a>
 8005d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d101      	bne.n	8005d5a <xQueueGenericSendFromISR+0x6e>
 8005d56:	2301      	movs	r3, #1
 8005d58:	e000      	b.n	8005d5c <xQueueGenericSendFromISR+0x70>
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d10a      	bne.n	8005d76 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d64:	f383 8811 	msr	BASEPRI, r3
 8005d68:	f3bf 8f6f 	isb	sy
 8005d6c:	f3bf 8f4f 	dsb	sy
 8005d70:	623b      	str	r3, [r7, #32]
}
 8005d72:	bf00      	nop
 8005d74:	e7fe      	b.n	8005d74 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005d76:	f001 feff 	bl	8007b78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005d7a:	f3ef 8211 	mrs	r2, BASEPRI
 8005d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d82:	f383 8811 	msr	BASEPRI, r3
 8005d86:	f3bf 8f6f 	isb	sy
 8005d8a:	f3bf 8f4f 	dsb	sy
 8005d8e:	61fa      	str	r2, [r7, #28]
 8005d90:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005d92:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005d94:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d302      	bcc.n	8005da8 <xQueueGenericSendFromISR+0xbc>
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	2b02      	cmp	r3, #2
 8005da6:	d12f      	bne.n	8005e08 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005daa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005dae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005db8:	683a      	ldr	r2, [r7, #0]
 8005dba:	68b9      	ldr	r1, [r7, #8]
 8005dbc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005dbe:	f000 f911 	bl	8005fe4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005dc2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005dc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005dca:	d112      	bne.n	8005df2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d016      	beq.n	8005e02 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd6:	3324      	adds	r3, #36	; 0x24
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f000 fed1 	bl	8006b80 <xTaskRemoveFromEventList>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d00e      	beq.n	8005e02 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d00b      	beq.n	8005e02 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2201      	movs	r2, #1
 8005dee:	601a      	str	r2, [r3, #0]
 8005df0:	e007      	b.n	8005e02 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005df2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005df6:	3301      	adds	r3, #1
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	b25a      	sxtb	r2, r3
 8005dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005e02:	2301      	movs	r3, #1
 8005e04:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005e06:	e001      	b.n	8005e0c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e0e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005e16:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005e18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3740      	adds	r7, #64	; 0x40
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
	...

08005e24 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b08c      	sub	sp, #48	; 0x30
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005e30:	2300      	movs	r3, #0
 8005e32:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d10a      	bne.n	8005e54 <xQueueReceive+0x30>
	__asm volatile
 8005e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e42:	f383 8811 	msr	BASEPRI, r3
 8005e46:	f3bf 8f6f 	isb	sy
 8005e4a:	f3bf 8f4f 	dsb	sy
 8005e4e:	623b      	str	r3, [r7, #32]
}
 8005e50:	bf00      	nop
 8005e52:	e7fe      	b.n	8005e52 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d103      	bne.n	8005e62 <xQueueReceive+0x3e>
 8005e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d101      	bne.n	8005e66 <xQueueReceive+0x42>
 8005e62:	2301      	movs	r3, #1
 8005e64:	e000      	b.n	8005e68 <xQueueReceive+0x44>
 8005e66:	2300      	movs	r3, #0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d10a      	bne.n	8005e82 <xQueueReceive+0x5e>
	__asm volatile
 8005e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e70:	f383 8811 	msr	BASEPRI, r3
 8005e74:	f3bf 8f6f 	isb	sy
 8005e78:	f3bf 8f4f 	dsb	sy
 8005e7c:	61fb      	str	r3, [r7, #28]
}
 8005e7e:	bf00      	nop
 8005e80:	e7fe      	b.n	8005e80 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e82:	f001 f83b 	bl	8006efc <xTaskGetSchedulerState>
 8005e86:	4603      	mov	r3, r0
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d102      	bne.n	8005e92 <xQueueReceive+0x6e>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d101      	bne.n	8005e96 <xQueueReceive+0x72>
 8005e92:	2301      	movs	r3, #1
 8005e94:	e000      	b.n	8005e98 <xQueueReceive+0x74>
 8005e96:	2300      	movs	r3, #0
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d10a      	bne.n	8005eb2 <xQueueReceive+0x8e>
	__asm volatile
 8005e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea0:	f383 8811 	msr	BASEPRI, r3
 8005ea4:	f3bf 8f6f 	isb	sy
 8005ea8:	f3bf 8f4f 	dsb	sy
 8005eac:	61bb      	str	r3, [r7, #24]
}
 8005eae:	bf00      	nop
 8005eb0:	e7fe      	b.n	8005eb0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005eb2:	f001 fd7f 	bl	80079b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eba:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d01f      	beq.n	8005f02 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005ec2:	68b9      	ldr	r1, [r7, #8]
 8005ec4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ec6:	f000 f8f7 	bl	80060b8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ecc:	1e5a      	subs	r2, r3, #1
 8005ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d00f      	beq.n	8005efa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005edc:	3310      	adds	r3, #16
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f000 fe4e 	bl	8006b80 <xTaskRemoveFromEventList>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d007      	beq.n	8005efa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005eea:	4b3d      	ldr	r3, [pc, #244]	; (8005fe0 <xQueueReceive+0x1bc>)
 8005eec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ef0:	601a      	str	r2, [r3, #0]
 8005ef2:	f3bf 8f4f 	dsb	sy
 8005ef6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005efa:	f001 fd8b 	bl	8007a14 <vPortExitCritical>
				return pdPASS;
 8005efe:	2301      	movs	r3, #1
 8005f00:	e069      	b.n	8005fd6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d103      	bne.n	8005f10 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005f08:	f001 fd84 	bl	8007a14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	e062      	b.n	8005fd6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d106      	bne.n	8005f24 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005f16:	f107 0310 	add.w	r3, r7, #16
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f000 fe94 	bl	8006c48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005f20:	2301      	movs	r3, #1
 8005f22:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005f24:	f001 fd76 	bl	8007a14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005f28:	f000 fc06 	bl	8006738 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f2c:	f001 fd42 	bl	80079b4 <vPortEnterCritical>
 8005f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f36:	b25b      	sxtb	r3, r3
 8005f38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f3c:	d103      	bne.n	8005f46 <xQueueReceive+0x122>
 8005f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f40:	2200      	movs	r2, #0
 8005f42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f4c:	b25b      	sxtb	r3, r3
 8005f4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f52:	d103      	bne.n	8005f5c <xQueueReceive+0x138>
 8005f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f56:	2200      	movs	r2, #0
 8005f58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f5c:	f001 fd5a 	bl	8007a14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f60:	1d3a      	adds	r2, r7, #4
 8005f62:	f107 0310 	add.w	r3, r7, #16
 8005f66:	4611      	mov	r1, r2
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f000 fe83 	bl	8006c74 <xTaskCheckForTimeOut>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d123      	bne.n	8005fbc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f76:	f000 f917 	bl	80061a8 <prvIsQueueEmpty>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d017      	beq.n	8005fb0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f82:	3324      	adds	r3, #36	; 0x24
 8005f84:	687a      	ldr	r2, [r7, #4]
 8005f86:	4611      	mov	r1, r2
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f000 fda9 	bl	8006ae0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005f8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f90:	f000 f8b8 	bl	8006104 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005f94:	f000 fbde 	bl	8006754 <xTaskResumeAll>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d189      	bne.n	8005eb2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005f9e:	4b10      	ldr	r3, [pc, #64]	; (8005fe0 <xQueueReceive+0x1bc>)
 8005fa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fa4:	601a      	str	r2, [r3, #0]
 8005fa6:	f3bf 8f4f 	dsb	sy
 8005faa:	f3bf 8f6f 	isb	sy
 8005fae:	e780      	b.n	8005eb2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005fb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fb2:	f000 f8a7 	bl	8006104 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005fb6:	f000 fbcd 	bl	8006754 <xTaskResumeAll>
 8005fba:	e77a      	b.n	8005eb2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005fbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fbe:	f000 f8a1 	bl	8006104 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005fc2:	f000 fbc7 	bl	8006754 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005fc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fc8:	f000 f8ee 	bl	80061a8 <prvIsQueueEmpty>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	f43f af6f 	beq.w	8005eb2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005fd4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3730      	adds	r7, #48	; 0x30
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}
 8005fde:	bf00      	nop
 8005fe0:	e000ed04 	.word	0xe000ed04

08005fe4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b086      	sub	sp, #24
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	60b9      	str	r1, [r7, #8]
 8005fee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d10d      	bne.n	800601e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d14d      	bne.n	80060a6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	4618      	mov	r0, r3
 8006010:	f000 ff92 	bl	8006f38 <xTaskPriorityDisinherit>
 8006014:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2200      	movs	r2, #0
 800601a:	609a      	str	r2, [r3, #8]
 800601c:	e043      	b.n	80060a6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d119      	bne.n	8006058 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6858      	ldr	r0, [r3, #4]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800602c:	461a      	mov	r2, r3
 800602e:	68b9      	ldr	r1, [r7, #8]
 8006030:	f001 fff6 	bl	8008020 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	685a      	ldr	r2, [r3, #4]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800603c:	441a      	add	r2, r3
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	685a      	ldr	r2, [r3, #4]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	429a      	cmp	r2, r3
 800604c:	d32b      	bcc.n	80060a6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	605a      	str	r2, [r3, #4]
 8006056:	e026      	b.n	80060a6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	68d8      	ldr	r0, [r3, #12]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006060:	461a      	mov	r2, r3
 8006062:	68b9      	ldr	r1, [r7, #8]
 8006064:	f001 ffdc 	bl	8008020 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	68da      	ldr	r2, [r3, #12]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006070:	425b      	negs	r3, r3
 8006072:	441a      	add	r2, r3
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	68da      	ldr	r2, [r3, #12]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	429a      	cmp	r2, r3
 8006082:	d207      	bcs.n	8006094 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	689a      	ldr	r2, [r3, #8]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800608c:	425b      	negs	r3, r3
 800608e:	441a      	add	r2, r3
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2b02      	cmp	r3, #2
 8006098:	d105      	bne.n	80060a6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d002      	beq.n	80060a6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	3b01      	subs	r3, #1
 80060a4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	1c5a      	adds	r2, r3, #1
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80060ae:	697b      	ldr	r3, [r7, #20]
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3718      	adds	r7, #24
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b082      	sub	sp, #8
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d018      	beq.n	80060fc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	68da      	ldr	r2, [r3, #12]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d2:	441a      	add	r2, r3
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	68da      	ldr	r2, [r3, #12]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d303      	bcc.n	80060ec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	68d9      	ldr	r1, [r3, #12]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f4:	461a      	mov	r2, r3
 80060f6:	6838      	ldr	r0, [r7, #0]
 80060f8:	f001 ff92 	bl	8008020 <memcpy>
	}
}
 80060fc:	bf00      	nop
 80060fe:	3708      	adds	r7, #8
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}

08006104 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b084      	sub	sp, #16
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800610c:	f001 fc52 	bl	80079b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006116:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006118:	e011      	b.n	800613e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611e:	2b00      	cmp	r3, #0
 8006120:	d012      	beq.n	8006148 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	3324      	adds	r3, #36	; 0x24
 8006126:	4618      	mov	r0, r3
 8006128:	f000 fd2a 	bl	8006b80 <xTaskRemoveFromEventList>
 800612c:	4603      	mov	r3, r0
 800612e:	2b00      	cmp	r3, #0
 8006130:	d001      	beq.n	8006136 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006132:	f000 fe01 	bl	8006d38 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006136:	7bfb      	ldrb	r3, [r7, #15]
 8006138:	3b01      	subs	r3, #1
 800613a:	b2db      	uxtb	r3, r3
 800613c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800613e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006142:	2b00      	cmp	r3, #0
 8006144:	dce9      	bgt.n	800611a <prvUnlockQueue+0x16>
 8006146:	e000      	b.n	800614a <prvUnlockQueue+0x46>
					break;
 8006148:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	22ff      	movs	r2, #255	; 0xff
 800614e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006152:	f001 fc5f 	bl	8007a14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006156:	f001 fc2d 	bl	80079b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006160:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006162:	e011      	b.n	8006188 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	691b      	ldr	r3, [r3, #16]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d012      	beq.n	8006192 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	3310      	adds	r3, #16
 8006170:	4618      	mov	r0, r3
 8006172:	f000 fd05 	bl	8006b80 <xTaskRemoveFromEventList>
 8006176:	4603      	mov	r3, r0
 8006178:	2b00      	cmp	r3, #0
 800617a:	d001      	beq.n	8006180 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800617c:	f000 fddc 	bl	8006d38 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006180:	7bbb      	ldrb	r3, [r7, #14]
 8006182:	3b01      	subs	r3, #1
 8006184:	b2db      	uxtb	r3, r3
 8006186:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006188:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800618c:	2b00      	cmp	r3, #0
 800618e:	dce9      	bgt.n	8006164 <prvUnlockQueue+0x60>
 8006190:	e000      	b.n	8006194 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006192:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	22ff      	movs	r2, #255	; 0xff
 8006198:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800619c:	f001 fc3a 	bl	8007a14 <vPortExitCritical>
}
 80061a0:	bf00      	nop
 80061a2:	3710      	adds	r7, #16
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80061b0:	f001 fc00 	bl	80079b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d102      	bne.n	80061c2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80061bc:	2301      	movs	r3, #1
 80061be:	60fb      	str	r3, [r7, #12]
 80061c0:	e001      	b.n	80061c6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80061c2:	2300      	movs	r3, #0
 80061c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80061c6:	f001 fc25 	bl	8007a14 <vPortExitCritical>

	return xReturn;
 80061ca:	68fb      	ldr	r3, [r7, #12]
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3710      	adds	r7, #16
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80061dc:	f001 fbea 	bl	80079b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d102      	bne.n	80061f2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80061ec:	2301      	movs	r3, #1
 80061ee:	60fb      	str	r3, [r7, #12]
 80061f0:	e001      	b.n	80061f6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80061f2:	2300      	movs	r3, #0
 80061f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80061f6:	f001 fc0d 	bl	8007a14 <vPortExitCritical>

	return xReturn;
 80061fa:	68fb      	ldr	r3, [r7, #12]
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3710      	adds	r7, #16
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006204:	b480      	push	{r7}
 8006206:	b085      	sub	sp, #20
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800620e:	2300      	movs	r3, #0
 8006210:	60fb      	str	r3, [r7, #12]
 8006212:	e014      	b.n	800623e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006214:	4a0f      	ldr	r2, [pc, #60]	; (8006254 <vQueueAddToRegistry+0x50>)
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d10b      	bne.n	8006238 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006220:	490c      	ldr	r1, [pc, #48]	; (8006254 <vQueueAddToRegistry+0x50>)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	683a      	ldr	r2, [r7, #0]
 8006226:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800622a:	4a0a      	ldr	r2, [pc, #40]	; (8006254 <vQueueAddToRegistry+0x50>)
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	00db      	lsls	r3, r3, #3
 8006230:	4413      	add	r3, r2
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006236:	e006      	b.n	8006246 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	3301      	adds	r3, #1
 800623c:	60fb      	str	r3, [r7, #12]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2b07      	cmp	r3, #7
 8006242:	d9e7      	bls.n	8006214 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006244:	bf00      	nop
 8006246:	bf00      	nop
 8006248:	3714      	adds	r7, #20
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr
 8006252:	bf00      	nop
 8006254:	20000a8c 	.word	0x20000a8c

08006258 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006258:	b580      	push	{r7, lr}
 800625a:	b086      	sub	sp, #24
 800625c:	af00      	add	r7, sp, #0
 800625e:	60f8      	str	r0, [r7, #12]
 8006260:	60b9      	str	r1, [r7, #8]
 8006262:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006268:	f001 fba4 	bl	80079b4 <vPortEnterCritical>
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006272:	b25b      	sxtb	r3, r3
 8006274:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006278:	d103      	bne.n	8006282 <vQueueWaitForMessageRestricted+0x2a>
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	2200      	movs	r2, #0
 800627e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006288:	b25b      	sxtb	r3, r3
 800628a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800628e:	d103      	bne.n	8006298 <vQueueWaitForMessageRestricted+0x40>
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	2200      	movs	r2, #0
 8006294:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006298:	f001 fbbc 	bl	8007a14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d106      	bne.n	80062b2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	3324      	adds	r3, #36	; 0x24
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	68b9      	ldr	r1, [r7, #8]
 80062ac:	4618      	mov	r0, r3
 80062ae:	f000 fc3b 	bl	8006b28 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80062b2:	6978      	ldr	r0, [r7, #20]
 80062b4:	f7ff ff26 	bl	8006104 <prvUnlockQueue>
	}
 80062b8:	bf00      	nop
 80062ba:	3718      	adds	r7, #24
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}

080062c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b08e      	sub	sp, #56	; 0x38
 80062c4:	af04      	add	r7, sp, #16
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	60b9      	str	r1, [r7, #8]
 80062ca:	607a      	str	r2, [r7, #4]
 80062cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80062ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d10a      	bne.n	80062ea <xTaskCreateStatic+0x2a>
	__asm volatile
 80062d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d8:	f383 8811 	msr	BASEPRI, r3
 80062dc:	f3bf 8f6f 	isb	sy
 80062e0:	f3bf 8f4f 	dsb	sy
 80062e4:	623b      	str	r3, [r7, #32]
}
 80062e6:	bf00      	nop
 80062e8:	e7fe      	b.n	80062e8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80062ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d10a      	bne.n	8006306 <xTaskCreateStatic+0x46>
	__asm volatile
 80062f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f4:	f383 8811 	msr	BASEPRI, r3
 80062f8:	f3bf 8f6f 	isb	sy
 80062fc:	f3bf 8f4f 	dsb	sy
 8006300:	61fb      	str	r3, [r7, #28]
}
 8006302:	bf00      	nop
 8006304:	e7fe      	b.n	8006304 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006306:	235c      	movs	r3, #92	; 0x5c
 8006308:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	2b5c      	cmp	r3, #92	; 0x5c
 800630e:	d00a      	beq.n	8006326 <xTaskCreateStatic+0x66>
	__asm volatile
 8006310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006314:	f383 8811 	msr	BASEPRI, r3
 8006318:	f3bf 8f6f 	isb	sy
 800631c:	f3bf 8f4f 	dsb	sy
 8006320:	61bb      	str	r3, [r7, #24]
}
 8006322:	bf00      	nop
 8006324:	e7fe      	b.n	8006324 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006326:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800632a:	2b00      	cmp	r3, #0
 800632c:	d01e      	beq.n	800636c <xTaskCreateStatic+0xac>
 800632e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006330:	2b00      	cmp	r3, #0
 8006332:	d01b      	beq.n	800636c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006336:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800633c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800633e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006340:	2202      	movs	r2, #2
 8006342:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006346:	2300      	movs	r3, #0
 8006348:	9303      	str	r3, [sp, #12]
 800634a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634c:	9302      	str	r3, [sp, #8]
 800634e:	f107 0314 	add.w	r3, r7, #20
 8006352:	9301      	str	r3, [sp, #4]
 8006354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006356:	9300      	str	r3, [sp, #0]
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	68b9      	ldr	r1, [r7, #8]
 800635e:	68f8      	ldr	r0, [r7, #12]
 8006360:	f000 f850 	bl	8006404 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006364:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006366:	f000 f8dd 	bl	8006524 <prvAddNewTaskToReadyList>
 800636a:	e001      	b.n	8006370 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800636c:	2300      	movs	r3, #0
 800636e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006370:	697b      	ldr	r3, [r7, #20]
	}
 8006372:	4618      	mov	r0, r3
 8006374:	3728      	adds	r7, #40	; 0x28
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}

0800637a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800637a:	b580      	push	{r7, lr}
 800637c:	b08c      	sub	sp, #48	; 0x30
 800637e:	af04      	add	r7, sp, #16
 8006380:	60f8      	str	r0, [r7, #12]
 8006382:	60b9      	str	r1, [r7, #8]
 8006384:	603b      	str	r3, [r7, #0]
 8006386:	4613      	mov	r3, r2
 8006388:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800638a:	88fb      	ldrh	r3, [r7, #6]
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	4618      	mov	r0, r3
 8006390:	f001 fc32 	bl	8007bf8 <pvPortMalloc>
 8006394:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d00e      	beq.n	80063ba <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800639c:	205c      	movs	r0, #92	; 0x5c
 800639e:	f001 fc2b 	bl	8007bf8 <pvPortMalloc>
 80063a2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80063a4:	69fb      	ldr	r3, [r7, #28]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d003      	beq.n	80063b2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80063aa:	69fb      	ldr	r3, [r7, #28]
 80063ac:	697a      	ldr	r2, [r7, #20]
 80063ae:	631a      	str	r2, [r3, #48]	; 0x30
 80063b0:	e005      	b.n	80063be <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80063b2:	6978      	ldr	r0, [r7, #20]
 80063b4:	f001 fcec 	bl	8007d90 <vPortFree>
 80063b8:	e001      	b.n	80063be <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80063ba:	2300      	movs	r3, #0
 80063bc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80063be:	69fb      	ldr	r3, [r7, #28]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d017      	beq.n	80063f4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80063c4:	69fb      	ldr	r3, [r7, #28]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80063cc:	88fa      	ldrh	r2, [r7, #6]
 80063ce:	2300      	movs	r3, #0
 80063d0:	9303      	str	r3, [sp, #12]
 80063d2:	69fb      	ldr	r3, [r7, #28]
 80063d4:	9302      	str	r3, [sp, #8]
 80063d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d8:	9301      	str	r3, [sp, #4]
 80063da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063dc:	9300      	str	r3, [sp, #0]
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	68b9      	ldr	r1, [r7, #8]
 80063e2:	68f8      	ldr	r0, [r7, #12]
 80063e4:	f000 f80e 	bl	8006404 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80063e8:	69f8      	ldr	r0, [r7, #28]
 80063ea:	f000 f89b 	bl	8006524 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80063ee:	2301      	movs	r3, #1
 80063f0:	61bb      	str	r3, [r7, #24]
 80063f2:	e002      	b.n	80063fa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80063f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80063f8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80063fa:	69bb      	ldr	r3, [r7, #24]
	}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3720      	adds	r7, #32
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}

08006404 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b088      	sub	sp, #32
 8006408:	af00      	add	r7, sp, #0
 800640a:	60f8      	str	r0, [r7, #12]
 800640c:	60b9      	str	r1, [r7, #8]
 800640e:	607a      	str	r2, [r7, #4]
 8006410:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006414:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	009b      	lsls	r3, r3, #2
 800641a:	461a      	mov	r2, r3
 800641c:	21a5      	movs	r1, #165	; 0xa5
 800641e:	f001 fe0d 	bl	800803c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006424:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800642c:	3b01      	subs	r3, #1
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	4413      	add	r3, r2
 8006432:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006434:	69bb      	ldr	r3, [r7, #24]
 8006436:	f023 0307 	bic.w	r3, r3, #7
 800643a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800643c:	69bb      	ldr	r3, [r7, #24]
 800643e:	f003 0307 	and.w	r3, r3, #7
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00a      	beq.n	800645c <prvInitialiseNewTask+0x58>
	__asm volatile
 8006446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800644a:	f383 8811 	msr	BASEPRI, r3
 800644e:	f3bf 8f6f 	isb	sy
 8006452:	f3bf 8f4f 	dsb	sy
 8006456:	617b      	str	r3, [r7, #20]
}
 8006458:	bf00      	nop
 800645a:	e7fe      	b.n	800645a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d01f      	beq.n	80064a2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006462:	2300      	movs	r3, #0
 8006464:	61fb      	str	r3, [r7, #28]
 8006466:	e012      	b.n	800648e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006468:	68ba      	ldr	r2, [r7, #8]
 800646a:	69fb      	ldr	r3, [r7, #28]
 800646c:	4413      	add	r3, r2
 800646e:	7819      	ldrb	r1, [r3, #0]
 8006470:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006472:	69fb      	ldr	r3, [r7, #28]
 8006474:	4413      	add	r3, r2
 8006476:	3334      	adds	r3, #52	; 0x34
 8006478:	460a      	mov	r2, r1
 800647a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800647c:	68ba      	ldr	r2, [r7, #8]
 800647e:	69fb      	ldr	r3, [r7, #28]
 8006480:	4413      	add	r3, r2
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d006      	beq.n	8006496 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	3301      	adds	r3, #1
 800648c:	61fb      	str	r3, [r7, #28]
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	2b0f      	cmp	r3, #15
 8006492:	d9e9      	bls.n	8006468 <prvInitialiseNewTask+0x64>
 8006494:	e000      	b.n	8006498 <prvInitialiseNewTask+0x94>
			{
				break;
 8006496:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800649a:	2200      	movs	r2, #0
 800649c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80064a0:	e003      	b.n	80064aa <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80064a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a4:	2200      	movs	r2, #0
 80064a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80064aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ac:	2b37      	cmp	r3, #55	; 0x37
 80064ae:	d901      	bls.n	80064b4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80064b0:	2337      	movs	r3, #55	; 0x37
 80064b2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80064b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064b8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80064ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064be:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80064c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c2:	2200      	movs	r2, #0
 80064c4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80064c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c8:	3304      	adds	r3, #4
 80064ca:	4618      	mov	r0, r3
 80064cc:	f7ff f8f2 	bl	80056b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80064d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d2:	3318      	adds	r3, #24
 80064d4:	4618      	mov	r0, r3
 80064d6:	f7ff f8ed 	bl	80056b4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80064da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064de:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80064e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80064ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064ee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80064f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f2:	2200      	movs	r2, #0
 80064f4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80064f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f8:	2200      	movs	r2, #0
 80064fa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80064fe:	683a      	ldr	r2, [r7, #0]
 8006500:	68f9      	ldr	r1, [r7, #12]
 8006502:	69b8      	ldr	r0, [r7, #24]
 8006504:	f001 f928 	bl	8007758 <pxPortInitialiseStack>
 8006508:	4602      	mov	r2, r0
 800650a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800650c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800650e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006510:	2b00      	cmp	r3, #0
 8006512:	d002      	beq.n	800651a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006516:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006518:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800651a:	bf00      	nop
 800651c:	3720      	adds	r7, #32
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}
	...

08006524 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b082      	sub	sp, #8
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800652c:	f001 fa42 	bl	80079b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006530:	4b2d      	ldr	r3, [pc, #180]	; (80065e8 <prvAddNewTaskToReadyList+0xc4>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	3301      	adds	r3, #1
 8006536:	4a2c      	ldr	r2, [pc, #176]	; (80065e8 <prvAddNewTaskToReadyList+0xc4>)
 8006538:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800653a:	4b2c      	ldr	r3, [pc, #176]	; (80065ec <prvAddNewTaskToReadyList+0xc8>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d109      	bne.n	8006556 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006542:	4a2a      	ldr	r2, [pc, #168]	; (80065ec <prvAddNewTaskToReadyList+0xc8>)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006548:	4b27      	ldr	r3, [pc, #156]	; (80065e8 <prvAddNewTaskToReadyList+0xc4>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	2b01      	cmp	r3, #1
 800654e:	d110      	bne.n	8006572 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006550:	f000 fc16 	bl	8006d80 <prvInitialiseTaskLists>
 8006554:	e00d      	b.n	8006572 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006556:	4b26      	ldr	r3, [pc, #152]	; (80065f0 <prvAddNewTaskToReadyList+0xcc>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d109      	bne.n	8006572 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800655e:	4b23      	ldr	r3, [pc, #140]	; (80065ec <prvAddNewTaskToReadyList+0xc8>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006568:	429a      	cmp	r2, r3
 800656a:	d802      	bhi.n	8006572 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800656c:	4a1f      	ldr	r2, [pc, #124]	; (80065ec <prvAddNewTaskToReadyList+0xc8>)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006572:	4b20      	ldr	r3, [pc, #128]	; (80065f4 <prvAddNewTaskToReadyList+0xd0>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	3301      	adds	r3, #1
 8006578:	4a1e      	ldr	r2, [pc, #120]	; (80065f4 <prvAddNewTaskToReadyList+0xd0>)
 800657a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800657c:	4b1d      	ldr	r3, [pc, #116]	; (80065f4 <prvAddNewTaskToReadyList+0xd0>)
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006588:	4b1b      	ldr	r3, [pc, #108]	; (80065f8 <prvAddNewTaskToReadyList+0xd4>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	429a      	cmp	r2, r3
 800658e:	d903      	bls.n	8006598 <prvAddNewTaskToReadyList+0x74>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006594:	4a18      	ldr	r2, [pc, #96]	; (80065f8 <prvAddNewTaskToReadyList+0xd4>)
 8006596:	6013      	str	r3, [r2, #0]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800659c:	4613      	mov	r3, r2
 800659e:	009b      	lsls	r3, r3, #2
 80065a0:	4413      	add	r3, r2
 80065a2:	009b      	lsls	r3, r3, #2
 80065a4:	4a15      	ldr	r2, [pc, #84]	; (80065fc <prvAddNewTaskToReadyList+0xd8>)
 80065a6:	441a      	add	r2, r3
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	3304      	adds	r3, #4
 80065ac:	4619      	mov	r1, r3
 80065ae:	4610      	mov	r0, r2
 80065b0:	f7ff f88d 	bl	80056ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80065b4:	f001 fa2e 	bl	8007a14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80065b8:	4b0d      	ldr	r3, [pc, #52]	; (80065f0 <prvAddNewTaskToReadyList+0xcc>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d00e      	beq.n	80065de <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80065c0:	4b0a      	ldr	r3, [pc, #40]	; (80065ec <prvAddNewTaskToReadyList+0xc8>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d207      	bcs.n	80065de <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80065ce:	4b0c      	ldr	r3, [pc, #48]	; (8006600 <prvAddNewTaskToReadyList+0xdc>)
 80065d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065d4:	601a      	str	r2, [r3, #0]
 80065d6:	f3bf 8f4f 	dsb	sy
 80065da:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80065de:	bf00      	nop
 80065e0:	3708      	adds	r7, #8
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	bf00      	nop
 80065e8:	20000fa0 	.word	0x20000fa0
 80065ec:	20000acc 	.word	0x20000acc
 80065f0:	20000fac 	.word	0x20000fac
 80065f4:	20000fbc 	.word	0x20000fbc
 80065f8:	20000fa8 	.word	0x20000fa8
 80065fc:	20000ad0 	.word	0x20000ad0
 8006600:	e000ed04 	.word	0xe000ed04

08006604 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800660c:	2300      	movs	r3, #0
 800660e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d017      	beq.n	8006646 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006616:	4b13      	ldr	r3, [pc, #76]	; (8006664 <vTaskDelay+0x60>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d00a      	beq.n	8006634 <vTaskDelay+0x30>
	__asm volatile
 800661e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006622:	f383 8811 	msr	BASEPRI, r3
 8006626:	f3bf 8f6f 	isb	sy
 800662a:	f3bf 8f4f 	dsb	sy
 800662e:	60bb      	str	r3, [r7, #8]
}
 8006630:	bf00      	nop
 8006632:	e7fe      	b.n	8006632 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006634:	f000 f880 	bl	8006738 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006638:	2100      	movs	r1, #0
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 fcea 	bl	8007014 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006640:	f000 f888 	bl	8006754 <xTaskResumeAll>
 8006644:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d107      	bne.n	800665c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800664c:	4b06      	ldr	r3, [pc, #24]	; (8006668 <vTaskDelay+0x64>)
 800664e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006652:	601a      	str	r2, [r3, #0]
 8006654:	f3bf 8f4f 	dsb	sy
 8006658:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800665c:	bf00      	nop
 800665e:	3710      	adds	r7, #16
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}
 8006664:	20000fc8 	.word	0x20000fc8
 8006668:	e000ed04 	.word	0xe000ed04

0800666c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b08a      	sub	sp, #40	; 0x28
 8006670:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006672:	2300      	movs	r3, #0
 8006674:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006676:	2300      	movs	r3, #0
 8006678:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800667a:	463a      	mov	r2, r7
 800667c:	1d39      	adds	r1, r7, #4
 800667e:	f107 0308 	add.w	r3, r7, #8
 8006682:	4618      	mov	r0, r3
 8006684:	f7fe ffc2 	bl	800560c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006688:	6839      	ldr	r1, [r7, #0]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	68ba      	ldr	r2, [r7, #8]
 800668e:	9202      	str	r2, [sp, #8]
 8006690:	9301      	str	r3, [sp, #4]
 8006692:	2300      	movs	r3, #0
 8006694:	9300      	str	r3, [sp, #0]
 8006696:	2300      	movs	r3, #0
 8006698:	460a      	mov	r2, r1
 800669a:	4921      	ldr	r1, [pc, #132]	; (8006720 <vTaskStartScheduler+0xb4>)
 800669c:	4821      	ldr	r0, [pc, #132]	; (8006724 <vTaskStartScheduler+0xb8>)
 800669e:	f7ff fe0f 	bl	80062c0 <xTaskCreateStatic>
 80066a2:	4603      	mov	r3, r0
 80066a4:	4a20      	ldr	r2, [pc, #128]	; (8006728 <vTaskStartScheduler+0xbc>)
 80066a6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80066a8:	4b1f      	ldr	r3, [pc, #124]	; (8006728 <vTaskStartScheduler+0xbc>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d002      	beq.n	80066b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80066b0:	2301      	movs	r3, #1
 80066b2:	617b      	str	r3, [r7, #20]
 80066b4:	e001      	b.n	80066ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80066b6:	2300      	movs	r3, #0
 80066b8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d102      	bne.n	80066c6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80066c0:	f000 fcfc 	bl	80070bc <xTimerCreateTimerTask>
 80066c4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d116      	bne.n	80066fa <vTaskStartScheduler+0x8e>
	__asm volatile
 80066cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d0:	f383 8811 	msr	BASEPRI, r3
 80066d4:	f3bf 8f6f 	isb	sy
 80066d8:	f3bf 8f4f 	dsb	sy
 80066dc:	613b      	str	r3, [r7, #16]
}
 80066de:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80066e0:	4b12      	ldr	r3, [pc, #72]	; (800672c <vTaskStartScheduler+0xc0>)
 80066e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80066e6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80066e8:	4b11      	ldr	r3, [pc, #68]	; (8006730 <vTaskStartScheduler+0xc4>)
 80066ea:	2201      	movs	r2, #1
 80066ec:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80066ee:	4b11      	ldr	r3, [pc, #68]	; (8006734 <vTaskStartScheduler+0xc8>)
 80066f0:	2200      	movs	r2, #0
 80066f2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80066f4:	f001 f8bc 	bl	8007870 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80066f8:	e00e      	b.n	8006718 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006700:	d10a      	bne.n	8006718 <vTaskStartScheduler+0xac>
	__asm volatile
 8006702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006706:	f383 8811 	msr	BASEPRI, r3
 800670a:	f3bf 8f6f 	isb	sy
 800670e:	f3bf 8f4f 	dsb	sy
 8006712:	60fb      	str	r3, [r7, #12]
}
 8006714:	bf00      	nop
 8006716:	e7fe      	b.n	8006716 <vTaskStartScheduler+0xaa>
}
 8006718:	bf00      	nop
 800671a:	3718      	adds	r7, #24
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}
 8006720:	0800b6bc 	.word	0x0800b6bc
 8006724:	08006d51 	.word	0x08006d51
 8006728:	20000fc4 	.word	0x20000fc4
 800672c:	20000fc0 	.word	0x20000fc0
 8006730:	20000fac 	.word	0x20000fac
 8006734:	20000fa4 	.word	0x20000fa4

08006738 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006738:	b480      	push	{r7}
 800673a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800673c:	4b04      	ldr	r3, [pc, #16]	; (8006750 <vTaskSuspendAll+0x18>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	3301      	adds	r3, #1
 8006742:	4a03      	ldr	r2, [pc, #12]	; (8006750 <vTaskSuspendAll+0x18>)
 8006744:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006746:	bf00      	nop
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr
 8006750:	20000fc8 	.word	0x20000fc8

08006754 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800675a:	2300      	movs	r3, #0
 800675c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800675e:	2300      	movs	r3, #0
 8006760:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006762:	4b42      	ldr	r3, [pc, #264]	; (800686c <xTaskResumeAll+0x118>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d10a      	bne.n	8006780 <xTaskResumeAll+0x2c>
	__asm volatile
 800676a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800676e:	f383 8811 	msr	BASEPRI, r3
 8006772:	f3bf 8f6f 	isb	sy
 8006776:	f3bf 8f4f 	dsb	sy
 800677a:	603b      	str	r3, [r7, #0]
}
 800677c:	bf00      	nop
 800677e:	e7fe      	b.n	800677e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006780:	f001 f918 	bl	80079b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006784:	4b39      	ldr	r3, [pc, #228]	; (800686c <xTaskResumeAll+0x118>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	3b01      	subs	r3, #1
 800678a:	4a38      	ldr	r2, [pc, #224]	; (800686c <xTaskResumeAll+0x118>)
 800678c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800678e:	4b37      	ldr	r3, [pc, #220]	; (800686c <xTaskResumeAll+0x118>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d162      	bne.n	800685c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006796:	4b36      	ldr	r3, [pc, #216]	; (8006870 <xTaskResumeAll+0x11c>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d05e      	beq.n	800685c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800679e:	e02f      	b.n	8006800 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067a0:	4b34      	ldr	r3, [pc, #208]	; (8006874 <xTaskResumeAll+0x120>)
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	3318      	adds	r3, #24
 80067ac:	4618      	mov	r0, r3
 80067ae:	f7fe ffeb 	bl	8005788 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	3304      	adds	r3, #4
 80067b6:	4618      	mov	r0, r3
 80067b8:	f7fe ffe6 	bl	8005788 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067c0:	4b2d      	ldr	r3, [pc, #180]	; (8006878 <xTaskResumeAll+0x124>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d903      	bls.n	80067d0 <xTaskResumeAll+0x7c>
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067cc:	4a2a      	ldr	r2, [pc, #168]	; (8006878 <xTaskResumeAll+0x124>)
 80067ce:	6013      	str	r3, [r2, #0]
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067d4:	4613      	mov	r3, r2
 80067d6:	009b      	lsls	r3, r3, #2
 80067d8:	4413      	add	r3, r2
 80067da:	009b      	lsls	r3, r3, #2
 80067dc:	4a27      	ldr	r2, [pc, #156]	; (800687c <xTaskResumeAll+0x128>)
 80067de:	441a      	add	r2, r3
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	3304      	adds	r3, #4
 80067e4:	4619      	mov	r1, r3
 80067e6:	4610      	mov	r0, r2
 80067e8:	f7fe ff71 	bl	80056ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067f0:	4b23      	ldr	r3, [pc, #140]	; (8006880 <xTaskResumeAll+0x12c>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d302      	bcc.n	8006800 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80067fa:	4b22      	ldr	r3, [pc, #136]	; (8006884 <xTaskResumeAll+0x130>)
 80067fc:	2201      	movs	r2, #1
 80067fe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006800:	4b1c      	ldr	r3, [pc, #112]	; (8006874 <xTaskResumeAll+0x120>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d1cb      	bne.n	80067a0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d001      	beq.n	8006812 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800680e:	f000 fb55 	bl	8006ebc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006812:	4b1d      	ldr	r3, [pc, #116]	; (8006888 <xTaskResumeAll+0x134>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d010      	beq.n	8006840 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800681e:	f000 f847 	bl	80068b0 <xTaskIncrementTick>
 8006822:	4603      	mov	r3, r0
 8006824:	2b00      	cmp	r3, #0
 8006826:	d002      	beq.n	800682e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006828:	4b16      	ldr	r3, [pc, #88]	; (8006884 <xTaskResumeAll+0x130>)
 800682a:	2201      	movs	r2, #1
 800682c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	3b01      	subs	r3, #1
 8006832:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d1f1      	bne.n	800681e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800683a:	4b13      	ldr	r3, [pc, #76]	; (8006888 <xTaskResumeAll+0x134>)
 800683c:	2200      	movs	r2, #0
 800683e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006840:	4b10      	ldr	r3, [pc, #64]	; (8006884 <xTaskResumeAll+0x130>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d009      	beq.n	800685c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006848:	2301      	movs	r3, #1
 800684a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800684c:	4b0f      	ldr	r3, [pc, #60]	; (800688c <xTaskResumeAll+0x138>)
 800684e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006852:	601a      	str	r2, [r3, #0]
 8006854:	f3bf 8f4f 	dsb	sy
 8006858:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800685c:	f001 f8da 	bl	8007a14 <vPortExitCritical>

	return xAlreadyYielded;
 8006860:	68bb      	ldr	r3, [r7, #8]
}
 8006862:	4618      	mov	r0, r3
 8006864:	3710      	adds	r7, #16
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
 800686a:	bf00      	nop
 800686c:	20000fc8 	.word	0x20000fc8
 8006870:	20000fa0 	.word	0x20000fa0
 8006874:	20000f60 	.word	0x20000f60
 8006878:	20000fa8 	.word	0x20000fa8
 800687c:	20000ad0 	.word	0x20000ad0
 8006880:	20000acc 	.word	0x20000acc
 8006884:	20000fb4 	.word	0x20000fb4
 8006888:	20000fb0 	.word	0x20000fb0
 800688c:	e000ed04 	.word	0xe000ed04

08006890 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006890:	b480      	push	{r7}
 8006892:	b083      	sub	sp, #12
 8006894:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006896:	4b05      	ldr	r3, [pc, #20]	; (80068ac <xTaskGetTickCount+0x1c>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800689c:	687b      	ldr	r3, [r7, #4]
}
 800689e:	4618      	mov	r0, r3
 80068a0:	370c      	adds	r7, #12
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr
 80068aa:	bf00      	nop
 80068ac:	20000fa4 	.word	0x20000fa4

080068b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b086      	sub	sp, #24
 80068b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80068b6:	2300      	movs	r3, #0
 80068b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068ba:	4b4f      	ldr	r3, [pc, #316]	; (80069f8 <xTaskIncrementTick+0x148>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	f040 808f 	bne.w	80069e2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80068c4:	4b4d      	ldr	r3, [pc, #308]	; (80069fc <xTaskIncrementTick+0x14c>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	3301      	adds	r3, #1
 80068ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80068cc:	4a4b      	ldr	r2, [pc, #300]	; (80069fc <xTaskIncrementTick+0x14c>)
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d120      	bne.n	800691a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80068d8:	4b49      	ldr	r3, [pc, #292]	; (8006a00 <xTaskIncrementTick+0x150>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d00a      	beq.n	80068f8 <xTaskIncrementTick+0x48>
	__asm volatile
 80068e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e6:	f383 8811 	msr	BASEPRI, r3
 80068ea:	f3bf 8f6f 	isb	sy
 80068ee:	f3bf 8f4f 	dsb	sy
 80068f2:	603b      	str	r3, [r7, #0]
}
 80068f4:	bf00      	nop
 80068f6:	e7fe      	b.n	80068f6 <xTaskIncrementTick+0x46>
 80068f8:	4b41      	ldr	r3, [pc, #260]	; (8006a00 <xTaskIncrementTick+0x150>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	60fb      	str	r3, [r7, #12]
 80068fe:	4b41      	ldr	r3, [pc, #260]	; (8006a04 <xTaskIncrementTick+0x154>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a3f      	ldr	r2, [pc, #252]	; (8006a00 <xTaskIncrementTick+0x150>)
 8006904:	6013      	str	r3, [r2, #0]
 8006906:	4a3f      	ldr	r2, [pc, #252]	; (8006a04 <xTaskIncrementTick+0x154>)
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6013      	str	r3, [r2, #0]
 800690c:	4b3e      	ldr	r3, [pc, #248]	; (8006a08 <xTaskIncrementTick+0x158>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	3301      	adds	r3, #1
 8006912:	4a3d      	ldr	r2, [pc, #244]	; (8006a08 <xTaskIncrementTick+0x158>)
 8006914:	6013      	str	r3, [r2, #0]
 8006916:	f000 fad1 	bl	8006ebc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800691a:	4b3c      	ldr	r3, [pc, #240]	; (8006a0c <xTaskIncrementTick+0x15c>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	693a      	ldr	r2, [r7, #16]
 8006920:	429a      	cmp	r2, r3
 8006922:	d349      	bcc.n	80069b8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006924:	4b36      	ldr	r3, [pc, #216]	; (8006a00 <xTaskIncrementTick+0x150>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d104      	bne.n	8006938 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800692e:	4b37      	ldr	r3, [pc, #220]	; (8006a0c <xTaskIncrementTick+0x15c>)
 8006930:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006934:	601a      	str	r2, [r3, #0]
					break;
 8006936:	e03f      	b.n	80069b8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006938:	4b31      	ldr	r3, [pc, #196]	; (8006a00 <xTaskIncrementTick+0x150>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	68db      	ldr	r3, [r3, #12]
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006948:	693a      	ldr	r2, [r7, #16]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	429a      	cmp	r2, r3
 800694e:	d203      	bcs.n	8006958 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006950:	4a2e      	ldr	r2, [pc, #184]	; (8006a0c <xTaskIncrementTick+0x15c>)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006956:	e02f      	b.n	80069b8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	3304      	adds	r3, #4
 800695c:	4618      	mov	r0, r3
 800695e:	f7fe ff13 	bl	8005788 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006966:	2b00      	cmp	r3, #0
 8006968:	d004      	beq.n	8006974 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	3318      	adds	r3, #24
 800696e:	4618      	mov	r0, r3
 8006970:	f7fe ff0a 	bl	8005788 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006978:	4b25      	ldr	r3, [pc, #148]	; (8006a10 <xTaskIncrementTick+0x160>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	429a      	cmp	r2, r3
 800697e:	d903      	bls.n	8006988 <xTaskIncrementTick+0xd8>
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006984:	4a22      	ldr	r2, [pc, #136]	; (8006a10 <xTaskIncrementTick+0x160>)
 8006986:	6013      	str	r3, [r2, #0]
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800698c:	4613      	mov	r3, r2
 800698e:	009b      	lsls	r3, r3, #2
 8006990:	4413      	add	r3, r2
 8006992:	009b      	lsls	r3, r3, #2
 8006994:	4a1f      	ldr	r2, [pc, #124]	; (8006a14 <xTaskIncrementTick+0x164>)
 8006996:	441a      	add	r2, r3
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	3304      	adds	r3, #4
 800699c:	4619      	mov	r1, r3
 800699e:	4610      	mov	r0, r2
 80069a0:	f7fe fe95 	bl	80056ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069a8:	4b1b      	ldr	r3, [pc, #108]	; (8006a18 <xTaskIncrementTick+0x168>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d3b8      	bcc.n	8006924 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80069b2:	2301      	movs	r3, #1
 80069b4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069b6:	e7b5      	b.n	8006924 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80069b8:	4b17      	ldr	r3, [pc, #92]	; (8006a18 <xTaskIncrementTick+0x168>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069be:	4915      	ldr	r1, [pc, #84]	; (8006a14 <xTaskIncrementTick+0x164>)
 80069c0:	4613      	mov	r3, r2
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	4413      	add	r3, r2
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	440b      	add	r3, r1
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d901      	bls.n	80069d4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80069d0:	2301      	movs	r3, #1
 80069d2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80069d4:	4b11      	ldr	r3, [pc, #68]	; (8006a1c <xTaskIncrementTick+0x16c>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d007      	beq.n	80069ec <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80069dc:	2301      	movs	r3, #1
 80069de:	617b      	str	r3, [r7, #20]
 80069e0:	e004      	b.n	80069ec <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80069e2:	4b0f      	ldr	r3, [pc, #60]	; (8006a20 <xTaskIncrementTick+0x170>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	3301      	adds	r3, #1
 80069e8:	4a0d      	ldr	r2, [pc, #52]	; (8006a20 <xTaskIncrementTick+0x170>)
 80069ea:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80069ec:	697b      	ldr	r3, [r7, #20]
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3718      	adds	r7, #24
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	bf00      	nop
 80069f8:	20000fc8 	.word	0x20000fc8
 80069fc:	20000fa4 	.word	0x20000fa4
 8006a00:	20000f58 	.word	0x20000f58
 8006a04:	20000f5c 	.word	0x20000f5c
 8006a08:	20000fb8 	.word	0x20000fb8
 8006a0c:	20000fc0 	.word	0x20000fc0
 8006a10:	20000fa8 	.word	0x20000fa8
 8006a14:	20000ad0 	.word	0x20000ad0
 8006a18:	20000acc 	.word	0x20000acc
 8006a1c:	20000fb4 	.word	0x20000fb4
 8006a20:	20000fb0 	.word	0x20000fb0

08006a24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006a24:	b480      	push	{r7}
 8006a26:	b085      	sub	sp, #20
 8006a28:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006a2a:	4b28      	ldr	r3, [pc, #160]	; (8006acc <vTaskSwitchContext+0xa8>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d003      	beq.n	8006a3a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006a32:	4b27      	ldr	r3, [pc, #156]	; (8006ad0 <vTaskSwitchContext+0xac>)
 8006a34:	2201      	movs	r2, #1
 8006a36:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006a38:	e041      	b.n	8006abe <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8006a3a:	4b25      	ldr	r3, [pc, #148]	; (8006ad0 <vTaskSwitchContext+0xac>)
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a40:	4b24      	ldr	r3, [pc, #144]	; (8006ad4 <vTaskSwitchContext+0xb0>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	60fb      	str	r3, [r7, #12]
 8006a46:	e010      	b.n	8006a6a <vTaskSwitchContext+0x46>
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d10a      	bne.n	8006a64 <vTaskSwitchContext+0x40>
	__asm volatile
 8006a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a52:	f383 8811 	msr	BASEPRI, r3
 8006a56:	f3bf 8f6f 	isb	sy
 8006a5a:	f3bf 8f4f 	dsb	sy
 8006a5e:	607b      	str	r3, [r7, #4]
}
 8006a60:	bf00      	nop
 8006a62:	e7fe      	b.n	8006a62 <vTaskSwitchContext+0x3e>
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	3b01      	subs	r3, #1
 8006a68:	60fb      	str	r3, [r7, #12]
 8006a6a:	491b      	ldr	r1, [pc, #108]	; (8006ad8 <vTaskSwitchContext+0xb4>)
 8006a6c:	68fa      	ldr	r2, [r7, #12]
 8006a6e:	4613      	mov	r3, r2
 8006a70:	009b      	lsls	r3, r3, #2
 8006a72:	4413      	add	r3, r2
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	440b      	add	r3, r1
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d0e4      	beq.n	8006a48 <vTaskSwitchContext+0x24>
 8006a7e:	68fa      	ldr	r2, [r7, #12]
 8006a80:	4613      	mov	r3, r2
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	4413      	add	r3, r2
 8006a86:	009b      	lsls	r3, r3, #2
 8006a88:	4a13      	ldr	r2, [pc, #76]	; (8006ad8 <vTaskSwitchContext+0xb4>)
 8006a8a:	4413      	add	r3, r2
 8006a8c:	60bb      	str	r3, [r7, #8]
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	685a      	ldr	r2, [r3, #4]
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	605a      	str	r2, [r3, #4]
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	685a      	ldr	r2, [r3, #4]
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	3308      	adds	r3, #8
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d104      	bne.n	8006aae <vTaskSwitchContext+0x8a>
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	685a      	ldr	r2, [r3, #4]
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	605a      	str	r2, [r3, #4]
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	4a09      	ldr	r2, [pc, #36]	; (8006adc <vTaskSwitchContext+0xb8>)
 8006ab6:	6013      	str	r3, [r2, #0]
 8006ab8:	4a06      	ldr	r2, [pc, #24]	; (8006ad4 <vTaskSwitchContext+0xb0>)
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6013      	str	r3, [r2, #0]
}
 8006abe:	bf00      	nop
 8006ac0:	3714      	adds	r7, #20
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac8:	4770      	bx	lr
 8006aca:	bf00      	nop
 8006acc:	20000fc8 	.word	0x20000fc8
 8006ad0:	20000fb4 	.word	0x20000fb4
 8006ad4:	20000fa8 	.word	0x20000fa8
 8006ad8:	20000ad0 	.word	0x20000ad0
 8006adc:	20000acc 	.word	0x20000acc

08006ae0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b084      	sub	sp, #16
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d10a      	bne.n	8006b06 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af4:	f383 8811 	msr	BASEPRI, r3
 8006af8:	f3bf 8f6f 	isb	sy
 8006afc:	f3bf 8f4f 	dsb	sy
 8006b00:	60fb      	str	r3, [r7, #12]
}
 8006b02:	bf00      	nop
 8006b04:	e7fe      	b.n	8006b04 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006b06:	4b07      	ldr	r3, [pc, #28]	; (8006b24 <vTaskPlaceOnEventList+0x44>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	3318      	adds	r3, #24
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f7fe fe01 	bl	8005716 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006b14:	2101      	movs	r1, #1
 8006b16:	6838      	ldr	r0, [r7, #0]
 8006b18:	f000 fa7c 	bl	8007014 <prvAddCurrentTaskToDelayedList>
}
 8006b1c:	bf00      	nop
 8006b1e:	3710      	adds	r7, #16
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}
 8006b24:	20000acc 	.word	0x20000acc

08006b28 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b086      	sub	sp, #24
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	60f8      	str	r0, [r7, #12]
 8006b30:	60b9      	str	r1, [r7, #8]
 8006b32:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d10a      	bne.n	8006b50 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b3e:	f383 8811 	msr	BASEPRI, r3
 8006b42:	f3bf 8f6f 	isb	sy
 8006b46:	f3bf 8f4f 	dsb	sy
 8006b4a:	617b      	str	r3, [r7, #20]
}
 8006b4c:	bf00      	nop
 8006b4e:	e7fe      	b.n	8006b4e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006b50:	4b0a      	ldr	r3, [pc, #40]	; (8006b7c <vTaskPlaceOnEventListRestricted+0x54>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	3318      	adds	r3, #24
 8006b56:	4619      	mov	r1, r3
 8006b58:	68f8      	ldr	r0, [r7, #12]
 8006b5a:	f7fe fdb8 	bl	80056ce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d002      	beq.n	8006b6a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006b64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b68:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006b6a:	6879      	ldr	r1, [r7, #4]
 8006b6c:	68b8      	ldr	r0, [r7, #8]
 8006b6e:	f000 fa51 	bl	8007014 <prvAddCurrentTaskToDelayedList>
	}
 8006b72:	bf00      	nop
 8006b74:	3718      	adds	r7, #24
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	20000acc 	.word	0x20000acc

08006b80 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b086      	sub	sp, #24
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	68db      	ldr	r3, [r3, #12]
 8006b8c:	68db      	ldr	r3, [r3, #12]
 8006b8e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d10a      	bne.n	8006bac <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b9a:	f383 8811 	msr	BASEPRI, r3
 8006b9e:	f3bf 8f6f 	isb	sy
 8006ba2:	f3bf 8f4f 	dsb	sy
 8006ba6:	60fb      	str	r3, [r7, #12]
}
 8006ba8:	bf00      	nop
 8006baa:	e7fe      	b.n	8006baa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	3318      	adds	r3, #24
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f7fe fde9 	bl	8005788 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bb6:	4b1e      	ldr	r3, [pc, #120]	; (8006c30 <xTaskRemoveFromEventList+0xb0>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d11d      	bne.n	8006bfa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	3304      	adds	r3, #4
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f7fe fde0 	bl	8005788 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bcc:	4b19      	ldr	r3, [pc, #100]	; (8006c34 <xTaskRemoveFromEventList+0xb4>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d903      	bls.n	8006bdc <xTaskRemoveFromEventList+0x5c>
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd8:	4a16      	ldr	r2, [pc, #88]	; (8006c34 <xTaskRemoveFromEventList+0xb4>)
 8006bda:	6013      	str	r3, [r2, #0]
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006be0:	4613      	mov	r3, r2
 8006be2:	009b      	lsls	r3, r3, #2
 8006be4:	4413      	add	r3, r2
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	4a13      	ldr	r2, [pc, #76]	; (8006c38 <xTaskRemoveFromEventList+0xb8>)
 8006bea:	441a      	add	r2, r3
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	3304      	adds	r3, #4
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	4610      	mov	r0, r2
 8006bf4:	f7fe fd6b 	bl	80056ce <vListInsertEnd>
 8006bf8:	e005      	b.n	8006c06 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	3318      	adds	r3, #24
 8006bfe:	4619      	mov	r1, r3
 8006c00:	480e      	ldr	r0, [pc, #56]	; (8006c3c <xTaskRemoveFromEventList+0xbc>)
 8006c02:	f7fe fd64 	bl	80056ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c0a:	4b0d      	ldr	r3, [pc, #52]	; (8006c40 <xTaskRemoveFromEventList+0xc0>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d905      	bls.n	8006c20 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006c14:	2301      	movs	r3, #1
 8006c16:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006c18:	4b0a      	ldr	r3, [pc, #40]	; (8006c44 <xTaskRemoveFromEventList+0xc4>)
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	601a      	str	r2, [r3, #0]
 8006c1e:	e001      	b.n	8006c24 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006c20:	2300      	movs	r3, #0
 8006c22:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006c24:	697b      	ldr	r3, [r7, #20]
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3718      	adds	r7, #24
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	20000fc8 	.word	0x20000fc8
 8006c34:	20000fa8 	.word	0x20000fa8
 8006c38:	20000ad0 	.word	0x20000ad0
 8006c3c:	20000f60 	.word	0x20000f60
 8006c40:	20000acc 	.word	0x20000acc
 8006c44:	20000fb4 	.word	0x20000fb4

08006c48 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b083      	sub	sp, #12
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006c50:	4b06      	ldr	r3, [pc, #24]	; (8006c6c <vTaskInternalSetTimeOutState+0x24>)
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006c58:	4b05      	ldr	r3, [pc, #20]	; (8006c70 <vTaskInternalSetTimeOutState+0x28>)
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	605a      	str	r2, [r3, #4]
}
 8006c60:	bf00      	nop
 8006c62:	370c      	adds	r7, #12
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr
 8006c6c:	20000fb8 	.word	0x20000fb8
 8006c70:	20000fa4 	.word	0x20000fa4

08006c74 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b088      	sub	sp, #32
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d10a      	bne.n	8006c9a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c88:	f383 8811 	msr	BASEPRI, r3
 8006c8c:	f3bf 8f6f 	isb	sy
 8006c90:	f3bf 8f4f 	dsb	sy
 8006c94:	613b      	str	r3, [r7, #16]
}
 8006c96:	bf00      	nop
 8006c98:	e7fe      	b.n	8006c98 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d10a      	bne.n	8006cb6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca4:	f383 8811 	msr	BASEPRI, r3
 8006ca8:	f3bf 8f6f 	isb	sy
 8006cac:	f3bf 8f4f 	dsb	sy
 8006cb0:	60fb      	str	r3, [r7, #12]
}
 8006cb2:	bf00      	nop
 8006cb4:	e7fe      	b.n	8006cb4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006cb6:	f000 fe7d 	bl	80079b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006cba:	4b1d      	ldr	r3, [pc, #116]	; (8006d30 <xTaskCheckForTimeOut+0xbc>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	69ba      	ldr	r2, [r7, #24]
 8006cc6:	1ad3      	subs	r3, r2, r3
 8006cc8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006cd2:	d102      	bne.n	8006cda <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	61fb      	str	r3, [r7, #28]
 8006cd8:	e023      	b.n	8006d22 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681a      	ldr	r2, [r3, #0]
 8006cde:	4b15      	ldr	r3, [pc, #84]	; (8006d34 <xTaskCheckForTimeOut+0xc0>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d007      	beq.n	8006cf6 <xTaskCheckForTimeOut+0x82>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	69ba      	ldr	r2, [r7, #24]
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d302      	bcc.n	8006cf6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	61fb      	str	r3, [r7, #28]
 8006cf4:	e015      	b.n	8006d22 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	697a      	ldr	r2, [r7, #20]
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d20b      	bcs.n	8006d18 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	681a      	ldr	r2, [r3, #0]
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	1ad2      	subs	r2, r2, r3
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f7ff ff9b 	bl	8006c48 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006d12:	2300      	movs	r3, #0
 8006d14:	61fb      	str	r3, [r7, #28]
 8006d16:	e004      	b.n	8006d22 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006d22:	f000 fe77 	bl	8007a14 <vPortExitCritical>

	return xReturn;
 8006d26:	69fb      	ldr	r3, [r7, #28]
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3720      	adds	r7, #32
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}
 8006d30:	20000fa4 	.word	0x20000fa4
 8006d34:	20000fb8 	.word	0x20000fb8

08006d38 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006d38:	b480      	push	{r7}
 8006d3a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006d3c:	4b03      	ldr	r3, [pc, #12]	; (8006d4c <vTaskMissedYield+0x14>)
 8006d3e:	2201      	movs	r2, #1
 8006d40:	601a      	str	r2, [r3, #0]
}
 8006d42:	bf00      	nop
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr
 8006d4c:	20000fb4 	.word	0x20000fb4

08006d50 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b082      	sub	sp, #8
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006d58:	f000 f852 	bl	8006e00 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006d5c:	4b06      	ldr	r3, [pc, #24]	; (8006d78 <prvIdleTask+0x28>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d9f9      	bls.n	8006d58 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006d64:	4b05      	ldr	r3, [pc, #20]	; (8006d7c <prvIdleTask+0x2c>)
 8006d66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d6a:	601a      	str	r2, [r3, #0]
 8006d6c:	f3bf 8f4f 	dsb	sy
 8006d70:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006d74:	e7f0      	b.n	8006d58 <prvIdleTask+0x8>
 8006d76:	bf00      	nop
 8006d78:	20000ad0 	.word	0x20000ad0
 8006d7c:	e000ed04 	.word	0xe000ed04

08006d80 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b082      	sub	sp, #8
 8006d84:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d86:	2300      	movs	r3, #0
 8006d88:	607b      	str	r3, [r7, #4]
 8006d8a:	e00c      	b.n	8006da6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	4613      	mov	r3, r2
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	4413      	add	r3, r2
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	4a12      	ldr	r2, [pc, #72]	; (8006de0 <prvInitialiseTaskLists+0x60>)
 8006d98:	4413      	add	r3, r2
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f7fe fc6a 	bl	8005674 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	3301      	adds	r3, #1
 8006da4:	607b      	str	r3, [r7, #4]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2b37      	cmp	r3, #55	; 0x37
 8006daa:	d9ef      	bls.n	8006d8c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006dac:	480d      	ldr	r0, [pc, #52]	; (8006de4 <prvInitialiseTaskLists+0x64>)
 8006dae:	f7fe fc61 	bl	8005674 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006db2:	480d      	ldr	r0, [pc, #52]	; (8006de8 <prvInitialiseTaskLists+0x68>)
 8006db4:	f7fe fc5e 	bl	8005674 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006db8:	480c      	ldr	r0, [pc, #48]	; (8006dec <prvInitialiseTaskLists+0x6c>)
 8006dba:	f7fe fc5b 	bl	8005674 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006dbe:	480c      	ldr	r0, [pc, #48]	; (8006df0 <prvInitialiseTaskLists+0x70>)
 8006dc0:	f7fe fc58 	bl	8005674 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006dc4:	480b      	ldr	r0, [pc, #44]	; (8006df4 <prvInitialiseTaskLists+0x74>)
 8006dc6:	f7fe fc55 	bl	8005674 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006dca:	4b0b      	ldr	r3, [pc, #44]	; (8006df8 <prvInitialiseTaskLists+0x78>)
 8006dcc:	4a05      	ldr	r2, [pc, #20]	; (8006de4 <prvInitialiseTaskLists+0x64>)
 8006dce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006dd0:	4b0a      	ldr	r3, [pc, #40]	; (8006dfc <prvInitialiseTaskLists+0x7c>)
 8006dd2:	4a05      	ldr	r2, [pc, #20]	; (8006de8 <prvInitialiseTaskLists+0x68>)
 8006dd4:	601a      	str	r2, [r3, #0]
}
 8006dd6:	bf00      	nop
 8006dd8:	3708      	adds	r7, #8
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	bf00      	nop
 8006de0:	20000ad0 	.word	0x20000ad0
 8006de4:	20000f30 	.word	0x20000f30
 8006de8:	20000f44 	.word	0x20000f44
 8006dec:	20000f60 	.word	0x20000f60
 8006df0:	20000f74 	.word	0x20000f74
 8006df4:	20000f8c 	.word	0x20000f8c
 8006df8:	20000f58 	.word	0x20000f58
 8006dfc:	20000f5c 	.word	0x20000f5c

08006e00 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b082      	sub	sp, #8
 8006e04:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e06:	e019      	b.n	8006e3c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006e08:	f000 fdd4 	bl	80079b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e0c:	4b10      	ldr	r3, [pc, #64]	; (8006e50 <prvCheckTasksWaitingTermination+0x50>)
 8006e0e:	68db      	ldr	r3, [r3, #12]
 8006e10:	68db      	ldr	r3, [r3, #12]
 8006e12:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	3304      	adds	r3, #4
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f7fe fcb5 	bl	8005788 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006e1e:	4b0d      	ldr	r3, [pc, #52]	; (8006e54 <prvCheckTasksWaitingTermination+0x54>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	3b01      	subs	r3, #1
 8006e24:	4a0b      	ldr	r2, [pc, #44]	; (8006e54 <prvCheckTasksWaitingTermination+0x54>)
 8006e26:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006e28:	4b0b      	ldr	r3, [pc, #44]	; (8006e58 <prvCheckTasksWaitingTermination+0x58>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	3b01      	subs	r3, #1
 8006e2e:	4a0a      	ldr	r2, [pc, #40]	; (8006e58 <prvCheckTasksWaitingTermination+0x58>)
 8006e30:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006e32:	f000 fdef 	bl	8007a14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 f810 	bl	8006e5c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e3c:	4b06      	ldr	r3, [pc, #24]	; (8006e58 <prvCheckTasksWaitingTermination+0x58>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d1e1      	bne.n	8006e08 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006e44:	bf00      	nop
 8006e46:	bf00      	nop
 8006e48:	3708      	adds	r7, #8
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}
 8006e4e:	bf00      	nop
 8006e50:	20000f74 	.word	0x20000f74
 8006e54:	20000fa0 	.word	0x20000fa0
 8006e58:	20000f88 	.word	0x20000f88

08006e5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d108      	bne.n	8006e80 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e72:	4618      	mov	r0, r3
 8006e74:	f000 ff8c 	bl	8007d90 <vPortFree>
				vPortFree( pxTCB );
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f000 ff89 	bl	8007d90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006e7e:	e018      	b.n	8006eb2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006e86:	2b01      	cmp	r3, #1
 8006e88:	d103      	bne.n	8006e92 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 ff80 	bl	8007d90 <vPortFree>
	}
 8006e90:	e00f      	b.n	8006eb2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006e98:	2b02      	cmp	r3, #2
 8006e9a:	d00a      	beq.n	8006eb2 <prvDeleteTCB+0x56>
	__asm volatile
 8006e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea0:	f383 8811 	msr	BASEPRI, r3
 8006ea4:	f3bf 8f6f 	isb	sy
 8006ea8:	f3bf 8f4f 	dsb	sy
 8006eac:	60fb      	str	r3, [r7, #12]
}
 8006eae:	bf00      	nop
 8006eb0:	e7fe      	b.n	8006eb0 <prvDeleteTCB+0x54>
	}
 8006eb2:	bf00      	nop
 8006eb4:	3710      	adds	r7, #16
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}
	...

08006ebc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b083      	sub	sp, #12
 8006ec0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ec2:	4b0c      	ldr	r3, [pc, #48]	; (8006ef4 <prvResetNextTaskUnblockTime+0x38>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d104      	bne.n	8006ed6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006ecc:	4b0a      	ldr	r3, [pc, #40]	; (8006ef8 <prvResetNextTaskUnblockTime+0x3c>)
 8006ece:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ed2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006ed4:	e008      	b.n	8006ee8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ed6:	4b07      	ldr	r3, [pc, #28]	; (8006ef4 <prvResetNextTaskUnblockTime+0x38>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	68db      	ldr	r3, [r3, #12]
 8006ede:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	4a04      	ldr	r2, [pc, #16]	; (8006ef8 <prvResetNextTaskUnblockTime+0x3c>)
 8006ee6:	6013      	str	r3, [r2, #0]
}
 8006ee8:	bf00      	nop
 8006eea:	370c      	adds	r7, #12
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr
 8006ef4:	20000f58 	.word	0x20000f58
 8006ef8:	20000fc0 	.word	0x20000fc0

08006efc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006efc:	b480      	push	{r7}
 8006efe:	b083      	sub	sp, #12
 8006f00:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006f02:	4b0b      	ldr	r3, [pc, #44]	; (8006f30 <xTaskGetSchedulerState+0x34>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d102      	bne.n	8006f10 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	607b      	str	r3, [r7, #4]
 8006f0e:	e008      	b.n	8006f22 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f10:	4b08      	ldr	r3, [pc, #32]	; (8006f34 <xTaskGetSchedulerState+0x38>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d102      	bne.n	8006f1e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006f18:	2302      	movs	r3, #2
 8006f1a:	607b      	str	r3, [r7, #4]
 8006f1c:	e001      	b.n	8006f22 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006f22:	687b      	ldr	r3, [r7, #4]
	}
 8006f24:	4618      	mov	r0, r3
 8006f26:	370c      	adds	r7, #12
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr
 8006f30:	20000fac 	.word	0x20000fac
 8006f34:	20000fc8 	.word	0x20000fc8

08006f38 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b086      	sub	sp, #24
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006f44:	2300      	movs	r3, #0
 8006f46:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d056      	beq.n	8006ffc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006f4e:	4b2e      	ldr	r3, [pc, #184]	; (8007008 <xTaskPriorityDisinherit+0xd0>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	693a      	ldr	r2, [r7, #16]
 8006f54:	429a      	cmp	r2, r3
 8006f56:	d00a      	beq.n	8006f6e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f5c:	f383 8811 	msr	BASEPRI, r3
 8006f60:	f3bf 8f6f 	isb	sy
 8006f64:	f3bf 8f4f 	dsb	sy
 8006f68:	60fb      	str	r3, [r7, #12]
}
 8006f6a:	bf00      	nop
 8006f6c:	e7fe      	b.n	8006f6c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d10a      	bne.n	8006f8c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f7a:	f383 8811 	msr	BASEPRI, r3
 8006f7e:	f3bf 8f6f 	isb	sy
 8006f82:	f3bf 8f4f 	dsb	sy
 8006f86:	60bb      	str	r3, [r7, #8]
}
 8006f88:	bf00      	nop
 8006f8a:	e7fe      	b.n	8006f8a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f90:	1e5a      	subs	r2, r3, #1
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	d02c      	beq.n	8006ffc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d128      	bne.n	8006ffc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	3304      	adds	r3, #4
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f7fe fbea 	bl	8005788 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fcc:	4b0f      	ldr	r3, [pc, #60]	; (800700c <xTaskPriorityDisinherit+0xd4>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d903      	bls.n	8006fdc <xTaskPriorityDisinherit+0xa4>
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fd8:	4a0c      	ldr	r2, [pc, #48]	; (800700c <xTaskPriorityDisinherit+0xd4>)
 8006fda:	6013      	str	r3, [r2, #0]
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fe0:	4613      	mov	r3, r2
 8006fe2:	009b      	lsls	r3, r3, #2
 8006fe4:	4413      	add	r3, r2
 8006fe6:	009b      	lsls	r3, r3, #2
 8006fe8:	4a09      	ldr	r2, [pc, #36]	; (8007010 <xTaskPriorityDisinherit+0xd8>)
 8006fea:	441a      	add	r2, r3
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	3304      	adds	r3, #4
 8006ff0:	4619      	mov	r1, r3
 8006ff2:	4610      	mov	r0, r2
 8006ff4:	f7fe fb6b 	bl	80056ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006ffc:	697b      	ldr	r3, [r7, #20]
	}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3718      	adds	r7, #24
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
 8007006:	bf00      	nop
 8007008:	20000acc 	.word	0x20000acc
 800700c:	20000fa8 	.word	0x20000fa8
 8007010:	20000ad0 	.word	0x20000ad0

08007014 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b084      	sub	sp, #16
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800701e:	4b21      	ldr	r3, [pc, #132]	; (80070a4 <prvAddCurrentTaskToDelayedList+0x90>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007024:	4b20      	ldr	r3, [pc, #128]	; (80070a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	3304      	adds	r3, #4
 800702a:	4618      	mov	r0, r3
 800702c:	f7fe fbac 	bl	8005788 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007036:	d10a      	bne.n	800704e <prvAddCurrentTaskToDelayedList+0x3a>
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d007      	beq.n	800704e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800703e:	4b1a      	ldr	r3, [pc, #104]	; (80070a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	3304      	adds	r3, #4
 8007044:	4619      	mov	r1, r3
 8007046:	4819      	ldr	r0, [pc, #100]	; (80070ac <prvAddCurrentTaskToDelayedList+0x98>)
 8007048:	f7fe fb41 	bl	80056ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800704c:	e026      	b.n	800709c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800704e:	68fa      	ldr	r2, [r7, #12]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	4413      	add	r3, r2
 8007054:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007056:	4b14      	ldr	r3, [pc, #80]	; (80070a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	68ba      	ldr	r2, [r7, #8]
 800705c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800705e:	68ba      	ldr	r2, [r7, #8]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	429a      	cmp	r2, r3
 8007064:	d209      	bcs.n	800707a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007066:	4b12      	ldr	r3, [pc, #72]	; (80070b0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	4b0f      	ldr	r3, [pc, #60]	; (80070a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	3304      	adds	r3, #4
 8007070:	4619      	mov	r1, r3
 8007072:	4610      	mov	r0, r2
 8007074:	f7fe fb4f 	bl	8005716 <vListInsert>
}
 8007078:	e010      	b.n	800709c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800707a:	4b0e      	ldr	r3, [pc, #56]	; (80070b4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	4b0a      	ldr	r3, [pc, #40]	; (80070a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	3304      	adds	r3, #4
 8007084:	4619      	mov	r1, r3
 8007086:	4610      	mov	r0, r2
 8007088:	f7fe fb45 	bl	8005716 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800708c:	4b0a      	ldr	r3, [pc, #40]	; (80070b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	68ba      	ldr	r2, [r7, #8]
 8007092:	429a      	cmp	r2, r3
 8007094:	d202      	bcs.n	800709c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007096:	4a08      	ldr	r2, [pc, #32]	; (80070b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	6013      	str	r3, [r2, #0]
}
 800709c:	bf00      	nop
 800709e:	3710      	adds	r7, #16
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}
 80070a4:	20000fa4 	.word	0x20000fa4
 80070a8:	20000acc 	.word	0x20000acc
 80070ac:	20000f8c 	.word	0x20000f8c
 80070b0:	20000f5c 	.word	0x20000f5c
 80070b4:	20000f58 	.word	0x20000f58
 80070b8:	20000fc0 	.word	0x20000fc0

080070bc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b08a      	sub	sp, #40	; 0x28
 80070c0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80070c2:	2300      	movs	r3, #0
 80070c4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80070c6:	f000 fb07 	bl	80076d8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80070ca:	4b1c      	ldr	r3, [pc, #112]	; (800713c <xTimerCreateTimerTask+0x80>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d021      	beq.n	8007116 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80070d2:	2300      	movs	r3, #0
 80070d4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80070d6:	2300      	movs	r3, #0
 80070d8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80070da:	1d3a      	adds	r2, r7, #4
 80070dc:	f107 0108 	add.w	r1, r7, #8
 80070e0:	f107 030c 	add.w	r3, r7, #12
 80070e4:	4618      	mov	r0, r3
 80070e6:	f7fe faab 	bl	8005640 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80070ea:	6879      	ldr	r1, [r7, #4]
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	68fa      	ldr	r2, [r7, #12]
 80070f0:	9202      	str	r2, [sp, #8]
 80070f2:	9301      	str	r3, [sp, #4]
 80070f4:	2302      	movs	r3, #2
 80070f6:	9300      	str	r3, [sp, #0]
 80070f8:	2300      	movs	r3, #0
 80070fa:	460a      	mov	r2, r1
 80070fc:	4910      	ldr	r1, [pc, #64]	; (8007140 <xTimerCreateTimerTask+0x84>)
 80070fe:	4811      	ldr	r0, [pc, #68]	; (8007144 <xTimerCreateTimerTask+0x88>)
 8007100:	f7ff f8de 	bl	80062c0 <xTaskCreateStatic>
 8007104:	4603      	mov	r3, r0
 8007106:	4a10      	ldr	r2, [pc, #64]	; (8007148 <xTimerCreateTimerTask+0x8c>)
 8007108:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800710a:	4b0f      	ldr	r3, [pc, #60]	; (8007148 <xTimerCreateTimerTask+0x8c>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d001      	beq.n	8007116 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007112:	2301      	movs	r3, #1
 8007114:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d10a      	bne.n	8007132 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800711c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007120:	f383 8811 	msr	BASEPRI, r3
 8007124:	f3bf 8f6f 	isb	sy
 8007128:	f3bf 8f4f 	dsb	sy
 800712c:	613b      	str	r3, [r7, #16]
}
 800712e:	bf00      	nop
 8007130:	e7fe      	b.n	8007130 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007132:	697b      	ldr	r3, [r7, #20]
}
 8007134:	4618      	mov	r0, r3
 8007136:	3718      	adds	r7, #24
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}
 800713c:	20000ffc 	.word	0x20000ffc
 8007140:	0800b6c4 	.word	0x0800b6c4
 8007144:	08007281 	.word	0x08007281
 8007148:	20001000 	.word	0x20001000

0800714c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b08a      	sub	sp, #40	; 0x28
 8007150:	af00      	add	r7, sp, #0
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	60b9      	str	r1, [r7, #8]
 8007156:	607a      	str	r2, [r7, #4]
 8007158:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800715a:	2300      	movs	r3, #0
 800715c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d10a      	bne.n	800717a <xTimerGenericCommand+0x2e>
	__asm volatile
 8007164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007168:	f383 8811 	msr	BASEPRI, r3
 800716c:	f3bf 8f6f 	isb	sy
 8007170:	f3bf 8f4f 	dsb	sy
 8007174:	623b      	str	r3, [r7, #32]
}
 8007176:	bf00      	nop
 8007178:	e7fe      	b.n	8007178 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800717a:	4b1a      	ldr	r3, [pc, #104]	; (80071e4 <xTimerGenericCommand+0x98>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d02a      	beq.n	80071d8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	2b05      	cmp	r3, #5
 8007192:	dc18      	bgt.n	80071c6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007194:	f7ff feb2 	bl	8006efc <xTaskGetSchedulerState>
 8007198:	4603      	mov	r3, r0
 800719a:	2b02      	cmp	r3, #2
 800719c:	d109      	bne.n	80071b2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800719e:	4b11      	ldr	r3, [pc, #68]	; (80071e4 <xTimerGenericCommand+0x98>)
 80071a0:	6818      	ldr	r0, [r3, #0]
 80071a2:	f107 0110 	add.w	r1, r7, #16
 80071a6:	2300      	movs	r3, #0
 80071a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071aa:	f7fe fca1 	bl	8005af0 <xQueueGenericSend>
 80071ae:	6278      	str	r0, [r7, #36]	; 0x24
 80071b0:	e012      	b.n	80071d8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80071b2:	4b0c      	ldr	r3, [pc, #48]	; (80071e4 <xTimerGenericCommand+0x98>)
 80071b4:	6818      	ldr	r0, [r3, #0]
 80071b6:	f107 0110 	add.w	r1, r7, #16
 80071ba:	2300      	movs	r3, #0
 80071bc:	2200      	movs	r2, #0
 80071be:	f7fe fc97 	bl	8005af0 <xQueueGenericSend>
 80071c2:	6278      	str	r0, [r7, #36]	; 0x24
 80071c4:	e008      	b.n	80071d8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80071c6:	4b07      	ldr	r3, [pc, #28]	; (80071e4 <xTimerGenericCommand+0x98>)
 80071c8:	6818      	ldr	r0, [r3, #0]
 80071ca:	f107 0110 	add.w	r1, r7, #16
 80071ce:	2300      	movs	r3, #0
 80071d0:	683a      	ldr	r2, [r7, #0]
 80071d2:	f7fe fd8b 	bl	8005cec <xQueueGenericSendFromISR>
 80071d6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80071d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3728      	adds	r7, #40	; 0x28
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
 80071e2:	bf00      	nop
 80071e4:	20000ffc 	.word	0x20000ffc

080071e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b088      	sub	sp, #32
 80071ec:	af02      	add	r7, sp, #8
 80071ee:	6078      	str	r0, [r7, #4]
 80071f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071f2:	4b22      	ldr	r3, [pc, #136]	; (800727c <prvProcessExpiredTimer+0x94>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	68db      	ldr	r3, [r3, #12]
 80071fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	3304      	adds	r3, #4
 8007200:	4618      	mov	r0, r3
 8007202:	f7fe fac1 	bl	8005788 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800720c:	f003 0304 	and.w	r3, r3, #4
 8007210:	2b00      	cmp	r3, #0
 8007212:	d022      	beq.n	800725a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	699a      	ldr	r2, [r3, #24]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	18d1      	adds	r1, r2, r3
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	683a      	ldr	r2, [r7, #0]
 8007220:	6978      	ldr	r0, [r7, #20]
 8007222:	f000 f8d1 	bl	80073c8 <prvInsertTimerInActiveList>
 8007226:	4603      	mov	r3, r0
 8007228:	2b00      	cmp	r3, #0
 800722a:	d01f      	beq.n	800726c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800722c:	2300      	movs	r3, #0
 800722e:	9300      	str	r3, [sp, #0]
 8007230:	2300      	movs	r3, #0
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	2100      	movs	r1, #0
 8007236:	6978      	ldr	r0, [r7, #20]
 8007238:	f7ff ff88 	bl	800714c <xTimerGenericCommand>
 800723c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d113      	bne.n	800726c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007248:	f383 8811 	msr	BASEPRI, r3
 800724c:	f3bf 8f6f 	isb	sy
 8007250:	f3bf 8f4f 	dsb	sy
 8007254:	60fb      	str	r3, [r7, #12]
}
 8007256:	bf00      	nop
 8007258:	e7fe      	b.n	8007258 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007260:	f023 0301 	bic.w	r3, r3, #1
 8007264:	b2da      	uxtb	r2, r3
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	6a1b      	ldr	r3, [r3, #32]
 8007270:	6978      	ldr	r0, [r7, #20]
 8007272:	4798      	blx	r3
}
 8007274:	bf00      	nop
 8007276:	3718      	adds	r7, #24
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}
 800727c:	20000ff4 	.word	0x20000ff4

08007280 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b084      	sub	sp, #16
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007288:	f107 0308 	add.w	r3, r7, #8
 800728c:	4618      	mov	r0, r3
 800728e:	f000 f857 	bl	8007340 <prvGetNextExpireTime>
 8007292:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	4619      	mov	r1, r3
 8007298:	68f8      	ldr	r0, [r7, #12]
 800729a:	f000 f803 	bl	80072a4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800729e:	f000 f8d5 	bl	800744c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80072a2:	e7f1      	b.n	8007288 <prvTimerTask+0x8>

080072a4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b084      	sub	sp, #16
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80072ae:	f7ff fa43 	bl	8006738 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80072b2:	f107 0308 	add.w	r3, r7, #8
 80072b6:	4618      	mov	r0, r3
 80072b8:	f000 f866 	bl	8007388 <prvSampleTimeNow>
 80072bc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d130      	bne.n	8007326 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d10a      	bne.n	80072e0 <prvProcessTimerOrBlockTask+0x3c>
 80072ca:	687a      	ldr	r2, [r7, #4]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d806      	bhi.n	80072e0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80072d2:	f7ff fa3f 	bl	8006754 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80072d6:	68f9      	ldr	r1, [r7, #12]
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f7ff ff85 	bl	80071e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80072de:	e024      	b.n	800732a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d008      	beq.n	80072f8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80072e6:	4b13      	ldr	r3, [pc, #76]	; (8007334 <prvProcessTimerOrBlockTask+0x90>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d101      	bne.n	80072f4 <prvProcessTimerOrBlockTask+0x50>
 80072f0:	2301      	movs	r3, #1
 80072f2:	e000      	b.n	80072f6 <prvProcessTimerOrBlockTask+0x52>
 80072f4:	2300      	movs	r3, #0
 80072f6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80072f8:	4b0f      	ldr	r3, [pc, #60]	; (8007338 <prvProcessTimerOrBlockTask+0x94>)
 80072fa:	6818      	ldr	r0, [r3, #0]
 80072fc:	687a      	ldr	r2, [r7, #4]
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	1ad3      	subs	r3, r2, r3
 8007302:	683a      	ldr	r2, [r7, #0]
 8007304:	4619      	mov	r1, r3
 8007306:	f7fe ffa7 	bl	8006258 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800730a:	f7ff fa23 	bl	8006754 <xTaskResumeAll>
 800730e:	4603      	mov	r3, r0
 8007310:	2b00      	cmp	r3, #0
 8007312:	d10a      	bne.n	800732a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007314:	4b09      	ldr	r3, [pc, #36]	; (800733c <prvProcessTimerOrBlockTask+0x98>)
 8007316:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800731a:	601a      	str	r2, [r3, #0]
 800731c:	f3bf 8f4f 	dsb	sy
 8007320:	f3bf 8f6f 	isb	sy
}
 8007324:	e001      	b.n	800732a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007326:	f7ff fa15 	bl	8006754 <xTaskResumeAll>
}
 800732a:	bf00      	nop
 800732c:	3710      	adds	r7, #16
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}
 8007332:	bf00      	nop
 8007334:	20000ff8 	.word	0x20000ff8
 8007338:	20000ffc 	.word	0x20000ffc
 800733c:	e000ed04 	.word	0xe000ed04

08007340 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007340:	b480      	push	{r7}
 8007342:	b085      	sub	sp, #20
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007348:	4b0e      	ldr	r3, [pc, #56]	; (8007384 <prvGetNextExpireTime+0x44>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d101      	bne.n	8007356 <prvGetNextExpireTime+0x16>
 8007352:	2201      	movs	r2, #1
 8007354:	e000      	b.n	8007358 <prvGetNextExpireTime+0x18>
 8007356:	2200      	movs	r2, #0
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d105      	bne.n	8007370 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007364:	4b07      	ldr	r3, [pc, #28]	; (8007384 <prvGetNextExpireTime+0x44>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	68db      	ldr	r3, [r3, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	60fb      	str	r3, [r7, #12]
 800736e:	e001      	b.n	8007374 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007370:	2300      	movs	r3, #0
 8007372:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007374:	68fb      	ldr	r3, [r7, #12]
}
 8007376:	4618      	mov	r0, r3
 8007378:	3714      	adds	r7, #20
 800737a:	46bd      	mov	sp, r7
 800737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007380:	4770      	bx	lr
 8007382:	bf00      	nop
 8007384:	20000ff4 	.word	0x20000ff4

08007388 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b084      	sub	sp, #16
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007390:	f7ff fa7e 	bl	8006890 <xTaskGetTickCount>
 8007394:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007396:	4b0b      	ldr	r3, [pc, #44]	; (80073c4 <prvSampleTimeNow+0x3c>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	68fa      	ldr	r2, [r7, #12]
 800739c:	429a      	cmp	r2, r3
 800739e:	d205      	bcs.n	80073ac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80073a0:	f000 f936 	bl	8007610 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2201      	movs	r2, #1
 80073a8:	601a      	str	r2, [r3, #0]
 80073aa:	e002      	b.n	80073b2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2200      	movs	r2, #0
 80073b0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80073b2:	4a04      	ldr	r2, [pc, #16]	; (80073c4 <prvSampleTimeNow+0x3c>)
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80073b8:	68fb      	ldr	r3, [r7, #12]
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3710      	adds	r7, #16
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}
 80073c2:	bf00      	nop
 80073c4:	20001004 	.word	0x20001004

080073c8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b086      	sub	sp, #24
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	60f8      	str	r0, [r7, #12]
 80073d0:	60b9      	str	r1, [r7, #8]
 80073d2:	607a      	str	r2, [r7, #4]
 80073d4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80073d6:	2300      	movs	r3, #0
 80073d8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	68ba      	ldr	r2, [r7, #8]
 80073de:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	68fa      	ldr	r2, [r7, #12]
 80073e4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80073e6:	68ba      	ldr	r2, [r7, #8]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	429a      	cmp	r2, r3
 80073ec:	d812      	bhi.n	8007414 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	1ad2      	subs	r2, r2, r3
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	699b      	ldr	r3, [r3, #24]
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d302      	bcc.n	8007402 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80073fc:	2301      	movs	r3, #1
 80073fe:	617b      	str	r3, [r7, #20]
 8007400:	e01b      	b.n	800743a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007402:	4b10      	ldr	r3, [pc, #64]	; (8007444 <prvInsertTimerInActiveList+0x7c>)
 8007404:	681a      	ldr	r2, [r3, #0]
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	3304      	adds	r3, #4
 800740a:	4619      	mov	r1, r3
 800740c:	4610      	mov	r0, r2
 800740e:	f7fe f982 	bl	8005716 <vListInsert>
 8007412:	e012      	b.n	800743a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007414:	687a      	ldr	r2, [r7, #4]
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	429a      	cmp	r2, r3
 800741a:	d206      	bcs.n	800742a <prvInsertTimerInActiveList+0x62>
 800741c:	68ba      	ldr	r2, [r7, #8]
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	429a      	cmp	r2, r3
 8007422:	d302      	bcc.n	800742a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007424:	2301      	movs	r3, #1
 8007426:	617b      	str	r3, [r7, #20]
 8007428:	e007      	b.n	800743a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800742a:	4b07      	ldr	r3, [pc, #28]	; (8007448 <prvInsertTimerInActiveList+0x80>)
 800742c:	681a      	ldr	r2, [r3, #0]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	3304      	adds	r3, #4
 8007432:	4619      	mov	r1, r3
 8007434:	4610      	mov	r0, r2
 8007436:	f7fe f96e 	bl	8005716 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800743a:	697b      	ldr	r3, [r7, #20]
}
 800743c:	4618      	mov	r0, r3
 800743e:	3718      	adds	r7, #24
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}
 8007444:	20000ff8 	.word	0x20000ff8
 8007448:	20000ff4 	.word	0x20000ff4

0800744c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b08e      	sub	sp, #56	; 0x38
 8007450:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007452:	e0ca      	b.n	80075ea <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2b00      	cmp	r3, #0
 8007458:	da18      	bge.n	800748c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800745a:	1d3b      	adds	r3, r7, #4
 800745c:	3304      	adds	r3, #4
 800745e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007462:	2b00      	cmp	r3, #0
 8007464:	d10a      	bne.n	800747c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800746a:	f383 8811 	msr	BASEPRI, r3
 800746e:	f3bf 8f6f 	isb	sy
 8007472:	f3bf 8f4f 	dsb	sy
 8007476:	61fb      	str	r3, [r7, #28]
}
 8007478:	bf00      	nop
 800747a:	e7fe      	b.n	800747a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800747c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007482:	6850      	ldr	r0, [r2, #4]
 8007484:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007486:	6892      	ldr	r2, [r2, #8]
 8007488:	4611      	mov	r1, r2
 800748a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2b00      	cmp	r3, #0
 8007490:	f2c0 80aa 	blt.w	80075e8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800749a:	695b      	ldr	r3, [r3, #20]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d004      	beq.n	80074aa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80074a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a2:	3304      	adds	r3, #4
 80074a4:	4618      	mov	r0, r3
 80074a6:	f7fe f96f 	bl	8005788 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80074aa:	463b      	mov	r3, r7
 80074ac:	4618      	mov	r0, r3
 80074ae:	f7ff ff6b 	bl	8007388 <prvSampleTimeNow>
 80074b2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2b09      	cmp	r3, #9
 80074b8:	f200 8097 	bhi.w	80075ea <prvProcessReceivedCommands+0x19e>
 80074bc:	a201      	add	r2, pc, #4	; (adr r2, 80074c4 <prvProcessReceivedCommands+0x78>)
 80074be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c2:	bf00      	nop
 80074c4:	080074ed 	.word	0x080074ed
 80074c8:	080074ed 	.word	0x080074ed
 80074cc:	080074ed 	.word	0x080074ed
 80074d0:	08007561 	.word	0x08007561
 80074d4:	08007575 	.word	0x08007575
 80074d8:	080075bf 	.word	0x080075bf
 80074dc:	080074ed 	.word	0x080074ed
 80074e0:	080074ed 	.word	0x080074ed
 80074e4:	08007561 	.word	0x08007561
 80074e8:	08007575 	.word	0x08007575
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80074ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074f2:	f043 0301 	orr.w	r3, r3, #1
 80074f6:	b2da      	uxtb	r2, r3
 80074f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80074fe:	68ba      	ldr	r2, [r7, #8]
 8007500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007502:	699b      	ldr	r3, [r3, #24]
 8007504:	18d1      	adds	r1, r2, r3
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800750a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800750c:	f7ff ff5c 	bl	80073c8 <prvInsertTimerInActiveList>
 8007510:	4603      	mov	r3, r0
 8007512:	2b00      	cmp	r3, #0
 8007514:	d069      	beq.n	80075ea <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007518:	6a1b      	ldr	r3, [r3, #32]
 800751a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800751c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800751e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007520:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007524:	f003 0304 	and.w	r3, r3, #4
 8007528:	2b00      	cmp	r3, #0
 800752a:	d05e      	beq.n	80075ea <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800752c:	68ba      	ldr	r2, [r7, #8]
 800752e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007530:	699b      	ldr	r3, [r3, #24]
 8007532:	441a      	add	r2, r3
 8007534:	2300      	movs	r3, #0
 8007536:	9300      	str	r3, [sp, #0]
 8007538:	2300      	movs	r3, #0
 800753a:	2100      	movs	r1, #0
 800753c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800753e:	f7ff fe05 	bl	800714c <xTimerGenericCommand>
 8007542:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007544:	6a3b      	ldr	r3, [r7, #32]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d14f      	bne.n	80075ea <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800754a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800754e:	f383 8811 	msr	BASEPRI, r3
 8007552:	f3bf 8f6f 	isb	sy
 8007556:	f3bf 8f4f 	dsb	sy
 800755a:	61bb      	str	r3, [r7, #24]
}
 800755c:	bf00      	nop
 800755e:	e7fe      	b.n	800755e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007562:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007566:	f023 0301 	bic.w	r3, r3, #1
 800756a:	b2da      	uxtb	r2, r3
 800756c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800756e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007572:	e03a      	b.n	80075ea <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007576:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800757a:	f043 0301 	orr.w	r3, r3, #1
 800757e:	b2da      	uxtb	r2, r3
 8007580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007582:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007586:	68ba      	ldr	r2, [r7, #8]
 8007588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800758a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800758c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800758e:	699b      	ldr	r3, [r3, #24]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d10a      	bne.n	80075aa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007598:	f383 8811 	msr	BASEPRI, r3
 800759c:	f3bf 8f6f 	isb	sy
 80075a0:	f3bf 8f4f 	dsb	sy
 80075a4:	617b      	str	r3, [r7, #20]
}
 80075a6:	bf00      	nop
 80075a8:	e7fe      	b.n	80075a8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80075aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ac:	699a      	ldr	r2, [r3, #24]
 80075ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b0:	18d1      	adds	r1, r2, r3
 80075b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075b8:	f7ff ff06 	bl	80073c8 <prvInsertTimerInActiveList>
					break;
 80075bc:	e015      	b.n	80075ea <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80075be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80075c4:	f003 0302 	and.w	r3, r3, #2
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d103      	bne.n	80075d4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80075cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075ce:	f000 fbdf 	bl	8007d90 <vPortFree>
 80075d2:	e00a      	b.n	80075ea <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80075d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80075da:	f023 0301 	bic.w	r3, r3, #1
 80075de:	b2da      	uxtb	r2, r3
 80075e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80075e6:	e000      	b.n	80075ea <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80075e8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80075ea:	4b08      	ldr	r3, [pc, #32]	; (800760c <prvProcessReceivedCommands+0x1c0>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	1d39      	adds	r1, r7, #4
 80075f0:	2200      	movs	r2, #0
 80075f2:	4618      	mov	r0, r3
 80075f4:	f7fe fc16 	bl	8005e24 <xQueueReceive>
 80075f8:	4603      	mov	r3, r0
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	f47f af2a 	bne.w	8007454 <prvProcessReceivedCommands+0x8>
	}
}
 8007600:	bf00      	nop
 8007602:	bf00      	nop
 8007604:	3730      	adds	r7, #48	; 0x30
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}
 800760a:	bf00      	nop
 800760c:	20000ffc 	.word	0x20000ffc

08007610 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b088      	sub	sp, #32
 8007614:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007616:	e048      	b.n	80076aa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007618:	4b2d      	ldr	r3, [pc, #180]	; (80076d0 <prvSwitchTimerLists+0xc0>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	68db      	ldr	r3, [r3, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007622:	4b2b      	ldr	r3, [pc, #172]	; (80076d0 <prvSwitchTimerLists+0xc0>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	68db      	ldr	r3, [r3, #12]
 8007628:	68db      	ldr	r3, [r3, #12]
 800762a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	3304      	adds	r3, #4
 8007630:	4618      	mov	r0, r3
 8007632:	f7fe f8a9 	bl	8005788 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	6a1b      	ldr	r3, [r3, #32]
 800763a:	68f8      	ldr	r0, [r7, #12]
 800763c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007644:	f003 0304 	and.w	r3, r3, #4
 8007648:	2b00      	cmp	r3, #0
 800764a:	d02e      	beq.n	80076aa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	699b      	ldr	r3, [r3, #24]
 8007650:	693a      	ldr	r2, [r7, #16]
 8007652:	4413      	add	r3, r2
 8007654:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007656:	68ba      	ldr	r2, [r7, #8]
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	429a      	cmp	r2, r3
 800765c:	d90e      	bls.n	800767c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	68ba      	ldr	r2, [r7, #8]
 8007662:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	68fa      	ldr	r2, [r7, #12]
 8007668:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800766a:	4b19      	ldr	r3, [pc, #100]	; (80076d0 <prvSwitchTimerLists+0xc0>)
 800766c:	681a      	ldr	r2, [r3, #0]
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	3304      	adds	r3, #4
 8007672:	4619      	mov	r1, r3
 8007674:	4610      	mov	r0, r2
 8007676:	f7fe f84e 	bl	8005716 <vListInsert>
 800767a:	e016      	b.n	80076aa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800767c:	2300      	movs	r3, #0
 800767e:	9300      	str	r3, [sp, #0]
 8007680:	2300      	movs	r3, #0
 8007682:	693a      	ldr	r2, [r7, #16]
 8007684:	2100      	movs	r1, #0
 8007686:	68f8      	ldr	r0, [r7, #12]
 8007688:	f7ff fd60 	bl	800714c <xTimerGenericCommand>
 800768c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d10a      	bne.n	80076aa <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007698:	f383 8811 	msr	BASEPRI, r3
 800769c:	f3bf 8f6f 	isb	sy
 80076a0:	f3bf 8f4f 	dsb	sy
 80076a4:	603b      	str	r3, [r7, #0]
}
 80076a6:	bf00      	nop
 80076a8:	e7fe      	b.n	80076a8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80076aa:	4b09      	ldr	r3, [pc, #36]	; (80076d0 <prvSwitchTimerLists+0xc0>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d1b1      	bne.n	8007618 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80076b4:	4b06      	ldr	r3, [pc, #24]	; (80076d0 <prvSwitchTimerLists+0xc0>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80076ba:	4b06      	ldr	r3, [pc, #24]	; (80076d4 <prvSwitchTimerLists+0xc4>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a04      	ldr	r2, [pc, #16]	; (80076d0 <prvSwitchTimerLists+0xc0>)
 80076c0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80076c2:	4a04      	ldr	r2, [pc, #16]	; (80076d4 <prvSwitchTimerLists+0xc4>)
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	6013      	str	r3, [r2, #0]
}
 80076c8:	bf00      	nop
 80076ca:	3718      	adds	r7, #24
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}
 80076d0:	20000ff4 	.word	0x20000ff4
 80076d4:	20000ff8 	.word	0x20000ff8

080076d8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b082      	sub	sp, #8
 80076dc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80076de:	f000 f969 	bl	80079b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80076e2:	4b15      	ldr	r3, [pc, #84]	; (8007738 <prvCheckForValidListAndQueue+0x60>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d120      	bne.n	800772c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80076ea:	4814      	ldr	r0, [pc, #80]	; (800773c <prvCheckForValidListAndQueue+0x64>)
 80076ec:	f7fd ffc2 	bl	8005674 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80076f0:	4813      	ldr	r0, [pc, #76]	; (8007740 <prvCheckForValidListAndQueue+0x68>)
 80076f2:	f7fd ffbf 	bl	8005674 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80076f6:	4b13      	ldr	r3, [pc, #76]	; (8007744 <prvCheckForValidListAndQueue+0x6c>)
 80076f8:	4a10      	ldr	r2, [pc, #64]	; (800773c <prvCheckForValidListAndQueue+0x64>)
 80076fa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80076fc:	4b12      	ldr	r3, [pc, #72]	; (8007748 <prvCheckForValidListAndQueue+0x70>)
 80076fe:	4a10      	ldr	r2, [pc, #64]	; (8007740 <prvCheckForValidListAndQueue+0x68>)
 8007700:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007702:	2300      	movs	r3, #0
 8007704:	9300      	str	r3, [sp, #0]
 8007706:	4b11      	ldr	r3, [pc, #68]	; (800774c <prvCheckForValidListAndQueue+0x74>)
 8007708:	4a11      	ldr	r2, [pc, #68]	; (8007750 <prvCheckForValidListAndQueue+0x78>)
 800770a:	2110      	movs	r1, #16
 800770c:	200a      	movs	r0, #10
 800770e:	f7fe f8cd 	bl	80058ac <xQueueGenericCreateStatic>
 8007712:	4603      	mov	r3, r0
 8007714:	4a08      	ldr	r2, [pc, #32]	; (8007738 <prvCheckForValidListAndQueue+0x60>)
 8007716:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007718:	4b07      	ldr	r3, [pc, #28]	; (8007738 <prvCheckForValidListAndQueue+0x60>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d005      	beq.n	800772c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007720:	4b05      	ldr	r3, [pc, #20]	; (8007738 <prvCheckForValidListAndQueue+0x60>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	490b      	ldr	r1, [pc, #44]	; (8007754 <prvCheckForValidListAndQueue+0x7c>)
 8007726:	4618      	mov	r0, r3
 8007728:	f7fe fd6c 	bl	8006204 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800772c:	f000 f972 	bl	8007a14 <vPortExitCritical>
}
 8007730:	bf00      	nop
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
 8007736:	bf00      	nop
 8007738:	20000ffc 	.word	0x20000ffc
 800773c:	20000fcc 	.word	0x20000fcc
 8007740:	20000fe0 	.word	0x20000fe0
 8007744:	20000ff4 	.word	0x20000ff4
 8007748:	20000ff8 	.word	0x20000ff8
 800774c:	200010a8 	.word	0x200010a8
 8007750:	20001008 	.word	0x20001008
 8007754:	0800b6cc 	.word	0x0800b6cc

08007758 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007758:	b480      	push	{r7}
 800775a:	b085      	sub	sp, #20
 800775c:	af00      	add	r7, sp, #0
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	60b9      	str	r1, [r7, #8]
 8007762:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	3b04      	subs	r3, #4
 8007768:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007770:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	3b04      	subs	r3, #4
 8007776:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	f023 0201 	bic.w	r2, r3, #1
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	3b04      	subs	r3, #4
 8007786:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007788:	4a0c      	ldr	r2, [pc, #48]	; (80077bc <pxPortInitialiseStack+0x64>)
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	3b14      	subs	r3, #20
 8007792:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007794:	687a      	ldr	r2, [r7, #4]
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	3b04      	subs	r3, #4
 800779e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f06f 0202 	mvn.w	r2, #2
 80077a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	3b20      	subs	r3, #32
 80077ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80077ae:	68fb      	ldr	r3, [r7, #12]
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3714      	adds	r7, #20
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr
 80077bc:	080077c1 	.word	0x080077c1

080077c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80077c0:	b480      	push	{r7}
 80077c2:	b085      	sub	sp, #20
 80077c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80077c6:	2300      	movs	r3, #0
 80077c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80077ca:	4b12      	ldr	r3, [pc, #72]	; (8007814 <prvTaskExitError+0x54>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077d2:	d00a      	beq.n	80077ea <prvTaskExitError+0x2a>
	__asm volatile
 80077d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d8:	f383 8811 	msr	BASEPRI, r3
 80077dc:	f3bf 8f6f 	isb	sy
 80077e0:	f3bf 8f4f 	dsb	sy
 80077e4:	60fb      	str	r3, [r7, #12]
}
 80077e6:	bf00      	nop
 80077e8:	e7fe      	b.n	80077e8 <prvTaskExitError+0x28>
	__asm volatile
 80077ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ee:	f383 8811 	msr	BASEPRI, r3
 80077f2:	f3bf 8f6f 	isb	sy
 80077f6:	f3bf 8f4f 	dsb	sy
 80077fa:	60bb      	str	r3, [r7, #8]
}
 80077fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80077fe:	bf00      	nop
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d0fc      	beq.n	8007800 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007806:	bf00      	nop
 8007808:	bf00      	nop
 800780a:	3714      	adds	r7, #20
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr
 8007814:	2000001c 	.word	0x2000001c
	...

08007820 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007820:	4b07      	ldr	r3, [pc, #28]	; (8007840 <pxCurrentTCBConst2>)
 8007822:	6819      	ldr	r1, [r3, #0]
 8007824:	6808      	ldr	r0, [r1, #0]
 8007826:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800782a:	f380 8809 	msr	PSP, r0
 800782e:	f3bf 8f6f 	isb	sy
 8007832:	f04f 0000 	mov.w	r0, #0
 8007836:	f380 8811 	msr	BASEPRI, r0
 800783a:	4770      	bx	lr
 800783c:	f3af 8000 	nop.w

08007840 <pxCurrentTCBConst2>:
 8007840:	20000acc 	.word	0x20000acc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007844:	bf00      	nop
 8007846:	bf00      	nop

08007848 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007848:	4808      	ldr	r0, [pc, #32]	; (800786c <prvPortStartFirstTask+0x24>)
 800784a:	6800      	ldr	r0, [r0, #0]
 800784c:	6800      	ldr	r0, [r0, #0]
 800784e:	f380 8808 	msr	MSP, r0
 8007852:	f04f 0000 	mov.w	r0, #0
 8007856:	f380 8814 	msr	CONTROL, r0
 800785a:	b662      	cpsie	i
 800785c:	b661      	cpsie	f
 800785e:	f3bf 8f4f 	dsb	sy
 8007862:	f3bf 8f6f 	isb	sy
 8007866:	df00      	svc	0
 8007868:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800786a:	bf00      	nop
 800786c:	e000ed08 	.word	0xe000ed08

08007870 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b086      	sub	sp, #24
 8007874:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007876:	4b46      	ldr	r3, [pc, #280]	; (8007990 <xPortStartScheduler+0x120>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4a46      	ldr	r2, [pc, #280]	; (8007994 <xPortStartScheduler+0x124>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d10a      	bne.n	8007896 <xPortStartScheduler+0x26>
	__asm volatile
 8007880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007884:	f383 8811 	msr	BASEPRI, r3
 8007888:	f3bf 8f6f 	isb	sy
 800788c:	f3bf 8f4f 	dsb	sy
 8007890:	613b      	str	r3, [r7, #16]
}
 8007892:	bf00      	nop
 8007894:	e7fe      	b.n	8007894 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007896:	4b3e      	ldr	r3, [pc, #248]	; (8007990 <xPortStartScheduler+0x120>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a3f      	ldr	r2, [pc, #252]	; (8007998 <xPortStartScheduler+0x128>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d10a      	bne.n	80078b6 <xPortStartScheduler+0x46>
	__asm volatile
 80078a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a4:	f383 8811 	msr	BASEPRI, r3
 80078a8:	f3bf 8f6f 	isb	sy
 80078ac:	f3bf 8f4f 	dsb	sy
 80078b0:	60fb      	str	r3, [r7, #12]
}
 80078b2:	bf00      	nop
 80078b4:	e7fe      	b.n	80078b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80078b6:	4b39      	ldr	r3, [pc, #228]	; (800799c <xPortStartScheduler+0x12c>)
 80078b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	781b      	ldrb	r3, [r3, #0]
 80078be:	b2db      	uxtb	r3, r3
 80078c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	22ff      	movs	r2, #255	; 0xff
 80078c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	b2db      	uxtb	r3, r3
 80078ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80078d0:	78fb      	ldrb	r3, [r7, #3]
 80078d2:	b2db      	uxtb	r3, r3
 80078d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80078d8:	b2da      	uxtb	r2, r3
 80078da:	4b31      	ldr	r3, [pc, #196]	; (80079a0 <xPortStartScheduler+0x130>)
 80078dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80078de:	4b31      	ldr	r3, [pc, #196]	; (80079a4 <xPortStartScheduler+0x134>)
 80078e0:	2207      	movs	r2, #7
 80078e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80078e4:	e009      	b.n	80078fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80078e6:	4b2f      	ldr	r3, [pc, #188]	; (80079a4 <xPortStartScheduler+0x134>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	3b01      	subs	r3, #1
 80078ec:	4a2d      	ldr	r2, [pc, #180]	; (80079a4 <xPortStartScheduler+0x134>)
 80078ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80078f0:	78fb      	ldrb	r3, [r7, #3]
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	005b      	lsls	r3, r3, #1
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80078fa:	78fb      	ldrb	r3, [r7, #3]
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007902:	2b80      	cmp	r3, #128	; 0x80
 8007904:	d0ef      	beq.n	80078e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007906:	4b27      	ldr	r3, [pc, #156]	; (80079a4 <xPortStartScheduler+0x134>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f1c3 0307 	rsb	r3, r3, #7
 800790e:	2b04      	cmp	r3, #4
 8007910:	d00a      	beq.n	8007928 <xPortStartScheduler+0xb8>
	__asm volatile
 8007912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007916:	f383 8811 	msr	BASEPRI, r3
 800791a:	f3bf 8f6f 	isb	sy
 800791e:	f3bf 8f4f 	dsb	sy
 8007922:	60bb      	str	r3, [r7, #8]
}
 8007924:	bf00      	nop
 8007926:	e7fe      	b.n	8007926 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007928:	4b1e      	ldr	r3, [pc, #120]	; (80079a4 <xPortStartScheduler+0x134>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	021b      	lsls	r3, r3, #8
 800792e:	4a1d      	ldr	r2, [pc, #116]	; (80079a4 <xPortStartScheduler+0x134>)
 8007930:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007932:	4b1c      	ldr	r3, [pc, #112]	; (80079a4 <xPortStartScheduler+0x134>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800793a:	4a1a      	ldr	r2, [pc, #104]	; (80079a4 <xPortStartScheduler+0x134>)
 800793c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	b2da      	uxtb	r2, r3
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007946:	4b18      	ldr	r3, [pc, #96]	; (80079a8 <xPortStartScheduler+0x138>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a17      	ldr	r2, [pc, #92]	; (80079a8 <xPortStartScheduler+0x138>)
 800794c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007950:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007952:	4b15      	ldr	r3, [pc, #84]	; (80079a8 <xPortStartScheduler+0x138>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4a14      	ldr	r2, [pc, #80]	; (80079a8 <xPortStartScheduler+0x138>)
 8007958:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800795c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800795e:	f000 f8dd 	bl	8007b1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007962:	4b12      	ldr	r3, [pc, #72]	; (80079ac <xPortStartScheduler+0x13c>)
 8007964:	2200      	movs	r2, #0
 8007966:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007968:	f000 f8fc 	bl	8007b64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800796c:	4b10      	ldr	r3, [pc, #64]	; (80079b0 <xPortStartScheduler+0x140>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a0f      	ldr	r2, [pc, #60]	; (80079b0 <xPortStartScheduler+0x140>)
 8007972:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007976:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007978:	f7ff ff66 	bl	8007848 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800797c:	f7ff f852 	bl	8006a24 <vTaskSwitchContext>
	prvTaskExitError();
 8007980:	f7ff ff1e 	bl	80077c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007984:	2300      	movs	r3, #0
}
 8007986:	4618      	mov	r0, r3
 8007988:	3718      	adds	r7, #24
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}
 800798e:	bf00      	nop
 8007990:	e000ed00 	.word	0xe000ed00
 8007994:	410fc271 	.word	0x410fc271
 8007998:	410fc270 	.word	0x410fc270
 800799c:	e000e400 	.word	0xe000e400
 80079a0:	200010f8 	.word	0x200010f8
 80079a4:	200010fc 	.word	0x200010fc
 80079a8:	e000ed20 	.word	0xe000ed20
 80079ac:	2000001c 	.word	0x2000001c
 80079b0:	e000ef34 	.word	0xe000ef34

080079b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80079b4:	b480      	push	{r7}
 80079b6:	b083      	sub	sp, #12
 80079b8:	af00      	add	r7, sp, #0
	__asm volatile
 80079ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079be:	f383 8811 	msr	BASEPRI, r3
 80079c2:	f3bf 8f6f 	isb	sy
 80079c6:	f3bf 8f4f 	dsb	sy
 80079ca:	607b      	str	r3, [r7, #4]
}
 80079cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80079ce:	4b0f      	ldr	r3, [pc, #60]	; (8007a0c <vPortEnterCritical+0x58>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	3301      	adds	r3, #1
 80079d4:	4a0d      	ldr	r2, [pc, #52]	; (8007a0c <vPortEnterCritical+0x58>)
 80079d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80079d8:	4b0c      	ldr	r3, [pc, #48]	; (8007a0c <vPortEnterCritical+0x58>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	2b01      	cmp	r3, #1
 80079de:	d10f      	bne.n	8007a00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80079e0:	4b0b      	ldr	r3, [pc, #44]	; (8007a10 <vPortEnterCritical+0x5c>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	b2db      	uxtb	r3, r3
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d00a      	beq.n	8007a00 <vPortEnterCritical+0x4c>
	__asm volatile
 80079ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ee:	f383 8811 	msr	BASEPRI, r3
 80079f2:	f3bf 8f6f 	isb	sy
 80079f6:	f3bf 8f4f 	dsb	sy
 80079fa:	603b      	str	r3, [r7, #0]
}
 80079fc:	bf00      	nop
 80079fe:	e7fe      	b.n	80079fe <vPortEnterCritical+0x4a>
	}
}
 8007a00:	bf00      	nop
 8007a02:	370c      	adds	r7, #12
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr
 8007a0c:	2000001c 	.word	0x2000001c
 8007a10:	e000ed04 	.word	0xe000ed04

08007a14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007a14:	b480      	push	{r7}
 8007a16:	b083      	sub	sp, #12
 8007a18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007a1a:	4b12      	ldr	r3, [pc, #72]	; (8007a64 <vPortExitCritical+0x50>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d10a      	bne.n	8007a38 <vPortExitCritical+0x24>
	__asm volatile
 8007a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a26:	f383 8811 	msr	BASEPRI, r3
 8007a2a:	f3bf 8f6f 	isb	sy
 8007a2e:	f3bf 8f4f 	dsb	sy
 8007a32:	607b      	str	r3, [r7, #4]
}
 8007a34:	bf00      	nop
 8007a36:	e7fe      	b.n	8007a36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007a38:	4b0a      	ldr	r3, [pc, #40]	; (8007a64 <vPortExitCritical+0x50>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	3b01      	subs	r3, #1
 8007a3e:	4a09      	ldr	r2, [pc, #36]	; (8007a64 <vPortExitCritical+0x50>)
 8007a40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007a42:	4b08      	ldr	r3, [pc, #32]	; (8007a64 <vPortExitCritical+0x50>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d105      	bne.n	8007a56 <vPortExitCritical+0x42>
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	f383 8811 	msr	BASEPRI, r3
}
 8007a54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007a56:	bf00      	nop
 8007a58:	370c      	adds	r7, #12
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr
 8007a62:	bf00      	nop
 8007a64:	2000001c 	.word	0x2000001c
	...

08007a70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007a70:	f3ef 8009 	mrs	r0, PSP
 8007a74:	f3bf 8f6f 	isb	sy
 8007a78:	4b15      	ldr	r3, [pc, #84]	; (8007ad0 <pxCurrentTCBConst>)
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	f01e 0f10 	tst.w	lr, #16
 8007a80:	bf08      	it	eq
 8007a82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007a86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a8a:	6010      	str	r0, [r2, #0]
 8007a8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007a90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007a94:	f380 8811 	msr	BASEPRI, r0
 8007a98:	f3bf 8f4f 	dsb	sy
 8007a9c:	f3bf 8f6f 	isb	sy
 8007aa0:	f7fe ffc0 	bl	8006a24 <vTaskSwitchContext>
 8007aa4:	f04f 0000 	mov.w	r0, #0
 8007aa8:	f380 8811 	msr	BASEPRI, r0
 8007aac:	bc09      	pop	{r0, r3}
 8007aae:	6819      	ldr	r1, [r3, #0]
 8007ab0:	6808      	ldr	r0, [r1, #0]
 8007ab2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ab6:	f01e 0f10 	tst.w	lr, #16
 8007aba:	bf08      	it	eq
 8007abc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007ac0:	f380 8809 	msr	PSP, r0
 8007ac4:	f3bf 8f6f 	isb	sy
 8007ac8:	4770      	bx	lr
 8007aca:	bf00      	nop
 8007acc:	f3af 8000 	nop.w

08007ad0 <pxCurrentTCBConst>:
 8007ad0:	20000acc 	.word	0x20000acc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007ad4:	bf00      	nop
 8007ad6:	bf00      	nop

08007ad8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b082      	sub	sp, #8
 8007adc:	af00      	add	r7, sp, #0
	__asm volatile
 8007ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae2:	f383 8811 	msr	BASEPRI, r3
 8007ae6:	f3bf 8f6f 	isb	sy
 8007aea:	f3bf 8f4f 	dsb	sy
 8007aee:	607b      	str	r3, [r7, #4]
}
 8007af0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007af2:	f7fe fedd 	bl	80068b0 <xTaskIncrementTick>
 8007af6:	4603      	mov	r3, r0
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d003      	beq.n	8007b04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007afc:	4b06      	ldr	r3, [pc, #24]	; (8007b18 <xPortSysTickHandler+0x40>)
 8007afe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b02:	601a      	str	r2, [r3, #0]
 8007b04:	2300      	movs	r3, #0
 8007b06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	f383 8811 	msr	BASEPRI, r3
}
 8007b0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007b10:	bf00      	nop
 8007b12:	3708      	adds	r7, #8
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}
 8007b18:	e000ed04 	.word	0xe000ed04

08007b1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007b20:	4b0b      	ldr	r3, [pc, #44]	; (8007b50 <vPortSetupTimerInterrupt+0x34>)
 8007b22:	2200      	movs	r2, #0
 8007b24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007b26:	4b0b      	ldr	r3, [pc, #44]	; (8007b54 <vPortSetupTimerInterrupt+0x38>)
 8007b28:	2200      	movs	r2, #0
 8007b2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007b2c:	4b0a      	ldr	r3, [pc, #40]	; (8007b58 <vPortSetupTimerInterrupt+0x3c>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a0a      	ldr	r2, [pc, #40]	; (8007b5c <vPortSetupTimerInterrupt+0x40>)
 8007b32:	fba2 2303 	umull	r2, r3, r2, r3
 8007b36:	099b      	lsrs	r3, r3, #6
 8007b38:	4a09      	ldr	r2, [pc, #36]	; (8007b60 <vPortSetupTimerInterrupt+0x44>)
 8007b3a:	3b01      	subs	r3, #1
 8007b3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007b3e:	4b04      	ldr	r3, [pc, #16]	; (8007b50 <vPortSetupTimerInterrupt+0x34>)
 8007b40:	2207      	movs	r2, #7
 8007b42:	601a      	str	r2, [r3, #0]
}
 8007b44:	bf00      	nop
 8007b46:	46bd      	mov	sp, r7
 8007b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4c:	4770      	bx	lr
 8007b4e:	bf00      	nop
 8007b50:	e000e010 	.word	0xe000e010
 8007b54:	e000e018 	.word	0xe000e018
 8007b58:	20000010 	.word	0x20000010
 8007b5c:	cccccccd 	.word	0xcccccccd
 8007b60:	e000e014 	.word	0xe000e014

08007b64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007b64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007b74 <vPortEnableVFP+0x10>
 8007b68:	6801      	ldr	r1, [r0, #0]
 8007b6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007b6e:	6001      	str	r1, [r0, #0]
 8007b70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007b72:	bf00      	nop
 8007b74:	e000ed88 	.word	0xe000ed88

08007b78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007b78:	b480      	push	{r7}
 8007b7a:	b085      	sub	sp, #20
 8007b7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007b7e:	f3ef 8305 	mrs	r3, IPSR
 8007b82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2b0f      	cmp	r3, #15
 8007b88:	d914      	bls.n	8007bb4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007b8a:	4a17      	ldr	r2, [pc, #92]	; (8007be8 <vPortValidateInterruptPriority+0x70>)
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	4413      	add	r3, r2
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007b94:	4b15      	ldr	r3, [pc, #84]	; (8007bec <vPortValidateInterruptPriority+0x74>)
 8007b96:	781b      	ldrb	r3, [r3, #0]
 8007b98:	7afa      	ldrb	r2, [r7, #11]
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d20a      	bcs.n	8007bb4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba2:	f383 8811 	msr	BASEPRI, r3
 8007ba6:	f3bf 8f6f 	isb	sy
 8007baa:	f3bf 8f4f 	dsb	sy
 8007bae:	607b      	str	r3, [r7, #4]
}
 8007bb0:	bf00      	nop
 8007bb2:	e7fe      	b.n	8007bb2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007bb4:	4b0e      	ldr	r3, [pc, #56]	; (8007bf0 <vPortValidateInterruptPriority+0x78>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007bbc:	4b0d      	ldr	r3, [pc, #52]	; (8007bf4 <vPortValidateInterruptPriority+0x7c>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	d90a      	bls.n	8007bda <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc8:	f383 8811 	msr	BASEPRI, r3
 8007bcc:	f3bf 8f6f 	isb	sy
 8007bd0:	f3bf 8f4f 	dsb	sy
 8007bd4:	603b      	str	r3, [r7, #0]
}
 8007bd6:	bf00      	nop
 8007bd8:	e7fe      	b.n	8007bd8 <vPortValidateInterruptPriority+0x60>
	}
 8007bda:	bf00      	nop
 8007bdc:	3714      	adds	r7, #20
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr
 8007be6:	bf00      	nop
 8007be8:	e000e3f0 	.word	0xe000e3f0
 8007bec:	200010f8 	.word	0x200010f8
 8007bf0:	e000ed0c 	.word	0xe000ed0c
 8007bf4:	200010fc 	.word	0x200010fc

08007bf8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b08a      	sub	sp, #40	; 0x28
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007c00:	2300      	movs	r3, #0
 8007c02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007c04:	f7fe fd98 	bl	8006738 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007c08:	4b5b      	ldr	r3, [pc, #364]	; (8007d78 <pvPortMalloc+0x180>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d101      	bne.n	8007c14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007c10:	f000 f920 	bl	8007e54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007c14:	4b59      	ldr	r3, [pc, #356]	; (8007d7c <pvPortMalloc+0x184>)
 8007c16:	681a      	ldr	r2, [r3, #0]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	4013      	ands	r3, r2
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	f040 8093 	bne.w	8007d48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d01d      	beq.n	8007c64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007c28:	2208      	movs	r2, #8
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	4413      	add	r3, r2
 8007c2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f003 0307 	and.w	r3, r3, #7
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d014      	beq.n	8007c64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f023 0307 	bic.w	r3, r3, #7
 8007c40:	3308      	adds	r3, #8
 8007c42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f003 0307 	and.w	r3, r3, #7
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d00a      	beq.n	8007c64 <pvPortMalloc+0x6c>
	__asm volatile
 8007c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c52:	f383 8811 	msr	BASEPRI, r3
 8007c56:	f3bf 8f6f 	isb	sy
 8007c5a:	f3bf 8f4f 	dsb	sy
 8007c5e:	617b      	str	r3, [r7, #20]
}
 8007c60:	bf00      	nop
 8007c62:	e7fe      	b.n	8007c62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d06e      	beq.n	8007d48 <pvPortMalloc+0x150>
 8007c6a:	4b45      	ldr	r3, [pc, #276]	; (8007d80 <pvPortMalloc+0x188>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	429a      	cmp	r2, r3
 8007c72:	d869      	bhi.n	8007d48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007c74:	4b43      	ldr	r3, [pc, #268]	; (8007d84 <pvPortMalloc+0x18c>)
 8007c76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007c78:	4b42      	ldr	r3, [pc, #264]	; (8007d84 <pvPortMalloc+0x18c>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c7e:	e004      	b.n	8007c8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	687a      	ldr	r2, [r7, #4]
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d903      	bls.n	8007c9c <pvPortMalloc+0xa4>
 8007c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d1f1      	bne.n	8007c80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007c9c:	4b36      	ldr	r3, [pc, #216]	; (8007d78 <pvPortMalloc+0x180>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d050      	beq.n	8007d48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007ca6:	6a3b      	ldr	r3, [r7, #32]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	2208      	movs	r2, #8
 8007cac:	4413      	add	r3, r2
 8007cae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb2:	681a      	ldr	r2, [r3, #0]
 8007cb4:	6a3b      	ldr	r3, [r7, #32]
 8007cb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cba:	685a      	ldr	r2, [r3, #4]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	1ad2      	subs	r2, r2, r3
 8007cc0:	2308      	movs	r3, #8
 8007cc2:	005b      	lsls	r3, r3, #1
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d91f      	bls.n	8007d08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007cc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	4413      	add	r3, r2
 8007cce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007cd0:	69bb      	ldr	r3, [r7, #24]
 8007cd2:	f003 0307 	and.w	r3, r3, #7
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d00a      	beq.n	8007cf0 <pvPortMalloc+0xf8>
	__asm volatile
 8007cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cde:	f383 8811 	msr	BASEPRI, r3
 8007ce2:	f3bf 8f6f 	isb	sy
 8007ce6:	f3bf 8f4f 	dsb	sy
 8007cea:	613b      	str	r3, [r7, #16]
}
 8007cec:	bf00      	nop
 8007cee:	e7fe      	b.n	8007cee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf2:	685a      	ldr	r2, [r3, #4]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	1ad2      	subs	r2, r2, r3
 8007cf8:	69bb      	ldr	r3, [r7, #24]
 8007cfa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfe:	687a      	ldr	r2, [r7, #4]
 8007d00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007d02:	69b8      	ldr	r0, [r7, #24]
 8007d04:	f000 f908 	bl	8007f18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007d08:	4b1d      	ldr	r3, [pc, #116]	; (8007d80 <pvPortMalloc+0x188>)
 8007d0a:	681a      	ldr	r2, [r3, #0]
 8007d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	1ad3      	subs	r3, r2, r3
 8007d12:	4a1b      	ldr	r2, [pc, #108]	; (8007d80 <pvPortMalloc+0x188>)
 8007d14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007d16:	4b1a      	ldr	r3, [pc, #104]	; (8007d80 <pvPortMalloc+0x188>)
 8007d18:	681a      	ldr	r2, [r3, #0]
 8007d1a:	4b1b      	ldr	r3, [pc, #108]	; (8007d88 <pvPortMalloc+0x190>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	d203      	bcs.n	8007d2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007d22:	4b17      	ldr	r3, [pc, #92]	; (8007d80 <pvPortMalloc+0x188>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a18      	ldr	r2, [pc, #96]	; (8007d88 <pvPortMalloc+0x190>)
 8007d28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2c:	685a      	ldr	r2, [r3, #4]
 8007d2e:	4b13      	ldr	r3, [pc, #76]	; (8007d7c <pvPortMalloc+0x184>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	431a      	orrs	r2, r3
 8007d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007d3e:	4b13      	ldr	r3, [pc, #76]	; (8007d8c <pvPortMalloc+0x194>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	3301      	adds	r3, #1
 8007d44:	4a11      	ldr	r2, [pc, #68]	; (8007d8c <pvPortMalloc+0x194>)
 8007d46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007d48:	f7fe fd04 	bl	8006754 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d4c:	69fb      	ldr	r3, [r7, #28]
 8007d4e:	f003 0307 	and.w	r3, r3, #7
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d00a      	beq.n	8007d6c <pvPortMalloc+0x174>
	__asm volatile
 8007d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d5a:	f383 8811 	msr	BASEPRI, r3
 8007d5e:	f3bf 8f6f 	isb	sy
 8007d62:	f3bf 8f4f 	dsb	sy
 8007d66:	60fb      	str	r3, [r7, #12]
}
 8007d68:	bf00      	nop
 8007d6a:	e7fe      	b.n	8007d6a <pvPortMalloc+0x172>
	return pvReturn;
 8007d6c:	69fb      	ldr	r3, [r7, #28]
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3728      	adds	r7, #40	; 0x28
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}
 8007d76:	bf00      	nop
 8007d78:	20004d08 	.word	0x20004d08
 8007d7c:	20004d1c 	.word	0x20004d1c
 8007d80:	20004d0c 	.word	0x20004d0c
 8007d84:	20004d00 	.word	0x20004d00
 8007d88:	20004d10 	.word	0x20004d10
 8007d8c:	20004d14 	.word	0x20004d14

08007d90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b086      	sub	sp, #24
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d04d      	beq.n	8007e3e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007da2:	2308      	movs	r3, #8
 8007da4:	425b      	negs	r3, r3
 8007da6:	697a      	ldr	r2, [r7, #20]
 8007da8:	4413      	add	r3, r2
 8007daa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	685a      	ldr	r2, [r3, #4]
 8007db4:	4b24      	ldr	r3, [pc, #144]	; (8007e48 <vPortFree+0xb8>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4013      	ands	r3, r2
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d10a      	bne.n	8007dd4 <vPortFree+0x44>
	__asm volatile
 8007dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc2:	f383 8811 	msr	BASEPRI, r3
 8007dc6:	f3bf 8f6f 	isb	sy
 8007dca:	f3bf 8f4f 	dsb	sy
 8007dce:	60fb      	str	r3, [r7, #12]
}
 8007dd0:	bf00      	nop
 8007dd2:	e7fe      	b.n	8007dd2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d00a      	beq.n	8007df2 <vPortFree+0x62>
	__asm volatile
 8007ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007de0:	f383 8811 	msr	BASEPRI, r3
 8007de4:	f3bf 8f6f 	isb	sy
 8007de8:	f3bf 8f4f 	dsb	sy
 8007dec:	60bb      	str	r3, [r7, #8]
}
 8007dee:	bf00      	nop
 8007df0:	e7fe      	b.n	8007df0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	685a      	ldr	r2, [r3, #4]
 8007df6:	4b14      	ldr	r3, [pc, #80]	; (8007e48 <vPortFree+0xb8>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4013      	ands	r3, r2
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d01e      	beq.n	8007e3e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d11a      	bne.n	8007e3e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	685a      	ldr	r2, [r3, #4]
 8007e0c:	4b0e      	ldr	r3, [pc, #56]	; (8007e48 <vPortFree+0xb8>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	43db      	mvns	r3, r3
 8007e12:	401a      	ands	r2, r3
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007e18:	f7fe fc8e 	bl	8006738 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	685a      	ldr	r2, [r3, #4]
 8007e20:	4b0a      	ldr	r3, [pc, #40]	; (8007e4c <vPortFree+0xbc>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4413      	add	r3, r2
 8007e26:	4a09      	ldr	r2, [pc, #36]	; (8007e4c <vPortFree+0xbc>)
 8007e28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007e2a:	6938      	ldr	r0, [r7, #16]
 8007e2c:	f000 f874 	bl	8007f18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007e30:	4b07      	ldr	r3, [pc, #28]	; (8007e50 <vPortFree+0xc0>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	3301      	adds	r3, #1
 8007e36:	4a06      	ldr	r2, [pc, #24]	; (8007e50 <vPortFree+0xc0>)
 8007e38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007e3a:	f7fe fc8b 	bl	8006754 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007e3e:	bf00      	nop
 8007e40:	3718      	adds	r7, #24
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}
 8007e46:	bf00      	nop
 8007e48:	20004d1c 	.word	0x20004d1c
 8007e4c:	20004d0c 	.word	0x20004d0c
 8007e50:	20004d18 	.word	0x20004d18

08007e54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007e54:	b480      	push	{r7}
 8007e56:	b085      	sub	sp, #20
 8007e58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007e5a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007e5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007e60:	4b27      	ldr	r3, [pc, #156]	; (8007f00 <prvHeapInit+0xac>)
 8007e62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f003 0307 	and.w	r3, r3, #7
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d00c      	beq.n	8007e88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	3307      	adds	r3, #7
 8007e72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f023 0307 	bic.w	r3, r3, #7
 8007e7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007e7c:	68ba      	ldr	r2, [r7, #8]
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	1ad3      	subs	r3, r2, r3
 8007e82:	4a1f      	ldr	r2, [pc, #124]	; (8007f00 <prvHeapInit+0xac>)
 8007e84:	4413      	add	r3, r2
 8007e86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007e8c:	4a1d      	ldr	r2, [pc, #116]	; (8007f04 <prvHeapInit+0xb0>)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007e92:	4b1c      	ldr	r3, [pc, #112]	; (8007f04 <prvHeapInit+0xb0>)
 8007e94:	2200      	movs	r2, #0
 8007e96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	68ba      	ldr	r2, [r7, #8]
 8007e9c:	4413      	add	r3, r2
 8007e9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007ea0:	2208      	movs	r2, #8
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	1a9b      	subs	r3, r3, r2
 8007ea6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	f023 0307 	bic.w	r3, r3, #7
 8007eae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	4a15      	ldr	r2, [pc, #84]	; (8007f08 <prvHeapInit+0xb4>)
 8007eb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007eb6:	4b14      	ldr	r3, [pc, #80]	; (8007f08 <prvHeapInit+0xb4>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007ebe:	4b12      	ldr	r3, [pc, #72]	; (8007f08 <prvHeapInit+0xb4>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	68fa      	ldr	r2, [r7, #12]
 8007ece:	1ad2      	subs	r2, r2, r3
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007ed4:	4b0c      	ldr	r3, [pc, #48]	; (8007f08 <prvHeapInit+0xb4>)
 8007ed6:	681a      	ldr	r2, [r3, #0]
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	4a0a      	ldr	r2, [pc, #40]	; (8007f0c <prvHeapInit+0xb8>)
 8007ee2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	685b      	ldr	r3, [r3, #4]
 8007ee8:	4a09      	ldr	r2, [pc, #36]	; (8007f10 <prvHeapInit+0xbc>)
 8007eea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007eec:	4b09      	ldr	r3, [pc, #36]	; (8007f14 <prvHeapInit+0xc0>)
 8007eee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007ef2:	601a      	str	r2, [r3, #0]
}
 8007ef4:	bf00      	nop
 8007ef6:	3714      	adds	r7, #20
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr
 8007f00:	20001100 	.word	0x20001100
 8007f04:	20004d00 	.word	0x20004d00
 8007f08:	20004d08 	.word	0x20004d08
 8007f0c:	20004d10 	.word	0x20004d10
 8007f10:	20004d0c 	.word	0x20004d0c
 8007f14:	20004d1c 	.word	0x20004d1c

08007f18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b085      	sub	sp, #20
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007f20:	4b28      	ldr	r3, [pc, #160]	; (8007fc4 <prvInsertBlockIntoFreeList+0xac>)
 8007f22:	60fb      	str	r3, [r7, #12]
 8007f24:	e002      	b.n	8007f2c <prvInsertBlockIntoFreeList+0x14>
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	60fb      	str	r3, [r7, #12]
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	687a      	ldr	r2, [r7, #4]
 8007f32:	429a      	cmp	r2, r3
 8007f34:	d8f7      	bhi.n	8007f26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	68ba      	ldr	r2, [r7, #8]
 8007f40:	4413      	add	r3, r2
 8007f42:	687a      	ldr	r2, [r7, #4]
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d108      	bne.n	8007f5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	685a      	ldr	r2, [r3, #4]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	441a      	add	r2, r3
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	685b      	ldr	r3, [r3, #4]
 8007f62:	68ba      	ldr	r2, [r7, #8]
 8007f64:	441a      	add	r2, r3
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d118      	bne.n	8007fa0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681a      	ldr	r2, [r3, #0]
 8007f72:	4b15      	ldr	r3, [pc, #84]	; (8007fc8 <prvInsertBlockIntoFreeList+0xb0>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	429a      	cmp	r2, r3
 8007f78:	d00d      	beq.n	8007f96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	685a      	ldr	r2, [r3, #4]
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	441a      	add	r2, r3
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	681a      	ldr	r2, [r3, #0]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	601a      	str	r2, [r3, #0]
 8007f94:	e008      	b.n	8007fa8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007f96:	4b0c      	ldr	r3, [pc, #48]	; (8007fc8 <prvInsertBlockIntoFreeList+0xb0>)
 8007f98:	681a      	ldr	r2, [r3, #0]
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	601a      	str	r2, [r3, #0]
 8007f9e:	e003      	b.n	8007fa8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007fa8:	68fa      	ldr	r2, [r7, #12]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	429a      	cmp	r2, r3
 8007fae:	d002      	beq.n	8007fb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	687a      	ldr	r2, [r7, #4]
 8007fb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007fb6:	bf00      	nop
 8007fb8:	3714      	adds	r7, #20
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc0:	4770      	bx	lr
 8007fc2:	bf00      	nop
 8007fc4:	20004d00 	.word	0x20004d00
 8007fc8:	20004d08 	.word	0x20004d08

08007fcc <__errno>:
 8007fcc:	4b01      	ldr	r3, [pc, #4]	; (8007fd4 <__errno+0x8>)
 8007fce:	6818      	ldr	r0, [r3, #0]
 8007fd0:	4770      	bx	lr
 8007fd2:	bf00      	nop
 8007fd4:	20000020 	.word	0x20000020

08007fd8 <__libc_init_array>:
 8007fd8:	b570      	push	{r4, r5, r6, lr}
 8007fda:	4d0d      	ldr	r5, [pc, #52]	; (8008010 <__libc_init_array+0x38>)
 8007fdc:	4c0d      	ldr	r4, [pc, #52]	; (8008014 <__libc_init_array+0x3c>)
 8007fde:	1b64      	subs	r4, r4, r5
 8007fe0:	10a4      	asrs	r4, r4, #2
 8007fe2:	2600      	movs	r6, #0
 8007fe4:	42a6      	cmp	r6, r4
 8007fe6:	d109      	bne.n	8007ffc <__libc_init_array+0x24>
 8007fe8:	4d0b      	ldr	r5, [pc, #44]	; (8008018 <__libc_init_array+0x40>)
 8007fea:	4c0c      	ldr	r4, [pc, #48]	; (800801c <__libc_init_array+0x44>)
 8007fec:	f003 fb20 	bl	800b630 <_init>
 8007ff0:	1b64      	subs	r4, r4, r5
 8007ff2:	10a4      	asrs	r4, r4, #2
 8007ff4:	2600      	movs	r6, #0
 8007ff6:	42a6      	cmp	r6, r4
 8007ff8:	d105      	bne.n	8008006 <__libc_init_array+0x2e>
 8007ffa:	bd70      	pop	{r4, r5, r6, pc}
 8007ffc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008000:	4798      	blx	r3
 8008002:	3601      	adds	r6, #1
 8008004:	e7ee      	b.n	8007fe4 <__libc_init_array+0xc>
 8008006:	f855 3b04 	ldr.w	r3, [r5], #4
 800800a:	4798      	blx	r3
 800800c:	3601      	adds	r6, #1
 800800e:	e7f2      	b.n	8007ff6 <__libc_init_array+0x1e>
 8008010:	0800bee4 	.word	0x0800bee4
 8008014:	0800bee4 	.word	0x0800bee4
 8008018:	0800bee4 	.word	0x0800bee4
 800801c:	0800bee8 	.word	0x0800bee8

08008020 <memcpy>:
 8008020:	440a      	add	r2, r1
 8008022:	4291      	cmp	r1, r2
 8008024:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008028:	d100      	bne.n	800802c <memcpy+0xc>
 800802a:	4770      	bx	lr
 800802c:	b510      	push	{r4, lr}
 800802e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008032:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008036:	4291      	cmp	r1, r2
 8008038:	d1f9      	bne.n	800802e <memcpy+0xe>
 800803a:	bd10      	pop	{r4, pc}

0800803c <memset>:
 800803c:	4402      	add	r2, r0
 800803e:	4603      	mov	r3, r0
 8008040:	4293      	cmp	r3, r2
 8008042:	d100      	bne.n	8008046 <memset+0xa>
 8008044:	4770      	bx	lr
 8008046:	f803 1b01 	strb.w	r1, [r3], #1
 800804a:	e7f9      	b.n	8008040 <memset+0x4>

0800804c <__cvt>:
 800804c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008050:	ec55 4b10 	vmov	r4, r5, d0
 8008054:	2d00      	cmp	r5, #0
 8008056:	460e      	mov	r6, r1
 8008058:	4619      	mov	r1, r3
 800805a:	462b      	mov	r3, r5
 800805c:	bfbb      	ittet	lt
 800805e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008062:	461d      	movlt	r5, r3
 8008064:	2300      	movge	r3, #0
 8008066:	232d      	movlt	r3, #45	; 0x2d
 8008068:	700b      	strb	r3, [r1, #0]
 800806a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800806c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008070:	4691      	mov	r9, r2
 8008072:	f023 0820 	bic.w	r8, r3, #32
 8008076:	bfbc      	itt	lt
 8008078:	4622      	movlt	r2, r4
 800807a:	4614      	movlt	r4, r2
 800807c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008080:	d005      	beq.n	800808e <__cvt+0x42>
 8008082:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008086:	d100      	bne.n	800808a <__cvt+0x3e>
 8008088:	3601      	adds	r6, #1
 800808a:	2102      	movs	r1, #2
 800808c:	e000      	b.n	8008090 <__cvt+0x44>
 800808e:	2103      	movs	r1, #3
 8008090:	ab03      	add	r3, sp, #12
 8008092:	9301      	str	r3, [sp, #4]
 8008094:	ab02      	add	r3, sp, #8
 8008096:	9300      	str	r3, [sp, #0]
 8008098:	ec45 4b10 	vmov	d0, r4, r5
 800809c:	4653      	mov	r3, sl
 800809e:	4632      	mov	r2, r6
 80080a0:	f000 fe1a 	bl	8008cd8 <_dtoa_r>
 80080a4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80080a8:	4607      	mov	r7, r0
 80080aa:	d102      	bne.n	80080b2 <__cvt+0x66>
 80080ac:	f019 0f01 	tst.w	r9, #1
 80080b0:	d022      	beq.n	80080f8 <__cvt+0xac>
 80080b2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80080b6:	eb07 0906 	add.w	r9, r7, r6
 80080ba:	d110      	bne.n	80080de <__cvt+0x92>
 80080bc:	783b      	ldrb	r3, [r7, #0]
 80080be:	2b30      	cmp	r3, #48	; 0x30
 80080c0:	d10a      	bne.n	80080d8 <__cvt+0x8c>
 80080c2:	2200      	movs	r2, #0
 80080c4:	2300      	movs	r3, #0
 80080c6:	4620      	mov	r0, r4
 80080c8:	4629      	mov	r1, r5
 80080ca:	f7f8 fd05 	bl	8000ad8 <__aeabi_dcmpeq>
 80080ce:	b918      	cbnz	r0, 80080d8 <__cvt+0x8c>
 80080d0:	f1c6 0601 	rsb	r6, r6, #1
 80080d4:	f8ca 6000 	str.w	r6, [sl]
 80080d8:	f8da 3000 	ldr.w	r3, [sl]
 80080dc:	4499      	add	r9, r3
 80080de:	2200      	movs	r2, #0
 80080e0:	2300      	movs	r3, #0
 80080e2:	4620      	mov	r0, r4
 80080e4:	4629      	mov	r1, r5
 80080e6:	f7f8 fcf7 	bl	8000ad8 <__aeabi_dcmpeq>
 80080ea:	b108      	cbz	r0, 80080f0 <__cvt+0xa4>
 80080ec:	f8cd 900c 	str.w	r9, [sp, #12]
 80080f0:	2230      	movs	r2, #48	; 0x30
 80080f2:	9b03      	ldr	r3, [sp, #12]
 80080f4:	454b      	cmp	r3, r9
 80080f6:	d307      	bcc.n	8008108 <__cvt+0xbc>
 80080f8:	9b03      	ldr	r3, [sp, #12]
 80080fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80080fc:	1bdb      	subs	r3, r3, r7
 80080fe:	4638      	mov	r0, r7
 8008100:	6013      	str	r3, [r2, #0]
 8008102:	b004      	add	sp, #16
 8008104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008108:	1c59      	adds	r1, r3, #1
 800810a:	9103      	str	r1, [sp, #12]
 800810c:	701a      	strb	r2, [r3, #0]
 800810e:	e7f0      	b.n	80080f2 <__cvt+0xa6>

08008110 <__exponent>:
 8008110:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008112:	4603      	mov	r3, r0
 8008114:	2900      	cmp	r1, #0
 8008116:	bfb8      	it	lt
 8008118:	4249      	neglt	r1, r1
 800811a:	f803 2b02 	strb.w	r2, [r3], #2
 800811e:	bfb4      	ite	lt
 8008120:	222d      	movlt	r2, #45	; 0x2d
 8008122:	222b      	movge	r2, #43	; 0x2b
 8008124:	2909      	cmp	r1, #9
 8008126:	7042      	strb	r2, [r0, #1]
 8008128:	dd2a      	ble.n	8008180 <__exponent+0x70>
 800812a:	f10d 0407 	add.w	r4, sp, #7
 800812e:	46a4      	mov	ip, r4
 8008130:	270a      	movs	r7, #10
 8008132:	46a6      	mov	lr, r4
 8008134:	460a      	mov	r2, r1
 8008136:	fb91 f6f7 	sdiv	r6, r1, r7
 800813a:	fb07 1516 	mls	r5, r7, r6, r1
 800813e:	3530      	adds	r5, #48	; 0x30
 8008140:	2a63      	cmp	r2, #99	; 0x63
 8008142:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8008146:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800814a:	4631      	mov	r1, r6
 800814c:	dcf1      	bgt.n	8008132 <__exponent+0x22>
 800814e:	3130      	adds	r1, #48	; 0x30
 8008150:	f1ae 0502 	sub.w	r5, lr, #2
 8008154:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008158:	1c44      	adds	r4, r0, #1
 800815a:	4629      	mov	r1, r5
 800815c:	4561      	cmp	r1, ip
 800815e:	d30a      	bcc.n	8008176 <__exponent+0x66>
 8008160:	f10d 0209 	add.w	r2, sp, #9
 8008164:	eba2 020e 	sub.w	r2, r2, lr
 8008168:	4565      	cmp	r5, ip
 800816a:	bf88      	it	hi
 800816c:	2200      	movhi	r2, #0
 800816e:	4413      	add	r3, r2
 8008170:	1a18      	subs	r0, r3, r0
 8008172:	b003      	add	sp, #12
 8008174:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008176:	f811 2b01 	ldrb.w	r2, [r1], #1
 800817a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800817e:	e7ed      	b.n	800815c <__exponent+0x4c>
 8008180:	2330      	movs	r3, #48	; 0x30
 8008182:	3130      	adds	r1, #48	; 0x30
 8008184:	7083      	strb	r3, [r0, #2]
 8008186:	70c1      	strb	r1, [r0, #3]
 8008188:	1d03      	adds	r3, r0, #4
 800818a:	e7f1      	b.n	8008170 <__exponent+0x60>

0800818c <_printf_float>:
 800818c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008190:	ed2d 8b02 	vpush	{d8}
 8008194:	b08d      	sub	sp, #52	; 0x34
 8008196:	460c      	mov	r4, r1
 8008198:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800819c:	4616      	mov	r6, r2
 800819e:	461f      	mov	r7, r3
 80081a0:	4605      	mov	r5, r0
 80081a2:	f001 fd3f 	bl	8009c24 <_localeconv_r>
 80081a6:	f8d0 a000 	ldr.w	sl, [r0]
 80081aa:	4650      	mov	r0, sl
 80081ac:	f7f8 f818 	bl	80001e0 <strlen>
 80081b0:	2300      	movs	r3, #0
 80081b2:	930a      	str	r3, [sp, #40]	; 0x28
 80081b4:	6823      	ldr	r3, [r4, #0]
 80081b6:	9305      	str	r3, [sp, #20]
 80081b8:	f8d8 3000 	ldr.w	r3, [r8]
 80081bc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80081c0:	3307      	adds	r3, #7
 80081c2:	f023 0307 	bic.w	r3, r3, #7
 80081c6:	f103 0208 	add.w	r2, r3, #8
 80081ca:	f8c8 2000 	str.w	r2, [r8]
 80081ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081d2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80081d6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80081da:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80081de:	9307      	str	r3, [sp, #28]
 80081e0:	f8cd 8018 	str.w	r8, [sp, #24]
 80081e4:	ee08 0a10 	vmov	s16, r0
 80081e8:	4b9f      	ldr	r3, [pc, #636]	; (8008468 <_printf_float+0x2dc>)
 80081ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80081ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80081f2:	f7f8 fca3 	bl	8000b3c <__aeabi_dcmpun>
 80081f6:	bb88      	cbnz	r0, 800825c <_printf_float+0xd0>
 80081f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80081fc:	4b9a      	ldr	r3, [pc, #616]	; (8008468 <_printf_float+0x2dc>)
 80081fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008202:	f7f8 fc7d 	bl	8000b00 <__aeabi_dcmple>
 8008206:	bb48      	cbnz	r0, 800825c <_printf_float+0xd0>
 8008208:	2200      	movs	r2, #0
 800820a:	2300      	movs	r3, #0
 800820c:	4640      	mov	r0, r8
 800820e:	4649      	mov	r1, r9
 8008210:	f7f8 fc6c 	bl	8000aec <__aeabi_dcmplt>
 8008214:	b110      	cbz	r0, 800821c <_printf_float+0x90>
 8008216:	232d      	movs	r3, #45	; 0x2d
 8008218:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800821c:	4b93      	ldr	r3, [pc, #588]	; (800846c <_printf_float+0x2e0>)
 800821e:	4894      	ldr	r0, [pc, #592]	; (8008470 <_printf_float+0x2e4>)
 8008220:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008224:	bf94      	ite	ls
 8008226:	4698      	movls	r8, r3
 8008228:	4680      	movhi	r8, r0
 800822a:	2303      	movs	r3, #3
 800822c:	6123      	str	r3, [r4, #16]
 800822e:	9b05      	ldr	r3, [sp, #20]
 8008230:	f023 0204 	bic.w	r2, r3, #4
 8008234:	6022      	str	r2, [r4, #0]
 8008236:	f04f 0900 	mov.w	r9, #0
 800823a:	9700      	str	r7, [sp, #0]
 800823c:	4633      	mov	r3, r6
 800823e:	aa0b      	add	r2, sp, #44	; 0x2c
 8008240:	4621      	mov	r1, r4
 8008242:	4628      	mov	r0, r5
 8008244:	f000 f9d8 	bl	80085f8 <_printf_common>
 8008248:	3001      	adds	r0, #1
 800824a:	f040 8090 	bne.w	800836e <_printf_float+0x1e2>
 800824e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008252:	b00d      	add	sp, #52	; 0x34
 8008254:	ecbd 8b02 	vpop	{d8}
 8008258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800825c:	4642      	mov	r2, r8
 800825e:	464b      	mov	r3, r9
 8008260:	4640      	mov	r0, r8
 8008262:	4649      	mov	r1, r9
 8008264:	f7f8 fc6a 	bl	8000b3c <__aeabi_dcmpun>
 8008268:	b140      	cbz	r0, 800827c <_printf_float+0xf0>
 800826a:	464b      	mov	r3, r9
 800826c:	2b00      	cmp	r3, #0
 800826e:	bfbc      	itt	lt
 8008270:	232d      	movlt	r3, #45	; 0x2d
 8008272:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008276:	487f      	ldr	r0, [pc, #508]	; (8008474 <_printf_float+0x2e8>)
 8008278:	4b7f      	ldr	r3, [pc, #508]	; (8008478 <_printf_float+0x2ec>)
 800827a:	e7d1      	b.n	8008220 <_printf_float+0x94>
 800827c:	6863      	ldr	r3, [r4, #4]
 800827e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008282:	9206      	str	r2, [sp, #24]
 8008284:	1c5a      	adds	r2, r3, #1
 8008286:	d13f      	bne.n	8008308 <_printf_float+0x17c>
 8008288:	2306      	movs	r3, #6
 800828a:	6063      	str	r3, [r4, #4]
 800828c:	9b05      	ldr	r3, [sp, #20]
 800828e:	6861      	ldr	r1, [r4, #4]
 8008290:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008294:	2300      	movs	r3, #0
 8008296:	9303      	str	r3, [sp, #12]
 8008298:	ab0a      	add	r3, sp, #40	; 0x28
 800829a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800829e:	ab09      	add	r3, sp, #36	; 0x24
 80082a0:	ec49 8b10 	vmov	d0, r8, r9
 80082a4:	9300      	str	r3, [sp, #0]
 80082a6:	6022      	str	r2, [r4, #0]
 80082a8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80082ac:	4628      	mov	r0, r5
 80082ae:	f7ff fecd 	bl	800804c <__cvt>
 80082b2:	9b06      	ldr	r3, [sp, #24]
 80082b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80082b6:	2b47      	cmp	r3, #71	; 0x47
 80082b8:	4680      	mov	r8, r0
 80082ba:	d108      	bne.n	80082ce <_printf_float+0x142>
 80082bc:	1cc8      	adds	r0, r1, #3
 80082be:	db02      	blt.n	80082c6 <_printf_float+0x13a>
 80082c0:	6863      	ldr	r3, [r4, #4]
 80082c2:	4299      	cmp	r1, r3
 80082c4:	dd41      	ble.n	800834a <_printf_float+0x1be>
 80082c6:	f1ab 0b02 	sub.w	fp, fp, #2
 80082ca:	fa5f fb8b 	uxtb.w	fp, fp
 80082ce:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80082d2:	d820      	bhi.n	8008316 <_printf_float+0x18a>
 80082d4:	3901      	subs	r1, #1
 80082d6:	465a      	mov	r2, fp
 80082d8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80082dc:	9109      	str	r1, [sp, #36]	; 0x24
 80082de:	f7ff ff17 	bl	8008110 <__exponent>
 80082e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80082e4:	1813      	adds	r3, r2, r0
 80082e6:	2a01      	cmp	r2, #1
 80082e8:	4681      	mov	r9, r0
 80082ea:	6123      	str	r3, [r4, #16]
 80082ec:	dc02      	bgt.n	80082f4 <_printf_float+0x168>
 80082ee:	6822      	ldr	r2, [r4, #0]
 80082f0:	07d2      	lsls	r2, r2, #31
 80082f2:	d501      	bpl.n	80082f8 <_printf_float+0x16c>
 80082f4:	3301      	adds	r3, #1
 80082f6:	6123      	str	r3, [r4, #16]
 80082f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d09c      	beq.n	800823a <_printf_float+0xae>
 8008300:	232d      	movs	r3, #45	; 0x2d
 8008302:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008306:	e798      	b.n	800823a <_printf_float+0xae>
 8008308:	9a06      	ldr	r2, [sp, #24]
 800830a:	2a47      	cmp	r2, #71	; 0x47
 800830c:	d1be      	bne.n	800828c <_printf_float+0x100>
 800830e:	2b00      	cmp	r3, #0
 8008310:	d1bc      	bne.n	800828c <_printf_float+0x100>
 8008312:	2301      	movs	r3, #1
 8008314:	e7b9      	b.n	800828a <_printf_float+0xfe>
 8008316:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800831a:	d118      	bne.n	800834e <_printf_float+0x1c2>
 800831c:	2900      	cmp	r1, #0
 800831e:	6863      	ldr	r3, [r4, #4]
 8008320:	dd0b      	ble.n	800833a <_printf_float+0x1ae>
 8008322:	6121      	str	r1, [r4, #16]
 8008324:	b913      	cbnz	r3, 800832c <_printf_float+0x1a0>
 8008326:	6822      	ldr	r2, [r4, #0]
 8008328:	07d0      	lsls	r0, r2, #31
 800832a:	d502      	bpl.n	8008332 <_printf_float+0x1a6>
 800832c:	3301      	adds	r3, #1
 800832e:	440b      	add	r3, r1
 8008330:	6123      	str	r3, [r4, #16]
 8008332:	65a1      	str	r1, [r4, #88]	; 0x58
 8008334:	f04f 0900 	mov.w	r9, #0
 8008338:	e7de      	b.n	80082f8 <_printf_float+0x16c>
 800833a:	b913      	cbnz	r3, 8008342 <_printf_float+0x1b6>
 800833c:	6822      	ldr	r2, [r4, #0]
 800833e:	07d2      	lsls	r2, r2, #31
 8008340:	d501      	bpl.n	8008346 <_printf_float+0x1ba>
 8008342:	3302      	adds	r3, #2
 8008344:	e7f4      	b.n	8008330 <_printf_float+0x1a4>
 8008346:	2301      	movs	r3, #1
 8008348:	e7f2      	b.n	8008330 <_printf_float+0x1a4>
 800834a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800834e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008350:	4299      	cmp	r1, r3
 8008352:	db05      	blt.n	8008360 <_printf_float+0x1d4>
 8008354:	6823      	ldr	r3, [r4, #0]
 8008356:	6121      	str	r1, [r4, #16]
 8008358:	07d8      	lsls	r0, r3, #31
 800835a:	d5ea      	bpl.n	8008332 <_printf_float+0x1a6>
 800835c:	1c4b      	adds	r3, r1, #1
 800835e:	e7e7      	b.n	8008330 <_printf_float+0x1a4>
 8008360:	2900      	cmp	r1, #0
 8008362:	bfd4      	ite	le
 8008364:	f1c1 0202 	rsble	r2, r1, #2
 8008368:	2201      	movgt	r2, #1
 800836a:	4413      	add	r3, r2
 800836c:	e7e0      	b.n	8008330 <_printf_float+0x1a4>
 800836e:	6823      	ldr	r3, [r4, #0]
 8008370:	055a      	lsls	r2, r3, #21
 8008372:	d407      	bmi.n	8008384 <_printf_float+0x1f8>
 8008374:	6923      	ldr	r3, [r4, #16]
 8008376:	4642      	mov	r2, r8
 8008378:	4631      	mov	r1, r6
 800837a:	4628      	mov	r0, r5
 800837c:	47b8      	blx	r7
 800837e:	3001      	adds	r0, #1
 8008380:	d12c      	bne.n	80083dc <_printf_float+0x250>
 8008382:	e764      	b.n	800824e <_printf_float+0xc2>
 8008384:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008388:	f240 80e0 	bls.w	800854c <_printf_float+0x3c0>
 800838c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008390:	2200      	movs	r2, #0
 8008392:	2300      	movs	r3, #0
 8008394:	f7f8 fba0 	bl	8000ad8 <__aeabi_dcmpeq>
 8008398:	2800      	cmp	r0, #0
 800839a:	d034      	beq.n	8008406 <_printf_float+0x27a>
 800839c:	4a37      	ldr	r2, [pc, #220]	; (800847c <_printf_float+0x2f0>)
 800839e:	2301      	movs	r3, #1
 80083a0:	4631      	mov	r1, r6
 80083a2:	4628      	mov	r0, r5
 80083a4:	47b8      	blx	r7
 80083a6:	3001      	adds	r0, #1
 80083a8:	f43f af51 	beq.w	800824e <_printf_float+0xc2>
 80083ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80083b0:	429a      	cmp	r2, r3
 80083b2:	db02      	blt.n	80083ba <_printf_float+0x22e>
 80083b4:	6823      	ldr	r3, [r4, #0]
 80083b6:	07d8      	lsls	r0, r3, #31
 80083b8:	d510      	bpl.n	80083dc <_printf_float+0x250>
 80083ba:	ee18 3a10 	vmov	r3, s16
 80083be:	4652      	mov	r2, sl
 80083c0:	4631      	mov	r1, r6
 80083c2:	4628      	mov	r0, r5
 80083c4:	47b8      	blx	r7
 80083c6:	3001      	adds	r0, #1
 80083c8:	f43f af41 	beq.w	800824e <_printf_float+0xc2>
 80083cc:	f04f 0800 	mov.w	r8, #0
 80083d0:	f104 091a 	add.w	r9, r4, #26
 80083d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083d6:	3b01      	subs	r3, #1
 80083d8:	4543      	cmp	r3, r8
 80083da:	dc09      	bgt.n	80083f0 <_printf_float+0x264>
 80083dc:	6823      	ldr	r3, [r4, #0]
 80083de:	079b      	lsls	r3, r3, #30
 80083e0:	f100 8105 	bmi.w	80085ee <_printf_float+0x462>
 80083e4:	68e0      	ldr	r0, [r4, #12]
 80083e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083e8:	4298      	cmp	r0, r3
 80083ea:	bfb8      	it	lt
 80083ec:	4618      	movlt	r0, r3
 80083ee:	e730      	b.n	8008252 <_printf_float+0xc6>
 80083f0:	2301      	movs	r3, #1
 80083f2:	464a      	mov	r2, r9
 80083f4:	4631      	mov	r1, r6
 80083f6:	4628      	mov	r0, r5
 80083f8:	47b8      	blx	r7
 80083fa:	3001      	adds	r0, #1
 80083fc:	f43f af27 	beq.w	800824e <_printf_float+0xc2>
 8008400:	f108 0801 	add.w	r8, r8, #1
 8008404:	e7e6      	b.n	80083d4 <_printf_float+0x248>
 8008406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008408:	2b00      	cmp	r3, #0
 800840a:	dc39      	bgt.n	8008480 <_printf_float+0x2f4>
 800840c:	4a1b      	ldr	r2, [pc, #108]	; (800847c <_printf_float+0x2f0>)
 800840e:	2301      	movs	r3, #1
 8008410:	4631      	mov	r1, r6
 8008412:	4628      	mov	r0, r5
 8008414:	47b8      	blx	r7
 8008416:	3001      	adds	r0, #1
 8008418:	f43f af19 	beq.w	800824e <_printf_float+0xc2>
 800841c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008420:	4313      	orrs	r3, r2
 8008422:	d102      	bne.n	800842a <_printf_float+0x29e>
 8008424:	6823      	ldr	r3, [r4, #0]
 8008426:	07d9      	lsls	r1, r3, #31
 8008428:	d5d8      	bpl.n	80083dc <_printf_float+0x250>
 800842a:	ee18 3a10 	vmov	r3, s16
 800842e:	4652      	mov	r2, sl
 8008430:	4631      	mov	r1, r6
 8008432:	4628      	mov	r0, r5
 8008434:	47b8      	blx	r7
 8008436:	3001      	adds	r0, #1
 8008438:	f43f af09 	beq.w	800824e <_printf_float+0xc2>
 800843c:	f04f 0900 	mov.w	r9, #0
 8008440:	f104 0a1a 	add.w	sl, r4, #26
 8008444:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008446:	425b      	negs	r3, r3
 8008448:	454b      	cmp	r3, r9
 800844a:	dc01      	bgt.n	8008450 <_printf_float+0x2c4>
 800844c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800844e:	e792      	b.n	8008376 <_printf_float+0x1ea>
 8008450:	2301      	movs	r3, #1
 8008452:	4652      	mov	r2, sl
 8008454:	4631      	mov	r1, r6
 8008456:	4628      	mov	r0, r5
 8008458:	47b8      	blx	r7
 800845a:	3001      	adds	r0, #1
 800845c:	f43f aef7 	beq.w	800824e <_printf_float+0xc2>
 8008460:	f109 0901 	add.w	r9, r9, #1
 8008464:	e7ee      	b.n	8008444 <_printf_float+0x2b8>
 8008466:	bf00      	nop
 8008468:	7fefffff 	.word	0x7fefffff
 800846c:	0800b738 	.word	0x0800b738
 8008470:	0800b73c 	.word	0x0800b73c
 8008474:	0800b744 	.word	0x0800b744
 8008478:	0800b740 	.word	0x0800b740
 800847c:	0800b748 	.word	0x0800b748
 8008480:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008482:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008484:	429a      	cmp	r2, r3
 8008486:	bfa8      	it	ge
 8008488:	461a      	movge	r2, r3
 800848a:	2a00      	cmp	r2, #0
 800848c:	4691      	mov	r9, r2
 800848e:	dc37      	bgt.n	8008500 <_printf_float+0x374>
 8008490:	f04f 0b00 	mov.w	fp, #0
 8008494:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008498:	f104 021a 	add.w	r2, r4, #26
 800849c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800849e:	9305      	str	r3, [sp, #20]
 80084a0:	eba3 0309 	sub.w	r3, r3, r9
 80084a4:	455b      	cmp	r3, fp
 80084a6:	dc33      	bgt.n	8008510 <_printf_float+0x384>
 80084a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80084ac:	429a      	cmp	r2, r3
 80084ae:	db3b      	blt.n	8008528 <_printf_float+0x39c>
 80084b0:	6823      	ldr	r3, [r4, #0]
 80084b2:	07da      	lsls	r2, r3, #31
 80084b4:	d438      	bmi.n	8008528 <_printf_float+0x39c>
 80084b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084b8:	9a05      	ldr	r2, [sp, #20]
 80084ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 80084bc:	1a9a      	subs	r2, r3, r2
 80084be:	eba3 0901 	sub.w	r9, r3, r1
 80084c2:	4591      	cmp	r9, r2
 80084c4:	bfa8      	it	ge
 80084c6:	4691      	movge	r9, r2
 80084c8:	f1b9 0f00 	cmp.w	r9, #0
 80084cc:	dc35      	bgt.n	800853a <_printf_float+0x3ae>
 80084ce:	f04f 0800 	mov.w	r8, #0
 80084d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80084d6:	f104 0a1a 	add.w	sl, r4, #26
 80084da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80084de:	1a9b      	subs	r3, r3, r2
 80084e0:	eba3 0309 	sub.w	r3, r3, r9
 80084e4:	4543      	cmp	r3, r8
 80084e6:	f77f af79 	ble.w	80083dc <_printf_float+0x250>
 80084ea:	2301      	movs	r3, #1
 80084ec:	4652      	mov	r2, sl
 80084ee:	4631      	mov	r1, r6
 80084f0:	4628      	mov	r0, r5
 80084f2:	47b8      	blx	r7
 80084f4:	3001      	adds	r0, #1
 80084f6:	f43f aeaa 	beq.w	800824e <_printf_float+0xc2>
 80084fa:	f108 0801 	add.w	r8, r8, #1
 80084fe:	e7ec      	b.n	80084da <_printf_float+0x34e>
 8008500:	4613      	mov	r3, r2
 8008502:	4631      	mov	r1, r6
 8008504:	4642      	mov	r2, r8
 8008506:	4628      	mov	r0, r5
 8008508:	47b8      	blx	r7
 800850a:	3001      	adds	r0, #1
 800850c:	d1c0      	bne.n	8008490 <_printf_float+0x304>
 800850e:	e69e      	b.n	800824e <_printf_float+0xc2>
 8008510:	2301      	movs	r3, #1
 8008512:	4631      	mov	r1, r6
 8008514:	4628      	mov	r0, r5
 8008516:	9205      	str	r2, [sp, #20]
 8008518:	47b8      	blx	r7
 800851a:	3001      	adds	r0, #1
 800851c:	f43f ae97 	beq.w	800824e <_printf_float+0xc2>
 8008520:	9a05      	ldr	r2, [sp, #20]
 8008522:	f10b 0b01 	add.w	fp, fp, #1
 8008526:	e7b9      	b.n	800849c <_printf_float+0x310>
 8008528:	ee18 3a10 	vmov	r3, s16
 800852c:	4652      	mov	r2, sl
 800852e:	4631      	mov	r1, r6
 8008530:	4628      	mov	r0, r5
 8008532:	47b8      	blx	r7
 8008534:	3001      	adds	r0, #1
 8008536:	d1be      	bne.n	80084b6 <_printf_float+0x32a>
 8008538:	e689      	b.n	800824e <_printf_float+0xc2>
 800853a:	9a05      	ldr	r2, [sp, #20]
 800853c:	464b      	mov	r3, r9
 800853e:	4442      	add	r2, r8
 8008540:	4631      	mov	r1, r6
 8008542:	4628      	mov	r0, r5
 8008544:	47b8      	blx	r7
 8008546:	3001      	adds	r0, #1
 8008548:	d1c1      	bne.n	80084ce <_printf_float+0x342>
 800854a:	e680      	b.n	800824e <_printf_float+0xc2>
 800854c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800854e:	2a01      	cmp	r2, #1
 8008550:	dc01      	bgt.n	8008556 <_printf_float+0x3ca>
 8008552:	07db      	lsls	r3, r3, #31
 8008554:	d538      	bpl.n	80085c8 <_printf_float+0x43c>
 8008556:	2301      	movs	r3, #1
 8008558:	4642      	mov	r2, r8
 800855a:	4631      	mov	r1, r6
 800855c:	4628      	mov	r0, r5
 800855e:	47b8      	blx	r7
 8008560:	3001      	adds	r0, #1
 8008562:	f43f ae74 	beq.w	800824e <_printf_float+0xc2>
 8008566:	ee18 3a10 	vmov	r3, s16
 800856a:	4652      	mov	r2, sl
 800856c:	4631      	mov	r1, r6
 800856e:	4628      	mov	r0, r5
 8008570:	47b8      	blx	r7
 8008572:	3001      	adds	r0, #1
 8008574:	f43f ae6b 	beq.w	800824e <_printf_float+0xc2>
 8008578:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800857c:	2200      	movs	r2, #0
 800857e:	2300      	movs	r3, #0
 8008580:	f7f8 faaa 	bl	8000ad8 <__aeabi_dcmpeq>
 8008584:	b9d8      	cbnz	r0, 80085be <_printf_float+0x432>
 8008586:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008588:	f108 0201 	add.w	r2, r8, #1
 800858c:	3b01      	subs	r3, #1
 800858e:	4631      	mov	r1, r6
 8008590:	4628      	mov	r0, r5
 8008592:	47b8      	blx	r7
 8008594:	3001      	adds	r0, #1
 8008596:	d10e      	bne.n	80085b6 <_printf_float+0x42a>
 8008598:	e659      	b.n	800824e <_printf_float+0xc2>
 800859a:	2301      	movs	r3, #1
 800859c:	4652      	mov	r2, sl
 800859e:	4631      	mov	r1, r6
 80085a0:	4628      	mov	r0, r5
 80085a2:	47b8      	blx	r7
 80085a4:	3001      	adds	r0, #1
 80085a6:	f43f ae52 	beq.w	800824e <_printf_float+0xc2>
 80085aa:	f108 0801 	add.w	r8, r8, #1
 80085ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085b0:	3b01      	subs	r3, #1
 80085b2:	4543      	cmp	r3, r8
 80085b4:	dcf1      	bgt.n	800859a <_printf_float+0x40e>
 80085b6:	464b      	mov	r3, r9
 80085b8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80085bc:	e6dc      	b.n	8008378 <_printf_float+0x1ec>
 80085be:	f04f 0800 	mov.w	r8, #0
 80085c2:	f104 0a1a 	add.w	sl, r4, #26
 80085c6:	e7f2      	b.n	80085ae <_printf_float+0x422>
 80085c8:	2301      	movs	r3, #1
 80085ca:	4642      	mov	r2, r8
 80085cc:	e7df      	b.n	800858e <_printf_float+0x402>
 80085ce:	2301      	movs	r3, #1
 80085d0:	464a      	mov	r2, r9
 80085d2:	4631      	mov	r1, r6
 80085d4:	4628      	mov	r0, r5
 80085d6:	47b8      	blx	r7
 80085d8:	3001      	adds	r0, #1
 80085da:	f43f ae38 	beq.w	800824e <_printf_float+0xc2>
 80085de:	f108 0801 	add.w	r8, r8, #1
 80085e2:	68e3      	ldr	r3, [r4, #12]
 80085e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80085e6:	1a5b      	subs	r3, r3, r1
 80085e8:	4543      	cmp	r3, r8
 80085ea:	dcf0      	bgt.n	80085ce <_printf_float+0x442>
 80085ec:	e6fa      	b.n	80083e4 <_printf_float+0x258>
 80085ee:	f04f 0800 	mov.w	r8, #0
 80085f2:	f104 0919 	add.w	r9, r4, #25
 80085f6:	e7f4      	b.n	80085e2 <_printf_float+0x456>

080085f8 <_printf_common>:
 80085f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085fc:	4616      	mov	r6, r2
 80085fe:	4699      	mov	r9, r3
 8008600:	688a      	ldr	r2, [r1, #8]
 8008602:	690b      	ldr	r3, [r1, #16]
 8008604:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008608:	4293      	cmp	r3, r2
 800860a:	bfb8      	it	lt
 800860c:	4613      	movlt	r3, r2
 800860e:	6033      	str	r3, [r6, #0]
 8008610:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008614:	4607      	mov	r7, r0
 8008616:	460c      	mov	r4, r1
 8008618:	b10a      	cbz	r2, 800861e <_printf_common+0x26>
 800861a:	3301      	adds	r3, #1
 800861c:	6033      	str	r3, [r6, #0]
 800861e:	6823      	ldr	r3, [r4, #0]
 8008620:	0699      	lsls	r1, r3, #26
 8008622:	bf42      	ittt	mi
 8008624:	6833      	ldrmi	r3, [r6, #0]
 8008626:	3302      	addmi	r3, #2
 8008628:	6033      	strmi	r3, [r6, #0]
 800862a:	6825      	ldr	r5, [r4, #0]
 800862c:	f015 0506 	ands.w	r5, r5, #6
 8008630:	d106      	bne.n	8008640 <_printf_common+0x48>
 8008632:	f104 0a19 	add.w	sl, r4, #25
 8008636:	68e3      	ldr	r3, [r4, #12]
 8008638:	6832      	ldr	r2, [r6, #0]
 800863a:	1a9b      	subs	r3, r3, r2
 800863c:	42ab      	cmp	r3, r5
 800863e:	dc26      	bgt.n	800868e <_printf_common+0x96>
 8008640:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008644:	1e13      	subs	r3, r2, #0
 8008646:	6822      	ldr	r2, [r4, #0]
 8008648:	bf18      	it	ne
 800864a:	2301      	movne	r3, #1
 800864c:	0692      	lsls	r2, r2, #26
 800864e:	d42b      	bmi.n	80086a8 <_printf_common+0xb0>
 8008650:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008654:	4649      	mov	r1, r9
 8008656:	4638      	mov	r0, r7
 8008658:	47c0      	blx	r8
 800865a:	3001      	adds	r0, #1
 800865c:	d01e      	beq.n	800869c <_printf_common+0xa4>
 800865e:	6823      	ldr	r3, [r4, #0]
 8008660:	68e5      	ldr	r5, [r4, #12]
 8008662:	6832      	ldr	r2, [r6, #0]
 8008664:	f003 0306 	and.w	r3, r3, #6
 8008668:	2b04      	cmp	r3, #4
 800866a:	bf08      	it	eq
 800866c:	1aad      	subeq	r5, r5, r2
 800866e:	68a3      	ldr	r3, [r4, #8]
 8008670:	6922      	ldr	r2, [r4, #16]
 8008672:	bf0c      	ite	eq
 8008674:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008678:	2500      	movne	r5, #0
 800867a:	4293      	cmp	r3, r2
 800867c:	bfc4      	itt	gt
 800867e:	1a9b      	subgt	r3, r3, r2
 8008680:	18ed      	addgt	r5, r5, r3
 8008682:	2600      	movs	r6, #0
 8008684:	341a      	adds	r4, #26
 8008686:	42b5      	cmp	r5, r6
 8008688:	d11a      	bne.n	80086c0 <_printf_common+0xc8>
 800868a:	2000      	movs	r0, #0
 800868c:	e008      	b.n	80086a0 <_printf_common+0xa8>
 800868e:	2301      	movs	r3, #1
 8008690:	4652      	mov	r2, sl
 8008692:	4649      	mov	r1, r9
 8008694:	4638      	mov	r0, r7
 8008696:	47c0      	blx	r8
 8008698:	3001      	adds	r0, #1
 800869a:	d103      	bne.n	80086a4 <_printf_common+0xac>
 800869c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80086a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086a4:	3501      	adds	r5, #1
 80086a6:	e7c6      	b.n	8008636 <_printf_common+0x3e>
 80086a8:	18e1      	adds	r1, r4, r3
 80086aa:	1c5a      	adds	r2, r3, #1
 80086ac:	2030      	movs	r0, #48	; 0x30
 80086ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80086b2:	4422      	add	r2, r4
 80086b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80086b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80086bc:	3302      	adds	r3, #2
 80086be:	e7c7      	b.n	8008650 <_printf_common+0x58>
 80086c0:	2301      	movs	r3, #1
 80086c2:	4622      	mov	r2, r4
 80086c4:	4649      	mov	r1, r9
 80086c6:	4638      	mov	r0, r7
 80086c8:	47c0      	blx	r8
 80086ca:	3001      	adds	r0, #1
 80086cc:	d0e6      	beq.n	800869c <_printf_common+0xa4>
 80086ce:	3601      	adds	r6, #1
 80086d0:	e7d9      	b.n	8008686 <_printf_common+0x8e>
	...

080086d4 <_printf_i>:
 80086d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80086d8:	7e0f      	ldrb	r7, [r1, #24]
 80086da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80086dc:	2f78      	cmp	r7, #120	; 0x78
 80086de:	4691      	mov	r9, r2
 80086e0:	4680      	mov	r8, r0
 80086e2:	460c      	mov	r4, r1
 80086e4:	469a      	mov	sl, r3
 80086e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80086ea:	d807      	bhi.n	80086fc <_printf_i+0x28>
 80086ec:	2f62      	cmp	r7, #98	; 0x62
 80086ee:	d80a      	bhi.n	8008706 <_printf_i+0x32>
 80086f0:	2f00      	cmp	r7, #0
 80086f2:	f000 80d8 	beq.w	80088a6 <_printf_i+0x1d2>
 80086f6:	2f58      	cmp	r7, #88	; 0x58
 80086f8:	f000 80a3 	beq.w	8008842 <_printf_i+0x16e>
 80086fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008700:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008704:	e03a      	b.n	800877c <_printf_i+0xa8>
 8008706:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800870a:	2b15      	cmp	r3, #21
 800870c:	d8f6      	bhi.n	80086fc <_printf_i+0x28>
 800870e:	a101      	add	r1, pc, #4	; (adr r1, 8008714 <_printf_i+0x40>)
 8008710:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008714:	0800876d 	.word	0x0800876d
 8008718:	08008781 	.word	0x08008781
 800871c:	080086fd 	.word	0x080086fd
 8008720:	080086fd 	.word	0x080086fd
 8008724:	080086fd 	.word	0x080086fd
 8008728:	080086fd 	.word	0x080086fd
 800872c:	08008781 	.word	0x08008781
 8008730:	080086fd 	.word	0x080086fd
 8008734:	080086fd 	.word	0x080086fd
 8008738:	080086fd 	.word	0x080086fd
 800873c:	080086fd 	.word	0x080086fd
 8008740:	0800888d 	.word	0x0800888d
 8008744:	080087b1 	.word	0x080087b1
 8008748:	0800886f 	.word	0x0800886f
 800874c:	080086fd 	.word	0x080086fd
 8008750:	080086fd 	.word	0x080086fd
 8008754:	080088af 	.word	0x080088af
 8008758:	080086fd 	.word	0x080086fd
 800875c:	080087b1 	.word	0x080087b1
 8008760:	080086fd 	.word	0x080086fd
 8008764:	080086fd 	.word	0x080086fd
 8008768:	08008877 	.word	0x08008877
 800876c:	682b      	ldr	r3, [r5, #0]
 800876e:	1d1a      	adds	r2, r3, #4
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	602a      	str	r2, [r5, #0]
 8008774:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008778:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800877c:	2301      	movs	r3, #1
 800877e:	e0a3      	b.n	80088c8 <_printf_i+0x1f4>
 8008780:	6820      	ldr	r0, [r4, #0]
 8008782:	6829      	ldr	r1, [r5, #0]
 8008784:	0606      	lsls	r6, r0, #24
 8008786:	f101 0304 	add.w	r3, r1, #4
 800878a:	d50a      	bpl.n	80087a2 <_printf_i+0xce>
 800878c:	680e      	ldr	r6, [r1, #0]
 800878e:	602b      	str	r3, [r5, #0]
 8008790:	2e00      	cmp	r6, #0
 8008792:	da03      	bge.n	800879c <_printf_i+0xc8>
 8008794:	232d      	movs	r3, #45	; 0x2d
 8008796:	4276      	negs	r6, r6
 8008798:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800879c:	485e      	ldr	r0, [pc, #376]	; (8008918 <_printf_i+0x244>)
 800879e:	230a      	movs	r3, #10
 80087a0:	e019      	b.n	80087d6 <_printf_i+0x102>
 80087a2:	680e      	ldr	r6, [r1, #0]
 80087a4:	602b      	str	r3, [r5, #0]
 80087a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80087aa:	bf18      	it	ne
 80087ac:	b236      	sxthne	r6, r6
 80087ae:	e7ef      	b.n	8008790 <_printf_i+0xbc>
 80087b0:	682b      	ldr	r3, [r5, #0]
 80087b2:	6820      	ldr	r0, [r4, #0]
 80087b4:	1d19      	adds	r1, r3, #4
 80087b6:	6029      	str	r1, [r5, #0]
 80087b8:	0601      	lsls	r1, r0, #24
 80087ba:	d501      	bpl.n	80087c0 <_printf_i+0xec>
 80087bc:	681e      	ldr	r6, [r3, #0]
 80087be:	e002      	b.n	80087c6 <_printf_i+0xf2>
 80087c0:	0646      	lsls	r6, r0, #25
 80087c2:	d5fb      	bpl.n	80087bc <_printf_i+0xe8>
 80087c4:	881e      	ldrh	r6, [r3, #0]
 80087c6:	4854      	ldr	r0, [pc, #336]	; (8008918 <_printf_i+0x244>)
 80087c8:	2f6f      	cmp	r7, #111	; 0x6f
 80087ca:	bf0c      	ite	eq
 80087cc:	2308      	moveq	r3, #8
 80087ce:	230a      	movne	r3, #10
 80087d0:	2100      	movs	r1, #0
 80087d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80087d6:	6865      	ldr	r5, [r4, #4]
 80087d8:	60a5      	str	r5, [r4, #8]
 80087da:	2d00      	cmp	r5, #0
 80087dc:	bfa2      	ittt	ge
 80087de:	6821      	ldrge	r1, [r4, #0]
 80087e0:	f021 0104 	bicge.w	r1, r1, #4
 80087e4:	6021      	strge	r1, [r4, #0]
 80087e6:	b90e      	cbnz	r6, 80087ec <_printf_i+0x118>
 80087e8:	2d00      	cmp	r5, #0
 80087ea:	d04d      	beq.n	8008888 <_printf_i+0x1b4>
 80087ec:	4615      	mov	r5, r2
 80087ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80087f2:	fb03 6711 	mls	r7, r3, r1, r6
 80087f6:	5dc7      	ldrb	r7, [r0, r7]
 80087f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80087fc:	4637      	mov	r7, r6
 80087fe:	42bb      	cmp	r3, r7
 8008800:	460e      	mov	r6, r1
 8008802:	d9f4      	bls.n	80087ee <_printf_i+0x11a>
 8008804:	2b08      	cmp	r3, #8
 8008806:	d10b      	bne.n	8008820 <_printf_i+0x14c>
 8008808:	6823      	ldr	r3, [r4, #0]
 800880a:	07de      	lsls	r6, r3, #31
 800880c:	d508      	bpl.n	8008820 <_printf_i+0x14c>
 800880e:	6923      	ldr	r3, [r4, #16]
 8008810:	6861      	ldr	r1, [r4, #4]
 8008812:	4299      	cmp	r1, r3
 8008814:	bfde      	ittt	le
 8008816:	2330      	movle	r3, #48	; 0x30
 8008818:	f805 3c01 	strble.w	r3, [r5, #-1]
 800881c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008820:	1b52      	subs	r2, r2, r5
 8008822:	6122      	str	r2, [r4, #16]
 8008824:	f8cd a000 	str.w	sl, [sp]
 8008828:	464b      	mov	r3, r9
 800882a:	aa03      	add	r2, sp, #12
 800882c:	4621      	mov	r1, r4
 800882e:	4640      	mov	r0, r8
 8008830:	f7ff fee2 	bl	80085f8 <_printf_common>
 8008834:	3001      	adds	r0, #1
 8008836:	d14c      	bne.n	80088d2 <_printf_i+0x1fe>
 8008838:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800883c:	b004      	add	sp, #16
 800883e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008842:	4835      	ldr	r0, [pc, #212]	; (8008918 <_printf_i+0x244>)
 8008844:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008848:	6829      	ldr	r1, [r5, #0]
 800884a:	6823      	ldr	r3, [r4, #0]
 800884c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008850:	6029      	str	r1, [r5, #0]
 8008852:	061d      	lsls	r5, r3, #24
 8008854:	d514      	bpl.n	8008880 <_printf_i+0x1ac>
 8008856:	07df      	lsls	r7, r3, #31
 8008858:	bf44      	itt	mi
 800885a:	f043 0320 	orrmi.w	r3, r3, #32
 800885e:	6023      	strmi	r3, [r4, #0]
 8008860:	b91e      	cbnz	r6, 800886a <_printf_i+0x196>
 8008862:	6823      	ldr	r3, [r4, #0]
 8008864:	f023 0320 	bic.w	r3, r3, #32
 8008868:	6023      	str	r3, [r4, #0]
 800886a:	2310      	movs	r3, #16
 800886c:	e7b0      	b.n	80087d0 <_printf_i+0xfc>
 800886e:	6823      	ldr	r3, [r4, #0]
 8008870:	f043 0320 	orr.w	r3, r3, #32
 8008874:	6023      	str	r3, [r4, #0]
 8008876:	2378      	movs	r3, #120	; 0x78
 8008878:	4828      	ldr	r0, [pc, #160]	; (800891c <_printf_i+0x248>)
 800887a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800887e:	e7e3      	b.n	8008848 <_printf_i+0x174>
 8008880:	0659      	lsls	r1, r3, #25
 8008882:	bf48      	it	mi
 8008884:	b2b6      	uxthmi	r6, r6
 8008886:	e7e6      	b.n	8008856 <_printf_i+0x182>
 8008888:	4615      	mov	r5, r2
 800888a:	e7bb      	b.n	8008804 <_printf_i+0x130>
 800888c:	682b      	ldr	r3, [r5, #0]
 800888e:	6826      	ldr	r6, [r4, #0]
 8008890:	6961      	ldr	r1, [r4, #20]
 8008892:	1d18      	adds	r0, r3, #4
 8008894:	6028      	str	r0, [r5, #0]
 8008896:	0635      	lsls	r5, r6, #24
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	d501      	bpl.n	80088a0 <_printf_i+0x1cc>
 800889c:	6019      	str	r1, [r3, #0]
 800889e:	e002      	b.n	80088a6 <_printf_i+0x1d2>
 80088a0:	0670      	lsls	r0, r6, #25
 80088a2:	d5fb      	bpl.n	800889c <_printf_i+0x1c8>
 80088a4:	8019      	strh	r1, [r3, #0]
 80088a6:	2300      	movs	r3, #0
 80088a8:	6123      	str	r3, [r4, #16]
 80088aa:	4615      	mov	r5, r2
 80088ac:	e7ba      	b.n	8008824 <_printf_i+0x150>
 80088ae:	682b      	ldr	r3, [r5, #0]
 80088b0:	1d1a      	adds	r2, r3, #4
 80088b2:	602a      	str	r2, [r5, #0]
 80088b4:	681d      	ldr	r5, [r3, #0]
 80088b6:	6862      	ldr	r2, [r4, #4]
 80088b8:	2100      	movs	r1, #0
 80088ba:	4628      	mov	r0, r5
 80088bc:	f7f7 fc98 	bl	80001f0 <memchr>
 80088c0:	b108      	cbz	r0, 80088c6 <_printf_i+0x1f2>
 80088c2:	1b40      	subs	r0, r0, r5
 80088c4:	6060      	str	r0, [r4, #4]
 80088c6:	6863      	ldr	r3, [r4, #4]
 80088c8:	6123      	str	r3, [r4, #16]
 80088ca:	2300      	movs	r3, #0
 80088cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088d0:	e7a8      	b.n	8008824 <_printf_i+0x150>
 80088d2:	6923      	ldr	r3, [r4, #16]
 80088d4:	462a      	mov	r2, r5
 80088d6:	4649      	mov	r1, r9
 80088d8:	4640      	mov	r0, r8
 80088da:	47d0      	blx	sl
 80088dc:	3001      	adds	r0, #1
 80088de:	d0ab      	beq.n	8008838 <_printf_i+0x164>
 80088e0:	6823      	ldr	r3, [r4, #0]
 80088e2:	079b      	lsls	r3, r3, #30
 80088e4:	d413      	bmi.n	800890e <_printf_i+0x23a>
 80088e6:	68e0      	ldr	r0, [r4, #12]
 80088e8:	9b03      	ldr	r3, [sp, #12]
 80088ea:	4298      	cmp	r0, r3
 80088ec:	bfb8      	it	lt
 80088ee:	4618      	movlt	r0, r3
 80088f0:	e7a4      	b.n	800883c <_printf_i+0x168>
 80088f2:	2301      	movs	r3, #1
 80088f4:	4632      	mov	r2, r6
 80088f6:	4649      	mov	r1, r9
 80088f8:	4640      	mov	r0, r8
 80088fa:	47d0      	blx	sl
 80088fc:	3001      	adds	r0, #1
 80088fe:	d09b      	beq.n	8008838 <_printf_i+0x164>
 8008900:	3501      	adds	r5, #1
 8008902:	68e3      	ldr	r3, [r4, #12]
 8008904:	9903      	ldr	r1, [sp, #12]
 8008906:	1a5b      	subs	r3, r3, r1
 8008908:	42ab      	cmp	r3, r5
 800890a:	dcf2      	bgt.n	80088f2 <_printf_i+0x21e>
 800890c:	e7eb      	b.n	80088e6 <_printf_i+0x212>
 800890e:	2500      	movs	r5, #0
 8008910:	f104 0619 	add.w	r6, r4, #25
 8008914:	e7f5      	b.n	8008902 <_printf_i+0x22e>
 8008916:	bf00      	nop
 8008918:	0800b74a 	.word	0x0800b74a
 800891c:	0800b75b 	.word	0x0800b75b

08008920 <iprintf>:
 8008920:	b40f      	push	{r0, r1, r2, r3}
 8008922:	4b0a      	ldr	r3, [pc, #40]	; (800894c <iprintf+0x2c>)
 8008924:	b513      	push	{r0, r1, r4, lr}
 8008926:	681c      	ldr	r4, [r3, #0]
 8008928:	b124      	cbz	r4, 8008934 <iprintf+0x14>
 800892a:	69a3      	ldr	r3, [r4, #24]
 800892c:	b913      	cbnz	r3, 8008934 <iprintf+0x14>
 800892e:	4620      	mov	r0, r4
 8008930:	f001 f8da 	bl	8009ae8 <__sinit>
 8008934:	ab05      	add	r3, sp, #20
 8008936:	9a04      	ldr	r2, [sp, #16]
 8008938:	68a1      	ldr	r1, [r4, #8]
 800893a:	9301      	str	r3, [sp, #4]
 800893c:	4620      	mov	r0, r4
 800893e:	f001 fe89 	bl	800a654 <_vfiprintf_r>
 8008942:	b002      	add	sp, #8
 8008944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008948:	b004      	add	sp, #16
 800894a:	4770      	bx	lr
 800894c:	20000020 	.word	0x20000020

08008950 <_puts_r>:
 8008950:	b570      	push	{r4, r5, r6, lr}
 8008952:	460e      	mov	r6, r1
 8008954:	4605      	mov	r5, r0
 8008956:	b118      	cbz	r0, 8008960 <_puts_r+0x10>
 8008958:	6983      	ldr	r3, [r0, #24]
 800895a:	b90b      	cbnz	r3, 8008960 <_puts_r+0x10>
 800895c:	f001 f8c4 	bl	8009ae8 <__sinit>
 8008960:	69ab      	ldr	r3, [r5, #24]
 8008962:	68ac      	ldr	r4, [r5, #8]
 8008964:	b913      	cbnz	r3, 800896c <_puts_r+0x1c>
 8008966:	4628      	mov	r0, r5
 8008968:	f001 f8be 	bl	8009ae8 <__sinit>
 800896c:	4b2c      	ldr	r3, [pc, #176]	; (8008a20 <_puts_r+0xd0>)
 800896e:	429c      	cmp	r4, r3
 8008970:	d120      	bne.n	80089b4 <_puts_r+0x64>
 8008972:	686c      	ldr	r4, [r5, #4]
 8008974:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008976:	07db      	lsls	r3, r3, #31
 8008978:	d405      	bmi.n	8008986 <_puts_r+0x36>
 800897a:	89a3      	ldrh	r3, [r4, #12]
 800897c:	0598      	lsls	r0, r3, #22
 800897e:	d402      	bmi.n	8008986 <_puts_r+0x36>
 8008980:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008982:	f001 f954 	bl	8009c2e <__retarget_lock_acquire_recursive>
 8008986:	89a3      	ldrh	r3, [r4, #12]
 8008988:	0719      	lsls	r1, r3, #28
 800898a:	d51d      	bpl.n	80089c8 <_puts_r+0x78>
 800898c:	6923      	ldr	r3, [r4, #16]
 800898e:	b1db      	cbz	r3, 80089c8 <_puts_r+0x78>
 8008990:	3e01      	subs	r6, #1
 8008992:	68a3      	ldr	r3, [r4, #8]
 8008994:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008998:	3b01      	subs	r3, #1
 800899a:	60a3      	str	r3, [r4, #8]
 800899c:	bb39      	cbnz	r1, 80089ee <_puts_r+0x9e>
 800899e:	2b00      	cmp	r3, #0
 80089a0:	da38      	bge.n	8008a14 <_puts_r+0xc4>
 80089a2:	4622      	mov	r2, r4
 80089a4:	210a      	movs	r1, #10
 80089a6:	4628      	mov	r0, r5
 80089a8:	f000 f848 	bl	8008a3c <__swbuf_r>
 80089ac:	3001      	adds	r0, #1
 80089ae:	d011      	beq.n	80089d4 <_puts_r+0x84>
 80089b0:	250a      	movs	r5, #10
 80089b2:	e011      	b.n	80089d8 <_puts_r+0x88>
 80089b4:	4b1b      	ldr	r3, [pc, #108]	; (8008a24 <_puts_r+0xd4>)
 80089b6:	429c      	cmp	r4, r3
 80089b8:	d101      	bne.n	80089be <_puts_r+0x6e>
 80089ba:	68ac      	ldr	r4, [r5, #8]
 80089bc:	e7da      	b.n	8008974 <_puts_r+0x24>
 80089be:	4b1a      	ldr	r3, [pc, #104]	; (8008a28 <_puts_r+0xd8>)
 80089c0:	429c      	cmp	r4, r3
 80089c2:	bf08      	it	eq
 80089c4:	68ec      	ldreq	r4, [r5, #12]
 80089c6:	e7d5      	b.n	8008974 <_puts_r+0x24>
 80089c8:	4621      	mov	r1, r4
 80089ca:	4628      	mov	r0, r5
 80089cc:	f000 f888 	bl	8008ae0 <__swsetup_r>
 80089d0:	2800      	cmp	r0, #0
 80089d2:	d0dd      	beq.n	8008990 <_puts_r+0x40>
 80089d4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80089d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089da:	07da      	lsls	r2, r3, #31
 80089dc:	d405      	bmi.n	80089ea <_puts_r+0x9a>
 80089de:	89a3      	ldrh	r3, [r4, #12]
 80089e0:	059b      	lsls	r3, r3, #22
 80089e2:	d402      	bmi.n	80089ea <_puts_r+0x9a>
 80089e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089e6:	f001 f923 	bl	8009c30 <__retarget_lock_release_recursive>
 80089ea:	4628      	mov	r0, r5
 80089ec:	bd70      	pop	{r4, r5, r6, pc}
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	da04      	bge.n	80089fc <_puts_r+0xac>
 80089f2:	69a2      	ldr	r2, [r4, #24]
 80089f4:	429a      	cmp	r2, r3
 80089f6:	dc06      	bgt.n	8008a06 <_puts_r+0xb6>
 80089f8:	290a      	cmp	r1, #10
 80089fa:	d004      	beq.n	8008a06 <_puts_r+0xb6>
 80089fc:	6823      	ldr	r3, [r4, #0]
 80089fe:	1c5a      	adds	r2, r3, #1
 8008a00:	6022      	str	r2, [r4, #0]
 8008a02:	7019      	strb	r1, [r3, #0]
 8008a04:	e7c5      	b.n	8008992 <_puts_r+0x42>
 8008a06:	4622      	mov	r2, r4
 8008a08:	4628      	mov	r0, r5
 8008a0a:	f000 f817 	bl	8008a3c <__swbuf_r>
 8008a0e:	3001      	adds	r0, #1
 8008a10:	d1bf      	bne.n	8008992 <_puts_r+0x42>
 8008a12:	e7df      	b.n	80089d4 <_puts_r+0x84>
 8008a14:	6823      	ldr	r3, [r4, #0]
 8008a16:	250a      	movs	r5, #10
 8008a18:	1c5a      	adds	r2, r3, #1
 8008a1a:	6022      	str	r2, [r4, #0]
 8008a1c:	701d      	strb	r5, [r3, #0]
 8008a1e:	e7db      	b.n	80089d8 <_puts_r+0x88>
 8008a20:	0800b81c 	.word	0x0800b81c
 8008a24:	0800b83c 	.word	0x0800b83c
 8008a28:	0800b7fc 	.word	0x0800b7fc

08008a2c <puts>:
 8008a2c:	4b02      	ldr	r3, [pc, #8]	; (8008a38 <puts+0xc>)
 8008a2e:	4601      	mov	r1, r0
 8008a30:	6818      	ldr	r0, [r3, #0]
 8008a32:	f7ff bf8d 	b.w	8008950 <_puts_r>
 8008a36:	bf00      	nop
 8008a38:	20000020 	.word	0x20000020

08008a3c <__swbuf_r>:
 8008a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a3e:	460e      	mov	r6, r1
 8008a40:	4614      	mov	r4, r2
 8008a42:	4605      	mov	r5, r0
 8008a44:	b118      	cbz	r0, 8008a4e <__swbuf_r+0x12>
 8008a46:	6983      	ldr	r3, [r0, #24]
 8008a48:	b90b      	cbnz	r3, 8008a4e <__swbuf_r+0x12>
 8008a4a:	f001 f84d 	bl	8009ae8 <__sinit>
 8008a4e:	4b21      	ldr	r3, [pc, #132]	; (8008ad4 <__swbuf_r+0x98>)
 8008a50:	429c      	cmp	r4, r3
 8008a52:	d12b      	bne.n	8008aac <__swbuf_r+0x70>
 8008a54:	686c      	ldr	r4, [r5, #4]
 8008a56:	69a3      	ldr	r3, [r4, #24]
 8008a58:	60a3      	str	r3, [r4, #8]
 8008a5a:	89a3      	ldrh	r3, [r4, #12]
 8008a5c:	071a      	lsls	r2, r3, #28
 8008a5e:	d52f      	bpl.n	8008ac0 <__swbuf_r+0x84>
 8008a60:	6923      	ldr	r3, [r4, #16]
 8008a62:	b36b      	cbz	r3, 8008ac0 <__swbuf_r+0x84>
 8008a64:	6923      	ldr	r3, [r4, #16]
 8008a66:	6820      	ldr	r0, [r4, #0]
 8008a68:	1ac0      	subs	r0, r0, r3
 8008a6a:	6963      	ldr	r3, [r4, #20]
 8008a6c:	b2f6      	uxtb	r6, r6
 8008a6e:	4283      	cmp	r3, r0
 8008a70:	4637      	mov	r7, r6
 8008a72:	dc04      	bgt.n	8008a7e <__swbuf_r+0x42>
 8008a74:	4621      	mov	r1, r4
 8008a76:	4628      	mov	r0, r5
 8008a78:	f000 ffa2 	bl	80099c0 <_fflush_r>
 8008a7c:	bb30      	cbnz	r0, 8008acc <__swbuf_r+0x90>
 8008a7e:	68a3      	ldr	r3, [r4, #8]
 8008a80:	3b01      	subs	r3, #1
 8008a82:	60a3      	str	r3, [r4, #8]
 8008a84:	6823      	ldr	r3, [r4, #0]
 8008a86:	1c5a      	adds	r2, r3, #1
 8008a88:	6022      	str	r2, [r4, #0]
 8008a8a:	701e      	strb	r6, [r3, #0]
 8008a8c:	6963      	ldr	r3, [r4, #20]
 8008a8e:	3001      	adds	r0, #1
 8008a90:	4283      	cmp	r3, r0
 8008a92:	d004      	beq.n	8008a9e <__swbuf_r+0x62>
 8008a94:	89a3      	ldrh	r3, [r4, #12]
 8008a96:	07db      	lsls	r3, r3, #31
 8008a98:	d506      	bpl.n	8008aa8 <__swbuf_r+0x6c>
 8008a9a:	2e0a      	cmp	r6, #10
 8008a9c:	d104      	bne.n	8008aa8 <__swbuf_r+0x6c>
 8008a9e:	4621      	mov	r1, r4
 8008aa0:	4628      	mov	r0, r5
 8008aa2:	f000 ff8d 	bl	80099c0 <_fflush_r>
 8008aa6:	b988      	cbnz	r0, 8008acc <__swbuf_r+0x90>
 8008aa8:	4638      	mov	r0, r7
 8008aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008aac:	4b0a      	ldr	r3, [pc, #40]	; (8008ad8 <__swbuf_r+0x9c>)
 8008aae:	429c      	cmp	r4, r3
 8008ab0:	d101      	bne.n	8008ab6 <__swbuf_r+0x7a>
 8008ab2:	68ac      	ldr	r4, [r5, #8]
 8008ab4:	e7cf      	b.n	8008a56 <__swbuf_r+0x1a>
 8008ab6:	4b09      	ldr	r3, [pc, #36]	; (8008adc <__swbuf_r+0xa0>)
 8008ab8:	429c      	cmp	r4, r3
 8008aba:	bf08      	it	eq
 8008abc:	68ec      	ldreq	r4, [r5, #12]
 8008abe:	e7ca      	b.n	8008a56 <__swbuf_r+0x1a>
 8008ac0:	4621      	mov	r1, r4
 8008ac2:	4628      	mov	r0, r5
 8008ac4:	f000 f80c 	bl	8008ae0 <__swsetup_r>
 8008ac8:	2800      	cmp	r0, #0
 8008aca:	d0cb      	beq.n	8008a64 <__swbuf_r+0x28>
 8008acc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008ad0:	e7ea      	b.n	8008aa8 <__swbuf_r+0x6c>
 8008ad2:	bf00      	nop
 8008ad4:	0800b81c 	.word	0x0800b81c
 8008ad8:	0800b83c 	.word	0x0800b83c
 8008adc:	0800b7fc 	.word	0x0800b7fc

08008ae0 <__swsetup_r>:
 8008ae0:	4b32      	ldr	r3, [pc, #200]	; (8008bac <__swsetup_r+0xcc>)
 8008ae2:	b570      	push	{r4, r5, r6, lr}
 8008ae4:	681d      	ldr	r5, [r3, #0]
 8008ae6:	4606      	mov	r6, r0
 8008ae8:	460c      	mov	r4, r1
 8008aea:	b125      	cbz	r5, 8008af6 <__swsetup_r+0x16>
 8008aec:	69ab      	ldr	r3, [r5, #24]
 8008aee:	b913      	cbnz	r3, 8008af6 <__swsetup_r+0x16>
 8008af0:	4628      	mov	r0, r5
 8008af2:	f000 fff9 	bl	8009ae8 <__sinit>
 8008af6:	4b2e      	ldr	r3, [pc, #184]	; (8008bb0 <__swsetup_r+0xd0>)
 8008af8:	429c      	cmp	r4, r3
 8008afa:	d10f      	bne.n	8008b1c <__swsetup_r+0x3c>
 8008afc:	686c      	ldr	r4, [r5, #4]
 8008afe:	89a3      	ldrh	r3, [r4, #12]
 8008b00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b04:	0719      	lsls	r1, r3, #28
 8008b06:	d42c      	bmi.n	8008b62 <__swsetup_r+0x82>
 8008b08:	06dd      	lsls	r5, r3, #27
 8008b0a:	d411      	bmi.n	8008b30 <__swsetup_r+0x50>
 8008b0c:	2309      	movs	r3, #9
 8008b0e:	6033      	str	r3, [r6, #0]
 8008b10:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008b14:	81a3      	strh	r3, [r4, #12]
 8008b16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b1a:	e03e      	b.n	8008b9a <__swsetup_r+0xba>
 8008b1c:	4b25      	ldr	r3, [pc, #148]	; (8008bb4 <__swsetup_r+0xd4>)
 8008b1e:	429c      	cmp	r4, r3
 8008b20:	d101      	bne.n	8008b26 <__swsetup_r+0x46>
 8008b22:	68ac      	ldr	r4, [r5, #8]
 8008b24:	e7eb      	b.n	8008afe <__swsetup_r+0x1e>
 8008b26:	4b24      	ldr	r3, [pc, #144]	; (8008bb8 <__swsetup_r+0xd8>)
 8008b28:	429c      	cmp	r4, r3
 8008b2a:	bf08      	it	eq
 8008b2c:	68ec      	ldreq	r4, [r5, #12]
 8008b2e:	e7e6      	b.n	8008afe <__swsetup_r+0x1e>
 8008b30:	0758      	lsls	r0, r3, #29
 8008b32:	d512      	bpl.n	8008b5a <__swsetup_r+0x7a>
 8008b34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b36:	b141      	cbz	r1, 8008b4a <__swsetup_r+0x6a>
 8008b38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b3c:	4299      	cmp	r1, r3
 8008b3e:	d002      	beq.n	8008b46 <__swsetup_r+0x66>
 8008b40:	4630      	mov	r0, r6
 8008b42:	f001 fc7d 	bl	800a440 <_free_r>
 8008b46:	2300      	movs	r3, #0
 8008b48:	6363      	str	r3, [r4, #52]	; 0x34
 8008b4a:	89a3      	ldrh	r3, [r4, #12]
 8008b4c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008b50:	81a3      	strh	r3, [r4, #12]
 8008b52:	2300      	movs	r3, #0
 8008b54:	6063      	str	r3, [r4, #4]
 8008b56:	6923      	ldr	r3, [r4, #16]
 8008b58:	6023      	str	r3, [r4, #0]
 8008b5a:	89a3      	ldrh	r3, [r4, #12]
 8008b5c:	f043 0308 	orr.w	r3, r3, #8
 8008b60:	81a3      	strh	r3, [r4, #12]
 8008b62:	6923      	ldr	r3, [r4, #16]
 8008b64:	b94b      	cbnz	r3, 8008b7a <__swsetup_r+0x9a>
 8008b66:	89a3      	ldrh	r3, [r4, #12]
 8008b68:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008b6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b70:	d003      	beq.n	8008b7a <__swsetup_r+0x9a>
 8008b72:	4621      	mov	r1, r4
 8008b74:	4630      	mov	r0, r6
 8008b76:	f001 f881 	bl	8009c7c <__smakebuf_r>
 8008b7a:	89a0      	ldrh	r0, [r4, #12]
 8008b7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b80:	f010 0301 	ands.w	r3, r0, #1
 8008b84:	d00a      	beq.n	8008b9c <__swsetup_r+0xbc>
 8008b86:	2300      	movs	r3, #0
 8008b88:	60a3      	str	r3, [r4, #8]
 8008b8a:	6963      	ldr	r3, [r4, #20]
 8008b8c:	425b      	negs	r3, r3
 8008b8e:	61a3      	str	r3, [r4, #24]
 8008b90:	6923      	ldr	r3, [r4, #16]
 8008b92:	b943      	cbnz	r3, 8008ba6 <__swsetup_r+0xc6>
 8008b94:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008b98:	d1ba      	bne.n	8008b10 <__swsetup_r+0x30>
 8008b9a:	bd70      	pop	{r4, r5, r6, pc}
 8008b9c:	0781      	lsls	r1, r0, #30
 8008b9e:	bf58      	it	pl
 8008ba0:	6963      	ldrpl	r3, [r4, #20]
 8008ba2:	60a3      	str	r3, [r4, #8]
 8008ba4:	e7f4      	b.n	8008b90 <__swsetup_r+0xb0>
 8008ba6:	2000      	movs	r0, #0
 8008ba8:	e7f7      	b.n	8008b9a <__swsetup_r+0xba>
 8008baa:	bf00      	nop
 8008bac:	20000020 	.word	0x20000020
 8008bb0:	0800b81c 	.word	0x0800b81c
 8008bb4:	0800b83c 	.word	0x0800b83c
 8008bb8:	0800b7fc 	.word	0x0800b7fc

08008bbc <quorem>:
 8008bbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bc0:	6903      	ldr	r3, [r0, #16]
 8008bc2:	690c      	ldr	r4, [r1, #16]
 8008bc4:	42a3      	cmp	r3, r4
 8008bc6:	4607      	mov	r7, r0
 8008bc8:	f2c0 8081 	blt.w	8008cce <quorem+0x112>
 8008bcc:	3c01      	subs	r4, #1
 8008bce:	f101 0814 	add.w	r8, r1, #20
 8008bd2:	f100 0514 	add.w	r5, r0, #20
 8008bd6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008bda:	9301      	str	r3, [sp, #4]
 8008bdc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008be0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008be4:	3301      	adds	r3, #1
 8008be6:	429a      	cmp	r2, r3
 8008be8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008bec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008bf0:	fbb2 f6f3 	udiv	r6, r2, r3
 8008bf4:	d331      	bcc.n	8008c5a <quorem+0x9e>
 8008bf6:	f04f 0e00 	mov.w	lr, #0
 8008bfa:	4640      	mov	r0, r8
 8008bfc:	46ac      	mov	ip, r5
 8008bfe:	46f2      	mov	sl, lr
 8008c00:	f850 2b04 	ldr.w	r2, [r0], #4
 8008c04:	b293      	uxth	r3, r2
 8008c06:	fb06 e303 	mla	r3, r6, r3, lr
 8008c0a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008c0e:	b29b      	uxth	r3, r3
 8008c10:	ebaa 0303 	sub.w	r3, sl, r3
 8008c14:	f8dc a000 	ldr.w	sl, [ip]
 8008c18:	0c12      	lsrs	r2, r2, #16
 8008c1a:	fa13 f38a 	uxtah	r3, r3, sl
 8008c1e:	fb06 e202 	mla	r2, r6, r2, lr
 8008c22:	9300      	str	r3, [sp, #0]
 8008c24:	9b00      	ldr	r3, [sp, #0]
 8008c26:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008c2a:	b292      	uxth	r2, r2
 8008c2c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008c30:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008c34:	f8bd 3000 	ldrh.w	r3, [sp]
 8008c38:	4581      	cmp	r9, r0
 8008c3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c3e:	f84c 3b04 	str.w	r3, [ip], #4
 8008c42:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008c46:	d2db      	bcs.n	8008c00 <quorem+0x44>
 8008c48:	f855 300b 	ldr.w	r3, [r5, fp]
 8008c4c:	b92b      	cbnz	r3, 8008c5a <quorem+0x9e>
 8008c4e:	9b01      	ldr	r3, [sp, #4]
 8008c50:	3b04      	subs	r3, #4
 8008c52:	429d      	cmp	r5, r3
 8008c54:	461a      	mov	r2, r3
 8008c56:	d32e      	bcc.n	8008cb6 <quorem+0xfa>
 8008c58:	613c      	str	r4, [r7, #16]
 8008c5a:	4638      	mov	r0, r7
 8008c5c:	f001 fad8 	bl	800a210 <__mcmp>
 8008c60:	2800      	cmp	r0, #0
 8008c62:	db24      	blt.n	8008cae <quorem+0xf2>
 8008c64:	3601      	adds	r6, #1
 8008c66:	4628      	mov	r0, r5
 8008c68:	f04f 0c00 	mov.w	ip, #0
 8008c6c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008c70:	f8d0 e000 	ldr.w	lr, [r0]
 8008c74:	b293      	uxth	r3, r2
 8008c76:	ebac 0303 	sub.w	r3, ip, r3
 8008c7a:	0c12      	lsrs	r2, r2, #16
 8008c7c:	fa13 f38e 	uxtah	r3, r3, lr
 8008c80:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008c84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008c88:	b29b      	uxth	r3, r3
 8008c8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c8e:	45c1      	cmp	r9, r8
 8008c90:	f840 3b04 	str.w	r3, [r0], #4
 8008c94:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008c98:	d2e8      	bcs.n	8008c6c <quorem+0xb0>
 8008c9a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008c9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008ca2:	b922      	cbnz	r2, 8008cae <quorem+0xf2>
 8008ca4:	3b04      	subs	r3, #4
 8008ca6:	429d      	cmp	r5, r3
 8008ca8:	461a      	mov	r2, r3
 8008caa:	d30a      	bcc.n	8008cc2 <quorem+0x106>
 8008cac:	613c      	str	r4, [r7, #16]
 8008cae:	4630      	mov	r0, r6
 8008cb0:	b003      	add	sp, #12
 8008cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cb6:	6812      	ldr	r2, [r2, #0]
 8008cb8:	3b04      	subs	r3, #4
 8008cba:	2a00      	cmp	r2, #0
 8008cbc:	d1cc      	bne.n	8008c58 <quorem+0x9c>
 8008cbe:	3c01      	subs	r4, #1
 8008cc0:	e7c7      	b.n	8008c52 <quorem+0x96>
 8008cc2:	6812      	ldr	r2, [r2, #0]
 8008cc4:	3b04      	subs	r3, #4
 8008cc6:	2a00      	cmp	r2, #0
 8008cc8:	d1f0      	bne.n	8008cac <quorem+0xf0>
 8008cca:	3c01      	subs	r4, #1
 8008ccc:	e7eb      	b.n	8008ca6 <quorem+0xea>
 8008cce:	2000      	movs	r0, #0
 8008cd0:	e7ee      	b.n	8008cb0 <quorem+0xf4>
 8008cd2:	0000      	movs	r0, r0
 8008cd4:	0000      	movs	r0, r0
	...

08008cd8 <_dtoa_r>:
 8008cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cdc:	ed2d 8b04 	vpush	{d8-d9}
 8008ce0:	ec57 6b10 	vmov	r6, r7, d0
 8008ce4:	b093      	sub	sp, #76	; 0x4c
 8008ce6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008ce8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008cec:	9106      	str	r1, [sp, #24]
 8008cee:	ee10 aa10 	vmov	sl, s0
 8008cf2:	4604      	mov	r4, r0
 8008cf4:	9209      	str	r2, [sp, #36]	; 0x24
 8008cf6:	930c      	str	r3, [sp, #48]	; 0x30
 8008cf8:	46bb      	mov	fp, r7
 8008cfa:	b975      	cbnz	r5, 8008d1a <_dtoa_r+0x42>
 8008cfc:	2010      	movs	r0, #16
 8008cfe:	f000 fffd 	bl	8009cfc <malloc>
 8008d02:	4602      	mov	r2, r0
 8008d04:	6260      	str	r0, [r4, #36]	; 0x24
 8008d06:	b920      	cbnz	r0, 8008d12 <_dtoa_r+0x3a>
 8008d08:	4ba7      	ldr	r3, [pc, #668]	; (8008fa8 <_dtoa_r+0x2d0>)
 8008d0a:	21ea      	movs	r1, #234	; 0xea
 8008d0c:	48a7      	ldr	r0, [pc, #668]	; (8008fac <_dtoa_r+0x2d4>)
 8008d0e:	f001 fe37 	bl	800a980 <__assert_func>
 8008d12:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008d16:	6005      	str	r5, [r0, #0]
 8008d18:	60c5      	str	r5, [r0, #12]
 8008d1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d1c:	6819      	ldr	r1, [r3, #0]
 8008d1e:	b151      	cbz	r1, 8008d36 <_dtoa_r+0x5e>
 8008d20:	685a      	ldr	r2, [r3, #4]
 8008d22:	604a      	str	r2, [r1, #4]
 8008d24:	2301      	movs	r3, #1
 8008d26:	4093      	lsls	r3, r2
 8008d28:	608b      	str	r3, [r1, #8]
 8008d2a:	4620      	mov	r0, r4
 8008d2c:	f001 f82e 	bl	8009d8c <_Bfree>
 8008d30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d32:	2200      	movs	r2, #0
 8008d34:	601a      	str	r2, [r3, #0]
 8008d36:	1e3b      	subs	r3, r7, #0
 8008d38:	bfaa      	itet	ge
 8008d3a:	2300      	movge	r3, #0
 8008d3c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008d40:	f8c8 3000 	strge.w	r3, [r8]
 8008d44:	4b9a      	ldr	r3, [pc, #616]	; (8008fb0 <_dtoa_r+0x2d8>)
 8008d46:	bfbc      	itt	lt
 8008d48:	2201      	movlt	r2, #1
 8008d4a:	f8c8 2000 	strlt.w	r2, [r8]
 8008d4e:	ea33 030b 	bics.w	r3, r3, fp
 8008d52:	d11b      	bne.n	8008d8c <_dtoa_r+0xb4>
 8008d54:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d56:	f242 730f 	movw	r3, #9999	; 0x270f
 8008d5a:	6013      	str	r3, [r2, #0]
 8008d5c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008d60:	4333      	orrs	r3, r6
 8008d62:	f000 8592 	beq.w	800988a <_dtoa_r+0xbb2>
 8008d66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d68:	b963      	cbnz	r3, 8008d84 <_dtoa_r+0xac>
 8008d6a:	4b92      	ldr	r3, [pc, #584]	; (8008fb4 <_dtoa_r+0x2dc>)
 8008d6c:	e022      	b.n	8008db4 <_dtoa_r+0xdc>
 8008d6e:	4b92      	ldr	r3, [pc, #584]	; (8008fb8 <_dtoa_r+0x2e0>)
 8008d70:	9301      	str	r3, [sp, #4]
 8008d72:	3308      	adds	r3, #8
 8008d74:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008d76:	6013      	str	r3, [r2, #0]
 8008d78:	9801      	ldr	r0, [sp, #4]
 8008d7a:	b013      	add	sp, #76	; 0x4c
 8008d7c:	ecbd 8b04 	vpop	{d8-d9}
 8008d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d84:	4b8b      	ldr	r3, [pc, #556]	; (8008fb4 <_dtoa_r+0x2dc>)
 8008d86:	9301      	str	r3, [sp, #4]
 8008d88:	3303      	adds	r3, #3
 8008d8a:	e7f3      	b.n	8008d74 <_dtoa_r+0x9c>
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	2300      	movs	r3, #0
 8008d90:	4650      	mov	r0, sl
 8008d92:	4659      	mov	r1, fp
 8008d94:	f7f7 fea0 	bl	8000ad8 <__aeabi_dcmpeq>
 8008d98:	ec4b ab19 	vmov	d9, sl, fp
 8008d9c:	4680      	mov	r8, r0
 8008d9e:	b158      	cbz	r0, 8008db8 <_dtoa_r+0xe0>
 8008da0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008da2:	2301      	movs	r3, #1
 8008da4:	6013      	str	r3, [r2, #0]
 8008da6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	f000 856b 	beq.w	8009884 <_dtoa_r+0xbac>
 8008dae:	4883      	ldr	r0, [pc, #524]	; (8008fbc <_dtoa_r+0x2e4>)
 8008db0:	6018      	str	r0, [r3, #0]
 8008db2:	1e43      	subs	r3, r0, #1
 8008db4:	9301      	str	r3, [sp, #4]
 8008db6:	e7df      	b.n	8008d78 <_dtoa_r+0xa0>
 8008db8:	ec4b ab10 	vmov	d0, sl, fp
 8008dbc:	aa10      	add	r2, sp, #64	; 0x40
 8008dbe:	a911      	add	r1, sp, #68	; 0x44
 8008dc0:	4620      	mov	r0, r4
 8008dc2:	f001 facb 	bl	800a35c <__d2b>
 8008dc6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008dca:	ee08 0a10 	vmov	s16, r0
 8008dce:	2d00      	cmp	r5, #0
 8008dd0:	f000 8084 	beq.w	8008edc <_dtoa_r+0x204>
 8008dd4:	ee19 3a90 	vmov	r3, s19
 8008dd8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ddc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008de0:	4656      	mov	r6, sl
 8008de2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008de6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008dea:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008dee:	4b74      	ldr	r3, [pc, #464]	; (8008fc0 <_dtoa_r+0x2e8>)
 8008df0:	2200      	movs	r2, #0
 8008df2:	4630      	mov	r0, r6
 8008df4:	4639      	mov	r1, r7
 8008df6:	f7f7 fa4f 	bl	8000298 <__aeabi_dsub>
 8008dfa:	a365      	add	r3, pc, #404	; (adr r3, 8008f90 <_dtoa_r+0x2b8>)
 8008dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e00:	f7f7 fc02 	bl	8000608 <__aeabi_dmul>
 8008e04:	a364      	add	r3, pc, #400	; (adr r3, 8008f98 <_dtoa_r+0x2c0>)
 8008e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e0a:	f7f7 fa47 	bl	800029c <__adddf3>
 8008e0e:	4606      	mov	r6, r0
 8008e10:	4628      	mov	r0, r5
 8008e12:	460f      	mov	r7, r1
 8008e14:	f7f7 fb8e 	bl	8000534 <__aeabi_i2d>
 8008e18:	a361      	add	r3, pc, #388	; (adr r3, 8008fa0 <_dtoa_r+0x2c8>)
 8008e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e1e:	f7f7 fbf3 	bl	8000608 <__aeabi_dmul>
 8008e22:	4602      	mov	r2, r0
 8008e24:	460b      	mov	r3, r1
 8008e26:	4630      	mov	r0, r6
 8008e28:	4639      	mov	r1, r7
 8008e2a:	f7f7 fa37 	bl	800029c <__adddf3>
 8008e2e:	4606      	mov	r6, r0
 8008e30:	460f      	mov	r7, r1
 8008e32:	f7f7 fe99 	bl	8000b68 <__aeabi_d2iz>
 8008e36:	2200      	movs	r2, #0
 8008e38:	9000      	str	r0, [sp, #0]
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	4630      	mov	r0, r6
 8008e3e:	4639      	mov	r1, r7
 8008e40:	f7f7 fe54 	bl	8000aec <__aeabi_dcmplt>
 8008e44:	b150      	cbz	r0, 8008e5c <_dtoa_r+0x184>
 8008e46:	9800      	ldr	r0, [sp, #0]
 8008e48:	f7f7 fb74 	bl	8000534 <__aeabi_i2d>
 8008e4c:	4632      	mov	r2, r6
 8008e4e:	463b      	mov	r3, r7
 8008e50:	f7f7 fe42 	bl	8000ad8 <__aeabi_dcmpeq>
 8008e54:	b910      	cbnz	r0, 8008e5c <_dtoa_r+0x184>
 8008e56:	9b00      	ldr	r3, [sp, #0]
 8008e58:	3b01      	subs	r3, #1
 8008e5a:	9300      	str	r3, [sp, #0]
 8008e5c:	9b00      	ldr	r3, [sp, #0]
 8008e5e:	2b16      	cmp	r3, #22
 8008e60:	d85a      	bhi.n	8008f18 <_dtoa_r+0x240>
 8008e62:	9a00      	ldr	r2, [sp, #0]
 8008e64:	4b57      	ldr	r3, [pc, #348]	; (8008fc4 <_dtoa_r+0x2ec>)
 8008e66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e6e:	ec51 0b19 	vmov	r0, r1, d9
 8008e72:	f7f7 fe3b 	bl	8000aec <__aeabi_dcmplt>
 8008e76:	2800      	cmp	r0, #0
 8008e78:	d050      	beq.n	8008f1c <_dtoa_r+0x244>
 8008e7a:	9b00      	ldr	r3, [sp, #0]
 8008e7c:	3b01      	subs	r3, #1
 8008e7e:	9300      	str	r3, [sp, #0]
 8008e80:	2300      	movs	r3, #0
 8008e82:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008e86:	1b5d      	subs	r5, r3, r5
 8008e88:	1e6b      	subs	r3, r5, #1
 8008e8a:	9305      	str	r3, [sp, #20]
 8008e8c:	bf45      	ittet	mi
 8008e8e:	f1c5 0301 	rsbmi	r3, r5, #1
 8008e92:	9304      	strmi	r3, [sp, #16]
 8008e94:	2300      	movpl	r3, #0
 8008e96:	2300      	movmi	r3, #0
 8008e98:	bf4c      	ite	mi
 8008e9a:	9305      	strmi	r3, [sp, #20]
 8008e9c:	9304      	strpl	r3, [sp, #16]
 8008e9e:	9b00      	ldr	r3, [sp, #0]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	db3d      	blt.n	8008f20 <_dtoa_r+0x248>
 8008ea4:	9b05      	ldr	r3, [sp, #20]
 8008ea6:	9a00      	ldr	r2, [sp, #0]
 8008ea8:	920a      	str	r2, [sp, #40]	; 0x28
 8008eaa:	4413      	add	r3, r2
 8008eac:	9305      	str	r3, [sp, #20]
 8008eae:	2300      	movs	r3, #0
 8008eb0:	9307      	str	r3, [sp, #28]
 8008eb2:	9b06      	ldr	r3, [sp, #24]
 8008eb4:	2b09      	cmp	r3, #9
 8008eb6:	f200 8089 	bhi.w	8008fcc <_dtoa_r+0x2f4>
 8008eba:	2b05      	cmp	r3, #5
 8008ebc:	bfc4      	itt	gt
 8008ebe:	3b04      	subgt	r3, #4
 8008ec0:	9306      	strgt	r3, [sp, #24]
 8008ec2:	9b06      	ldr	r3, [sp, #24]
 8008ec4:	f1a3 0302 	sub.w	r3, r3, #2
 8008ec8:	bfcc      	ite	gt
 8008eca:	2500      	movgt	r5, #0
 8008ecc:	2501      	movle	r5, #1
 8008ece:	2b03      	cmp	r3, #3
 8008ed0:	f200 8087 	bhi.w	8008fe2 <_dtoa_r+0x30a>
 8008ed4:	e8df f003 	tbb	[pc, r3]
 8008ed8:	59383a2d 	.word	0x59383a2d
 8008edc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008ee0:	441d      	add	r5, r3
 8008ee2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008ee6:	2b20      	cmp	r3, #32
 8008ee8:	bfc1      	itttt	gt
 8008eea:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008eee:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008ef2:	fa0b f303 	lslgt.w	r3, fp, r3
 8008ef6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008efa:	bfda      	itte	le
 8008efc:	f1c3 0320 	rsble	r3, r3, #32
 8008f00:	fa06 f003 	lslle.w	r0, r6, r3
 8008f04:	4318      	orrgt	r0, r3
 8008f06:	f7f7 fb05 	bl	8000514 <__aeabi_ui2d>
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	4606      	mov	r6, r0
 8008f0e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008f12:	3d01      	subs	r5, #1
 8008f14:	930e      	str	r3, [sp, #56]	; 0x38
 8008f16:	e76a      	b.n	8008dee <_dtoa_r+0x116>
 8008f18:	2301      	movs	r3, #1
 8008f1a:	e7b2      	b.n	8008e82 <_dtoa_r+0x1aa>
 8008f1c:	900b      	str	r0, [sp, #44]	; 0x2c
 8008f1e:	e7b1      	b.n	8008e84 <_dtoa_r+0x1ac>
 8008f20:	9b04      	ldr	r3, [sp, #16]
 8008f22:	9a00      	ldr	r2, [sp, #0]
 8008f24:	1a9b      	subs	r3, r3, r2
 8008f26:	9304      	str	r3, [sp, #16]
 8008f28:	4253      	negs	r3, r2
 8008f2a:	9307      	str	r3, [sp, #28]
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	930a      	str	r3, [sp, #40]	; 0x28
 8008f30:	e7bf      	b.n	8008eb2 <_dtoa_r+0x1da>
 8008f32:	2300      	movs	r3, #0
 8008f34:	9308      	str	r3, [sp, #32]
 8008f36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	dc55      	bgt.n	8008fe8 <_dtoa_r+0x310>
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008f42:	461a      	mov	r2, r3
 8008f44:	9209      	str	r2, [sp, #36]	; 0x24
 8008f46:	e00c      	b.n	8008f62 <_dtoa_r+0x28a>
 8008f48:	2301      	movs	r3, #1
 8008f4a:	e7f3      	b.n	8008f34 <_dtoa_r+0x25c>
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f50:	9308      	str	r3, [sp, #32]
 8008f52:	9b00      	ldr	r3, [sp, #0]
 8008f54:	4413      	add	r3, r2
 8008f56:	9302      	str	r3, [sp, #8]
 8008f58:	3301      	adds	r3, #1
 8008f5a:	2b01      	cmp	r3, #1
 8008f5c:	9303      	str	r3, [sp, #12]
 8008f5e:	bfb8      	it	lt
 8008f60:	2301      	movlt	r3, #1
 8008f62:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008f64:	2200      	movs	r2, #0
 8008f66:	6042      	str	r2, [r0, #4]
 8008f68:	2204      	movs	r2, #4
 8008f6a:	f102 0614 	add.w	r6, r2, #20
 8008f6e:	429e      	cmp	r6, r3
 8008f70:	6841      	ldr	r1, [r0, #4]
 8008f72:	d93d      	bls.n	8008ff0 <_dtoa_r+0x318>
 8008f74:	4620      	mov	r0, r4
 8008f76:	f000 fec9 	bl	8009d0c <_Balloc>
 8008f7a:	9001      	str	r0, [sp, #4]
 8008f7c:	2800      	cmp	r0, #0
 8008f7e:	d13b      	bne.n	8008ff8 <_dtoa_r+0x320>
 8008f80:	4b11      	ldr	r3, [pc, #68]	; (8008fc8 <_dtoa_r+0x2f0>)
 8008f82:	4602      	mov	r2, r0
 8008f84:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008f88:	e6c0      	b.n	8008d0c <_dtoa_r+0x34>
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	e7df      	b.n	8008f4e <_dtoa_r+0x276>
 8008f8e:	bf00      	nop
 8008f90:	636f4361 	.word	0x636f4361
 8008f94:	3fd287a7 	.word	0x3fd287a7
 8008f98:	8b60c8b3 	.word	0x8b60c8b3
 8008f9c:	3fc68a28 	.word	0x3fc68a28
 8008fa0:	509f79fb 	.word	0x509f79fb
 8008fa4:	3fd34413 	.word	0x3fd34413
 8008fa8:	0800b779 	.word	0x0800b779
 8008fac:	0800b790 	.word	0x0800b790
 8008fb0:	7ff00000 	.word	0x7ff00000
 8008fb4:	0800b775 	.word	0x0800b775
 8008fb8:	0800b76c 	.word	0x0800b76c
 8008fbc:	0800b749 	.word	0x0800b749
 8008fc0:	3ff80000 	.word	0x3ff80000
 8008fc4:	0800b8e0 	.word	0x0800b8e0
 8008fc8:	0800b7eb 	.word	0x0800b7eb
 8008fcc:	2501      	movs	r5, #1
 8008fce:	2300      	movs	r3, #0
 8008fd0:	9306      	str	r3, [sp, #24]
 8008fd2:	9508      	str	r5, [sp, #32]
 8008fd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008fd8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008fdc:	2200      	movs	r2, #0
 8008fde:	2312      	movs	r3, #18
 8008fe0:	e7b0      	b.n	8008f44 <_dtoa_r+0x26c>
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	9308      	str	r3, [sp, #32]
 8008fe6:	e7f5      	b.n	8008fd4 <_dtoa_r+0x2fc>
 8008fe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fea:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008fee:	e7b8      	b.n	8008f62 <_dtoa_r+0x28a>
 8008ff0:	3101      	adds	r1, #1
 8008ff2:	6041      	str	r1, [r0, #4]
 8008ff4:	0052      	lsls	r2, r2, #1
 8008ff6:	e7b8      	b.n	8008f6a <_dtoa_r+0x292>
 8008ff8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ffa:	9a01      	ldr	r2, [sp, #4]
 8008ffc:	601a      	str	r2, [r3, #0]
 8008ffe:	9b03      	ldr	r3, [sp, #12]
 8009000:	2b0e      	cmp	r3, #14
 8009002:	f200 809d 	bhi.w	8009140 <_dtoa_r+0x468>
 8009006:	2d00      	cmp	r5, #0
 8009008:	f000 809a 	beq.w	8009140 <_dtoa_r+0x468>
 800900c:	9b00      	ldr	r3, [sp, #0]
 800900e:	2b00      	cmp	r3, #0
 8009010:	dd32      	ble.n	8009078 <_dtoa_r+0x3a0>
 8009012:	4ab7      	ldr	r2, [pc, #732]	; (80092f0 <_dtoa_r+0x618>)
 8009014:	f003 030f 	and.w	r3, r3, #15
 8009018:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800901c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009020:	9b00      	ldr	r3, [sp, #0]
 8009022:	05d8      	lsls	r0, r3, #23
 8009024:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009028:	d516      	bpl.n	8009058 <_dtoa_r+0x380>
 800902a:	4bb2      	ldr	r3, [pc, #712]	; (80092f4 <_dtoa_r+0x61c>)
 800902c:	ec51 0b19 	vmov	r0, r1, d9
 8009030:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009034:	f7f7 fc12 	bl	800085c <__aeabi_ddiv>
 8009038:	f007 070f 	and.w	r7, r7, #15
 800903c:	4682      	mov	sl, r0
 800903e:	468b      	mov	fp, r1
 8009040:	2503      	movs	r5, #3
 8009042:	4eac      	ldr	r6, [pc, #688]	; (80092f4 <_dtoa_r+0x61c>)
 8009044:	b957      	cbnz	r7, 800905c <_dtoa_r+0x384>
 8009046:	4642      	mov	r2, r8
 8009048:	464b      	mov	r3, r9
 800904a:	4650      	mov	r0, sl
 800904c:	4659      	mov	r1, fp
 800904e:	f7f7 fc05 	bl	800085c <__aeabi_ddiv>
 8009052:	4682      	mov	sl, r0
 8009054:	468b      	mov	fp, r1
 8009056:	e028      	b.n	80090aa <_dtoa_r+0x3d2>
 8009058:	2502      	movs	r5, #2
 800905a:	e7f2      	b.n	8009042 <_dtoa_r+0x36a>
 800905c:	07f9      	lsls	r1, r7, #31
 800905e:	d508      	bpl.n	8009072 <_dtoa_r+0x39a>
 8009060:	4640      	mov	r0, r8
 8009062:	4649      	mov	r1, r9
 8009064:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009068:	f7f7 face 	bl	8000608 <__aeabi_dmul>
 800906c:	3501      	adds	r5, #1
 800906e:	4680      	mov	r8, r0
 8009070:	4689      	mov	r9, r1
 8009072:	107f      	asrs	r7, r7, #1
 8009074:	3608      	adds	r6, #8
 8009076:	e7e5      	b.n	8009044 <_dtoa_r+0x36c>
 8009078:	f000 809b 	beq.w	80091b2 <_dtoa_r+0x4da>
 800907c:	9b00      	ldr	r3, [sp, #0]
 800907e:	4f9d      	ldr	r7, [pc, #628]	; (80092f4 <_dtoa_r+0x61c>)
 8009080:	425e      	negs	r6, r3
 8009082:	4b9b      	ldr	r3, [pc, #620]	; (80092f0 <_dtoa_r+0x618>)
 8009084:	f006 020f 	and.w	r2, r6, #15
 8009088:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800908c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009090:	ec51 0b19 	vmov	r0, r1, d9
 8009094:	f7f7 fab8 	bl	8000608 <__aeabi_dmul>
 8009098:	1136      	asrs	r6, r6, #4
 800909a:	4682      	mov	sl, r0
 800909c:	468b      	mov	fp, r1
 800909e:	2300      	movs	r3, #0
 80090a0:	2502      	movs	r5, #2
 80090a2:	2e00      	cmp	r6, #0
 80090a4:	d17a      	bne.n	800919c <_dtoa_r+0x4c4>
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d1d3      	bne.n	8009052 <_dtoa_r+0x37a>
 80090aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	f000 8082 	beq.w	80091b6 <_dtoa_r+0x4de>
 80090b2:	4b91      	ldr	r3, [pc, #580]	; (80092f8 <_dtoa_r+0x620>)
 80090b4:	2200      	movs	r2, #0
 80090b6:	4650      	mov	r0, sl
 80090b8:	4659      	mov	r1, fp
 80090ba:	f7f7 fd17 	bl	8000aec <__aeabi_dcmplt>
 80090be:	2800      	cmp	r0, #0
 80090c0:	d079      	beq.n	80091b6 <_dtoa_r+0x4de>
 80090c2:	9b03      	ldr	r3, [sp, #12]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d076      	beq.n	80091b6 <_dtoa_r+0x4de>
 80090c8:	9b02      	ldr	r3, [sp, #8]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	dd36      	ble.n	800913c <_dtoa_r+0x464>
 80090ce:	9b00      	ldr	r3, [sp, #0]
 80090d0:	4650      	mov	r0, sl
 80090d2:	4659      	mov	r1, fp
 80090d4:	1e5f      	subs	r7, r3, #1
 80090d6:	2200      	movs	r2, #0
 80090d8:	4b88      	ldr	r3, [pc, #544]	; (80092fc <_dtoa_r+0x624>)
 80090da:	f7f7 fa95 	bl	8000608 <__aeabi_dmul>
 80090de:	9e02      	ldr	r6, [sp, #8]
 80090e0:	4682      	mov	sl, r0
 80090e2:	468b      	mov	fp, r1
 80090e4:	3501      	adds	r5, #1
 80090e6:	4628      	mov	r0, r5
 80090e8:	f7f7 fa24 	bl	8000534 <__aeabi_i2d>
 80090ec:	4652      	mov	r2, sl
 80090ee:	465b      	mov	r3, fp
 80090f0:	f7f7 fa8a 	bl	8000608 <__aeabi_dmul>
 80090f4:	4b82      	ldr	r3, [pc, #520]	; (8009300 <_dtoa_r+0x628>)
 80090f6:	2200      	movs	r2, #0
 80090f8:	f7f7 f8d0 	bl	800029c <__adddf3>
 80090fc:	46d0      	mov	r8, sl
 80090fe:	46d9      	mov	r9, fp
 8009100:	4682      	mov	sl, r0
 8009102:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009106:	2e00      	cmp	r6, #0
 8009108:	d158      	bne.n	80091bc <_dtoa_r+0x4e4>
 800910a:	4b7e      	ldr	r3, [pc, #504]	; (8009304 <_dtoa_r+0x62c>)
 800910c:	2200      	movs	r2, #0
 800910e:	4640      	mov	r0, r8
 8009110:	4649      	mov	r1, r9
 8009112:	f7f7 f8c1 	bl	8000298 <__aeabi_dsub>
 8009116:	4652      	mov	r2, sl
 8009118:	465b      	mov	r3, fp
 800911a:	4680      	mov	r8, r0
 800911c:	4689      	mov	r9, r1
 800911e:	f7f7 fd03 	bl	8000b28 <__aeabi_dcmpgt>
 8009122:	2800      	cmp	r0, #0
 8009124:	f040 8295 	bne.w	8009652 <_dtoa_r+0x97a>
 8009128:	4652      	mov	r2, sl
 800912a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800912e:	4640      	mov	r0, r8
 8009130:	4649      	mov	r1, r9
 8009132:	f7f7 fcdb 	bl	8000aec <__aeabi_dcmplt>
 8009136:	2800      	cmp	r0, #0
 8009138:	f040 8289 	bne.w	800964e <_dtoa_r+0x976>
 800913c:	ec5b ab19 	vmov	sl, fp, d9
 8009140:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009142:	2b00      	cmp	r3, #0
 8009144:	f2c0 8148 	blt.w	80093d8 <_dtoa_r+0x700>
 8009148:	9a00      	ldr	r2, [sp, #0]
 800914a:	2a0e      	cmp	r2, #14
 800914c:	f300 8144 	bgt.w	80093d8 <_dtoa_r+0x700>
 8009150:	4b67      	ldr	r3, [pc, #412]	; (80092f0 <_dtoa_r+0x618>)
 8009152:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009156:	e9d3 8900 	ldrd	r8, r9, [r3]
 800915a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800915c:	2b00      	cmp	r3, #0
 800915e:	f280 80d5 	bge.w	800930c <_dtoa_r+0x634>
 8009162:	9b03      	ldr	r3, [sp, #12]
 8009164:	2b00      	cmp	r3, #0
 8009166:	f300 80d1 	bgt.w	800930c <_dtoa_r+0x634>
 800916a:	f040 826f 	bne.w	800964c <_dtoa_r+0x974>
 800916e:	4b65      	ldr	r3, [pc, #404]	; (8009304 <_dtoa_r+0x62c>)
 8009170:	2200      	movs	r2, #0
 8009172:	4640      	mov	r0, r8
 8009174:	4649      	mov	r1, r9
 8009176:	f7f7 fa47 	bl	8000608 <__aeabi_dmul>
 800917a:	4652      	mov	r2, sl
 800917c:	465b      	mov	r3, fp
 800917e:	f7f7 fcc9 	bl	8000b14 <__aeabi_dcmpge>
 8009182:	9e03      	ldr	r6, [sp, #12]
 8009184:	4637      	mov	r7, r6
 8009186:	2800      	cmp	r0, #0
 8009188:	f040 8245 	bne.w	8009616 <_dtoa_r+0x93e>
 800918c:	9d01      	ldr	r5, [sp, #4]
 800918e:	2331      	movs	r3, #49	; 0x31
 8009190:	f805 3b01 	strb.w	r3, [r5], #1
 8009194:	9b00      	ldr	r3, [sp, #0]
 8009196:	3301      	adds	r3, #1
 8009198:	9300      	str	r3, [sp, #0]
 800919a:	e240      	b.n	800961e <_dtoa_r+0x946>
 800919c:	07f2      	lsls	r2, r6, #31
 800919e:	d505      	bpl.n	80091ac <_dtoa_r+0x4d4>
 80091a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091a4:	f7f7 fa30 	bl	8000608 <__aeabi_dmul>
 80091a8:	3501      	adds	r5, #1
 80091aa:	2301      	movs	r3, #1
 80091ac:	1076      	asrs	r6, r6, #1
 80091ae:	3708      	adds	r7, #8
 80091b0:	e777      	b.n	80090a2 <_dtoa_r+0x3ca>
 80091b2:	2502      	movs	r5, #2
 80091b4:	e779      	b.n	80090aa <_dtoa_r+0x3d2>
 80091b6:	9f00      	ldr	r7, [sp, #0]
 80091b8:	9e03      	ldr	r6, [sp, #12]
 80091ba:	e794      	b.n	80090e6 <_dtoa_r+0x40e>
 80091bc:	9901      	ldr	r1, [sp, #4]
 80091be:	4b4c      	ldr	r3, [pc, #304]	; (80092f0 <_dtoa_r+0x618>)
 80091c0:	4431      	add	r1, r6
 80091c2:	910d      	str	r1, [sp, #52]	; 0x34
 80091c4:	9908      	ldr	r1, [sp, #32]
 80091c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80091ca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80091ce:	2900      	cmp	r1, #0
 80091d0:	d043      	beq.n	800925a <_dtoa_r+0x582>
 80091d2:	494d      	ldr	r1, [pc, #308]	; (8009308 <_dtoa_r+0x630>)
 80091d4:	2000      	movs	r0, #0
 80091d6:	f7f7 fb41 	bl	800085c <__aeabi_ddiv>
 80091da:	4652      	mov	r2, sl
 80091dc:	465b      	mov	r3, fp
 80091de:	f7f7 f85b 	bl	8000298 <__aeabi_dsub>
 80091e2:	9d01      	ldr	r5, [sp, #4]
 80091e4:	4682      	mov	sl, r0
 80091e6:	468b      	mov	fp, r1
 80091e8:	4649      	mov	r1, r9
 80091ea:	4640      	mov	r0, r8
 80091ec:	f7f7 fcbc 	bl	8000b68 <__aeabi_d2iz>
 80091f0:	4606      	mov	r6, r0
 80091f2:	f7f7 f99f 	bl	8000534 <__aeabi_i2d>
 80091f6:	4602      	mov	r2, r0
 80091f8:	460b      	mov	r3, r1
 80091fa:	4640      	mov	r0, r8
 80091fc:	4649      	mov	r1, r9
 80091fe:	f7f7 f84b 	bl	8000298 <__aeabi_dsub>
 8009202:	3630      	adds	r6, #48	; 0x30
 8009204:	f805 6b01 	strb.w	r6, [r5], #1
 8009208:	4652      	mov	r2, sl
 800920a:	465b      	mov	r3, fp
 800920c:	4680      	mov	r8, r0
 800920e:	4689      	mov	r9, r1
 8009210:	f7f7 fc6c 	bl	8000aec <__aeabi_dcmplt>
 8009214:	2800      	cmp	r0, #0
 8009216:	d163      	bne.n	80092e0 <_dtoa_r+0x608>
 8009218:	4642      	mov	r2, r8
 800921a:	464b      	mov	r3, r9
 800921c:	4936      	ldr	r1, [pc, #216]	; (80092f8 <_dtoa_r+0x620>)
 800921e:	2000      	movs	r0, #0
 8009220:	f7f7 f83a 	bl	8000298 <__aeabi_dsub>
 8009224:	4652      	mov	r2, sl
 8009226:	465b      	mov	r3, fp
 8009228:	f7f7 fc60 	bl	8000aec <__aeabi_dcmplt>
 800922c:	2800      	cmp	r0, #0
 800922e:	f040 80b5 	bne.w	800939c <_dtoa_r+0x6c4>
 8009232:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009234:	429d      	cmp	r5, r3
 8009236:	d081      	beq.n	800913c <_dtoa_r+0x464>
 8009238:	4b30      	ldr	r3, [pc, #192]	; (80092fc <_dtoa_r+0x624>)
 800923a:	2200      	movs	r2, #0
 800923c:	4650      	mov	r0, sl
 800923e:	4659      	mov	r1, fp
 8009240:	f7f7 f9e2 	bl	8000608 <__aeabi_dmul>
 8009244:	4b2d      	ldr	r3, [pc, #180]	; (80092fc <_dtoa_r+0x624>)
 8009246:	4682      	mov	sl, r0
 8009248:	468b      	mov	fp, r1
 800924a:	4640      	mov	r0, r8
 800924c:	4649      	mov	r1, r9
 800924e:	2200      	movs	r2, #0
 8009250:	f7f7 f9da 	bl	8000608 <__aeabi_dmul>
 8009254:	4680      	mov	r8, r0
 8009256:	4689      	mov	r9, r1
 8009258:	e7c6      	b.n	80091e8 <_dtoa_r+0x510>
 800925a:	4650      	mov	r0, sl
 800925c:	4659      	mov	r1, fp
 800925e:	f7f7 f9d3 	bl	8000608 <__aeabi_dmul>
 8009262:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009264:	9d01      	ldr	r5, [sp, #4]
 8009266:	930f      	str	r3, [sp, #60]	; 0x3c
 8009268:	4682      	mov	sl, r0
 800926a:	468b      	mov	fp, r1
 800926c:	4649      	mov	r1, r9
 800926e:	4640      	mov	r0, r8
 8009270:	f7f7 fc7a 	bl	8000b68 <__aeabi_d2iz>
 8009274:	4606      	mov	r6, r0
 8009276:	f7f7 f95d 	bl	8000534 <__aeabi_i2d>
 800927a:	3630      	adds	r6, #48	; 0x30
 800927c:	4602      	mov	r2, r0
 800927e:	460b      	mov	r3, r1
 8009280:	4640      	mov	r0, r8
 8009282:	4649      	mov	r1, r9
 8009284:	f7f7 f808 	bl	8000298 <__aeabi_dsub>
 8009288:	f805 6b01 	strb.w	r6, [r5], #1
 800928c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800928e:	429d      	cmp	r5, r3
 8009290:	4680      	mov	r8, r0
 8009292:	4689      	mov	r9, r1
 8009294:	f04f 0200 	mov.w	r2, #0
 8009298:	d124      	bne.n	80092e4 <_dtoa_r+0x60c>
 800929a:	4b1b      	ldr	r3, [pc, #108]	; (8009308 <_dtoa_r+0x630>)
 800929c:	4650      	mov	r0, sl
 800929e:	4659      	mov	r1, fp
 80092a0:	f7f6 fffc 	bl	800029c <__adddf3>
 80092a4:	4602      	mov	r2, r0
 80092a6:	460b      	mov	r3, r1
 80092a8:	4640      	mov	r0, r8
 80092aa:	4649      	mov	r1, r9
 80092ac:	f7f7 fc3c 	bl	8000b28 <__aeabi_dcmpgt>
 80092b0:	2800      	cmp	r0, #0
 80092b2:	d173      	bne.n	800939c <_dtoa_r+0x6c4>
 80092b4:	4652      	mov	r2, sl
 80092b6:	465b      	mov	r3, fp
 80092b8:	4913      	ldr	r1, [pc, #76]	; (8009308 <_dtoa_r+0x630>)
 80092ba:	2000      	movs	r0, #0
 80092bc:	f7f6 ffec 	bl	8000298 <__aeabi_dsub>
 80092c0:	4602      	mov	r2, r0
 80092c2:	460b      	mov	r3, r1
 80092c4:	4640      	mov	r0, r8
 80092c6:	4649      	mov	r1, r9
 80092c8:	f7f7 fc10 	bl	8000aec <__aeabi_dcmplt>
 80092cc:	2800      	cmp	r0, #0
 80092ce:	f43f af35 	beq.w	800913c <_dtoa_r+0x464>
 80092d2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80092d4:	1e6b      	subs	r3, r5, #1
 80092d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80092d8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80092dc:	2b30      	cmp	r3, #48	; 0x30
 80092de:	d0f8      	beq.n	80092d2 <_dtoa_r+0x5fa>
 80092e0:	9700      	str	r7, [sp, #0]
 80092e2:	e049      	b.n	8009378 <_dtoa_r+0x6a0>
 80092e4:	4b05      	ldr	r3, [pc, #20]	; (80092fc <_dtoa_r+0x624>)
 80092e6:	f7f7 f98f 	bl	8000608 <__aeabi_dmul>
 80092ea:	4680      	mov	r8, r0
 80092ec:	4689      	mov	r9, r1
 80092ee:	e7bd      	b.n	800926c <_dtoa_r+0x594>
 80092f0:	0800b8e0 	.word	0x0800b8e0
 80092f4:	0800b8b8 	.word	0x0800b8b8
 80092f8:	3ff00000 	.word	0x3ff00000
 80092fc:	40240000 	.word	0x40240000
 8009300:	401c0000 	.word	0x401c0000
 8009304:	40140000 	.word	0x40140000
 8009308:	3fe00000 	.word	0x3fe00000
 800930c:	9d01      	ldr	r5, [sp, #4]
 800930e:	4656      	mov	r6, sl
 8009310:	465f      	mov	r7, fp
 8009312:	4642      	mov	r2, r8
 8009314:	464b      	mov	r3, r9
 8009316:	4630      	mov	r0, r6
 8009318:	4639      	mov	r1, r7
 800931a:	f7f7 fa9f 	bl	800085c <__aeabi_ddiv>
 800931e:	f7f7 fc23 	bl	8000b68 <__aeabi_d2iz>
 8009322:	4682      	mov	sl, r0
 8009324:	f7f7 f906 	bl	8000534 <__aeabi_i2d>
 8009328:	4642      	mov	r2, r8
 800932a:	464b      	mov	r3, r9
 800932c:	f7f7 f96c 	bl	8000608 <__aeabi_dmul>
 8009330:	4602      	mov	r2, r0
 8009332:	460b      	mov	r3, r1
 8009334:	4630      	mov	r0, r6
 8009336:	4639      	mov	r1, r7
 8009338:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800933c:	f7f6 ffac 	bl	8000298 <__aeabi_dsub>
 8009340:	f805 6b01 	strb.w	r6, [r5], #1
 8009344:	9e01      	ldr	r6, [sp, #4]
 8009346:	9f03      	ldr	r7, [sp, #12]
 8009348:	1bae      	subs	r6, r5, r6
 800934a:	42b7      	cmp	r7, r6
 800934c:	4602      	mov	r2, r0
 800934e:	460b      	mov	r3, r1
 8009350:	d135      	bne.n	80093be <_dtoa_r+0x6e6>
 8009352:	f7f6 ffa3 	bl	800029c <__adddf3>
 8009356:	4642      	mov	r2, r8
 8009358:	464b      	mov	r3, r9
 800935a:	4606      	mov	r6, r0
 800935c:	460f      	mov	r7, r1
 800935e:	f7f7 fbe3 	bl	8000b28 <__aeabi_dcmpgt>
 8009362:	b9d0      	cbnz	r0, 800939a <_dtoa_r+0x6c2>
 8009364:	4642      	mov	r2, r8
 8009366:	464b      	mov	r3, r9
 8009368:	4630      	mov	r0, r6
 800936a:	4639      	mov	r1, r7
 800936c:	f7f7 fbb4 	bl	8000ad8 <__aeabi_dcmpeq>
 8009370:	b110      	cbz	r0, 8009378 <_dtoa_r+0x6a0>
 8009372:	f01a 0f01 	tst.w	sl, #1
 8009376:	d110      	bne.n	800939a <_dtoa_r+0x6c2>
 8009378:	4620      	mov	r0, r4
 800937a:	ee18 1a10 	vmov	r1, s16
 800937e:	f000 fd05 	bl	8009d8c <_Bfree>
 8009382:	2300      	movs	r3, #0
 8009384:	9800      	ldr	r0, [sp, #0]
 8009386:	702b      	strb	r3, [r5, #0]
 8009388:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800938a:	3001      	adds	r0, #1
 800938c:	6018      	str	r0, [r3, #0]
 800938e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009390:	2b00      	cmp	r3, #0
 8009392:	f43f acf1 	beq.w	8008d78 <_dtoa_r+0xa0>
 8009396:	601d      	str	r5, [r3, #0]
 8009398:	e4ee      	b.n	8008d78 <_dtoa_r+0xa0>
 800939a:	9f00      	ldr	r7, [sp, #0]
 800939c:	462b      	mov	r3, r5
 800939e:	461d      	mov	r5, r3
 80093a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80093a4:	2a39      	cmp	r2, #57	; 0x39
 80093a6:	d106      	bne.n	80093b6 <_dtoa_r+0x6de>
 80093a8:	9a01      	ldr	r2, [sp, #4]
 80093aa:	429a      	cmp	r2, r3
 80093ac:	d1f7      	bne.n	800939e <_dtoa_r+0x6c6>
 80093ae:	9901      	ldr	r1, [sp, #4]
 80093b0:	2230      	movs	r2, #48	; 0x30
 80093b2:	3701      	adds	r7, #1
 80093b4:	700a      	strb	r2, [r1, #0]
 80093b6:	781a      	ldrb	r2, [r3, #0]
 80093b8:	3201      	adds	r2, #1
 80093ba:	701a      	strb	r2, [r3, #0]
 80093bc:	e790      	b.n	80092e0 <_dtoa_r+0x608>
 80093be:	4ba6      	ldr	r3, [pc, #664]	; (8009658 <_dtoa_r+0x980>)
 80093c0:	2200      	movs	r2, #0
 80093c2:	f7f7 f921 	bl	8000608 <__aeabi_dmul>
 80093c6:	2200      	movs	r2, #0
 80093c8:	2300      	movs	r3, #0
 80093ca:	4606      	mov	r6, r0
 80093cc:	460f      	mov	r7, r1
 80093ce:	f7f7 fb83 	bl	8000ad8 <__aeabi_dcmpeq>
 80093d2:	2800      	cmp	r0, #0
 80093d4:	d09d      	beq.n	8009312 <_dtoa_r+0x63a>
 80093d6:	e7cf      	b.n	8009378 <_dtoa_r+0x6a0>
 80093d8:	9a08      	ldr	r2, [sp, #32]
 80093da:	2a00      	cmp	r2, #0
 80093dc:	f000 80d7 	beq.w	800958e <_dtoa_r+0x8b6>
 80093e0:	9a06      	ldr	r2, [sp, #24]
 80093e2:	2a01      	cmp	r2, #1
 80093e4:	f300 80ba 	bgt.w	800955c <_dtoa_r+0x884>
 80093e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80093ea:	2a00      	cmp	r2, #0
 80093ec:	f000 80b2 	beq.w	8009554 <_dtoa_r+0x87c>
 80093f0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80093f4:	9e07      	ldr	r6, [sp, #28]
 80093f6:	9d04      	ldr	r5, [sp, #16]
 80093f8:	9a04      	ldr	r2, [sp, #16]
 80093fa:	441a      	add	r2, r3
 80093fc:	9204      	str	r2, [sp, #16]
 80093fe:	9a05      	ldr	r2, [sp, #20]
 8009400:	2101      	movs	r1, #1
 8009402:	441a      	add	r2, r3
 8009404:	4620      	mov	r0, r4
 8009406:	9205      	str	r2, [sp, #20]
 8009408:	f000 fd78 	bl	8009efc <__i2b>
 800940c:	4607      	mov	r7, r0
 800940e:	2d00      	cmp	r5, #0
 8009410:	dd0c      	ble.n	800942c <_dtoa_r+0x754>
 8009412:	9b05      	ldr	r3, [sp, #20]
 8009414:	2b00      	cmp	r3, #0
 8009416:	dd09      	ble.n	800942c <_dtoa_r+0x754>
 8009418:	42ab      	cmp	r3, r5
 800941a:	9a04      	ldr	r2, [sp, #16]
 800941c:	bfa8      	it	ge
 800941e:	462b      	movge	r3, r5
 8009420:	1ad2      	subs	r2, r2, r3
 8009422:	9204      	str	r2, [sp, #16]
 8009424:	9a05      	ldr	r2, [sp, #20]
 8009426:	1aed      	subs	r5, r5, r3
 8009428:	1ad3      	subs	r3, r2, r3
 800942a:	9305      	str	r3, [sp, #20]
 800942c:	9b07      	ldr	r3, [sp, #28]
 800942e:	b31b      	cbz	r3, 8009478 <_dtoa_r+0x7a0>
 8009430:	9b08      	ldr	r3, [sp, #32]
 8009432:	2b00      	cmp	r3, #0
 8009434:	f000 80af 	beq.w	8009596 <_dtoa_r+0x8be>
 8009438:	2e00      	cmp	r6, #0
 800943a:	dd13      	ble.n	8009464 <_dtoa_r+0x78c>
 800943c:	4639      	mov	r1, r7
 800943e:	4632      	mov	r2, r6
 8009440:	4620      	mov	r0, r4
 8009442:	f000 fe1b 	bl	800a07c <__pow5mult>
 8009446:	ee18 2a10 	vmov	r2, s16
 800944a:	4601      	mov	r1, r0
 800944c:	4607      	mov	r7, r0
 800944e:	4620      	mov	r0, r4
 8009450:	f000 fd6a 	bl	8009f28 <__multiply>
 8009454:	ee18 1a10 	vmov	r1, s16
 8009458:	4680      	mov	r8, r0
 800945a:	4620      	mov	r0, r4
 800945c:	f000 fc96 	bl	8009d8c <_Bfree>
 8009460:	ee08 8a10 	vmov	s16, r8
 8009464:	9b07      	ldr	r3, [sp, #28]
 8009466:	1b9a      	subs	r2, r3, r6
 8009468:	d006      	beq.n	8009478 <_dtoa_r+0x7a0>
 800946a:	ee18 1a10 	vmov	r1, s16
 800946e:	4620      	mov	r0, r4
 8009470:	f000 fe04 	bl	800a07c <__pow5mult>
 8009474:	ee08 0a10 	vmov	s16, r0
 8009478:	2101      	movs	r1, #1
 800947a:	4620      	mov	r0, r4
 800947c:	f000 fd3e 	bl	8009efc <__i2b>
 8009480:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009482:	2b00      	cmp	r3, #0
 8009484:	4606      	mov	r6, r0
 8009486:	f340 8088 	ble.w	800959a <_dtoa_r+0x8c2>
 800948a:	461a      	mov	r2, r3
 800948c:	4601      	mov	r1, r0
 800948e:	4620      	mov	r0, r4
 8009490:	f000 fdf4 	bl	800a07c <__pow5mult>
 8009494:	9b06      	ldr	r3, [sp, #24]
 8009496:	2b01      	cmp	r3, #1
 8009498:	4606      	mov	r6, r0
 800949a:	f340 8081 	ble.w	80095a0 <_dtoa_r+0x8c8>
 800949e:	f04f 0800 	mov.w	r8, #0
 80094a2:	6933      	ldr	r3, [r6, #16]
 80094a4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80094a8:	6918      	ldr	r0, [r3, #16]
 80094aa:	f000 fcd7 	bl	8009e5c <__hi0bits>
 80094ae:	f1c0 0020 	rsb	r0, r0, #32
 80094b2:	9b05      	ldr	r3, [sp, #20]
 80094b4:	4418      	add	r0, r3
 80094b6:	f010 001f 	ands.w	r0, r0, #31
 80094ba:	f000 8092 	beq.w	80095e2 <_dtoa_r+0x90a>
 80094be:	f1c0 0320 	rsb	r3, r0, #32
 80094c2:	2b04      	cmp	r3, #4
 80094c4:	f340 808a 	ble.w	80095dc <_dtoa_r+0x904>
 80094c8:	f1c0 001c 	rsb	r0, r0, #28
 80094cc:	9b04      	ldr	r3, [sp, #16]
 80094ce:	4403      	add	r3, r0
 80094d0:	9304      	str	r3, [sp, #16]
 80094d2:	9b05      	ldr	r3, [sp, #20]
 80094d4:	4403      	add	r3, r0
 80094d6:	4405      	add	r5, r0
 80094d8:	9305      	str	r3, [sp, #20]
 80094da:	9b04      	ldr	r3, [sp, #16]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	dd07      	ble.n	80094f0 <_dtoa_r+0x818>
 80094e0:	ee18 1a10 	vmov	r1, s16
 80094e4:	461a      	mov	r2, r3
 80094e6:	4620      	mov	r0, r4
 80094e8:	f000 fe22 	bl	800a130 <__lshift>
 80094ec:	ee08 0a10 	vmov	s16, r0
 80094f0:	9b05      	ldr	r3, [sp, #20]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	dd05      	ble.n	8009502 <_dtoa_r+0x82a>
 80094f6:	4631      	mov	r1, r6
 80094f8:	461a      	mov	r2, r3
 80094fa:	4620      	mov	r0, r4
 80094fc:	f000 fe18 	bl	800a130 <__lshift>
 8009500:	4606      	mov	r6, r0
 8009502:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009504:	2b00      	cmp	r3, #0
 8009506:	d06e      	beq.n	80095e6 <_dtoa_r+0x90e>
 8009508:	ee18 0a10 	vmov	r0, s16
 800950c:	4631      	mov	r1, r6
 800950e:	f000 fe7f 	bl	800a210 <__mcmp>
 8009512:	2800      	cmp	r0, #0
 8009514:	da67      	bge.n	80095e6 <_dtoa_r+0x90e>
 8009516:	9b00      	ldr	r3, [sp, #0]
 8009518:	3b01      	subs	r3, #1
 800951a:	ee18 1a10 	vmov	r1, s16
 800951e:	9300      	str	r3, [sp, #0]
 8009520:	220a      	movs	r2, #10
 8009522:	2300      	movs	r3, #0
 8009524:	4620      	mov	r0, r4
 8009526:	f000 fc53 	bl	8009dd0 <__multadd>
 800952a:	9b08      	ldr	r3, [sp, #32]
 800952c:	ee08 0a10 	vmov	s16, r0
 8009530:	2b00      	cmp	r3, #0
 8009532:	f000 81b1 	beq.w	8009898 <_dtoa_r+0xbc0>
 8009536:	2300      	movs	r3, #0
 8009538:	4639      	mov	r1, r7
 800953a:	220a      	movs	r2, #10
 800953c:	4620      	mov	r0, r4
 800953e:	f000 fc47 	bl	8009dd0 <__multadd>
 8009542:	9b02      	ldr	r3, [sp, #8]
 8009544:	2b00      	cmp	r3, #0
 8009546:	4607      	mov	r7, r0
 8009548:	f300 808e 	bgt.w	8009668 <_dtoa_r+0x990>
 800954c:	9b06      	ldr	r3, [sp, #24]
 800954e:	2b02      	cmp	r3, #2
 8009550:	dc51      	bgt.n	80095f6 <_dtoa_r+0x91e>
 8009552:	e089      	b.n	8009668 <_dtoa_r+0x990>
 8009554:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009556:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800955a:	e74b      	b.n	80093f4 <_dtoa_r+0x71c>
 800955c:	9b03      	ldr	r3, [sp, #12]
 800955e:	1e5e      	subs	r6, r3, #1
 8009560:	9b07      	ldr	r3, [sp, #28]
 8009562:	42b3      	cmp	r3, r6
 8009564:	bfbf      	itttt	lt
 8009566:	9b07      	ldrlt	r3, [sp, #28]
 8009568:	9607      	strlt	r6, [sp, #28]
 800956a:	1af2      	sublt	r2, r6, r3
 800956c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800956e:	bfb6      	itet	lt
 8009570:	189b      	addlt	r3, r3, r2
 8009572:	1b9e      	subge	r6, r3, r6
 8009574:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009576:	9b03      	ldr	r3, [sp, #12]
 8009578:	bfb8      	it	lt
 800957a:	2600      	movlt	r6, #0
 800957c:	2b00      	cmp	r3, #0
 800957e:	bfb7      	itett	lt
 8009580:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009584:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009588:	1a9d      	sublt	r5, r3, r2
 800958a:	2300      	movlt	r3, #0
 800958c:	e734      	b.n	80093f8 <_dtoa_r+0x720>
 800958e:	9e07      	ldr	r6, [sp, #28]
 8009590:	9d04      	ldr	r5, [sp, #16]
 8009592:	9f08      	ldr	r7, [sp, #32]
 8009594:	e73b      	b.n	800940e <_dtoa_r+0x736>
 8009596:	9a07      	ldr	r2, [sp, #28]
 8009598:	e767      	b.n	800946a <_dtoa_r+0x792>
 800959a:	9b06      	ldr	r3, [sp, #24]
 800959c:	2b01      	cmp	r3, #1
 800959e:	dc18      	bgt.n	80095d2 <_dtoa_r+0x8fa>
 80095a0:	f1ba 0f00 	cmp.w	sl, #0
 80095a4:	d115      	bne.n	80095d2 <_dtoa_r+0x8fa>
 80095a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80095aa:	b993      	cbnz	r3, 80095d2 <_dtoa_r+0x8fa>
 80095ac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80095b0:	0d1b      	lsrs	r3, r3, #20
 80095b2:	051b      	lsls	r3, r3, #20
 80095b4:	b183      	cbz	r3, 80095d8 <_dtoa_r+0x900>
 80095b6:	9b04      	ldr	r3, [sp, #16]
 80095b8:	3301      	adds	r3, #1
 80095ba:	9304      	str	r3, [sp, #16]
 80095bc:	9b05      	ldr	r3, [sp, #20]
 80095be:	3301      	adds	r3, #1
 80095c0:	9305      	str	r3, [sp, #20]
 80095c2:	f04f 0801 	mov.w	r8, #1
 80095c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	f47f af6a 	bne.w	80094a2 <_dtoa_r+0x7ca>
 80095ce:	2001      	movs	r0, #1
 80095d0:	e76f      	b.n	80094b2 <_dtoa_r+0x7da>
 80095d2:	f04f 0800 	mov.w	r8, #0
 80095d6:	e7f6      	b.n	80095c6 <_dtoa_r+0x8ee>
 80095d8:	4698      	mov	r8, r3
 80095da:	e7f4      	b.n	80095c6 <_dtoa_r+0x8ee>
 80095dc:	f43f af7d 	beq.w	80094da <_dtoa_r+0x802>
 80095e0:	4618      	mov	r0, r3
 80095e2:	301c      	adds	r0, #28
 80095e4:	e772      	b.n	80094cc <_dtoa_r+0x7f4>
 80095e6:	9b03      	ldr	r3, [sp, #12]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	dc37      	bgt.n	800965c <_dtoa_r+0x984>
 80095ec:	9b06      	ldr	r3, [sp, #24]
 80095ee:	2b02      	cmp	r3, #2
 80095f0:	dd34      	ble.n	800965c <_dtoa_r+0x984>
 80095f2:	9b03      	ldr	r3, [sp, #12]
 80095f4:	9302      	str	r3, [sp, #8]
 80095f6:	9b02      	ldr	r3, [sp, #8]
 80095f8:	b96b      	cbnz	r3, 8009616 <_dtoa_r+0x93e>
 80095fa:	4631      	mov	r1, r6
 80095fc:	2205      	movs	r2, #5
 80095fe:	4620      	mov	r0, r4
 8009600:	f000 fbe6 	bl	8009dd0 <__multadd>
 8009604:	4601      	mov	r1, r0
 8009606:	4606      	mov	r6, r0
 8009608:	ee18 0a10 	vmov	r0, s16
 800960c:	f000 fe00 	bl	800a210 <__mcmp>
 8009610:	2800      	cmp	r0, #0
 8009612:	f73f adbb 	bgt.w	800918c <_dtoa_r+0x4b4>
 8009616:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009618:	9d01      	ldr	r5, [sp, #4]
 800961a:	43db      	mvns	r3, r3
 800961c:	9300      	str	r3, [sp, #0]
 800961e:	f04f 0800 	mov.w	r8, #0
 8009622:	4631      	mov	r1, r6
 8009624:	4620      	mov	r0, r4
 8009626:	f000 fbb1 	bl	8009d8c <_Bfree>
 800962a:	2f00      	cmp	r7, #0
 800962c:	f43f aea4 	beq.w	8009378 <_dtoa_r+0x6a0>
 8009630:	f1b8 0f00 	cmp.w	r8, #0
 8009634:	d005      	beq.n	8009642 <_dtoa_r+0x96a>
 8009636:	45b8      	cmp	r8, r7
 8009638:	d003      	beq.n	8009642 <_dtoa_r+0x96a>
 800963a:	4641      	mov	r1, r8
 800963c:	4620      	mov	r0, r4
 800963e:	f000 fba5 	bl	8009d8c <_Bfree>
 8009642:	4639      	mov	r1, r7
 8009644:	4620      	mov	r0, r4
 8009646:	f000 fba1 	bl	8009d8c <_Bfree>
 800964a:	e695      	b.n	8009378 <_dtoa_r+0x6a0>
 800964c:	2600      	movs	r6, #0
 800964e:	4637      	mov	r7, r6
 8009650:	e7e1      	b.n	8009616 <_dtoa_r+0x93e>
 8009652:	9700      	str	r7, [sp, #0]
 8009654:	4637      	mov	r7, r6
 8009656:	e599      	b.n	800918c <_dtoa_r+0x4b4>
 8009658:	40240000 	.word	0x40240000
 800965c:	9b08      	ldr	r3, [sp, #32]
 800965e:	2b00      	cmp	r3, #0
 8009660:	f000 80ca 	beq.w	80097f8 <_dtoa_r+0xb20>
 8009664:	9b03      	ldr	r3, [sp, #12]
 8009666:	9302      	str	r3, [sp, #8]
 8009668:	2d00      	cmp	r5, #0
 800966a:	dd05      	ble.n	8009678 <_dtoa_r+0x9a0>
 800966c:	4639      	mov	r1, r7
 800966e:	462a      	mov	r2, r5
 8009670:	4620      	mov	r0, r4
 8009672:	f000 fd5d 	bl	800a130 <__lshift>
 8009676:	4607      	mov	r7, r0
 8009678:	f1b8 0f00 	cmp.w	r8, #0
 800967c:	d05b      	beq.n	8009736 <_dtoa_r+0xa5e>
 800967e:	6879      	ldr	r1, [r7, #4]
 8009680:	4620      	mov	r0, r4
 8009682:	f000 fb43 	bl	8009d0c <_Balloc>
 8009686:	4605      	mov	r5, r0
 8009688:	b928      	cbnz	r0, 8009696 <_dtoa_r+0x9be>
 800968a:	4b87      	ldr	r3, [pc, #540]	; (80098a8 <_dtoa_r+0xbd0>)
 800968c:	4602      	mov	r2, r0
 800968e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009692:	f7ff bb3b 	b.w	8008d0c <_dtoa_r+0x34>
 8009696:	693a      	ldr	r2, [r7, #16]
 8009698:	3202      	adds	r2, #2
 800969a:	0092      	lsls	r2, r2, #2
 800969c:	f107 010c 	add.w	r1, r7, #12
 80096a0:	300c      	adds	r0, #12
 80096a2:	f7fe fcbd 	bl	8008020 <memcpy>
 80096a6:	2201      	movs	r2, #1
 80096a8:	4629      	mov	r1, r5
 80096aa:	4620      	mov	r0, r4
 80096ac:	f000 fd40 	bl	800a130 <__lshift>
 80096b0:	9b01      	ldr	r3, [sp, #4]
 80096b2:	f103 0901 	add.w	r9, r3, #1
 80096b6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80096ba:	4413      	add	r3, r2
 80096bc:	9305      	str	r3, [sp, #20]
 80096be:	f00a 0301 	and.w	r3, sl, #1
 80096c2:	46b8      	mov	r8, r7
 80096c4:	9304      	str	r3, [sp, #16]
 80096c6:	4607      	mov	r7, r0
 80096c8:	4631      	mov	r1, r6
 80096ca:	ee18 0a10 	vmov	r0, s16
 80096ce:	f7ff fa75 	bl	8008bbc <quorem>
 80096d2:	4641      	mov	r1, r8
 80096d4:	9002      	str	r0, [sp, #8]
 80096d6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80096da:	ee18 0a10 	vmov	r0, s16
 80096de:	f000 fd97 	bl	800a210 <__mcmp>
 80096e2:	463a      	mov	r2, r7
 80096e4:	9003      	str	r0, [sp, #12]
 80096e6:	4631      	mov	r1, r6
 80096e8:	4620      	mov	r0, r4
 80096ea:	f000 fdad 	bl	800a248 <__mdiff>
 80096ee:	68c2      	ldr	r2, [r0, #12]
 80096f0:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 80096f4:	4605      	mov	r5, r0
 80096f6:	bb02      	cbnz	r2, 800973a <_dtoa_r+0xa62>
 80096f8:	4601      	mov	r1, r0
 80096fa:	ee18 0a10 	vmov	r0, s16
 80096fe:	f000 fd87 	bl	800a210 <__mcmp>
 8009702:	4602      	mov	r2, r0
 8009704:	4629      	mov	r1, r5
 8009706:	4620      	mov	r0, r4
 8009708:	9207      	str	r2, [sp, #28]
 800970a:	f000 fb3f 	bl	8009d8c <_Bfree>
 800970e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009712:	ea43 0102 	orr.w	r1, r3, r2
 8009716:	9b04      	ldr	r3, [sp, #16]
 8009718:	430b      	orrs	r3, r1
 800971a:	464d      	mov	r5, r9
 800971c:	d10f      	bne.n	800973e <_dtoa_r+0xa66>
 800971e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009722:	d02a      	beq.n	800977a <_dtoa_r+0xaa2>
 8009724:	9b03      	ldr	r3, [sp, #12]
 8009726:	2b00      	cmp	r3, #0
 8009728:	dd02      	ble.n	8009730 <_dtoa_r+0xa58>
 800972a:	9b02      	ldr	r3, [sp, #8]
 800972c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009730:	f88b a000 	strb.w	sl, [fp]
 8009734:	e775      	b.n	8009622 <_dtoa_r+0x94a>
 8009736:	4638      	mov	r0, r7
 8009738:	e7ba      	b.n	80096b0 <_dtoa_r+0x9d8>
 800973a:	2201      	movs	r2, #1
 800973c:	e7e2      	b.n	8009704 <_dtoa_r+0xa2c>
 800973e:	9b03      	ldr	r3, [sp, #12]
 8009740:	2b00      	cmp	r3, #0
 8009742:	db04      	blt.n	800974e <_dtoa_r+0xa76>
 8009744:	9906      	ldr	r1, [sp, #24]
 8009746:	430b      	orrs	r3, r1
 8009748:	9904      	ldr	r1, [sp, #16]
 800974a:	430b      	orrs	r3, r1
 800974c:	d122      	bne.n	8009794 <_dtoa_r+0xabc>
 800974e:	2a00      	cmp	r2, #0
 8009750:	ddee      	ble.n	8009730 <_dtoa_r+0xa58>
 8009752:	ee18 1a10 	vmov	r1, s16
 8009756:	2201      	movs	r2, #1
 8009758:	4620      	mov	r0, r4
 800975a:	f000 fce9 	bl	800a130 <__lshift>
 800975e:	4631      	mov	r1, r6
 8009760:	ee08 0a10 	vmov	s16, r0
 8009764:	f000 fd54 	bl	800a210 <__mcmp>
 8009768:	2800      	cmp	r0, #0
 800976a:	dc03      	bgt.n	8009774 <_dtoa_r+0xa9c>
 800976c:	d1e0      	bne.n	8009730 <_dtoa_r+0xa58>
 800976e:	f01a 0f01 	tst.w	sl, #1
 8009772:	d0dd      	beq.n	8009730 <_dtoa_r+0xa58>
 8009774:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009778:	d1d7      	bne.n	800972a <_dtoa_r+0xa52>
 800977a:	2339      	movs	r3, #57	; 0x39
 800977c:	f88b 3000 	strb.w	r3, [fp]
 8009780:	462b      	mov	r3, r5
 8009782:	461d      	mov	r5, r3
 8009784:	3b01      	subs	r3, #1
 8009786:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800978a:	2a39      	cmp	r2, #57	; 0x39
 800978c:	d071      	beq.n	8009872 <_dtoa_r+0xb9a>
 800978e:	3201      	adds	r2, #1
 8009790:	701a      	strb	r2, [r3, #0]
 8009792:	e746      	b.n	8009622 <_dtoa_r+0x94a>
 8009794:	2a00      	cmp	r2, #0
 8009796:	dd07      	ble.n	80097a8 <_dtoa_r+0xad0>
 8009798:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800979c:	d0ed      	beq.n	800977a <_dtoa_r+0xaa2>
 800979e:	f10a 0301 	add.w	r3, sl, #1
 80097a2:	f88b 3000 	strb.w	r3, [fp]
 80097a6:	e73c      	b.n	8009622 <_dtoa_r+0x94a>
 80097a8:	9b05      	ldr	r3, [sp, #20]
 80097aa:	f809 ac01 	strb.w	sl, [r9, #-1]
 80097ae:	4599      	cmp	r9, r3
 80097b0:	d047      	beq.n	8009842 <_dtoa_r+0xb6a>
 80097b2:	ee18 1a10 	vmov	r1, s16
 80097b6:	2300      	movs	r3, #0
 80097b8:	220a      	movs	r2, #10
 80097ba:	4620      	mov	r0, r4
 80097bc:	f000 fb08 	bl	8009dd0 <__multadd>
 80097c0:	45b8      	cmp	r8, r7
 80097c2:	ee08 0a10 	vmov	s16, r0
 80097c6:	f04f 0300 	mov.w	r3, #0
 80097ca:	f04f 020a 	mov.w	r2, #10
 80097ce:	4641      	mov	r1, r8
 80097d0:	4620      	mov	r0, r4
 80097d2:	d106      	bne.n	80097e2 <_dtoa_r+0xb0a>
 80097d4:	f000 fafc 	bl	8009dd0 <__multadd>
 80097d8:	4680      	mov	r8, r0
 80097da:	4607      	mov	r7, r0
 80097dc:	f109 0901 	add.w	r9, r9, #1
 80097e0:	e772      	b.n	80096c8 <_dtoa_r+0x9f0>
 80097e2:	f000 faf5 	bl	8009dd0 <__multadd>
 80097e6:	4639      	mov	r1, r7
 80097e8:	4680      	mov	r8, r0
 80097ea:	2300      	movs	r3, #0
 80097ec:	220a      	movs	r2, #10
 80097ee:	4620      	mov	r0, r4
 80097f0:	f000 faee 	bl	8009dd0 <__multadd>
 80097f4:	4607      	mov	r7, r0
 80097f6:	e7f1      	b.n	80097dc <_dtoa_r+0xb04>
 80097f8:	9b03      	ldr	r3, [sp, #12]
 80097fa:	9302      	str	r3, [sp, #8]
 80097fc:	9d01      	ldr	r5, [sp, #4]
 80097fe:	ee18 0a10 	vmov	r0, s16
 8009802:	4631      	mov	r1, r6
 8009804:	f7ff f9da 	bl	8008bbc <quorem>
 8009808:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800980c:	9b01      	ldr	r3, [sp, #4]
 800980e:	f805 ab01 	strb.w	sl, [r5], #1
 8009812:	1aea      	subs	r2, r5, r3
 8009814:	9b02      	ldr	r3, [sp, #8]
 8009816:	4293      	cmp	r3, r2
 8009818:	dd09      	ble.n	800982e <_dtoa_r+0xb56>
 800981a:	ee18 1a10 	vmov	r1, s16
 800981e:	2300      	movs	r3, #0
 8009820:	220a      	movs	r2, #10
 8009822:	4620      	mov	r0, r4
 8009824:	f000 fad4 	bl	8009dd0 <__multadd>
 8009828:	ee08 0a10 	vmov	s16, r0
 800982c:	e7e7      	b.n	80097fe <_dtoa_r+0xb26>
 800982e:	9b02      	ldr	r3, [sp, #8]
 8009830:	2b00      	cmp	r3, #0
 8009832:	bfc8      	it	gt
 8009834:	461d      	movgt	r5, r3
 8009836:	9b01      	ldr	r3, [sp, #4]
 8009838:	bfd8      	it	le
 800983a:	2501      	movle	r5, #1
 800983c:	441d      	add	r5, r3
 800983e:	f04f 0800 	mov.w	r8, #0
 8009842:	ee18 1a10 	vmov	r1, s16
 8009846:	2201      	movs	r2, #1
 8009848:	4620      	mov	r0, r4
 800984a:	f000 fc71 	bl	800a130 <__lshift>
 800984e:	4631      	mov	r1, r6
 8009850:	ee08 0a10 	vmov	s16, r0
 8009854:	f000 fcdc 	bl	800a210 <__mcmp>
 8009858:	2800      	cmp	r0, #0
 800985a:	dc91      	bgt.n	8009780 <_dtoa_r+0xaa8>
 800985c:	d102      	bne.n	8009864 <_dtoa_r+0xb8c>
 800985e:	f01a 0f01 	tst.w	sl, #1
 8009862:	d18d      	bne.n	8009780 <_dtoa_r+0xaa8>
 8009864:	462b      	mov	r3, r5
 8009866:	461d      	mov	r5, r3
 8009868:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800986c:	2a30      	cmp	r2, #48	; 0x30
 800986e:	d0fa      	beq.n	8009866 <_dtoa_r+0xb8e>
 8009870:	e6d7      	b.n	8009622 <_dtoa_r+0x94a>
 8009872:	9a01      	ldr	r2, [sp, #4]
 8009874:	429a      	cmp	r2, r3
 8009876:	d184      	bne.n	8009782 <_dtoa_r+0xaaa>
 8009878:	9b00      	ldr	r3, [sp, #0]
 800987a:	3301      	adds	r3, #1
 800987c:	9300      	str	r3, [sp, #0]
 800987e:	2331      	movs	r3, #49	; 0x31
 8009880:	7013      	strb	r3, [r2, #0]
 8009882:	e6ce      	b.n	8009622 <_dtoa_r+0x94a>
 8009884:	4b09      	ldr	r3, [pc, #36]	; (80098ac <_dtoa_r+0xbd4>)
 8009886:	f7ff ba95 	b.w	8008db4 <_dtoa_r+0xdc>
 800988a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800988c:	2b00      	cmp	r3, #0
 800988e:	f47f aa6e 	bne.w	8008d6e <_dtoa_r+0x96>
 8009892:	4b07      	ldr	r3, [pc, #28]	; (80098b0 <_dtoa_r+0xbd8>)
 8009894:	f7ff ba8e 	b.w	8008db4 <_dtoa_r+0xdc>
 8009898:	9b02      	ldr	r3, [sp, #8]
 800989a:	2b00      	cmp	r3, #0
 800989c:	dcae      	bgt.n	80097fc <_dtoa_r+0xb24>
 800989e:	9b06      	ldr	r3, [sp, #24]
 80098a0:	2b02      	cmp	r3, #2
 80098a2:	f73f aea8 	bgt.w	80095f6 <_dtoa_r+0x91e>
 80098a6:	e7a9      	b.n	80097fc <_dtoa_r+0xb24>
 80098a8:	0800b7eb 	.word	0x0800b7eb
 80098ac:	0800b748 	.word	0x0800b748
 80098b0:	0800b76c 	.word	0x0800b76c

080098b4 <__sflush_r>:
 80098b4:	898a      	ldrh	r2, [r1, #12]
 80098b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098ba:	4605      	mov	r5, r0
 80098bc:	0710      	lsls	r0, r2, #28
 80098be:	460c      	mov	r4, r1
 80098c0:	d458      	bmi.n	8009974 <__sflush_r+0xc0>
 80098c2:	684b      	ldr	r3, [r1, #4]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	dc05      	bgt.n	80098d4 <__sflush_r+0x20>
 80098c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	dc02      	bgt.n	80098d4 <__sflush_r+0x20>
 80098ce:	2000      	movs	r0, #0
 80098d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80098d6:	2e00      	cmp	r6, #0
 80098d8:	d0f9      	beq.n	80098ce <__sflush_r+0x1a>
 80098da:	2300      	movs	r3, #0
 80098dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80098e0:	682f      	ldr	r7, [r5, #0]
 80098e2:	602b      	str	r3, [r5, #0]
 80098e4:	d032      	beq.n	800994c <__sflush_r+0x98>
 80098e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80098e8:	89a3      	ldrh	r3, [r4, #12]
 80098ea:	075a      	lsls	r2, r3, #29
 80098ec:	d505      	bpl.n	80098fa <__sflush_r+0x46>
 80098ee:	6863      	ldr	r3, [r4, #4]
 80098f0:	1ac0      	subs	r0, r0, r3
 80098f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80098f4:	b10b      	cbz	r3, 80098fa <__sflush_r+0x46>
 80098f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80098f8:	1ac0      	subs	r0, r0, r3
 80098fa:	2300      	movs	r3, #0
 80098fc:	4602      	mov	r2, r0
 80098fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009900:	6a21      	ldr	r1, [r4, #32]
 8009902:	4628      	mov	r0, r5
 8009904:	47b0      	blx	r6
 8009906:	1c43      	adds	r3, r0, #1
 8009908:	89a3      	ldrh	r3, [r4, #12]
 800990a:	d106      	bne.n	800991a <__sflush_r+0x66>
 800990c:	6829      	ldr	r1, [r5, #0]
 800990e:	291d      	cmp	r1, #29
 8009910:	d82c      	bhi.n	800996c <__sflush_r+0xb8>
 8009912:	4a2a      	ldr	r2, [pc, #168]	; (80099bc <__sflush_r+0x108>)
 8009914:	40ca      	lsrs	r2, r1
 8009916:	07d6      	lsls	r6, r2, #31
 8009918:	d528      	bpl.n	800996c <__sflush_r+0xb8>
 800991a:	2200      	movs	r2, #0
 800991c:	6062      	str	r2, [r4, #4]
 800991e:	04d9      	lsls	r1, r3, #19
 8009920:	6922      	ldr	r2, [r4, #16]
 8009922:	6022      	str	r2, [r4, #0]
 8009924:	d504      	bpl.n	8009930 <__sflush_r+0x7c>
 8009926:	1c42      	adds	r2, r0, #1
 8009928:	d101      	bne.n	800992e <__sflush_r+0x7a>
 800992a:	682b      	ldr	r3, [r5, #0]
 800992c:	b903      	cbnz	r3, 8009930 <__sflush_r+0x7c>
 800992e:	6560      	str	r0, [r4, #84]	; 0x54
 8009930:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009932:	602f      	str	r7, [r5, #0]
 8009934:	2900      	cmp	r1, #0
 8009936:	d0ca      	beq.n	80098ce <__sflush_r+0x1a>
 8009938:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800993c:	4299      	cmp	r1, r3
 800993e:	d002      	beq.n	8009946 <__sflush_r+0x92>
 8009940:	4628      	mov	r0, r5
 8009942:	f000 fd7d 	bl	800a440 <_free_r>
 8009946:	2000      	movs	r0, #0
 8009948:	6360      	str	r0, [r4, #52]	; 0x34
 800994a:	e7c1      	b.n	80098d0 <__sflush_r+0x1c>
 800994c:	6a21      	ldr	r1, [r4, #32]
 800994e:	2301      	movs	r3, #1
 8009950:	4628      	mov	r0, r5
 8009952:	47b0      	blx	r6
 8009954:	1c41      	adds	r1, r0, #1
 8009956:	d1c7      	bne.n	80098e8 <__sflush_r+0x34>
 8009958:	682b      	ldr	r3, [r5, #0]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d0c4      	beq.n	80098e8 <__sflush_r+0x34>
 800995e:	2b1d      	cmp	r3, #29
 8009960:	d001      	beq.n	8009966 <__sflush_r+0xb2>
 8009962:	2b16      	cmp	r3, #22
 8009964:	d101      	bne.n	800996a <__sflush_r+0xb6>
 8009966:	602f      	str	r7, [r5, #0]
 8009968:	e7b1      	b.n	80098ce <__sflush_r+0x1a>
 800996a:	89a3      	ldrh	r3, [r4, #12]
 800996c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009970:	81a3      	strh	r3, [r4, #12]
 8009972:	e7ad      	b.n	80098d0 <__sflush_r+0x1c>
 8009974:	690f      	ldr	r7, [r1, #16]
 8009976:	2f00      	cmp	r7, #0
 8009978:	d0a9      	beq.n	80098ce <__sflush_r+0x1a>
 800997a:	0793      	lsls	r3, r2, #30
 800997c:	680e      	ldr	r6, [r1, #0]
 800997e:	bf08      	it	eq
 8009980:	694b      	ldreq	r3, [r1, #20]
 8009982:	600f      	str	r7, [r1, #0]
 8009984:	bf18      	it	ne
 8009986:	2300      	movne	r3, #0
 8009988:	eba6 0807 	sub.w	r8, r6, r7
 800998c:	608b      	str	r3, [r1, #8]
 800998e:	f1b8 0f00 	cmp.w	r8, #0
 8009992:	dd9c      	ble.n	80098ce <__sflush_r+0x1a>
 8009994:	6a21      	ldr	r1, [r4, #32]
 8009996:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009998:	4643      	mov	r3, r8
 800999a:	463a      	mov	r2, r7
 800999c:	4628      	mov	r0, r5
 800999e:	47b0      	blx	r6
 80099a0:	2800      	cmp	r0, #0
 80099a2:	dc06      	bgt.n	80099b2 <__sflush_r+0xfe>
 80099a4:	89a3      	ldrh	r3, [r4, #12]
 80099a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099aa:	81a3      	strh	r3, [r4, #12]
 80099ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80099b0:	e78e      	b.n	80098d0 <__sflush_r+0x1c>
 80099b2:	4407      	add	r7, r0
 80099b4:	eba8 0800 	sub.w	r8, r8, r0
 80099b8:	e7e9      	b.n	800998e <__sflush_r+0xda>
 80099ba:	bf00      	nop
 80099bc:	20400001 	.word	0x20400001

080099c0 <_fflush_r>:
 80099c0:	b538      	push	{r3, r4, r5, lr}
 80099c2:	690b      	ldr	r3, [r1, #16]
 80099c4:	4605      	mov	r5, r0
 80099c6:	460c      	mov	r4, r1
 80099c8:	b913      	cbnz	r3, 80099d0 <_fflush_r+0x10>
 80099ca:	2500      	movs	r5, #0
 80099cc:	4628      	mov	r0, r5
 80099ce:	bd38      	pop	{r3, r4, r5, pc}
 80099d0:	b118      	cbz	r0, 80099da <_fflush_r+0x1a>
 80099d2:	6983      	ldr	r3, [r0, #24]
 80099d4:	b90b      	cbnz	r3, 80099da <_fflush_r+0x1a>
 80099d6:	f000 f887 	bl	8009ae8 <__sinit>
 80099da:	4b14      	ldr	r3, [pc, #80]	; (8009a2c <_fflush_r+0x6c>)
 80099dc:	429c      	cmp	r4, r3
 80099de:	d11b      	bne.n	8009a18 <_fflush_r+0x58>
 80099e0:	686c      	ldr	r4, [r5, #4]
 80099e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d0ef      	beq.n	80099ca <_fflush_r+0xa>
 80099ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80099ec:	07d0      	lsls	r0, r2, #31
 80099ee:	d404      	bmi.n	80099fa <_fflush_r+0x3a>
 80099f0:	0599      	lsls	r1, r3, #22
 80099f2:	d402      	bmi.n	80099fa <_fflush_r+0x3a>
 80099f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099f6:	f000 f91a 	bl	8009c2e <__retarget_lock_acquire_recursive>
 80099fa:	4628      	mov	r0, r5
 80099fc:	4621      	mov	r1, r4
 80099fe:	f7ff ff59 	bl	80098b4 <__sflush_r>
 8009a02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a04:	07da      	lsls	r2, r3, #31
 8009a06:	4605      	mov	r5, r0
 8009a08:	d4e0      	bmi.n	80099cc <_fflush_r+0xc>
 8009a0a:	89a3      	ldrh	r3, [r4, #12]
 8009a0c:	059b      	lsls	r3, r3, #22
 8009a0e:	d4dd      	bmi.n	80099cc <_fflush_r+0xc>
 8009a10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a12:	f000 f90d 	bl	8009c30 <__retarget_lock_release_recursive>
 8009a16:	e7d9      	b.n	80099cc <_fflush_r+0xc>
 8009a18:	4b05      	ldr	r3, [pc, #20]	; (8009a30 <_fflush_r+0x70>)
 8009a1a:	429c      	cmp	r4, r3
 8009a1c:	d101      	bne.n	8009a22 <_fflush_r+0x62>
 8009a1e:	68ac      	ldr	r4, [r5, #8]
 8009a20:	e7df      	b.n	80099e2 <_fflush_r+0x22>
 8009a22:	4b04      	ldr	r3, [pc, #16]	; (8009a34 <_fflush_r+0x74>)
 8009a24:	429c      	cmp	r4, r3
 8009a26:	bf08      	it	eq
 8009a28:	68ec      	ldreq	r4, [r5, #12]
 8009a2a:	e7da      	b.n	80099e2 <_fflush_r+0x22>
 8009a2c:	0800b81c 	.word	0x0800b81c
 8009a30:	0800b83c 	.word	0x0800b83c
 8009a34:	0800b7fc 	.word	0x0800b7fc

08009a38 <std>:
 8009a38:	2300      	movs	r3, #0
 8009a3a:	b510      	push	{r4, lr}
 8009a3c:	4604      	mov	r4, r0
 8009a3e:	e9c0 3300 	strd	r3, r3, [r0]
 8009a42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009a46:	6083      	str	r3, [r0, #8]
 8009a48:	8181      	strh	r1, [r0, #12]
 8009a4a:	6643      	str	r3, [r0, #100]	; 0x64
 8009a4c:	81c2      	strh	r2, [r0, #14]
 8009a4e:	6183      	str	r3, [r0, #24]
 8009a50:	4619      	mov	r1, r3
 8009a52:	2208      	movs	r2, #8
 8009a54:	305c      	adds	r0, #92	; 0x5c
 8009a56:	f7fe faf1 	bl	800803c <memset>
 8009a5a:	4b05      	ldr	r3, [pc, #20]	; (8009a70 <std+0x38>)
 8009a5c:	6263      	str	r3, [r4, #36]	; 0x24
 8009a5e:	4b05      	ldr	r3, [pc, #20]	; (8009a74 <std+0x3c>)
 8009a60:	62a3      	str	r3, [r4, #40]	; 0x28
 8009a62:	4b05      	ldr	r3, [pc, #20]	; (8009a78 <std+0x40>)
 8009a64:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009a66:	4b05      	ldr	r3, [pc, #20]	; (8009a7c <std+0x44>)
 8009a68:	6224      	str	r4, [r4, #32]
 8009a6a:	6323      	str	r3, [r4, #48]	; 0x30
 8009a6c:	bd10      	pop	{r4, pc}
 8009a6e:	bf00      	nop
 8009a70:	0800a8d5 	.word	0x0800a8d5
 8009a74:	0800a8f7 	.word	0x0800a8f7
 8009a78:	0800a92f 	.word	0x0800a92f
 8009a7c:	0800a953 	.word	0x0800a953

08009a80 <_cleanup_r>:
 8009a80:	4901      	ldr	r1, [pc, #4]	; (8009a88 <_cleanup_r+0x8>)
 8009a82:	f000 b8af 	b.w	8009be4 <_fwalk_reent>
 8009a86:	bf00      	nop
 8009a88:	080099c1 	.word	0x080099c1

08009a8c <__sfmoreglue>:
 8009a8c:	b570      	push	{r4, r5, r6, lr}
 8009a8e:	2268      	movs	r2, #104	; 0x68
 8009a90:	1e4d      	subs	r5, r1, #1
 8009a92:	4355      	muls	r5, r2
 8009a94:	460e      	mov	r6, r1
 8009a96:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009a9a:	f000 fd3d 	bl	800a518 <_malloc_r>
 8009a9e:	4604      	mov	r4, r0
 8009aa0:	b140      	cbz	r0, 8009ab4 <__sfmoreglue+0x28>
 8009aa2:	2100      	movs	r1, #0
 8009aa4:	e9c0 1600 	strd	r1, r6, [r0]
 8009aa8:	300c      	adds	r0, #12
 8009aaa:	60a0      	str	r0, [r4, #8]
 8009aac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009ab0:	f7fe fac4 	bl	800803c <memset>
 8009ab4:	4620      	mov	r0, r4
 8009ab6:	bd70      	pop	{r4, r5, r6, pc}

08009ab8 <__sfp_lock_acquire>:
 8009ab8:	4801      	ldr	r0, [pc, #4]	; (8009ac0 <__sfp_lock_acquire+0x8>)
 8009aba:	f000 b8b8 	b.w	8009c2e <__retarget_lock_acquire_recursive>
 8009abe:	bf00      	nop
 8009ac0:	20004d21 	.word	0x20004d21

08009ac4 <__sfp_lock_release>:
 8009ac4:	4801      	ldr	r0, [pc, #4]	; (8009acc <__sfp_lock_release+0x8>)
 8009ac6:	f000 b8b3 	b.w	8009c30 <__retarget_lock_release_recursive>
 8009aca:	bf00      	nop
 8009acc:	20004d21 	.word	0x20004d21

08009ad0 <__sinit_lock_acquire>:
 8009ad0:	4801      	ldr	r0, [pc, #4]	; (8009ad8 <__sinit_lock_acquire+0x8>)
 8009ad2:	f000 b8ac 	b.w	8009c2e <__retarget_lock_acquire_recursive>
 8009ad6:	bf00      	nop
 8009ad8:	20004d22 	.word	0x20004d22

08009adc <__sinit_lock_release>:
 8009adc:	4801      	ldr	r0, [pc, #4]	; (8009ae4 <__sinit_lock_release+0x8>)
 8009ade:	f000 b8a7 	b.w	8009c30 <__retarget_lock_release_recursive>
 8009ae2:	bf00      	nop
 8009ae4:	20004d22 	.word	0x20004d22

08009ae8 <__sinit>:
 8009ae8:	b510      	push	{r4, lr}
 8009aea:	4604      	mov	r4, r0
 8009aec:	f7ff fff0 	bl	8009ad0 <__sinit_lock_acquire>
 8009af0:	69a3      	ldr	r3, [r4, #24]
 8009af2:	b11b      	cbz	r3, 8009afc <__sinit+0x14>
 8009af4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009af8:	f7ff bff0 	b.w	8009adc <__sinit_lock_release>
 8009afc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009b00:	6523      	str	r3, [r4, #80]	; 0x50
 8009b02:	4b13      	ldr	r3, [pc, #76]	; (8009b50 <__sinit+0x68>)
 8009b04:	4a13      	ldr	r2, [pc, #76]	; (8009b54 <__sinit+0x6c>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	62a2      	str	r2, [r4, #40]	; 0x28
 8009b0a:	42a3      	cmp	r3, r4
 8009b0c:	bf04      	itt	eq
 8009b0e:	2301      	moveq	r3, #1
 8009b10:	61a3      	streq	r3, [r4, #24]
 8009b12:	4620      	mov	r0, r4
 8009b14:	f000 f820 	bl	8009b58 <__sfp>
 8009b18:	6060      	str	r0, [r4, #4]
 8009b1a:	4620      	mov	r0, r4
 8009b1c:	f000 f81c 	bl	8009b58 <__sfp>
 8009b20:	60a0      	str	r0, [r4, #8]
 8009b22:	4620      	mov	r0, r4
 8009b24:	f000 f818 	bl	8009b58 <__sfp>
 8009b28:	2200      	movs	r2, #0
 8009b2a:	60e0      	str	r0, [r4, #12]
 8009b2c:	2104      	movs	r1, #4
 8009b2e:	6860      	ldr	r0, [r4, #4]
 8009b30:	f7ff ff82 	bl	8009a38 <std>
 8009b34:	68a0      	ldr	r0, [r4, #8]
 8009b36:	2201      	movs	r2, #1
 8009b38:	2109      	movs	r1, #9
 8009b3a:	f7ff ff7d 	bl	8009a38 <std>
 8009b3e:	68e0      	ldr	r0, [r4, #12]
 8009b40:	2202      	movs	r2, #2
 8009b42:	2112      	movs	r1, #18
 8009b44:	f7ff ff78 	bl	8009a38 <std>
 8009b48:	2301      	movs	r3, #1
 8009b4a:	61a3      	str	r3, [r4, #24]
 8009b4c:	e7d2      	b.n	8009af4 <__sinit+0xc>
 8009b4e:	bf00      	nop
 8009b50:	0800b734 	.word	0x0800b734
 8009b54:	08009a81 	.word	0x08009a81

08009b58 <__sfp>:
 8009b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b5a:	4607      	mov	r7, r0
 8009b5c:	f7ff ffac 	bl	8009ab8 <__sfp_lock_acquire>
 8009b60:	4b1e      	ldr	r3, [pc, #120]	; (8009bdc <__sfp+0x84>)
 8009b62:	681e      	ldr	r6, [r3, #0]
 8009b64:	69b3      	ldr	r3, [r6, #24]
 8009b66:	b913      	cbnz	r3, 8009b6e <__sfp+0x16>
 8009b68:	4630      	mov	r0, r6
 8009b6a:	f7ff ffbd 	bl	8009ae8 <__sinit>
 8009b6e:	3648      	adds	r6, #72	; 0x48
 8009b70:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009b74:	3b01      	subs	r3, #1
 8009b76:	d503      	bpl.n	8009b80 <__sfp+0x28>
 8009b78:	6833      	ldr	r3, [r6, #0]
 8009b7a:	b30b      	cbz	r3, 8009bc0 <__sfp+0x68>
 8009b7c:	6836      	ldr	r6, [r6, #0]
 8009b7e:	e7f7      	b.n	8009b70 <__sfp+0x18>
 8009b80:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009b84:	b9d5      	cbnz	r5, 8009bbc <__sfp+0x64>
 8009b86:	4b16      	ldr	r3, [pc, #88]	; (8009be0 <__sfp+0x88>)
 8009b88:	60e3      	str	r3, [r4, #12]
 8009b8a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009b8e:	6665      	str	r5, [r4, #100]	; 0x64
 8009b90:	f000 f84c 	bl	8009c2c <__retarget_lock_init_recursive>
 8009b94:	f7ff ff96 	bl	8009ac4 <__sfp_lock_release>
 8009b98:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009b9c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009ba0:	6025      	str	r5, [r4, #0]
 8009ba2:	61a5      	str	r5, [r4, #24]
 8009ba4:	2208      	movs	r2, #8
 8009ba6:	4629      	mov	r1, r5
 8009ba8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009bac:	f7fe fa46 	bl	800803c <memset>
 8009bb0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009bb4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009bb8:	4620      	mov	r0, r4
 8009bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bbc:	3468      	adds	r4, #104	; 0x68
 8009bbe:	e7d9      	b.n	8009b74 <__sfp+0x1c>
 8009bc0:	2104      	movs	r1, #4
 8009bc2:	4638      	mov	r0, r7
 8009bc4:	f7ff ff62 	bl	8009a8c <__sfmoreglue>
 8009bc8:	4604      	mov	r4, r0
 8009bca:	6030      	str	r0, [r6, #0]
 8009bcc:	2800      	cmp	r0, #0
 8009bce:	d1d5      	bne.n	8009b7c <__sfp+0x24>
 8009bd0:	f7ff ff78 	bl	8009ac4 <__sfp_lock_release>
 8009bd4:	230c      	movs	r3, #12
 8009bd6:	603b      	str	r3, [r7, #0]
 8009bd8:	e7ee      	b.n	8009bb8 <__sfp+0x60>
 8009bda:	bf00      	nop
 8009bdc:	0800b734 	.word	0x0800b734
 8009be0:	ffff0001 	.word	0xffff0001

08009be4 <_fwalk_reent>:
 8009be4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009be8:	4606      	mov	r6, r0
 8009bea:	4688      	mov	r8, r1
 8009bec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009bf0:	2700      	movs	r7, #0
 8009bf2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009bf6:	f1b9 0901 	subs.w	r9, r9, #1
 8009bfa:	d505      	bpl.n	8009c08 <_fwalk_reent+0x24>
 8009bfc:	6824      	ldr	r4, [r4, #0]
 8009bfe:	2c00      	cmp	r4, #0
 8009c00:	d1f7      	bne.n	8009bf2 <_fwalk_reent+0xe>
 8009c02:	4638      	mov	r0, r7
 8009c04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c08:	89ab      	ldrh	r3, [r5, #12]
 8009c0a:	2b01      	cmp	r3, #1
 8009c0c:	d907      	bls.n	8009c1e <_fwalk_reent+0x3a>
 8009c0e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009c12:	3301      	adds	r3, #1
 8009c14:	d003      	beq.n	8009c1e <_fwalk_reent+0x3a>
 8009c16:	4629      	mov	r1, r5
 8009c18:	4630      	mov	r0, r6
 8009c1a:	47c0      	blx	r8
 8009c1c:	4307      	orrs	r7, r0
 8009c1e:	3568      	adds	r5, #104	; 0x68
 8009c20:	e7e9      	b.n	8009bf6 <_fwalk_reent+0x12>
	...

08009c24 <_localeconv_r>:
 8009c24:	4800      	ldr	r0, [pc, #0]	; (8009c28 <_localeconv_r+0x4>)
 8009c26:	4770      	bx	lr
 8009c28:	20000174 	.word	0x20000174

08009c2c <__retarget_lock_init_recursive>:
 8009c2c:	4770      	bx	lr

08009c2e <__retarget_lock_acquire_recursive>:
 8009c2e:	4770      	bx	lr

08009c30 <__retarget_lock_release_recursive>:
 8009c30:	4770      	bx	lr

08009c32 <__swhatbuf_r>:
 8009c32:	b570      	push	{r4, r5, r6, lr}
 8009c34:	460e      	mov	r6, r1
 8009c36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c3a:	2900      	cmp	r1, #0
 8009c3c:	b096      	sub	sp, #88	; 0x58
 8009c3e:	4614      	mov	r4, r2
 8009c40:	461d      	mov	r5, r3
 8009c42:	da08      	bge.n	8009c56 <__swhatbuf_r+0x24>
 8009c44:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009c48:	2200      	movs	r2, #0
 8009c4a:	602a      	str	r2, [r5, #0]
 8009c4c:	061a      	lsls	r2, r3, #24
 8009c4e:	d410      	bmi.n	8009c72 <__swhatbuf_r+0x40>
 8009c50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c54:	e00e      	b.n	8009c74 <__swhatbuf_r+0x42>
 8009c56:	466a      	mov	r2, sp
 8009c58:	f000 fed2 	bl	800aa00 <_fstat_r>
 8009c5c:	2800      	cmp	r0, #0
 8009c5e:	dbf1      	blt.n	8009c44 <__swhatbuf_r+0x12>
 8009c60:	9a01      	ldr	r2, [sp, #4]
 8009c62:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009c66:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009c6a:	425a      	negs	r2, r3
 8009c6c:	415a      	adcs	r2, r3
 8009c6e:	602a      	str	r2, [r5, #0]
 8009c70:	e7ee      	b.n	8009c50 <__swhatbuf_r+0x1e>
 8009c72:	2340      	movs	r3, #64	; 0x40
 8009c74:	2000      	movs	r0, #0
 8009c76:	6023      	str	r3, [r4, #0]
 8009c78:	b016      	add	sp, #88	; 0x58
 8009c7a:	bd70      	pop	{r4, r5, r6, pc}

08009c7c <__smakebuf_r>:
 8009c7c:	898b      	ldrh	r3, [r1, #12]
 8009c7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009c80:	079d      	lsls	r5, r3, #30
 8009c82:	4606      	mov	r6, r0
 8009c84:	460c      	mov	r4, r1
 8009c86:	d507      	bpl.n	8009c98 <__smakebuf_r+0x1c>
 8009c88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009c8c:	6023      	str	r3, [r4, #0]
 8009c8e:	6123      	str	r3, [r4, #16]
 8009c90:	2301      	movs	r3, #1
 8009c92:	6163      	str	r3, [r4, #20]
 8009c94:	b002      	add	sp, #8
 8009c96:	bd70      	pop	{r4, r5, r6, pc}
 8009c98:	ab01      	add	r3, sp, #4
 8009c9a:	466a      	mov	r2, sp
 8009c9c:	f7ff ffc9 	bl	8009c32 <__swhatbuf_r>
 8009ca0:	9900      	ldr	r1, [sp, #0]
 8009ca2:	4605      	mov	r5, r0
 8009ca4:	4630      	mov	r0, r6
 8009ca6:	f000 fc37 	bl	800a518 <_malloc_r>
 8009caa:	b948      	cbnz	r0, 8009cc0 <__smakebuf_r+0x44>
 8009cac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cb0:	059a      	lsls	r2, r3, #22
 8009cb2:	d4ef      	bmi.n	8009c94 <__smakebuf_r+0x18>
 8009cb4:	f023 0303 	bic.w	r3, r3, #3
 8009cb8:	f043 0302 	orr.w	r3, r3, #2
 8009cbc:	81a3      	strh	r3, [r4, #12]
 8009cbe:	e7e3      	b.n	8009c88 <__smakebuf_r+0xc>
 8009cc0:	4b0d      	ldr	r3, [pc, #52]	; (8009cf8 <__smakebuf_r+0x7c>)
 8009cc2:	62b3      	str	r3, [r6, #40]	; 0x28
 8009cc4:	89a3      	ldrh	r3, [r4, #12]
 8009cc6:	6020      	str	r0, [r4, #0]
 8009cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ccc:	81a3      	strh	r3, [r4, #12]
 8009cce:	9b00      	ldr	r3, [sp, #0]
 8009cd0:	6163      	str	r3, [r4, #20]
 8009cd2:	9b01      	ldr	r3, [sp, #4]
 8009cd4:	6120      	str	r0, [r4, #16]
 8009cd6:	b15b      	cbz	r3, 8009cf0 <__smakebuf_r+0x74>
 8009cd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009cdc:	4630      	mov	r0, r6
 8009cde:	f000 fea1 	bl	800aa24 <_isatty_r>
 8009ce2:	b128      	cbz	r0, 8009cf0 <__smakebuf_r+0x74>
 8009ce4:	89a3      	ldrh	r3, [r4, #12]
 8009ce6:	f023 0303 	bic.w	r3, r3, #3
 8009cea:	f043 0301 	orr.w	r3, r3, #1
 8009cee:	81a3      	strh	r3, [r4, #12]
 8009cf0:	89a0      	ldrh	r0, [r4, #12]
 8009cf2:	4305      	orrs	r5, r0
 8009cf4:	81a5      	strh	r5, [r4, #12]
 8009cf6:	e7cd      	b.n	8009c94 <__smakebuf_r+0x18>
 8009cf8:	08009a81 	.word	0x08009a81

08009cfc <malloc>:
 8009cfc:	4b02      	ldr	r3, [pc, #8]	; (8009d08 <malloc+0xc>)
 8009cfe:	4601      	mov	r1, r0
 8009d00:	6818      	ldr	r0, [r3, #0]
 8009d02:	f000 bc09 	b.w	800a518 <_malloc_r>
 8009d06:	bf00      	nop
 8009d08:	20000020 	.word	0x20000020

08009d0c <_Balloc>:
 8009d0c:	b570      	push	{r4, r5, r6, lr}
 8009d0e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009d10:	4604      	mov	r4, r0
 8009d12:	460d      	mov	r5, r1
 8009d14:	b976      	cbnz	r6, 8009d34 <_Balloc+0x28>
 8009d16:	2010      	movs	r0, #16
 8009d18:	f7ff fff0 	bl	8009cfc <malloc>
 8009d1c:	4602      	mov	r2, r0
 8009d1e:	6260      	str	r0, [r4, #36]	; 0x24
 8009d20:	b920      	cbnz	r0, 8009d2c <_Balloc+0x20>
 8009d22:	4b18      	ldr	r3, [pc, #96]	; (8009d84 <_Balloc+0x78>)
 8009d24:	4818      	ldr	r0, [pc, #96]	; (8009d88 <_Balloc+0x7c>)
 8009d26:	2166      	movs	r1, #102	; 0x66
 8009d28:	f000 fe2a 	bl	800a980 <__assert_func>
 8009d2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009d30:	6006      	str	r6, [r0, #0]
 8009d32:	60c6      	str	r6, [r0, #12]
 8009d34:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009d36:	68f3      	ldr	r3, [r6, #12]
 8009d38:	b183      	cbz	r3, 8009d5c <_Balloc+0x50>
 8009d3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d3c:	68db      	ldr	r3, [r3, #12]
 8009d3e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009d42:	b9b8      	cbnz	r0, 8009d74 <_Balloc+0x68>
 8009d44:	2101      	movs	r1, #1
 8009d46:	fa01 f605 	lsl.w	r6, r1, r5
 8009d4a:	1d72      	adds	r2, r6, #5
 8009d4c:	0092      	lsls	r2, r2, #2
 8009d4e:	4620      	mov	r0, r4
 8009d50:	f000 fb60 	bl	800a414 <_calloc_r>
 8009d54:	b160      	cbz	r0, 8009d70 <_Balloc+0x64>
 8009d56:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009d5a:	e00e      	b.n	8009d7a <_Balloc+0x6e>
 8009d5c:	2221      	movs	r2, #33	; 0x21
 8009d5e:	2104      	movs	r1, #4
 8009d60:	4620      	mov	r0, r4
 8009d62:	f000 fb57 	bl	800a414 <_calloc_r>
 8009d66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d68:	60f0      	str	r0, [r6, #12]
 8009d6a:	68db      	ldr	r3, [r3, #12]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d1e4      	bne.n	8009d3a <_Balloc+0x2e>
 8009d70:	2000      	movs	r0, #0
 8009d72:	bd70      	pop	{r4, r5, r6, pc}
 8009d74:	6802      	ldr	r2, [r0, #0]
 8009d76:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009d80:	e7f7      	b.n	8009d72 <_Balloc+0x66>
 8009d82:	bf00      	nop
 8009d84:	0800b779 	.word	0x0800b779
 8009d88:	0800b85c 	.word	0x0800b85c

08009d8c <_Bfree>:
 8009d8c:	b570      	push	{r4, r5, r6, lr}
 8009d8e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009d90:	4605      	mov	r5, r0
 8009d92:	460c      	mov	r4, r1
 8009d94:	b976      	cbnz	r6, 8009db4 <_Bfree+0x28>
 8009d96:	2010      	movs	r0, #16
 8009d98:	f7ff ffb0 	bl	8009cfc <malloc>
 8009d9c:	4602      	mov	r2, r0
 8009d9e:	6268      	str	r0, [r5, #36]	; 0x24
 8009da0:	b920      	cbnz	r0, 8009dac <_Bfree+0x20>
 8009da2:	4b09      	ldr	r3, [pc, #36]	; (8009dc8 <_Bfree+0x3c>)
 8009da4:	4809      	ldr	r0, [pc, #36]	; (8009dcc <_Bfree+0x40>)
 8009da6:	218a      	movs	r1, #138	; 0x8a
 8009da8:	f000 fdea 	bl	800a980 <__assert_func>
 8009dac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009db0:	6006      	str	r6, [r0, #0]
 8009db2:	60c6      	str	r6, [r0, #12]
 8009db4:	b13c      	cbz	r4, 8009dc6 <_Bfree+0x3a>
 8009db6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009db8:	6862      	ldr	r2, [r4, #4]
 8009dba:	68db      	ldr	r3, [r3, #12]
 8009dbc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009dc0:	6021      	str	r1, [r4, #0]
 8009dc2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009dc6:	bd70      	pop	{r4, r5, r6, pc}
 8009dc8:	0800b779 	.word	0x0800b779
 8009dcc:	0800b85c 	.word	0x0800b85c

08009dd0 <__multadd>:
 8009dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dd4:	690d      	ldr	r5, [r1, #16]
 8009dd6:	4607      	mov	r7, r0
 8009dd8:	460c      	mov	r4, r1
 8009dda:	461e      	mov	r6, r3
 8009ddc:	f101 0c14 	add.w	ip, r1, #20
 8009de0:	2000      	movs	r0, #0
 8009de2:	f8dc 3000 	ldr.w	r3, [ip]
 8009de6:	b299      	uxth	r1, r3
 8009de8:	fb02 6101 	mla	r1, r2, r1, r6
 8009dec:	0c1e      	lsrs	r6, r3, #16
 8009dee:	0c0b      	lsrs	r3, r1, #16
 8009df0:	fb02 3306 	mla	r3, r2, r6, r3
 8009df4:	b289      	uxth	r1, r1
 8009df6:	3001      	adds	r0, #1
 8009df8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009dfc:	4285      	cmp	r5, r0
 8009dfe:	f84c 1b04 	str.w	r1, [ip], #4
 8009e02:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009e06:	dcec      	bgt.n	8009de2 <__multadd+0x12>
 8009e08:	b30e      	cbz	r6, 8009e4e <__multadd+0x7e>
 8009e0a:	68a3      	ldr	r3, [r4, #8]
 8009e0c:	42ab      	cmp	r3, r5
 8009e0e:	dc19      	bgt.n	8009e44 <__multadd+0x74>
 8009e10:	6861      	ldr	r1, [r4, #4]
 8009e12:	4638      	mov	r0, r7
 8009e14:	3101      	adds	r1, #1
 8009e16:	f7ff ff79 	bl	8009d0c <_Balloc>
 8009e1a:	4680      	mov	r8, r0
 8009e1c:	b928      	cbnz	r0, 8009e2a <__multadd+0x5a>
 8009e1e:	4602      	mov	r2, r0
 8009e20:	4b0c      	ldr	r3, [pc, #48]	; (8009e54 <__multadd+0x84>)
 8009e22:	480d      	ldr	r0, [pc, #52]	; (8009e58 <__multadd+0x88>)
 8009e24:	21b5      	movs	r1, #181	; 0xb5
 8009e26:	f000 fdab 	bl	800a980 <__assert_func>
 8009e2a:	6922      	ldr	r2, [r4, #16]
 8009e2c:	3202      	adds	r2, #2
 8009e2e:	f104 010c 	add.w	r1, r4, #12
 8009e32:	0092      	lsls	r2, r2, #2
 8009e34:	300c      	adds	r0, #12
 8009e36:	f7fe f8f3 	bl	8008020 <memcpy>
 8009e3a:	4621      	mov	r1, r4
 8009e3c:	4638      	mov	r0, r7
 8009e3e:	f7ff ffa5 	bl	8009d8c <_Bfree>
 8009e42:	4644      	mov	r4, r8
 8009e44:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009e48:	3501      	adds	r5, #1
 8009e4a:	615e      	str	r6, [r3, #20]
 8009e4c:	6125      	str	r5, [r4, #16]
 8009e4e:	4620      	mov	r0, r4
 8009e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e54:	0800b7eb 	.word	0x0800b7eb
 8009e58:	0800b85c 	.word	0x0800b85c

08009e5c <__hi0bits>:
 8009e5c:	0c03      	lsrs	r3, r0, #16
 8009e5e:	041b      	lsls	r3, r3, #16
 8009e60:	b9d3      	cbnz	r3, 8009e98 <__hi0bits+0x3c>
 8009e62:	0400      	lsls	r0, r0, #16
 8009e64:	2310      	movs	r3, #16
 8009e66:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009e6a:	bf04      	itt	eq
 8009e6c:	0200      	lsleq	r0, r0, #8
 8009e6e:	3308      	addeq	r3, #8
 8009e70:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009e74:	bf04      	itt	eq
 8009e76:	0100      	lsleq	r0, r0, #4
 8009e78:	3304      	addeq	r3, #4
 8009e7a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009e7e:	bf04      	itt	eq
 8009e80:	0080      	lsleq	r0, r0, #2
 8009e82:	3302      	addeq	r3, #2
 8009e84:	2800      	cmp	r0, #0
 8009e86:	db05      	blt.n	8009e94 <__hi0bits+0x38>
 8009e88:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009e8c:	f103 0301 	add.w	r3, r3, #1
 8009e90:	bf08      	it	eq
 8009e92:	2320      	moveq	r3, #32
 8009e94:	4618      	mov	r0, r3
 8009e96:	4770      	bx	lr
 8009e98:	2300      	movs	r3, #0
 8009e9a:	e7e4      	b.n	8009e66 <__hi0bits+0xa>

08009e9c <__lo0bits>:
 8009e9c:	6803      	ldr	r3, [r0, #0]
 8009e9e:	f013 0207 	ands.w	r2, r3, #7
 8009ea2:	4601      	mov	r1, r0
 8009ea4:	d00b      	beq.n	8009ebe <__lo0bits+0x22>
 8009ea6:	07da      	lsls	r2, r3, #31
 8009ea8:	d423      	bmi.n	8009ef2 <__lo0bits+0x56>
 8009eaa:	0798      	lsls	r0, r3, #30
 8009eac:	bf49      	itett	mi
 8009eae:	085b      	lsrmi	r3, r3, #1
 8009eb0:	089b      	lsrpl	r3, r3, #2
 8009eb2:	2001      	movmi	r0, #1
 8009eb4:	600b      	strmi	r3, [r1, #0]
 8009eb6:	bf5c      	itt	pl
 8009eb8:	600b      	strpl	r3, [r1, #0]
 8009eba:	2002      	movpl	r0, #2
 8009ebc:	4770      	bx	lr
 8009ebe:	b298      	uxth	r0, r3
 8009ec0:	b9a8      	cbnz	r0, 8009eee <__lo0bits+0x52>
 8009ec2:	0c1b      	lsrs	r3, r3, #16
 8009ec4:	2010      	movs	r0, #16
 8009ec6:	b2da      	uxtb	r2, r3
 8009ec8:	b90a      	cbnz	r2, 8009ece <__lo0bits+0x32>
 8009eca:	3008      	adds	r0, #8
 8009ecc:	0a1b      	lsrs	r3, r3, #8
 8009ece:	071a      	lsls	r2, r3, #28
 8009ed0:	bf04      	itt	eq
 8009ed2:	091b      	lsreq	r3, r3, #4
 8009ed4:	3004      	addeq	r0, #4
 8009ed6:	079a      	lsls	r2, r3, #30
 8009ed8:	bf04      	itt	eq
 8009eda:	089b      	lsreq	r3, r3, #2
 8009edc:	3002      	addeq	r0, #2
 8009ede:	07da      	lsls	r2, r3, #31
 8009ee0:	d403      	bmi.n	8009eea <__lo0bits+0x4e>
 8009ee2:	085b      	lsrs	r3, r3, #1
 8009ee4:	f100 0001 	add.w	r0, r0, #1
 8009ee8:	d005      	beq.n	8009ef6 <__lo0bits+0x5a>
 8009eea:	600b      	str	r3, [r1, #0]
 8009eec:	4770      	bx	lr
 8009eee:	4610      	mov	r0, r2
 8009ef0:	e7e9      	b.n	8009ec6 <__lo0bits+0x2a>
 8009ef2:	2000      	movs	r0, #0
 8009ef4:	4770      	bx	lr
 8009ef6:	2020      	movs	r0, #32
 8009ef8:	4770      	bx	lr
	...

08009efc <__i2b>:
 8009efc:	b510      	push	{r4, lr}
 8009efe:	460c      	mov	r4, r1
 8009f00:	2101      	movs	r1, #1
 8009f02:	f7ff ff03 	bl	8009d0c <_Balloc>
 8009f06:	4602      	mov	r2, r0
 8009f08:	b928      	cbnz	r0, 8009f16 <__i2b+0x1a>
 8009f0a:	4b05      	ldr	r3, [pc, #20]	; (8009f20 <__i2b+0x24>)
 8009f0c:	4805      	ldr	r0, [pc, #20]	; (8009f24 <__i2b+0x28>)
 8009f0e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009f12:	f000 fd35 	bl	800a980 <__assert_func>
 8009f16:	2301      	movs	r3, #1
 8009f18:	6144      	str	r4, [r0, #20]
 8009f1a:	6103      	str	r3, [r0, #16]
 8009f1c:	bd10      	pop	{r4, pc}
 8009f1e:	bf00      	nop
 8009f20:	0800b7eb 	.word	0x0800b7eb
 8009f24:	0800b85c 	.word	0x0800b85c

08009f28 <__multiply>:
 8009f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f2c:	4691      	mov	r9, r2
 8009f2e:	690a      	ldr	r2, [r1, #16]
 8009f30:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009f34:	429a      	cmp	r2, r3
 8009f36:	bfb8      	it	lt
 8009f38:	460b      	movlt	r3, r1
 8009f3a:	460c      	mov	r4, r1
 8009f3c:	bfbc      	itt	lt
 8009f3e:	464c      	movlt	r4, r9
 8009f40:	4699      	movlt	r9, r3
 8009f42:	6927      	ldr	r7, [r4, #16]
 8009f44:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009f48:	68a3      	ldr	r3, [r4, #8]
 8009f4a:	6861      	ldr	r1, [r4, #4]
 8009f4c:	eb07 060a 	add.w	r6, r7, sl
 8009f50:	42b3      	cmp	r3, r6
 8009f52:	b085      	sub	sp, #20
 8009f54:	bfb8      	it	lt
 8009f56:	3101      	addlt	r1, #1
 8009f58:	f7ff fed8 	bl	8009d0c <_Balloc>
 8009f5c:	b930      	cbnz	r0, 8009f6c <__multiply+0x44>
 8009f5e:	4602      	mov	r2, r0
 8009f60:	4b44      	ldr	r3, [pc, #272]	; (800a074 <__multiply+0x14c>)
 8009f62:	4845      	ldr	r0, [pc, #276]	; (800a078 <__multiply+0x150>)
 8009f64:	f240 115d 	movw	r1, #349	; 0x15d
 8009f68:	f000 fd0a 	bl	800a980 <__assert_func>
 8009f6c:	f100 0514 	add.w	r5, r0, #20
 8009f70:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009f74:	462b      	mov	r3, r5
 8009f76:	2200      	movs	r2, #0
 8009f78:	4543      	cmp	r3, r8
 8009f7a:	d321      	bcc.n	8009fc0 <__multiply+0x98>
 8009f7c:	f104 0314 	add.w	r3, r4, #20
 8009f80:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009f84:	f109 0314 	add.w	r3, r9, #20
 8009f88:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009f8c:	9202      	str	r2, [sp, #8]
 8009f8e:	1b3a      	subs	r2, r7, r4
 8009f90:	3a15      	subs	r2, #21
 8009f92:	f022 0203 	bic.w	r2, r2, #3
 8009f96:	3204      	adds	r2, #4
 8009f98:	f104 0115 	add.w	r1, r4, #21
 8009f9c:	428f      	cmp	r7, r1
 8009f9e:	bf38      	it	cc
 8009fa0:	2204      	movcc	r2, #4
 8009fa2:	9201      	str	r2, [sp, #4]
 8009fa4:	9a02      	ldr	r2, [sp, #8]
 8009fa6:	9303      	str	r3, [sp, #12]
 8009fa8:	429a      	cmp	r2, r3
 8009faa:	d80c      	bhi.n	8009fc6 <__multiply+0x9e>
 8009fac:	2e00      	cmp	r6, #0
 8009fae:	dd03      	ble.n	8009fb8 <__multiply+0x90>
 8009fb0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d05a      	beq.n	800a06e <__multiply+0x146>
 8009fb8:	6106      	str	r6, [r0, #16]
 8009fba:	b005      	add	sp, #20
 8009fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fc0:	f843 2b04 	str.w	r2, [r3], #4
 8009fc4:	e7d8      	b.n	8009f78 <__multiply+0x50>
 8009fc6:	f8b3 a000 	ldrh.w	sl, [r3]
 8009fca:	f1ba 0f00 	cmp.w	sl, #0
 8009fce:	d024      	beq.n	800a01a <__multiply+0xf2>
 8009fd0:	f104 0e14 	add.w	lr, r4, #20
 8009fd4:	46a9      	mov	r9, r5
 8009fd6:	f04f 0c00 	mov.w	ip, #0
 8009fda:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009fde:	f8d9 1000 	ldr.w	r1, [r9]
 8009fe2:	fa1f fb82 	uxth.w	fp, r2
 8009fe6:	b289      	uxth	r1, r1
 8009fe8:	fb0a 110b 	mla	r1, sl, fp, r1
 8009fec:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009ff0:	f8d9 2000 	ldr.w	r2, [r9]
 8009ff4:	4461      	add	r1, ip
 8009ff6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009ffa:	fb0a c20b 	mla	r2, sl, fp, ip
 8009ffe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a002:	b289      	uxth	r1, r1
 800a004:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a008:	4577      	cmp	r7, lr
 800a00a:	f849 1b04 	str.w	r1, [r9], #4
 800a00e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a012:	d8e2      	bhi.n	8009fda <__multiply+0xb2>
 800a014:	9a01      	ldr	r2, [sp, #4]
 800a016:	f845 c002 	str.w	ip, [r5, r2]
 800a01a:	9a03      	ldr	r2, [sp, #12]
 800a01c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a020:	3304      	adds	r3, #4
 800a022:	f1b9 0f00 	cmp.w	r9, #0
 800a026:	d020      	beq.n	800a06a <__multiply+0x142>
 800a028:	6829      	ldr	r1, [r5, #0]
 800a02a:	f104 0c14 	add.w	ip, r4, #20
 800a02e:	46ae      	mov	lr, r5
 800a030:	f04f 0a00 	mov.w	sl, #0
 800a034:	f8bc b000 	ldrh.w	fp, [ip]
 800a038:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a03c:	fb09 220b 	mla	r2, r9, fp, r2
 800a040:	4492      	add	sl, r2
 800a042:	b289      	uxth	r1, r1
 800a044:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a048:	f84e 1b04 	str.w	r1, [lr], #4
 800a04c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a050:	f8be 1000 	ldrh.w	r1, [lr]
 800a054:	0c12      	lsrs	r2, r2, #16
 800a056:	fb09 1102 	mla	r1, r9, r2, r1
 800a05a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a05e:	4567      	cmp	r7, ip
 800a060:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a064:	d8e6      	bhi.n	800a034 <__multiply+0x10c>
 800a066:	9a01      	ldr	r2, [sp, #4]
 800a068:	50a9      	str	r1, [r5, r2]
 800a06a:	3504      	adds	r5, #4
 800a06c:	e79a      	b.n	8009fa4 <__multiply+0x7c>
 800a06e:	3e01      	subs	r6, #1
 800a070:	e79c      	b.n	8009fac <__multiply+0x84>
 800a072:	bf00      	nop
 800a074:	0800b7eb 	.word	0x0800b7eb
 800a078:	0800b85c 	.word	0x0800b85c

0800a07c <__pow5mult>:
 800a07c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a080:	4615      	mov	r5, r2
 800a082:	f012 0203 	ands.w	r2, r2, #3
 800a086:	4606      	mov	r6, r0
 800a088:	460f      	mov	r7, r1
 800a08a:	d007      	beq.n	800a09c <__pow5mult+0x20>
 800a08c:	4c25      	ldr	r4, [pc, #148]	; (800a124 <__pow5mult+0xa8>)
 800a08e:	3a01      	subs	r2, #1
 800a090:	2300      	movs	r3, #0
 800a092:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a096:	f7ff fe9b 	bl	8009dd0 <__multadd>
 800a09a:	4607      	mov	r7, r0
 800a09c:	10ad      	asrs	r5, r5, #2
 800a09e:	d03d      	beq.n	800a11c <__pow5mult+0xa0>
 800a0a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a0a2:	b97c      	cbnz	r4, 800a0c4 <__pow5mult+0x48>
 800a0a4:	2010      	movs	r0, #16
 800a0a6:	f7ff fe29 	bl	8009cfc <malloc>
 800a0aa:	4602      	mov	r2, r0
 800a0ac:	6270      	str	r0, [r6, #36]	; 0x24
 800a0ae:	b928      	cbnz	r0, 800a0bc <__pow5mult+0x40>
 800a0b0:	4b1d      	ldr	r3, [pc, #116]	; (800a128 <__pow5mult+0xac>)
 800a0b2:	481e      	ldr	r0, [pc, #120]	; (800a12c <__pow5mult+0xb0>)
 800a0b4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a0b8:	f000 fc62 	bl	800a980 <__assert_func>
 800a0bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a0c0:	6004      	str	r4, [r0, #0]
 800a0c2:	60c4      	str	r4, [r0, #12]
 800a0c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a0c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a0cc:	b94c      	cbnz	r4, 800a0e2 <__pow5mult+0x66>
 800a0ce:	f240 2171 	movw	r1, #625	; 0x271
 800a0d2:	4630      	mov	r0, r6
 800a0d4:	f7ff ff12 	bl	8009efc <__i2b>
 800a0d8:	2300      	movs	r3, #0
 800a0da:	f8c8 0008 	str.w	r0, [r8, #8]
 800a0de:	4604      	mov	r4, r0
 800a0e0:	6003      	str	r3, [r0, #0]
 800a0e2:	f04f 0900 	mov.w	r9, #0
 800a0e6:	07eb      	lsls	r3, r5, #31
 800a0e8:	d50a      	bpl.n	800a100 <__pow5mult+0x84>
 800a0ea:	4639      	mov	r1, r7
 800a0ec:	4622      	mov	r2, r4
 800a0ee:	4630      	mov	r0, r6
 800a0f0:	f7ff ff1a 	bl	8009f28 <__multiply>
 800a0f4:	4639      	mov	r1, r7
 800a0f6:	4680      	mov	r8, r0
 800a0f8:	4630      	mov	r0, r6
 800a0fa:	f7ff fe47 	bl	8009d8c <_Bfree>
 800a0fe:	4647      	mov	r7, r8
 800a100:	106d      	asrs	r5, r5, #1
 800a102:	d00b      	beq.n	800a11c <__pow5mult+0xa0>
 800a104:	6820      	ldr	r0, [r4, #0]
 800a106:	b938      	cbnz	r0, 800a118 <__pow5mult+0x9c>
 800a108:	4622      	mov	r2, r4
 800a10a:	4621      	mov	r1, r4
 800a10c:	4630      	mov	r0, r6
 800a10e:	f7ff ff0b 	bl	8009f28 <__multiply>
 800a112:	6020      	str	r0, [r4, #0]
 800a114:	f8c0 9000 	str.w	r9, [r0]
 800a118:	4604      	mov	r4, r0
 800a11a:	e7e4      	b.n	800a0e6 <__pow5mult+0x6a>
 800a11c:	4638      	mov	r0, r7
 800a11e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a122:	bf00      	nop
 800a124:	0800b9a8 	.word	0x0800b9a8
 800a128:	0800b779 	.word	0x0800b779
 800a12c:	0800b85c 	.word	0x0800b85c

0800a130 <__lshift>:
 800a130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a134:	460c      	mov	r4, r1
 800a136:	6849      	ldr	r1, [r1, #4]
 800a138:	6923      	ldr	r3, [r4, #16]
 800a13a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a13e:	68a3      	ldr	r3, [r4, #8]
 800a140:	4607      	mov	r7, r0
 800a142:	4691      	mov	r9, r2
 800a144:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a148:	f108 0601 	add.w	r6, r8, #1
 800a14c:	42b3      	cmp	r3, r6
 800a14e:	db0b      	blt.n	800a168 <__lshift+0x38>
 800a150:	4638      	mov	r0, r7
 800a152:	f7ff fddb 	bl	8009d0c <_Balloc>
 800a156:	4605      	mov	r5, r0
 800a158:	b948      	cbnz	r0, 800a16e <__lshift+0x3e>
 800a15a:	4602      	mov	r2, r0
 800a15c:	4b2a      	ldr	r3, [pc, #168]	; (800a208 <__lshift+0xd8>)
 800a15e:	482b      	ldr	r0, [pc, #172]	; (800a20c <__lshift+0xdc>)
 800a160:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a164:	f000 fc0c 	bl	800a980 <__assert_func>
 800a168:	3101      	adds	r1, #1
 800a16a:	005b      	lsls	r3, r3, #1
 800a16c:	e7ee      	b.n	800a14c <__lshift+0x1c>
 800a16e:	2300      	movs	r3, #0
 800a170:	f100 0114 	add.w	r1, r0, #20
 800a174:	f100 0210 	add.w	r2, r0, #16
 800a178:	4618      	mov	r0, r3
 800a17a:	4553      	cmp	r3, sl
 800a17c:	db37      	blt.n	800a1ee <__lshift+0xbe>
 800a17e:	6920      	ldr	r0, [r4, #16]
 800a180:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a184:	f104 0314 	add.w	r3, r4, #20
 800a188:	f019 091f 	ands.w	r9, r9, #31
 800a18c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a190:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a194:	d02f      	beq.n	800a1f6 <__lshift+0xc6>
 800a196:	f1c9 0e20 	rsb	lr, r9, #32
 800a19a:	468a      	mov	sl, r1
 800a19c:	f04f 0c00 	mov.w	ip, #0
 800a1a0:	681a      	ldr	r2, [r3, #0]
 800a1a2:	fa02 f209 	lsl.w	r2, r2, r9
 800a1a6:	ea42 020c 	orr.w	r2, r2, ip
 800a1aa:	f84a 2b04 	str.w	r2, [sl], #4
 800a1ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1b2:	4298      	cmp	r0, r3
 800a1b4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a1b8:	d8f2      	bhi.n	800a1a0 <__lshift+0x70>
 800a1ba:	1b03      	subs	r3, r0, r4
 800a1bc:	3b15      	subs	r3, #21
 800a1be:	f023 0303 	bic.w	r3, r3, #3
 800a1c2:	3304      	adds	r3, #4
 800a1c4:	f104 0215 	add.w	r2, r4, #21
 800a1c8:	4290      	cmp	r0, r2
 800a1ca:	bf38      	it	cc
 800a1cc:	2304      	movcc	r3, #4
 800a1ce:	f841 c003 	str.w	ip, [r1, r3]
 800a1d2:	f1bc 0f00 	cmp.w	ip, #0
 800a1d6:	d001      	beq.n	800a1dc <__lshift+0xac>
 800a1d8:	f108 0602 	add.w	r6, r8, #2
 800a1dc:	3e01      	subs	r6, #1
 800a1de:	4638      	mov	r0, r7
 800a1e0:	612e      	str	r6, [r5, #16]
 800a1e2:	4621      	mov	r1, r4
 800a1e4:	f7ff fdd2 	bl	8009d8c <_Bfree>
 800a1e8:	4628      	mov	r0, r5
 800a1ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1ee:	f842 0f04 	str.w	r0, [r2, #4]!
 800a1f2:	3301      	adds	r3, #1
 800a1f4:	e7c1      	b.n	800a17a <__lshift+0x4a>
 800a1f6:	3904      	subs	r1, #4
 800a1f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1fc:	f841 2f04 	str.w	r2, [r1, #4]!
 800a200:	4298      	cmp	r0, r3
 800a202:	d8f9      	bhi.n	800a1f8 <__lshift+0xc8>
 800a204:	e7ea      	b.n	800a1dc <__lshift+0xac>
 800a206:	bf00      	nop
 800a208:	0800b7eb 	.word	0x0800b7eb
 800a20c:	0800b85c 	.word	0x0800b85c

0800a210 <__mcmp>:
 800a210:	b530      	push	{r4, r5, lr}
 800a212:	6902      	ldr	r2, [r0, #16]
 800a214:	690c      	ldr	r4, [r1, #16]
 800a216:	1b12      	subs	r2, r2, r4
 800a218:	d10e      	bne.n	800a238 <__mcmp+0x28>
 800a21a:	f100 0314 	add.w	r3, r0, #20
 800a21e:	3114      	adds	r1, #20
 800a220:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a224:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a228:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a22c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a230:	42a5      	cmp	r5, r4
 800a232:	d003      	beq.n	800a23c <__mcmp+0x2c>
 800a234:	d305      	bcc.n	800a242 <__mcmp+0x32>
 800a236:	2201      	movs	r2, #1
 800a238:	4610      	mov	r0, r2
 800a23a:	bd30      	pop	{r4, r5, pc}
 800a23c:	4283      	cmp	r3, r0
 800a23e:	d3f3      	bcc.n	800a228 <__mcmp+0x18>
 800a240:	e7fa      	b.n	800a238 <__mcmp+0x28>
 800a242:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a246:	e7f7      	b.n	800a238 <__mcmp+0x28>

0800a248 <__mdiff>:
 800a248:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a24c:	460c      	mov	r4, r1
 800a24e:	4606      	mov	r6, r0
 800a250:	4611      	mov	r1, r2
 800a252:	4620      	mov	r0, r4
 800a254:	4690      	mov	r8, r2
 800a256:	f7ff ffdb 	bl	800a210 <__mcmp>
 800a25a:	1e05      	subs	r5, r0, #0
 800a25c:	d110      	bne.n	800a280 <__mdiff+0x38>
 800a25e:	4629      	mov	r1, r5
 800a260:	4630      	mov	r0, r6
 800a262:	f7ff fd53 	bl	8009d0c <_Balloc>
 800a266:	b930      	cbnz	r0, 800a276 <__mdiff+0x2e>
 800a268:	4b3a      	ldr	r3, [pc, #232]	; (800a354 <__mdiff+0x10c>)
 800a26a:	4602      	mov	r2, r0
 800a26c:	f240 2132 	movw	r1, #562	; 0x232
 800a270:	4839      	ldr	r0, [pc, #228]	; (800a358 <__mdiff+0x110>)
 800a272:	f000 fb85 	bl	800a980 <__assert_func>
 800a276:	2301      	movs	r3, #1
 800a278:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a27c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a280:	bfa4      	itt	ge
 800a282:	4643      	movge	r3, r8
 800a284:	46a0      	movge	r8, r4
 800a286:	4630      	mov	r0, r6
 800a288:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a28c:	bfa6      	itte	ge
 800a28e:	461c      	movge	r4, r3
 800a290:	2500      	movge	r5, #0
 800a292:	2501      	movlt	r5, #1
 800a294:	f7ff fd3a 	bl	8009d0c <_Balloc>
 800a298:	b920      	cbnz	r0, 800a2a4 <__mdiff+0x5c>
 800a29a:	4b2e      	ldr	r3, [pc, #184]	; (800a354 <__mdiff+0x10c>)
 800a29c:	4602      	mov	r2, r0
 800a29e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a2a2:	e7e5      	b.n	800a270 <__mdiff+0x28>
 800a2a4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a2a8:	6926      	ldr	r6, [r4, #16]
 800a2aa:	60c5      	str	r5, [r0, #12]
 800a2ac:	f104 0914 	add.w	r9, r4, #20
 800a2b0:	f108 0514 	add.w	r5, r8, #20
 800a2b4:	f100 0e14 	add.w	lr, r0, #20
 800a2b8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a2bc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a2c0:	f108 0210 	add.w	r2, r8, #16
 800a2c4:	46f2      	mov	sl, lr
 800a2c6:	2100      	movs	r1, #0
 800a2c8:	f859 3b04 	ldr.w	r3, [r9], #4
 800a2cc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a2d0:	fa1f f883 	uxth.w	r8, r3
 800a2d4:	fa11 f18b 	uxtah	r1, r1, fp
 800a2d8:	0c1b      	lsrs	r3, r3, #16
 800a2da:	eba1 0808 	sub.w	r8, r1, r8
 800a2de:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a2e2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a2e6:	fa1f f888 	uxth.w	r8, r8
 800a2ea:	1419      	asrs	r1, r3, #16
 800a2ec:	454e      	cmp	r6, r9
 800a2ee:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a2f2:	f84a 3b04 	str.w	r3, [sl], #4
 800a2f6:	d8e7      	bhi.n	800a2c8 <__mdiff+0x80>
 800a2f8:	1b33      	subs	r3, r6, r4
 800a2fa:	3b15      	subs	r3, #21
 800a2fc:	f023 0303 	bic.w	r3, r3, #3
 800a300:	3304      	adds	r3, #4
 800a302:	3415      	adds	r4, #21
 800a304:	42a6      	cmp	r6, r4
 800a306:	bf38      	it	cc
 800a308:	2304      	movcc	r3, #4
 800a30a:	441d      	add	r5, r3
 800a30c:	4473      	add	r3, lr
 800a30e:	469e      	mov	lr, r3
 800a310:	462e      	mov	r6, r5
 800a312:	4566      	cmp	r6, ip
 800a314:	d30e      	bcc.n	800a334 <__mdiff+0xec>
 800a316:	f10c 0203 	add.w	r2, ip, #3
 800a31a:	1b52      	subs	r2, r2, r5
 800a31c:	f022 0203 	bic.w	r2, r2, #3
 800a320:	3d03      	subs	r5, #3
 800a322:	45ac      	cmp	ip, r5
 800a324:	bf38      	it	cc
 800a326:	2200      	movcc	r2, #0
 800a328:	441a      	add	r2, r3
 800a32a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a32e:	b17b      	cbz	r3, 800a350 <__mdiff+0x108>
 800a330:	6107      	str	r7, [r0, #16]
 800a332:	e7a3      	b.n	800a27c <__mdiff+0x34>
 800a334:	f856 8b04 	ldr.w	r8, [r6], #4
 800a338:	fa11 f288 	uxtah	r2, r1, r8
 800a33c:	1414      	asrs	r4, r2, #16
 800a33e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a342:	b292      	uxth	r2, r2
 800a344:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a348:	f84e 2b04 	str.w	r2, [lr], #4
 800a34c:	1421      	asrs	r1, r4, #16
 800a34e:	e7e0      	b.n	800a312 <__mdiff+0xca>
 800a350:	3f01      	subs	r7, #1
 800a352:	e7ea      	b.n	800a32a <__mdiff+0xe2>
 800a354:	0800b7eb 	.word	0x0800b7eb
 800a358:	0800b85c 	.word	0x0800b85c

0800a35c <__d2b>:
 800a35c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a360:	4689      	mov	r9, r1
 800a362:	2101      	movs	r1, #1
 800a364:	ec57 6b10 	vmov	r6, r7, d0
 800a368:	4690      	mov	r8, r2
 800a36a:	f7ff fccf 	bl	8009d0c <_Balloc>
 800a36e:	4604      	mov	r4, r0
 800a370:	b930      	cbnz	r0, 800a380 <__d2b+0x24>
 800a372:	4602      	mov	r2, r0
 800a374:	4b25      	ldr	r3, [pc, #148]	; (800a40c <__d2b+0xb0>)
 800a376:	4826      	ldr	r0, [pc, #152]	; (800a410 <__d2b+0xb4>)
 800a378:	f240 310a 	movw	r1, #778	; 0x30a
 800a37c:	f000 fb00 	bl	800a980 <__assert_func>
 800a380:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a384:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a388:	bb35      	cbnz	r5, 800a3d8 <__d2b+0x7c>
 800a38a:	2e00      	cmp	r6, #0
 800a38c:	9301      	str	r3, [sp, #4]
 800a38e:	d028      	beq.n	800a3e2 <__d2b+0x86>
 800a390:	4668      	mov	r0, sp
 800a392:	9600      	str	r6, [sp, #0]
 800a394:	f7ff fd82 	bl	8009e9c <__lo0bits>
 800a398:	9900      	ldr	r1, [sp, #0]
 800a39a:	b300      	cbz	r0, 800a3de <__d2b+0x82>
 800a39c:	9a01      	ldr	r2, [sp, #4]
 800a39e:	f1c0 0320 	rsb	r3, r0, #32
 800a3a2:	fa02 f303 	lsl.w	r3, r2, r3
 800a3a6:	430b      	orrs	r3, r1
 800a3a8:	40c2      	lsrs	r2, r0
 800a3aa:	6163      	str	r3, [r4, #20]
 800a3ac:	9201      	str	r2, [sp, #4]
 800a3ae:	9b01      	ldr	r3, [sp, #4]
 800a3b0:	61a3      	str	r3, [r4, #24]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	bf14      	ite	ne
 800a3b6:	2202      	movne	r2, #2
 800a3b8:	2201      	moveq	r2, #1
 800a3ba:	6122      	str	r2, [r4, #16]
 800a3bc:	b1d5      	cbz	r5, 800a3f4 <__d2b+0x98>
 800a3be:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a3c2:	4405      	add	r5, r0
 800a3c4:	f8c9 5000 	str.w	r5, [r9]
 800a3c8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a3cc:	f8c8 0000 	str.w	r0, [r8]
 800a3d0:	4620      	mov	r0, r4
 800a3d2:	b003      	add	sp, #12
 800a3d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a3d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a3dc:	e7d5      	b.n	800a38a <__d2b+0x2e>
 800a3de:	6161      	str	r1, [r4, #20]
 800a3e0:	e7e5      	b.n	800a3ae <__d2b+0x52>
 800a3e2:	a801      	add	r0, sp, #4
 800a3e4:	f7ff fd5a 	bl	8009e9c <__lo0bits>
 800a3e8:	9b01      	ldr	r3, [sp, #4]
 800a3ea:	6163      	str	r3, [r4, #20]
 800a3ec:	2201      	movs	r2, #1
 800a3ee:	6122      	str	r2, [r4, #16]
 800a3f0:	3020      	adds	r0, #32
 800a3f2:	e7e3      	b.n	800a3bc <__d2b+0x60>
 800a3f4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a3f8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a3fc:	f8c9 0000 	str.w	r0, [r9]
 800a400:	6918      	ldr	r0, [r3, #16]
 800a402:	f7ff fd2b 	bl	8009e5c <__hi0bits>
 800a406:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a40a:	e7df      	b.n	800a3cc <__d2b+0x70>
 800a40c:	0800b7eb 	.word	0x0800b7eb
 800a410:	0800b85c 	.word	0x0800b85c

0800a414 <_calloc_r>:
 800a414:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a416:	fba1 2402 	umull	r2, r4, r1, r2
 800a41a:	b94c      	cbnz	r4, 800a430 <_calloc_r+0x1c>
 800a41c:	4611      	mov	r1, r2
 800a41e:	9201      	str	r2, [sp, #4]
 800a420:	f000 f87a 	bl	800a518 <_malloc_r>
 800a424:	9a01      	ldr	r2, [sp, #4]
 800a426:	4605      	mov	r5, r0
 800a428:	b930      	cbnz	r0, 800a438 <_calloc_r+0x24>
 800a42a:	4628      	mov	r0, r5
 800a42c:	b003      	add	sp, #12
 800a42e:	bd30      	pop	{r4, r5, pc}
 800a430:	220c      	movs	r2, #12
 800a432:	6002      	str	r2, [r0, #0]
 800a434:	2500      	movs	r5, #0
 800a436:	e7f8      	b.n	800a42a <_calloc_r+0x16>
 800a438:	4621      	mov	r1, r4
 800a43a:	f7fd fdff 	bl	800803c <memset>
 800a43e:	e7f4      	b.n	800a42a <_calloc_r+0x16>

0800a440 <_free_r>:
 800a440:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a442:	2900      	cmp	r1, #0
 800a444:	d044      	beq.n	800a4d0 <_free_r+0x90>
 800a446:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a44a:	9001      	str	r0, [sp, #4]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	f1a1 0404 	sub.w	r4, r1, #4
 800a452:	bfb8      	it	lt
 800a454:	18e4      	addlt	r4, r4, r3
 800a456:	f000 fb19 	bl	800aa8c <__malloc_lock>
 800a45a:	4a1e      	ldr	r2, [pc, #120]	; (800a4d4 <_free_r+0x94>)
 800a45c:	9801      	ldr	r0, [sp, #4]
 800a45e:	6813      	ldr	r3, [r2, #0]
 800a460:	b933      	cbnz	r3, 800a470 <_free_r+0x30>
 800a462:	6063      	str	r3, [r4, #4]
 800a464:	6014      	str	r4, [r2, #0]
 800a466:	b003      	add	sp, #12
 800a468:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a46c:	f000 bb14 	b.w	800aa98 <__malloc_unlock>
 800a470:	42a3      	cmp	r3, r4
 800a472:	d908      	bls.n	800a486 <_free_r+0x46>
 800a474:	6825      	ldr	r5, [r4, #0]
 800a476:	1961      	adds	r1, r4, r5
 800a478:	428b      	cmp	r3, r1
 800a47a:	bf01      	itttt	eq
 800a47c:	6819      	ldreq	r1, [r3, #0]
 800a47e:	685b      	ldreq	r3, [r3, #4]
 800a480:	1949      	addeq	r1, r1, r5
 800a482:	6021      	streq	r1, [r4, #0]
 800a484:	e7ed      	b.n	800a462 <_free_r+0x22>
 800a486:	461a      	mov	r2, r3
 800a488:	685b      	ldr	r3, [r3, #4]
 800a48a:	b10b      	cbz	r3, 800a490 <_free_r+0x50>
 800a48c:	42a3      	cmp	r3, r4
 800a48e:	d9fa      	bls.n	800a486 <_free_r+0x46>
 800a490:	6811      	ldr	r1, [r2, #0]
 800a492:	1855      	adds	r5, r2, r1
 800a494:	42a5      	cmp	r5, r4
 800a496:	d10b      	bne.n	800a4b0 <_free_r+0x70>
 800a498:	6824      	ldr	r4, [r4, #0]
 800a49a:	4421      	add	r1, r4
 800a49c:	1854      	adds	r4, r2, r1
 800a49e:	42a3      	cmp	r3, r4
 800a4a0:	6011      	str	r1, [r2, #0]
 800a4a2:	d1e0      	bne.n	800a466 <_free_r+0x26>
 800a4a4:	681c      	ldr	r4, [r3, #0]
 800a4a6:	685b      	ldr	r3, [r3, #4]
 800a4a8:	6053      	str	r3, [r2, #4]
 800a4aa:	4421      	add	r1, r4
 800a4ac:	6011      	str	r1, [r2, #0]
 800a4ae:	e7da      	b.n	800a466 <_free_r+0x26>
 800a4b0:	d902      	bls.n	800a4b8 <_free_r+0x78>
 800a4b2:	230c      	movs	r3, #12
 800a4b4:	6003      	str	r3, [r0, #0]
 800a4b6:	e7d6      	b.n	800a466 <_free_r+0x26>
 800a4b8:	6825      	ldr	r5, [r4, #0]
 800a4ba:	1961      	adds	r1, r4, r5
 800a4bc:	428b      	cmp	r3, r1
 800a4be:	bf04      	itt	eq
 800a4c0:	6819      	ldreq	r1, [r3, #0]
 800a4c2:	685b      	ldreq	r3, [r3, #4]
 800a4c4:	6063      	str	r3, [r4, #4]
 800a4c6:	bf04      	itt	eq
 800a4c8:	1949      	addeq	r1, r1, r5
 800a4ca:	6021      	streq	r1, [r4, #0]
 800a4cc:	6054      	str	r4, [r2, #4]
 800a4ce:	e7ca      	b.n	800a466 <_free_r+0x26>
 800a4d0:	b003      	add	sp, #12
 800a4d2:	bd30      	pop	{r4, r5, pc}
 800a4d4:	20004d24 	.word	0x20004d24

0800a4d8 <sbrk_aligned>:
 800a4d8:	b570      	push	{r4, r5, r6, lr}
 800a4da:	4e0e      	ldr	r6, [pc, #56]	; (800a514 <sbrk_aligned+0x3c>)
 800a4dc:	460c      	mov	r4, r1
 800a4de:	6831      	ldr	r1, [r6, #0]
 800a4e0:	4605      	mov	r5, r0
 800a4e2:	b911      	cbnz	r1, 800a4ea <sbrk_aligned+0x12>
 800a4e4:	f000 f9e6 	bl	800a8b4 <_sbrk_r>
 800a4e8:	6030      	str	r0, [r6, #0]
 800a4ea:	4621      	mov	r1, r4
 800a4ec:	4628      	mov	r0, r5
 800a4ee:	f000 f9e1 	bl	800a8b4 <_sbrk_r>
 800a4f2:	1c43      	adds	r3, r0, #1
 800a4f4:	d00a      	beq.n	800a50c <sbrk_aligned+0x34>
 800a4f6:	1cc4      	adds	r4, r0, #3
 800a4f8:	f024 0403 	bic.w	r4, r4, #3
 800a4fc:	42a0      	cmp	r0, r4
 800a4fe:	d007      	beq.n	800a510 <sbrk_aligned+0x38>
 800a500:	1a21      	subs	r1, r4, r0
 800a502:	4628      	mov	r0, r5
 800a504:	f000 f9d6 	bl	800a8b4 <_sbrk_r>
 800a508:	3001      	adds	r0, #1
 800a50a:	d101      	bne.n	800a510 <sbrk_aligned+0x38>
 800a50c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a510:	4620      	mov	r0, r4
 800a512:	bd70      	pop	{r4, r5, r6, pc}
 800a514:	20004d28 	.word	0x20004d28

0800a518 <_malloc_r>:
 800a518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a51c:	1ccd      	adds	r5, r1, #3
 800a51e:	f025 0503 	bic.w	r5, r5, #3
 800a522:	3508      	adds	r5, #8
 800a524:	2d0c      	cmp	r5, #12
 800a526:	bf38      	it	cc
 800a528:	250c      	movcc	r5, #12
 800a52a:	2d00      	cmp	r5, #0
 800a52c:	4607      	mov	r7, r0
 800a52e:	db01      	blt.n	800a534 <_malloc_r+0x1c>
 800a530:	42a9      	cmp	r1, r5
 800a532:	d905      	bls.n	800a540 <_malloc_r+0x28>
 800a534:	230c      	movs	r3, #12
 800a536:	603b      	str	r3, [r7, #0]
 800a538:	2600      	movs	r6, #0
 800a53a:	4630      	mov	r0, r6
 800a53c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a540:	4e2e      	ldr	r6, [pc, #184]	; (800a5fc <_malloc_r+0xe4>)
 800a542:	f000 faa3 	bl	800aa8c <__malloc_lock>
 800a546:	6833      	ldr	r3, [r6, #0]
 800a548:	461c      	mov	r4, r3
 800a54a:	bb34      	cbnz	r4, 800a59a <_malloc_r+0x82>
 800a54c:	4629      	mov	r1, r5
 800a54e:	4638      	mov	r0, r7
 800a550:	f7ff ffc2 	bl	800a4d8 <sbrk_aligned>
 800a554:	1c43      	adds	r3, r0, #1
 800a556:	4604      	mov	r4, r0
 800a558:	d14d      	bne.n	800a5f6 <_malloc_r+0xde>
 800a55a:	6834      	ldr	r4, [r6, #0]
 800a55c:	4626      	mov	r6, r4
 800a55e:	2e00      	cmp	r6, #0
 800a560:	d140      	bne.n	800a5e4 <_malloc_r+0xcc>
 800a562:	6823      	ldr	r3, [r4, #0]
 800a564:	4631      	mov	r1, r6
 800a566:	4638      	mov	r0, r7
 800a568:	eb04 0803 	add.w	r8, r4, r3
 800a56c:	f000 f9a2 	bl	800a8b4 <_sbrk_r>
 800a570:	4580      	cmp	r8, r0
 800a572:	d13a      	bne.n	800a5ea <_malloc_r+0xd2>
 800a574:	6821      	ldr	r1, [r4, #0]
 800a576:	3503      	adds	r5, #3
 800a578:	1a6d      	subs	r5, r5, r1
 800a57a:	f025 0503 	bic.w	r5, r5, #3
 800a57e:	3508      	adds	r5, #8
 800a580:	2d0c      	cmp	r5, #12
 800a582:	bf38      	it	cc
 800a584:	250c      	movcc	r5, #12
 800a586:	4629      	mov	r1, r5
 800a588:	4638      	mov	r0, r7
 800a58a:	f7ff ffa5 	bl	800a4d8 <sbrk_aligned>
 800a58e:	3001      	adds	r0, #1
 800a590:	d02b      	beq.n	800a5ea <_malloc_r+0xd2>
 800a592:	6823      	ldr	r3, [r4, #0]
 800a594:	442b      	add	r3, r5
 800a596:	6023      	str	r3, [r4, #0]
 800a598:	e00e      	b.n	800a5b8 <_malloc_r+0xa0>
 800a59a:	6822      	ldr	r2, [r4, #0]
 800a59c:	1b52      	subs	r2, r2, r5
 800a59e:	d41e      	bmi.n	800a5de <_malloc_r+0xc6>
 800a5a0:	2a0b      	cmp	r2, #11
 800a5a2:	d916      	bls.n	800a5d2 <_malloc_r+0xba>
 800a5a4:	1961      	adds	r1, r4, r5
 800a5a6:	42a3      	cmp	r3, r4
 800a5a8:	6025      	str	r5, [r4, #0]
 800a5aa:	bf18      	it	ne
 800a5ac:	6059      	strne	r1, [r3, #4]
 800a5ae:	6863      	ldr	r3, [r4, #4]
 800a5b0:	bf08      	it	eq
 800a5b2:	6031      	streq	r1, [r6, #0]
 800a5b4:	5162      	str	r2, [r4, r5]
 800a5b6:	604b      	str	r3, [r1, #4]
 800a5b8:	4638      	mov	r0, r7
 800a5ba:	f104 060b 	add.w	r6, r4, #11
 800a5be:	f000 fa6b 	bl	800aa98 <__malloc_unlock>
 800a5c2:	f026 0607 	bic.w	r6, r6, #7
 800a5c6:	1d23      	adds	r3, r4, #4
 800a5c8:	1af2      	subs	r2, r6, r3
 800a5ca:	d0b6      	beq.n	800a53a <_malloc_r+0x22>
 800a5cc:	1b9b      	subs	r3, r3, r6
 800a5ce:	50a3      	str	r3, [r4, r2]
 800a5d0:	e7b3      	b.n	800a53a <_malloc_r+0x22>
 800a5d2:	6862      	ldr	r2, [r4, #4]
 800a5d4:	42a3      	cmp	r3, r4
 800a5d6:	bf0c      	ite	eq
 800a5d8:	6032      	streq	r2, [r6, #0]
 800a5da:	605a      	strne	r2, [r3, #4]
 800a5dc:	e7ec      	b.n	800a5b8 <_malloc_r+0xa0>
 800a5de:	4623      	mov	r3, r4
 800a5e0:	6864      	ldr	r4, [r4, #4]
 800a5e2:	e7b2      	b.n	800a54a <_malloc_r+0x32>
 800a5e4:	4634      	mov	r4, r6
 800a5e6:	6876      	ldr	r6, [r6, #4]
 800a5e8:	e7b9      	b.n	800a55e <_malloc_r+0x46>
 800a5ea:	230c      	movs	r3, #12
 800a5ec:	603b      	str	r3, [r7, #0]
 800a5ee:	4638      	mov	r0, r7
 800a5f0:	f000 fa52 	bl	800aa98 <__malloc_unlock>
 800a5f4:	e7a1      	b.n	800a53a <_malloc_r+0x22>
 800a5f6:	6025      	str	r5, [r4, #0]
 800a5f8:	e7de      	b.n	800a5b8 <_malloc_r+0xa0>
 800a5fa:	bf00      	nop
 800a5fc:	20004d24 	.word	0x20004d24

0800a600 <__sfputc_r>:
 800a600:	6893      	ldr	r3, [r2, #8]
 800a602:	3b01      	subs	r3, #1
 800a604:	2b00      	cmp	r3, #0
 800a606:	b410      	push	{r4}
 800a608:	6093      	str	r3, [r2, #8]
 800a60a:	da08      	bge.n	800a61e <__sfputc_r+0x1e>
 800a60c:	6994      	ldr	r4, [r2, #24]
 800a60e:	42a3      	cmp	r3, r4
 800a610:	db01      	blt.n	800a616 <__sfputc_r+0x16>
 800a612:	290a      	cmp	r1, #10
 800a614:	d103      	bne.n	800a61e <__sfputc_r+0x1e>
 800a616:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a61a:	f7fe ba0f 	b.w	8008a3c <__swbuf_r>
 800a61e:	6813      	ldr	r3, [r2, #0]
 800a620:	1c58      	adds	r0, r3, #1
 800a622:	6010      	str	r0, [r2, #0]
 800a624:	7019      	strb	r1, [r3, #0]
 800a626:	4608      	mov	r0, r1
 800a628:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a62c:	4770      	bx	lr

0800a62e <__sfputs_r>:
 800a62e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a630:	4606      	mov	r6, r0
 800a632:	460f      	mov	r7, r1
 800a634:	4614      	mov	r4, r2
 800a636:	18d5      	adds	r5, r2, r3
 800a638:	42ac      	cmp	r4, r5
 800a63a:	d101      	bne.n	800a640 <__sfputs_r+0x12>
 800a63c:	2000      	movs	r0, #0
 800a63e:	e007      	b.n	800a650 <__sfputs_r+0x22>
 800a640:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a644:	463a      	mov	r2, r7
 800a646:	4630      	mov	r0, r6
 800a648:	f7ff ffda 	bl	800a600 <__sfputc_r>
 800a64c:	1c43      	adds	r3, r0, #1
 800a64e:	d1f3      	bne.n	800a638 <__sfputs_r+0xa>
 800a650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a654 <_vfiprintf_r>:
 800a654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a658:	460d      	mov	r5, r1
 800a65a:	b09d      	sub	sp, #116	; 0x74
 800a65c:	4614      	mov	r4, r2
 800a65e:	4698      	mov	r8, r3
 800a660:	4606      	mov	r6, r0
 800a662:	b118      	cbz	r0, 800a66c <_vfiprintf_r+0x18>
 800a664:	6983      	ldr	r3, [r0, #24]
 800a666:	b90b      	cbnz	r3, 800a66c <_vfiprintf_r+0x18>
 800a668:	f7ff fa3e 	bl	8009ae8 <__sinit>
 800a66c:	4b89      	ldr	r3, [pc, #548]	; (800a894 <_vfiprintf_r+0x240>)
 800a66e:	429d      	cmp	r5, r3
 800a670:	d11b      	bne.n	800a6aa <_vfiprintf_r+0x56>
 800a672:	6875      	ldr	r5, [r6, #4]
 800a674:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a676:	07d9      	lsls	r1, r3, #31
 800a678:	d405      	bmi.n	800a686 <_vfiprintf_r+0x32>
 800a67a:	89ab      	ldrh	r3, [r5, #12]
 800a67c:	059a      	lsls	r2, r3, #22
 800a67e:	d402      	bmi.n	800a686 <_vfiprintf_r+0x32>
 800a680:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a682:	f7ff fad4 	bl	8009c2e <__retarget_lock_acquire_recursive>
 800a686:	89ab      	ldrh	r3, [r5, #12]
 800a688:	071b      	lsls	r3, r3, #28
 800a68a:	d501      	bpl.n	800a690 <_vfiprintf_r+0x3c>
 800a68c:	692b      	ldr	r3, [r5, #16]
 800a68e:	b9eb      	cbnz	r3, 800a6cc <_vfiprintf_r+0x78>
 800a690:	4629      	mov	r1, r5
 800a692:	4630      	mov	r0, r6
 800a694:	f7fe fa24 	bl	8008ae0 <__swsetup_r>
 800a698:	b1c0      	cbz	r0, 800a6cc <_vfiprintf_r+0x78>
 800a69a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a69c:	07dc      	lsls	r4, r3, #31
 800a69e:	d50e      	bpl.n	800a6be <_vfiprintf_r+0x6a>
 800a6a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a6a4:	b01d      	add	sp, #116	; 0x74
 800a6a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6aa:	4b7b      	ldr	r3, [pc, #492]	; (800a898 <_vfiprintf_r+0x244>)
 800a6ac:	429d      	cmp	r5, r3
 800a6ae:	d101      	bne.n	800a6b4 <_vfiprintf_r+0x60>
 800a6b0:	68b5      	ldr	r5, [r6, #8]
 800a6b2:	e7df      	b.n	800a674 <_vfiprintf_r+0x20>
 800a6b4:	4b79      	ldr	r3, [pc, #484]	; (800a89c <_vfiprintf_r+0x248>)
 800a6b6:	429d      	cmp	r5, r3
 800a6b8:	bf08      	it	eq
 800a6ba:	68f5      	ldreq	r5, [r6, #12]
 800a6bc:	e7da      	b.n	800a674 <_vfiprintf_r+0x20>
 800a6be:	89ab      	ldrh	r3, [r5, #12]
 800a6c0:	0598      	lsls	r0, r3, #22
 800a6c2:	d4ed      	bmi.n	800a6a0 <_vfiprintf_r+0x4c>
 800a6c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a6c6:	f7ff fab3 	bl	8009c30 <__retarget_lock_release_recursive>
 800a6ca:	e7e9      	b.n	800a6a0 <_vfiprintf_r+0x4c>
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	9309      	str	r3, [sp, #36]	; 0x24
 800a6d0:	2320      	movs	r3, #32
 800a6d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a6d6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a6da:	2330      	movs	r3, #48	; 0x30
 800a6dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a8a0 <_vfiprintf_r+0x24c>
 800a6e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a6e4:	f04f 0901 	mov.w	r9, #1
 800a6e8:	4623      	mov	r3, r4
 800a6ea:	469a      	mov	sl, r3
 800a6ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a6f0:	b10a      	cbz	r2, 800a6f6 <_vfiprintf_r+0xa2>
 800a6f2:	2a25      	cmp	r2, #37	; 0x25
 800a6f4:	d1f9      	bne.n	800a6ea <_vfiprintf_r+0x96>
 800a6f6:	ebba 0b04 	subs.w	fp, sl, r4
 800a6fa:	d00b      	beq.n	800a714 <_vfiprintf_r+0xc0>
 800a6fc:	465b      	mov	r3, fp
 800a6fe:	4622      	mov	r2, r4
 800a700:	4629      	mov	r1, r5
 800a702:	4630      	mov	r0, r6
 800a704:	f7ff ff93 	bl	800a62e <__sfputs_r>
 800a708:	3001      	adds	r0, #1
 800a70a:	f000 80aa 	beq.w	800a862 <_vfiprintf_r+0x20e>
 800a70e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a710:	445a      	add	r2, fp
 800a712:	9209      	str	r2, [sp, #36]	; 0x24
 800a714:	f89a 3000 	ldrb.w	r3, [sl]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	f000 80a2 	beq.w	800a862 <_vfiprintf_r+0x20e>
 800a71e:	2300      	movs	r3, #0
 800a720:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a724:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a728:	f10a 0a01 	add.w	sl, sl, #1
 800a72c:	9304      	str	r3, [sp, #16]
 800a72e:	9307      	str	r3, [sp, #28]
 800a730:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a734:	931a      	str	r3, [sp, #104]	; 0x68
 800a736:	4654      	mov	r4, sl
 800a738:	2205      	movs	r2, #5
 800a73a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a73e:	4858      	ldr	r0, [pc, #352]	; (800a8a0 <_vfiprintf_r+0x24c>)
 800a740:	f7f5 fd56 	bl	80001f0 <memchr>
 800a744:	9a04      	ldr	r2, [sp, #16]
 800a746:	b9d8      	cbnz	r0, 800a780 <_vfiprintf_r+0x12c>
 800a748:	06d1      	lsls	r1, r2, #27
 800a74a:	bf44      	itt	mi
 800a74c:	2320      	movmi	r3, #32
 800a74e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a752:	0713      	lsls	r3, r2, #28
 800a754:	bf44      	itt	mi
 800a756:	232b      	movmi	r3, #43	; 0x2b
 800a758:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a75c:	f89a 3000 	ldrb.w	r3, [sl]
 800a760:	2b2a      	cmp	r3, #42	; 0x2a
 800a762:	d015      	beq.n	800a790 <_vfiprintf_r+0x13c>
 800a764:	9a07      	ldr	r2, [sp, #28]
 800a766:	4654      	mov	r4, sl
 800a768:	2000      	movs	r0, #0
 800a76a:	f04f 0c0a 	mov.w	ip, #10
 800a76e:	4621      	mov	r1, r4
 800a770:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a774:	3b30      	subs	r3, #48	; 0x30
 800a776:	2b09      	cmp	r3, #9
 800a778:	d94e      	bls.n	800a818 <_vfiprintf_r+0x1c4>
 800a77a:	b1b0      	cbz	r0, 800a7aa <_vfiprintf_r+0x156>
 800a77c:	9207      	str	r2, [sp, #28]
 800a77e:	e014      	b.n	800a7aa <_vfiprintf_r+0x156>
 800a780:	eba0 0308 	sub.w	r3, r0, r8
 800a784:	fa09 f303 	lsl.w	r3, r9, r3
 800a788:	4313      	orrs	r3, r2
 800a78a:	9304      	str	r3, [sp, #16]
 800a78c:	46a2      	mov	sl, r4
 800a78e:	e7d2      	b.n	800a736 <_vfiprintf_r+0xe2>
 800a790:	9b03      	ldr	r3, [sp, #12]
 800a792:	1d19      	adds	r1, r3, #4
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	9103      	str	r1, [sp, #12]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	bfbb      	ittet	lt
 800a79c:	425b      	neglt	r3, r3
 800a79e:	f042 0202 	orrlt.w	r2, r2, #2
 800a7a2:	9307      	strge	r3, [sp, #28]
 800a7a4:	9307      	strlt	r3, [sp, #28]
 800a7a6:	bfb8      	it	lt
 800a7a8:	9204      	strlt	r2, [sp, #16]
 800a7aa:	7823      	ldrb	r3, [r4, #0]
 800a7ac:	2b2e      	cmp	r3, #46	; 0x2e
 800a7ae:	d10c      	bne.n	800a7ca <_vfiprintf_r+0x176>
 800a7b0:	7863      	ldrb	r3, [r4, #1]
 800a7b2:	2b2a      	cmp	r3, #42	; 0x2a
 800a7b4:	d135      	bne.n	800a822 <_vfiprintf_r+0x1ce>
 800a7b6:	9b03      	ldr	r3, [sp, #12]
 800a7b8:	1d1a      	adds	r2, r3, #4
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	9203      	str	r2, [sp, #12]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	bfb8      	it	lt
 800a7c2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a7c6:	3402      	adds	r4, #2
 800a7c8:	9305      	str	r3, [sp, #20]
 800a7ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a8b0 <_vfiprintf_r+0x25c>
 800a7ce:	7821      	ldrb	r1, [r4, #0]
 800a7d0:	2203      	movs	r2, #3
 800a7d2:	4650      	mov	r0, sl
 800a7d4:	f7f5 fd0c 	bl	80001f0 <memchr>
 800a7d8:	b140      	cbz	r0, 800a7ec <_vfiprintf_r+0x198>
 800a7da:	2340      	movs	r3, #64	; 0x40
 800a7dc:	eba0 000a 	sub.w	r0, r0, sl
 800a7e0:	fa03 f000 	lsl.w	r0, r3, r0
 800a7e4:	9b04      	ldr	r3, [sp, #16]
 800a7e6:	4303      	orrs	r3, r0
 800a7e8:	3401      	adds	r4, #1
 800a7ea:	9304      	str	r3, [sp, #16]
 800a7ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7f0:	482c      	ldr	r0, [pc, #176]	; (800a8a4 <_vfiprintf_r+0x250>)
 800a7f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a7f6:	2206      	movs	r2, #6
 800a7f8:	f7f5 fcfa 	bl	80001f0 <memchr>
 800a7fc:	2800      	cmp	r0, #0
 800a7fe:	d03f      	beq.n	800a880 <_vfiprintf_r+0x22c>
 800a800:	4b29      	ldr	r3, [pc, #164]	; (800a8a8 <_vfiprintf_r+0x254>)
 800a802:	bb1b      	cbnz	r3, 800a84c <_vfiprintf_r+0x1f8>
 800a804:	9b03      	ldr	r3, [sp, #12]
 800a806:	3307      	adds	r3, #7
 800a808:	f023 0307 	bic.w	r3, r3, #7
 800a80c:	3308      	adds	r3, #8
 800a80e:	9303      	str	r3, [sp, #12]
 800a810:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a812:	443b      	add	r3, r7
 800a814:	9309      	str	r3, [sp, #36]	; 0x24
 800a816:	e767      	b.n	800a6e8 <_vfiprintf_r+0x94>
 800a818:	fb0c 3202 	mla	r2, ip, r2, r3
 800a81c:	460c      	mov	r4, r1
 800a81e:	2001      	movs	r0, #1
 800a820:	e7a5      	b.n	800a76e <_vfiprintf_r+0x11a>
 800a822:	2300      	movs	r3, #0
 800a824:	3401      	adds	r4, #1
 800a826:	9305      	str	r3, [sp, #20]
 800a828:	4619      	mov	r1, r3
 800a82a:	f04f 0c0a 	mov.w	ip, #10
 800a82e:	4620      	mov	r0, r4
 800a830:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a834:	3a30      	subs	r2, #48	; 0x30
 800a836:	2a09      	cmp	r2, #9
 800a838:	d903      	bls.n	800a842 <_vfiprintf_r+0x1ee>
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d0c5      	beq.n	800a7ca <_vfiprintf_r+0x176>
 800a83e:	9105      	str	r1, [sp, #20]
 800a840:	e7c3      	b.n	800a7ca <_vfiprintf_r+0x176>
 800a842:	fb0c 2101 	mla	r1, ip, r1, r2
 800a846:	4604      	mov	r4, r0
 800a848:	2301      	movs	r3, #1
 800a84a:	e7f0      	b.n	800a82e <_vfiprintf_r+0x1da>
 800a84c:	ab03      	add	r3, sp, #12
 800a84e:	9300      	str	r3, [sp, #0]
 800a850:	462a      	mov	r2, r5
 800a852:	4b16      	ldr	r3, [pc, #88]	; (800a8ac <_vfiprintf_r+0x258>)
 800a854:	a904      	add	r1, sp, #16
 800a856:	4630      	mov	r0, r6
 800a858:	f7fd fc98 	bl	800818c <_printf_float>
 800a85c:	4607      	mov	r7, r0
 800a85e:	1c78      	adds	r0, r7, #1
 800a860:	d1d6      	bne.n	800a810 <_vfiprintf_r+0x1bc>
 800a862:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a864:	07d9      	lsls	r1, r3, #31
 800a866:	d405      	bmi.n	800a874 <_vfiprintf_r+0x220>
 800a868:	89ab      	ldrh	r3, [r5, #12]
 800a86a:	059a      	lsls	r2, r3, #22
 800a86c:	d402      	bmi.n	800a874 <_vfiprintf_r+0x220>
 800a86e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a870:	f7ff f9de 	bl	8009c30 <__retarget_lock_release_recursive>
 800a874:	89ab      	ldrh	r3, [r5, #12]
 800a876:	065b      	lsls	r3, r3, #25
 800a878:	f53f af12 	bmi.w	800a6a0 <_vfiprintf_r+0x4c>
 800a87c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a87e:	e711      	b.n	800a6a4 <_vfiprintf_r+0x50>
 800a880:	ab03      	add	r3, sp, #12
 800a882:	9300      	str	r3, [sp, #0]
 800a884:	462a      	mov	r2, r5
 800a886:	4b09      	ldr	r3, [pc, #36]	; (800a8ac <_vfiprintf_r+0x258>)
 800a888:	a904      	add	r1, sp, #16
 800a88a:	4630      	mov	r0, r6
 800a88c:	f7fd ff22 	bl	80086d4 <_printf_i>
 800a890:	e7e4      	b.n	800a85c <_vfiprintf_r+0x208>
 800a892:	bf00      	nop
 800a894:	0800b81c 	.word	0x0800b81c
 800a898:	0800b83c 	.word	0x0800b83c
 800a89c:	0800b7fc 	.word	0x0800b7fc
 800a8a0:	0800b9b4 	.word	0x0800b9b4
 800a8a4:	0800b9be 	.word	0x0800b9be
 800a8a8:	0800818d 	.word	0x0800818d
 800a8ac:	0800a62f 	.word	0x0800a62f
 800a8b0:	0800b9ba 	.word	0x0800b9ba

0800a8b4 <_sbrk_r>:
 800a8b4:	b538      	push	{r3, r4, r5, lr}
 800a8b6:	4d06      	ldr	r5, [pc, #24]	; (800a8d0 <_sbrk_r+0x1c>)
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	4604      	mov	r4, r0
 800a8bc:	4608      	mov	r0, r1
 800a8be:	602b      	str	r3, [r5, #0]
 800a8c0:	f7f7 fc22 	bl	8002108 <_sbrk>
 800a8c4:	1c43      	adds	r3, r0, #1
 800a8c6:	d102      	bne.n	800a8ce <_sbrk_r+0x1a>
 800a8c8:	682b      	ldr	r3, [r5, #0]
 800a8ca:	b103      	cbz	r3, 800a8ce <_sbrk_r+0x1a>
 800a8cc:	6023      	str	r3, [r4, #0]
 800a8ce:	bd38      	pop	{r3, r4, r5, pc}
 800a8d0:	20004d2c 	.word	0x20004d2c

0800a8d4 <__sread>:
 800a8d4:	b510      	push	{r4, lr}
 800a8d6:	460c      	mov	r4, r1
 800a8d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8dc:	f000 f8e2 	bl	800aaa4 <_read_r>
 800a8e0:	2800      	cmp	r0, #0
 800a8e2:	bfab      	itete	ge
 800a8e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a8e6:	89a3      	ldrhlt	r3, [r4, #12]
 800a8e8:	181b      	addge	r3, r3, r0
 800a8ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a8ee:	bfac      	ite	ge
 800a8f0:	6563      	strge	r3, [r4, #84]	; 0x54
 800a8f2:	81a3      	strhlt	r3, [r4, #12]
 800a8f4:	bd10      	pop	{r4, pc}

0800a8f6 <__swrite>:
 800a8f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8fa:	461f      	mov	r7, r3
 800a8fc:	898b      	ldrh	r3, [r1, #12]
 800a8fe:	05db      	lsls	r3, r3, #23
 800a900:	4605      	mov	r5, r0
 800a902:	460c      	mov	r4, r1
 800a904:	4616      	mov	r6, r2
 800a906:	d505      	bpl.n	800a914 <__swrite+0x1e>
 800a908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a90c:	2302      	movs	r3, #2
 800a90e:	2200      	movs	r2, #0
 800a910:	f000 f898 	bl	800aa44 <_lseek_r>
 800a914:	89a3      	ldrh	r3, [r4, #12]
 800a916:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a91a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a91e:	81a3      	strh	r3, [r4, #12]
 800a920:	4632      	mov	r2, r6
 800a922:	463b      	mov	r3, r7
 800a924:	4628      	mov	r0, r5
 800a926:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a92a:	f000 b817 	b.w	800a95c <_write_r>

0800a92e <__sseek>:
 800a92e:	b510      	push	{r4, lr}
 800a930:	460c      	mov	r4, r1
 800a932:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a936:	f000 f885 	bl	800aa44 <_lseek_r>
 800a93a:	1c43      	adds	r3, r0, #1
 800a93c:	89a3      	ldrh	r3, [r4, #12]
 800a93e:	bf15      	itete	ne
 800a940:	6560      	strne	r0, [r4, #84]	; 0x54
 800a942:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a946:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a94a:	81a3      	strheq	r3, [r4, #12]
 800a94c:	bf18      	it	ne
 800a94e:	81a3      	strhne	r3, [r4, #12]
 800a950:	bd10      	pop	{r4, pc}

0800a952 <__sclose>:
 800a952:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a956:	f000 b831 	b.w	800a9bc <_close_r>
	...

0800a95c <_write_r>:
 800a95c:	b538      	push	{r3, r4, r5, lr}
 800a95e:	4d07      	ldr	r5, [pc, #28]	; (800a97c <_write_r+0x20>)
 800a960:	4604      	mov	r4, r0
 800a962:	4608      	mov	r0, r1
 800a964:	4611      	mov	r1, r2
 800a966:	2200      	movs	r2, #0
 800a968:	602a      	str	r2, [r5, #0]
 800a96a:	461a      	mov	r2, r3
 800a96c:	f7f7 fb7b 	bl	8002066 <_write>
 800a970:	1c43      	adds	r3, r0, #1
 800a972:	d102      	bne.n	800a97a <_write_r+0x1e>
 800a974:	682b      	ldr	r3, [r5, #0]
 800a976:	b103      	cbz	r3, 800a97a <_write_r+0x1e>
 800a978:	6023      	str	r3, [r4, #0]
 800a97a:	bd38      	pop	{r3, r4, r5, pc}
 800a97c:	20004d2c 	.word	0x20004d2c

0800a980 <__assert_func>:
 800a980:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a982:	4614      	mov	r4, r2
 800a984:	461a      	mov	r2, r3
 800a986:	4b09      	ldr	r3, [pc, #36]	; (800a9ac <__assert_func+0x2c>)
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	4605      	mov	r5, r0
 800a98c:	68d8      	ldr	r0, [r3, #12]
 800a98e:	b14c      	cbz	r4, 800a9a4 <__assert_func+0x24>
 800a990:	4b07      	ldr	r3, [pc, #28]	; (800a9b0 <__assert_func+0x30>)
 800a992:	9100      	str	r1, [sp, #0]
 800a994:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a998:	4906      	ldr	r1, [pc, #24]	; (800a9b4 <__assert_func+0x34>)
 800a99a:	462b      	mov	r3, r5
 800a99c:	f000 f81e 	bl	800a9dc <fiprintf>
 800a9a0:	f000 f89f 	bl	800aae2 <abort>
 800a9a4:	4b04      	ldr	r3, [pc, #16]	; (800a9b8 <__assert_func+0x38>)
 800a9a6:	461c      	mov	r4, r3
 800a9a8:	e7f3      	b.n	800a992 <__assert_func+0x12>
 800a9aa:	bf00      	nop
 800a9ac:	20000020 	.word	0x20000020
 800a9b0:	0800b9c5 	.word	0x0800b9c5
 800a9b4:	0800b9d2 	.word	0x0800b9d2
 800a9b8:	0800ba00 	.word	0x0800ba00

0800a9bc <_close_r>:
 800a9bc:	b538      	push	{r3, r4, r5, lr}
 800a9be:	4d06      	ldr	r5, [pc, #24]	; (800a9d8 <_close_r+0x1c>)
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	4604      	mov	r4, r0
 800a9c4:	4608      	mov	r0, r1
 800a9c6:	602b      	str	r3, [r5, #0]
 800a9c8:	f7f7 fb69 	bl	800209e <_close>
 800a9cc:	1c43      	adds	r3, r0, #1
 800a9ce:	d102      	bne.n	800a9d6 <_close_r+0x1a>
 800a9d0:	682b      	ldr	r3, [r5, #0]
 800a9d2:	b103      	cbz	r3, 800a9d6 <_close_r+0x1a>
 800a9d4:	6023      	str	r3, [r4, #0]
 800a9d6:	bd38      	pop	{r3, r4, r5, pc}
 800a9d8:	20004d2c 	.word	0x20004d2c

0800a9dc <fiprintf>:
 800a9dc:	b40e      	push	{r1, r2, r3}
 800a9de:	b503      	push	{r0, r1, lr}
 800a9e0:	4601      	mov	r1, r0
 800a9e2:	ab03      	add	r3, sp, #12
 800a9e4:	4805      	ldr	r0, [pc, #20]	; (800a9fc <fiprintf+0x20>)
 800a9e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9ea:	6800      	ldr	r0, [r0, #0]
 800a9ec:	9301      	str	r3, [sp, #4]
 800a9ee:	f7ff fe31 	bl	800a654 <_vfiprintf_r>
 800a9f2:	b002      	add	sp, #8
 800a9f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a9f8:	b003      	add	sp, #12
 800a9fa:	4770      	bx	lr
 800a9fc:	20000020 	.word	0x20000020

0800aa00 <_fstat_r>:
 800aa00:	b538      	push	{r3, r4, r5, lr}
 800aa02:	4d07      	ldr	r5, [pc, #28]	; (800aa20 <_fstat_r+0x20>)
 800aa04:	2300      	movs	r3, #0
 800aa06:	4604      	mov	r4, r0
 800aa08:	4608      	mov	r0, r1
 800aa0a:	4611      	mov	r1, r2
 800aa0c:	602b      	str	r3, [r5, #0]
 800aa0e:	f7f7 fb52 	bl	80020b6 <_fstat>
 800aa12:	1c43      	adds	r3, r0, #1
 800aa14:	d102      	bne.n	800aa1c <_fstat_r+0x1c>
 800aa16:	682b      	ldr	r3, [r5, #0]
 800aa18:	b103      	cbz	r3, 800aa1c <_fstat_r+0x1c>
 800aa1a:	6023      	str	r3, [r4, #0]
 800aa1c:	bd38      	pop	{r3, r4, r5, pc}
 800aa1e:	bf00      	nop
 800aa20:	20004d2c 	.word	0x20004d2c

0800aa24 <_isatty_r>:
 800aa24:	b538      	push	{r3, r4, r5, lr}
 800aa26:	4d06      	ldr	r5, [pc, #24]	; (800aa40 <_isatty_r+0x1c>)
 800aa28:	2300      	movs	r3, #0
 800aa2a:	4604      	mov	r4, r0
 800aa2c:	4608      	mov	r0, r1
 800aa2e:	602b      	str	r3, [r5, #0]
 800aa30:	f7f7 fb51 	bl	80020d6 <_isatty>
 800aa34:	1c43      	adds	r3, r0, #1
 800aa36:	d102      	bne.n	800aa3e <_isatty_r+0x1a>
 800aa38:	682b      	ldr	r3, [r5, #0]
 800aa3a:	b103      	cbz	r3, 800aa3e <_isatty_r+0x1a>
 800aa3c:	6023      	str	r3, [r4, #0]
 800aa3e:	bd38      	pop	{r3, r4, r5, pc}
 800aa40:	20004d2c 	.word	0x20004d2c

0800aa44 <_lseek_r>:
 800aa44:	b538      	push	{r3, r4, r5, lr}
 800aa46:	4d07      	ldr	r5, [pc, #28]	; (800aa64 <_lseek_r+0x20>)
 800aa48:	4604      	mov	r4, r0
 800aa4a:	4608      	mov	r0, r1
 800aa4c:	4611      	mov	r1, r2
 800aa4e:	2200      	movs	r2, #0
 800aa50:	602a      	str	r2, [r5, #0]
 800aa52:	461a      	mov	r2, r3
 800aa54:	f7f7 fb4a 	bl	80020ec <_lseek>
 800aa58:	1c43      	adds	r3, r0, #1
 800aa5a:	d102      	bne.n	800aa62 <_lseek_r+0x1e>
 800aa5c:	682b      	ldr	r3, [r5, #0]
 800aa5e:	b103      	cbz	r3, 800aa62 <_lseek_r+0x1e>
 800aa60:	6023      	str	r3, [r4, #0]
 800aa62:	bd38      	pop	{r3, r4, r5, pc}
 800aa64:	20004d2c 	.word	0x20004d2c

0800aa68 <__ascii_mbtowc>:
 800aa68:	b082      	sub	sp, #8
 800aa6a:	b901      	cbnz	r1, 800aa6e <__ascii_mbtowc+0x6>
 800aa6c:	a901      	add	r1, sp, #4
 800aa6e:	b142      	cbz	r2, 800aa82 <__ascii_mbtowc+0x1a>
 800aa70:	b14b      	cbz	r3, 800aa86 <__ascii_mbtowc+0x1e>
 800aa72:	7813      	ldrb	r3, [r2, #0]
 800aa74:	600b      	str	r3, [r1, #0]
 800aa76:	7812      	ldrb	r2, [r2, #0]
 800aa78:	1e10      	subs	r0, r2, #0
 800aa7a:	bf18      	it	ne
 800aa7c:	2001      	movne	r0, #1
 800aa7e:	b002      	add	sp, #8
 800aa80:	4770      	bx	lr
 800aa82:	4610      	mov	r0, r2
 800aa84:	e7fb      	b.n	800aa7e <__ascii_mbtowc+0x16>
 800aa86:	f06f 0001 	mvn.w	r0, #1
 800aa8a:	e7f8      	b.n	800aa7e <__ascii_mbtowc+0x16>

0800aa8c <__malloc_lock>:
 800aa8c:	4801      	ldr	r0, [pc, #4]	; (800aa94 <__malloc_lock+0x8>)
 800aa8e:	f7ff b8ce 	b.w	8009c2e <__retarget_lock_acquire_recursive>
 800aa92:	bf00      	nop
 800aa94:	20004d20 	.word	0x20004d20

0800aa98 <__malloc_unlock>:
 800aa98:	4801      	ldr	r0, [pc, #4]	; (800aaa0 <__malloc_unlock+0x8>)
 800aa9a:	f7ff b8c9 	b.w	8009c30 <__retarget_lock_release_recursive>
 800aa9e:	bf00      	nop
 800aaa0:	20004d20 	.word	0x20004d20

0800aaa4 <_read_r>:
 800aaa4:	b538      	push	{r3, r4, r5, lr}
 800aaa6:	4d07      	ldr	r5, [pc, #28]	; (800aac4 <_read_r+0x20>)
 800aaa8:	4604      	mov	r4, r0
 800aaaa:	4608      	mov	r0, r1
 800aaac:	4611      	mov	r1, r2
 800aaae:	2200      	movs	r2, #0
 800aab0:	602a      	str	r2, [r5, #0]
 800aab2:	461a      	mov	r2, r3
 800aab4:	f7f7 faba 	bl	800202c <_read>
 800aab8:	1c43      	adds	r3, r0, #1
 800aaba:	d102      	bne.n	800aac2 <_read_r+0x1e>
 800aabc:	682b      	ldr	r3, [r5, #0]
 800aabe:	b103      	cbz	r3, 800aac2 <_read_r+0x1e>
 800aac0:	6023      	str	r3, [r4, #0]
 800aac2:	bd38      	pop	{r3, r4, r5, pc}
 800aac4:	20004d2c 	.word	0x20004d2c

0800aac8 <__ascii_wctomb>:
 800aac8:	b149      	cbz	r1, 800aade <__ascii_wctomb+0x16>
 800aaca:	2aff      	cmp	r2, #255	; 0xff
 800aacc:	bf85      	ittet	hi
 800aace:	238a      	movhi	r3, #138	; 0x8a
 800aad0:	6003      	strhi	r3, [r0, #0]
 800aad2:	700a      	strbls	r2, [r1, #0]
 800aad4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800aad8:	bf98      	it	ls
 800aada:	2001      	movls	r0, #1
 800aadc:	4770      	bx	lr
 800aade:	4608      	mov	r0, r1
 800aae0:	4770      	bx	lr

0800aae2 <abort>:
 800aae2:	b508      	push	{r3, lr}
 800aae4:	2006      	movs	r0, #6
 800aae6:	f000 f82b 	bl	800ab40 <raise>
 800aaea:	2001      	movs	r0, #1
 800aaec:	f7f7 fa94 	bl	8002018 <_exit>

0800aaf0 <_raise_r>:
 800aaf0:	291f      	cmp	r1, #31
 800aaf2:	b538      	push	{r3, r4, r5, lr}
 800aaf4:	4604      	mov	r4, r0
 800aaf6:	460d      	mov	r5, r1
 800aaf8:	d904      	bls.n	800ab04 <_raise_r+0x14>
 800aafa:	2316      	movs	r3, #22
 800aafc:	6003      	str	r3, [r0, #0]
 800aafe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ab02:	bd38      	pop	{r3, r4, r5, pc}
 800ab04:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ab06:	b112      	cbz	r2, 800ab0e <_raise_r+0x1e>
 800ab08:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ab0c:	b94b      	cbnz	r3, 800ab22 <_raise_r+0x32>
 800ab0e:	4620      	mov	r0, r4
 800ab10:	f000 f830 	bl	800ab74 <_getpid_r>
 800ab14:	462a      	mov	r2, r5
 800ab16:	4601      	mov	r1, r0
 800ab18:	4620      	mov	r0, r4
 800ab1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab1e:	f000 b817 	b.w	800ab50 <_kill_r>
 800ab22:	2b01      	cmp	r3, #1
 800ab24:	d00a      	beq.n	800ab3c <_raise_r+0x4c>
 800ab26:	1c59      	adds	r1, r3, #1
 800ab28:	d103      	bne.n	800ab32 <_raise_r+0x42>
 800ab2a:	2316      	movs	r3, #22
 800ab2c:	6003      	str	r3, [r0, #0]
 800ab2e:	2001      	movs	r0, #1
 800ab30:	e7e7      	b.n	800ab02 <_raise_r+0x12>
 800ab32:	2400      	movs	r4, #0
 800ab34:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ab38:	4628      	mov	r0, r5
 800ab3a:	4798      	blx	r3
 800ab3c:	2000      	movs	r0, #0
 800ab3e:	e7e0      	b.n	800ab02 <_raise_r+0x12>

0800ab40 <raise>:
 800ab40:	4b02      	ldr	r3, [pc, #8]	; (800ab4c <raise+0xc>)
 800ab42:	4601      	mov	r1, r0
 800ab44:	6818      	ldr	r0, [r3, #0]
 800ab46:	f7ff bfd3 	b.w	800aaf0 <_raise_r>
 800ab4a:	bf00      	nop
 800ab4c:	20000020 	.word	0x20000020

0800ab50 <_kill_r>:
 800ab50:	b538      	push	{r3, r4, r5, lr}
 800ab52:	4d07      	ldr	r5, [pc, #28]	; (800ab70 <_kill_r+0x20>)
 800ab54:	2300      	movs	r3, #0
 800ab56:	4604      	mov	r4, r0
 800ab58:	4608      	mov	r0, r1
 800ab5a:	4611      	mov	r1, r2
 800ab5c:	602b      	str	r3, [r5, #0]
 800ab5e:	f7f7 fa4b 	bl	8001ff8 <_kill>
 800ab62:	1c43      	adds	r3, r0, #1
 800ab64:	d102      	bne.n	800ab6c <_kill_r+0x1c>
 800ab66:	682b      	ldr	r3, [r5, #0]
 800ab68:	b103      	cbz	r3, 800ab6c <_kill_r+0x1c>
 800ab6a:	6023      	str	r3, [r4, #0]
 800ab6c:	bd38      	pop	{r3, r4, r5, pc}
 800ab6e:	bf00      	nop
 800ab70:	20004d2c 	.word	0x20004d2c

0800ab74 <_getpid_r>:
 800ab74:	f7f7 ba38 	b.w	8001fe8 <_getpid>

0800ab78 <sinf>:
 800ab78:	ee10 3a10 	vmov	r3, s0
 800ab7c:	b507      	push	{r0, r1, r2, lr}
 800ab7e:	4a1f      	ldr	r2, [pc, #124]	; (800abfc <sinf+0x84>)
 800ab80:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ab84:	4293      	cmp	r3, r2
 800ab86:	dc07      	bgt.n	800ab98 <sinf+0x20>
 800ab88:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800ac00 <sinf+0x88>
 800ab8c:	2000      	movs	r0, #0
 800ab8e:	b003      	add	sp, #12
 800ab90:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab94:	f000 bc48 	b.w	800b428 <__kernel_sinf>
 800ab98:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ab9c:	db04      	blt.n	800aba8 <sinf+0x30>
 800ab9e:	ee30 0a40 	vsub.f32	s0, s0, s0
 800aba2:	b003      	add	sp, #12
 800aba4:	f85d fb04 	ldr.w	pc, [sp], #4
 800aba8:	4668      	mov	r0, sp
 800abaa:	f000 f82b 	bl	800ac04 <__ieee754_rem_pio2f>
 800abae:	f000 0003 	and.w	r0, r0, #3
 800abb2:	2801      	cmp	r0, #1
 800abb4:	d00a      	beq.n	800abcc <sinf+0x54>
 800abb6:	2802      	cmp	r0, #2
 800abb8:	d00f      	beq.n	800abda <sinf+0x62>
 800abba:	b9c0      	cbnz	r0, 800abee <sinf+0x76>
 800abbc:	eddd 0a01 	vldr	s1, [sp, #4]
 800abc0:	ed9d 0a00 	vldr	s0, [sp]
 800abc4:	2001      	movs	r0, #1
 800abc6:	f000 fc2f 	bl	800b428 <__kernel_sinf>
 800abca:	e7ea      	b.n	800aba2 <sinf+0x2a>
 800abcc:	eddd 0a01 	vldr	s1, [sp, #4]
 800abd0:	ed9d 0a00 	vldr	s0, [sp]
 800abd4:	f000 f952 	bl	800ae7c <__kernel_cosf>
 800abd8:	e7e3      	b.n	800aba2 <sinf+0x2a>
 800abda:	eddd 0a01 	vldr	s1, [sp, #4]
 800abde:	ed9d 0a00 	vldr	s0, [sp]
 800abe2:	2001      	movs	r0, #1
 800abe4:	f000 fc20 	bl	800b428 <__kernel_sinf>
 800abe8:	eeb1 0a40 	vneg.f32	s0, s0
 800abec:	e7d9      	b.n	800aba2 <sinf+0x2a>
 800abee:	eddd 0a01 	vldr	s1, [sp, #4]
 800abf2:	ed9d 0a00 	vldr	s0, [sp]
 800abf6:	f000 f941 	bl	800ae7c <__kernel_cosf>
 800abfa:	e7f5      	b.n	800abe8 <sinf+0x70>
 800abfc:	3f490fd8 	.word	0x3f490fd8
 800ac00:	00000000 	.word	0x00000000

0800ac04 <__ieee754_rem_pio2f>:
 800ac04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac06:	ee10 6a10 	vmov	r6, s0
 800ac0a:	4b8e      	ldr	r3, [pc, #568]	; (800ae44 <__ieee754_rem_pio2f+0x240>)
 800ac0c:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800ac10:	429d      	cmp	r5, r3
 800ac12:	b087      	sub	sp, #28
 800ac14:	eef0 7a40 	vmov.f32	s15, s0
 800ac18:	4604      	mov	r4, r0
 800ac1a:	dc05      	bgt.n	800ac28 <__ieee754_rem_pio2f+0x24>
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	ed80 0a00 	vstr	s0, [r0]
 800ac22:	6043      	str	r3, [r0, #4]
 800ac24:	2000      	movs	r0, #0
 800ac26:	e01a      	b.n	800ac5e <__ieee754_rem_pio2f+0x5a>
 800ac28:	4b87      	ldr	r3, [pc, #540]	; (800ae48 <__ieee754_rem_pio2f+0x244>)
 800ac2a:	429d      	cmp	r5, r3
 800ac2c:	dc46      	bgt.n	800acbc <__ieee754_rem_pio2f+0xb8>
 800ac2e:	2e00      	cmp	r6, #0
 800ac30:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800ae4c <__ieee754_rem_pio2f+0x248>
 800ac34:	4b86      	ldr	r3, [pc, #536]	; (800ae50 <__ieee754_rem_pio2f+0x24c>)
 800ac36:	f025 050f 	bic.w	r5, r5, #15
 800ac3a:	dd1f      	ble.n	800ac7c <__ieee754_rem_pio2f+0x78>
 800ac3c:	429d      	cmp	r5, r3
 800ac3e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800ac42:	d00e      	beq.n	800ac62 <__ieee754_rem_pio2f+0x5e>
 800ac44:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800ae54 <__ieee754_rem_pio2f+0x250>
 800ac48:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800ac4c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800ac50:	ed80 0a00 	vstr	s0, [r0]
 800ac54:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ac58:	2001      	movs	r0, #1
 800ac5a:	edc4 7a01 	vstr	s15, [r4, #4]
 800ac5e:	b007      	add	sp, #28
 800ac60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac62:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800ae58 <__ieee754_rem_pio2f+0x254>
 800ac66:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800ae5c <__ieee754_rem_pio2f+0x258>
 800ac6a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800ac6e:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800ac72:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ac76:	edc0 6a00 	vstr	s13, [r0]
 800ac7a:	e7eb      	b.n	800ac54 <__ieee754_rem_pio2f+0x50>
 800ac7c:	429d      	cmp	r5, r3
 800ac7e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800ac82:	d00e      	beq.n	800aca2 <__ieee754_rem_pio2f+0x9e>
 800ac84:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800ae54 <__ieee754_rem_pio2f+0x250>
 800ac88:	ee37 0a87 	vadd.f32	s0, s15, s14
 800ac8c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800ac90:	ed80 0a00 	vstr	s0, [r0]
 800ac94:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ac98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac9c:	edc4 7a01 	vstr	s15, [r4, #4]
 800aca0:	e7dd      	b.n	800ac5e <__ieee754_rem_pio2f+0x5a>
 800aca2:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800ae58 <__ieee754_rem_pio2f+0x254>
 800aca6:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800ae5c <__ieee754_rem_pio2f+0x258>
 800acaa:	ee77 7a80 	vadd.f32	s15, s15, s0
 800acae:	ee77 6a87 	vadd.f32	s13, s15, s14
 800acb2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800acb6:	edc0 6a00 	vstr	s13, [r0]
 800acba:	e7eb      	b.n	800ac94 <__ieee754_rem_pio2f+0x90>
 800acbc:	4b68      	ldr	r3, [pc, #416]	; (800ae60 <__ieee754_rem_pio2f+0x25c>)
 800acbe:	429d      	cmp	r5, r3
 800acc0:	dc72      	bgt.n	800ada8 <__ieee754_rem_pio2f+0x1a4>
 800acc2:	f000 fbf9 	bl	800b4b8 <fabsf>
 800acc6:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800ae64 <__ieee754_rem_pio2f+0x260>
 800acca:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800acce:	eee0 7a07 	vfma.f32	s15, s0, s14
 800acd2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800acd6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800acda:	ee17 0a90 	vmov	r0, s15
 800acde:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800ae4c <__ieee754_rem_pio2f+0x248>
 800ace2:	eea7 0a67 	vfms.f32	s0, s14, s15
 800ace6:	281f      	cmp	r0, #31
 800ace8:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800ae54 <__ieee754_rem_pio2f+0x250>
 800acec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acf0:	eeb1 6a47 	vneg.f32	s12, s14
 800acf4:	ee70 6a67 	vsub.f32	s13, s0, s15
 800acf8:	ee16 2a90 	vmov	r2, s13
 800acfc:	dc1c      	bgt.n	800ad38 <__ieee754_rem_pio2f+0x134>
 800acfe:	495a      	ldr	r1, [pc, #360]	; (800ae68 <__ieee754_rem_pio2f+0x264>)
 800ad00:	1e47      	subs	r7, r0, #1
 800ad02:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800ad06:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800ad0a:	428b      	cmp	r3, r1
 800ad0c:	d014      	beq.n	800ad38 <__ieee754_rem_pio2f+0x134>
 800ad0e:	6022      	str	r2, [r4, #0]
 800ad10:	ed94 7a00 	vldr	s14, [r4]
 800ad14:	ee30 0a47 	vsub.f32	s0, s0, s14
 800ad18:	2e00      	cmp	r6, #0
 800ad1a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ad1e:	ed84 0a01 	vstr	s0, [r4, #4]
 800ad22:	da9c      	bge.n	800ac5e <__ieee754_rem_pio2f+0x5a>
 800ad24:	eeb1 7a47 	vneg.f32	s14, s14
 800ad28:	eeb1 0a40 	vneg.f32	s0, s0
 800ad2c:	ed84 7a00 	vstr	s14, [r4]
 800ad30:	ed84 0a01 	vstr	s0, [r4, #4]
 800ad34:	4240      	negs	r0, r0
 800ad36:	e792      	b.n	800ac5e <__ieee754_rem_pio2f+0x5a>
 800ad38:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800ad3c:	15eb      	asrs	r3, r5, #23
 800ad3e:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800ad42:	2d08      	cmp	r5, #8
 800ad44:	dde3      	ble.n	800ad0e <__ieee754_rem_pio2f+0x10a>
 800ad46:	eddf 7a44 	vldr	s15, [pc, #272]	; 800ae58 <__ieee754_rem_pio2f+0x254>
 800ad4a:	eddf 5a44 	vldr	s11, [pc, #272]	; 800ae5c <__ieee754_rem_pio2f+0x258>
 800ad4e:	eef0 6a40 	vmov.f32	s13, s0
 800ad52:	eee6 6a27 	vfma.f32	s13, s12, s15
 800ad56:	ee30 0a66 	vsub.f32	s0, s0, s13
 800ad5a:	eea6 0a27 	vfma.f32	s0, s12, s15
 800ad5e:	eef0 7a40 	vmov.f32	s15, s0
 800ad62:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800ad66:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800ad6a:	ee15 2a90 	vmov	r2, s11
 800ad6e:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800ad72:	1a5b      	subs	r3, r3, r1
 800ad74:	2b19      	cmp	r3, #25
 800ad76:	dc04      	bgt.n	800ad82 <__ieee754_rem_pio2f+0x17e>
 800ad78:	edc4 5a00 	vstr	s11, [r4]
 800ad7c:	eeb0 0a66 	vmov.f32	s0, s13
 800ad80:	e7c6      	b.n	800ad10 <__ieee754_rem_pio2f+0x10c>
 800ad82:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800ae6c <__ieee754_rem_pio2f+0x268>
 800ad86:	eeb0 0a66 	vmov.f32	s0, s13
 800ad8a:	eea6 0a25 	vfma.f32	s0, s12, s11
 800ad8e:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800ad92:	eddf 6a37 	vldr	s13, [pc, #220]	; 800ae70 <__ieee754_rem_pio2f+0x26c>
 800ad96:	eee6 7a25 	vfma.f32	s15, s12, s11
 800ad9a:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800ad9e:	ee30 7a67 	vsub.f32	s14, s0, s15
 800ada2:	ed84 7a00 	vstr	s14, [r4]
 800ada6:	e7b3      	b.n	800ad10 <__ieee754_rem_pio2f+0x10c>
 800ada8:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800adac:	db06      	blt.n	800adbc <__ieee754_rem_pio2f+0x1b8>
 800adae:	ee70 7a40 	vsub.f32	s15, s0, s0
 800adb2:	edc0 7a01 	vstr	s15, [r0, #4]
 800adb6:	edc0 7a00 	vstr	s15, [r0]
 800adba:	e733      	b.n	800ac24 <__ieee754_rem_pio2f+0x20>
 800adbc:	15ea      	asrs	r2, r5, #23
 800adbe:	3a86      	subs	r2, #134	; 0x86
 800adc0:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800adc4:	ee07 3a90 	vmov	s15, r3
 800adc8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800adcc:	eddf 6a29 	vldr	s13, [pc, #164]	; 800ae74 <__ieee754_rem_pio2f+0x270>
 800add0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800add4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800add8:	ed8d 7a03 	vstr	s14, [sp, #12]
 800addc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ade0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800ade4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ade8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800adec:	ed8d 7a04 	vstr	s14, [sp, #16]
 800adf0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800adf4:	eef5 7a40 	vcmp.f32	s15, #0.0
 800adf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adfc:	edcd 7a05 	vstr	s15, [sp, #20]
 800ae00:	d11e      	bne.n	800ae40 <__ieee754_rem_pio2f+0x23c>
 800ae02:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800ae06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae0a:	bf14      	ite	ne
 800ae0c:	2302      	movne	r3, #2
 800ae0e:	2301      	moveq	r3, #1
 800ae10:	4919      	ldr	r1, [pc, #100]	; (800ae78 <__ieee754_rem_pio2f+0x274>)
 800ae12:	9101      	str	r1, [sp, #4]
 800ae14:	2102      	movs	r1, #2
 800ae16:	9100      	str	r1, [sp, #0]
 800ae18:	a803      	add	r0, sp, #12
 800ae1a:	4621      	mov	r1, r4
 800ae1c:	f000 f88e 	bl	800af3c <__kernel_rem_pio2f>
 800ae20:	2e00      	cmp	r6, #0
 800ae22:	f6bf af1c 	bge.w	800ac5e <__ieee754_rem_pio2f+0x5a>
 800ae26:	edd4 7a00 	vldr	s15, [r4]
 800ae2a:	eef1 7a67 	vneg.f32	s15, s15
 800ae2e:	edc4 7a00 	vstr	s15, [r4]
 800ae32:	edd4 7a01 	vldr	s15, [r4, #4]
 800ae36:	eef1 7a67 	vneg.f32	s15, s15
 800ae3a:	edc4 7a01 	vstr	s15, [r4, #4]
 800ae3e:	e779      	b.n	800ad34 <__ieee754_rem_pio2f+0x130>
 800ae40:	2303      	movs	r3, #3
 800ae42:	e7e5      	b.n	800ae10 <__ieee754_rem_pio2f+0x20c>
 800ae44:	3f490fd8 	.word	0x3f490fd8
 800ae48:	4016cbe3 	.word	0x4016cbe3
 800ae4c:	3fc90f80 	.word	0x3fc90f80
 800ae50:	3fc90fd0 	.word	0x3fc90fd0
 800ae54:	37354443 	.word	0x37354443
 800ae58:	37354400 	.word	0x37354400
 800ae5c:	2e85a308 	.word	0x2e85a308
 800ae60:	43490f80 	.word	0x43490f80
 800ae64:	3f22f984 	.word	0x3f22f984
 800ae68:	0800bb0c 	.word	0x0800bb0c
 800ae6c:	2e85a300 	.word	0x2e85a300
 800ae70:	248d3132 	.word	0x248d3132
 800ae74:	43800000 	.word	0x43800000
 800ae78:	0800bb8c 	.word	0x0800bb8c

0800ae7c <__kernel_cosf>:
 800ae7c:	ee10 3a10 	vmov	r3, s0
 800ae80:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ae84:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800ae88:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800ae8c:	da05      	bge.n	800ae9a <__kernel_cosf+0x1e>
 800ae8e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800ae92:	ee17 2a90 	vmov	r2, s15
 800ae96:	2a00      	cmp	r2, #0
 800ae98:	d03d      	beq.n	800af16 <__kernel_cosf+0x9a>
 800ae9a:	ee60 5a00 	vmul.f32	s11, s0, s0
 800ae9e:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800af1c <__kernel_cosf+0xa0>
 800aea2:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800af20 <__kernel_cosf+0xa4>
 800aea6:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800af24 <__kernel_cosf+0xa8>
 800aeaa:	4a1f      	ldr	r2, [pc, #124]	; (800af28 <__kernel_cosf+0xac>)
 800aeac:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800aeb0:	4293      	cmp	r3, r2
 800aeb2:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800af2c <__kernel_cosf+0xb0>
 800aeb6:	eee7 7a25 	vfma.f32	s15, s14, s11
 800aeba:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800af30 <__kernel_cosf+0xb4>
 800aebe:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800aec2:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800af34 <__kernel_cosf+0xb8>
 800aec6:	eee7 7a25 	vfma.f32	s15, s14, s11
 800aeca:	eeb0 7a66 	vmov.f32	s14, s13
 800aece:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800aed2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800aed6:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800aeda:	ee67 6a25 	vmul.f32	s13, s14, s11
 800aede:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800aee2:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800aee6:	dc04      	bgt.n	800aef2 <__kernel_cosf+0x76>
 800aee8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800aeec:	ee36 0a47 	vsub.f32	s0, s12, s14
 800aef0:	4770      	bx	lr
 800aef2:	4a11      	ldr	r2, [pc, #68]	; (800af38 <__kernel_cosf+0xbc>)
 800aef4:	4293      	cmp	r3, r2
 800aef6:	bfda      	itte	le
 800aef8:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800aefc:	ee06 3a90 	vmovle	s13, r3
 800af00:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800af04:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800af08:	ee36 0a66 	vsub.f32	s0, s12, s13
 800af0c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800af10:	ee30 0a67 	vsub.f32	s0, s0, s15
 800af14:	4770      	bx	lr
 800af16:	eeb0 0a46 	vmov.f32	s0, s12
 800af1a:	4770      	bx	lr
 800af1c:	ad47d74e 	.word	0xad47d74e
 800af20:	310f74f6 	.word	0x310f74f6
 800af24:	3d2aaaab 	.word	0x3d2aaaab
 800af28:	3e999999 	.word	0x3e999999
 800af2c:	b493f27c 	.word	0xb493f27c
 800af30:	37d00d01 	.word	0x37d00d01
 800af34:	bab60b61 	.word	0xbab60b61
 800af38:	3f480000 	.word	0x3f480000

0800af3c <__kernel_rem_pio2f>:
 800af3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af40:	ed2d 8b04 	vpush	{d8-d9}
 800af44:	b0d9      	sub	sp, #356	; 0x164
 800af46:	4688      	mov	r8, r1
 800af48:	9002      	str	r0, [sp, #8]
 800af4a:	49bb      	ldr	r1, [pc, #748]	; (800b238 <__kernel_rem_pio2f+0x2fc>)
 800af4c:	9866      	ldr	r0, [sp, #408]	; 0x198
 800af4e:	9301      	str	r3, [sp, #4]
 800af50:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800af54:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 800af58:	1e59      	subs	r1, r3, #1
 800af5a:	1d13      	adds	r3, r2, #4
 800af5c:	db27      	blt.n	800afae <__kernel_rem_pio2f+0x72>
 800af5e:	f1b2 0b03 	subs.w	fp, r2, #3
 800af62:	bf48      	it	mi
 800af64:	f102 0b04 	addmi.w	fp, r2, #4
 800af68:	ea4f 00eb 	mov.w	r0, fp, asr #3
 800af6c:	1c45      	adds	r5, r0, #1
 800af6e:	00ec      	lsls	r4, r5, #3
 800af70:	1a47      	subs	r7, r0, r1
 800af72:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800b248 <__kernel_rem_pio2f+0x30c>
 800af76:	9403      	str	r4, [sp, #12]
 800af78:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800af7c:	eb0a 0c01 	add.w	ip, sl, r1
 800af80:	ae1c      	add	r6, sp, #112	; 0x70
 800af82:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 800af86:	2400      	movs	r4, #0
 800af88:	4564      	cmp	r4, ip
 800af8a:	dd12      	ble.n	800afb2 <__kernel_rem_pio2f+0x76>
 800af8c:	9b01      	ldr	r3, [sp, #4]
 800af8e:	ac1c      	add	r4, sp, #112	; 0x70
 800af90:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800af94:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 800af98:	f04f 0c00 	mov.w	ip, #0
 800af9c:	45d4      	cmp	ip, sl
 800af9e:	dc27      	bgt.n	800aff0 <__kernel_rem_pio2f+0xb4>
 800afa0:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800afa4:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800b248 <__kernel_rem_pio2f+0x30c>
 800afa8:	4627      	mov	r7, r4
 800afaa:	2600      	movs	r6, #0
 800afac:	e016      	b.n	800afdc <__kernel_rem_pio2f+0xa0>
 800afae:	2000      	movs	r0, #0
 800afb0:	e7dc      	b.n	800af6c <__kernel_rem_pio2f+0x30>
 800afb2:	42e7      	cmn	r7, r4
 800afb4:	bf5d      	ittte	pl
 800afb6:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 800afba:	ee07 3a90 	vmovpl	s15, r3
 800afbe:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800afc2:	eef0 7a47 	vmovmi.f32	s15, s14
 800afc6:	ece6 7a01 	vstmia	r6!, {s15}
 800afca:	3401      	adds	r4, #1
 800afcc:	e7dc      	b.n	800af88 <__kernel_rem_pio2f+0x4c>
 800afce:	ecf9 6a01 	vldmia	r9!, {s13}
 800afd2:	ed97 7a00 	vldr	s14, [r7]
 800afd6:	eee6 7a87 	vfma.f32	s15, s13, s14
 800afda:	3601      	adds	r6, #1
 800afdc:	428e      	cmp	r6, r1
 800afde:	f1a7 0704 	sub.w	r7, r7, #4
 800afe2:	ddf4      	ble.n	800afce <__kernel_rem_pio2f+0x92>
 800afe4:	eceb 7a01 	vstmia	fp!, {s15}
 800afe8:	f10c 0c01 	add.w	ip, ip, #1
 800afec:	3404      	adds	r4, #4
 800afee:	e7d5      	b.n	800af9c <__kernel_rem_pio2f+0x60>
 800aff0:	ab08      	add	r3, sp, #32
 800aff2:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800aff6:	eddf 8a93 	vldr	s17, [pc, #588]	; 800b244 <__kernel_rem_pio2f+0x308>
 800affa:	ed9f 9a91 	vldr	s18, [pc, #580]	; 800b240 <__kernel_rem_pio2f+0x304>
 800affe:	9304      	str	r3, [sp, #16]
 800b000:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 800b004:	4656      	mov	r6, sl
 800b006:	00b3      	lsls	r3, r6, #2
 800b008:	9305      	str	r3, [sp, #20]
 800b00a:	ab58      	add	r3, sp, #352	; 0x160
 800b00c:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800b010:	ac08      	add	r4, sp, #32
 800b012:	ab44      	add	r3, sp, #272	; 0x110
 800b014:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800b018:	46a4      	mov	ip, r4
 800b01a:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800b01e:	4637      	mov	r7, r6
 800b020:	2f00      	cmp	r7, #0
 800b022:	f1a0 0004 	sub.w	r0, r0, #4
 800b026:	dc4f      	bgt.n	800b0c8 <__kernel_rem_pio2f+0x18c>
 800b028:	4628      	mov	r0, r5
 800b02a:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800b02e:	f000 fa8d 	bl	800b54c <scalbnf>
 800b032:	eeb0 8a40 	vmov.f32	s16, s0
 800b036:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800b03a:	ee28 0a00 	vmul.f32	s0, s16, s0
 800b03e:	f000 fa43 	bl	800b4c8 <floorf>
 800b042:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800b046:	eea0 8a67 	vfms.f32	s16, s0, s15
 800b04a:	2d00      	cmp	r5, #0
 800b04c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800b050:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800b054:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800b058:	ee17 9a90 	vmov	r9, s15
 800b05c:	ee38 8a40 	vsub.f32	s16, s16, s0
 800b060:	dd44      	ble.n	800b0ec <__kernel_rem_pio2f+0x1b0>
 800b062:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800b066:	ab08      	add	r3, sp, #32
 800b068:	f1c5 0e08 	rsb	lr, r5, #8
 800b06c:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800b070:	fa47 f00e 	asr.w	r0, r7, lr
 800b074:	4481      	add	r9, r0
 800b076:	fa00 f00e 	lsl.w	r0, r0, lr
 800b07a:	1a3f      	subs	r7, r7, r0
 800b07c:	f1c5 0007 	rsb	r0, r5, #7
 800b080:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800b084:	4107      	asrs	r7, r0
 800b086:	2f00      	cmp	r7, #0
 800b088:	dd3f      	ble.n	800b10a <__kernel_rem_pio2f+0x1ce>
 800b08a:	f04f 0e00 	mov.w	lr, #0
 800b08e:	f109 0901 	add.w	r9, r9, #1
 800b092:	4673      	mov	r3, lr
 800b094:	4576      	cmp	r6, lr
 800b096:	dc6b      	bgt.n	800b170 <__kernel_rem_pio2f+0x234>
 800b098:	2d00      	cmp	r5, #0
 800b09a:	dd04      	ble.n	800b0a6 <__kernel_rem_pio2f+0x16a>
 800b09c:	2d01      	cmp	r5, #1
 800b09e:	d078      	beq.n	800b192 <__kernel_rem_pio2f+0x256>
 800b0a0:	2d02      	cmp	r5, #2
 800b0a2:	f000 8081 	beq.w	800b1a8 <__kernel_rem_pio2f+0x26c>
 800b0a6:	2f02      	cmp	r7, #2
 800b0a8:	d12f      	bne.n	800b10a <__kernel_rem_pio2f+0x1ce>
 800b0aa:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b0ae:	ee30 8a48 	vsub.f32	s16, s0, s16
 800b0b2:	b353      	cbz	r3, 800b10a <__kernel_rem_pio2f+0x1ce>
 800b0b4:	4628      	mov	r0, r5
 800b0b6:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800b0ba:	f000 fa47 	bl	800b54c <scalbnf>
 800b0be:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800b0c2:	ee38 8a40 	vsub.f32	s16, s16, s0
 800b0c6:	e020      	b.n	800b10a <__kernel_rem_pio2f+0x1ce>
 800b0c8:	ee60 7a28 	vmul.f32	s15, s0, s17
 800b0cc:	3f01      	subs	r7, #1
 800b0ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b0d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b0d6:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800b0da:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b0de:	ecac 0a01 	vstmia	ip!, {s0}
 800b0e2:	ed90 0a00 	vldr	s0, [r0]
 800b0e6:	ee37 0a80 	vadd.f32	s0, s15, s0
 800b0ea:	e799      	b.n	800b020 <__kernel_rem_pio2f+0xe4>
 800b0ec:	d105      	bne.n	800b0fa <__kernel_rem_pio2f+0x1be>
 800b0ee:	1e70      	subs	r0, r6, #1
 800b0f0:	ab08      	add	r3, sp, #32
 800b0f2:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800b0f6:	11ff      	asrs	r7, r7, #7
 800b0f8:	e7c5      	b.n	800b086 <__kernel_rem_pio2f+0x14a>
 800b0fa:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800b0fe:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800b102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b106:	da31      	bge.n	800b16c <__kernel_rem_pio2f+0x230>
 800b108:	2700      	movs	r7, #0
 800b10a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800b10e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b112:	f040 809b 	bne.w	800b24c <__kernel_rem_pio2f+0x310>
 800b116:	1e74      	subs	r4, r6, #1
 800b118:	46a4      	mov	ip, r4
 800b11a:	2000      	movs	r0, #0
 800b11c:	45d4      	cmp	ip, sl
 800b11e:	da4a      	bge.n	800b1b6 <__kernel_rem_pio2f+0x27a>
 800b120:	2800      	cmp	r0, #0
 800b122:	d07a      	beq.n	800b21a <__kernel_rem_pio2f+0x2de>
 800b124:	ab08      	add	r3, sp, #32
 800b126:	3d08      	subs	r5, #8
 800b128:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	f000 8081 	beq.w	800b234 <__kernel_rem_pio2f+0x2f8>
 800b132:	4628      	mov	r0, r5
 800b134:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b138:	00a5      	lsls	r5, r4, #2
 800b13a:	f000 fa07 	bl	800b54c <scalbnf>
 800b13e:	aa44      	add	r2, sp, #272	; 0x110
 800b140:	1d2b      	adds	r3, r5, #4
 800b142:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800b244 <__kernel_rem_pio2f+0x308>
 800b146:	18d1      	adds	r1, r2, r3
 800b148:	4622      	mov	r2, r4
 800b14a:	2a00      	cmp	r2, #0
 800b14c:	f280 80ae 	bge.w	800b2ac <__kernel_rem_pio2f+0x370>
 800b150:	4622      	mov	r2, r4
 800b152:	2a00      	cmp	r2, #0
 800b154:	f2c0 80cc 	blt.w	800b2f0 <__kernel_rem_pio2f+0x3b4>
 800b158:	a944      	add	r1, sp, #272	; 0x110
 800b15a:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800b15e:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800b23c <__kernel_rem_pio2f+0x300>
 800b162:	eddf 7a39 	vldr	s15, [pc, #228]	; 800b248 <__kernel_rem_pio2f+0x30c>
 800b166:	2000      	movs	r0, #0
 800b168:	1aa1      	subs	r1, r4, r2
 800b16a:	e0b6      	b.n	800b2da <__kernel_rem_pio2f+0x39e>
 800b16c:	2702      	movs	r7, #2
 800b16e:	e78c      	b.n	800b08a <__kernel_rem_pio2f+0x14e>
 800b170:	6820      	ldr	r0, [r4, #0]
 800b172:	b94b      	cbnz	r3, 800b188 <__kernel_rem_pio2f+0x24c>
 800b174:	b118      	cbz	r0, 800b17e <__kernel_rem_pio2f+0x242>
 800b176:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800b17a:	6020      	str	r0, [r4, #0]
 800b17c:	2001      	movs	r0, #1
 800b17e:	f10e 0e01 	add.w	lr, lr, #1
 800b182:	3404      	adds	r4, #4
 800b184:	4603      	mov	r3, r0
 800b186:	e785      	b.n	800b094 <__kernel_rem_pio2f+0x158>
 800b188:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800b18c:	6020      	str	r0, [r4, #0]
 800b18e:	4618      	mov	r0, r3
 800b190:	e7f5      	b.n	800b17e <__kernel_rem_pio2f+0x242>
 800b192:	1e74      	subs	r4, r6, #1
 800b194:	a808      	add	r0, sp, #32
 800b196:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800b19a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800b19e:	f10d 0c20 	add.w	ip, sp, #32
 800b1a2:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 800b1a6:	e77e      	b.n	800b0a6 <__kernel_rem_pio2f+0x16a>
 800b1a8:	1e74      	subs	r4, r6, #1
 800b1aa:	a808      	add	r0, sp, #32
 800b1ac:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800b1b0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800b1b4:	e7f3      	b.n	800b19e <__kernel_rem_pio2f+0x262>
 800b1b6:	ab08      	add	r3, sp, #32
 800b1b8:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800b1bc:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800b1c0:	4318      	orrs	r0, r3
 800b1c2:	e7ab      	b.n	800b11c <__kernel_rem_pio2f+0x1e0>
 800b1c4:	f10c 0c01 	add.w	ip, ip, #1
 800b1c8:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 800b1cc:	2c00      	cmp	r4, #0
 800b1ce:	d0f9      	beq.n	800b1c4 <__kernel_rem_pio2f+0x288>
 800b1d0:	9b05      	ldr	r3, [sp, #20]
 800b1d2:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800b1d6:	eb0d 0003 	add.w	r0, sp, r3
 800b1da:	9b01      	ldr	r3, [sp, #4]
 800b1dc:	18f4      	adds	r4, r6, r3
 800b1de:	ab1c      	add	r3, sp, #112	; 0x70
 800b1e0:	1c77      	adds	r7, r6, #1
 800b1e2:	384c      	subs	r0, #76	; 0x4c
 800b1e4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b1e8:	4466      	add	r6, ip
 800b1ea:	42be      	cmp	r6, r7
 800b1ec:	f6ff af0b 	blt.w	800b006 <__kernel_rem_pio2f+0xca>
 800b1f0:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 800b1f4:	f8dd e008 	ldr.w	lr, [sp, #8]
 800b1f8:	ee07 3a90 	vmov	s15, r3
 800b1fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b200:	f04f 0c00 	mov.w	ip, #0
 800b204:	ece4 7a01 	vstmia	r4!, {s15}
 800b208:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800b248 <__kernel_rem_pio2f+0x30c>
 800b20c:	46a1      	mov	r9, r4
 800b20e:	458c      	cmp	ip, r1
 800b210:	dd07      	ble.n	800b222 <__kernel_rem_pio2f+0x2e6>
 800b212:	ece0 7a01 	vstmia	r0!, {s15}
 800b216:	3701      	adds	r7, #1
 800b218:	e7e7      	b.n	800b1ea <__kernel_rem_pio2f+0x2ae>
 800b21a:	9804      	ldr	r0, [sp, #16]
 800b21c:	f04f 0c01 	mov.w	ip, #1
 800b220:	e7d2      	b.n	800b1c8 <__kernel_rem_pio2f+0x28c>
 800b222:	ecfe 6a01 	vldmia	lr!, {s13}
 800b226:	ed39 7a01 	vldmdb	r9!, {s14}
 800b22a:	f10c 0c01 	add.w	ip, ip, #1
 800b22e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b232:	e7ec      	b.n	800b20e <__kernel_rem_pio2f+0x2d2>
 800b234:	3c01      	subs	r4, #1
 800b236:	e775      	b.n	800b124 <__kernel_rem_pio2f+0x1e8>
 800b238:	0800bed0 	.word	0x0800bed0
 800b23c:	0800bea4 	.word	0x0800bea4
 800b240:	43800000 	.word	0x43800000
 800b244:	3b800000 	.word	0x3b800000
 800b248:	00000000 	.word	0x00000000
 800b24c:	9b03      	ldr	r3, [sp, #12]
 800b24e:	eeb0 0a48 	vmov.f32	s0, s16
 800b252:	1a98      	subs	r0, r3, r2
 800b254:	f000 f97a 	bl	800b54c <scalbnf>
 800b258:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800b240 <__kernel_rem_pio2f+0x304>
 800b25c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800b260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b264:	db19      	blt.n	800b29a <__kernel_rem_pio2f+0x35e>
 800b266:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800b244 <__kernel_rem_pio2f+0x308>
 800b26a:	ee60 7a27 	vmul.f32	s15, s0, s15
 800b26e:	aa08      	add	r2, sp, #32
 800b270:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b274:	1c74      	adds	r4, r6, #1
 800b276:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b27a:	3508      	adds	r5, #8
 800b27c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800b280:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b284:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b288:	ee10 3a10 	vmov	r3, s0
 800b28c:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800b290:	ee17 3a90 	vmov	r3, s15
 800b294:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800b298:	e74b      	b.n	800b132 <__kernel_rem_pio2f+0x1f6>
 800b29a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b29e:	aa08      	add	r2, sp, #32
 800b2a0:	ee10 3a10 	vmov	r3, s0
 800b2a4:	4634      	mov	r4, r6
 800b2a6:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800b2aa:	e742      	b.n	800b132 <__kernel_rem_pio2f+0x1f6>
 800b2ac:	a808      	add	r0, sp, #32
 800b2ae:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800b2b2:	9001      	str	r0, [sp, #4]
 800b2b4:	ee07 0a90 	vmov	s15, r0
 800b2b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b2bc:	3a01      	subs	r2, #1
 800b2be:	ee67 7a80 	vmul.f32	s15, s15, s0
 800b2c2:	ee20 0a07 	vmul.f32	s0, s0, s14
 800b2c6:	ed61 7a01 	vstmdb	r1!, {s15}
 800b2ca:	e73e      	b.n	800b14a <__kernel_rem_pio2f+0x20e>
 800b2cc:	ecfc 6a01 	vldmia	ip!, {s13}
 800b2d0:	ecb6 7a01 	vldmia	r6!, {s14}
 800b2d4:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b2d8:	3001      	adds	r0, #1
 800b2da:	4550      	cmp	r0, sl
 800b2dc:	dc01      	bgt.n	800b2e2 <__kernel_rem_pio2f+0x3a6>
 800b2de:	4288      	cmp	r0, r1
 800b2e0:	ddf4      	ble.n	800b2cc <__kernel_rem_pio2f+0x390>
 800b2e2:	a858      	add	r0, sp, #352	; 0x160
 800b2e4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b2e8:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800b2ec:	3a01      	subs	r2, #1
 800b2ee:	e730      	b.n	800b152 <__kernel_rem_pio2f+0x216>
 800b2f0:	9a66      	ldr	r2, [sp, #408]	; 0x198
 800b2f2:	2a02      	cmp	r2, #2
 800b2f4:	dc09      	bgt.n	800b30a <__kernel_rem_pio2f+0x3ce>
 800b2f6:	2a00      	cmp	r2, #0
 800b2f8:	dc2a      	bgt.n	800b350 <__kernel_rem_pio2f+0x414>
 800b2fa:	d043      	beq.n	800b384 <__kernel_rem_pio2f+0x448>
 800b2fc:	f009 0007 	and.w	r0, r9, #7
 800b300:	b059      	add	sp, #356	; 0x164
 800b302:	ecbd 8b04 	vpop	{d8-d9}
 800b306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b30a:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800b30c:	2b03      	cmp	r3, #3
 800b30e:	d1f5      	bne.n	800b2fc <__kernel_rem_pio2f+0x3c0>
 800b310:	ab30      	add	r3, sp, #192	; 0xc0
 800b312:	442b      	add	r3, r5
 800b314:	461a      	mov	r2, r3
 800b316:	4619      	mov	r1, r3
 800b318:	4620      	mov	r0, r4
 800b31a:	2800      	cmp	r0, #0
 800b31c:	f1a1 0104 	sub.w	r1, r1, #4
 800b320:	dc51      	bgt.n	800b3c6 <__kernel_rem_pio2f+0x48a>
 800b322:	4621      	mov	r1, r4
 800b324:	2901      	cmp	r1, #1
 800b326:	f1a2 0204 	sub.w	r2, r2, #4
 800b32a:	dc5c      	bgt.n	800b3e6 <__kernel_rem_pio2f+0x4aa>
 800b32c:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800b248 <__kernel_rem_pio2f+0x30c>
 800b330:	3304      	adds	r3, #4
 800b332:	2c01      	cmp	r4, #1
 800b334:	dc67      	bgt.n	800b406 <__kernel_rem_pio2f+0x4ca>
 800b336:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800b33a:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800b33e:	2f00      	cmp	r7, #0
 800b340:	d167      	bne.n	800b412 <__kernel_rem_pio2f+0x4d6>
 800b342:	edc8 6a00 	vstr	s13, [r8]
 800b346:	ed88 7a01 	vstr	s14, [r8, #4]
 800b34a:	edc8 7a02 	vstr	s15, [r8, #8]
 800b34e:	e7d5      	b.n	800b2fc <__kernel_rem_pio2f+0x3c0>
 800b350:	aa30      	add	r2, sp, #192	; 0xc0
 800b352:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 800b248 <__kernel_rem_pio2f+0x30c>
 800b356:	4413      	add	r3, r2
 800b358:	4622      	mov	r2, r4
 800b35a:	2a00      	cmp	r2, #0
 800b35c:	da24      	bge.n	800b3a8 <__kernel_rem_pio2f+0x46c>
 800b35e:	b34f      	cbz	r7, 800b3b4 <__kernel_rem_pio2f+0x478>
 800b360:	eef1 7a47 	vneg.f32	s15, s14
 800b364:	edc8 7a00 	vstr	s15, [r8]
 800b368:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800b36c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b370:	aa31      	add	r2, sp, #196	; 0xc4
 800b372:	2301      	movs	r3, #1
 800b374:	429c      	cmp	r4, r3
 800b376:	da20      	bge.n	800b3ba <__kernel_rem_pio2f+0x47e>
 800b378:	b10f      	cbz	r7, 800b37e <__kernel_rem_pio2f+0x442>
 800b37a:	eef1 7a67 	vneg.f32	s15, s15
 800b37e:	edc8 7a01 	vstr	s15, [r8, #4]
 800b382:	e7bb      	b.n	800b2fc <__kernel_rem_pio2f+0x3c0>
 800b384:	aa30      	add	r2, sp, #192	; 0xc0
 800b386:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 800b248 <__kernel_rem_pio2f+0x30c>
 800b38a:	4413      	add	r3, r2
 800b38c:	2c00      	cmp	r4, #0
 800b38e:	da05      	bge.n	800b39c <__kernel_rem_pio2f+0x460>
 800b390:	b10f      	cbz	r7, 800b396 <__kernel_rem_pio2f+0x45a>
 800b392:	eef1 7a67 	vneg.f32	s15, s15
 800b396:	edc8 7a00 	vstr	s15, [r8]
 800b39a:	e7af      	b.n	800b2fc <__kernel_rem_pio2f+0x3c0>
 800b39c:	ed33 7a01 	vldmdb	r3!, {s14}
 800b3a0:	3c01      	subs	r4, #1
 800b3a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b3a6:	e7f1      	b.n	800b38c <__kernel_rem_pio2f+0x450>
 800b3a8:	ed73 7a01 	vldmdb	r3!, {s15}
 800b3ac:	3a01      	subs	r2, #1
 800b3ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b3b2:	e7d2      	b.n	800b35a <__kernel_rem_pio2f+0x41e>
 800b3b4:	eef0 7a47 	vmov.f32	s15, s14
 800b3b8:	e7d4      	b.n	800b364 <__kernel_rem_pio2f+0x428>
 800b3ba:	ecb2 7a01 	vldmia	r2!, {s14}
 800b3be:	3301      	adds	r3, #1
 800b3c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b3c4:	e7d6      	b.n	800b374 <__kernel_rem_pio2f+0x438>
 800b3c6:	edd1 7a00 	vldr	s15, [r1]
 800b3ca:	edd1 6a01 	vldr	s13, [r1, #4]
 800b3ce:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800b3d2:	3801      	subs	r0, #1
 800b3d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b3d8:	ed81 7a00 	vstr	s14, [r1]
 800b3dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3e0:	edc1 7a01 	vstr	s15, [r1, #4]
 800b3e4:	e799      	b.n	800b31a <__kernel_rem_pio2f+0x3de>
 800b3e6:	edd2 7a00 	vldr	s15, [r2]
 800b3ea:	edd2 6a01 	vldr	s13, [r2, #4]
 800b3ee:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800b3f2:	3901      	subs	r1, #1
 800b3f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b3f8:	ed82 7a00 	vstr	s14, [r2]
 800b3fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b400:	edc2 7a01 	vstr	s15, [r2, #4]
 800b404:	e78e      	b.n	800b324 <__kernel_rem_pio2f+0x3e8>
 800b406:	ed33 7a01 	vldmdb	r3!, {s14}
 800b40a:	3c01      	subs	r4, #1
 800b40c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b410:	e78f      	b.n	800b332 <__kernel_rem_pio2f+0x3f6>
 800b412:	eef1 6a66 	vneg.f32	s13, s13
 800b416:	eeb1 7a47 	vneg.f32	s14, s14
 800b41a:	edc8 6a00 	vstr	s13, [r8]
 800b41e:	ed88 7a01 	vstr	s14, [r8, #4]
 800b422:	eef1 7a67 	vneg.f32	s15, s15
 800b426:	e790      	b.n	800b34a <__kernel_rem_pio2f+0x40e>

0800b428 <__kernel_sinf>:
 800b428:	ee10 3a10 	vmov	r3, s0
 800b42c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b430:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800b434:	da04      	bge.n	800b440 <__kernel_sinf+0x18>
 800b436:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800b43a:	ee17 3a90 	vmov	r3, s15
 800b43e:	b35b      	cbz	r3, 800b498 <__kernel_sinf+0x70>
 800b440:	ee20 7a00 	vmul.f32	s14, s0, s0
 800b444:	eddf 7a15 	vldr	s15, [pc, #84]	; 800b49c <__kernel_sinf+0x74>
 800b448:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800b4a0 <__kernel_sinf+0x78>
 800b44c:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b450:	eddf 7a14 	vldr	s15, [pc, #80]	; 800b4a4 <__kernel_sinf+0x7c>
 800b454:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b458:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800b4a8 <__kernel_sinf+0x80>
 800b45c:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b460:	eddf 7a12 	vldr	s15, [pc, #72]	; 800b4ac <__kernel_sinf+0x84>
 800b464:	ee60 6a07 	vmul.f32	s13, s0, s14
 800b468:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b46c:	b930      	cbnz	r0, 800b47c <__kernel_sinf+0x54>
 800b46e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800b4b0 <__kernel_sinf+0x88>
 800b472:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b476:	eea6 0a26 	vfma.f32	s0, s12, s13
 800b47a:	4770      	bx	lr
 800b47c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800b480:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800b484:	eee0 7a86 	vfma.f32	s15, s1, s12
 800b488:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800b48c:	eddf 7a09 	vldr	s15, [pc, #36]	; 800b4b4 <__kernel_sinf+0x8c>
 800b490:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800b494:	ee30 0a60 	vsub.f32	s0, s0, s1
 800b498:	4770      	bx	lr
 800b49a:	bf00      	nop
 800b49c:	2f2ec9d3 	.word	0x2f2ec9d3
 800b4a0:	b2d72f34 	.word	0xb2d72f34
 800b4a4:	3638ef1b 	.word	0x3638ef1b
 800b4a8:	b9500d01 	.word	0xb9500d01
 800b4ac:	3c088889 	.word	0x3c088889
 800b4b0:	be2aaaab 	.word	0xbe2aaaab
 800b4b4:	3e2aaaab 	.word	0x3e2aaaab

0800b4b8 <fabsf>:
 800b4b8:	ee10 3a10 	vmov	r3, s0
 800b4bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b4c0:	ee00 3a10 	vmov	s0, r3
 800b4c4:	4770      	bx	lr
	...

0800b4c8 <floorf>:
 800b4c8:	ee10 3a10 	vmov	r3, s0
 800b4cc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b4d0:	3a7f      	subs	r2, #127	; 0x7f
 800b4d2:	2a16      	cmp	r2, #22
 800b4d4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b4d8:	dc2a      	bgt.n	800b530 <floorf+0x68>
 800b4da:	2a00      	cmp	r2, #0
 800b4dc:	da11      	bge.n	800b502 <floorf+0x3a>
 800b4de:	eddf 7a18 	vldr	s15, [pc, #96]	; 800b540 <floorf+0x78>
 800b4e2:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b4e6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b4ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4ee:	dd05      	ble.n	800b4fc <floorf+0x34>
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	da23      	bge.n	800b53c <floorf+0x74>
 800b4f4:	4a13      	ldr	r2, [pc, #76]	; (800b544 <floorf+0x7c>)
 800b4f6:	2900      	cmp	r1, #0
 800b4f8:	bf18      	it	ne
 800b4fa:	4613      	movne	r3, r2
 800b4fc:	ee00 3a10 	vmov	s0, r3
 800b500:	4770      	bx	lr
 800b502:	4911      	ldr	r1, [pc, #68]	; (800b548 <floorf+0x80>)
 800b504:	4111      	asrs	r1, r2
 800b506:	420b      	tst	r3, r1
 800b508:	d0fa      	beq.n	800b500 <floorf+0x38>
 800b50a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800b540 <floorf+0x78>
 800b50e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b512:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b51a:	ddef      	ble.n	800b4fc <floorf+0x34>
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	bfbe      	ittt	lt
 800b520:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800b524:	fa40 f202 	asrlt.w	r2, r0, r2
 800b528:	189b      	addlt	r3, r3, r2
 800b52a:	ea23 0301 	bic.w	r3, r3, r1
 800b52e:	e7e5      	b.n	800b4fc <floorf+0x34>
 800b530:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800b534:	d3e4      	bcc.n	800b500 <floorf+0x38>
 800b536:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b53a:	4770      	bx	lr
 800b53c:	2300      	movs	r3, #0
 800b53e:	e7dd      	b.n	800b4fc <floorf+0x34>
 800b540:	7149f2ca 	.word	0x7149f2ca
 800b544:	bf800000 	.word	0xbf800000
 800b548:	007fffff 	.word	0x007fffff

0800b54c <scalbnf>:
 800b54c:	ee10 3a10 	vmov	r3, s0
 800b550:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800b554:	d025      	beq.n	800b5a2 <scalbnf+0x56>
 800b556:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800b55a:	d302      	bcc.n	800b562 <scalbnf+0x16>
 800b55c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b560:	4770      	bx	lr
 800b562:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800b566:	d122      	bne.n	800b5ae <scalbnf+0x62>
 800b568:	4b2a      	ldr	r3, [pc, #168]	; (800b614 <scalbnf+0xc8>)
 800b56a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800b618 <scalbnf+0xcc>
 800b56e:	4298      	cmp	r0, r3
 800b570:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b574:	db16      	blt.n	800b5a4 <scalbnf+0x58>
 800b576:	ee10 3a10 	vmov	r3, s0
 800b57a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b57e:	3a19      	subs	r2, #25
 800b580:	4402      	add	r2, r0
 800b582:	2afe      	cmp	r2, #254	; 0xfe
 800b584:	dd15      	ble.n	800b5b2 <scalbnf+0x66>
 800b586:	ee10 3a10 	vmov	r3, s0
 800b58a:	eddf 7a24 	vldr	s15, [pc, #144]	; 800b61c <scalbnf+0xd0>
 800b58e:	eddf 6a24 	vldr	s13, [pc, #144]	; 800b620 <scalbnf+0xd4>
 800b592:	2b00      	cmp	r3, #0
 800b594:	eeb0 7a67 	vmov.f32	s14, s15
 800b598:	bfb8      	it	lt
 800b59a:	eef0 7a66 	vmovlt.f32	s15, s13
 800b59e:	ee27 0a27 	vmul.f32	s0, s14, s15
 800b5a2:	4770      	bx	lr
 800b5a4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800b624 <scalbnf+0xd8>
 800b5a8:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b5ac:	4770      	bx	lr
 800b5ae:	0dd2      	lsrs	r2, r2, #23
 800b5b0:	e7e6      	b.n	800b580 <scalbnf+0x34>
 800b5b2:	2a00      	cmp	r2, #0
 800b5b4:	dd06      	ble.n	800b5c4 <scalbnf+0x78>
 800b5b6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b5ba:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800b5be:	ee00 3a10 	vmov	s0, r3
 800b5c2:	4770      	bx	lr
 800b5c4:	f112 0f16 	cmn.w	r2, #22
 800b5c8:	da1a      	bge.n	800b600 <scalbnf+0xb4>
 800b5ca:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b5ce:	4298      	cmp	r0, r3
 800b5d0:	ee10 3a10 	vmov	r3, s0
 800b5d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b5d8:	dd0a      	ble.n	800b5f0 <scalbnf+0xa4>
 800b5da:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800b61c <scalbnf+0xd0>
 800b5de:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800b620 <scalbnf+0xd4>
 800b5e2:	eef0 7a40 	vmov.f32	s15, s0
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	bf18      	it	ne
 800b5ea:	eeb0 0a47 	vmovne.f32	s0, s14
 800b5ee:	e7db      	b.n	800b5a8 <scalbnf+0x5c>
 800b5f0:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800b624 <scalbnf+0xd8>
 800b5f4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800b628 <scalbnf+0xdc>
 800b5f8:	eef0 7a40 	vmov.f32	s15, s0
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	e7f3      	b.n	800b5e8 <scalbnf+0x9c>
 800b600:	3219      	adds	r2, #25
 800b602:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b606:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800b60a:	eddf 7a08 	vldr	s15, [pc, #32]	; 800b62c <scalbnf+0xe0>
 800b60e:	ee07 3a10 	vmov	s14, r3
 800b612:	e7c4      	b.n	800b59e <scalbnf+0x52>
 800b614:	ffff3cb0 	.word	0xffff3cb0
 800b618:	4c000000 	.word	0x4c000000
 800b61c:	7149f2ca 	.word	0x7149f2ca
 800b620:	f149f2ca 	.word	0xf149f2ca
 800b624:	0da24260 	.word	0x0da24260
 800b628:	8da24260 	.word	0x8da24260
 800b62c:	33000000 	.word	0x33000000

0800b630 <_init>:
 800b630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b632:	bf00      	nop
 800b634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b636:	bc08      	pop	{r3}
 800b638:	469e      	mov	lr, r3
 800b63a:	4770      	bx	lr

0800b63c <_fini>:
 800b63c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b63e:	bf00      	nop
 800b640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b642:	bc08      	pop	{r3}
 800b644:	469e      	mov	lr, r3
 800b646:	4770      	bx	lr
