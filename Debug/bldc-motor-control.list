
bldc-motor-control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004918  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08004ab0  08004ab0  00014ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b40  08004b40  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004b40  08004b40  00014b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b48  08004b48  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b48  08004b48  00014b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b4c  08004b4c  00014b4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004b50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  20000070  08004bc0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f0  08004bc0  000201f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f1a5  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002093  00000000  00000000  0002f245  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da0  00000000  00000000  000312d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cd8  00000000  00000000  00032078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000184c8  00000000  00000000  00032d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f067  00000000  00000000  0004b218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b131  00000000  00000000  0005a27f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f53b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fc8  00000000  00000000  000f5400  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004a98 	.word	0x08004a98

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	08004a98 	.word	0x08004a98

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e2:	f000 fea3 	bl	800122c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e6:	f000 f851 	bl	800058c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ea:	f000 fa29 	bl	8000940 <MX_GPIO_Init>
  MX_ADC1_Init();
 80004ee:	f000 f8b5 	bl	800065c <MX_ADC1_Init>
  MX_USART6_UART_Init();
 80004f2:	f000 f9fb 	bl	80008ec <MX_USART6_UART_Init>
  MX_TIM1_Init();
 80004f6:	f000 f903 	bl	8000700 <MX_TIM1_Init>
  MX_TIM3_Init();
 80004fa:	f000 f99f 	bl	800083c <MX_TIM3_Init>


//  Motor_Start();


  uint32_t time = HAL_GetTick();
 80004fe:	f000 fefb 	bl	80012f8 <HAL_GetTick>
 8000502:	60f8      	str	r0, [r7, #12]
  uint32_t max_time = 3000;
 8000504:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000508:	607b      	str	r3, [r7, #4]
  uint32_t dir = CW;
 800050a:	2301      	movs	r3, #1
 800050c:	60bb      	str	r3, [r7, #8]
  uint32_t speed = 50;
 800050e:	2332      	movs	r3, #50	; 0x32
 8000510:	603b      	str	r3, [r7, #0]

  bldc_motor_init(&htim1, &htim3);
 8000512:	491a      	ldr	r1, [pc, #104]	; (800057c <main+0xa0>)
 8000514:	481a      	ldr	r0, [pc, #104]	; (8000580 <main+0xa4>)
 8000516:	f000 fabb 	bl	8000a90 <bldc_motor_init>
  bldc_motor_set_speed(speed, dir);
 800051a:	68bb      	ldr	r3, [r7, #8]
 800051c:	b2db      	uxtb	r3, r3
 800051e:	4619      	mov	r1, r3
 8000520:	6838      	ldr	r0, [r7, #0]
 8000522:	f000 fafb 	bl	8000b1c <bldc_motor_set_speed>

  printf("motor initialized\n");
 8000526:	4817      	ldr	r0, [pc, #92]	; (8000584 <main+0xa8>)
 8000528:	f003 fe26 	bl	8004178 <puts>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800052c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000530:	4815      	ldr	r0, [pc, #84]	; (8000588 <main+0xac>)
 8000532:	f001 fc0e 	bl	8001d52 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LDN_GPIO_Port, LDN_Pin);
 8000536:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800053a:	4813      	ldr	r0, [pc, #76]	; (8000588 <main+0xac>)
 800053c:	f001 fc09 	bl	8001d52 <HAL_GPIO_TogglePin>
//	}
//
//
//	HAL_Delay(200);

	if((HAL_GetTick() - time) > max_time)
 8000540:	f000 feda 	bl	80012f8 <HAL_GetTick>
 8000544:	4602      	mov	r2, r0
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	1ad3      	subs	r3, r2, r3
 800054a:	687a      	ldr	r2, [r7, #4]
 800054c:	429a      	cmp	r2, r3
 800054e:	d2ed      	bcs.n	800052c <main+0x50>
	{
		time = HAL_GetTick();
 8000550:	f000 fed2 	bl	80012f8 <HAL_GetTick>
 8000554:	60f8      	str	r0, [r7, #12]

		if(CW == dir)
 8000556:	68bb      	ldr	r3, [r7, #8]
 8000558:	2b01      	cmp	r3, #1
 800055a:	d102      	bne.n	8000562 <main+0x86>
			dir = CCW;
 800055c:	2300      	movs	r3, #0
 800055e:	60bb      	str	r3, [r7, #8]
 8000560:	e004      	b.n	800056c <main+0x90>
		else if(CCW == dir)
 8000562:	68bb      	ldr	r3, [r7, #8]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d101      	bne.n	800056c <main+0x90>
			dir = CW;
 8000568:	2301      	movs	r3, #1
 800056a:	60bb      	str	r3, [r7, #8]

		bldc_motor_set_speed(speed, dir);
 800056c:	68bb      	ldr	r3, [r7, #8]
 800056e:	b2db      	uxtb	r3, r3
 8000570:	4619      	mov	r1, r3
 8000572:	6838      	ldr	r0, [r7, #0]
 8000574:	f000 fad2 	bl	8000b1c <bldc_motor_set_speed>
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000578:	e7d8      	b.n	800052c <main+0x50>
 800057a:	bf00      	nop
 800057c:	2000011c 	.word	0x2000011c
 8000580:	200000d4 	.word	0x200000d4
 8000584:	08004ab0 	.word	0x08004ab0
 8000588:	40020c00 	.word	0x40020c00

0800058c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b094      	sub	sp, #80	; 0x50
 8000590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000592:	f107 0320 	add.w	r3, r7, #32
 8000596:	2230      	movs	r2, #48	; 0x30
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f003 fd76 	bl	800408c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a0:	f107 030c 	add.w	r3, r7, #12
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]
 80005ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b0:	2300      	movs	r3, #0
 80005b2:	60bb      	str	r3, [r7, #8]
 80005b4:	4b27      	ldr	r3, [pc, #156]	; (8000654 <SystemClock_Config+0xc8>)
 80005b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b8:	4a26      	ldr	r2, [pc, #152]	; (8000654 <SystemClock_Config+0xc8>)
 80005ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005be:	6413      	str	r3, [r2, #64]	; 0x40
 80005c0:	4b24      	ldr	r3, [pc, #144]	; (8000654 <SystemClock_Config+0xc8>)
 80005c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c8:	60bb      	str	r3, [r7, #8]
 80005ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005cc:	2300      	movs	r3, #0
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	4b21      	ldr	r3, [pc, #132]	; (8000658 <SystemClock_Config+0xcc>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a20      	ldr	r2, [pc, #128]	; (8000658 <SystemClock_Config+0xcc>)
 80005d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005da:	6013      	str	r3, [r2, #0]
 80005dc:	4b1e      	ldr	r3, [pc, #120]	; (8000658 <SystemClock_Config+0xcc>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005e4:	607b      	str	r3, [r7, #4]
 80005e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e8:	2302      	movs	r3, #2
 80005ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ec:	2301      	movs	r3, #1
 80005ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f0:	2310      	movs	r3, #16
 80005f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f4:	2302      	movs	r3, #2
 80005f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005f8:	2300      	movs	r3, #0
 80005fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005fc:	2308      	movs	r3, #8
 80005fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000600:	2354      	movs	r3, #84	; 0x54
 8000602:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000604:	2302      	movs	r3, #2
 8000606:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000608:	2304      	movs	r3, #4
 800060a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060c:	f107 0320 	add.w	r3, r7, #32
 8000610:	4618      	mov	r0, r3
 8000612:	f001 fbb9 	bl	8001d88 <HAL_RCC_OscConfig>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800061c:	f000 fa32 	bl	8000a84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000620:	230f      	movs	r3, #15
 8000622:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000624:	2302      	movs	r3, #2
 8000626:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000628:	2300      	movs	r3, #0
 800062a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800062c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000630:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000632:	2300      	movs	r3, #0
 8000634:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000636:	f107 030c 	add.w	r3, r7, #12
 800063a:	2102      	movs	r1, #2
 800063c:	4618      	mov	r0, r3
 800063e:	f001 fe1b 	bl	8002278 <HAL_RCC_ClockConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000648:	f000 fa1c 	bl	8000a84 <Error_Handler>
  }
}
 800064c:	bf00      	nop
 800064e:	3750      	adds	r7, #80	; 0x50
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40023800 	.word	0x40023800
 8000658:	40007000 	.word	0x40007000

0800065c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000662:	463b      	mov	r3, r7
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800066e:	4b21      	ldr	r3, [pc, #132]	; (80006f4 <MX_ADC1_Init+0x98>)
 8000670:	4a21      	ldr	r2, [pc, #132]	; (80006f8 <MX_ADC1_Init+0x9c>)
 8000672:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000674:	4b1f      	ldr	r3, [pc, #124]	; (80006f4 <MX_ADC1_Init+0x98>)
 8000676:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800067a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800067c:	4b1d      	ldr	r3, [pc, #116]	; (80006f4 <MX_ADC1_Init+0x98>)
 800067e:	2200      	movs	r2, #0
 8000680:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000682:	4b1c      	ldr	r3, [pc, #112]	; (80006f4 <MX_ADC1_Init+0x98>)
 8000684:	2200      	movs	r2, #0
 8000686:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000688:	4b1a      	ldr	r3, [pc, #104]	; (80006f4 <MX_ADC1_Init+0x98>)
 800068a:	2201      	movs	r2, #1
 800068c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800068e:	4b19      	ldr	r3, [pc, #100]	; (80006f4 <MX_ADC1_Init+0x98>)
 8000690:	2200      	movs	r2, #0
 8000692:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000696:	4b17      	ldr	r3, [pc, #92]	; (80006f4 <MX_ADC1_Init+0x98>)
 8000698:	2200      	movs	r2, #0
 800069a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800069c:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <MX_ADC1_Init+0x98>)
 800069e:	4a17      	ldr	r2, [pc, #92]	; (80006fc <MX_ADC1_Init+0xa0>)
 80006a0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006a2:	4b14      	ldr	r3, [pc, #80]	; (80006f4 <MX_ADC1_Init+0x98>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006a8:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <MX_ADC1_Init+0x98>)
 80006aa:	2201      	movs	r2, #1
 80006ac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <MX_ADC1_Init+0x98>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006b6:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <MX_ADC1_Init+0x98>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006bc:	480d      	ldr	r0, [pc, #52]	; (80006f4 <MX_ADC1_Init+0x98>)
 80006be:	f000 fe27 	bl	8001310 <HAL_ADC_Init>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80006c8:	f000 f9dc 	bl	8000a84 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006cc:	2300      	movs	r3, #0
 80006ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006d0:	2301      	movs	r3, #1
 80006d2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006d4:	2300      	movs	r3, #0
 80006d6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006d8:	463b      	mov	r3, r7
 80006da:	4619      	mov	r1, r3
 80006dc:	4805      	ldr	r0, [pc, #20]	; (80006f4 <MX_ADC1_Init+0x98>)
 80006de:	f000 fe5b 	bl	8001398 <HAL_ADC_ConfigChannel>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80006e8:	f000 f9cc 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006ec:	bf00      	nop
 80006ee:	3710      	adds	r7, #16
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	2000008c 	.word	0x2000008c
 80006f8:	40012000 	.word	0x40012000
 80006fc:	0f000001 	.word	0x0f000001

08000700 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b092      	sub	sp, #72	; 0x48
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000706:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000710:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]
 8000720:	615a      	str	r2, [r3, #20]
 8000722:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	2220      	movs	r2, #32
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f003 fcae 	bl	800408c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000730:	4b40      	ldr	r3, [pc, #256]	; (8000834 <MX_TIM1_Init+0x134>)
 8000732:	4a41      	ldr	r2, [pc, #260]	; (8000838 <MX_TIM1_Init+0x138>)
 8000734:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 42-1;
 8000736:	4b3f      	ldr	r3, [pc, #252]	; (8000834 <MX_TIM1_Init+0x134>)
 8000738:	2229      	movs	r2, #41	; 0x29
 800073a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800073c:	4b3d      	ldr	r3, [pc, #244]	; (8000834 <MX_TIM1_Init+0x134>)
 800073e:	2220      	movs	r2, #32
 8000740:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000742:	4b3c      	ldr	r3, [pc, #240]	; (8000834 <MX_TIM1_Init+0x134>)
 8000744:	2263      	movs	r2, #99	; 0x63
 8000746:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000748:	4b3a      	ldr	r3, [pc, #232]	; (8000834 <MX_TIM1_Init+0x134>)
 800074a:	2200      	movs	r2, #0
 800074c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800074e:	4b39      	ldr	r3, [pc, #228]	; (8000834 <MX_TIM1_Init+0x134>)
 8000750:	2200      	movs	r2, #0
 8000752:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000754:	4b37      	ldr	r3, [pc, #220]	; (8000834 <MX_TIM1_Init+0x134>)
 8000756:	2200      	movs	r2, #0
 8000758:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800075a:	4836      	ldr	r0, [pc, #216]	; (8000834 <MX_TIM1_Init+0x134>)
 800075c:	f002 f87a 	bl	8002854 <HAL_TIM_PWM_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8000766:	f000 f98d 	bl	8000a84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800076a:	2300      	movs	r3, #0
 800076c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800076e:	2300      	movs	r3, #0
 8000770:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000772:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000776:	4619      	mov	r1, r3
 8000778:	482e      	ldr	r0, [pc, #184]	; (8000834 <MX_TIM1_Init+0x134>)
 800077a:	f002 ffad 	bl	80036d8 <HAL_TIMEx_MasterConfigSynchronization>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8000784:	f000 f97e 	bl	8000a84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000788:	2360      	movs	r3, #96	; 0x60
 800078a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000790:	2300      	movs	r3, #0
 8000792:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000794:	2300      	movs	r3, #0
 8000796:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000798:	2300      	movs	r3, #0
 800079a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800079c:	2300      	movs	r3, #0
 800079e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007a0:	2300      	movs	r3, #0
 80007a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007a8:	2200      	movs	r2, #0
 80007aa:	4619      	mov	r1, r3
 80007ac:	4821      	ldr	r0, [pc, #132]	; (8000834 <MX_TIM1_Init+0x134>)
 80007ae:	f002 fab5 	bl	8002d1c <HAL_TIM_PWM_ConfigChannel>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 80007b8:	f000 f964 	bl	8000a84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007c0:	2204      	movs	r2, #4
 80007c2:	4619      	mov	r1, r3
 80007c4:	481b      	ldr	r0, [pc, #108]	; (8000834 <MX_TIM1_Init+0x134>)
 80007c6:	f002 faa9 	bl	8002d1c <HAL_TIM_PWM_ConfigChannel>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 80007d0:	f000 f958 	bl	8000a84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80007d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007d8:	2208      	movs	r2, #8
 80007da:	4619      	mov	r1, r3
 80007dc:	4815      	ldr	r0, [pc, #84]	; (8000834 <MX_TIM1_Init+0x134>)
 80007de:	f002 fa9d 	bl	8002d1c <HAL_TIM_PWM_ConfigChannel>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 80007e8:	f000 f94c 	bl	8000a84 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 80007ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80007f0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 80007f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007f6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007f8:	2300      	movs	r3, #0
 80007fa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8000800:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000804:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000806:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800080a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 800080c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000810:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000812:	1d3b      	adds	r3, r7, #4
 8000814:	4619      	mov	r1, r3
 8000816:	4807      	ldr	r0, [pc, #28]	; (8000834 <MX_TIM1_Init+0x134>)
 8000818:	f002 ffcc 	bl	80037b4 <HAL_TIMEx_ConfigBreakDeadTime>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8000822:	f000 f92f 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000826:	4803      	ldr	r0, [pc, #12]	; (8000834 <MX_TIM1_Init+0x134>)
 8000828:	f000 fb4a 	bl	8000ec0 <HAL_TIM_MspPostInit>

}
 800082c:	bf00      	nop
 800082e:	3748      	adds	r7, #72	; 0x48
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	200000d4 	.word	0x200000d4
 8000838:	40010000 	.word	0x40010000

0800083c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b08a      	sub	sp, #40	; 0x28
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000842:	f107 0320 	add.w	r3, r7, #32
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800084c:	1d3b      	adds	r3, r7, #4
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]
 8000856:	60da      	str	r2, [r3, #12]
 8000858:	611a      	str	r2, [r3, #16]
 800085a:	615a      	str	r2, [r3, #20]
 800085c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800085e:	4b21      	ldr	r3, [pc, #132]	; (80008e4 <MX_TIM3_Init+0xa8>)
 8000860:	4a21      	ldr	r2, [pc, #132]	; (80008e8 <MX_TIM3_Init+0xac>)
 8000862:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 8000864:	4b1f      	ldr	r3, [pc, #124]	; (80008e4 <MX_TIM3_Init+0xa8>)
 8000866:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800086a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800086c:	4b1d      	ldr	r3, [pc, #116]	; (80008e4 <MX_TIM3_Init+0xa8>)
 800086e:	2200      	movs	r2, #0
 8000870:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000872:	4b1c      	ldr	r3, [pc, #112]	; (80008e4 <MX_TIM3_Init+0xa8>)
 8000874:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000878:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800087a:	4b1a      	ldr	r3, [pc, #104]	; (80008e4 <MX_TIM3_Init+0xa8>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000880:	4b18      	ldr	r3, [pc, #96]	; (80008e4 <MX_TIM3_Init+0xa8>)
 8000882:	2200      	movs	r2, #0
 8000884:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000886:	4817      	ldr	r0, [pc, #92]	; (80008e4 <MX_TIM3_Init+0xa8>)
 8000888:	f001 ff30 	bl	80026ec <HAL_TIM_OC_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000892:	f000 f8f7 	bl	8000a84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000896:	2300      	movs	r3, #0
 8000898:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800089a:	2380      	movs	r3, #128	; 0x80
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800089e:	f107 0320 	add.w	r3, r7, #32
 80008a2:	4619      	mov	r1, r3
 80008a4:	480f      	ldr	r0, [pc, #60]	; (80008e4 <MX_TIM3_Init+0xa8>)
 80008a6:	f002 ff17 	bl	80036d8 <HAL_TIMEx_MasterConfigSynchronization>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80008b0:	f000 f8e8 	bl	8000a84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80008b4:	2300      	movs	r3, #0
 80008b6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008bc:	2300      	movs	r3, #0
 80008be:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008c0:	2300      	movs	r3, #0
 80008c2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008c4:	1d3b      	adds	r3, r7, #4
 80008c6:	2200      	movs	r2, #0
 80008c8:	4619      	mov	r1, r3
 80008ca:	4806      	ldr	r0, [pc, #24]	; (80008e4 <MX_TIM3_Init+0xa8>)
 80008cc:	f002 f9ca 	bl	8002c64 <HAL_TIM_OC_ConfigChannel>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80008d6:	f000 f8d5 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	3728      	adds	r7, #40	; 0x28
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	2000011c 	.word	0x2000011c
 80008e8:	40000400 	.word	0x40000400

080008ec <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80008f0:	4b11      	ldr	r3, [pc, #68]	; (8000938 <MX_USART6_UART_Init+0x4c>)
 80008f2:	4a12      	ldr	r2, [pc, #72]	; (800093c <MX_USART6_UART_Init+0x50>)
 80008f4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80008f6:	4b10      	ldr	r3, [pc, #64]	; (8000938 <MX_USART6_UART_Init+0x4c>)
 80008f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008fc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80008fe:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <MX_USART6_UART_Init+0x4c>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000904:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <MX_USART6_UART_Init+0x4c>)
 8000906:	2200      	movs	r2, #0
 8000908:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800090a:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <MX_USART6_UART_Init+0x4c>)
 800090c:	2200      	movs	r2, #0
 800090e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000910:	4b09      	ldr	r3, [pc, #36]	; (8000938 <MX_USART6_UART_Init+0x4c>)
 8000912:	220c      	movs	r2, #12
 8000914:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000916:	4b08      	ldr	r3, [pc, #32]	; (8000938 <MX_USART6_UART_Init+0x4c>)
 8000918:	2200      	movs	r2, #0
 800091a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <MX_USART6_UART_Init+0x4c>)
 800091e:	2200      	movs	r2, #0
 8000920:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000922:	4805      	ldr	r0, [pc, #20]	; (8000938 <MX_USART6_UART_Init+0x4c>)
 8000924:	f002 ffc7 	bl	80038b6 <HAL_UART_Init>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800092e:	f000 f8a9 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	20000164 	.word	0x20000164
 800093c:	40011400 	.word	0x40011400

08000940 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b08a      	sub	sp, #40	; 0x28
 8000944:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000946:	f107 0314 	add.w	r3, r7, #20
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]
 8000950:	609a      	str	r2, [r3, #8]
 8000952:	60da      	str	r2, [r3, #12]
 8000954:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	613b      	str	r3, [r7, #16]
 800095a:	4b32      	ldr	r3, [pc, #200]	; (8000a24 <MX_GPIO_Init+0xe4>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a31      	ldr	r2, [pc, #196]	; (8000a24 <MX_GPIO_Init+0xe4>)
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b2f      	ldr	r3, [pc, #188]	; (8000a24 <MX_GPIO_Init+0xe4>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	613b      	str	r3, [r7, #16]
 8000970:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	4b2b      	ldr	r3, [pc, #172]	; (8000a24 <MX_GPIO_Init+0xe4>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	4a2a      	ldr	r2, [pc, #168]	; (8000a24 <MX_GPIO_Init+0xe4>)
 800097c:	f043 0302 	orr.w	r3, r3, #2
 8000980:	6313      	str	r3, [r2, #48]	; 0x30
 8000982:	4b28      	ldr	r3, [pc, #160]	; (8000a24 <MX_GPIO_Init+0xe4>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	f003 0302 	and.w	r3, r3, #2
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	60bb      	str	r3, [r7, #8]
 8000992:	4b24      	ldr	r3, [pc, #144]	; (8000a24 <MX_GPIO_Init+0xe4>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4a23      	ldr	r2, [pc, #140]	; (8000a24 <MX_GPIO_Init+0xe4>)
 8000998:	f043 0308 	orr.w	r3, r3, #8
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
 800099e:	4b21      	ldr	r3, [pc, #132]	; (8000a24 <MX_GPIO_Init+0xe4>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	f003 0308 	and.w	r3, r3, #8
 80009a6:	60bb      	str	r3, [r7, #8]
 80009a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	607b      	str	r3, [r7, #4]
 80009ae:	4b1d      	ldr	r3, [pc, #116]	; (8000a24 <MX_GPIO_Init+0xe4>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	4a1c      	ldr	r2, [pc, #112]	; (8000a24 <MX_GPIO_Init+0xe4>)
 80009b4:	f043 0304 	orr.w	r3, r3, #4
 80009b8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ba:	4b1a      	ldr	r3, [pc, #104]	; (8000a24 <MX_GPIO_Init+0xe4>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	f003 0304 	and.w	r3, r3, #4
 80009c2:	607b      	str	r3, [r7, #4]
 80009c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PWM1EN_Pin|PWM2EN_Pin|PWM3EN_Pin, GPIO_PIN_RESET);
 80009c6:	2200      	movs	r2, #0
 80009c8:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 80009cc:	4816      	ldr	r0, [pc, #88]	; (8000a28 <MX_GPIO_Init+0xe8>)
 80009ce:	f001 f9a7 	bl	8001d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD3_Pin|LDN_Pin, GPIO_PIN_RESET);
 80009d2:	2200      	movs	r2, #0
 80009d4:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 80009d8:	4814      	ldr	r0, [pc, #80]	; (8000a2c <MX_GPIO_Init+0xec>)
 80009da:	f001 f9a1 	bl	8001d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PWM1EN_Pin PWM2EN_Pin PWM3EN_Pin */
  GPIO_InitStruct.Pin = PWM1EN_Pin|PWM2EN_Pin|PWM3EN_Pin;
 80009de:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80009e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e4:	2301      	movs	r3, #1
 80009e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ec:	2300      	movs	r3, #0
 80009ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f0:	f107 0314 	add.w	r3, r7, #20
 80009f4:	4619      	mov	r1, r3
 80009f6:	480c      	ldr	r0, [pc, #48]	; (8000a28 <MX_GPIO_Init+0xe8>)
 80009f8:	f001 f80e 	bl	8001a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LDN_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LDN_Pin;
 80009fc:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8000a00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a02:	2301      	movs	r3, #1
 8000a04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a0e:	f107 0314 	add.w	r3, r7, #20
 8000a12:	4619      	mov	r1, r3
 8000a14:	4805      	ldr	r0, [pc, #20]	; (8000a2c <MX_GPIO_Init+0xec>)
 8000a16:	f000 ffff 	bl	8001a18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a1a:	bf00      	nop
 8000a1c:	3728      	adds	r7, #40	; 0x28
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40023800 	.word	0x40023800
 8000a28:	40020400 	.word	0x40020400
 8000a2c:	40020c00 	.word	0x40020c00

08000a30 <HAL_TIMEx_CommutCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
	bldc_motor_six_step_algorithm();
 8000a38:	f000 f8f4 	bl	8000c24 <bldc_motor_six_step_algorithm>
}
 8000a3c:	bf00      	nop
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <__io_putchar>:

int __io_putchar(int ch)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
    if (ch == '\n') {
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2b0a      	cmp	r3, #10
 8000a50:	d109      	bne.n	8000a66 <__io_putchar+0x22>
        uint8_t ch6 = '\r';
 8000a52:	230d      	movs	r3, #13
 8000a54:	73fb      	strb	r3, [r7, #15]
        HAL_UART_Transmit(&huart6, &ch6, 1, HAL_MAX_DELAY);
 8000a56:	f107 010f 	add.w	r1, r7, #15
 8000a5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a5e:	2201      	movs	r2, #1
 8000a60:	4807      	ldr	r0, [pc, #28]	; (8000a80 <__io_putchar+0x3c>)
 8000a62:	f002 ff75 	bl	8003950 <HAL_UART_Transmit>
    }

    HAL_UART_Transmit(&huart6, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000a66:	1d39      	adds	r1, r7, #4
 8000a68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	4804      	ldr	r0, [pc, #16]	; (8000a80 <__io_putchar+0x3c>)
 8000a70:	f002 ff6e 	bl	8003950 <HAL_UART_Transmit>
    return 1;
 8000a74:	2301      	movs	r3, #1
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3710      	adds	r7, #16
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000164 	.word	0x20000164

08000a84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a88:	b672      	cpsid	i
}
 8000a8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <Error_Handler+0x8>
	...

08000a90 <bldc_motor_init>:
////	HAL_GPIO_WritePin(PH2_GPIO_Port, PH2_Pin, GPIO_PIN_SET);
////	HAL_GPIO_WritePin(PWM3EN_GPIO_Port, PWM3EN_Pin, GPIO_PIN_SET);
//}

void bldc_motor_init(TIM_HandleTypeDef *_tim_pwm, TIM_HandleTypeDef *_tim_com)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(PWM1EN_GPIO_Port, PWM1EN_Pin, GPIO_PIN_SET);
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aa0:	481c      	ldr	r0, [pc, #112]	; (8000b14 <bldc_motor_init+0x84>)
 8000aa2:	f001 f93d 	bl	8001d20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PWM2EN_GPIO_Port, PWM2EN_Pin, GPIO_PIN_SET);
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aac:	4819      	ldr	r0, [pc, #100]	; (8000b14 <bldc_motor_init+0x84>)
 8000aae:	f001 f937 	bl	8001d20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PWM3EN_GPIO_Port, PWM3EN_Pin, GPIO_PIN_SET);
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ab8:	4816      	ldr	r0, [pc, #88]	; (8000b14 <bldc_motor_init+0x84>)
 8000aba:	f001 f931 	bl	8001d20 <HAL_GPIO_WritePin>

	bldc.tim_pwm = _tim_pwm;
 8000abe:	4a16      	ldr	r2, [pc, #88]	; (8000b18 <bldc_motor_init+0x88>)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	6113      	str	r3, [r2, #16]
	bldc.tim_com = _tim_com;
 8000ac4:	4a14      	ldr	r2, [pc, #80]	; (8000b18 <bldc_motor_init+0x88>)
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	60d3      	str	r3, [r2, #12]

	bldc.step_number = 1;
 8000aca:	4b13      	ldr	r3, [pc, #76]	; (8000b18 <bldc_motor_init+0x88>)
 8000acc:	2201      	movs	r2, #1
 8000ace:	701a      	strb	r2, [r3, #0]
	bldc.speed_pulse = 0;
 8000ad0:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <bldc_motor_init+0x88>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	605a      	str	r2, [r3, #4]
	bldc.dir = CW;
 8000ad6:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <bldc_motor_init+0x88>)
 8000ad8:	2201      	movs	r2, #1
 8000ada:	609a      	str	r2, [r3, #8]

	bldc_motor_Config_Channel_Init();
 8000adc:	f000 f83a 	bl	8000b54 <bldc_motor_Config_Channel_Init>

	__HAL_TIM_SET_AUTORELOAD(bldc.tim_com, ARR_TIM3_VALUE);
 8000ae0:	4b0d      	ldr	r3, [pc, #52]	; (8000b18 <bldc_motor_init+0x88>)
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	2264      	movs	r2, #100	; 0x64
 8000ae8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000aea:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <bldc_motor_init+0x88>)
 8000aec:	68db      	ldr	r3, [r3, #12]
 8000aee:	2264      	movs	r2, #100	; 0x64
 8000af0:	60da      	str	r2, [r3, #12]

	HAL_TIM_Base_Start(bldc.tim_com);
 8000af2:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <bldc_motor_init+0x88>)
 8000af4:	68db      	ldr	r3, [r3, #12]
 8000af6:	4618      	mov	r0, r3
 8000af8:	f001 fd9e 	bl	8002638 <HAL_TIM_Base_Start>
	HAL_TIMEx_ConfigCommutationEvent_IT(bldc.tim_pwm, TIM_TS_ITR2, TIM_COMMUTATION_TRGI);
 8000afc:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <bldc_motor_init+0x88>)
 8000afe:	691b      	ldr	r3, [r3, #16]
 8000b00:	2204      	movs	r2, #4
 8000b02:	2120      	movs	r1, #32
 8000b04:	4618      	mov	r0, r3
 8000b06:	f002 fd87 	bl	8003618 <HAL_TIMEx_ConfigCommutEvent_IT>
}
 8000b0a:	bf00      	nop
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40020400 	.word	0x40020400
 8000b18:	200001a8 	.word	0x200001a8

08000b1c <bldc_motor_set_speed>:



void bldc_motor_set_speed(uint32_t speed, direction dir)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	460b      	mov	r3, r1
 8000b26:	70fb      	strb	r3, [r7, #3]
	if(speed > BLDC_MOTOR_MAX_SPEED)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2b64      	cmp	r3, #100	; 0x64
 8000b2c:	d903      	bls.n	8000b36 <bldc_motor_set_speed+0x1a>
	{
		bldc.speed_pulse = BLDC_MOTOR_MAX_SPEED;
 8000b2e:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <bldc_motor_set_speed+0x34>)
 8000b30:	2264      	movs	r2, #100	; 0x64
 8000b32:	605a      	str	r2, [r3, #4]
 8000b34:	e002      	b.n	8000b3c <bldc_motor_set_speed+0x20>
	}
	else
	{
		bldc.speed_pulse = speed;
 8000b36:	4a06      	ldr	r2, [pc, #24]	; (8000b50 <bldc_motor_set_speed+0x34>)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	6053      	str	r3, [r2, #4]
	}

	bldc.dir = dir;
 8000b3c:	78fb      	ldrb	r3, [r7, #3]
 8000b3e:	4a04      	ldr	r2, [pc, #16]	; (8000b50 <bldc_motor_set_speed+0x34>)
 8000b40:	6093      	str	r3, [r2, #8]
}
 8000b42:	bf00      	nop
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	200001a8 	.word	0x200001a8

08000b54 <bldc_motor_Config_Channel_Init>:
//    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, speed);
//}


void bldc_motor_Config_Channel_Init(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
	bldc.sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b58:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <bldc_motor_Config_Channel_Init+0x38>)
 8000b5a:	2260      	movs	r2, #96	; 0x60
 8000b5c:	615a      	str	r2, [r3, #20]
	bldc.sConfigOC.Pulse = 0;
 8000b5e:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <bldc_motor_Config_Channel_Init+0x38>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	619a      	str	r2, [r3, #24]
	bldc.sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b64:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <bldc_motor_Config_Channel_Init+0x38>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	61da      	str	r2, [r3, #28]
	bldc.sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b6a:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <bldc_motor_Config_Channel_Init+0x38>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	621a      	str	r2, [r3, #32]
	bldc.sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b70:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <bldc_motor_Config_Channel_Init+0x38>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	625a      	str	r2, [r3, #36]	; 0x24
	bldc.sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b76:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <bldc_motor_Config_Channel_Init+0x38>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	629a      	str	r2, [r3, #40]	; 0x28
	bldc.sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b7c:	4b03      	ldr	r3, [pc, #12]	; (8000b8c <bldc_motor_Config_Channel_Init+0x38>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000b82:	bf00      	nop
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr
 8000b8c:	200001a8 	.word	0x200001a8

08000b90 <bldc_motor_PWM_Config_Channel>:

void bldc_motor_PWM_Config_Channel(uint32_t pulse, uint32_t channel)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	6039      	str	r1, [r7, #0]
    bldc.sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <bldc_motor_PWM_Config_Channel+0x44>)
 8000b9c:	2260      	movs	r2, #96	; 0x60
 8000b9e:	615a      	str	r2, [r3, #20]
    bldc.sConfigOC.Pulse = pulse;
 8000ba0:	4a0c      	ldr	r2, [pc, #48]	; (8000bd4 <bldc_motor_PWM_Config_Channel+0x44>)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6193      	str	r3, [r2, #24]
    HAL_TIM_PWM_ConfigChannel(bldc.tim_pwm, &bldc.sConfigOC, channel);
 8000ba6:	4b0b      	ldr	r3, [pc, #44]	; (8000bd4 <bldc_motor_PWM_Config_Channel+0x44>)
 8000ba8:	691b      	ldr	r3, [r3, #16]
 8000baa:	683a      	ldr	r2, [r7, #0]
 8000bac:	490a      	ldr	r1, [pc, #40]	; (8000bd8 <bldc_motor_PWM_Config_Channel+0x48>)
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f002 f8b4 	bl	8002d1c <HAL_TIM_PWM_ConfigChannel>

    HAL_TIM_PWM_Start(bldc.tim_pwm, channel);
 8000bb4:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <bldc_motor_PWM_Config_Channel+0x44>)
 8000bb6:	691b      	ldr	r3, [r3, #16]
 8000bb8:	6839      	ldr	r1, [r7, #0]
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f001 fe9a 	bl	80028f4 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(bldc.tim_pwm, channel);
 8000bc0:	4b04      	ldr	r3, [pc, #16]	; (8000bd4 <bldc_motor_PWM_Config_Channel+0x44>)
 8000bc2:	691b      	ldr	r3, [r3, #16]
 8000bc4:	6839      	ldr	r1, [r7, #0]
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f002 fc7a 	bl	80034c0 <HAL_TIMEx_PWMN_Start>
}
 8000bcc:	bf00      	nop
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	200001a8 	.word	0x200001a8
 8000bd8:	200001bc 	.word	0x200001bc

08000bdc <bldc_motor_OC_Config_Channel>:

void bldc_motor_OC_Config_Channel(uint32_t mode, uint32_t channel)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	6039      	str	r1, [r7, #0]
    bldc.sConfigOC.OCMode = mode;
 8000be6:	4a0d      	ldr	r2, [pc, #52]	; (8000c1c <bldc_motor_OC_Config_Channel+0x40>)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6153      	str	r3, [r2, #20]
    HAL_TIM_OC_ConfigChannel(bldc.tim_pwm, &bldc.sConfigOC, channel);
 8000bec:	4b0b      	ldr	r3, [pc, #44]	; (8000c1c <bldc_motor_OC_Config_Channel+0x40>)
 8000bee:	691b      	ldr	r3, [r3, #16]
 8000bf0:	683a      	ldr	r2, [r7, #0]
 8000bf2:	490b      	ldr	r1, [pc, #44]	; (8000c20 <bldc_motor_OC_Config_Channel+0x44>)
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f002 f835 	bl	8002c64 <HAL_TIM_OC_ConfigChannel>

    HAL_TIM_OC_Stop(bldc.tim_pwm, channel);
 8000bfa:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <bldc_motor_OC_Config_Channel+0x40>)
 8000bfc:	691b      	ldr	r3, [r3, #16]
 8000bfe:	6839      	ldr	r1, [r7, #0]
 8000c00:	4618      	mov	r0, r3
 8000c02:	f001 fdc3 	bl	800278c <HAL_TIM_OC_Stop>
	HAL_TIMEx_OCN_Start(bldc.tim_pwm, channel);
 8000c06:	4b05      	ldr	r3, [pc, #20]	; (8000c1c <bldc_motor_OC_Config_Channel+0x40>)
 8000c08:	691b      	ldr	r3, [r3, #16]
 8000c0a:	6839      	ldr	r1, [r7, #0]
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f002 fbab 	bl	8003368 <HAL_TIMEx_OCN_Start>
}
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	200001a8 	.word	0x200001a8
 8000c20:	200001bc 	.word	0x200001bc

08000c24 <bldc_motor_six_step_algorithm>:

void bldc_motor_six_step_algorithm(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
    switch (bldc.step_number)
 8000c28:	4b49      	ldr	r3, [pc, #292]	; (8000d50 <bldc_motor_six_step_algorithm+0x12c>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	3b01      	subs	r3, #1
 8000c2e:	2b05      	cmp	r3, #5
 8000c30:	d868      	bhi.n	8000d04 <bldc_motor_six_step_algorithm+0xe0>
 8000c32:	a201      	add	r2, pc, #4	; (adr r2, 8000c38 <bldc_motor_six_step_algorithm+0x14>)
 8000c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c38:	08000c51 	.word	0x08000c51
 8000c3c:	08000c6f 	.word	0x08000c6f
 8000c40:	08000c8d 	.word	0x08000c8d
 8000c44:	08000cab 	.word	0x08000cab
 8000c48:	08000cc9 	.word	0x08000cc9
 8000c4c:	08000ce7 	.word	0x08000ce7
    {
        case 1:
            bldc_motor_PWM_Config_Channel(bldc.speed_pulse, TIM_CHANNEL_1);
 8000c50:	4b3f      	ldr	r3, [pc, #252]	; (8000d50 <bldc_motor_six_step_algorithm+0x12c>)
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	2100      	movs	r1, #0
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff ff9a 	bl	8000b90 <bldc_motor_PWM_Config_Channel>
            bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_ACTIVE, TIM_CHANNEL_2);
 8000c5c:	2104      	movs	r1, #4
 8000c5e:	2050      	movs	r0, #80	; 0x50
 8000c60:	f7ff ffbc 	bl	8000bdc <bldc_motor_OC_Config_Channel>
            bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_INACTIVE, TIM_CHANNEL_3);
 8000c64:	2108      	movs	r1, #8
 8000c66:	2040      	movs	r0, #64	; 0x40
 8000c68:	f7ff ffb8 	bl	8000bdc <bldc_motor_OC_Config_Channel>
            break;
 8000c6c:	e04a      	b.n	8000d04 <bldc_motor_six_step_algorithm+0xe0>
        case 2:
            bldc_motor_PWM_Config_Channel(bldc.speed_pulse, TIM_CHANNEL_1);
 8000c6e:	4b38      	ldr	r3, [pc, #224]	; (8000d50 <bldc_motor_six_step_algorithm+0x12c>)
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	2100      	movs	r1, #0
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff ff8b 	bl	8000b90 <bldc_motor_PWM_Config_Channel>
            bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_INACTIVE, TIM_CHANNEL_2);
 8000c7a:	2104      	movs	r1, #4
 8000c7c:	2040      	movs	r0, #64	; 0x40
 8000c7e:	f7ff ffad 	bl	8000bdc <bldc_motor_OC_Config_Channel>
            bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_ACTIVE, TIM_CHANNEL_3);
 8000c82:	2108      	movs	r1, #8
 8000c84:	2050      	movs	r0, #80	; 0x50
 8000c86:	f7ff ffa9 	bl	8000bdc <bldc_motor_OC_Config_Channel>
            break;
 8000c8a:	e03b      	b.n	8000d04 <bldc_motor_six_step_algorithm+0xe0>
        case 3:
            bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_INACTIVE, TIM_CHANNEL_1);
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	2040      	movs	r0, #64	; 0x40
 8000c90:	f7ff ffa4 	bl	8000bdc <bldc_motor_OC_Config_Channel>
            bldc_motor_PWM_Config_Channel(bldc.speed_pulse, TIM_CHANNEL_2);
 8000c94:	4b2e      	ldr	r3, [pc, #184]	; (8000d50 <bldc_motor_six_step_algorithm+0x12c>)
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	2104      	movs	r1, #4
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff ff78 	bl	8000b90 <bldc_motor_PWM_Config_Channel>
            bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_ACTIVE, TIM_CHANNEL_3);
 8000ca0:	2108      	movs	r1, #8
 8000ca2:	2050      	movs	r0, #80	; 0x50
 8000ca4:	f7ff ff9a 	bl	8000bdc <bldc_motor_OC_Config_Channel>
            break;
 8000ca8:	e02c      	b.n	8000d04 <bldc_motor_six_step_algorithm+0xe0>
        case 4:
            bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_ACTIVE, TIM_CHANNEL_1);
 8000caa:	2100      	movs	r1, #0
 8000cac:	2050      	movs	r0, #80	; 0x50
 8000cae:	f7ff ff95 	bl	8000bdc <bldc_motor_OC_Config_Channel>
            bldc_motor_PWM_Config_Channel(bldc.speed_pulse, TIM_CHANNEL_2);
 8000cb2:	4b27      	ldr	r3, [pc, #156]	; (8000d50 <bldc_motor_six_step_algorithm+0x12c>)
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	2104      	movs	r1, #4
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff ff69 	bl	8000b90 <bldc_motor_PWM_Config_Channel>
            bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_INACTIVE, TIM_CHANNEL_3);
 8000cbe:	2108      	movs	r1, #8
 8000cc0:	2040      	movs	r0, #64	; 0x40
 8000cc2:	f7ff ff8b 	bl	8000bdc <bldc_motor_OC_Config_Channel>
            break;
 8000cc6:	e01d      	b.n	8000d04 <bldc_motor_six_step_algorithm+0xe0>
        case 5:
            bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_ACTIVE, TIM_CHANNEL_1);
 8000cc8:	2100      	movs	r1, #0
 8000cca:	2050      	movs	r0, #80	; 0x50
 8000ccc:	f7ff ff86 	bl	8000bdc <bldc_motor_OC_Config_Channel>
            bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_INACTIVE, TIM_CHANNEL_2);
 8000cd0:	2104      	movs	r1, #4
 8000cd2:	2040      	movs	r0, #64	; 0x40
 8000cd4:	f7ff ff82 	bl	8000bdc <bldc_motor_OC_Config_Channel>
            bldc_motor_PWM_Config_Channel(bldc.speed_pulse, TIM_CHANNEL_3);
 8000cd8:	4b1d      	ldr	r3, [pc, #116]	; (8000d50 <bldc_motor_six_step_algorithm+0x12c>)
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	2108      	movs	r1, #8
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff ff56 	bl	8000b90 <bldc_motor_PWM_Config_Channel>
            break;
 8000ce4:	e00e      	b.n	8000d04 <bldc_motor_six_step_algorithm+0xe0>
        case 6:
            bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_INACTIVE, TIM_CHANNEL_1);
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	2040      	movs	r0, #64	; 0x40
 8000cea:	f7ff ff77 	bl	8000bdc <bldc_motor_OC_Config_Channel>
            bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_ACTIVE, TIM_CHANNEL_2);
 8000cee:	2104      	movs	r1, #4
 8000cf0:	2050      	movs	r0, #80	; 0x50
 8000cf2:	f7ff ff73 	bl	8000bdc <bldc_motor_OC_Config_Channel>
            bldc_motor_PWM_Config_Channel(bldc.speed_pulse, TIM_CHANNEL_3);
 8000cf6:	4b16      	ldr	r3, [pc, #88]	; (8000d50 <bldc_motor_six_step_algorithm+0x12c>)
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	2108      	movs	r1, #8
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff ff47 	bl	8000b90 <bldc_motor_PWM_Config_Channel>
            break;
 8000d02:	bf00      	nop
    }

    if (bldc.dir == 1)  // CW direction
 8000d04:	4b12      	ldr	r3, [pc, #72]	; (8000d50 <bldc_motor_six_step_algorithm+0x12c>)
 8000d06:	689b      	ldr	r3, [r3, #8]
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d10d      	bne.n	8000d28 <bldc_motor_six_step_algorithm+0x104>
    {
        bldc.step_number++;
 8000d0c:	4b10      	ldr	r3, [pc, #64]	; (8000d50 <bldc_motor_six_step_algorithm+0x12c>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	3301      	adds	r3, #1
 8000d12:	b2da      	uxtb	r2, r3
 8000d14:	4b0e      	ldr	r3, [pc, #56]	; (8000d50 <bldc_motor_six_step_algorithm+0x12c>)
 8000d16:	701a      	strb	r2, [r3, #0]
        if (bldc.step_number > 6)
 8000d18:	4b0d      	ldr	r3, [pc, #52]	; (8000d50 <bldc_motor_six_step_algorithm+0x12c>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	2b06      	cmp	r3, #6
 8000d1e:	d914      	bls.n	8000d4a <bldc_motor_six_step_algorithm+0x126>
            bldc.step_number = 1;
 8000d20:	4b0b      	ldr	r3, [pc, #44]	; (8000d50 <bldc_motor_six_step_algorithm+0x12c>)
 8000d22:	2201      	movs	r2, #1
 8000d24:	701a      	strb	r2, [r3, #0]
    {
        bldc.step_number--;
        if (bldc.step_number < 1)
            bldc.step_number = 6;
    }
}
 8000d26:	e010      	b.n	8000d4a <bldc_motor_six_step_algorithm+0x126>
    else if (bldc.dir == 0)  // CCW direction
 8000d28:	4b09      	ldr	r3, [pc, #36]	; (8000d50 <bldc_motor_six_step_algorithm+0x12c>)
 8000d2a:	689b      	ldr	r3, [r3, #8]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d10c      	bne.n	8000d4a <bldc_motor_six_step_algorithm+0x126>
        bldc.step_number--;
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <bldc_motor_six_step_algorithm+0x12c>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	3b01      	subs	r3, #1
 8000d36:	b2da      	uxtb	r2, r3
 8000d38:	4b05      	ldr	r3, [pc, #20]	; (8000d50 <bldc_motor_six_step_algorithm+0x12c>)
 8000d3a:	701a      	strb	r2, [r3, #0]
        if (bldc.step_number < 1)
 8000d3c:	4b04      	ldr	r3, [pc, #16]	; (8000d50 <bldc_motor_six_step_algorithm+0x12c>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d102      	bne.n	8000d4a <bldc_motor_six_step_algorithm+0x126>
            bldc.step_number = 6;
 8000d44:	4b02      	ldr	r3, [pc, #8]	; (8000d50 <bldc_motor_six_step_algorithm+0x12c>)
 8000d46:	2206      	movs	r2, #6
 8000d48:	701a      	strb	r2, [r3, #0]
}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	200001a8 	.word	0x200001a8

08000d54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	607b      	str	r3, [r7, #4]
 8000d5e:	4b10      	ldr	r3, [pc, #64]	; (8000da0 <HAL_MspInit+0x4c>)
 8000d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d62:	4a0f      	ldr	r2, [pc, #60]	; (8000da0 <HAL_MspInit+0x4c>)
 8000d64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d68:	6453      	str	r3, [r2, #68]	; 0x44
 8000d6a:	4b0d      	ldr	r3, [pc, #52]	; (8000da0 <HAL_MspInit+0x4c>)
 8000d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d72:	607b      	str	r3, [r7, #4]
 8000d74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	603b      	str	r3, [r7, #0]
 8000d7a:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <HAL_MspInit+0x4c>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7e:	4a08      	ldr	r2, [pc, #32]	; (8000da0 <HAL_MspInit+0x4c>)
 8000d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d84:	6413      	str	r3, [r2, #64]	; 0x40
 8000d86:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <HAL_MspInit+0x4c>)
 8000d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d8e:	603b      	str	r3, [r7, #0]
 8000d90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d92:	bf00      	nop
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	40023800 	.word	0x40023800

08000da4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08a      	sub	sp, #40	; 0x28
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a17      	ldr	r2, [pc, #92]	; (8000e20 <HAL_ADC_MspInit+0x7c>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d127      	bne.n	8000e16 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	613b      	str	r3, [r7, #16]
 8000dca:	4b16      	ldr	r3, [pc, #88]	; (8000e24 <HAL_ADC_MspInit+0x80>)
 8000dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dce:	4a15      	ldr	r2, [pc, #84]	; (8000e24 <HAL_ADC_MspInit+0x80>)
 8000dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dd4:	6453      	str	r3, [r2, #68]	; 0x44
 8000dd6:	4b13      	ldr	r3, [pc, #76]	; (8000e24 <HAL_ADC_MspInit+0x80>)
 8000dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dde:	613b      	str	r3, [r7, #16]
 8000de0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	4b0f      	ldr	r3, [pc, #60]	; (8000e24 <HAL_ADC_MspInit+0x80>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	4a0e      	ldr	r2, [pc, #56]	; (8000e24 <HAL_ADC_MspInit+0x80>)
 8000dec:	f043 0301 	orr.w	r3, r3, #1
 8000df0:	6313      	str	r3, [r2, #48]	; 0x30
 8000df2:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <HAL_ADC_MspInit+0x80>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e02:	2303      	movs	r3, #3
 8000e04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0a:	f107 0314 	add.w	r3, r7, #20
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4805      	ldr	r0, [pc, #20]	; (8000e28 <HAL_ADC_MspInit+0x84>)
 8000e12:	f000 fe01 	bl	8001a18 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e16:	bf00      	nop
 8000e18:	3728      	adds	r7, #40	; 0x28
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40012000 	.word	0x40012000
 8000e24:	40023800 	.word	0x40023800
 8000e28:	40020000 	.word	0x40020000

08000e2c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a0e      	ldr	r2, [pc, #56]	; (8000e74 <HAL_TIM_PWM_MspInit+0x48>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d115      	bne.n	8000e6a <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	4b0d      	ldr	r3, [pc, #52]	; (8000e78 <HAL_TIM_PWM_MspInit+0x4c>)
 8000e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e46:	4a0c      	ldr	r2, [pc, #48]	; (8000e78 <HAL_TIM_PWM_MspInit+0x4c>)
 8000e48:	f043 0301 	orr.w	r3, r3, #1
 8000e4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e4e:	4b0a      	ldr	r3, [pc, #40]	; (8000e78 <HAL_TIM_PWM_MspInit+0x4c>)
 8000e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	201a      	movs	r0, #26
 8000e60:	f000 fda3 	bl	80019aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000e64:	201a      	movs	r0, #26
 8000e66:	f000 fdbc 	bl	80019e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000e6a:	bf00      	nop
 8000e6c:	3710      	adds	r7, #16
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40010000 	.word	0x40010000
 8000e78:	40023800 	.word	0x40023800

08000e7c <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a0b      	ldr	r2, [pc, #44]	; (8000eb8 <HAL_TIM_OC_MspInit+0x3c>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d10d      	bne.n	8000eaa <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	4b0a      	ldr	r3, [pc, #40]	; (8000ebc <HAL_TIM_OC_MspInit+0x40>)
 8000e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e96:	4a09      	ldr	r2, [pc, #36]	; (8000ebc <HAL_TIM_OC_MspInit+0x40>)
 8000e98:	f043 0302 	orr.w	r3, r3, #2
 8000e9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e9e:	4b07      	ldr	r3, [pc, #28]	; (8000ebc <HAL_TIM_OC_MspInit+0x40>)
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea2:	f003 0302 	and.w	r3, r3, #2
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000eaa:	bf00      	nop
 8000eac:	3714      	adds	r7, #20
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	40000400 	.word	0x40000400
 8000ebc:	40023800 	.word	0x40023800

08000ec0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08a      	sub	sp, #40	; 0x28
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
 8000ed6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a21      	ldr	r2, [pc, #132]	; (8000f64 <HAL_TIM_MspPostInit+0xa4>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d13c      	bne.n	8000f5c <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	613b      	str	r3, [r7, #16]
 8000ee6:	4b20      	ldr	r3, [pc, #128]	; (8000f68 <HAL_TIM_MspPostInit+0xa8>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	4a1f      	ldr	r2, [pc, #124]	; (8000f68 <HAL_TIM_MspPostInit+0xa8>)
 8000eec:	f043 0301 	orr.w	r3, r3, #1
 8000ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef2:	4b1d      	ldr	r3, [pc, #116]	; (8000f68 <HAL_TIM_MspPostInit+0xa8>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	613b      	str	r3, [r7, #16]
 8000efc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	4b19      	ldr	r3, [pc, #100]	; (8000f68 <HAL_TIM_MspPostInit+0xa8>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	4a18      	ldr	r2, [pc, #96]	; (8000f68 <HAL_TIM_MspPostInit+0xa8>)
 8000f08:	f043 0302 	orr.w	r3, r3, #2
 8000f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0e:	4b16      	ldr	r3, [pc, #88]	; (8000f68 <HAL_TIM_MspPostInit+0xa8>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	f003 0302 	and.w	r3, r3, #2
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]
    PB1     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000f1a:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8000f1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f20:	2302      	movs	r3, #2
 8000f22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	4619      	mov	r1, r3
 8000f36:	480d      	ldr	r0, [pc, #52]	; (8000f6c <HAL_TIM_MspPostInit+0xac>)
 8000f38:	f000 fd6e 	bl	8001a18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f40:	2302      	movs	r3, #2
 8000f42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f50:	f107 0314 	add.w	r3, r7, #20
 8000f54:	4619      	mov	r1, r3
 8000f56:	4806      	ldr	r0, [pc, #24]	; (8000f70 <HAL_TIM_MspPostInit+0xb0>)
 8000f58:	f000 fd5e 	bl	8001a18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000f5c:	bf00      	nop
 8000f5e:	3728      	adds	r7, #40	; 0x28
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	40010000 	.word	0x40010000
 8000f68:	40023800 	.word	0x40023800
 8000f6c:	40020000 	.word	0x40020000
 8000f70:	40020400 	.word	0x40020400

08000f74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08a      	sub	sp, #40	; 0x28
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7c:	f107 0314 	add.w	r3, r7, #20
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]
 8000f8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a19      	ldr	r2, [pc, #100]	; (8000ff8 <HAL_UART_MspInit+0x84>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d12b      	bne.n	8000fee <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	613b      	str	r3, [r7, #16]
 8000f9a:	4b18      	ldr	r3, [pc, #96]	; (8000ffc <HAL_UART_MspInit+0x88>)
 8000f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9e:	4a17      	ldr	r2, [pc, #92]	; (8000ffc <HAL_UART_MspInit+0x88>)
 8000fa0:	f043 0320 	orr.w	r3, r3, #32
 8000fa4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fa6:	4b15      	ldr	r3, [pc, #84]	; (8000ffc <HAL_UART_MspInit+0x88>)
 8000fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000faa:	f003 0320 	and.w	r3, r3, #32
 8000fae:	613b      	str	r3, [r7, #16]
 8000fb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60fb      	str	r3, [r7, #12]
 8000fb6:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <HAL_UART_MspInit+0x88>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	4a10      	ldr	r2, [pc, #64]	; (8000ffc <HAL_UART_MspInit+0x88>)
 8000fbc:	f043 0304 	orr.w	r3, r3, #4
 8000fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc2:	4b0e      	ldr	r3, [pc, #56]	; (8000ffc <HAL_UART_MspInit+0x88>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	f003 0304 	and.w	r3, r3, #4
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fce:	23c0      	movs	r3, #192	; 0xc0
 8000fd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000fde:	2308      	movs	r3, #8
 8000fe0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fe2:	f107 0314 	add.w	r3, r7, #20
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4805      	ldr	r0, [pc, #20]	; (8001000 <HAL_UART_MspInit+0x8c>)
 8000fea:	f000 fd15 	bl	8001a18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000fee:	bf00      	nop
 8000ff0:	3728      	adds	r7, #40	; 0x28
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40011400 	.word	0x40011400
 8000ffc:	40023800 	.word	0x40023800
 8001000:	40020800 	.word	0x40020800

08001004 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001008:	e7fe      	b.n	8001008 <NMI_Handler+0x4>

0800100a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800100a:	b480      	push	{r7}
 800100c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800100e:	e7fe      	b.n	800100e <HardFault_Handler+0x4>

08001010 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001014:	e7fe      	b.n	8001014 <MemManage_Handler+0x4>

08001016 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001016:	b480      	push	{r7}
 8001018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800101a:	e7fe      	b.n	800101a <BusFault_Handler+0x4>

0800101c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001020:	e7fe      	b.n	8001020 <UsageFault_Handler+0x4>

08001022 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001022:	b480      	push	{r7}
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr

0800103e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001050:	f000 f93e 	bl	80012d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}

08001058 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800105c:	4802      	ldr	r0, [pc, #8]	; (8001068 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800105e:	f001 fcf9 	bl	8002a54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	200000d4 	.word	0x200000d4

0800106c <_read>:
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
 800107c:	e00a      	b.n	8001094 <_read+0x28>
 800107e:	f3af 8000 	nop.w
 8001082:	4601      	mov	r1, r0
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	1c5a      	adds	r2, r3, #1
 8001088:	60ba      	str	r2, [r7, #8]
 800108a:	b2ca      	uxtb	r2, r1
 800108c:	701a      	strb	r2, [r3, #0]
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	3301      	adds	r3, #1
 8001092:	617b      	str	r3, [r7, #20]
 8001094:	697a      	ldr	r2, [r7, #20]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	429a      	cmp	r2, r3
 800109a:	dbf0      	blt.n	800107e <_read+0x12>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4618      	mov	r0, r3
 80010a0:	3718      	adds	r7, #24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <_write>:
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b086      	sub	sp, #24
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	60f8      	str	r0, [r7, #12]
 80010ae:	60b9      	str	r1, [r7, #8]
 80010b0:	607a      	str	r2, [r7, #4]
 80010b2:	2300      	movs	r3, #0
 80010b4:	617b      	str	r3, [r7, #20]
 80010b6:	e009      	b.n	80010cc <_write+0x26>
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	1c5a      	adds	r2, r3, #1
 80010bc:	60ba      	str	r2, [r7, #8]
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff fcbf 	bl	8000a44 <__io_putchar>
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	3301      	adds	r3, #1
 80010ca:	617b      	str	r3, [r7, #20]
 80010cc:	697a      	ldr	r2, [r7, #20]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	dbf1      	blt.n	80010b8 <_write+0x12>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	4618      	mov	r0, r3
 80010d8:	3718      	adds	r7, #24
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <_close>:
 80010de:	b480      	push	{r7}
 80010e0:	b083      	sub	sp, #12
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
 80010e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010ea:	4618      	mov	r0, r3
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr

080010f6 <_fstat>:
 80010f6:	b480      	push	{r7}
 80010f8:	b083      	sub	sp, #12
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
 80010fe:	6039      	str	r1, [r7, #0]
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001106:	605a      	str	r2, [r3, #4]
 8001108:	2300      	movs	r3, #0
 800110a:	4618      	mov	r0, r3
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr

08001116 <_isatty>:
 8001116:	b480      	push	{r7}
 8001118:	b083      	sub	sp, #12
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
 800111e:	2301      	movs	r3, #1
 8001120:	4618      	mov	r0, r3
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <_lseek>:
 800112c:	b480      	push	{r7}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	607a      	str	r2, [r7, #4]
 8001138:	2300      	movs	r3, #0
 800113a:	4618      	mov	r0, r3
 800113c:	3714      	adds	r7, #20
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
	...

08001148 <_sbrk>:
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	4a14      	ldr	r2, [pc, #80]	; (80011a4 <_sbrk+0x5c>)
 8001152:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <_sbrk+0x60>)
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	617b      	str	r3, [r7, #20]
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	613b      	str	r3, [r7, #16]
 800115c:	4b13      	ldr	r3, [pc, #76]	; (80011ac <_sbrk+0x64>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d102      	bne.n	800116a <_sbrk+0x22>
 8001164:	4b11      	ldr	r3, [pc, #68]	; (80011ac <_sbrk+0x64>)
 8001166:	4a12      	ldr	r2, [pc, #72]	; (80011b0 <_sbrk+0x68>)
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	4b10      	ldr	r3, [pc, #64]	; (80011ac <_sbrk+0x64>)
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4413      	add	r3, r2
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	429a      	cmp	r2, r3
 8001176:	d207      	bcs.n	8001188 <_sbrk+0x40>
 8001178:	f002 ff5e 	bl	8004038 <__errno>
 800117c:	4603      	mov	r3, r0
 800117e:	220c      	movs	r2, #12
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001186:	e009      	b.n	800119c <_sbrk+0x54>
 8001188:	4b08      	ldr	r3, [pc, #32]	; (80011ac <_sbrk+0x64>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	4b07      	ldr	r3, [pc, #28]	; (80011ac <_sbrk+0x64>)
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4413      	add	r3, r2
 8001196:	4a05      	ldr	r2, [pc, #20]	; (80011ac <_sbrk+0x64>)
 8001198:	6013      	str	r3, [r2, #0]
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	4618      	mov	r0, r3
 800119e:	3718      	adds	r7, #24
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20020000 	.word	0x20020000
 80011a8:	00000400 	.word	0x00000400
 80011ac:	200001d8 	.word	0x200001d8
 80011b0:	200001f0 	.word	0x200001f0

080011b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011b8:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <SystemInit+0x20>)
 80011ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011be:	4a05      	ldr	r2, [pc, #20]	; (80011d4 <SystemInit+0x20>)
 80011c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011c8:	bf00      	nop
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	e000ed00 	.word	0xe000ed00

080011d8 <Reset_Handler>:
 80011d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001210 <LoopFillZerobss+0x12>
 80011dc:	480d      	ldr	r0, [pc, #52]	; (8001214 <LoopFillZerobss+0x16>)
 80011de:	490e      	ldr	r1, [pc, #56]	; (8001218 <LoopFillZerobss+0x1a>)
 80011e0:	4a0e      	ldr	r2, [pc, #56]	; (800121c <LoopFillZerobss+0x1e>)
 80011e2:	2300      	movs	r3, #0
 80011e4:	e002      	b.n	80011ec <LoopCopyDataInit>

080011e6 <CopyDataInit>:
 80011e6:	58d4      	ldr	r4, [r2, r3]
 80011e8:	50c4      	str	r4, [r0, r3]
 80011ea:	3304      	adds	r3, #4

080011ec <LoopCopyDataInit>:
 80011ec:	18c4      	adds	r4, r0, r3
 80011ee:	428c      	cmp	r4, r1
 80011f0:	d3f9      	bcc.n	80011e6 <CopyDataInit>
 80011f2:	4a0b      	ldr	r2, [pc, #44]	; (8001220 <LoopFillZerobss+0x22>)
 80011f4:	4c0b      	ldr	r4, [pc, #44]	; (8001224 <LoopFillZerobss+0x26>)
 80011f6:	2300      	movs	r3, #0
 80011f8:	e001      	b.n	80011fe <LoopFillZerobss>

080011fa <FillZerobss>:
 80011fa:	6013      	str	r3, [r2, #0]
 80011fc:	3204      	adds	r2, #4

080011fe <LoopFillZerobss>:
 80011fe:	42a2      	cmp	r2, r4
 8001200:	d3fb      	bcc.n	80011fa <FillZerobss>
 8001202:	f7ff ffd7 	bl	80011b4 <SystemInit>
 8001206:	f002 ff1d 	bl	8004044 <__libc_init_array>
 800120a:	f7ff f967 	bl	80004dc <main>
 800120e:	4770      	bx	lr
 8001210:	20020000 	.word	0x20020000
 8001214:	20000000 	.word	0x20000000
 8001218:	20000070 	.word	0x20000070
 800121c:	08004b50 	.word	0x08004b50
 8001220:	20000070 	.word	0x20000070
 8001224:	200001f0 	.word	0x200001f0

08001228 <ADC_IRQHandler>:
 8001228:	e7fe      	b.n	8001228 <ADC_IRQHandler>
	...

0800122c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001230:	4b0e      	ldr	r3, [pc, #56]	; (800126c <HAL_Init+0x40>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a0d      	ldr	r2, [pc, #52]	; (800126c <HAL_Init+0x40>)
 8001236:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800123a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800123c:	4b0b      	ldr	r3, [pc, #44]	; (800126c <HAL_Init+0x40>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a0a      	ldr	r2, [pc, #40]	; (800126c <HAL_Init+0x40>)
 8001242:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001246:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001248:	4b08      	ldr	r3, [pc, #32]	; (800126c <HAL_Init+0x40>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a07      	ldr	r2, [pc, #28]	; (800126c <HAL_Init+0x40>)
 800124e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001252:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001254:	2003      	movs	r0, #3
 8001256:	f000 fb9d 	bl	8001994 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800125a:	200f      	movs	r0, #15
 800125c:	f000 f808 	bl	8001270 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001260:	f7ff fd78 	bl	8000d54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40023c00 	.word	0x40023c00

08001270 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001278:	4b12      	ldr	r3, [pc, #72]	; (80012c4 <HAL_InitTick+0x54>)
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <HAL_InitTick+0x58>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	4619      	mov	r1, r3
 8001282:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001286:	fbb3 f3f1 	udiv	r3, r3, r1
 800128a:	fbb2 f3f3 	udiv	r3, r2, r3
 800128e:	4618      	mov	r0, r3
 8001290:	f000 fbb5 	bl	80019fe <HAL_SYSTICK_Config>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e00e      	b.n	80012bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2b0f      	cmp	r3, #15
 80012a2:	d80a      	bhi.n	80012ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012a4:	2200      	movs	r2, #0
 80012a6:	6879      	ldr	r1, [r7, #4]
 80012a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012ac:	f000 fb7d 	bl	80019aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012b0:	4a06      	ldr	r2, [pc, #24]	; (80012cc <HAL_InitTick+0x5c>)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012b6:	2300      	movs	r3, #0
 80012b8:	e000      	b.n	80012bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20000000 	.word	0x20000000
 80012c8:	20000008 	.word	0x20000008
 80012cc:	20000004 	.word	0x20000004

080012d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012d4:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <HAL_IncTick+0x20>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	461a      	mov	r2, r3
 80012da:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <HAL_IncTick+0x24>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4413      	add	r3, r2
 80012e0:	4a04      	ldr	r2, [pc, #16]	; (80012f4 <HAL_IncTick+0x24>)
 80012e2:	6013      	str	r3, [r2, #0]
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	20000008 	.word	0x20000008
 80012f4:	200001dc 	.word	0x200001dc

080012f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  return uwTick;
 80012fc:	4b03      	ldr	r3, [pc, #12]	; (800130c <HAL_GetTick+0x14>)
 80012fe:	681b      	ldr	r3, [r3, #0]
}
 8001300:	4618      	mov	r0, r3
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	200001dc 	.word	0x200001dc

08001310 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001318:	2300      	movs	r3, #0
 800131a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d101      	bne.n	8001326 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e033      	b.n	800138e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	2b00      	cmp	r3, #0
 800132c:	d109      	bne.n	8001342 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f7ff fd38 	bl	8000da4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2200      	movs	r2, #0
 8001338:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2200      	movs	r2, #0
 800133e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001346:	f003 0310 	and.w	r3, r3, #16
 800134a:	2b00      	cmp	r3, #0
 800134c:	d118      	bne.n	8001380 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001356:	f023 0302 	bic.w	r3, r3, #2
 800135a:	f043 0202 	orr.w	r2, r3, #2
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f000 f94a 	bl	80015fc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2200      	movs	r2, #0
 800136c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	f023 0303 	bic.w	r3, r3, #3
 8001376:	f043 0201 	orr.w	r2, r3, #1
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	641a      	str	r2, [r3, #64]	; 0x40
 800137e:	e001      	b.n	8001384 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2200      	movs	r2, #0
 8001388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800138c:	7bfb      	ldrb	r3, [r7, #15]
}
 800138e:	4618      	mov	r0, r3
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
	...

08001398 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d101      	bne.n	80013b4 <HAL_ADC_ConfigChannel+0x1c>
 80013b0:	2302      	movs	r3, #2
 80013b2:	e113      	b.n	80015dc <HAL_ADC_ConfigChannel+0x244>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2201      	movs	r2, #1
 80013b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2b09      	cmp	r3, #9
 80013c2:	d925      	bls.n	8001410 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	68d9      	ldr	r1, [r3, #12]
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	461a      	mov	r2, r3
 80013d2:	4613      	mov	r3, r2
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	4413      	add	r3, r2
 80013d8:	3b1e      	subs	r3, #30
 80013da:	2207      	movs	r2, #7
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	43da      	mvns	r2, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	400a      	ands	r2, r1
 80013e8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	68d9      	ldr	r1, [r3, #12]
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	689a      	ldr	r2, [r3, #8]
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	4618      	mov	r0, r3
 80013fc:	4603      	mov	r3, r0
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	4403      	add	r3, r0
 8001402:	3b1e      	subs	r3, #30
 8001404:	409a      	lsls	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	430a      	orrs	r2, r1
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	e022      	b.n	8001456 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	6919      	ldr	r1, [r3, #16]
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	b29b      	uxth	r3, r3
 800141c:	461a      	mov	r2, r3
 800141e:	4613      	mov	r3, r2
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	4413      	add	r3, r2
 8001424:	2207      	movs	r2, #7
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	43da      	mvns	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	400a      	ands	r2, r1
 8001432:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	6919      	ldr	r1, [r3, #16]
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	689a      	ldr	r2, [r3, #8]
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	b29b      	uxth	r3, r3
 8001444:	4618      	mov	r0, r3
 8001446:	4603      	mov	r3, r0
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	4403      	add	r3, r0
 800144c:	409a      	lsls	r2, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	430a      	orrs	r2, r1
 8001454:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	2b06      	cmp	r3, #6
 800145c:	d824      	bhi.n	80014a8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685a      	ldr	r2, [r3, #4]
 8001468:	4613      	mov	r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	4413      	add	r3, r2
 800146e:	3b05      	subs	r3, #5
 8001470:	221f      	movs	r2, #31
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43da      	mvns	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	400a      	ands	r2, r1
 800147e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	b29b      	uxth	r3, r3
 800148c:	4618      	mov	r0, r3
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685a      	ldr	r2, [r3, #4]
 8001492:	4613      	mov	r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	4413      	add	r3, r2
 8001498:	3b05      	subs	r3, #5
 800149a:	fa00 f203 	lsl.w	r2, r0, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	430a      	orrs	r2, r1
 80014a4:	635a      	str	r2, [r3, #52]	; 0x34
 80014a6:	e04c      	b.n	8001542 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	2b0c      	cmp	r3, #12
 80014ae:	d824      	bhi.n	80014fa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685a      	ldr	r2, [r3, #4]
 80014ba:	4613      	mov	r3, r2
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	4413      	add	r3, r2
 80014c0:	3b23      	subs	r3, #35	; 0x23
 80014c2:	221f      	movs	r2, #31
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	43da      	mvns	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	400a      	ands	r2, r1
 80014d0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	b29b      	uxth	r3, r3
 80014de:	4618      	mov	r0, r3
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685a      	ldr	r2, [r3, #4]
 80014e4:	4613      	mov	r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	4413      	add	r3, r2
 80014ea:	3b23      	subs	r3, #35	; 0x23
 80014ec:	fa00 f203 	lsl.w	r2, r0, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	430a      	orrs	r2, r1
 80014f6:	631a      	str	r2, [r3, #48]	; 0x30
 80014f8:	e023      	b.n	8001542 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685a      	ldr	r2, [r3, #4]
 8001504:	4613      	mov	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	4413      	add	r3, r2
 800150a:	3b41      	subs	r3, #65	; 0x41
 800150c:	221f      	movs	r2, #31
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43da      	mvns	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	400a      	ands	r2, r1
 800151a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	b29b      	uxth	r3, r3
 8001528:	4618      	mov	r0, r3
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685a      	ldr	r2, [r3, #4]
 800152e:	4613      	mov	r3, r2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	4413      	add	r3, r2
 8001534:	3b41      	subs	r3, #65	; 0x41
 8001536:	fa00 f203 	lsl.w	r2, r0, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	430a      	orrs	r2, r1
 8001540:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001542:	4b29      	ldr	r3, [pc, #164]	; (80015e8 <HAL_ADC_ConfigChannel+0x250>)
 8001544:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a28      	ldr	r2, [pc, #160]	; (80015ec <HAL_ADC_ConfigChannel+0x254>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d10f      	bne.n	8001570 <HAL_ADC_ConfigChannel+0x1d8>
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2b12      	cmp	r3, #18
 8001556:	d10b      	bne.n	8001570 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a1d      	ldr	r2, [pc, #116]	; (80015ec <HAL_ADC_ConfigChannel+0x254>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d12b      	bne.n	80015d2 <HAL_ADC_ConfigChannel+0x23a>
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a1c      	ldr	r2, [pc, #112]	; (80015f0 <HAL_ADC_ConfigChannel+0x258>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d003      	beq.n	800158c <HAL_ADC_ConfigChannel+0x1f4>
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2b11      	cmp	r3, #17
 800158a:	d122      	bne.n	80015d2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a11      	ldr	r2, [pc, #68]	; (80015f0 <HAL_ADC_ConfigChannel+0x258>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d111      	bne.n	80015d2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80015ae:	4b11      	ldr	r3, [pc, #68]	; (80015f4 <HAL_ADC_ConfigChannel+0x25c>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a11      	ldr	r2, [pc, #68]	; (80015f8 <HAL_ADC_ConfigChannel+0x260>)
 80015b4:	fba2 2303 	umull	r2, r3, r2, r3
 80015b8:	0c9a      	lsrs	r2, r3, #18
 80015ba:	4613      	mov	r3, r2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	4413      	add	r3, r2
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015c4:	e002      	b.n	80015cc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	3b01      	subs	r3, #1
 80015ca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1f9      	bne.n	80015c6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80015da:	2300      	movs	r3, #0
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3714      	adds	r7, #20
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	40012300 	.word	0x40012300
 80015ec:	40012000 	.word	0x40012000
 80015f0:	10000012 	.word	0x10000012
 80015f4:	20000000 	.word	0x20000000
 80015f8:	431bde83 	.word	0x431bde83

080015fc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001604:	4b79      	ldr	r3, [pc, #484]	; (80017ec <ADC_Init+0x1f0>)
 8001606:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	685a      	ldr	r2, [r3, #4]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	431a      	orrs	r2, r3
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	685a      	ldr	r2, [r3, #4]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001630:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	6859      	ldr	r1, [r3, #4]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	691b      	ldr	r3, [r3, #16]
 800163c:	021a      	lsls	r2, r3, #8
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	430a      	orrs	r2, r1
 8001644:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	685a      	ldr	r2, [r3, #4]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001654:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	6859      	ldr	r1, [r3, #4]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	689a      	ldr	r2, [r3, #8]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	430a      	orrs	r2, r1
 8001666:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	689a      	ldr	r2, [r3, #8]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001676:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	6899      	ldr	r1, [r3, #8]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	68da      	ldr	r2, [r3, #12]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	430a      	orrs	r2, r1
 8001688:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800168e:	4a58      	ldr	r2, [pc, #352]	; (80017f0 <ADC_Init+0x1f4>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d022      	beq.n	80016da <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	689a      	ldr	r2, [r3, #8]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	6899      	ldr	r1, [r3, #8]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	430a      	orrs	r2, r1
 80016b4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	689a      	ldr	r2, [r3, #8]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	6899      	ldr	r1, [r3, #8]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	430a      	orrs	r2, r1
 80016d6:	609a      	str	r2, [r3, #8]
 80016d8:	e00f      	b.n	80016fa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	689a      	ldr	r2, [r3, #8]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	689a      	ldr	r2, [r3, #8]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016f8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	689a      	ldr	r2, [r3, #8]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f022 0202 	bic.w	r2, r2, #2
 8001708:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	6899      	ldr	r1, [r3, #8]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	7e1b      	ldrb	r3, [r3, #24]
 8001714:	005a      	lsls	r2, r3, #1
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	430a      	orrs	r2, r1
 800171c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d01b      	beq.n	8001760 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	685a      	ldr	r2, [r3, #4]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001736:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	685a      	ldr	r2, [r3, #4]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001746:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	6859      	ldr	r1, [r3, #4]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001752:	3b01      	subs	r3, #1
 8001754:	035a      	lsls	r2, r3, #13
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	430a      	orrs	r2, r1
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	e007      	b.n	8001770 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	685a      	ldr	r2, [r3, #4]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800176e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800177e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	69db      	ldr	r3, [r3, #28]
 800178a:	3b01      	subs	r3, #1
 800178c:	051a      	lsls	r2, r3, #20
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	430a      	orrs	r2, r1
 8001794:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	689a      	ldr	r2, [r3, #8]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80017a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	6899      	ldr	r1, [r3, #8]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80017b2:	025a      	lsls	r2, r3, #9
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	430a      	orrs	r2, r1
 80017ba:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	689a      	ldr	r2, [r3, #8]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	6899      	ldr	r1, [r3, #8]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	695b      	ldr	r3, [r3, #20]
 80017d6:	029a      	lsls	r2, r3, #10
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	430a      	orrs	r2, r1
 80017de:	609a      	str	r2, [r3, #8]
}
 80017e0:	bf00      	nop
 80017e2:	3714      	adds	r7, #20
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	40012300 	.word	0x40012300
 80017f0:	0f000001 	.word	0x0f000001

080017f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f003 0307 	and.w	r3, r3, #7
 8001802:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001804:	4b0c      	ldr	r3, [pc, #48]	; (8001838 <__NVIC_SetPriorityGrouping+0x44>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800180a:	68ba      	ldr	r2, [r7, #8]
 800180c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001810:	4013      	ands	r3, r2
 8001812:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800181c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001820:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001824:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001826:	4a04      	ldr	r2, [pc, #16]	; (8001838 <__NVIC_SetPriorityGrouping+0x44>)
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	60d3      	str	r3, [r2, #12]
}
 800182c:	bf00      	nop
 800182e:	3714      	adds	r7, #20
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr
 8001838:	e000ed00 	.word	0xe000ed00

0800183c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001840:	4b04      	ldr	r3, [pc, #16]	; (8001854 <__NVIC_GetPriorityGrouping+0x18>)
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	0a1b      	lsrs	r3, r3, #8
 8001846:	f003 0307 	and.w	r3, r3, #7
}
 800184a:	4618      	mov	r0, r3
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	e000ed00 	.word	0xe000ed00

08001858 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001866:	2b00      	cmp	r3, #0
 8001868:	db0b      	blt.n	8001882 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800186a:	79fb      	ldrb	r3, [r7, #7]
 800186c:	f003 021f 	and.w	r2, r3, #31
 8001870:	4907      	ldr	r1, [pc, #28]	; (8001890 <__NVIC_EnableIRQ+0x38>)
 8001872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001876:	095b      	lsrs	r3, r3, #5
 8001878:	2001      	movs	r0, #1
 800187a:	fa00 f202 	lsl.w	r2, r0, r2
 800187e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001882:	bf00      	nop
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	e000e100 	.word	0xe000e100

08001894 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	4603      	mov	r3, r0
 800189c:	6039      	str	r1, [r7, #0]
 800189e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	db0a      	blt.n	80018be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	b2da      	uxtb	r2, r3
 80018ac:	490c      	ldr	r1, [pc, #48]	; (80018e0 <__NVIC_SetPriority+0x4c>)
 80018ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b2:	0112      	lsls	r2, r2, #4
 80018b4:	b2d2      	uxtb	r2, r2
 80018b6:	440b      	add	r3, r1
 80018b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018bc:	e00a      	b.n	80018d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	b2da      	uxtb	r2, r3
 80018c2:	4908      	ldr	r1, [pc, #32]	; (80018e4 <__NVIC_SetPriority+0x50>)
 80018c4:	79fb      	ldrb	r3, [r7, #7]
 80018c6:	f003 030f 	and.w	r3, r3, #15
 80018ca:	3b04      	subs	r3, #4
 80018cc:	0112      	lsls	r2, r2, #4
 80018ce:	b2d2      	uxtb	r2, r2
 80018d0:	440b      	add	r3, r1
 80018d2:	761a      	strb	r2, [r3, #24]
}
 80018d4:	bf00      	nop
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	e000e100 	.word	0xe000e100
 80018e4:	e000ed00 	.word	0xe000ed00

080018e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b089      	sub	sp, #36	; 0x24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f003 0307 	and.w	r3, r3, #7
 80018fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	f1c3 0307 	rsb	r3, r3, #7
 8001902:	2b04      	cmp	r3, #4
 8001904:	bf28      	it	cs
 8001906:	2304      	movcs	r3, #4
 8001908:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	3304      	adds	r3, #4
 800190e:	2b06      	cmp	r3, #6
 8001910:	d902      	bls.n	8001918 <NVIC_EncodePriority+0x30>
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	3b03      	subs	r3, #3
 8001916:	e000      	b.n	800191a <NVIC_EncodePriority+0x32>
 8001918:	2300      	movs	r3, #0
 800191a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800191c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	43da      	mvns	r2, r3
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	401a      	ands	r2, r3
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001930:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	fa01 f303 	lsl.w	r3, r1, r3
 800193a:	43d9      	mvns	r1, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001940:	4313      	orrs	r3, r2
         );
}
 8001942:	4618      	mov	r0, r3
 8001944:	3724      	adds	r7, #36	; 0x24
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
	...

08001950 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	3b01      	subs	r3, #1
 800195c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001960:	d301      	bcc.n	8001966 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001962:	2301      	movs	r3, #1
 8001964:	e00f      	b.n	8001986 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001966:	4a0a      	ldr	r2, [pc, #40]	; (8001990 <SysTick_Config+0x40>)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	3b01      	subs	r3, #1
 800196c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800196e:	210f      	movs	r1, #15
 8001970:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001974:	f7ff ff8e 	bl	8001894 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001978:	4b05      	ldr	r3, [pc, #20]	; (8001990 <SysTick_Config+0x40>)
 800197a:	2200      	movs	r2, #0
 800197c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800197e:	4b04      	ldr	r3, [pc, #16]	; (8001990 <SysTick_Config+0x40>)
 8001980:	2207      	movs	r2, #7
 8001982:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	e000e010 	.word	0xe000e010

08001994 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f7ff ff29 	bl	80017f4 <__NVIC_SetPriorityGrouping>
}
 80019a2:	bf00      	nop
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b086      	sub	sp, #24
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	4603      	mov	r3, r0
 80019b2:	60b9      	str	r1, [r7, #8]
 80019b4:	607a      	str	r2, [r7, #4]
 80019b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019b8:	2300      	movs	r3, #0
 80019ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019bc:	f7ff ff3e 	bl	800183c <__NVIC_GetPriorityGrouping>
 80019c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	68b9      	ldr	r1, [r7, #8]
 80019c6:	6978      	ldr	r0, [r7, #20]
 80019c8:	f7ff ff8e 	bl	80018e8 <NVIC_EncodePriority>
 80019cc:	4602      	mov	r2, r0
 80019ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019d2:	4611      	mov	r1, r2
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff ff5d 	bl	8001894 <__NVIC_SetPriority>
}
 80019da:	bf00      	nop
 80019dc:	3718      	adds	r7, #24
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b082      	sub	sp, #8
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	4603      	mov	r3, r0
 80019ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff ff31 	bl	8001858 <__NVIC_EnableIRQ>
}
 80019f6:	bf00      	nop
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b082      	sub	sp, #8
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f7ff ffa2 	bl	8001950 <SysTick_Config>
 8001a0c:	4603      	mov	r3, r0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
	...

08001a18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b089      	sub	sp, #36	; 0x24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a22:	2300      	movs	r3, #0
 8001a24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a26:	2300      	movs	r3, #0
 8001a28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61fb      	str	r3, [r7, #28]
 8001a32:	e159      	b.n	8001ce8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a34:	2201      	movs	r2, #1
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	697a      	ldr	r2, [r7, #20]
 8001a44:	4013      	ands	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	f040 8148 	bne.w	8001ce2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f003 0303 	and.w	r3, r3, #3
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d005      	beq.n	8001a6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d130      	bne.n	8001acc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	2203      	movs	r2, #3
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	43db      	mvns	r3, r3
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	68da      	ldr	r2, [r3, #12]
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	4013      	ands	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	091b      	lsrs	r3, r3, #4
 8001ab6:	f003 0201 	and.w	r2, r3, #1
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f003 0303 	and.w	r3, r3, #3
 8001ad4:	2b03      	cmp	r3, #3
 8001ad6:	d017      	beq.n	8001b08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	2203      	movs	r2, #3
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	4013      	ands	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	689a      	ldr	r2, [r3, #8]
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f003 0303 	and.w	r3, r3, #3
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d123      	bne.n	8001b5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	08da      	lsrs	r2, r3, #3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	3208      	adds	r2, #8
 8001b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	f003 0307 	and.w	r3, r3, #7
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	220f      	movs	r2, #15
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	43db      	mvns	r3, r3
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	4013      	ands	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	691a      	ldr	r2, [r3, #16]
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	f003 0307 	and.w	r3, r3, #7
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	08da      	lsrs	r2, r3, #3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	3208      	adds	r2, #8
 8001b56:	69b9      	ldr	r1, [r7, #24]
 8001b58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	2203      	movs	r2, #3
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	4013      	ands	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f003 0203 	and.w	r2, r3, #3
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	f000 80a2 	beq.w	8001ce2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60fb      	str	r3, [r7, #12]
 8001ba2:	4b57      	ldr	r3, [pc, #348]	; (8001d00 <HAL_GPIO_Init+0x2e8>)
 8001ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba6:	4a56      	ldr	r2, [pc, #344]	; (8001d00 <HAL_GPIO_Init+0x2e8>)
 8001ba8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bac:	6453      	str	r3, [r2, #68]	; 0x44
 8001bae:	4b54      	ldr	r3, [pc, #336]	; (8001d00 <HAL_GPIO_Init+0x2e8>)
 8001bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bba:	4a52      	ldr	r2, [pc, #328]	; (8001d04 <HAL_GPIO_Init+0x2ec>)
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	089b      	lsrs	r3, r3, #2
 8001bc0:	3302      	adds	r3, #2
 8001bc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	f003 0303 	and.w	r3, r3, #3
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	220f      	movs	r2, #15
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	43db      	mvns	r3, r3
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a49      	ldr	r2, [pc, #292]	; (8001d08 <HAL_GPIO_Init+0x2f0>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d019      	beq.n	8001c1a <HAL_GPIO_Init+0x202>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a48      	ldr	r2, [pc, #288]	; (8001d0c <HAL_GPIO_Init+0x2f4>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d013      	beq.n	8001c16 <HAL_GPIO_Init+0x1fe>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a47      	ldr	r2, [pc, #284]	; (8001d10 <HAL_GPIO_Init+0x2f8>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d00d      	beq.n	8001c12 <HAL_GPIO_Init+0x1fa>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a46      	ldr	r2, [pc, #280]	; (8001d14 <HAL_GPIO_Init+0x2fc>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d007      	beq.n	8001c0e <HAL_GPIO_Init+0x1f6>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a45      	ldr	r2, [pc, #276]	; (8001d18 <HAL_GPIO_Init+0x300>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d101      	bne.n	8001c0a <HAL_GPIO_Init+0x1f2>
 8001c06:	2304      	movs	r3, #4
 8001c08:	e008      	b.n	8001c1c <HAL_GPIO_Init+0x204>
 8001c0a:	2307      	movs	r3, #7
 8001c0c:	e006      	b.n	8001c1c <HAL_GPIO_Init+0x204>
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e004      	b.n	8001c1c <HAL_GPIO_Init+0x204>
 8001c12:	2302      	movs	r3, #2
 8001c14:	e002      	b.n	8001c1c <HAL_GPIO_Init+0x204>
 8001c16:	2301      	movs	r3, #1
 8001c18:	e000      	b.n	8001c1c <HAL_GPIO_Init+0x204>
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	69fa      	ldr	r2, [r7, #28]
 8001c1e:	f002 0203 	and.w	r2, r2, #3
 8001c22:	0092      	lsls	r2, r2, #2
 8001c24:	4093      	lsls	r3, r2
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c2c:	4935      	ldr	r1, [pc, #212]	; (8001d04 <HAL_GPIO_Init+0x2ec>)
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	089b      	lsrs	r3, r3, #2
 8001c32:	3302      	adds	r3, #2
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c3a:	4b38      	ldr	r3, [pc, #224]	; (8001d1c <HAL_GPIO_Init+0x304>)
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	43db      	mvns	r3, r3
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	4013      	ands	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d003      	beq.n	8001c5e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c5e:	4a2f      	ldr	r2, [pc, #188]	; (8001d1c <HAL_GPIO_Init+0x304>)
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c64:	4b2d      	ldr	r3, [pc, #180]	; (8001d1c <HAL_GPIO_Init+0x304>)
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	4013      	ands	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d003      	beq.n	8001c88 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c88:	4a24      	ldr	r2, [pc, #144]	; (8001d1c <HAL_GPIO_Init+0x304>)
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c8e:	4b23      	ldr	r3, [pc, #140]	; (8001d1c <HAL_GPIO_Init+0x304>)
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	43db      	mvns	r3, r3
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d003      	beq.n	8001cb2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cb2:	4a1a      	ldr	r2, [pc, #104]	; (8001d1c <HAL_GPIO_Init+0x304>)
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cb8:	4b18      	ldr	r3, [pc, #96]	; (8001d1c <HAL_GPIO_Init+0x304>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d003      	beq.n	8001cdc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cdc:	4a0f      	ldr	r2, [pc, #60]	; (8001d1c <HAL_GPIO_Init+0x304>)
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	61fb      	str	r3, [r7, #28]
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	2b0f      	cmp	r3, #15
 8001cec:	f67f aea2 	bls.w	8001a34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cf0:	bf00      	nop
 8001cf2:	bf00      	nop
 8001cf4:	3724      	adds	r7, #36	; 0x24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	40023800 	.word	0x40023800
 8001d04:	40013800 	.word	0x40013800
 8001d08:	40020000 	.word	0x40020000
 8001d0c:	40020400 	.word	0x40020400
 8001d10:	40020800 	.word	0x40020800
 8001d14:	40020c00 	.word	0x40020c00
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	40013c00 	.word	0x40013c00

08001d20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	460b      	mov	r3, r1
 8001d2a:	807b      	strh	r3, [r7, #2]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d30:	787b      	ldrb	r3, [r7, #1]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d003      	beq.n	8001d3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d36:	887a      	ldrh	r2, [r7, #2]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d3c:	e003      	b.n	8001d46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d3e:	887b      	ldrh	r3, [r7, #2]
 8001d40:	041a      	lsls	r2, r3, #16
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	619a      	str	r2, [r3, #24]
}
 8001d46:	bf00      	nop
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr

08001d52 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d52:	b480      	push	{r7}
 8001d54:	b085      	sub	sp, #20
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	695b      	ldr	r3, [r3, #20]
 8001d62:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d64:	887a      	ldrh	r2, [r7, #2]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	041a      	lsls	r2, r3, #16
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	43d9      	mvns	r1, r3
 8001d70:	887b      	ldrh	r3, [r7, #2]
 8001d72:	400b      	ands	r3, r1
 8001d74:	431a      	orrs	r2, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	619a      	str	r2, [r3, #24]
}
 8001d7a:	bf00      	nop
 8001d7c:	3714      	adds	r7, #20
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
	...

08001d88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e267      	b.n	800226a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d075      	beq.n	8001e92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001da6:	4b88      	ldr	r3, [pc, #544]	; (8001fc8 <HAL_RCC_OscConfig+0x240>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f003 030c 	and.w	r3, r3, #12
 8001dae:	2b04      	cmp	r3, #4
 8001db0:	d00c      	beq.n	8001dcc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001db2:	4b85      	ldr	r3, [pc, #532]	; (8001fc8 <HAL_RCC_OscConfig+0x240>)
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001dba:	2b08      	cmp	r3, #8
 8001dbc:	d112      	bne.n	8001de4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dbe:	4b82      	ldr	r3, [pc, #520]	; (8001fc8 <HAL_RCC_OscConfig+0x240>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001dca:	d10b      	bne.n	8001de4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dcc:	4b7e      	ldr	r3, [pc, #504]	; (8001fc8 <HAL_RCC_OscConfig+0x240>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d05b      	beq.n	8001e90 <HAL_RCC_OscConfig+0x108>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d157      	bne.n	8001e90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e242      	b.n	800226a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dec:	d106      	bne.n	8001dfc <HAL_RCC_OscConfig+0x74>
 8001dee:	4b76      	ldr	r3, [pc, #472]	; (8001fc8 <HAL_RCC_OscConfig+0x240>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a75      	ldr	r2, [pc, #468]	; (8001fc8 <HAL_RCC_OscConfig+0x240>)
 8001df4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001df8:	6013      	str	r3, [r2, #0]
 8001dfa:	e01d      	b.n	8001e38 <HAL_RCC_OscConfig+0xb0>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e04:	d10c      	bne.n	8001e20 <HAL_RCC_OscConfig+0x98>
 8001e06:	4b70      	ldr	r3, [pc, #448]	; (8001fc8 <HAL_RCC_OscConfig+0x240>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a6f      	ldr	r2, [pc, #444]	; (8001fc8 <HAL_RCC_OscConfig+0x240>)
 8001e0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e10:	6013      	str	r3, [r2, #0]
 8001e12:	4b6d      	ldr	r3, [pc, #436]	; (8001fc8 <HAL_RCC_OscConfig+0x240>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a6c      	ldr	r2, [pc, #432]	; (8001fc8 <HAL_RCC_OscConfig+0x240>)
 8001e18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e1c:	6013      	str	r3, [r2, #0]
 8001e1e:	e00b      	b.n	8001e38 <HAL_RCC_OscConfig+0xb0>
 8001e20:	4b69      	ldr	r3, [pc, #420]	; (8001fc8 <HAL_RCC_OscConfig+0x240>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a68      	ldr	r2, [pc, #416]	; (8001fc8 <HAL_RCC_OscConfig+0x240>)
 8001e26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e2a:	6013      	str	r3, [r2, #0]
 8001e2c:	4b66      	ldr	r3, [pc, #408]	; (8001fc8 <HAL_RCC_OscConfig+0x240>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a65      	ldr	r2, [pc, #404]	; (8001fc8 <HAL_RCC_OscConfig+0x240>)
 8001e32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d013      	beq.n	8001e68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e40:	f7ff fa5a 	bl	80012f8 <HAL_GetTick>
 8001e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e46:	e008      	b.n	8001e5a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e48:	f7ff fa56 	bl	80012f8 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b64      	cmp	r3, #100	; 0x64
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e207      	b.n	800226a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e5a:	4b5b      	ldr	r3, [pc, #364]	; (8001fc8 <HAL_RCC_OscConfig+0x240>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d0f0      	beq.n	8001e48 <HAL_RCC_OscConfig+0xc0>
 8001e66:	e014      	b.n	8001e92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e68:	f7ff fa46 	bl	80012f8 <HAL_GetTick>
 8001e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e6e:	e008      	b.n	8001e82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e70:	f7ff fa42 	bl	80012f8 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b64      	cmp	r3, #100	; 0x64
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e1f3      	b.n	800226a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e82:	4b51      	ldr	r3, [pc, #324]	; (8001fc8 <HAL_RCC_OscConfig+0x240>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d1f0      	bne.n	8001e70 <HAL_RCC_OscConfig+0xe8>
 8001e8e:	e000      	b.n	8001e92 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d063      	beq.n	8001f66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e9e:	4b4a      	ldr	r3, [pc, #296]	; (8001fc8 <HAL_RCC_OscConfig+0x240>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f003 030c 	and.w	r3, r3, #12
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d00b      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001eaa:	4b47      	ldr	r3, [pc, #284]	; (8001fc8 <HAL_RCC_OscConfig+0x240>)
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001eb2:	2b08      	cmp	r3, #8
 8001eb4:	d11c      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001eb6:	4b44      	ldr	r3, [pc, #272]	; (8001fc8 <HAL_RCC_OscConfig+0x240>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d116      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ec2:	4b41      	ldr	r3, [pc, #260]	; (8001fc8 <HAL_RCC_OscConfig+0x240>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d005      	beq.n	8001eda <HAL_RCC_OscConfig+0x152>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d001      	beq.n	8001eda <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e1c7      	b.n	800226a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eda:	4b3b      	ldr	r3, [pc, #236]	; (8001fc8 <HAL_RCC_OscConfig+0x240>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	4937      	ldr	r1, [pc, #220]	; (8001fc8 <HAL_RCC_OscConfig+0x240>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eee:	e03a      	b.n	8001f66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d020      	beq.n	8001f3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ef8:	4b34      	ldr	r3, [pc, #208]	; (8001fcc <HAL_RCC_OscConfig+0x244>)
 8001efa:	2201      	movs	r2, #1
 8001efc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001efe:	f7ff f9fb 	bl	80012f8 <HAL_GetTick>
 8001f02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f04:	e008      	b.n	8001f18 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f06:	f7ff f9f7 	bl	80012f8 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d901      	bls.n	8001f18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e1a8      	b.n	800226a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f18:	4b2b      	ldr	r3, [pc, #172]	; (8001fc8 <HAL_RCC_OscConfig+0x240>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0302 	and.w	r3, r3, #2
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d0f0      	beq.n	8001f06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f24:	4b28      	ldr	r3, [pc, #160]	; (8001fc8 <HAL_RCC_OscConfig+0x240>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	691b      	ldr	r3, [r3, #16]
 8001f30:	00db      	lsls	r3, r3, #3
 8001f32:	4925      	ldr	r1, [pc, #148]	; (8001fc8 <HAL_RCC_OscConfig+0x240>)
 8001f34:	4313      	orrs	r3, r2
 8001f36:	600b      	str	r3, [r1, #0]
 8001f38:	e015      	b.n	8001f66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f3a:	4b24      	ldr	r3, [pc, #144]	; (8001fcc <HAL_RCC_OscConfig+0x244>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f40:	f7ff f9da 	bl	80012f8 <HAL_GetTick>
 8001f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f48:	f7ff f9d6 	bl	80012f8 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e187      	b.n	800226a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f5a:	4b1b      	ldr	r3, [pc, #108]	; (8001fc8 <HAL_RCC_OscConfig+0x240>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d1f0      	bne.n	8001f48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0308 	and.w	r3, r3, #8
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d036      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	695b      	ldr	r3, [r3, #20]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d016      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f7a:	4b15      	ldr	r3, [pc, #84]	; (8001fd0 <HAL_RCC_OscConfig+0x248>)
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f80:	f7ff f9ba 	bl	80012f8 <HAL_GetTick>
 8001f84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f86:	e008      	b.n	8001f9a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f88:	f7ff f9b6 	bl	80012f8 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e167      	b.n	800226a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f9a:	4b0b      	ldr	r3, [pc, #44]	; (8001fc8 <HAL_RCC_OscConfig+0x240>)
 8001f9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d0f0      	beq.n	8001f88 <HAL_RCC_OscConfig+0x200>
 8001fa6:	e01b      	b.n	8001fe0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fa8:	4b09      	ldr	r3, [pc, #36]	; (8001fd0 <HAL_RCC_OscConfig+0x248>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fae:	f7ff f9a3 	bl	80012f8 <HAL_GetTick>
 8001fb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fb4:	e00e      	b.n	8001fd4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fb6:	f7ff f99f 	bl	80012f8 <HAL_GetTick>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d907      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e150      	b.n	800226a <HAL_RCC_OscConfig+0x4e2>
 8001fc8:	40023800 	.word	0x40023800
 8001fcc:	42470000 	.word	0x42470000
 8001fd0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fd4:	4b88      	ldr	r3, [pc, #544]	; (80021f8 <HAL_RCC_OscConfig+0x470>)
 8001fd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fd8:	f003 0302 	and.w	r3, r3, #2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d1ea      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0304 	and.w	r3, r3, #4
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	f000 8097 	beq.w	800211c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ff2:	4b81      	ldr	r3, [pc, #516]	; (80021f8 <HAL_RCC_OscConfig+0x470>)
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d10f      	bne.n	800201e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ffe:	2300      	movs	r3, #0
 8002000:	60bb      	str	r3, [r7, #8]
 8002002:	4b7d      	ldr	r3, [pc, #500]	; (80021f8 <HAL_RCC_OscConfig+0x470>)
 8002004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002006:	4a7c      	ldr	r2, [pc, #496]	; (80021f8 <HAL_RCC_OscConfig+0x470>)
 8002008:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800200c:	6413      	str	r3, [r2, #64]	; 0x40
 800200e:	4b7a      	ldr	r3, [pc, #488]	; (80021f8 <HAL_RCC_OscConfig+0x470>)
 8002010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002016:	60bb      	str	r3, [r7, #8]
 8002018:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800201a:	2301      	movs	r3, #1
 800201c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800201e:	4b77      	ldr	r3, [pc, #476]	; (80021fc <HAL_RCC_OscConfig+0x474>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002026:	2b00      	cmp	r3, #0
 8002028:	d118      	bne.n	800205c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800202a:	4b74      	ldr	r3, [pc, #464]	; (80021fc <HAL_RCC_OscConfig+0x474>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a73      	ldr	r2, [pc, #460]	; (80021fc <HAL_RCC_OscConfig+0x474>)
 8002030:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002034:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002036:	f7ff f95f 	bl	80012f8 <HAL_GetTick>
 800203a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800203c:	e008      	b.n	8002050 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800203e:	f7ff f95b 	bl	80012f8 <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d901      	bls.n	8002050 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e10c      	b.n	800226a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002050:	4b6a      	ldr	r3, [pc, #424]	; (80021fc <HAL_RCC_OscConfig+0x474>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002058:	2b00      	cmp	r3, #0
 800205a:	d0f0      	beq.n	800203e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	2b01      	cmp	r3, #1
 8002062:	d106      	bne.n	8002072 <HAL_RCC_OscConfig+0x2ea>
 8002064:	4b64      	ldr	r3, [pc, #400]	; (80021f8 <HAL_RCC_OscConfig+0x470>)
 8002066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002068:	4a63      	ldr	r2, [pc, #396]	; (80021f8 <HAL_RCC_OscConfig+0x470>)
 800206a:	f043 0301 	orr.w	r3, r3, #1
 800206e:	6713      	str	r3, [r2, #112]	; 0x70
 8002070:	e01c      	b.n	80020ac <HAL_RCC_OscConfig+0x324>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	2b05      	cmp	r3, #5
 8002078:	d10c      	bne.n	8002094 <HAL_RCC_OscConfig+0x30c>
 800207a:	4b5f      	ldr	r3, [pc, #380]	; (80021f8 <HAL_RCC_OscConfig+0x470>)
 800207c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800207e:	4a5e      	ldr	r2, [pc, #376]	; (80021f8 <HAL_RCC_OscConfig+0x470>)
 8002080:	f043 0304 	orr.w	r3, r3, #4
 8002084:	6713      	str	r3, [r2, #112]	; 0x70
 8002086:	4b5c      	ldr	r3, [pc, #368]	; (80021f8 <HAL_RCC_OscConfig+0x470>)
 8002088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800208a:	4a5b      	ldr	r2, [pc, #364]	; (80021f8 <HAL_RCC_OscConfig+0x470>)
 800208c:	f043 0301 	orr.w	r3, r3, #1
 8002090:	6713      	str	r3, [r2, #112]	; 0x70
 8002092:	e00b      	b.n	80020ac <HAL_RCC_OscConfig+0x324>
 8002094:	4b58      	ldr	r3, [pc, #352]	; (80021f8 <HAL_RCC_OscConfig+0x470>)
 8002096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002098:	4a57      	ldr	r2, [pc, #348]	; (80021f8 <HAL_RCC_OscConfig+0x470>)
 800209a:	f023 0301 	bic.w	r3, r3, #1
 800209e:	6713      	str	r3, [r2, #112]	; 0x70
 80020a0:	4b55      	ldr	r3, [pc, #340]	; (80021f8 <HAL_RCC_OscConfig+0x470>)
 80020a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a4:	4a54      	ldr	r2, [pc, #336]	; (80021f8 <HAL_RCC_OscConfig+0x470>)
 80020a6:	f023 0304 	bic.w	r3, r3, #4
 80020aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d015      	beq.n	80020e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b4:	f7ff f920 	bl	80012f8 <HAL_GetTick>
 80020b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ba:	e00a      	b.n	80020d2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020bc:	f7ff f91c 	bl	80012f8 <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e0cb      	b.n	800226a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020d2:	4b49      	ldr	r3, [pc, #292]	; (80021f8 <HAL_RCC_OscConfig+0x470>)
 80020d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d0ee      	beq.n	80020bc <HAL_RCC_OscConfig+0x334>
 80020de:	e014      	b.n	800210a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020e0:	f7ff f90a 	bl	80012f8 <HAL_GetTick>
 80020e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020e6:	e00a      	b.n	80020fe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020e8:	f7ff f906 	bl	80012f8 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e0b5      	b.n	800226a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020fe:	4b3e      	ldr	r3, [pc, #248]	; (80021f8 <HAL_RCC_OscConfig+0x470>)
 8002100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d1ee      	bne.n	80020e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800210a:	7dfb      	ldrb	r3, [r7, #23]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d105      	bne.n	800211c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002110:	4b39      	ldr	r3, [pc, #228]	; (80021f8 <HAL_RCC_OscConfig+0x470>)
 8002112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002114:	4a38      	ldr	r2, [pc, #224]	; (80021f8 <HAL_RCC_OscConfig+0x470>)
 8002116:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800211a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	2b00      	cmp	r3, #0
 8002122:	f000 80a1 	beq.w	8002268 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002126:	4b34      	ldr	r3, [pc, #208]	; (80021f8 <HAL_RCC_OscConfig+0x470>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f003 030c 	and.w	r3, r3, #12
 800212e:	2b08      	cmp	r3, #8
 8002130:	d05c      	beq.n	80021ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	699b      	ldr	r3, [r3, #24]
 8002136:	2b02      	cmp	r3, #2
 8002138:	d141      	bne.n	80021be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800213a:	4b31      	ldr	r3, [pc, #196]	; (8002200 <HAL_RCC_OscConfig+0x478>)
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002140:	f7ff f8da 	bl	80012f8 <HAL_GetTick>
 8002144:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002146:	e008      	b.n	800215a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002148:	f7ff f8d6 	bl	80012f8 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b02      	cmp	r3, #2
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e087      	b.n	800226a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800215a:	4b27      	ldr	r3, [pc, #156]	; (80021f8 <HAL_RCC_OscConfig+0x470>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1f0      	bne.n	8002148 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	69da      	ldr	r2, [r3, #28]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a1b      	ldr	r3, [r3, #32]
 800216e:	431a      	orrs	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002174:	019b      	lsls	r3, r3, #6
 8002176:	431a      	orrs	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800217c:	085b      	lsrs	r3, r3, #1
 800217e:	3b01      	subs	r3, #1
 8002180:	041b      	lsls	r3, r3, #16
 8002182:	431a      	orrs	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002188:	061b      	lsls	r3, r3, #24
 800218a:	491b      	ldr	r1, [pc, #108]	; (80021f8 <HAL_RCC_OscConfig+0x470>)
 800218c:	4313      	orrs	r3, r2
 800218e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002190:	4b1b      	ldr	r3, [pc, #108]	; (8002200 <HAL_RCC_OscConfig+0x478>)
 8002192:	2201      	movs	r2, #1
 8002194:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002196:	f7ff f8af 	bl	80012f8 <HAL_GetTick>
 800219a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800219c:	e008      	b.n	80021b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800219e:	f7ff f8ab 	bl	80012f8 <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d901      	bls.n	80021b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e05c      	b.n	800226a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021b0:	4b11      	ldr	r3, [pc, #68]	; (80021f8 <HAL_RCC_OscConfig+0x470>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d0f0      	beq.n	800219e <HAL_RCC_OscConfig+0x416>
 80021bc:	e054      	b.n	8002268 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021be:	4b10      	ldr	r3, [pc, #64]	; (8002200 <HAL_RCC_OscConfig+0x478>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c4:	f7ff f898 	bl	80012f8 <HAL_GetTick>
 80021c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ca:	e008      	b.n	80021de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021cc:	f7ff f894 	bl	80012f8 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e045      	b.n	800226a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021de:	4b06      	ldr	r3, [pc, #24]	; (80021f8 <HAL_RCC_OscConfig+0x470>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d1f0      	bne.n	80021cc <HAL_RCC_OscConfig+0x444>
 80021ea:	e03d      	b.n	8002268 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d107      	bne.n	8002204 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e038      	b.n	800226a <HAL_RCC_OscConfig+0x4e2>
 80021f8:	40023800 	.word	0x40023800
 80021fc:	40007000 	.word	0x40007000
 8002200:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002204:	4b1b      	ldr	r3, [pc, #108]	; (8002274 <HAL_RCC_OscConfig+0x4ec>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d028      	beq.n	8002264 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800221c:	429a      	cmp	r2, r3
 800221e:	d121      	bne.n	8002264 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800222a:	429a      	cmp	r2, r3
 800222c:	d11a      	bne.n	8002264 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800222e:	68fa      	ldr	r2, [r7, #12]
 8002230:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002234:	4013      	ands	r3, r2
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800223a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800223c:	4293      	cmp	r3, r2
 800223e:	d111      	bne.n	8002264 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224a:	085b      	lsrs	r3, r3, #1
 800224c:	3b01      	subs	r3, #1
 800224e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002250:	429a      	cmp	r2, r3
 8002252:	d107      	bne.n	8002264 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002260:	429a      	cmp	r2, r3
 8002262:	d001      	beq.n	8002268 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e000      	b.n	800226a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3718      	adds	r7, #24
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	40023800 	.word	0x40023800

08002278 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d101      	bne.n	800228c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e0cc      	b.n	8002426 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800228c:	4b68      	ldr	r3, [pc, #416]	; (8002430 <HAL_RCC_ClockConfig+0x1b8>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0307 	and.w	r3, r3, #7
 8002294:	683a      	ldr	r2, [r7, #0]
 8002296:	429a      	cmp	r2, r3
 8002298:	d90c      	bls.n	80022b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800229a:	4b65      	ldr	r3, [pc, #404]	; (8002430 <HAL_RCC_ClockConfig+0x1b8>)
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	b2d2      	uxtb	r2, r2
 80022a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022a2:	4b63      	ldr	r3, [pc, #396]	; (8002430 <HAL_RCC_ClockConfig+0x1b8>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0307 	and.w	r3, r3, #7
 80022aa:	683a      	ldr	r2, [r7, #0]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d001      	beq.n	80022b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e0b8      	b.n	8002426 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0302 	and.w	r3, r3, #2
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d020      	beq.n	8002302 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0304 	and.w	r3, r3, #4
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d005      	beq.n	80022d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022cc:	4b59      	ldr	r3, [pc, #356]	; (8002434 <HAL_RCC_ClockConfig+0x1bc>)
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	4a58      	ldr	r2, [pc, #352]	; (8002434 <HAL_RCC_ClockConfig+0x1bc>)
 80022d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80022d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0308 	and.w	r3, r3, #8
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d005      	beq.n	80022f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022e4:	4b53      	ldr	r3, [pc, #332]	; (8002434 <HAL_RCC_ClockConfig+0x1bc>)
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	4a52      	ldr	r2, [pc, #328]	; (8002434 <HAL_RCC_ClockConfig+0x1bc>)
 80022ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80022ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022f0:	4b50      	ldr	r3, [pc, #320]	; (8002434 <HAL_RCC_ClockConfig+0x1bc>)
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	494d      	ldr	r1, [pc, #308]	; (8002434 <HAL_RCC_ClockConfig+0x1bc>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	2b00      	cmp	r3, #0
 800230c:	d044      	beq.n	8002398 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d107      	bne.n	8002326 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002316:	4b47      	ldr	r3, [pc, #284]	; (8002434 <HAL_RCC_ClockConfig+0x1bc>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d119      	bne.n	8002356 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e07f      	b.n	8002426 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	2b02      	cmp	r3, #2
 800232c:	d003      	beq.n	8002336 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002332:	2b03      	cmp	r3, #3
 8002334:	d107      	bne.n	8002346 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002336:	4b3f      	ldr	r3, [pc, #252]	; (8002434 <HAL_RCC_ClockConfig+0x1bc>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d109      	bne.n	8002356 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e06f      	b.n	8002426 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002346:	4b3b      	ldr	r3, [pc, #236]	; (8002434 <HAL_RCC_ClockConfig+0x1bc>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d101      	bne.n	8002356 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e067      	b.n	8002426 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002356:	4b37      	ldr	r3, [pc, #220]	; (8002434 <HAL_RCC_ClockConfig+0x1bc>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f023 0203 	bic.w	r2, r3, #3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	4934      	ldr	r1, [pc, #208]	; (8002434 <HAL_RCC_ClockConfig+0x1bc>)
 8002364:	4313      	orrs	r3, r2
 8002366:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002368:	f7fe ffc6 	bl	80012f8 <HAL_GetTick>
 800236c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800236e:	e00a      	b.n	8002386 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002370:	f7fe ffc2 	bl	80012f8 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	f241 3288 	movw	r2, #5000	; 0x1388
 800237e:	4293      	cmp	r3, r2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e04f      	b.n	8002426 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002386:	4b2b      	ldr	r3, [pc, #172]	; (8002434 <HAL_RCC_ClockConfig+0x1bc>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f003 020c 	and.w	r2, r3, #12
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	429a      	cmp	r2, r3
 8002396:	d1eb      	bne.n	8002370 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002398:	4b25      	ldr	r3, [pc, #148]	; (8002430 <HAL_RCC_ClockConfig+0x1b8>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0307 	and.w	r3, r3, #7
 80023a0:	683a      	ldr	r2, [r7, #0]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d20c      	bcs.n	80023c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023a6:	4b22      	ldr	r3, [pc, #136]	; (8002430 <HAL_RCC_ClockConfig+0x1b8>)
 80023a8:	683a      	ldr	r2, [r7, #0]
 80023aa:	b2d2      	uxtb	r2, r2
 80023ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ae:	4b20      	ldr	r3, [pc, #128]	; (8002430 <HAL_RCC_ClockConfig+0x1b8>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0307 	and.w	r3, r3, #7
 80023b6:	683a      	ldr	r2, [r7, #0]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d001      	beq.n	80023c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e032      	b.n	8002426 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0304 	and.w	r3, r3, #4
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d008      	beq.n	80023de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023cc:	4b19      	ldr	r3, [pc, #100]	; (8002434 <HAL_RCC_ClockConfig+0x1bc>)
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	4916      	ldr	r1, [pc, #88]	; (8002434 <HAL_RCC_ClockConfig+0x1bc>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0308 	and.w	r3, r3, #8
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d009      	beq.n	80023fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023ea:	4b12      	ldr	r3, [pc, #72]	; (8002434 <HAL_RCC_ClockConfig+0x1bc>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	00db      	lsls	r3, r3, #3
 80023f8:	490e      	ldr	r1, [pc, #56]	; (8002434 <HAL_RCC_ClockConfig+0x1bc>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80023fe:	f000 f821 	bl	8002444 <HAL_RCC_GetSysClockFreq>
 8002402:	4602      	mov	r2, r0
 8002404:	4b0b      	ldr	r3, [pc, #44]	; (8002434 <HAL_RCC_ClockConfig+0x1bc>)
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	091b      	lsrs	r3, r3, #4
 800240a:	f003 030f 	and.w	r3, r3, #15
 800240e:	490a      	ldr	r1, [pc, #40]	; (8002438 <HAL_RCC_ClockConfig+0x1c0>)
 8002410:	5ccb      	ldrb	r3, [r1, r3]
 8002412:	fa22 f303 	lsr.w	r3, r2, r3
 8002416:	4a09      	ldr	r2, [pc, #36]	; (800243c <HAL_RCC_ClockConfig+0x1c4>)
 8002418:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800241a:	4b09      	ldr	r3, [pc, #36]	; (8002440 <HAL_RCC_ClockConfig+0x1c8>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4618      	mov	r0, r3
 8002420:	f7fe ff26 	bl	8001270 <HAL_InitTick>

  return HAL_OK;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3710      	adds	r7, #16
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	40023c00 	.word	0x40023c00
 8002434:	40023800 	.word	0x40023800
 8002438:	08004ac4 	.word	0x08004ac4
 800243c:	20000000 	.word	0x20000000
 8002440:	20000004 	.word	0x20000004

08002444 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002444:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002448:	b090      	sub	sp, #64	; 0x40
 800244a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800244c:	2300      	movs	r3, #0
 800244e:	637b      	str	r3, [r7, #52]	; 0x34
 8002450:	2300      	movs	r3, #0
 8002452:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002454:	2300      	movs	r3, #0
 8002456:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002458:	2300      	movs	r3, #0
 800245a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800245c:	4b59      	ldr	r3, [pc, #356]	; (80025c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f003 030c 	and.w	r3, r3, #12
 8002464:	2b08      	cmp	r3, #8
 8002466:	d00d      	beq.n	8002484 <HAL_RCC_GetSysClockFreq+0x40>
 8002468:	2b08      	cmp	r3, #8
 800246a:	f200 80a1 	bhi.w	80025b0 <HAL_RCC_GetSysClockFreq+0x16c>
 800246e:	2b00      	cmp	r3, #0
 8002470:	d002      	beq.n	8002478 <HAL_RCC_GetSysClockFreq+0x34>
 8002472:	2b04      	cmp	r3, #4
 8002474:	d003      	beq.n	800247e <HAL_RCC_GetSysClockFreq+0x3a>
 8002476:	e09b      	b.n	80025b0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002478:	4b53      	ldr	r3, [pc, #332]	; (80025c8 <HAL_RCC_GetSysClockFreq+0x184>)
 800247a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800247c:	e09b      	b.n	80025b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800247e:	4b53      	ldr	r3, [pc, #332]	; (80025cc <HAL_RCC_GetSysClockFreq+0x188>)
 8002480:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002482:	e098      	b.n	80025b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002484:	4b4f      	ldr	r3, [pc, #316]	; (80025c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800248c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800248e:	4b4d      	ldr	r3, [pc, #308]	; (80025c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d028      	beq.n	80024ec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800249a:	4b4a      	ldr	r3, [pc, #296]	; (80025c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	099b      	lsrs	r3, r3, #6
 80024a0:	2200      	movs	r2, #0
 80024a2:	623b      	str	r3, [r7, #32]
 80024a4:	627a      	str	r2, [r7, #36]	; 0x24
 80024a6:	6a3b      	ldr	r3, [r7, #32]
 80024a8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80024ac:	2100      	movs	r1, #0
 80024ae:	4b47      	ldr	r3, [pc, #284]	; (80025cc <HAL_RCC_GetSysClockFreq+0x188>)
 80024b0:	fb03 f201 	mul.w	r2, r3, r1
 80024b4:	2300      	movs	r3, #0
 80024b6:	fb00 f303 	mul.w	r3, r0, r3
 80024ba:	4413      	add	r3, r2
 80024bc:	4a43      	ldr	r2, [pc, #268]	; (80025cc <HAL_RCC_GetSysClockFreq+0x188>)
 80024be:	fba0 1202 	umull	r1, r2, r0, r2
 80024c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80024c4:	460a      	mov	r2, r1
 80024c6:	62ba      	str	r2, [r7, #40]	; 0x28
 80024c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024ca:	4413      	add	r3, r2
 80024cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024d0:	2200      	movs	r2, #0
 80024d2:	61bb      	str	r3, [r7, #24]
 80024d4:	61fa      	str	r2, [r7, #28]
 80024d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024da:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80024de:	f7fd fe7b 	bl	80001d8 <__aeabi_uldivmod>
 80024e2:	4602      	mov	r2, r0
 80024e4:	460b      	mov	r3, r1
 80024e6:	4613      	mov	r3, r2
 80024e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024ea:	e053      	b.n	8002594 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024ec:	4b35      	ldr	r3, [pc, #212]	; (80025c4 <HAL_RCC_GetSysClockFreq+0x180>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	099b      	lsrs	r3, r3, #6
 80024f2:	2200      	movs	r2, #0
 80024f4:	613b      	str	r3, [r7, #16]
 80024f6:	617a      	str	r2, [r7, #20]
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80024fe:	f04f 0b00 	mov.w	fp, #0
 8002502:	4652      	mov	r2, sl
 8002504:	465b      	mov	r3, fp
 8002506:	f04f 0000 	mov.w	r0, #0
 800250a:	f04f 0100 	mov.w	r1, #0
 800250e:	0159      	lsls	r1, r3, #5
 8002510:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002514:	0150      	lsls	r0, r2, #5
 8002516:	4602      	mov	r2, r0
 8002518:	460b      	mov	r3, r1
 800251a:	ebb2 080a 	subs.w	r8, r2, sl
 800251e:	eb63 090b 	sbc.w	r9, r3, fp
 8002522:	f04f 0200 	mov.w	r2, #0
 8002526:	f04f 0300 	mov.w	r3, #0
 800252a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800252e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002532:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002536:	ebb2 0408 	subs.w	r4, r2, r8
 800253a:	eb63 0509 	sbc.w	r5, r3, r9
 800253e:	f04f 0200 	mov.w	r2, #0
 8002542:	f04f 0300 	mov.w	r3, #0
 8002546:	00eb      	lsls	r3, r5, #3
 8002548:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800254c:	00e2      	lsls	r2, r4, #3
 800254e:	4614      	mov	r4, r2
 8002550:	461d      	mov	r5, r3
 8002552:	eb14 030a 	adds.w	r3, r4, sl
 8002556:	603b      	str	r3, [r7, #0]
 8002558:	eb45 030b 	adc.w	r3, r5, fp
 800255c:	607b      	str	r3, [r7, #4]
 800255e:	f04f 0200 	mov.w	r2, #0
 8002562:	f04f 0300 	mov.w	r3, #0
 8002566:	e9d7 4500 	ldrd	r4, r5, [r7]
 800256a:	4629      	mov	r1, r5
 800256c:	028b      	lsls	r3, r1, #10
 800256e:	4621      	mov	r1, r4
 8002570:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002574:	4621      	mov	r1, r4
 8002576:	028a      	lsls	r2, r1, #10
 8002578:	4610      	mov	r0, r2
 800257a:	4619      	mov	r1, r3
 800257c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800257e:	2200      	movs	r2, #0
 8002580:	60bb      	str	r3, [r7, #8]
 8002582:	60fa      	str	r2, [r7, #12]
 8002584:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002588:	f7fd fe26 	bl	80001d8 <__aeabi_uldivmod>
 800258c:	4602      	mov	r2, r0
 800258e:	460b      	mov	r3, r1
 8002590:	4613      	mov	r3, r2
 8002592:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002594:	4b0b      	ldr	r3, [pc, #44]	; (80025c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	0c1b      	lsrs	r3, r3, #16
 800259a:	f003 0303 	and.w	r3, r3, #3
 800259e:	3301      	adds	r3, #1
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80025a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80025a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80025ae:	e002      	b.n	80025b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025b0:	4b05      	ldr	r3, [pc, #20]	; (80025c8 <HAL_RCC_GetSysClockFreq+0x184>)
 80025b2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80025b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3740      	adds	r7, #64	; 0x40
 80025bc:	46bd      	mov	sp, r7
 80025be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025c2:	bf00      	nop
 80025c4:	40023800 	.word	0x40023800
 80025c8:	00f42400 	.word	0x00f42400
 80025cc:	017d7840 	.word	0x017d7840

080025d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025d4:	4b03      	ldr	r3, [pc, #12]	; (80025e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80025d6:	681b      	ldr	r3, [r3, #0]
}
 80025d8:	4618      	mov	r0, r3
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	20000000 	.word	0x20000000

080025e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80025ec:	f7ff fff0 	bl	80025d0 <HAL_RCC_GetHCLKFreq>
 80025f0:	4602      	mov	r2, r0
 80025f2:	4b05      	ldr	r3, [pc, #20]	; (8002608 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	0a9b      	lsrs	r3, r3, #10
 80025f8:	f003 0307 	and.w	r3, r3, #7
 80025fc:	4903      	ldr	r1, [pc, #12]	; (800260c <HAL_RCC_GetPCLK1Freq+0x24>)
 80025fe:	5ccb      	ldrb	r3, [r1, r3]
 8002600:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002604:	4618      	mov	r0, r3
 8002606:	bd80      	pop	{r7, pc}
 8002608:	40023800 	.word	0x40023800
 800260c:	08004ad4 	.word	0x08004ad4

08002610 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002614:	f7ff ffdc 	bl	80025d0 <HAL_RCC_GetHCLKFreq>
 8002618:	4602      	mov	r2, r0
 800261a:	4b05      	ldr	r3, [pc, #20]	; (8002630 <HAL_RCC_GetPCLK2Freq+0x20>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	0b5b      	lsrs	r3, r3, #13
 8002620:	f003 0307 	and.w	r3, r3, #7
 8002624:	4903      	ldr	r1, [pc, #12]	; (8002634 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002626:	5ccb      	ldrb	r3, [r1, r3]
 8002628:	fa22 f303 	lsr.w	r3, r2, r3
}
 800262c:	4618      	mov	r0, r3
 800262e:	bd80      	pop	{r7, pc}
 8002630:	40023800 	.word	0x40023800
 8002634:	08004ad4 	.word	0x08004ad4

08002638 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002638:	b480      	push	{r7}
 800263a:	b085      	sub	sp, #20
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002646:	b2db      	uxtb	r3, r3
 8002648:	2b01      	cmp	r3, #1
 800264a:	d001      	beq.n	8002650 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e03c      	b.n	80026ca <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2202      	movs	r2, #2
 8002654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a1e      	ldr	r2, [pc, #120]	; (80026d8 <HAL_TIM_Base_Start+0xa0>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d018      	beq.n	8002694 <HAL_TIM_Base_Start+0x5c>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800266a:	d013      	beq.n	8002694 <HAL_TIM_Base_Start+0x5c>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a1a      	ldr	r2, [pc, #104]	; (80026dc <HAL_TIM_Base_Start+0xa4>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d00e      	beq.n	8002694 <HAL_TIM_Base_Start+0x5c>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a19      	ldr	r2, [pc, #100]	; (80026e0 <HAL_TIM_Base_Start+0xa8>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d009      	beq.n	8002694 <HAL_TIM_Base_Start+0x5c>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a17      	ldr	r2, [pc, #92]	; (80026e4 <HAL_TIM_Base_Start+0xac>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d004      	beq.n	8002694 <HAL_TIM_Base_Start+0x5c>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a16      	ldr	r2, [pc, #88]	; (80026e8 <HAL_TIM_Base_Start+0xb0>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d111      	bne.n	80026b8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f003 0307 	and.w	r3, r3, #7
 800269e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2b06      	cmp	r3, #6
 80026a4:	d010      	beq.n	80026c8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f042 0201 	orr.w	r2, r2, #1
 80026b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026b6:	e007      	b.n	80026c8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f042 0201 	orr.w	r2, r2, #1
 80026c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3714      	adds	r7, #20
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	40010000 	.word	0x40010000
 80026dc:	40000400 	.word	0x40000400
 80026e0:	40000800 	.word	0x40000800
 80026e4:	40000c00 	.word	0x40000c00
 80026e8:	40014000 	.word	0x40014000

080026ec <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e041      	b.n	8002782 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d106      	bne.n	8002718 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f7fe fbb2 	bl	8000e7c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2202      	movs	r2, #2
 800271c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	3304      	adds	r3, #4
 8002728:	4619      	mov	r1, r3
 800272a:	4610      	mov	r0, r2
 800272c:	f000 fbea 	bl	8002f04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
	...

0800278c <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2200      	movs	r2, #0
 800279c:	6839      	ldr	r1, [r7, #0]
 800279e:	4618      	mov	r0, r3
 80027a0:	f000 fdbc 	bl	800331c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a29      	ldr	r2, [pc, #164]	; (8002850 <HAL_TIM_OC_Stop+0xc4>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d117      	bne.n	80027de <HAL_TIM_OC_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	6a1a      	ldr	r2, [r3, #32]
 80027b4:	f241 1311 	movw	r3, #4369	; 0x1111
 80027b8:	4013      	ands	r3, r2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d10f      	bne.n	80027de <HAL_TIM_OC_Stop+0x52>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	6a1a      	ldr	r2, [r3, #32]
 80027c4:	f240 4344 	movw	r3, #1092	; 0x444
 80027c8:	4013      	ands	r3, r2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d107      	bne.n	80027de <HAL_TIM_OC_Stop+0x52>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	6a1a      	ldr	r2, [r3, #32]
 80027e4:	f241 1311 	movw	r3, #4369	; 0x1111
 80027e8:	4013      	ands	r3, r2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d10f      	bne.n	800280e <HAL_TIM_OC_Stop+0x82>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	6a1a      	ldr	r2, [r3, #32]
 80027f4:	f240 4344 	movw	r3, #1092	; 0x444
 80027f8:	4013      	ands	r3, r2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d107      	bne.n	800280e <HAL_TIM_OC_Stop+0x82>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f022 0201 	bic.w	r2, r2, #1
 800280c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d104      	bne.n	800281e <HAL_TIM_OC_Stop+0x92>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800281c:	e013      	b.n	8002846 <HAL_TIM_OC_Stop+0xba>
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	2b04      	cmp	r3, #4
 8002822:	d104      	bne.n	800282e <HAL_TIM_OC_Stop+0xa2>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800282c:	e00b      	b.n	8002846 <HAL_TIM_OC_Stop+0xba>
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	2b08      	cmp	r3, #8
 8002832:	d104      	bne.n	800283e <HAL_TIM_OC_Stop+0xb2>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800283c:	e003      	b.n	8002846 <HAL_TIM_OC_Stop+0xba>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2201      	movs	r2, #1
 8002842:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	3708      	adds	r7, #8
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	40010000 	.word	0x40010000

08002854 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e041      	b.n	80028ea <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d106      	bne.n	8002880 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f7fe fad6 	bl	8000e2c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2202      	movs	r2, #2
 8002884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	3304      	adds	r3, #4
 8002890:	4619      	mov	r1, r3
 8002892:	4610      	mov	r0, r2
 8002894:	f000 fb36 	bl	8002f04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
	...

080028f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d109      	bne.n	8002918 <HAL_TIM_PWM_Start+0x24>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800290a:	b2db      	uxtb	r3, r3
 800290c:	2b01      	cmp	r3, #1
 800290e:	bf14      	ite	ne
 8002910:	2301      	movne	r3, #1
 8002912:	2300      	moveq	r3, #0
 8002914:	b2db      	uxtb	r3, r3
 8002916:	e022      	b.n	800295e <HAL_TIM_PWM_Start+0x6a>
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	2b04      	cmp	r3, #4
 800291c:	d109      	bne.n	8002932 <HAL_TIM_PWM_Start+0x3e>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002924:	b2db      	uxtb	r3, r3
 8002926:	2b01      	cmp	r3, #1
 8002928:	bf14      	ite	ne
 800292a:	2301      	movne	r3, #1
 800292c:	2300      	moveq	r3, #0
 800292e:	b2db      	uxtb	r3, r3
 8002930:	e015      	b.n	800295e <HAL_TIM_PWM_Start+0x6a>
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	2b08      	cmp	r3, #8
 8002936:	d109      	bne.n	800294c <HAL_TIM_PWM_Start+0x58>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800293e:	b2db      	uxtb	r3, r3
 8002940:	2b01      	cmp	r3, #1
 8002942:	bf14      	ite	ne
 8002944:	2301      	movne	r3, #1
 8002946:	2300      	moveq	r3, #0
 8002948:	b2db      	uxtb	r3, r3
 800294a:	e008      	b.n	800295e <HAL_TIM_PWM_Start+0x6a>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002952:	b2db      	uxtb	r3, r3
 8002954:	2b01      	cmp	r3, #1
 8002956:	bf14      	ite	ne
 8002958:	2301      	movne	r3, #1
 800295a:	2300      	moveq	r3, #0
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e068      	b.n	8002a38 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d104      	bne.n	8002976 <HAL_TIM_PWM_Start+0x82>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2202      	movs	r2, #2
 8002970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002974:	e013      	b.n	800299e <HAL_TIM_PWM_Start+0xaa>
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	2b04      	cmp	r3, #4
 800297a:	d104      	bne.n	8002986 <HAL_TIM_PWM_Start+0x92>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2202      	movs	r2, #2
 8002980:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002984:	e00b      	b.n	800299e <HAL_TIM_PWM_Start+0xaa>
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	2b08      	cmp	r3, #8
 800298a:	d104      	bne.n	8002996 <HAL_TIM_PWM_Start+0xa2>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2202      	movs	r2, #2
 8002990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002994:	e003      	b.n	800299e <HAL_TIM_PWM_Start+0xaa>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2202      	movs	r2, #2
 800299a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2201      	movs	r2, #1
 80029a4:	6839      	ldr	r1, [r7, #0]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f000 fcb8 	bl	800331c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a23      	ldr	r2, [pc, #140]	; (8002a40 <HAL_TIM_PWM_Start+0x14c>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d107      	bne.n	80029c6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a1d      	ldr	r2, [pc, #116]	; (8002a40 <HAL_TIM_PWM_Start+0x14c>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d018      	beq.n	8002a02 <HAL_TIM_PWM_Start+0x10e>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029d8:	d013      	beq.n	8002a02 <HAL_TIM_PWM_Start+0x10e>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a19      	ldr	r2, [pc, #100]	; (8002a44 <HAL_TIM_PWM_Start+0x150>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d00e      	beq.n	8002a02 <HAL_TIM_PWM_Start+0x10e>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a17      	ldr	r2, [pc, #92]	; (8002a48 <HAL_TIM_PWM_Start+0x154>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d009      	beq.n	8002a02 <HAL_TIM_PWM_Start+0x10e>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a16      	ldr	r2, [pc, #88]	; (8002a4c <HAL_TIM_PWM_Start+0x158>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d004      	beq.n	8002a02 <HAL_TIM_PWM_Start+0x10e>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a14      	ldr	r2, [pc, #80]	; (8002a50 <HAL_TIM_PWM_Start+0x15c>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d111      	bne.n	8002a26 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f003 0307 	and.w	r3, r3, #7
 8002a0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2b06      	cmp	r3, #6
 8002a12:	d010      	beq.n	8002a36 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f042 0201 	orr.w	r2, r2, #1
 8002a22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a24:	e007      	b.n	8002a36 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f042 0201 	orr.w	r2, r2, #1
 8002a34:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3710      	adds	r7, #16
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	40010000 	.word	0x40010000
 8002a44:	40000400 	.word	0x40000400
 8002a48:	40000800 	.word	0x40000800
 8002a4c:	40000c00 	.word	0x40000c00
 8002a50:	40014000 	.word	0x40014000

08002a54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d122      	bne.n	8002ab0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	f003 0302 	and.w	r3, r3, #2
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d11b      	bne.n	8002ab0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f06f 0202 	mvn.w	r2, #2
 8002a80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2201      	movs	r2, #1
 8002a86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	f003 0303 	and.w	r3, r3, #3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d003      	beq.n	8002a9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 fa16 	bl	8002ec8 <HAL_TIM_IC_CaptureCallback>
 8002a9c:	e005      	b.n	8002aaa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 fa08 	bl	8002eb4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f000 fa19 	bl	8002edc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	f003 0304 	and.w	r3, r3, #4
 8002aba:	2b04      	cmp	r3, #4
 8002abc:	d122      	bne.n	8002b04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	f003 0304 	and.w	r3, r3, #4
 8002ac8:	2b04      	cmp	r3, #4
 8002aca:	d11b      	bne.n	8002b04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f06f 0204 	mvn.w	r2, #4
 8002ad4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2202      	movs	r2, #2
 8002ada:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d003      	beq.n	8002af2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 f9ec 	bl	8002ec8 <HAL_TIM_IC_CaptureCallback>
 8002af0:	e005      	b.n	8002afe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 f9de 	bl	8002eb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f000 f9ef 	bl	8002edc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	f003 0308 	and.w	r3, r3, #8
 8002b0e:	2b08      	cmp	r3, #8
 8002b10:	d122      	bne.n	8002b58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	f003 0308 	and.w	r3, r3, #8
 8002b1c:	2b08      	cmp	r3, #8
 8002b1e:	d11b      	bne.n	8002b58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f06f 0208 	mvn.w	r2, #8
 8002b28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2204      	movs	r2, #4
 8002b2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	69db      	ldr	r3, [r3, #28]
 8002b36:	f003 0303 	and.w	r3, r3, #3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d003      	beq.n	8002b46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 f9c2 	bl	8002ec8 <HAL_TIM_IC_CaptureCallback>
 8002b44:	e005      	b.n	8002b52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 f9b4 	bl	8002eb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f000 f9c5 	bl	8002edc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	f003 0310 	and.w	r3, r3, #16
 8002b62:	2b10      	cmp	r3, #16
 8002b64:	d122      	bne.n	8002bac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	f003 0310 	and.w	r3, r3, #16
 8002b70:	2b10      	cmp	r3, #16
 8002b72:	d11b      	bne.n	8002bac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f06f 0210 	mvn.w	r2, #16
 8002b7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2208      	movs	r2, #8
 8002b82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	69db      	ldr	r3, [r3, #28]
 8002b8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d003      	beq.n	8002b9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 f998 	bl	8002ec8 <HAL_TIM_IC_CaptureCallback>
 8002b98:	e005      	b.n	8002ba6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 f98a 	bl	8002eb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f000 f99b 	bl	8002edc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d10e      	bne.n	8002bd8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	f003 0301 	and.w	r3, r3, #1
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d107      	bne.n	8002bd8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f06f 0201 	mvn.w	r2, #1
 8002bd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 f964 	bl	8002ea0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002be2:	2b80      	cmp	r3, #128	; 0x80
 8002be4:	d10e      	bne.n	8002c04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bf0:	2b80      	cmp	r3, #128	; 0x80
 8002bf2:	d107      	bne.n	8002c04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 fe2a 	bl	8003858 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c0e:	2b40      	cmp	r3, #64	; 0x40
 8002c10:	d10e      	bne.n	8002c30 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c1c:	2b40      	cmp	r3, #64	; 0x40
 8002c1e:	d107      	bne.n	8002c30 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 f960 	bl	8002ef0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	f003 0320 	and.w	r3, r3, #32
 8002c3a:	2b20      	cmp	r3, #32
 8002c3c:	d10e      	bne.n	8002c5c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	f003 0320 	and.w	r3, r3, #32
 8002c48:	2b20      	cmp	r3, #32
 8002c4a:	d107      	bne.n	8002c5c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f06f 0220 	mvn.w	r2, #32
 8002c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f7fd feea 	bl	8000a30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c5c:	bf00      	nop
 8002c5e:	3708      	adds	r7, #8
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b086      	sub	sp, #24
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c70:	2300      	movs	r3, #0
 8002c72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d101      	bne.n	8002c82 <HAL_TIM_OC_ConfigChannel+0x1e>
 8002c7e:	2302      	movs	r3, #2
 8002c80:	e048      	b.n	8002d14 <HAL_TIM_OC_ConfigChannel+0xb0>
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2201      	movs	r2, #1
 8002c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2b0c      	cmp	r3, #12
 8002c8e:	d839      	bhi.n	8002d04 <HAL_TIM_OC_ConfigChannel+0xa0>
 8002c90:	a201      	add	r2, pc, #4	; (adr r2, 8002c98 <HAL_TIM_OC_ConfigChannel+0x34>)
 8002c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c96:	bf00      	nop
 8002c98:	08002ccd 	.word	0x08002ccd
 8002c9c:	08002d05 	.word	0x08002d05
 8002ca0:	08002d05 	.word	0x08002d05
 8002ca4:	08002d05 	.word	0x08002d05
 8002ca8:	08002cdb 	.word	0x08002cdb
 8002cac:	08002d05 	.word	0x08002d05
 8002cb0:	08002d05 	.word	0x08002d05
 8002cb4:	08002d05 	.word	0x08002d05
 8002cb8:	08002ce9 	.word	0x08002ce9
 8002cbc:	08002d05 	.word	0x08002d05
 8002cc0:	08002d05 	.word	0x08002d05
 8002cc4:	08002d05 	.word	0x08002d05
 8002cc8:	08002cf7 	.word	0x08002cf7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68b9      	ldr	r1, [r7, #8]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f000 f996 	bl	8003004 <TIM_OC1_SetConfig>
      break;
 8002cd8:	e017      	b.n	8002d0a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68b9      	ldr	r1, [r7, #8]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f000 f9f5 	bl	80030d0 <TIM_OC2_SetConfig>
      break;
 8002ce6:	e010      	b.n	8002d0a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68b9      	ldr	r1, [r7, #8]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f000 fa5a 	bl	80031a8 <TIM_OC3_SetConfig>
      break;
 8002cf4:	e009      	b.n	8002d0a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68b9      	ldr	r1, [r7, #8]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f000 fabd 	bl	800327c <TIM_OC4_SetConfig>
      break;
 8002d02:	e002      	b.n	8002d0a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	75fb      	strb	r3, [r7, #23]
      break;
 8002d08:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d12:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3718      	adds	r7, #24
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b086      	sub	sp, #24
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d101      	bne.n	8002d3a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002d36:	2302      	movs	r3, #2
 8002d38:	e0ae      	b.n	8002e98 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2b0c      	cmp	r3, #12
 8002d46:	f200 809f 	bhi.w	8002e88 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002d4a:	a201      	add	r2, pc, #4	; (adr r2, 8002d50 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d50:	08002d85 	.word	0x08002d85
 8002d54:	08002e89 	.word	0x08002e89
 8002d58:	08002e89 	.word	0x08002e89
 8002d5c:	08002e89 	.word	0x08002e89
 8002d60:	08002dc5 	.word	0x08002dc5
 8002d64:	08002e89 	.word	0x08002e89
 8002d68:	08002e89 	.word	0x08002e89
 8002d6c:	08002e89 	.word	0x08002e89
 8002d70:	08002e07 	.word	0x08002e07
 8002d74:	08002e89 	.word	0x08002e89
 8002d78:	08002e89 	.word	0x08002e89
 8002d7c:	08002e89 	.word	0x08002e89
 8002d80:	08002e47 	.word	0x08002e47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	68b9      	ldr	r1, [r7, #8]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f000 f93a 	bl	8003004 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	699a      	ldr	r2, [r3, #24]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f042 0208 	orr.w	r2, r2, #8
 8002d9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	699a      	ldr	r2, [r3, #24]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f022 0204 	bic.w	r2, r2, #4
 8002dae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	6999      	ldr	r1, [r3, #24]
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	691a      	ldr	r2, [r3, #16]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	619a      	str	r2, [r3, #24]
      break;
 8002dc2:	e064      	b.n	8002e8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	68b9      	ldr	r1, [r7, #8]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f000 f980 	bl	80030d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	699a      	ldr	r2, [r3, #24]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002dde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	699a      	ldr	r2, [r3, #24]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	6999      	ldr	r1, [r3, #24]
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	021a      	lsls	r2, r3, #8
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	430a      	orrs	r2, r1
 8002e02:	619a      	str	r2, [r3, #24]
      break;
 8002e04:	e043      	b.n	8002e8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68b9      	ldr	r1, [r7, #8]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f000 f9cb 	bl	80031a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	69da      	ldr	r2, [r3, #28]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f042 0208 	orr.w	r2, r2, #8
 8002e20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	69da      	ldr	r2, [r3, #28]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f022 0204 	bic.w	r2, r2, #4
 8002e30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	69d9      	ldr	r1, [r3, #28]
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	691a      	ldr	r2, [r3, #16]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	430a      	orrs	r2, r1
 8002e42:	61da      	str	r2, [r3, #28]
      break;
 8002e44:	e023      	b.n	8002e8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68b9      	ldr	r1, [r7, #8]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f000 fa15 	bl	800327c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	69da      	ldr	r2, [r3, #28]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	69da      	ldr	r2, [r3, #28]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	69d9      	ldr	r1, [r3, #28]
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	691b      	ldr	r3, [r3, #16]
 8002e7c:	021a      	lsls	r2, r3, #8
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	430a      	orrs	r2, r1
 8002e84:	61da      	str	r2, [r3, #28]
      break;
 8002e86:	e002      	b.n	8002e8e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	75fb      	strb	r3, [r7, #23]
      break;
 8002e8c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e96:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3718      	adds	r7, #24
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ee4:	bf00      	nop
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4a34      	ldr	r2, [pc, #208]	; (8002fe8 <TIM_Base_SetConfig+0xe4>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d00f      	beq.n	8002f3c <TIM_Base_SetConfig+0x38>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f22:	d00b      	beq.n	8002f3c <TIM_Base_SetConfig+0x38>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a31      	ldr	r2, [pc, #196]	; (8002fec <TIM_Base_SetConfig+0xe8>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d007      	beq.n	8002f3c <TIM_Base_SetConfig+0x38>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4a30      	ldr	r2, [pc, #192]	; (8002ff0 <TIM_Base_SetConfig+0xec>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d003      	beq.n	8002f3c <TIM_Base_SetConfig+0x38>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4a2f      	ldr	r2, [pc, #188]	; (8002ff4 <TIM_Base_SetConfig+0xf0>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d108      	bne.n	8002f4e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	68fa      	ldr	r2, [r7, #12]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a25      	ldr	r2, [pc, #148]	; (8002fe8 <TIM_Base_SetConfig+0xe4>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d01b      	beq.n	8002f8e <TIM_Base_SetConfig+0x8a>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f5c:	d017      	beq.n	8002f8e <TIM_Base_SetConfig+0x8a>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a22      	ldr	r2, [pc, #136]	; (8002fec <TIM_Base_SetConfig+0xe8>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d013      	beq.n	8002f8e <TIM_Base_SetConfig+0x8a>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a21      	ldr	r2, [pc, #132]	; (8002ff0 <TIM_Base_SetConfig+0xec>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d00f      	beq.n	8002f8e <TIM_Base_SetConfig+0x8a>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a20      	ldr	r2, [pc, #128]	; (8002ff4 <TIM_Base_SetConfig+0xf0>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d00b      	beq.n	8002f8e <TIM_Base_SetConfig+0x8a>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a1f      	ldr	r2, [pc, #124]	; (8002ff8 <TIM_Base_SetConfig+0xf4>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d007      	beq.n	8002f8e <TIM_Base_SetConfig+0x8a>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a1e      	ldr	r2, [pc, #120]	; (8002ffc <TIM_Base_SetConfig+0xf8>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d003      	beq.n	8002f8e <TIM_Base_SetConfig+0x8a>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a1d      	ldr	r2, [pc, #116]	; (8003000 <TIM_Base_SetConfig+0xfc>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d108      	bne.n	8002fa0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	68fa      	ldr	r2, [r7, #12]
 8002fb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	689a      	ldr	r2, [r3, #8]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a08      	ldr	r2, [pc, #32]	; (8002fe8 <TIM_Base_SetConfig+0xe4>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d103      	bne.n	8002fd4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	691a      	ldr	r2, [r3, #16]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	615a      	str	r2, [r3, #20]
}
 8002fda:	bf00      	nop
 8002fdc:	3714      	adds	r7, #20
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	40010000 	.word	0x40010000
 8002fec:	40000400 	.word	0x40000400
 8002ff0:	40000800 	.word	0x40000800
 8002ff4:	40000c00 	.word	0x40000c00
 8002ff8:	40014000 	.word	0x40014000
 8002ffc:	40014400 	.word	0x40014400
 8003000:	40014800 	.word	0x40014800

08003004 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003004:	b480      	push	{r7}
 8003006:	b087      	sub	sp, #28
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a1b      	ldr	r3, [r3, #32]
 8003012:	f023 0201 	bic.w	r2, r3, #1
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a1b      	ldr	r3, [r3, #32]
 800301e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003032:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f023 0303 	bic.w	r3, r3, #3
 800303a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	4313      	orrs	r3, r2
 8003044:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	f023 0302 	bic.w	r3, r3, #2
 800304c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	4313      	orrs	r3, r2
 8003056:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a1c      	ldr	r2, [pc, #112]	; (80030cc <TIM_OC1_SetConfig+0xc8>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d10c      	bne.n	800307a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	f023 0308 	bic.w	r3, r3, #8
 8003066:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	697a      	ldr	r2, [r7, #20]
 800306e:	4313      	orrs	r3, r2
 8003070:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	f023 0304 	bic.w	r3, r3, #4
 8003078:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a13      	ldr	r2, [pc, #76]	; (80030cc <TIM_OC1_SetConfig+0xc8>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d111      	bne.n	80030a6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003088:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003090:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	693a      	ldr	r2, [r7, #16]
 8003098:	4313      	orrs	r3, r2
 800309a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	693a      	ldr	r2, [r7, #16]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	693a      	ldr	r2, [r7, #16]
 80030aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	685a      	ldr	r2, [r3, #4]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	697a      	ldr	r2, [r7, #20]
 80030be:	621a      	str	r2, [r3, #32]
}
 80030c0:	bf00      	nop
 80030c2:	371c      	adds	r7, #28
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr
 80030cc:	40010000 	.word	0x40010000

080030d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b087      	sub	sp, #28
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a1b      	ldr	r3, [r3, #32]
 80030de:	f023 0210 	bic.w	r2, r3, #16
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a1b      	ldr	r3, [r3, #32]
 80030ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003106:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	021b      	lsls	r3, r3, #8
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	4313      	orrs	r3, r2
 8003112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	f023 0320 	bic.w	r3, r3, #32
 800311a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	011b      	lsls	r3, r3, #4
 8003122:	697a      	ldr	r2, [r7, #20]
 8003124:	4313      	orrs	r3, r2
 8003126:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4a1e      	ldr	r2, [pc, #120]	; (80031a4 <TIM_OC2_SetConfig+0xd4>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d10d      	bne.n	800314c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003136:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	011b      	lsls	r3, r3, #4
 800313e:	697a      	ldr	r2, [r7, #20]
 8003140:	4313      	orrs	r3, r2
 8003142:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800314a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a15      	ldr	r2, [pc, #84]	; (80031a4 <TIM_OC2_SetConfig+0xd4>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d113      	bne.n	800317c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800315a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003162:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	695b      	ldr	r3, [r3, #20]
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	693a      	ldr	r2, [r7, #16]
 800316c:	4313      	orrs	r3, r2
 800316e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	699b      	ldr	r3, [r3, #24]
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	693a      	ldr	r2, [r7, #16]
 8003178:	4313      	orrs	r3, r2
 800317a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685a      	ldr	r2, [r3, #4]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	697a      	ldr	r2, [r7, #20]
 8003194:	621a      	str	r2, [r3, #32]
}
 8003196:	bf00      	nop
 8003198:	371c      	adds	r7, #28
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	40010000 	.word	0x40010000

080031a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b087      	sub	sp, #28
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a1b      	ldr	r3, [r3, #32]
 80031b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a1b      	ldr	r3, [r3, #32]
 80031c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	69db      	ldr	r3, [r3, #28]
 80031ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f023 0303 	bic.w	r3, r3, #3
 80031de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80031f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	021b      	lsls	r3, r3, #8
 80031f8:	697a      	ldr	r2, [r7, #20]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a1d      	ldr	r2, [pc, #116]	; (8003278 <TIM_OC3_SetConfig+0xd0>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d10d      	bne.n	8003222 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800320c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	021b      	lsls	r3, r3, #8
 8003214:	697a      	ldr	r2, [r7, #20]
 8003216:	4313      	orrs	r3, r2
 8003218:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003220:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a14      	ldr	r2, [pc, #80]	; (8003278 <TIM_OC3_SetConfig+0xd0>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d113      	bne.n	8003252 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003230:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003238:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	011b      	lsls	r3, r3, #4
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	4313      	orrs	r3, r2
 8003244:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	699b      	ldr	r3, [r3, #24]
 800324a:	011b      	lsls	r3, r3, #4
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	4313      	orrs	r3, r2
 8003250:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685a      	ldr	r2, [r3, #4]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	697a      	ldr	r2, [r7, #20]
 800326a:	621a      	str	r2, [r3, #32]
}
 800326c:	bf00      	nop
 800326e:	371c      	adds	r7, #28
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr
 8003278:	40010000 	.word	0x40010000

0800327c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800327c:	b480      	push	{r7}
 800327e:	b087      	sub	sp, #28
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a1b      	ldr	r3, [r3, #32]
 800328a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a1b      	ldr	r3, [r3, #32]
 8003296:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	69db      	ldr	r3, [r3, #28]
 80032a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	021b      	lsls	r3, r3, #8
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	4313      	orrs	r3, r2
 80032be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	031b      	lsls	r3, r3, #12
 80032ce:	693a      	ldr	r2, [r7, #16]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a10      	ldr	r2, [pc, #64]	; (8003318 <TIM_OC4_SetConfig+0x9c>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d109      	bne.n	80032f0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	695b      	ldr	r3, [r3, #20]
 80032e8:	019b      	lsls	r3, r3, #6
 80032ea:	697a      	ldr	r2, [r7, #20]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	697a      	ldr	r2, [r7, #20]
 80032f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	685a      	ldr	r2, [r3, #4]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	693a      	ldr	r2, [r7, #16]
 8003308:	621a      	str	r2, [r3, #32]
}
 800330a:	bf00      	nop
 800330c:	371c      	adds	r7, #28
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	40010000 	.word	0x40010000

0800331c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800331c:	b480      	push	{r7}
 800331e:	b087      	sub	sp, #28
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	f003 031f 	and.w	r3, r3, #31
 800332e:	2201      	movs	r2, #1
 8003330:	fa02 f303 	lsl.w	r3, r2, r3
 8003334:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6a1a      	ldr	r2, [r3, #32]
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	43db      	mvns	r3, r3
 800333e:	401a      	ands	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6a1a      	ldr	r2, [r3, #32]
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	f003 031f 	and.w	r3, r3, #31
 800334e:	6879      	ldr	r1, [r7, #4]
 8003350:	fa01 f303 	lsl.w	r3, r1, r3
 8003354:	431a      	orrs	r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	621a      	str	r2, [r3, #32]
}
 800335a:	bf00      	nop
 800335c:	371c      	adds	r7, #28
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
	...

08003368 <HAL_TIMEx_OCN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d109      	bne.n	800338c <HAL_TIMEx_OCN_Start+0x24>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800337e:	b2db      	uxtb	r3, r3
 8003380:	2b01      	cmp	r3, #1
 8003382:	bf14      	ite	ne
 8003384:	2301      	movne	r3, #1
 8003386:	2300      	moveq	r3, #0
 8003388:	b2db      	uxtb	r3, r3
 800338a:	e022      	b.n	80033d2 <HAL_TIMEx_OCN_Start+0x6a>
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	2b04      	cmp	r3, #4
 8003390:	d109      	bne.n	80033a6 <HAL_TIMEx_OCN_Start+0x3e>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b01      	cmp	r3, #1
 800339c:	bf14      	ite	ne
 800339e:	2301      	movne	r3, #1
 80033a0:	2300      	moveq	r3, #0
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	e015      	b.n	80033d2 <HAL_TIMEx_OCN_Start+0x6a>
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	2b08      	cmp	r3, #8
 80033aa:	d109      	bne.n	80033c0 <HAL_TIMEx_OCN_Start+0x58>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	bf14      	ite	ne
 80033b8:	2301      	movne	r3, #1
 80033ba:	2300      	moveq	r3, #0
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	e008      	b.n	80033d2 <HAL_TIMEx_OCN_Start+0x6a>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	bf14      	ite	ne
 80033cc:	2301      	movne	r3, #1
 80033ce:	2300      	moveq	r3, #0
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d001      	beq.n	80033da <HAL_TIMEx_OCN_Start+0x72>
  {
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e063      	b.n	80034a2 <HAL_TIMEx_OCN_Start+0x13a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d104      	bne.n	80033ea <HAL_TIMEx_OCN_Start+0x82>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2202      	movs	r2, #2
 80033e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033e8:	e013      	b.n	8003412 <HAL_TIMEx_OCN_Start+0xaa>
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	2b04      	cmp	r3, #4
 80033ee:	d104      	bne.n	80033fa <HAL_TIMEx_OCN_Start+0x92>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2202      	movs	r2, #2
 80033f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033f8:	e00b      	b.n	8003412 <HAL_TIMEx_OCN_Start+0xaa>
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	2b08      	cmp	r3, #8
 80033fe:	d104      	bne.n	800340a <HAL_TIMEx_OCN_Start+0xa2>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2202      	movs	r2, #2
 8003404:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003408:	e003      	b.n	8003412 <HAL_TIMEx_OCN_Start+0xaa>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2202      	movs	r2, #2
 800340e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2204      	movs	r2, #4
 8003418:	6839      	ldr	r1, [r7, #0]
 800341a:	4618      	mov	r0, r3
 800341c:	f000 fa26 	bl	800386c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800342e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a1d      	ldr	r2, [pc, #116]	; (80034ac <HAL_TIMEx_OCN_Start+0x144>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d018      	beq.n	800346c <HAL_TIMEx_OCN_Start+0x104>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003442:	d013      	beq.n	800346c <HAL_TIMEx_OCN_Start+0x104>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a19      	ldr	r2, [pc, #100]	; (80034b0 <HAL_TIMEx_OCN_Start+0x148>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d00e      	beq.n	800346c <HAL_TIMEx_OCN_Start+0x104>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a18      	ldr	r2, [pc, #96]	; (80034b4 <HAL_TIMEx_OCN_Start+0x14c>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d009      	beq.n	800346c <HAL_TIMEx_OCN_Start+0x104>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a16      	ldr	r2, [pc, #88]	; (80034b8 <HAL_TIMEx_OCN_Start+0x150>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d004      	beq.n	800346c <HAL_TIMEx_OCN_Start+0x104>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a15      	ldr	r2, [pc, #84]	; (80034bc <HAL_TIMEx_OCN_Start+0x154>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d111      	bne.n	8003490 <HAL_TIMEx_OCN_Start+0x128>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f003 0307 	and.w	r3, r3, #7
 8003476:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2b06      	cmp	r3, #6
 800347c:	d010      	beq.n	80034a0 <HAL_TIMEx_OCN_Start+0x138>
    {
      __HAL_TIM_ENABLE(htim);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f042 0201 	orr.w	r2, r2, #1
 800348c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800348e:	e007      	b.n	80034a0 <HAL_TIMEx_OCN_Start+0x138>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f042 0201 	orr.w	r2, r2, #1
 800349e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	40010000 	.word	0x40010000
 80034b0:	40000400 	.word	0x40000400
 80034b4:	40000800 	.word	0x40000800
 80034b8:	40000c00 	.word	0x40000c00
 80034bc:	40014000 	.word	0x40014000

080034c0 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d109      	bne.n	80034e4 <HAL_TIMEx_PWMN_Start+0x24>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	2b01      	cmp	r3, #1
 80034da:	bf14      	ite	ne
 80034dc:	2301      	movne	r3, #1
 80034de:	2300      	moveq	r3, #0
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	e022      	b.n	800352a <HAL_TIMEx_PWMN_Start+0x6a>
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	2b04      	cmp	r3, #4
 80034e8:	d109      	bne.n	80034fe <HAL_TIMEx_PWMN_Start+0x3e>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	bf14      	ite	ne
 80034f6:	2301      	movne	r3, #1
 80034f8:	2300      	moveq	r3, #0
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	e015      	b.n	800352a <HAL_TIMEx_PWMN_Start+0x6a>
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	2b08      	cmp	r3, #8
 8003502:	d109      	bne.n	8003518 <HAL_TIMEx_PWMN_Start+0x58>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800350a:	b2db      	uxtb	r3, r3
 800350c:	2b01      	cmp	r3, #1
 800350e:	bf14      	ite	ne
 8003510:	2301      	movne	r3, #1
 8003512:	2300      	moveq	r3, #0
 8003514:	b2db      	uxtb	r3, r3
 8003516:	e008      	b.n	800352a <HAL_TIMEx_PWMN_Start+0x6a>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800351e:	b2db      	uxtb	r3, r3
 8003520:	2b01      	cmp	r3, #1
 8003522:	bf14      	ite	ne
 8003524:	2301      	movne	r3, #1
 8003526:	2300      	moveq	r3, #0
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b00      	cmp	r3, #0
 800352c:	d001      	beq.n	8003532 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e063      	b.n	80035fa <HAL_TIMEx_PWMN_Start+0x13a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d104      	bne.n	8003542 <HAL_TIMEx_PWMN_Start+0x82>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2202      	movs	r2, #2
 800353c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003540:	e013      	b.n	800356a <HAL_TIMEx_PWMN_Start+0xaa>
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	2b04      	cmp	r3, #4
 8003546:	d104      	bne.n	8003552 <HAL_TIMEx_PWMN_Start+0x92>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2202      	movs	r2, #2
 800354c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003550:	e00b      	b.n	800356a <HAL_TIMEx_PWMN_Start+0xaa>
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	2b08      	cmp	r3, #8
 8003556:	d104      	bne.n	8003562 <HAL_TIMEx_PWMN_Start+0xa2>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2202      	movs	r2, #2
 800355c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003560:	e003      	b.n	800356a <HAL_TIMEx_PWMN_Start+0xaa>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2202      	movs	r2, #2
 8003566:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2204      	movs	r2, #4
 8003570:	6839      	ldr	r1, [r7, #0]
 8003572:	4618      	mov	r0, r3
 8003574:	f000 f97a 	bl	800386c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003586:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a1d      	ldr	r2, [pc, #116]	; (8003604 <HAL_TIMEx_PWMN_Start+0x144>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d018      	beq.n	80035c4 <HAL_TIMEx_PWMN_Start+0x104>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800359a:	d013      	beq.n	80035c4 <HAL_TIMEx_PWMN_Start+0x104>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a19      	ldr	r2, [pc, #100]	; (8003608 <HAL_TIMEx_PWMN_Start+0x148>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d00e      	beq.n	80035c4 <HAL_TIMEx_PWMN_Start+0x104>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a18      	ldr	r2, [pc, #96]	; (800360c <HAL_TIMEx_PWMN_Start+0x14c>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d009      	beq.n	80035c4 <HAL_TIMEx_PWMN_Start+0x104>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a16      	ldr	r2, [pc, #88]	; (8003610 <HAL_TIMEx_PWMN_Start+0x150>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d004      	beq.n	80035c4 <HAL_TIMEx_PWMN_Start+0x104>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a15      	ldr	r2, [pc, #84]	; (8003614 <HAL_TIMEx_PWMN_Start+0x154>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d111      	bne.n	80035e8 <HAL_TIMEx_PWMN_Start+0x128>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f003 0307 	and.w	r3, r3, #7
 80035ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2b06      	cmp	r3, #6
 80035d4:	d010      	beq.n	80035f8 <HAL_TIMEx_PWMN_Start+0x138>
    {
      __HAL_TIM_ENABLE(htim);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f042 0201 	orr.w	r2, r2, #1
 80035e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035e6:	e007      	b.n	80035f8 <HAL_TIMEx_PWMN_Start+0x138>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f042 0201 	orr.w	r2, r2, #1
 80035f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	40010000 	.word	0x40010000
 8003608:	40000400 	.word	0x40000400
 800360c:	40000800 	.word	0x40000800
 8003610:	40000c00 	.word	0x40000c00
 8003614:	40014000 	.word	0x40014000

08003618 <HAL_TIMEx_ConfigCommutEvent_IT>:
  *            @arg TIM_COMMUTATION_SOFTWARE:  Commutation source is set by software using the COMG bit
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigCommutEvent_IT(TIM_HandleTypeDef *htim, uint32_t  InputTrigger,
                                                 uint32_t  CommutationSource)
{
 8003618:	b480      	push	{r7}
 800361a:	b085      	sub	sp, #20
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_COMMUTATION_EVENT_INSTANCE(htim->Instance));
  assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));

  __HAL_LOCK(htim);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800362a:	2b01      	cmp	r3, #1
 800362c:	d101      	bne.n	8003632 <HAL_TIMEx_ConfigCommutEvent_IT+0x1a>
 800362e:	2302      	movs	r3, #2
 8003630:	e04c      	b.n	80036cc <HAL_TIMEx_ConfigCommutEvent_IT+0xb4>
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2201      	movs	r2, #1
 8003636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d008      	beq.n	8003652 <HAL_TIMEx_ConfigCommutEvent_IT+0x3a>
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	2b10      	cmp	r3, #16
 8003644:	d005      	beq.n	8003652 <HAL_TIMEx_ConfigCommutEvent_IT+0x3a>
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	2b20      	cmp	r3, #32
 800364a:	d002      	beq.n	8003652 <HAL_TIMEx_ConfigCommutEvent_IT+0x3a>
      (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	2b30      	cmp	r3, #48	; 0x30
 8003650:	d10f      	bne.n	8003672 <HAL_TIMEx_ConfigCommutEvent_IT+0x5a>
  {
    /* Select the Input trigger */
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	689a      	ldr	r2, [r3, #8]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003660:	609a      	str	r2, [r3, #8]
    htim->Instance->SMCR |= InputTrigger;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	6899      	ldr	r1, [r3, #8]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68ba      	ldr	r2, [r7, #8]
 800366e:	430a      	orrs	r2, r1
 8003670:	609a      	str	r2, [r3, #8]
  }

  /* Select the Capture Compare preload feature */
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	685a      	ldr	r2, [r3, #4]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f042 0201 	orr.w	r2, r2, #1
 8003680:	605a      	str	r2, [r3, #4]
  /* Select the Commutation event source */
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	685a      	ldr	r2, [r3, #4]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f022 0204 	bic.w	r2, r2, #4
 8003690:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= CommutationSource;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	6859      	ldr	r1, [r3, #4]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	430a      	orrs	r2, r1
 80036a0:	605a      	str	r2, [r3, #4]

  /* Disable Commutation DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_COM);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68da      	ldr	r2, [r3, #12]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036b0:	60da      	str	r2, [r3, #12]

  /* Enable the Commutation Interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_COM);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68da      	ldr	r2, [r3, #12]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f042 0220 	orr.w	r2, r2, #32
 80036c0:	60da      	str	r2, [r3, #12]

  __HAL_UNLOCK(htim);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036ca:	2300      	movs	r3, #0
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3714      	adds	r7, #20
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036d8:	b480      	push	{r7}
 80036da:	b085      	sub	sp, #20
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d101      	bne.n	80036f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036ec:	2302      	movs	r3, #2
 80036ee:	e050      	b.n	8003792 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2202      	movs	r2, #2
 80036fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003716:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68fa      	ldr	r2, [r7, #12]
 800371e:	4313      	orrs	r3, r2
 8003720:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a1c      	ldr	r2, [pc, #112]	; (80037a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d018      	beq.n	8003766 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800373c:	d013      	beq.n	8003766 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a18      	ldr	r2, [pc, #96]	; (80037a4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d00e      	beq.n	8003766 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a16      	ldr	r2, [pc, #88]	; (80037a8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d009      	beq.n	8003766 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a15      	ldr	r2, [pc, #84]	; (80037ac <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d004      	beq.n	8003766 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a13      	ldr	r2, [pc, #76]	; (80037b0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d10c      	bne.n	8003780 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800376c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	68ba      	ldr	r2, [r7, #8]
 8003774:	4313      	orrs	r3, r2
 8003776:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68ba      	ldr	r2, [r7, #8]
 800377e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3714      	adds	r7, #20
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	40010000 	.word	0x40010000
 80037a4:	40000400 	.word	0x40000400
 80037a8:	40000800 	.word	0x40000800
 80037ac:	40000c00 	.word	0x40000c00
 80037b0:	40014000 	.word	0x40014000

080037b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b085      	sub	sp, #20
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80037be:	2300      	movs	r3, #0
 80037c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d101      	bne.n	80037d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80037cc:	2302      	movs	r3, #2
 80037ce:	e03d      	b.n	800384c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	4313      	orrs	r3, r2
 8003800:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4313      	orrs	r3, r2
 800380e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	4313      	orrs	r3, r2
 800381c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	695b      	ldr	r3, [r3, #20]
 8003828:	4313      	orrs	r3, r2
 800382a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	69db      	ldr	r3, [r3, #28]
 8003836:	4313      	orrs	r3, r2
 8003838:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	3714      	adds	r7, #20
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003860:	bf00      	nop
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800386c:	b480      	push	{r7}
 800386e:	b087      	sub	sp, #28
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	f003 031f 	and.w	r3, r3, #31
 800387e:	2204      	movs	r2, #4
 8003880:	fa02 f303 	lsl.w	r3, r2, r3
 8003884:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6a1a      	ldr	r2, [r3, #32]
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	43db      	mvns	r3, r3
 800388e:	401a      	ands	r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6a1a      	ldr	r2, [r3, #32]
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	f003 031f 	and.w	r3, r3, #31
 800389e:	6879      	ldr	r1, [r7, #4]
 80038a0:	fa01 f303 	lsl.w	r3, r1, r3
 80038a4:	431a      	orrs	r2, r3
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	621a      	str	r2, [r3, #32]
}
 80038aa:	bf00      	nop
 80038ac:	371c      	adds	r7, #28
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr

080038b6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038b6:	b580      	push	{r7, lr}
 80038b8:	b082      	sub	sp, #8
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d101      	bne.n	80038c8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e03f      	b.n	8003948 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d106      	bne.n	80038e2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f7fd fb49 	bl	8000f74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2224      	movs	r2, #36	; 0x24
 80038e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68da      	ldr	r2, [r3, #12]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038f8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 f928 	bl	8003b50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	691a      	ldr	r2, [r3, #16]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800390e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	695a      	ldr	r2, [r3, #20]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800391e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68da      	ldr	r2, [r3, #12]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800392e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2220      	movs	r2, #32
 800393a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2220      	movs	r2, #32
 8003942:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003946:	2300      	movs	r3, #0
}
 8003948:	4618      	mov	r0, r3
 800394a:	3708      	adds	r7, #8
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b08a      	sub	sp, #40	; 0x28
 8003954:	af02      	add	r7, sp, #8
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	603b      	str	r3, [r7, #0]
 800395c:	4613      	mov	r3, r2
 800395e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003960:	2300      	movs	r3, #0
 8003962:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800396a:	b2db      	uxtb	r3, r3
 800396c:	2b20      	cmp	r3, #32
 800396e:	d17c      	bne.n	8003a6a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d002      	beq.n	800397c <HAL_UART_Transmit+0x2c>
 8003976:	88fb      	ldrh	r3, [r7, #6]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d101      	bne.n	8003980 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e075      	b.n	8003a6c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003986:	2b01      	cmp	r3, #1
 8003988:	d101      	bne.n	800398e <HAL_UART_Transmit+0x3e>
 800398a:	2302      	movs	r3, #2
 800398c:	e06e      	b.n	8003a6c <HAL_UART_Transmit+0x11c>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2201      	movs	r2, #1
 8003992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2221      	movs	r2, #33	; 0x21
 80039a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039a4:	f7fd fca8 	bl	80012f8 <HAL_GetTick>
 80039a8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	88fa      	ldrh	r2, [r7, #6]
 80039ae:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	88fa      	ldrh	r2, [r7, #6]
 80039b4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039be:	d108      	bne.n	80039d2 <HAL_UART_Transmit+0x82>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d104      	bne.n	80039d2 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80039c8:	2300      	movs	r3, #0
 80039ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	61bb      	str	r3, [r7, #24]
 80039d0:	e003      	b.n	80039da <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039d6:	2300      	movs	r3, #0
 80039d8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80039e2:	e02a      	b.n	8003a3a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	9300      	str	r3, [sp, #0]
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	2200      	movs	r2, #0
 80039ec:	2180      	movs	r1, #128	; 0x80
 80039ee:	68f8      	ldr	r0, [r7, #12]
 80039f0:	f000 f840 	bl	8003a74 <UART_WaitOnFlagUntilTimeout>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d001      	beq.n	80039fe <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e036      	b.n	8003a6c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d10b      	bne.n	8003a1c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	881b      	ldrh	r3, [r3, #0]
 8003a08:	461a      	mov	r2, r3
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a12:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	3302      	adds	r3, #2
 8003a18:	61bb      	str	r3, [r7, #24]
 8003a1a:	e007      	b.n	8003a2c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	781a      	ldrb	r2, [r3, #0]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	3301      	adds	r3, #1
 8003a2a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	3b01      	subs	r3, #1
 8003a34:	b29a      	uxth	r2, r3
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d1cf      	bne.n	80039e4 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	9300      	str	r3, [sp, #0]
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	2140      	movs	r1, #64	; 0x40
 8003a4e:	68f8      	ldr	r0, [r7, #12]
 8003a50:	f000 f810 	bl	8003a74 <UART_WaitOnFlagUntilTimeout>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d001      	beq.n	8003a5e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e006      	b.n	8003a6c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2220      	movs	r2, #32
 8003a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003a66:	2300      	movs	r3, #0
 8003a68:	e000      	b.n	8003a6c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003a6a:	2302      	movs	r3, #2
  }
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3720      	adds	r7, #32
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b090      	sub	sp, #64	; 0x40
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	603b      	str	r3, [r7, #0]
 8003a80:	4613      	mov	r3, r2
 8003a82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a84:	e050      	b.n	8003b28 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a8c:	d04c      	beq.n	8003b28 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003a8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d007      	beq.n	8003aa4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a94:	f7fd fc30 	bl	80012f8 <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d241      	bcs.n	8003b28 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	330c      	adds	r3, #12
 8003aaa:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aae:	e853 3f00 	ldrex	r3, [r3]
 8003ab2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003aba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	330c      	adds	r3, #12
 8003ac2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ac4:	637a      	str	r2, [r7, #52]	; 0x34
 8003ac6:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003aca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003acc:	e841 2300 	strex	r3, r2, [r1]
 8003ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d1e5      	bne.n	8003aa4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	3314      	adds	r3, #20
 8003ade:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	e853 3f00 	ldrex	r3, [r3]
 8003ae6:	613b      	str	r3, [r7, #16]
   return(result);
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	f023 0301 	bic.w	r3, r3, #1
 8003aee:	63bb      	str	r3, [r7, #56]	; 0x38
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	3314      	adds	r3, #20
 8003af6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003af8:	623a      	str	r2, [r7, #32]
 8003afa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003afc:	69f9      	ldr	r1, [r7, #28]
 8003afe:	6a3a      	ldr	r2, [r7, #32]
 8003b00:	e841 2300 	strex	r3, r2, [r1]
 8003b04:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1e5      	bne.n	8003ad8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2220      	movs	r2, #32
 8003b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2220      	movs	r2, #32
 8003b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e00f      	b.n	8003b48 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	4013      	ands	r3, r2
 8003b32:	68ba      	ldr	r2, [r7, #8]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	bf0c      	ite	eq
 8003b38:	2301      	moveq	r3, #1
 8003b3a:	2300      	movne	r3, #0
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	461a      	mov	r2, r3
 8003b40:	79fb      	ldrb	r3, [r7, #7]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d09f      	beq.n	8003a86 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b46:	2300      	movs	r3, #0
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3740      	adds	r7, #64	; 0x40
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b54:	b0c0      	sub	sp, #256	; 0x100
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b6c:	68d9      	ldr	r1, [r3, #12]
 8003b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	ea40 0301 	orr.w	r3, r0, r1
 8003b78:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b7e:	689a      	ldr	r2, [r3, #8]
 8003b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	431a      	orrs	r2, r3
 8003b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	431a      	orrs	r2, r3
 8003b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b94:	69db      	ldr	r3, [r3, #28]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003ba8:	f021 010c 	bic.w	r1, r1, #12
 8003bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003bb6:	430b      	orrs	r3, r1
 8003bb8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	695b      	ldr	r3, [r3, #20]
 8003bc2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003bc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bca:	6999      	ldr	r1, [r3, #24]
 8003bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	ea40 0301 	orr.w	r3, r0, r1
 8003bd6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	4b8f      	ldr	r3, [pc, #572]	; (8003e1c <UART_SetConfig+0x2cc>)
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d005      	beq.n	8003bf0 <UART_SetConfig+0xa0>
 8003be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	4b8d      	ldr	r3, [pc, #564]	; (8003e20 <UART_SetConfig+0x2d0>)
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d104      	bne.n	8003bfa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003bf0:	f7fe fd0e 	bl	8002610 <HAL_RCC_GetPCLK2Freq>
 8003bf4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003bf8:	e003      	b.n	8003c02 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003bfa:	f7fe fcf5 	bl	80025e8 <HAL_RCC_GetPCLK1Freq>
 8003bfe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c06:	69db      	ldr	r3, [r3, #28]
 8003c08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c0c:	f040 810c 	bne.w	8003e28 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c14:	2200      	movs	r2, #0
 8003c16:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003c1a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003c1e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003c22:	4622      	mov	r2, r4
 8003c24:	462b      	mov	r3, r5
 8003c26:	1891      	adds	r1, r2, r2
 8003c28:	65b9      	str	r1, [r7, #88]	; 0x58
 8003c2a:	415b      	adcs	r3, r3
 8003c2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c2e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003c32:	4621      	mov	r1, r4
 8003c34:	eb12 0801 	adds.w	r8, r2, r1
 8003c38:	4629      	mov	r1, r5
 8003c3a:	eb43 0901 	adc.w	r9, r3, r1
 8003c3e:	f04f 0200 	mov.w	r2, #0
 8003c42:	f04f 0300 	mov.w	r3, #0
 8003c46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c52:	4690      	mov	r8, r2
 8003c54:	4699      	mov	r9, r3
 8003c56:	4623      	mov	r3, r4
 8003c58:	eb18 0303 	adds.w	r3, r8, r3
 8003c5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003c60:	462b      	mov	r3, r5
 8003c62:	eb49 0303 	adc.w	r3, r9, r3
 8003c66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003c76:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003c7a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003c7e:	460b      	mov	r3, r1
 8003c80:	18db      	adds	r3, r3, r3
 8003c82:	653b      	str	r3, [r7, #80]	; 0x50
 8003c84:	4613      	mov	r3, r2
 8003c86:	eb42 0303 	adc.w	r3, r2, r3
 8003c8a:	657b      	str	r3, [r7, #84]	; 0x54
 8003c8c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003c90:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003c94:	f7fc faa0 	bl	80001d8 <__aeabi_uldivmod>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	4b61      	ldr	r3, [pc, #388]	; (8003e24 <UART_SetConfig+0x2d4>)
 8003c9e:	fba3 2302 	umull	r2, r3, r3, r2
 8003ca2:	095b      	lsrs	r3, r3, #5
 8003ca4:	011c      	lsls	r4, r3, #4
 8003ca6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003caa:	2200      	movs	r2, #0
 8003cac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003cb0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003cb4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003cb8:	4642      	mov	r2, r8
 8003cba:	464b      	mov	r3, r9
 8003cbc:	1891      	adds	r1, r2, r2
 8003cbe:	64b9      	str	r1, [r7, #72]	; 0x48
 8003cc0:	415b      	adcs	r3, r3
 8003cc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cc4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003cc8:	4641      	mov	r1, r8
 8003cca:	eb12 0a01 	adds.w	sl, r2, r1
 8003cce:	4649      	mov	r1, r9
 8003cd0:	eb43 0b01 	adc.w	fp, r3, r1
 8003cd4:	f04f 0200 	mov.w	r2, #0
 8003cd8:	f04f 0300 	mov.w	r3, #0
 8003cdc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ce0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ce4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ce8:	4692      	mov	sl, r2
 8003cea:	469b      	mov	fp, r3
 8003cec:	4643      	mov	r3, r8
 8003cee:	eb1a 0303 	adds.w	r3, sl, r3
 8003cf2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003cf6:	464b      	mov	r3, r9
 8003cf8:	eb4b 0303 	adc.w	r3, fp, r3
 8003cfc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d0c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003d10:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003d14:	460b      	mov	r3, r1
 8003d16:	18db      	adds	r3, r3, r3
 8003d18:	643b      	str	r3, [r7, #64]	; 0x40
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	eb42 0303 	adc.w	r3, r2, r3
 8003d20:	647b      	str	r3, [r7, #68]	; 0x44
 8003d22:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003d26:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003d2a:	f7fc fa55 	bl	80001d8 <__aeabi_uldivmod>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	460b      	mov	r3, r1
 8003d32:	4611      	mov	r1, r2
 8003d34:	4b3b      	ldr	r3, [pc, #236]	; (8003e24 <UART_SetConfig+0x2d4>)
 8003d36:	fba3 2301 	umull	r2, r3, r3, r1
 8003d3a:	095b      	lsrs	r3, r3, #5
 8003d3c:	2264      	movs	r2, #100	; 0x64
 8003d3e:	fb02 f303 	mul.w	r3, r2, r3
 8003d42:	1acb      	subs	r3, r1, r3
 8003d44:	00db      	lsls	r3, r3, #3
 8003d46:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003d4a:	4b36      	ldr	r3, [pc, #216]	; (8003e24 <UART_SetConfig+0x2d4>)
 8003d4c:	fba3 2302 	umull	r2, r3, r3, r2
 8003d50:	095b      	lsrs	r3, r3, #5
 8003d52:	005b      	lsls	r3, r3, #1
 8003d54:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d58:	441c      	add	r4, r3
 8003d5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d64:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003d68:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003d6c:	4642      	mov	r2, r8
 8003d6e:	464b      	mov	r3, r9
 8003d70:	1891      	adds	r1, r2, r2
 8003d72:	63b9      	str	r1, [r7, #56]	; 0x38
 8003d74:	415b      	adcs	r3, r3
 8003d76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d78:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003d7c:	4641      	mov	r1, r8
 8003d7e:	1851      	adds	r1, r2, r1
 8003d80:	6339      	str	r1, [r7, #48]	; 0x30
 8003d82:	4649      	mov	r1, r9
 8003d84:	414b      	adcs	r3, r1
 8003d86:	637b      	str	r3, [r7, #52]	; 0x34
 8003d88:	f04f 0200 	mov.w	r2, #0
 8003d8c:	f04f 0300 	mov.w	r3, #0
 8003d90:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003d94:	4659      	mov	r1, fp
 8003d96:	00cb      	lsls	r3, r1, #3
 8003d98:	4651      	mov	r1, sl
 8003d9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d9e:	4651      	mov	r1, sl
 8003da0:	00ca      	lsls	r2, r1, #3
 8003da2:	4610      	mov	r0, r2
 8003da4:	4619      	mov	r1, r3
 8003da6:	4603      	mov	r3, r0
 8003da8:	4642      	mov	r2, r8
 8003daa:	189b      	adds	r3, r3, r2
 8003dac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003db0:	464b      	mov	r3, r9
 8003db2:	460a      	mov	r2, r1
 8003db4:	eb42 0303 	adc.w	r3, r2, r3
 8003db8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003dc8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003dcc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	18db      	adds	r3, r3, r3
 8003dd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	eb42 0303 	adc.w	r3, r2, r3
 8003ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dde:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003de2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003de6:	f7fc f9f7 	bl	80001d8 <__aeabi_uldivmod>
 8003dea:	4602      	mov	r2, r0
 8003dec:	460b      	mov	r3, r1
 8003dee:	4b0d      	ldr	r3, [pc, #52]	; (8003e24 <UART_SetConfig+0x2d4>)
 8003df0:	fba3 1302 	umull	r1, r3, r3, r2
 8003df4:	095b      	lsrs	r3, r3, #5
 8003df6:	2164      	movs	r1, #100	; 0x64
 8003df8:	fb01 f303 	mul.w	r3, r1, r3
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	00db      	lsls	r3, r3, #3
 8003e00:	3332      	adds	r3, #50	; 0x32
 8003e02:	4a08      	ldr	r2, [pc, #32]	; (8003e24 <UART_SetConfig+0x2d4>)
 8003e04:	fba2 2303 	umull	r2, r3, r2, r3
 8003e08:	095b      	lsrs	r3, r3, #5
 8003e0a:	f003 0207 	and.w	r2, r3, #7
 8003e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4422      	add	r2, r4
 8003e16:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003e18:	e105      	b.n	8004026 <UART_SetConfig+0x4d6>
 8003e1a:	bf00      	nop
 8003e1c:	40011000 	.word	0x40011000
 8003e20:	40011400 	.word	0x40011400
 8003e24:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003e32:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003e36:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003e3a:	4642      	mov	r2, r8
 8003e3c:	464b      	mov	r3, r9
 8003e3e:	1891      	adds	r1, r2, r2
 8003e40:	6239      	str	r1, [r7, #32]
 8003e42:	415b      	adcs	r3, r3
 8003e44:	627b      	str	r3, [r7, #36]	; 0x24
 8003e46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e4a:	4641      	mov	r1, r8
 8003e4c:	1854      	adds	r4, r2, r1
 8003e4e:	4649      	mov	r1, r9
 8003e50:	eb43 0501 	adc.w	r5, r3, r1
 8003e54:	f04f 0200 	mov.w	r2, #0
 8003e58:	f04f 0300 	mov.w	r3, #0
 8003e5c:	00eb      	lsls	r3, r5, #3
 8003e5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e62:	00e2      	lsls	r2, r4, #3
 8003e64:	4614      	mov	r4, r2
 8003e66:	461d      	mov	r5, r3
 8003e68:	4643      	mov	r3, r8
 8003e6a:	18e3      	adds	r3, r4, r3
 8003e6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003e70:	464b      	mov	r3, r9
 8003e72:	eb45 0303 	adc.w	r3, r5, r3
 8003e76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003e86:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003e8a:	f04f 0200 	mov.w	r2, #0
 8003e8e:	f04f 0300 	mov.w	r3, #0
 8003e92:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003e96:	4629      	mov	r1, r5
 8003e98:	008b      	lsls	r3, r1, #2
 8003e9a:	4621      	mov	r1, r4
 8003e9c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ea0:	4621      	mov	r1, r4
 8003ea2:	008a      	lsls	r2, r1, #2
 8003ea4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003ea8:	f7fc f996 	bl	80001d8 <__aeabi_uldivmod>
 8003eac:	4602      	mov	r2, r0
 8003eae:	460b      	mov	r3, r1
 8003eb0:	4b60      	ldr	r3, [pc, #384]	; (8004034 <UART_SetConfig+0x4e4>)
 8003eb2:	fba3 2302 	umull	r2, r3, r3, r2
 8003eb6:	095b      	lsrs	r3, r3, #5
 8003eb8:	011c      	lsls	r4, r3, #4
 8003eba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003ec4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003ec8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003ecc:	4642      	mov	r2, r8
 8003ece:	464b      	mov	r3, r9
 8003ed0:	1891      	adds	r1, r2, r2
 8003ed2:	61b9      	str	r1, [r7, #24]
 8003ed4:	415b      	adcs	r3, r3
 8003ed6:	61fb      	str	r3, [r7, #28]
 8003ed8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003edc:	4641      	mov	r1, r8
 8003ede:	1851      	adds	r1, r2, r1
 8003ee0:	6139      	str	r1, [r7, #16]
 8003ee2:	4649      	mov	r1, r9
 8003ee4:	414b      	adcs	r3, r1
 8003ee6:	617b      	str	r3, [r7, #20]
 8003ee8:	f04f 0200 	mov.w	r2, #0
 8003eec:	f04f 0300 	mov.w	r3, #0
 8003ef0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ef4:	4659      	mov	r1, fp
 8003ef6:	00cb      	lsls	r3, r1, #3
 8003ef8:	4651      	mov	r1, sl
 8003efa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003efe:	4651      	mov	r1, sl
 8003f00:	00ca      	lsls	r2, r1, #3
 8003f02:	4610      	mov	r0, r2
 8003f04:	4619      	mov	r1, r3
 8003f06:	4603      	mov	r3, r0
 8003f08:	4642      	mov	r2, r8
 8003f0a:	189b      	adds	r3, r3, r2
 8003f0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f10:	464b      	mov	r3, r9
 8003f12:	460a      	mov	r2, r1
 8003f14:	eb42 0303 	adc.w	r3, r2, r3
 8003f18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f26:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003f28:	f04f 0200 	mov.w	r2, #0
 8003f2c:	f04f 0300 	mov.w	r3, #0
 8003f30:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003f34:	4649      	mov	r1, r9
 8003f36:	008b      	lsls	r3, r1, #2
 8003f38:	4641      	mov	r1, r8
 8003f3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f3e:	4641      	mov	r1, r8
 8003f40:	008a      	lsls	r2, r1, #2
 8003f42:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003f46:	f7fc f947 	bl	80001d8 <__aeabi_uldivmod>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	4b39      	ldr	r3, [pc, #228]	; (8004034 <UART_SetConfig+0x4e4>)
 8003f50:	fba3 1302 	umull	r1, r3, r3, r2
 8003f54:	095b      	lsrs	r3, r3, #5
 8003f56:	2164      	movs	r1, #100	; 0x64
 8003f58:	fb01 f303 	mul.w	r3, r1, r3
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	011b      	lsls	r3, r3, #4
 8003f60:	3332      	adds	r3, #50	; 0x32
 8003f62:	4a34      	ldr	r2, [pc, #208]	; (8004034 <UART_SetConfig+0x4e4>)
 8003f64:	fba2 2303 	umull	r2, r3, r2, r3
 8003f68:	095b      	lsrs	r3, r3, #5
 8003f6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f6e:	441c      	add	r4, r3
 8003f70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f74:	2200      	movs	r2, #0
 8003f76:	673b      	str	r3, [r7, #112]	; 0x70
 8003f78:	677a      	str	r2, [r7, #116]	; 0x74
 8003f7a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003f7e:	4642      	mov	r2, r8
 8003f80:	464b      	mov	r3, r9
 8003f82:	1891      	adds	r1, r2, r2
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	415b      	adcs	r3, r3
 8003f88:	60fb      	str	r3, [r7, #12]
 8003f8a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f8e:	4641      	mov	r1, r8
 8003f90:	1851      	adds	r1, r2, r1
 8003f92:	6039      	str	r1, [r7, #0]
 8003f94:	4649      	mov	r1, r9
 8003f96:	414b      	adcs	r3, r1
 8003f98:	607b      	str	r3, [r7, #4]
 8003f9a:	f04f 0200 	mov.w	r2, #0
 8003f9e:	f04f 0300 	mov.w	r3, #0
 8003fa2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003fa6:	4659      	mov	r1, fp
 8003fa8:	00cb      	lsls	r3, r1, #3
 8003faa:	4651      	mov	r1, sl
 8003fac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fb0:	4651      	mov	r1, sl
 8003fb2:	00ca      	lsls	r2, r1, #3
 8003fb4:	4610      	mov	r0, r2
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	4603      	mov	r3, r0
 8003fba:	4642      	mov	r2, r8
 8003fbc:	189b      	adds	r3, r3, r2
 8003fbe:	66bb      	str	r3, [r7, #104]	; 0x68
 8003fc0:	464b      	mov	r3, r9
 8003fc2:	460a      	mov	r2, r1
 8003fc4:	eb42 0303 	adc.w	r3, r2, r3
 8003fc8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	663b      	str	r3, [r7, #96]	; 0x60
 8003fd4:	667a      	str	r2, [r7, #100]	; 0x64
 8003fd6:	f04f 0200 	mov.w	r2, #0
 8003fda:	f04f 0300 	mov.w	r3, #0
 8003fde:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003fe2:	4649      	mov	r1, r9
 8003fe4:	008b      	lsls	r3, r1, #2
 8003fe6:	4641      	mov	r1, r8
 8003fe8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fec:	4641      	mov	r1, r8
 8003fee:	008a      	lsls	r2, r1, #2
 8003ff0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003ff4:	f7fc f8f0 	bl	80001d8 <__aeabi_uldivmod>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	4b0d      	ldr	r3, [pc, #52]	; (8004034 <UART_SetConfig+0x4e4>)
 8003ffe:	fba3 1302 	umull	r1, r3, r3, r2
 8004002:	095b      	lsrs	r3, r3, #5
 8004004:	2164      	movs	r1, #100	; 0x64
 8004006:	fb01 f303 	mul.w	r3, r1, r3
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	011b      	lsls	r3, r3, #4
 800400e:	3332      	adds	r3, #50	; 0x32
 8004010:	4a08      	ldr	r2, [pc, #32]	; (8004034 <UART_SetConfig+0x4e4>)
 8004012:	fba2 2303 	umull	r2, r3, r2, r3
 8004016:	095b      	lsrs	r3, r3, #5
 8004018:	f003 020f 	and.w	r2, r3, #15
 800401c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4422      	add	r2, r4
 8004024:	609a      	str	r2, [r3, #8]
}
 8004026:	bf00      	nop
 8004028:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800402c:	46bd      	mov	sp, r7
 800402e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004032:	bf00      	nop
 8004034:	51eb851f 	.word	0x51eb851f

08004038 <__errno>:
 8004038:	4b01      	ldr	r3, [pc, #4]	; (8004040 <__errno+0x8>)
 800403a:	6818      	ldr	r0, [r3, #0]
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	2000000c 	.word	0x2000000c

08004044 <__libc_init_array>:
 8004044:	b570      	push	{r4, r5, r6, lr}
 8004046:	4d0d      	ldr	r5, [pc, #52]	; (800407c <__libc_init_array+0x38>)
 8004048:	4c0d      	ldr	r4, [pc, #52]	; (8004080 <__libc_init_array+0x3c>)
 800404a:	1b64      	subs	r4, r4, r5
 800404c:	10a4      	asrs	r4, r4, #2
 800404e:	2600      	movs	r6, #0
 8004050:	42a6      	cmp	r6, r4
 8004052:	d109      	bne.n	8004068 <__libc_init_array+0x24>
 8004054:	4d0b      	ldr	r5, [pc, #44]	; (8004084 <__libc_init_array+0x40>)
 8004056:	4c0c      	ldr	r4, [pc, #48]	; (8004088 <__libc_init_array+0x44>)
 8004058:	f000 fd1e 	bl	8004a98 <_init>
 800405c:	1b64      	subs	r4, r4, r5
 800405e:	10a4      	asrs	r4, r4, #2
 8004060:	2600      	movs	r6, #0
 8004062:	42a6      	cmp	r6, r4
 8004064:	d105      	bne.n	8004072 <__libc_init_array+0x2e>
 8004066:	bd70      	pop	{r4, r5, r6, pc}
 8004068:	f855 3b04 	ldr.w	r3, [r5], #4
 800406c:	4798      	blx	r3
 800406e:	3601      	adds	r6, #1
 8004070:	e7ee      	b.n	8004050 <__libc_init_array+0xc>
 8004072:	f855 3b04 	ldr.w	r3, [r5], #4
 8004076:	4798      	blx	r3
 8004078:	3601      	adds	r6, #1
 800407a:	e7f2      	b.n	8004062 <__libc_init_array+0x1e>
 800407c:	08004b48 	.word	0x08004b48
 8004080:	08004b48 	.word	0x08004b48
 8004084:	08004b48 	.word	0x08004b48
 8004088:	08004b4c 	.word	0x08004b4c

0800408c <memset>:
 800408c:	4402      	add	r2, r0
 800408e:	4603      	mov	r3, r0
 8004090:	4293      	cmp	r3, r2
 8004092:	d100      	bne.n	8004096 <memset+0xa>
 8004094:	4770      	bx	lr
 8004096:	f803 1b01 	strb.w	r1, [r3], #1
 800409a:	e7f9      	b.n	8004090 <memset+0x4>

0800409c <_puts_r>:
 800409c:	b570      	push	{r4, r5, r6, lr}
 800409e:	460e      	mov	r6, r1
 80040a0:	4605      	mov	r5, r0
 80040a2:	b118      	cbz	r0, 80040ac <_puts_r+0x10>
 80040a4:	6983      	ldr	r3, [r0, #24]
 80040a6:	b90b      	cbnz	r3, 80040ac <_puts_r+0x10>
 80040a8:	f000 fa48 	bl	800453c <__sinit>
 80040ac:	69ab      	ldr	r3, [r5, #24]
 80040ae:	68ac      	ldr	r4, [r5, #8]
 80040b0:	b913      	cbnz	r3, 80040b8 <_puts_r+0x1c>
 80040b2:	4628      	mov	r0, r5
 80040b4:	f000 fa42 	bl	800453c <__sinit>
 80040b8:	4b2c      	ldr	r3, [pc, #176]	; (800416c <_puts_r+0xd0>)
 80040ba:	429c      	cmp	r4, r3
 80040bc:	d120      	bne.n	8004100 <_puts_r+0x64>
 80040be:	686c      	ldr	r4, [r5, #4]
 80040c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80040c2:	07db      	lsls	r3, r3, #31
 80040c4:	d405      	bmi.n	80040d2 <_puts_r+0x36>
 80040c6:	89a3      	ldrh	r3, [r4, #12]
 80040c8:	0598      	lsls	r0, r3, #22
 80040ca:	d402      	bmi.n	80040d2 <_puts_r+0x36>
 80040cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80040ce:	f000 fad3 	bl	8004678 <__retarget_lock_acquire_recursive>
 80040d2:	89a3      	ldrh	r3, [r4, #12]
 80040d4:	0719      	lsls	r1, r3, #28
 80040d6:	d51d      	bpl.n	8004114 <_puts_r+0x78>
 80040d8:	6923      	ldr	r3, [r4, #16]
 80040da:	b1db      	cbz	r3, 8004114 <_puts_r+0x78>
 80040dc:	3e01      	subs	r6, #1
 80040de:	68a3      	ldr	r3, [r4, #8]
 80040e0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80040e4:	3b01      	subs	r3, #1
 80040e6:	60a3      	str	r3, [r4, #8]
 80040e8:	bb39      	cbnz	r1, 800413a <_puts_r+0x9e>
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	da38      	bge.n	8004160 <_puts_r+0xc4>
 80040ee:	4622      	mov	r2, r4
 80040f0:	210a      	movs	r1, #10
 80040f2:	4628      	mov	r0, r5
 80040f4:	f000 f848 	bl	8004188 <__swbuf_r>
 80040f8:	3001      	adds	r0, #1
 80040fa:	d011      	beq.n	8004120 <_puts_r+0x84>
 80040fc:	250a      	movs	r5, #10
 80040fe:	e011      	b.n	8004124 <_puts_r+0x88>
 8004100:	4b1b      	ldr	r3, [pc, #108]	; (8004170 <_puts_r+0xd4>)
 8004102:	429c      	cmp	r4, r3
 8004104:	d101      	bne.n	800410a <_puts_r+0x6e>
 8004106:	68ac      	ldr	r4, [r5, #8]
 8004108:	e7da      	b.n	80040c0 <_puts_r+0x24>
 800410a:	4b1a      	ldr	r3, [pc, #104]	; (8004174 <_puts_r+0xd8>)
 800410c:	429c      	cmp	r4, r3
 800410e:	bf08      	it	eq
 8004110:	68ec      	ldreq	r4, [r5, #12]
 8004112:	e7d5      	b.n	80040c0 <_puts_r+0x24>
 8004114:	4621      	mov	r1, r4
 8004116:	4628      	mov	r0, r5
 8004118:	f000 f888 	bl	800422c <__swsetup_r>
 800411c:	2800      	cmp	r0, #0
 800411e:	d0dd      	beq.n	80040dc <_puts_r+0x40>
 8004120:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004124:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004126:	07da      	lsls	r2, r3, #31
 8004128:	d405      	bmi.n	8004136 <_puts_r+0x9a>
 800412a:	89a3      	ldrh	r3, [r4, #12]
 800412c:	059b      	lsls	r3, r3, #22
 800412e:	d402      	bmi.n	8004136 <_puts_r+0x9a>
 8004130:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004132:	f000 faa2 	bl	800467a <__retarget_lock_release_recursive>
 8004136:	4628      	mov	r0, r5
 8004138:	bd70      	pop	{r4, r5, r6, pc}
 800413a:	2b00      	cmp	r3, #0
 800413c:	da04      	bge.n	8004148 <_puts_r+0xac>
 800413e:	69a2      	ldr	r2, [r4, #24]
 8004140:	429a      	cmp	r2, r3
 8004142:	dc06      	bgt.n	8004152 <_puts_r+0xb6>
 8004144:	290a      	cmp	r1, #10
 8004146:	d004      	beq.n	8004152 <_puts_r+0xb6>
 8004148:	6823      	ldr	r3, [r4, #0]
 800414a:	1c5a      	adds	r2, r3, #1
 800414c:	6022      	str	r2, [r4, #0]
 800414e:	7019      	strb	r1, [r3, #0]
 8004150:	e7c5      	b.n	80040de <_puts_r+0x42>
 8004152:	4622      	mov	r2, r4
 8004154:	4628      	mov	r0, r5
 8004156:	f000 f817 	bl	8004188 <__swbuf_r>
 800415a:	3001      	adds	r0, #1
 800415c:	d1bf      	bne.n	80040de <_puts_r+0x42>
 800415e:	e7df      	b.n	8004120 <_puts_r+0x84>
 8004160:	6823      	ldr	r3, [r4, #0]
 8004162:	250a      	movs	r5, #10
 8004164:	1c5a      	adds	r2, r3, #1
 8004166:	6022      	str	r2, [r4, #0]
 8004168:	701d      	strb	r5, [r3, #0]
 800416a:	e7db      	b.n	8004124 <_puts_r+0x88>
 800416c:	08004b00 	.word	0x08004b00
 8004170:	08004b20 	.word	0x08004b20
 8004174:	08004ae0 	.word	0x08004ae0

08004178 <puts>:
 8004178:	4b02      	ldr	r3, [pc, #8]	; (8004184 <puts+0xc>)
 800417a:	4601      	mov	r1, r0
 800417c:	6818      	ldr	r0, [r3, #0]
 800417e:	f7ff bf8d 	b.w	800409c <_puts_r>
 8004182:	bf00      	nop
 8004184:	2000000c 	.word	0x2000000c

08004188 <__swbuf_r>:
 8004188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800418a:	460e      	mov	r6, r1
 800418c:	4614      	mov	r4, r2
 800418e:	4605      	mov	r5, r0
 8004190:	b118      	cbz	r0, 800419a <__swbuf_r+0x12>
 8004192:	6983      	ldr	r3, [r0, #24]
 8004194:	b90b      	cbnz	r3, 800419a <__swbuf_r+0x12>
 8004196:	f000 f9d1 	bl	800453c <__sinit>
 800419a:	4b21      	ldr	r3, [pc, #132]	; (8004220 <__swbuf_r+0x98>)
 800419c:	429c      	cmp	r4, r3
 800419e:	d12b      	bne.n	80041f8 <__swbuf_r+0x70>
 80041a0:	686c      	ldr	r4, [r5, #4]
 80041a2:	69a3      	ldr	r3, [r4, #24]
 80041a4:	60a3      	str	r3, [r4, #8]
 80041a6:	89a3      	ldrh	r3, [r4, #12]
 80041a8:	071a      	lsls	r2, r3, #28
 80041aa:	d52f      	bpl.n	800420c <__swbuf_r+0x84>
 80041ac:	6923      	ldr	r3, [r4, #16]
 80041ae:	b36b      	cbz	r3, 800420c <__swbuf_r+0x84>
 80041b0:	6923      	ldr	r3, [r4, #16]
 80041b2:	6820      	ldr	r0, [r4, #0]
 80041b4:	1ac0      	subs	r0, r0, r3
 80041b6:	6963      	ldr	r3, [r4, #20]
 80041b8:	b2f6      	uxtb	r6, r6
 80041ba:	4283      	cmp	r3, r0
 80041bc:	4637      	mov	r7, r6
 80041be:	dc04      	bgt.n	80041ca <__swbuf_r+0x42>
 80041c0:	4621      	mov	r1, r4
 80041c2:	4628      	mov	r0, r5
 80041c4:	f000 f926 	bl	8004414 <_fflush_r>
 80041c8:	bb30      	cbnz	r0, 8004218 <__swbuf_r+0x90>
 80041ca:	68a3      	ldr	r3, [r4, #8]
 80041cc:	3b01      	subs	r3, #1
 80041ce:	60a3      	str	r3, [r4, #8]
 80041d0:	6823      	ldr	r3, [r4, #0]
 80041d2:	1c5a      	adds	r2, r3, #1
 80041d4:	6022      	str	r2, [r4, #0]
 80041d6:	701e      	strb	r6, [r3, #0]
 80041d8:	6963      	ldr	r3, [r4, #20]
 80041da:	3001      	adds	r0, #1
 80041dc:	4283      	cmp	r3, r0
 80041de:	d004      	beq.n	80041ea <__swbuf_r+0x62>
 80041e0:	89a3      	ldrh	r3, [r4, #12]
 80041e2:	07db      	lsls	r3, r3, #31
 80041e4:	d506      	bpl.n	80041f4 <__swbuf_r+0x6c>
 80041e6:	2e0a      	cmp	r6, #10
 80041e8:	d104      	bne.n	80041f4 <__swbuf_r+0x6c>
 80041ea:	4621      	mov	r1, r4
 80041ec:	4628      	mov	r0, r5
 80041ee:	f000 f911 	bl	8004414 <_fflush_r>
 80041f2:	b988      	cbnz	r0, 8004218 <__swbuf_r+0x90>
 80041f4:	4638      	mov	r0, r7
 80041f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041f8:	4b0a      	ldr	r3, [pc, #40]	; (8004224 <__swbuf_r+0x9c>)
 80041fa:	429c      	cmp	r4, r3
 80041fc:	d101      	bne.n	8004202 <__swbuf_r+0x7a>
 80041fe:	68ac      	ldr	r4, [r5, #8]
 8004200:	e7cf      	b.n	80041a2 <__swbuf_r+0x1a>
 8004202:	4b09      	ldr	r3, [pc, #36]	; (8004228 <__swbuf_r+0xa0>)
 8004204:	429c      	cmp	r4, r3
 8004206:	bf08      	it	eq
 8004208:	68ec      	ldreq	r4, [r5, #12]
 800420a:	e7ca      	b.n	80041a2 <__swbuf_r+0x1a>
 800420c:	4621      	mov	r1, r4
 800420e:	4628      	mov	r0, r5
 8004210:	f000 f80c 	bl	800422c <__swsetup_r>
 8004214:	2800      	cmp	r0, #0
 8004216:	d0cb      	beq.n	80041b0 <__swbuf_r+0x28>
 8004218:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800421c:	e7ea      	b.n	80041f4 <__swbuf_r+0x6c>
 800421e:	bf00      	nop
 8004220:	08004b00 	.word	0x08004b00
 8004224:	08004b20 	.word	0x08004b20
 8004228:	08004ae0 	.word	0x08004ae0

0800422c <__swsetup_r>:
 800422c:	4b32      	ldr	r3, [pc, #200]	; (80042f8 <__swsetup_r+0xcc>)
 800422e:	b570      	push	{r4, r5, r6, lr}
 8004230:	681d      	ldr	r5, [r3, #0]
 8004232:	4606      	mov	r6, r0
 8004234:	460c      	mov	r4, r1
 8004236:	b125      	cbz	r5, 8004242 <__swsetup_r+0x16>
 8004238:	69ab      	ldr	r3, [r5, #24]
 800423a:	b913      	cbnz	r3, 8004242 <__swsetup_r+0x16>
 800423c:	4628      	mov	r0, r5
 800423e:	f000 f97d 	bl	800453c <__sinit>
 8004242:	4b2e      	ldr	r3, [pc, #184]	; (80042fc <__swsetup_r+0xd0>)
 8004244:	429c      	cmp	r4, r3
 8004246:	d10f      	bne.n	8004268 <__swsetup_r+0x3c>
 8004248:	686c      	ldr	r4, [r5, #4]
 800424a:	89a3      	ldrh	r3, [r4, #12]
 800424c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004250:	0719      	lsls	r1, r3, #28
 8004252:	d42c      	bmi.n	80042ae <__swsetup_r+0x82>
 8004254:	06dd      	lsls	r5, r3, #27
 8004256:	d411      	bmi.n	800427c <__swsetup_r+0x50>
 8004258:	2309      	movs	r3, #9
 800425a:	6033      	str	r3, [r6, #0]
 800425c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004260:	81a3      	strh	r3, [r4, #12]
 8004262:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004266:	e03e      	b.n	80042e6 <__swsetup_r+0xba>
 8004268:	4b25      	ldr	r3, [pc, #148]	; (8004300 <__swsetup_r+0xd4>)
 800426a:	429c      	cmp	r4, r3
 800426c:	d101      	bne.n	8004272 <__swsetup_r+0x46>
 800426e:	68ac      	ldr	r4, [r5, #8]
 8004270:	e7eb      	b.n	800424a <__swsetup_r+0x1e>
 8004272:	4b24      	ldr	r3, [pc, #144]	; (8004304 <__swsetup_r+0xd8>)
 8004274:	429c      	cmp	r4, r3
 8004276:	bf08      	it	eq
 8004278:	68ec      	ldreq	r4, [r5, #12]
 800427a:	e7e6      	b.n	800424a <__swsetup_r+0x1e>
 800427c:	0758      	lsls	r0, r3, #29
 800427e:	d512      	bpl.n	80042a6 <__swsetup_r+0x7a>
 8004280:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004282:	b141      	cbz	r1, 8004296 <__swsetup_r+0x6a>
 8004284:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004288:	4299      	cmp	r1, r3
 800428a:	d002      	beq.n	8004292 <__swsetup_r+0x66>
 800428c:	4630      	mov	r0, r6
 800428e:	f000 fa5b 	bl	8004748 <_free_r>
 8004292:	2300      	movs	r3, #0
 8004294:	6363      	str	r3, [r4, #52]	; 0x34
 8004296:	89a3      	ldrh	r3, [r4, #12]
 8004298:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800429c:	81a3      	strh	r3, [r4, #12]
 800429e:	2300      	movs	r3, #0
 80042a0:	6063      	str	r3, [r4, #4]
 80042a2:	6923      	ldr	r3, [r4, #16]
 80042a4:	6023      	str	r3, [r4, #0]
 80042a6:	89a3      	ldrh	r3, [r4, #12]
 80042a8:	f043 0308 	orr.w	r3, r3, #8
 80042ac:	81a3      	strh	r3, [r4, #12]
 80042ae:	6923      	ldr	r3, [r4, #16]
 80042b0:	b94b      	cbnz	r3, 80042c6 <__swsetup_r+0x9a>
 80042b2:	89a3      	ldrh	r3, [r4, #12]
 80042b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80042b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042bc:	d003      	beq.n	80042c6 <__swsetup_r+0x9a>
 80042be:	4621      	mov	r1, r4
 80042c0:	4630      	mov	r0, r6
 80042c2:	f000 fa01 	bl	80046c8 <__smakebuf_r>
 80042c6:	89a0      	ldrh	r0, [r4, #12]
 80042c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80042cc:	f010 0301 	ands.w	r3, r0, #1
 80042d0:	d00a      	beq.n	80042e8 <__swsetup_r+0xbc>
 80042d2:	2300      	movs	r3, #0
 80042d4:	60a3      	str	r3, [r4, #8]
 80042d6:	6963      	ldr	r3, [r4, #20]
 80042d8:	425b      	negs	r3, r3
 80042da:	61a3      	str	r3, [r4, #24]
 80042dc:	6923      	ldr	r3, [r4, #16]
 80042de:	b943      	cbnz	r3, 80042f2 <__swsetup_r+0xc6>
 80042e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80042e4:	d1ba      	bne.n	800425c <__swsetup_r+0x30>
 80042e6:	bd70      	pop	{r4, r5, r6, pc}
 80042e8:	0781      	lsls	r1, r0, #30
 80042ea:	bf58      	it	pl
 80042ec:	6963      	ldrpl	r3, [r4, #20]
 80042ee:	60a3      	str	r3, [r4, #8]
 80042f0:	e7f4      	b.n	80042dc <__swsetup_r+0xb0>
 80042f2:	2000      	movs	r0, #0
 80042f4:	e7f7      	b.n	80042e6 <__swsetup_r+0xba>
 80042f6:	bf00      	nop
 80042f8:	2000000c 	.word	0x2000000c
 80042fc:	08004b00 	.word	0x08004b00
 8004300:	08004b20 	.word	0x08004b20
 8004304:	08004ae0 	.word	0x08004ae0

08004308 <__sflush_r>:
 8004308:	898a      	ldrh	r2, [r1, #12]
 800430a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800430e:	4605      	mov	r5, r0
 8004310:	0710      	lsls	r0, r2, #28
 8004312:	460c      	mov	r4, r1
 8004314:	d458      	bmi.n	80043c8 <__sflush_r+0xc0>
 8004316:	684b      	ldr	r3, [r1, #4]
 8004318:	2b00      	cmp	r3, #0
 800431a:	dc05      	bgt.n	8004328 <__sflush_r+0x20>
 800431c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800431e:	2b00      	cmp	r3, #0
 8004320:	dc02      	bgt.n	8004328 <__sflush_r+0x20>
 8004322:	2000      	movs	r0, #0
 8004324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004328:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800432a:	2e00      	cmp	r6, #0
 800432c:	d0f9      	beq.n	8004322 <__sflush_r+0x1a>
 800432e:	2300      	movs	r3, #0
 8004330:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004334:	682f      	ldr	r7, [r5, #0]
 8004336:	602b      	str	r3, [r5, #0]
 8004338:	d032      	beq.n	80043a0 <__sflush_r+0x98>
 800433a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800433c:	89a3      	ldrh	r3, [r4, #12]
 800433e:	075a      	lsls	r2, r3, #29
 8004340:	d505      	bpl.n	800434e <__sflush_r+0x46>
 8004342:	6863      	ldr	r3, [r4, #4]
 8004344:	1ac0      	subs	r0, r0, r3
 8004346:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004348:	b10b      	cbz	r3, 800434e <__sflush_r+0x46>
 800434a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800434c:	1ac0      	subs	r0, r0, r3
 800434e:	2300      	movs	r3, #0
 8004350:	4602      	mov	r2, r0
 8004352:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004354:	6a21      	ldr	r1, [r4, #32]
 8004356:	4628      	mov	r0, r5
 8004358:	47b0      	blx	r6
 800435a:	1c43      	adds	r3, r0, #1
 800435c:	89a3      	ldrh	r3, [r4, #12]
 800435e:	d106      	bne.n	800436e <__sflush_r+0x66>
 8004360:	6829      	ldr	r1, [r5, #0]
 8004362:	291d      	cmp	r1, #29
 8004364:	d82c      	bhi.n	80043c0 <__sflush_r+0xb8>
 8004366:	4a2a      	ldr	r2, [pc, #168]	; (8004410 <__sflush_r+0x108>)
 8004368:	40ca      	lsrs	r2, r1
 800436a:	07d6      	lsls	r6, r2, #31
 800436c:	d528      	bpl.n	80043c0 <__sflush_r+0xb8>
 800436e:	2200      	movs	r2, #0
 8004370:	6062      	str	r2, [r4, #4]
 8004372:	04d9      	lsls	r1, r3, #19
 8004374:	6922      	ldr	r2, [r4, #16]
 8004376:	6022      	str	r2, [r4, #0]
 8004378:	d504      	bpl.n	8004384 <__sflush_r+0x7c>
 800437a:	1c42      	adds	r2, r0, #1
 800437c:	d101      	bne.n	8004382 <__sflush_r+0x7a>
 800437e:	682b      	ldr	r3, [r5, #0]
 8004380:	b903      	cbnz	r3, 8004384 <__sflush_r+0x7c>
 8004382:	6560      	str	r0, [r4, #84]	; 0x54
 8004384:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004386:	602f      	str	r7, [r5, #0]
 8004388:	2900      	cmp	r1, #0
 800438a:	d0ca      	beq.n	8004322 <__sflush_r+0x1a>
 800438c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004390:	4299      	cmp	r1, r3
 8004392:	d002      	beq.n	800439a <__sflush_r+0x92>
 8004394:	4628      	mov	r0, r5
 8004396:	f000 f9d7 	bl	8004748 <_free_r>
 800439a:	2000      	movs	r0, #0
 800439c:	6360      	str	r0, [r4, #52]	; 0x34
 800439e:	e7c1      	b.n	8004324 <__sflush_r+0x1c>
 80043a0:	6a21      	ldr	r1, [r4, #32]
 80043a2:	2301      	movs	r3, #1
 80043a4:	4628      	mov	r0, r5
 80043a6:	47b0      	blx	r6
 80043a8:	1c41      	adds	r1, r0, #1
 80043aa:	d1c7      	bne.n	800433c <__sflush_r+0x34>
 80043ac:	682b      	ldr	r3, [r5, #0]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d0c4      	beq.n	800433c <__sflush_r+0x34>
 80043b2:	2b1d      	cmp	r3, #29
 80043b4:	d001      	beq.n	80043ba <__sflush_r+0xb2>
 80043b6:	2b16      	cmp	r3, #22
 80043b8:	d101      	bne.n	80043be <__sflush_r+0xb6>
 80043ba:	602f      	str	r7, [r5, #0]
 80043bc:	e7b1      	b.n	8004322 <__sflush_r+0x1a>
 80043be:	89a3      	ldrh	r3, [r4, #12]
 80043c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043c4:	81a3      	strh	r3, [r4, #12]
 80043c6:	e7ad      	b.n	8004324 <__sflush_r+0x1c>
 80043c8:	690f      	ldr	r7, [r1, #16]
 80043ca:	2f00      	cmp	r7, #0
 80043cc:	d0a9      	beq.n	8004322 <__sflush_r+0x1a>
 80043ce:	0793      	lsls	r3, r2, #30
 80043d0:	680e      	ldr	r6, [r1, #0]
 80043d2:	bf08      	it	eq
 80043d4:	694b      	ldreq	r3, [r1, #20]
 80043d6:	600f      	str	r7, [r1, #0]
 80043d8:	bf18      	it	ne
 80043da:	2300      	movne	r3, #0
 80043dc:	eba6 0807 	sub.w	r8, r6, r7
 80043e0:	608b      	str	r3, [r1, #8]
 80043e2:	f1b8 0f00 	cmp.w	r8, #0
 80043e6:	dd9c      	ble.n	8004322 <__sflush_r+0x1a>
 80043e8:	6a21      	ldr	r1, [r4, #32]
 80043ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80043ec:	4643      	mov	r3, r8
 80043ee:	463a      	mov	r2, r7
 80043f0:	4628      	mov	r0, r5
 80043f2:	47b0      	blx	r6
 80043f4:	2800      	cmp	r0, #0
 80043f6:	dc06      	bgt.n	8004406 <__sflush_r+0xfe>
 80043f8:	89a3      	ldrh	r3, [r4, #12]
 80043fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043fe:	81a3      	strh	r3, [r4, #12]
 8004400:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004404:	e78e      	b.n	8004324 <__sflush_r+0x1c>
 8004406:	4407      	add	r7, r0
 8004408:	eba8 0800 	sub.w	r8, r8, r0
 800440c:	e7e9      	b.n	80043e2 <__sflush_r+0xda>
 800440e:	bf00      	nop
 8004410:	20400001 	.word	0x20400001

08004414 <_fflush_r>:
 8004414:	b538      	push	{r3, r4, r5, lr}
 8004416:	690b      	ldr	r3, [r1, #16]
 8004418:	4605      	mov	r5, r0
 800441a:	460c      	mov	r4, r1
 800441c:	b913      	cbnz	r3, 8004424 <_fflush_r+0x10>
 800441e:	2500      	movs	r5, #0
 8004420:	4628      	mov	r0, r5
 8004422:	bd38      	pop	{r3, r4, r5, pc}
 8004424:	b118      	cbz	r0, 800442e <_fflush_r+0x1a>
 8004426:	6983      	ldr	r3, [r0, #24]
 8004428:	b90b      	cbnz	r3, 800442e <_fflush_r+0x1a>
 800442a:	f000 f887 	bl	800453c <__sinit>
 800442e:	4b14      	ldr	r3, [pc, #80]	; (8004480 <_fflush_r+0x6c>)
 8004430:	429c      	cmp	r4, r3
 8004432:	d11b      	bne.n	800446c <_fflush_r+0x58>
 8004434:	686c      	ldr	r4, [r5, #4]
 8004436:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d0ef      	beq.n	800441e <_fflush_r+0xa>
 800443e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004440:	07d0      	lsls	r0, r2, #31
 8004442:	d404      	bmi.n	800444e <_fflush_r+0x3a>
 8004444:	0599      	lsls	r1, r3, #22
 8004446:	d402      	bmi.n	800444e <_fflush_r+0x3a>
 8004448:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800444a:	f000 f915 	bl	8004678 <__retarget_lock_acquire_recursive>
 800444e:	4628      	mov	r0, r5
 8004450:	4621      	mov	r1, r4
 8004452:	f7ff ff59 	bl	8004308 <__sflush_r>
 8004456:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004458:	07da      	lsls	r2, r3, #31
 800445a:	4605      	mov	r5, r0
 800445c:	d4e0      	bmi.n	8004420 <_fflush_r+0xc>
 800445e:	89a3      	ldrh	r3, [r4, #12]
 8004460:	059b      	lsls	r3, r3, #22
 8004462:	d4dd      	bmi.n	8004420 <_fflush_r+0xc>
 8004464:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004466:	f000 f908 	bl	800467a <__retarget_lock_release_recursive>
 800446a:	e7d9      	b.n	8004420 <_fflush_r+0xc>
 800446c:	4b05      	ldr	r3, [pc, #20]	; (8004484 <_fflush_r+0x70>)
 800446e:	429c      	cmp	r4, r3
 8004470:	d101      	bne.n	8004476 <_fflush_r+0x62>
 8004472:	68ac      	ldr	r4, [r5, #8]
 8004474:	e7df      	b.n	8004436 <_fflush_r+0x22>
 8004476:	4b04      	ldr	r3, [pc, #16]	; (8004488 <_fflush_r+0x74>)
 8004478:	429c      	cmp	r4, r3
 800447a:	bf08      	it	eq
 800447c:	68ec      	ldreq	r4, [r5, #12]
 800447e:	e7da      	b.n	8004436 <_fflush_r+0x22>
 8004480:	08004b00 	.word	0x08004b00
 8004484:	08004b20 	.word	0x08004b20
 8004488:	08004ae0 	.word	0x08004ae0

0800448c <std>:
 800448c:	2300      	movs	r3, #0
 800448e:	b510      	push	{r4, lr}
 8004490:	4604      	mov	r4, r0
 8004492:	e9c0 3300 	strd	r3, r3, [r0]
 8004496:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800449a:	6083      	str	r3, [r0, #8]
 800449c:	8181      	strh	r1, [r0, #12]
 800449e:	6643      	str	r3, [r0, #100]	; 0x64
 80044a0:	81c2      	strh	r2, [r0, #14]
 80044a2:	6183      	str	r3, [r0, #24]
 80044a4:	4619      	mov	r1, r3
 80044a6:	2208      	movs	r2, #8
 80044a8:	305c      	adds	r0, #92	; 0x5c
 80044aa:	f7ff fdef 	bl	800408c <memset>
 80044ae:	4b05      	ldr	r3, [pc, #20]	; (80044c4 <std+0x38>)
 80044b0:	6263      	str	r3, [r4, #36]	; 0x24
 80044b2:	4b05      	ldr	r3, [pc, #20]	; (80044c8 <std+0x3c>)
 80044b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80044b6:	4b05      	ldr	r3, [pc, #20]	; (80044cc <std+0x40>)
 80044b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80044ba:	4b05      	ldr	r3, [pc, #20]	; (80044d0 <std+0x44>)
 80044bc:	6224      	str	r4, [r4, #32]
 80044be:	6323      	str	r3, [r4, #48]	; 0x30
 80044c0:	bd10      	pop	{r4, pc}
 80044c2:	bf00      	nop
 80044c4:	08004929 	.word	0x08004929
 80044c8:	0800494b 	.word	0x0800494b
 80044cc:	08004983 	.word	0x08004983
 80044d0:	080049a7 	.word	0x080049a7

080044d4 <_cleanup_r>:
 80044d4:	4901      	ldr	r1, [pc, #4]	; (80044dc <_cleanup_r+0x8>)
 80044d6:	f000 b8af 	b.w	8004638 <_fwalk_reent>
 80044da:	bf00      	nop
 80044dc:	08004415 	.word	0x08004415

080044e0 <__sfmoreglue>:
 80044e0:	b570      	push	{r4, r5, r6, lr}
 80044e2:	2268      	movs	r2, #104	; 0x68
 80044e4:	1e4d      	subs	r5, r1, #1
 80044e6:	4355      	muls	r5, r2
 80044e8:	460e      	mov	r6, r1
 80044ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80044ee:	f000 f997 	bl	8004820 <_malloc_r>
 80044f2:	4604      	mov	r4, r0
 80044f4:	b140      	cbz	r0, 8004508 <__sfmoreglue+0x28>
 80044f6:	2100      	movs	r1, #0
 80044f8:	e9c0 1600 	strd	r1, r6, [r0]
 80044fc:	300c      	adds	r0, #12
 80044fe:	60a0      	str	r0, [r4, #8]
 8004500:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004504:	f7ff fdc2 	bl	800408c <memset>
 8004508:	4620      	mov	r0, r4
 800450a:	bd70      	pop	{r4, r5, r6, pc}

0800450c <__sfp_lock_acquire>:
 800450c:	4801      	ldr	r0, [pc, #4]	; (8004514 <__sfp_lock_acquire+0x8>)
 800450e:	f000 b8b3 	b.w	8004678 <__retarget_lock_acquire_recursive>
 8004512:	bf00      	nop
 8004514:	200001e1 	.word	0x200001e1

08004518 <__sfp_lock_release>:
 8004518:	4801      	ldr	r0, [pc, #4]	; (8004520 <__sfp_lock_release+0x8>)
 800451a:	f000 b8ae 	b.w	800467a <__retarget_lock_release_recursive>
 800451e:	bf00      	nop
 8004520:	200001e1 	.word	0x200001e1

08004524 <__sinit_lock_acquire>:
 8004524:	4801      	ldr	r0, [pc, #4]	; (800452c <__sinit_lock_acquire+0x8>)
 8004526:	f000 b8a7 	b.w	8004678 <__retarget_lock_acquire_recursive>
 800452a:	bf00      	nop
 800452c:	200001e2 	.word	0x200001e2

08004530 <__sinit_lock_release>:
 8004530:	4801      	ldr	r0, [pc, #4]	; (8004538 <__sinit_lock_release+0x8>)
 8004532:	f000 b8a2 	b.w	800467a <__retarget_lock_release_recursive>
 8004536:	bf00      	nop
 8004538:	200001e2 	.word	0x200001e2

0800453c <__sinit>:
 800453c:	b510      	push	{r4, lr}
 800453e:	4604      	mov	r4, r0
 8004540:	f7ff fff0 	bl	8004524 <__sinit_lock_acquire>
 8004544:	69a3      	ldr	r3, [r4, #24]
 8004546:	b11b      	cbz	r3, 8004550 <__sinit+0x14>
 8004548:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800454c:	f7ff bff0 	b.w	8004530 <__sinit_lock_release>
 8004550:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004554:	6523      	str	r3, [r4, #80]	; 0x50
 8004556:	4b13      	ldr	r3, [pc, #76]	; (80045a4 <__sinit+0x68>)
 8004558:	4a13      	ldr	r2, [pc, #76]	; (80045a8 <__sinit+0x6c>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	62a2      	str	r2, [r4, #40]	; 0x28
 800455e:	42a3      	cmp	r3, r4
 8004560:	bf04      	itt	eq
 8004562:	2301      	moveq	r3, #1
 8004564:	61a3      	streq	r3, [r4, #24]
 8004566:	4620      	mov	r0, r4
 8004568:	f000 f820 	bl	80045ac <__sfp>
 800456c:	6060      	str	r0, [r4, #4]
 800456e:	4620      	mov	r0, r4
 8004570:	f000 f81c 	bl	80045ac <__sfp>
 8004574:	60a0      	str	r0, [r4, #8]
 8004576:	4620      	mov	r0, r4
 8004578:	f000 f818 	bl	80045ac <__sfp>
 800457c:	2200      	movs	r2, #0
 800457e:	60e0      	str	r0, [r4, #12]
 8004580:	2104      	movs	r1, #4
 8004582:	6860      	ldr	r0, [r4, #4]
 8004584:	f7ff ff82 	bl	800448c <std>
 8004588:	68a0      	ldr	r0, [r4, #8]
 800458a:	2201      	movs	r2, #1
 800458c:	2109      	movs	r1, #9
 800458e:	f7ff ff7d 	bl	800448c <std>
 8004592:	68e0      	ldr	r0, [r4, #12]
 8004594:	2202      	movs	r2, #2
 8004596:	2112      	movs	r1, #18
 8004598:	f7ff ff78 	bl	800448c <std>
 800459c:	2301      	movs	r3, #1
 800459e:	61a3      	str	r3, [r4, #24]
 80045a0:	e7d2      	b.n	8004548 <__sinit+0xc>
 80045a2:	bf00      	nop
 80045a4:	08004adc 	.word	0x08004adc
 80045a8:	080044d5 	.word	0x080044d5

080045ac <__sfp>:
 80045ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ae:	4607      	mov	r7, r0
 80045b0:	f7ff ffac 	bl	800450c <__sfp_lock_acquire>
 80045b4:	4b1e      	ldr	r3, [pc, #120]	; (8004630 <__sfp+0x84>)
 80045b6:	681e      	ldr	r6, [r3, #0]
 80045b8:	69b3      	ldr	r3, [r6, #24]
 80045ba:	b913      	cbnz	r3, 80045c2 <__sfp+0x16>
 80045bc:	4630      	mov	r0, r6
 80045be:	f7ff ffbd 	bl	800453c <__sinit>
 80045c2:	3648      	adds	r6, #72	; 0x48
 80045c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80045c8:	3b01      	subs	r3, #1
 80045ca:	d503      	bpl.n	80045d4 <__sfp+0x28>
 80045cc:	6833      	ldr	r3, [r6, #0]
 80045ce:	b30b      	cbz	r3, 8004614 <__sfp+0x68>
 80045d0:	6836      	ldr	r6, [r6, #0]
 80045d2:	e7f7      	b.n	80045c4 <__sfp+0x18>
 80045d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80045d8:	b9d5      	cbnz	r5, 8004610 <__sfp+0x64>
 80045da:	4b16      	ldr	r3, [pc, #88]	; (8004634 <__sfp+0x88>)
 80045dc:	60e3      	str	r3, [r4, #12]
 80045de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80045e2:	6665      	str	r5, [r4, #100]	; 0x64
 80045e4:	f000 f847 	bl	8004676 <__retarget_lock_init_recursive>
 80045e8:	f7ff ff96 	bl	8004518 <__sfp_lock_release>
 80045ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80045f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80045f4:	6025      	str	r5, [r4, #0]
 80045f6:	61a5      	str	r5, [r4, #24]
 80045f8:	2208      	movs	r2, #8
 80045fa:	4629      	mov	r1, r5
 80045fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004600:	f7ff fd44 	bl	800408c <memset>
 8004604:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004608:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800460c:	4620      	mov	r0, r4
 800460e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004610:	3468      	adds	r4, #104	; 0x68
 8004612:	e7d9      	b.n	80045c8 <__sfp+0x1c>
 8004614:	2104      	movs	r1, #4
 8004616:	4638      	mov	r0, r7
 8004618:	f7ff ff62 	bl	80044e0 <__sfmoreglue>
 800461c:	4604      	mov	r4, r0
 800461e:	6030      	str	r0, [r6, #0]
 8004620:	2800      	cmp	r0, #0
 8004622:	d1d5      	bne.n	80045d0 <__sfp+0x24>
 8004624:	f7ff ff78 	bl	8004518 <__sfp_lock_release>
 8004628:	230c      	movs	r3, #12
 800462a:	603b      	str	r3, [r7, #0]
 800462c:	e7ee      	b.n	800460c <__sfp+0x60>
 800462e:	bf00      	nop
 8004630:	08004adc 	.word	0x08004adc
 8004634:	ffff0001 	.word	0xffff0001

08004638 <_fwalk_reent>:
 8004638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800463c:	4606      	mov	r6, r0
 800463e:	4688      	mov	r8, r1
 8004640:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004644:	2700      	movs	r7, #0
 8004646:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800464a:	f1b9 0901 	subs.w	r9, r9, #1
 800464e:	d505      	bpl.n	800465c <_fwalk_reent+0x24>
 8004650:	6824      	ldr	r4, [r4, #0]
 8004652:	2c00      	cmp	r4, #0
 8004654:	d1f7      	bne.n	8004646 <_fwalk_reent+0xe>
 8004656:	4638      	mov	r0, r7
 8004658:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800465c:	89ab      	ldrh	r3, [r5, #12]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d907      	bls.n	8004672 <_fwalk_reent+0x3a>
 8004662:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004666:	3301      	adds	r3, #1
 8004668:	d003      	beq.n	8004672 <_fwalk_reent+0x3a>
 800466a:	4629      	mov	r1, r5
 800466c:	4630      	mov	r0, r6
 800466e:	47c0      	blx	r8
 8004670:	4307      	orrs	r7, r0
 8004672:	3568      	adds	r5, #104	; 0x68
 8004674:	e7e9      	b.n	800464a <_fwalk_reent+0x12>

08004676 <__retarget_lock_init_recursive>:
 8004676:	4770      	bx	lr

08004678 <__retarget_lock_acquire_recursive>:
 8004678:	4770      	bx	lr

0800467a <__retarget_lock_release_recursive>:
 800467a:	4770      	bx	lr

0800467c <__swhatbuf_r>:
 800467c:	b570      	push	{r4, r5, r6, lr}
 800467e:	460e      	mov	r6, r1
 8004680:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004684:	2900      	cmp	r1, #0
 8004686:	b096      	sub	sp, #88	; 0x58
 8004688:	4614      	mov	r4, r2
 800468a:	461d      	mov	r5, r3
 800468c:	da08      	bge.n	80046a0 <__swhatbuf_r+0x24>
 800468e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004692:	2200      	movs	r2, #0
 8004694:	602a      	str	r2, [r5, #0]
 8004696:	061a      	lsls	r2, r3, #24
 8004698:	d410      	bmi.n	80046bc <__swhatbuf_r+0x40>
 800469a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800469e:	e00e      	b.n	80046be <__swhatbuf_r+0x42>
 80046a0:	466a      	mov	r2, sp
 80046a2:	f000 f9a7 	bl	80049f4 <_fstat_r>
 80046a6:	2800      	cmp	r0, #0
 80046a8:	dbf1      	blt.n	800468e <__swhatbuf_r+0x12>
 80046aa:	9a01      	ldr	r2, [sp, #4]
 80046ac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80046b0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80046b4:	425a      	negs	r2, r3
 80046b6:	415a      	adcs	r2, r3
 80046b8:	602a      	str	r2, [r5, #0]
 80046ba:	e7ee      	b.n	800469a <__swhatbuf_r+0x1e>
 80046bc:	2340      	movs	r3, #64	; 0x40
 80046be:	2000      	movs	r0, #0
 80046c0:	6023      	str	r3, [r4, #0]
 80046c2:	b016      	add	sp, #88	; 0x58
 80046c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080046c8 <__smakebuf_r>:
 80046c8:	898b      	ldrh	r3, [r1, #12]
 80046ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80046cc:	079d      	lsls	r5, r3, #30
 80046ce:	4606      	mov	r6, r0
 80046d0:	460c      	mov	r4, r1
 80046d2:	d507      	bpl.n	80046e4 <__smakebuf_r+0x1c>
 80046d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80046d8:	6023      	str	r3, [r4, #0]
 80046da:	6123      	str	r3, [r4, #16]
 80046dc:	2301      	movs	r3, #1
 80046de:	6163      	str	r3, [r4, #20]
 80046e0:	b002      	add	sp, #8
 80046e2:	bd70      	pop	{r4, r5, r6, pc}
 80046e4:	ab01      	add	r3, sp, #4
 80046e6:	466a      	mov	r2, sp
 80046e8:	f7ff ffc8 	bl	800467c <__swhatbuf_r>
 80046ec:	9900      	ldr	r1, [sp, #0]
 80046ee:	4605      	mov	r5, r0
 80046f0:	4630      	mov	r0, r6
 80046f2:	f000 f895 	bl	8004820 <_malloc_r>
 80046f6:	b948      	cbnz	r0, 800470c <__smakebuf_r+0x44>
 80046f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046fc:	059a      	lsls	r2, r3, #22
 80046fe:	d4ef      	bmi.n	80046e0 <__smakebuf_r+0x18>
 8004700:	f023 0303 	bic.w	r3, r3, #3
 8004704:	f043 0302 	orr.w	r3, r3, #2
 8004708:	81a3      	strh	r3, [r4, #12]
 800470a:	e7e3      	b.n	80046d4 <__smakebuf_r+0xc>
 800470c:	4b0d      	ldr	r3, [pc, #52]	; (8004744 <__smakebuf_r+0x7c>)
 800470e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004710:	89a3      	ldrh	r3, [r4, #12]
 8004712:	6020      	str	r0, [r4, #0]
 8004714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004718:	81a3      	strh	r3, [r4, #12]
 800471a:	9b00      	ldr	r3, [sp, #0]
 800471c:	6163      	str	r3, [r4, #20]
 800471e:	9b01      	ldr	r3, [sp, #4]
 8004720:	6120      	str	r0, [r4, #16]
 8004722:	b15b      	cbz	r3, 800473c <__smakebuf_r+0x74>
 8004724:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004728:	4630      	mov	r0, r6
 800472a:	f000 f975 	bl	8004a18 <_isatty_r>
 800472e:	b128      	cbz	r0, 800473c <__smakebuf_r+0x74>
 8004730:	89a3      	ldrh	r3, [r4, #12]
 8004732:	f023 0303 	bic.w	r3, r3, #3
 8004736:	f043 0301 	orr.w	r3, r3, #1
 800473a:	81a3      	strh	r3, [r4, #12]
 800473c:	89a0      	ldrh	r0, [r4, #12]
 800473e:	4305      	orrs	r5, r0
 8004740:	81a5      	strh	r5, [r4, #12]
 8004742:	e7cd      	b.n	80046e0 <__smakebuf_r+0x18>
 8004744:	080044d5 	.word	0x080044d5

08004748 <_free_r>:
 8004748:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800474a:	2900      	cmp	r1, #0
 800474c:	d044      	beq.n	80047d8 <_free_r+0x90>
 800474e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004752:	9001      	str	r0, [sp, #4]
 8004754:	2b00      	cmp	r3, #0
 8004756:	f1a1 0404 	sub.w	r4, r1, #4
 800475a:	bfb8      	it	lt
 800475c:	18e4      	addlt	r4, r4, r3
 800475e:	f000 f97d 	bl	8004a5c <__malloc_lock>
 8004762:	4a1e      	ldr	r2, [pc, #120]	; (80047dc <_free_r+0x94>)
 8004764:	9801      	ldr	r0, [sp, #4]
 8004766:	6813      	ldr	r3, [r2, #0]
 8004768:	b933      	cbnz	r3, 8004778 <_free_r+0x30>
 800476a:	6063      	str	r3, [r4, #4]
 800476c:	6014      	str	r4, [r2, #0]
 800476e:	b003      	add	sp, #12
 8004770:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004774:	f000 b978 	b.w	8004a68 <__malloc_unlock>
 8004778:	42a3      	cmp	r3, r4
 800477a:	d908      	bls.n	800478e <_free_r+0x46>
 800477c:	6825      	ldr	r5, [r4, #0]
 800477e:	1961      	adds	r1, r4, r5
 8004780:	428b      	cmp	r3, r1
 8004782:	bf01      	itttt	eq
 8004784:	6819      	ldreq	r1, [r3, #0]
 8004786:	685b      	ldreq	r3, [r3, #4]
 8004788:	1949      	addeq	r1, r1, r5
 800478a:	6021      	streq	r1, [r4, #0]
 800478c:	e7ed      	b.n	800476a <_free_r+0x22>
 800478e:	461a      	mov	r2, r3
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	b10b      	cbz	r3, 8004798 <_free_r+0x50>
 8004794:	42a3      	cmp	r3, r4
 8004796:	d9fa      	bls.n	800478e <_free_r+0x46>
 8004798:	6811      	ldr	r1, [r2, #0]
 800479a:	1855      	adds	r5, r2, r1
 800479c:	42a5      	cmp	r5, r4
 800479e:	d10b      	bne.n	80047b8 <_free_r+0x70>
 80047a0:	6824      	ldr	r4, [r4, #0]
 80047a2:	4421      	add	r1, r4
 80047a4:	1854      	adds	r4, r2, r1
 80047a6:	42a3      	cmp	r3, r4
 80047a8:	6011      	str	r1, [r2, #0]
 80047aa:	d1e0      	bne.n	800476e <_free_r+0x26>
 80047ac:	681c      	ldr	r4, [r3, #0]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	6053      	str	r3, [r2, #4]
 80047b2:	4421      	add	r1, r4
 80047b4:	6011      	str	r1, [r2, #0]
 80047b6:	e7da      	b.n	800476e <_free_r+0x26>
 80047b8:	d902      	bls.n	80047c0 <_free_r+0x78>
 80047ba:	230c      	movs	r3, #12
 80047bc:	6003      	str	r3, [r0, #0]
 80047be:	e7d6      	b.n	800476e <_free_r+0x26>
 80047c0:	6825      	ldr	r5, [r4, #0]
 80047c2:	1961      	adds	r1, r4, r5
 80047c4:	428b      	cmp	r3, r1
 80047c6:	bf04      	itt	eq
 80047c8:	6819      	ldreq	r1, [r3, #0]
 80047ca:	685b      	ldreq	r3, [r3, #4]
 80047cc:	6063      	str	r3, [r4, #4]
 80047ce:	bf04      	itt	eq
 80047d0:	1949      	addeq	r1, r1, r5
 80047d2:	6021      	streq	r1, [r4, #0]
 80047d4:	6054      	str	r4, [r2, #4]
 80047d6:	e7ca      	b.n	800476e <_free_r+0x26>
 80047d8:	b003      	add	sp, #12
 80047da:	bd30      	pop	{r4, r5, pc}
 80047dc:	200001e4 	.word	0x200001e4

080047e0 <sbrk_aligned>:
 80047e0:	b570      	push	{r4, r5, r6, lr}
 80047e2:	4e0e      	ldr	r6, [pc, #56]	; (800481c <sbrk_aligned+0x3c>)
 80047e4:	460c      	mov	r4, r1
 80047e6:	6831      	ldr	r1, [r6, #0]
 80047e8:	4605      	mov	r5, r0
 80047ea:	b911      	cbnz	r1, 80047f2 <sbrk_aligned+0x12>
 80047ec:	f000 f88c 	bl	8004908 <_sbrk_r>
 80047f0:	6030      	str	r0, [r6, #0]
 80047f2:	4621      	mov	r1, r4
 80047f4:	4628      	mov	r0, r5
 80047f6:	f000 f887 	bl	8004908 <_sbrk_r>
 80047fa:	1c43      	adds	r3, r0, #1
 80047fc:	d00a      	beq.n	8004814 <sbrk_aligned+0x34>
 80047fe:	1cc4      	adds	r4, r0, #3
 8004800:	f024 0403 	bic.w	r4, r4, #3
 8004804:	42a0      	cmp	r0, r4
 8004806:	d007      	beq.n	8004818 <sbrk_aligned+0x38>
 8004808:	1a21      	subs	r1, r4, r0
 800480a:	4628      	mov	r0, r5
 800480c:	f000 f87c 	bl	8004908 <_sbrk_r>
 8004810:	3001      	adds	r0, #1
 8004812:	d101      	bne.n	8004818 <sbrk_aligned+0x38>
 8004814:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004818:	4620      	mov	r0, r4
 800481a:	bd70      	pop	{r4, r5, r6, pc}
 800481c:	200001e8 	.word	0x200001e8

08004820 <_malloc_r>:
 8004820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004824:	1ccd      	adds	r5, r1, #3
 8004826:	f025 0503 	bic.w	r5, r5, #3
 800482a:	3508      	adds	r5, #8
 800482c:	2d0c      	cmp	r5, #12
 800482e:	bf38      	it	cc
 8004830:	250c      	movcc	r5, #12
 8004832:	2d00      	cmp	r5, #0
 8004834:	4607      	mov	r7, r0
 8004836:	db01      	blt.n	800483c <_malloc_r+0x1c>
 8004838:	42a9      	cmp	r1, r5
 800483a:	d905      	bls.n	8004848 <_malloc_r+0x28>
 800483c:	230c      	movs	r3, #12
 800483e:	603b      	str	r3, [r7, #0]
 8004840:	2600      	movs	r6, #0
 8004842:	4630      	mov	r0, r6
 8004844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004848:	4e2e      	ldr	r6, [pc, #184]	; (8004904 <_malloc_r+0xe4>)
 800484a:	f000 f907 	bl	8004a5c <__malloc_lock>
 800484e:	6833      	ldr	r3, [r6, #0]
 8004850:	461c      	mov	r4, r3
 8004852:	bb34      	cbnz	r4, 80048a2 <_malloc_r+0x82>
 8004854:	4629      	mov	r1, r5
 8004856:	4638      	mov	r0, r7
 8004858:	f7ff ffc2 	bl	80047e0 <sbrk_aligned>
 800485c:	1c43      	adds	r3, r0, #1
 800485e:	4604      	mov	r4, r0
 8004860:	d14d      	bne.n	80048fe <_malloc_r+0xde>
 8004862:	6834      	ldr	r4, [r6, #0]
 8004864:	4626      	mov	r6, r4
 8004866:	2e00      	cmp	r6, #0
 8004868:	d140      	bne.n	80048ec <_malloc_r+0xcc>
 800486a:	6823      	ldr	r3, [r4, #0]
 800486c:	4631      	mov	r1, r6
 800486e:	4638      	mov	r0, r7
 8004870:	eb04 0803 	add.w	r8, r4, r3
 8004874:	f000 f848 	bl	8004908 <_sbrk_r>
 8004878:	4580      	cmp	r8, r0
 800487a:	d13a      	bne.n	80048f2 <_malloc_r+0xd2>
 800487c:	6821      	ldr	r1, [r4, #0]
 800487e:	3503      	adds	r5, #3
 8004880:	1a6d      	subs	r5, r5, r1
 8004882:	f025 0503 	bic.w	r5, r5, #3
 8004886:	3508      	adds	r5, #8
 8004888:	2d0c      	cmp	r5, #12
 800488a:	bf38      	it	cc
 800488c:	250c      	movcc	r5, #12
 800488e:	4629      	mov	r1, r5
 8004890:	4638      	mov	r0, r7
 8004892:	f7ff ffa5 	bl	80047e0 <sbrk_aligned>
 8004896:	3001      	adds	r0, #1
 8004898:	d02b      	beq.n	80048f2 <_malloc_r+0xd2>
 800489a:	6823      	ldr	r3, [r4, #0]
 800489c:	442b      	add	r3, r5
 800489e:	6023      	str	r3, [r4, #0]
 80048a0:	e00e      	b.n	80048c0 <_malloc_r+0xa0>
 80048a2:	6822      	ldr	r2, [r4, #0]
 80048a4:	1b52      	subs	r2, r2, r5
 80048a6:	d41e      	bmi.n	80048e6 <_malloc_r+0xc6>
 80048a8:	2a0b      	cmp	r2, #11
 80048aa:	d916      	bls.n	80048da <_malloc_r+0xba>
 80048ac:	1961      	adds	r1, r4, r5
 80048ae:	42a3      	cmp	r3, r4
 80048b0:	6025      	str	r5, [r4, #0]
 80048b2:	bf18      	it	ne
 80048b4:	6059      	strne	r1, [r3, #4]
 80048b6:	6863      	ldr	r3, [r4, #4]
 80048b8:	bf08      	it	eq
 80048ba:	6031      	streq	r1, [r6, #0]
 80048bc:	5162      	str	r2, [r4, r5]
 80048be:	604b      	str	r3, [r1, #4]
 80048c0:	4638      	mov	r0, r7
 80048c2:	f104 060b 	add.w	r6, r4, #11
 80048c6:	f000 f8cf 	bl	8004a68 <__malloc_unlock>
 80048ca:	f026 0607 	bic.w	r6, r6, #7
 80048ce:	1d23      	adds	r3, r4, #4
 80048d0:	1af2      	subs	r2, r6, r3
 80048d2:	d0b6      	beq.n	8004842 <_malloc_r+0x22>
 80048d4:	1b9b      	subs	r3, r3, r6
 80048d6:	50a3      	str	r3, [r4, r2]
 80048d8:	e7b3      	b.n	8004842 <_malloc_r+0x22>
 80048da:	6862      	ldr	r2, [r4, #4]
 80048dc:	42a3      	cmp	r3, r4
 80048de:	bf0c      	ite	eq
 80048e0:	6032      	streq	r2, [r6, #0]
 80048e2:	605a      	strne	r2, [r3, #4]
 80048e4:	e7ec      	b.n	80048c0 <_malloc_r+0xa0>
 80048e6:	4623      	mov	r3, r4
 80048e8:	6864      	ldr	r4, [r4, #4]
 80048ea:	e7b2      	b.n	8004852 <_malloc_r+0x32>
 80048ec:	4634      	mov	r4, r6
 80048ee:	6876      	ldr	r6, [r6, #4]
 80048f0:	e7b9      	b.n	8004866 <_malloc_r+0x46>
 80048f2:	230c      	movs	r3, #12
 80048f4:	603b      	str	r3, [r7, #0]
 80048f6:	4638      	mov	r0, r7
 80048f8:	f000 f8b6 	bl	8004a68 <__malloc_unlock>
 80048fc:	e7a1      	b.n	8004842 <_malloc_r+0x22>
 80048fe:	6025      	str	r5, [r4, #0]
 8004900:	e7de      	b.n	80048c0 <_malloc_r+0xa0>
 8004902:	bf00      	nop
 8004904:	200001e4 	.word	0x200001e4

08004908 <_sbrk_r>:
 8004908:	b538      	push	{r3, r4, r5, lr}
 800490a:	4d06      	ldr	r5, [pc, #24]	; (8004924 <_sbrk_r+0x1c>)
 800490c:	2300      	movs	r3, #0
 800490e:	4604      	mov	r4, r0
 8004910:	4608      	mov	r0, r1
 8004912:	602b      	str	r3, [r5, #0]
 8004914:	f7fc fc18 	bl	8001148 <_sbrk>
 8004918:	1c43      	adds	r3, r0, #1
 800491a:	d102      	bne.n	8004922 <_sbrk_r+0x1a>
 800491c:	682b      	ldr	r3, [r5, #0]
 800491e:	b103      	cbz	r3, 8004922 <_sbrk_r+0x1a>
 8004920:	6023      	str	r3, [r4, #0]
 8004922:	bd38      	pop	{r3, r4, r5, pc}
 8004924:	200001ec 	.word	0x200001ec

08004928 <__sread>:
 8004928:	b510      	push	{r4, lr}
 800492a:	460c      	mov	r4, r1
 800492c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004930:	f000 f8a0 	bl	8004a74 <_read_r>
 8004934:	2800      	cmp	r0, #0
 8004936:	bfab      	itete	ge
 8004938:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800493a:	89a3      	ldrhlt	r3, [r4, #12]
 800493c:	181b      	addge	r3, r3, r0
 800493e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004942:	bfac      	ite	ge
 8004944:	6563      	strge	r3, [r4, #84]	; 0x54
 8004946:	81a3      	strhlt	r3, [r4, #12]
 8004948:	bd10      	pop	{r4, pc}

0800494a <__swrite>:
 800494a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800494e:	461f      	mov	r7, r3
 8004950:	898b      	ldrh	r3, [r1, #12]
 8004952:	05db      	lsls	r3, r3, #23
 8004954:	4605      	mov	r5, r0
 8004956:	460c      	mov	r4, r1
 8004958:	4616      	mov	r6, r2
 800495a:	d505      	bpl.n	8004968 <__swrite+0x1e>
 800495c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004960:	2302      	movs	r3, #2
 8004962:	2200      	movs	r2, #0
 8004964:	f000 f868 	bl	8004a38 <_lseek_r>
 8004968:	89a3      	ldrh	r3, [r4, #12]
 800496a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800496e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004972:	81a3      	strh	r3, [r4, #12]
 8004974:	4632      	mov	r2, r6
 8004976:	463b      	mov	r3, r7
 8004978:	4628      	mov	r0, r5
 800497a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800497e:	f000 b817 	b.w	80049b0 <_write_r>

08004982 <__sseek>:
 8004982:	b510      	push	{r4, lr}
 8004984:	460c      	mov	r4, r1
 8004986:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800498a:	f000 f855 	bl	8004a38 <_lseek_r>
 800498e:	1c43      	adds	r3, r0, #1
 8004990:	89a3      	ldrh	r3, [r4, #12]
 8004992:	bf15      	itete	ne
 8004994:	6560      	strne	r0, [r4, #84]	; 0x54
 8004996:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800499a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800499e:	81a3      	strheq	r3, [r4, #12]
 80049a0:	bf18      	it	ne
 80049a2:	81a3      	strhne	r3, [r4, #12]
 80049a4:	bd10      	pop	{r4, pc}

080049a6 <__sclose>:
 80049a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049aa:	f000 b813 	b.w	80049d4 <_close_r>
	...

080049b0 <_write_r>:
 80049b0:	b538      	push	{r3, r4, r5, lr}
 80049b2:	4d07      	ldr	r5, [pc, #28]	; (80049d0 <_write_r+0x20>)
 80049b4:	4604      	mov	r4, r0
 80049b6:	4608      	mov	r0, r1
 80049b8:	4611      	mov	r1, r2
 80049ba:	2200      	movs	r2, #0
 80049bc:	602a      	str	r2, [r5, #0]
 80049be:	461a      	mov	r2, r3
 80049c0:	f7fc fb71 	bl	80010a6 <_write>
 80049c4:	1c43      	adds	r3, r0, #1
 80049c6:	d102      	bne.n	80049ce <_write_r+0x1e>
 80049c8:	682b      	ldr	r3, [r5, #0]
 80049ca:	b103      	cbz	r3, 80049ce <_write_r+0x1e>
 80049cc:	6023      	str	r3, [r4, #0]
 80049ce:	bd38      	pop	{r3, r4, r5, pc}
 80049d0:	200001ec 	.word	0x200001ec

080049d4 <_close_r>:
 80049d4:	b538      	push	{r3, r4, r5, lr}
 80049d6:	4d06      	ldr	r5, [pc, #24]	; (80049f0 <_close_r+0x1c>)
 80049d8:	2300      	movs	r3, #0
 80049da:	4604      	mov	r4, r0
 80049dc:	4608      	mov	r0, r1
 80049de:	602b      	str	r3, [r5, #0]
 80049e0:	f7fc fb7d 	bl	80010de <_close>
 80049e4:	1c43      	adds	r3, r0, #1
 80049e6:	d102      	bne.n	80049ee <_close_r+0x1a>
 80049e8:	682b      	ldr	r3, [r5, #0]
 80049ea:	b103      	cbz	r3, 80049ee <_close_r+0x1a>
 80049ec:	6023      	str	r3, [r4, #0]
 80049ee:	bd38      	pop	{r3, r4, r5, pc}
 80049f0:	200001ec 	.word	0x200001ec

080049f4 <_fstat_r>:
 80049f4:	b538      	push	{r3, r4, r5, lr}
 80049f6:	4d07      	ldr	r5, [pc, #28]	; (8004a14 <_fstat_r+0x20>)
 80049f8:	2300      	movs	r3, #0
 80049fa:	4604      	mov	r4, r0
 80049fc:	4608      	mov	r0, r1
 80049fe:	4611      	mov	r1, r2
 8004a00:	602b      	str	r3, [r5, #0]
 8004a02:	f7fc fb78 	bl	80010f6 <_fstat>
 8004a06:	1c43      	adds	r3, r0, #1
 8004a08:	d102      	bne.n	8004a10 <_fstat_r+0x1c>
 8004a0a:	682b      	ldr	r3, [r5, #0]
 8004a0c:	b103      	cbz	r3, 8004a10 <_fstat_r+0x1c>
 8004a0e:	6023      	str	r3, [r4, #0]
 8004a10:	bd38      	pop	{r3, r4, r5, pc}
 8004a12:	bf00      	nop
 8004a14:	200001ec 	.word	0x200001ec

08004a18 <_isatty_r>:
 8004a18:	b538      	push	{r3, r4, r5, lr}
 8004a1a:	4d06      	ldr	r5, [pc, #24]	; (8004a34 <_isatty_r+0x1c>)
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	4604      	mov	r4, r0
 8004a20:	4608      	mov	r0, r1
 8004a22:	602b      	str	r3, [r5, #0]
 8004a24:	f7fc fb77 	bl	8001116 <_isatty>
 8004a28:	1c43      	adds	r3, r0, #1
 8004a2a:	d102      	bne.n	8004a32 <_isatty_r+0x1a>
 8004a2c:	682b      	ldr	r3, [r5, #0]
 8004a2e:	b103      	cbz	r3, 8004a32 <_isatty_r+0x1a>
 8004a30:	6023      	str	r3, [r4, #0]
 8004a32:	bd38      	pop	{r3, r4, r5, pc}
 8004a34:	200001ec 	.word	0x200001ec

08004a38 <_lseek_r>:
 8004a38:	b538      	push	{r3, r4, r5, lr}
 8004a3a:	4d07      	ldr	r5, [pc, #28]	; (8004a58 <_lseek_r+0x20>)
 8004a3c:	4604      	mov	r4, r0
 8004a3e:	4608      	mov	r0, r1
 8004a40:	4611      	mov	r1, r2
 8004a42:	2200      	movs	r2, #0
 8004a44:	602a      	str	r2, [r5, #0]
 8004a46:	461a      	mov	r2, r3
 8004a48:	f7fc fb70 	bl	800112c <_lseek>
 8004a4c:	1c43      	adds	r3, r0, #1
 8004a4e:	d102      	bne.n	8004a56 <_lseek_r+0x1e>
 8004a50:	682b      	ldr	r3, [r5, #0]
 8004a52:	b103      	cbz	r3, 8004a56 <_lseek_r+0x1e>
 8004a54:	6023      	str	r3, [r4, #0]
 8004a56:	bd38      	pop	{r3, r4, r5, pc}
 8004a58:	200001ec 	.word	0x200001ec

08004a5c <__malloc_lock>:
 8004a5c:	4801      	ldr	r0, [pc, #4]	; (8004a64 <__malloc_lock+0x8>)
 8004a5e:	f7ff be0b 	b.w	8004678 <__retarget_lock_acquire_recursive>
 8004a62:	bf00      	nop
 8004a64:	200001e0 	.word	0x200001e0

08004a68 <__malloc_unlock>:
 8004a68:	4801      	ldr	r0, [pc, #4]	; (8004a70 <__malloc_unlock+0x8>)
 8004a6a:	f7ff be06 	b.w	800467a <__retarget_lock_release_recursive>
 8004a6e:	bf00      	nop
 8004a70:	200001e0 	.word	0x200001e0

08004a74 <_read_r>:
 8004a74:	b538      	push	{r3, r4, r5, lr}
 8004a76:	4d07      	ldr	r5, [pc, #28]	; (8004a94 <_read_r+0x20>)
 8004a78:	4604      	mov	r4, r0
 8004a7a:	4608      	mov	r0, r1
 8004a7c:	4611      	mov	r1, r2
 8004a7e:	2200      	movs	r2, #0
 8004a80:	602a      	str	r2, [r5, #0]
 8004a82:	461a      	mov	r2, r3
 8004a84:	f7fc faf2 	bl	800106c <_read>
 8004a88:	1c43      	adds	r3, r0, #1
 8004a8a:	d102      	bne.n	8004a92 <_read_r+0x1e>
 8004a8c:	682b      	ldr	r3, [r5, #0]
 8004a8e:	b103      	cbz	r3, 8004a92 <_read_r+0x1e>
 8004a90:	6023      	str	r3, [r4, #0]
 8004a92:	bd38      	pop	{r3, r4, r5, pc}
 8004a94:	200001ec 	.word	0x200001ec

08004a98 <_init>:
 8004a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a9a:	bf00      	nop
 8004a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a9e:	bc08      	pop	{r3}
 8004aa0:	469e      	mov	lr, r3
 8004aa2:	4770      	bx	lr

08004aa4 <_fini>:
 8004aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aa6:	bf00      	nop
 8004aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aaa:	bc08      	pop	{r3}
 8004aac:	469e      	mov	lr, r3
 8004aae:	4770      	bx	lr
