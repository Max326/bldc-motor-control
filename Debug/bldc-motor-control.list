
bldc-motor-control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000557c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  0800571c  0800571c  0001571c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005810  08005810  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005810  08005810  00015810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005818  08005818  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005818  08005818  00015818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800581c  0800581c  0001581c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005820  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  20000070  08005890  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000023c  08005890  0002023c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f426  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020ab  00000000  00000000  0002f4c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc0  00000000  00000000  00031578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cf8  00000000  00000000  00032338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000184e0  00000000  00000000  00033030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f1c8  00000000  00000000  0004b510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b1cb  00000000  00000000  0005a6d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f58a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041e4  00000000  00000000  000f58f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005704 	.word	0x08005704

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08005704 	.word	0x08005704

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b088      	sub	sp, #32
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058a:	f001 f83f 	bl	800160c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058e:	f000 f87f 	bl	8000690 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000592:	f000 fae5 	bl	8000b60 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000596:	f000 f8e3 	bl	8000760 <MX_ADC1_Init>
  MX_USART6_UART_Init();
 800059a:	f000 fab7 	bl	8000b0c <MX_USART6_UART_Init>
  MX_TIM1_Init();
 800059e:	f000 f931 	bl	8000804 <MX_TIM1_Init>
  MX_TIM3_Init();
 80005a2:	f000 fa5b 	bl	8000a5c <MX_TIM3_Init>
  MX_TIM2_Init();
 80005a6:	f000 f9cb 	bl	8000940 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */


  uint32_t time = HAL_GetTick();
 80005aa:	f001 f895 	bl	80016d8 <HAL_GetTick>
 80005ae:	61f8      	str	r0, [r7, #28]
  uint32_t max_time = 3000;
 80005b0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80005b4:	61bb      	str	r3, [r7, #24]
  uint32_t dir = CW;
 80005b6:	2301      	movs	r3, #1
 80005b8:	617b      	str	r3, [r7, #20]
  uint32_t speed = 50;
 80005ba:	2332      	movs	r3, #50	; 0x32
 80005bc:	613b      	str	r3, [r7, #16]
  uint32_t max_speed = 100;
 80005be:	2364      	movs	r3, #100	; 0x64
 80005c0:	60fb      	str	r3, [r7, #12]

  uint32_t pot_max = 4095;
 80005c2:	f640 73ff 	movw	r3, #4095	; 0xfff
 80005c6:	60bb      	str	r3, [r7, #8]

  bldc_motor_init(&htim1, &htim3);
 80005c8:	4929      	ldr	r1, [pc, #164]	; (8000670 <main+0xec>)
 80005ca:	482a      	ldr	r0, [pc, #168]	; (8000674 <main+0xf0>)
 80005cc:	f000 fb7e 	bl	8000ccc <bldc_motor_init>
  bldc_motor_set_speed(speed, dir);
 80005d0:	697b      	ldr	r3, [r7, #20]
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	4619      	mov	r1, r3
 80005d6:	6938      	ldr	r0, [r7, #16]
 80005d8:	f000 fbb8 	bl	8000d4c <bldc_motor_set_speed>

  printf("motor initialized\n");
 80005dc:	4826      	ldr	r0, [pc, #152]	; (8000678 <main+0xf4>)
 80005de:	f004 f913 	bl	8004808 <puts>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

//	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
	HAL_GPIO_TogglePin(LDN_GPIO_Port, LDN_Pin);
 80005e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005e6:	4825      	ldr	r0, [pc, #148]	; (800067c <main+0xf8>)
 80005e8:	f001 ff13 	bl	8002412 <HAL_GPIO_TogglePin>

//	bldc_motor_six_step_algorithm();
//	HAL_Delay(100);


	HAL_ADC_Start(&hadc1);
 80005ec:	4824      	ldr	r0, [pc, #144]	; (8000680 <main+0xfc>)
 80005ee:	f001 f8e7 	bl	80017c0 <HAL_ADC_Start>


	if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 80005f2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80005f6:	4822      	ldr	r0, [pc, #136]	; (8000680 <main+0xfc>)
 80005f8:	f001 f996 	bl	8001928 <HAL_ADC_PollForConversion>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d106      	bne.n	8000610 <main+0x8c>
		pot = HAL_ADC_GetValue(&hadc1);
 8000602:	481f      	ldr	r0, [pc, #124]	; (8000680 <main+0xfc>)
 8000604:	f001 fa1b 	bl	8001a3e <HAL_ADC_GetValue>
 8000608:	4603      	mov	r3, r0
 800060a:	4a1e      	ldr	r2, [pc, #120]	; (8000684 <main+0x100>)
 800060c:	6013      	str	r3, [r2, #0]
 800060e:	e002      	b.n	8000616 <main+0x92>
//		printf("Potentiometer value: %lu\n", pot);
	} else {
		printf("ADC PollForConversion failed\n");
 8000610:	481d      	ldr	r0, [pc, #116]	; (8000688 <main+0x104>)
 8000612:	f004 f8f9 	bl	8004808 <puts>
	}


	HAL_Delay(200);
 8000616:	20c8      	movs	r0, #200	; 0xc8
 8000618:	f001 f86a 	bl	80016f0 <HAL_Delay>

	float pot_ratio = (float)pot / (float)pot_max;
 800061c:	4b19      	ldr	r3, [pc, #100]	; (8000684 <main+0x100>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	ee07 3a90 	vmov	s15, r3
 8000624:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	ee07 3a90 	vmov	s15, r3
 800062e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000632:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000636:	edc7 7a01 	vstr	s15, [r7, #4]
	int new_speed = (int)(pot_ratio * max_speed);
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	ee07 3a90 	vmov	s15, r3
 8000640:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000644:	edd7 7a01 	vldr	s15, [r7, #4]
 8000648:	ee67 7a27 	vmul.f32	s15, s14, s15
 800064c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000650:	ee17 3a90 	vmov	r3, s15
 8000654:	603b      	str	r3, [r7, #0]

	bldc_motor_set_speed(new_speed, dir);
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	697a      	ldr	r2, [r7, #20]
 800065a:	b2d2      	uxtb	r2, r2
 800065c:	4611      	mov	r1, r2
 800065e:	4618      	mov	r0, r3
 8000660:	f000 fb74 	bl	8000d4c <bldc_motor_set_speed>

	printf("New speed: %lu\n", new_speed);
 8000664:	6839      	ldr	r1, [r7, #0]
 8000666:	4809      	ldr	r0, [pc, #36]	; (800068c <main+0x108>)
 8000668:	f004 f848 	bl	80046fc <iprintf>
  {
 800066c:	e7b9      	b.n	80005e2 <main+0x5e>
 800066e:	bf00      	nop
 8000670:	20000164 	.word	0x20000164
 8000674:	200000d4 	.word	0x200000d4
 8000678:	0800571c 	.word	0x0800571c
 800067c:	40020c00 	.word	0x40020c00
 8000680:	2000008c 	.word	0x2000008c
 8000684:	200001f0 	.word	0x200001f0
 8000688:	08005730 	.word	0x08005730
 800068c:	08005750 	.word	0x08005750

08000690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b094      	sub	sp, #80	; 0x50
 8000694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000696:	f107 0320 	add.w	r3, r7, #32
 800069a:	2230      	movs	r2, #48	; 0x30
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f004 f824 	bl	80046ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a4:	f107 030c 	add.w	r3, r7, #12
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b4:	2300      	movs	r3, #0
 80006b6:	60bb      	str	r3, [r7, #8]
 80006b8:	4b27      	ldr	r3, [pc, #156]	; (8000758 <SystemClock_Config+0xc8>)
 80006ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006bc:	4a26      	ldr	r2, [pc, #152]	; (8000758 <SystemClock_Config+0xc8>)
 80006be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c2:	6413      	str	r3, [r2, #64]	; 0x40
 80006c4:	4b24      	ldr	r3, [pc, #144]	; (8000758 <SystemClock_Config+0xc8>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006cc:	60bb      	str	r3, [r7, #8]
 80006ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d0:	2300      	movs	r3, #0
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	4b21      	ldr	r3, [pc, #132]	; (800075c <SystemClock_Config+0xcc>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a20      	ldr	r2, [pc, #128]	; (800075c <SystemClock_Config+0xcc>)
 80006da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006de:	6013      	str	r3, [r2, #0]
 80006e0:	4b1e      	ldr	r3, [pc, #120]	; (800075c <SystemClock_Config+0xcc>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006e8:	607b      	str	r3, [r7, #4]
 80006ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ec:	2302      	movs	r3, #2
 80006ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f0:	2301      	movs	r3, #1
 80006f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f4:	2310      	movs	r3, #16
 80006f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f8:	2302      	movs	r3, #2
 80006fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006fc:	2300      	movs	r3, #0
 80006fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000700:	2308      	movs	r3, #8
 8000702:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000704:	2354      	movs	r3, #84	; 0x54
 8000706:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000708:	2302      	movs	r3, #2
 800070a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800070c:	2304      	movs	r3, #4
 800070e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000710:	f107 0320 	add.w	r3, r7, #32
 8000714:	4618      	mov	r0, r3
 8000716:	f001 fe97 	bl	8002448 <HAL_RCC_OscConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000720:	f000 face 	bl	8000cc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000724:	230f      	movs	r3, #15
 8000726:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000728:	2302      	movs	r3, #2
 800072a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000730:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000734:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000736:	2300      	movs	r3, #0
 8000738:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800073a:	f107 030c 	add.w	r3, r7, #12
 800073e:	2102      	movs	r1, #2
 8000740:	4618      	mov	r0, r3
 8000742:	f002 f8f9 	bl	8002938 <HAL_RCC_ClockConfig>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800074c:	f000 fab8 	bl	8000cc0 <Error_Handler>
  }
}
 8000750:	bf00      	nop
 8000752:	3750      	adds	r7, #80	; 0x50
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40023800 	.word	0x40023800
 800075c:	40007000 	.word	0x40007000

08000760 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000766:	463b      	mov	r3, r7
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000772:	4b21      	ldr	r3, [pc, #132]	; (80007f8 <MX_ADC1_Init+0x98>)
 8000774:	4a21      	ldr	r2, [pc, #132]	; (80007fc <MX_ADC1_Init+0x9c>)
 8000776:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000778:	4b1f      	ldr	r3, [pc, #124]	; (80007f8 <MX_ADC1_Init+0x98>)
 800077a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800077e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000780:	4b1d      	ldr	r3, [pc, #116]	; (80007f8 <MX_ADC1_Init+0x98>)
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000786:	4b1c      	ldr	r3, [pc, #112]	; (80007f8 <MX_ADC1_Init+0x98>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800078c:	4b1a      	ldr	r3, [pc, #104]	; (80007f8 <MX_ADC1_Init+0x98>)
 800078e:	2201      	movs	r2, #1
 8000790:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000792:	4b19      	ldr	r3, [pc, #100]	; (80007f8 <MX_ADC1_Init+0x98>)
 8000794:	2200      	movs	r2, #0
 8000796:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800079a:	4b17      	ldr	r3, [pc, #92]	; (80007f8 <MX_ADC1_Init+0x98>)
 800079c:	2200      	movs	r2, #0
 800079e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007a0:	4b15      	ldr	r3, [pc, #84]	; (80007f8 <MX_ADC1_Init+0x98>)
 80007a2:	4a17      	ldr	r2, [pc, #92]	; (8000800 <MX_ADC1_Init+0xa0>)
 80007a4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007a6:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <MX_ADC1_Init+0x98>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007ac:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <MX_ADC1_Init+0x98>)
 80007ae:	2201      	movs	r2, #1
 80007b0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007b2:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <MX_ADC1_Init+0x98>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007ba:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <MX_ADC1_Init+0x98>)
 80007bc:	2201      	movs	r2, #1
 80007be:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007c0:	480d      	ldr	r0, [pc, #52]	; (80007f8 <MX_ADC1_Init+0x98>)
 80007c2:	f000 ffb9 	bl	8001738 <HAL_ADC_Init>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80007cc:	f000 fa78 	bl	8000cc0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007d0:	2300      	movs	r3, #0
 80007d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007d4:	2301      	movs	r3, #1
 80007d6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007d8:	2300      	movs	r3, #0
 80007da:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007dc:	463b      	mov	r3, r7
 80007de:	4619      	mov	r1, r3
 80007e0:	4805      	ldr	r0, [pc, #20]	; (80007f8 <MX_ADC1_Init+0x98>)
 80007e2:	f001 f939 	bl	8001a58 <HAL_ADC_ConfigChannel>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007ec:	f000 fa68 	bl	8000cc0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007f0:	bf00      	nop
 80007f2:	3710      	adds	r7, #16
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	2000008c 	.word	0x2000008c
 80007fc:	40012000 	.word	0x40012000
 8000800:	0f000001 	.word	0x0f000001

08000804 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b092      	sub	sp, #72	; 0x48
 8000808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800080a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000814:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
 8000822:	611a      	str	r2, [r3, #16]
 8000824:	615a      	str	r2, [r3, #20]
 8000826:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	2220      	movs	r2, #32
 800082c:	2100      	movs	r1, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f003 ff5c 	bl	80046ec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000834:	4b40      	ldr	r3, [pc, #256]	; (8000938 <MX_TIM1_Init+0x134>)
 8000836:	4a41      	ldr	r2, [pc, #260]	; (800093c <MX_TIM1_Init+0x138>)
 8000838:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 42-1;
 800083a:	4b3f      	ldr	r3, [pc, #252]	; (8000938 <MX_TIM1_Init+0x134>)
 800083c:	2229      	movs	r2, #41	; 0x29
 800083e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000840:	4b3d      	ldr	r3, [pc, #244]	; (8000938 <MX_TIM1_Init+0x134>)
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000846:	4b3c      	ldr	r3, [pc, #240]	; (8000938 <MX_TIM1_Init+0x134>)
 8000848:	2263      	movs	r2, #99	; 0x63
 800084a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800084c:	4b3a      	ldr	r3, [pc, #232]	; (8000938 <MX_TIM1_Init+0x134>)
 800084e:	2200      	movs	r2, #0
 8000850:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000852:	4b39      	ldr	r3, [pc, #228]	; (8000938 <MX_TIM1_Init+0x134>)
 8000854:	2200      	movs	r2, #0
 8000856:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000858:	4b37      	ldr	r3, [pc, #220]	; (8000938 <MX_TIM1_Init+0x134>)
 800085a:	2200      	movs	r2, #0
 800085c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800085e:	4836      	ldr	r0, [pc, #216]	; (8000938 <MX_TIM1_Init+0x134>)
 8000860:	f002 fb43 	bl	8002eea <HAL_TIM_PWM_Init>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 800086a:	f000 fa29 	bl	8000cc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800086e:	2300      	movs	r3, #0
 8000870:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000872:	2300      	movs	r3, #0
 8000874:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000876:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800087a:	4619      	mov	r1, r3
 800087c:	482e      	ldr	r0, [pc, #184]	; (8000938 <MX_TIM1_Init+0x134>)
 800087e:	f003 fa7f 	bl	8003d80 <HAL_TIMEx_MasterConfigSynchronization>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8000888:	f000 fa1a 	bl	8000cc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800088c:	2360      	movs	r3, #96	; 0x60
 800088e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000894:	2300      	movs	r3, #0
 8000896:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000898:	2300      	movs	r3, #0
 800089a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800089c:	2300      	movs	r3, #0
 800089e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008a0:	2300      	movs	r3, #0
 80008a2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008a4:	2300      	movs	r3, #0
 80008a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ac:	2200      	movs	r2, #0
 80008ae:	4619      	mov	r1, r3
 80008b0:	4821      	ldr	r0, [pc, #132]	; (8000938 <MX_TIM1_Init+0x134>)
 80008b2:	f002 fd7d 	bl	80033b0 <HAL_TIM_PWM_ConfigChannel>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 80008bc:	f000 fa00 	bl	8000cc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c4:	2208      	movs	r2, #8
 80008c6:	4619      	mov	r1, r3
 80008c8:	481b      	ldr	r0, [pc, #108]	; (8000938 <MX_TIM1_Init+0x134>)
 80008ca:	f002 fd71 	bl	80033b0 <HAL_TIM_PWM_ConfigChannel>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 80008d4:	f000 f9f4 	bl	8000cc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80008d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008dc:	220c      	movs	r2, #12
 80008de:	4619      	mov	r1, r3
 80008e0:	4815      	ldr	r0, [pc, #84]	; (8000938 <MX_TIM1_Init+0x134>)
 80008e2:	f002 fd65 	bl	80033b0 <HAL_TIM_PWM_ConfigChannel>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 80008ec:	f000 f9e8 	bl	8000cc0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 80008f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80008f4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 80008f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008fa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008fc:	2300      	movs	r3, #0
 80008fe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000900:	2300      	movs	r3, #0
 8000902:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8000904:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000908:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800090a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800090e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8000910:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000914:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000916:	1d3b      	adds	r3, r7, #4
 8000918:	4619      	mov	r1, r3
 800091a:	4807      	ldr	r0, [pc, #28]	; (8000938 <MX_TIM1_Init+0x134>)
 800091c:	f003 fa9e 	bl	8003e5c <HAL_TIMEx_ConfigBreakDeadTime>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8000926:	f000 f9cb 	bl	8000cc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800092a:	4803      	ldr	r0, [pc, #12]	; (8000938 <MX_TIM1_Init+0x134>)
 800092c:	f000 fc92 	bl	8001254 <HAL_TIM_MspPostInit>

}
 8000930:	bf00      	nop
 8000932:	3748      	adds	r7, #72	; 0x48
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	200000d4 	.word	0x200000d4
 800093c:	40010000 	.word	0x40010000

08000940 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b08e      	sub	sp, #56	; 0x38
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000946:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]
 8000950:	609a      	str	r2, [r3, #8]
 8000952:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000954:	f107 0320 	add.w	r3, r7, #32
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	60da      	str	r2, [r3, #12]
 800096a:	611a      	str	r2, [r3, #16]
 800096c:	615a      	str	r2, [r3, #20]
 800096e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000970:	4b39      	ldr	r3, [pc, #228]	; (8000a58 <MX_TIM2_Init+0x118>)
 8000972:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000976:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000978:	4b37      	ldr	r3, [pc, #220]	; (8000a58 <MX_TIM2_Init+0x118>)
 800097a:	2200      	movs	r2, #0
 800097c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800097e:	4b36      	ldr	r3, [pc, #216]	; (8000a58 <MX_TIM2_Init+0x118>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000984:	4b34      	ldr	r3, [pc, #208]	; (8000a58 <MX_TIM2_Init+0x118>)
 8000986:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800098a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800098c:	4b32      	ldr	r3, [pc, #200]	; (8000a58 <MX_TIM2_Init+0x118>)
 800098e:	2200      	movs	r2, #0
 8000990:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000992:	4b31      	ldr	r3, [pc, #196]	; (8000a58 <MX_TIM2_Init+0x118>)
 8000994:	2200      	movs	r2, #0
 8000996:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000998:	482f      	ldr	r0, [pc, #188]	; (8000a58 <MX_TIM2_Init+0x118>)
 800099a:	f002 f9ad 	bl	8002cf8 <HAL_TIM_Base_Init>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80009a4:	f000 f98c 	bl	8000cc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ac:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009b2:	4619      	mov	r1, r3
 80009b4:	4828      	ldr	r0, [pc, #160]	; (8000a58 <MX_TIM2_Init+0x118>)
 80009b6:	f002 fdbd 	bl	8003534 <HAL_TIM_ConfigClockSource>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80009c0:	f000 f97e 	bl	8000cc0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80009c4:	4824      	ldr	r0, [pc, #144]	; (8000a58 <MX_TIM2_Init+0x118>)
 80009c6:	f002 fa41 	bl	8002e4c <HAL_TIM_OC_Init>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80009d0:	f000 f976 	bl	8000cc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009d4:	2300      	movs	r3, #0
 80009d6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009d8:	2300      	movs	r3, #0
 80009da:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009dc:	f107 0320 	add.w	r3, r7, #32
 80009e0:	4619      	mov	r1, r3
 80009e2:	481d      	ldr	r0, [pc, #116]	; (8000a58 <MX_TIM2_Init+0x118>)
 80009e4:	f003 f9cc 	bl	8003d80 <HAL_TIMEx_MasterConfigSynchronization>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80009ee:	f000 f967 	bl	8000cc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80009f2:	2330      	movs	r3, #48	; 0x30
 80009f4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80009f6:	2300      	movs	r3, #0
 80009f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009fa:	2300      	movs	r3, #0
 80009fc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009fe:	2300      	movs	r3, #0
 8000a00:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a02:	1d3b      	adds	r3, r7, #4
 8000a04:	2200      	movs	r2, #0
 8000a06:	4619      	mov	r1, r3
 8000a08:	4813      	ldr	r0, [pc, #76]	; (8000a58 <MX_TIM2_Init+0x118>)
 8000a0a:	f002 fc75 	bl	80032f8 <HAL_TIM_OC_ConfigChannel>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000a14:	f000 f954 	bl	8000cc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a1c:	1d3b      	adds	r3, r7, #4
 8000a1e:	2204      	movs	r2, #4
 8000a20:	4619      	mov	r1, r3
 8000a22:	480d      	ldr	r0, [pc, #52]	; (8000a58 <MX_TIM2_Init+0x118>)
 8000a24:	f002 fc68 	bl	80032f8 <HAL_TIM_OC_ConfigChannel>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8000a2e:	f000 f947 	bl	8000cc0 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a32:	1d3b      	adds	r3, r7, #4
 8000a34:	2208      	movs	r2, #8
 8000a36:	4619      	mov	r1, r3
 8000a38:	4807      	ldr	r0, [pc, #28]	; (8000a58 <MX_TIM2_Init+0x118>)
 8000a3a:	f002 fc5d 	bl	80032f8 <HAL_TIM_OC_ConfigChannel>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 8000a44:	f000 f93c 	bl	8000cc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a48:	4803      	ldr	r0, [pc, #12]	; (8000a58 <MX_TIM2_Init+0x118>)
 8000a4a:	f000 fc03 	bl	8001254 <HAL_TIM_MspPostInit>

}
 8000a4e:	bf00      	nop
 8000a50:	3738      	adds	r7, #56	; 0x38
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	2000011c 	.word	0x2000011c

08000a5c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08a      	sub	sp, #40	; 0x28
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a62:	f107 0320 	add.w	r3, r7, #32
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
 8000a6a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a6c:	1d3b      	adds	r3, r7, #4
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
 8000a74:	609a      	str	r2, [r3, #8]
 8000a76:	60da      	str	r2, [r3, #12]
 8000a78:	611a      	str	r2, [r3, #16]
 8000a7a:	615a      	str	r2, [r3, #20]
 8000a7c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a7e:	4b21      	ldr	r3, [pc, #132]	; (8000b04 <MX_TIM3_Init+0xa8>)
 8000a80:	4a21      	ldr	r2, [pc, #132]	; (8000b08 <MX_TIM3_Init+0xac>)
 8000a82:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4200-1;
 8000a84:	4b1f      	ldr	r3, [pc, #124]	; (8000b04 <MX_TIM3_Init+0xa8>)
 8000a86:	f241 0267 	movw	r2, #4199	; 0x1067
 8000a8a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a8c:	4b1d      	ldr	r3, [pc, #116]	; (8000b04 <MX_TIM3_Init+0xa8>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000a92:	4b1c      	ldr	r3, [pc, #112]	; (8000b04 <MX_TIM3_Init+0xa8>)
 8000a94:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a98:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a9a:	4b1a      	ldr	r3, [pc, #104]	; (8000b04 <MX_TIM3_Init+0xa8>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aa0:	4b18      	ldr	r3, [pc, #96]	; (8000b04 <MX_TIM3_Init+0xa8>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000aa6:	4817      	ldr	r0, [pc, #92]	; (8000b04 <MX_TIM3_Init+0xa8>)
 8000aa8:	f002 f9d0 	bl	8002e4c <HAL_TIM_OC_Init>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000ab2:	f000 f905 	bl	8000cc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000ab6:	2320      	movs	r3, #32
 8000ab8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aba:	2300      	movs	r3, #0
 8000abc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000abe:	f107 0320 	add.w	r3, r7, #32
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	480f      	ldr	r0, [pc, #60]	; (8000b04 <MX_TIM3_Init+0xa8>)
 8000ac6:	f003 f95b 	bl	8003d80 <HAL_TIMEx_MasterConfigSynchronization>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000ad0:	f000 f8f6 	bl	8000cc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000adc:	2300      	movs	r3, #0
 8000ade:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4806      	ldr	r0, [pc, #24]	; (8000b04 <MX_TIM3_Init+0xa8>)
 8000aec:	f002 fc04 	bl	80032f8 <HAL_TIM_OC_ConfigChannel>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000af6:	f000 f8e3 	bl	8000cc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000afa:	bf00      	nop
 8000afc:	3728      	adds	r7, #40	; 0x28
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000164 	.word	0x20000164
 8000b08:	40000400 	.word	0x40000400

08000b0c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000b10:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <MX_USART6_UART_Init+0x4c>)
 8000b12:	4a12      	ldr	r2, [pc, #72]	; (8000b5c <MX_USART6_UART_Init+0x50>)
 8000b14:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000b16:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <MX_USART6_UART_Init+0x4c>)
 8000b18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b1c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <MX_USART6_UART_Init+0x4c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000b24:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <MX_USART6_UART_Init+0x4c>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000b2a:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <MX_USART6_UART_Init+0x4c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000b30:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <MX_USART6_UART_Init+0x4c>)
 8000b32:	220c      	movs	r2, #12
 8000b34:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b36:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <MX_USART6_UART_Init+0x4c>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b3c:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <MX_USART6_UART_Init+0x4c>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000b42:	4805      	ldr	r0, [pc, #20]	; (8000b58 <MX_USART6_UART_Init+0x4c>)
 8000b44:	f003 f9e6 	bl	8003f14 <HAL_UART_Init>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000b4e:	f000 f8b7 	bl	8000cc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	200001ac 	.word	0x200001ac
 8000b5c:	40011400 	.word	0x40011400

08000b60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08a      	sub	sp, #40	; 0x28
 8000b64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b66:	f107 0314 	add.w	r3, r7, #20
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
 8000b70:	609a      	str	r2, [r3, #8]
 8000b72:	60da      	str	r2, [r3, #12]
 8000b74:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	613b      	str	r3, [r7, #16]
 8000b7a:	4b39      	ldr	r3, [pc, #228]	; (8000c60 <MX_GPIO_Init+0x100>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	4a38      	ldr	r2, [pc, #224]	; (8000c60 <MX_GPIO_Init+0x100>)
 8000b80:	f043 0301 	orr.w	r3, r3, #1
 8000b84:	6313      	str	r3, [r2, #48]	; 0x30
 8000b86:	4b36      	ldr	r3, [pc, #216]	; (8000c60 <MX_GPIO_Init+0x100>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	4b32      	ldr	r3, [pc, #200]	; (8000c60 <MX_GPIO_Init+0x100>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a31      	ldr	r2, [pc, #196]	; (8000c60 <MX_GPIO_Init+0x100>)
 8000b9c:	f043 0310 	orr.w	r3, r3, #16
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4b2f      	ldr	r3, [pc, #188]	; (8000c60 <MX_GPIO_Init+0x100>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f003 0310 	and.w	r3, r3, #16
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60bb      	str	r3, [r7, #8]
 8000bb2:	4b2b      	ldr	r3, [pc, #172]	; (8000c60 <MX_GPIO_Init+0x100>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	4a2a      	ldr	r2, [pc, #168]	; (8000c60 <MX_GPIO_Init+0x100>)
 8000bb8:	f043 0302 	orr.w	r3, r3, #2
 8000bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bbe:	4b28      	ldr	r3, [pc, #160]	; (8000c60 <MX_GPIO_Init+0x100>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	f003 0302 	and.w	r3, r3, #2
 8000bc6:	60bb      	str	r3, [r7, #8]
 8000bc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	607b      	str	r3, [r7, #4]
 8000bce:	4b24      	ldr	r3, [pc, #144]	; (8000c60 <MX_GPIO_Init+0x100>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	4a23      	ldr	r2, [pc, #140]	; (8000c60 <MX_GPIO_Init+0x100>)
 8000bd4:	f043 0308 	orr.w	r3, r3, #8
 8000bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bda:	4b21      	ldr	r3, [pc, #132]	; (8000c60 <MX_GPIO_Init+0x100>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	f003 0308 	and.w	r3, r3, #8
 8000be2:	607b      	str	r3, [r7, #4]
 8000be4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	603b      	str	r3, [r7, #0]
 8000bea:	4b1d      	ldr	r3, [pc, #116]	; (8000c60 <MX_GPIO_Init+0x100>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	4a1c      	ldr	r2, [pc, #112]	; (8000c60 <MX_GPIO_Init+0x100>)
 8000bf0:	f043 0304 	orr.w	r3, r3, #4
 8000bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf6:	4b1a      	ldr	r3, [pc, #104]	; (8000c60 <MX_GPIO_Init+0x100>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	f003 0304 	and.w	r3, r3, #4
 8000bfe:	603b      	str	r3, [r7, #0]
 8000c00:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PWM1EN_Pin|PWM2EN_Pin|PWM3EN_Pin, GPIO_PIN_RESET);
 8000c02:	2200      	movs	r2, #0
 8000c04:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8000c08:	4816      	ldr	r0, [pc, #88]	; (8000c64 <MX_GPIO_Init+0x104>)
 8000c0a:	f001 fbe9 	bl	80023e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD3_Pin|LD4_Pin|LD5_Pin|LDN_Pin, GPIO_PIN_RESET);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000c14:	4814      	ldr	r0, [pc, #80]	; (8000c68 <MX_GPIO_Init+0x108>)
 8000c16:	f001 fbe3 	bl	80023e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PWM1EN_Pin PWM2EN_Pin PWM3EN_Pin */
  GPIO_InitStruct.Pin = PWM1EN_Pin|PWM2EN_Pin|PWM3EN_Pin;
 8000c1a:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000c1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c20:	2301      	movs	r3, #1
 8000c22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	4619      	mov	r1, r3
 8000c32:	480c      	ldr	r0, [pc, #48]	; (8000c64 <MX_GPIO_Init+0x104>)
 8000c34:	f001 fa50 	bl	80020d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin LD5_Pin LDN_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin|LD5_Pin|LDN_Pin;
 8000c38:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000c3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c46:	2302      	movs	r3, #2
 8000c48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c4a:	f107 0314 	add.w	r3, r7, #20
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4805      	ldr	r0, [pc, #20]	; (8000c68 <MX_GPIO_Init+0x108>)
 8000c52:	f001 fa41 	bl	80020d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c56:	bf00      	nop
 8000c58:	3728      	adds	r7, #40	; 0x28
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40023800 	.word	0x40023800
 8000c64:	40020400 	.word	0x40020400
 8000c68:	40020c00 	.word	0x40020c00

08000c6c <HAL_TIMEx_CommutCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
	bldc_motor_six_step_algorithm();
 8000c74:	f000 f8c2 	bl	8000dfc <bldc_motor_six_step_algorithm>
}
 8000c78:	bf00      	nop
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <__io_putchar>:

int __io_putchar(int ch)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
    if (ch == '\n') {
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2b0a      	cmp	r3, #10
 8000c8c:	d109      	bne.n	8000ca2 <__io_putchar+0x22>
        uint8_t ch6 = '\r';
 8000c8e:	230d      	movs	r3, #13
 8000c90:	73fb      	strb	r3, [r7, #15]
        HAL_UART_Transmit(&huart6, &ch6, 1, HAL_MAX_DELAY);
 8000c92:	f107 010f 	add.w	r1, r7, #15
 8000c96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	4807      	ldr	r0, [pc, #28]	; (8000cbc <__io_putchar+0x3c>)
 8000c9e:	f003 f986 	bl	8003fae <HAL_UART_Transmit>
    }

    HAL_UART_Transmit(&huart6, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000ca2:	1d39      	adds	r1, r7, #4
 8000ca4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ca8:	2201      	movs	r2, #1
 8000caa:	4804      	ldr	r0, [pc, #16]	; (8000cbc <__io_putchar+0x3c>)
 8000cac:	f003 f97f 	bl	8003fae <HAL_UART_Transmit>
    return 1;
 8000cb0:	2301      	movs	r3, #1
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3710      	adds	r7, #16
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	200001ac 	.word	0x200001ac

08000cc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc4:	b672      	cpsid	i
}
 8000cc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cc8:	e7fe      	b.n	8000cc8 <Error_Handler+0x8>
	...

08000ccc <bldc_motor_init>:
////	HAL_GPIO_WritePin(PH2_GPIO_Port, PH2_Pin, GPIO_PIN_SET);
////	HAL_GPIO_WritePin(PWM3EN_GPIO_Port, PWM3EN_Pin, GPIO_PIN_SET);
//}

void bldc_motor_init(TIM_HandleTypeDef *_tim_pwm, TIM_HandleTypeDef *_tim_com)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	6039      	str	r1, [r7, #0]
	bldc.tim_pwm = _tim_pwm;
 8000cd6:	4a1b      	ldr	r2, [pc, #108]	; (8000d44 <bldc_motor_init+0x78>)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6113      	str	r3, [r2, #16]
	bldc.tim_com = _tim_com;
 8000cdc:	4a19      	ldr	r2, [pc, #100]	; (8000d44 <bldc_motor_init+0x78>)
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	60d3      	str	r3, [r2, #12]

	bldc.step_number = 1;
 8000ce2:	4b18      	ldr	r3, [pc, #96]	; (8000d44 <bldc_motor_init+0x78>)
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	701a      	strb	r2, [r3, #0]
	bldc.speed_pulse = 0;
 8000ce8:	4b16      	ldr	r3, [pc, #88]	; (8000d44 <bldc_motor_init+0x78>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	605a      	str	r2, [r3, #4]
	bldc.dir = CW;
 8000cee:	4b15      	ldr	r3, [pc, #84]	; (8000d44 <bldc_motor_init+0x78>)
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	609a      	str	r2, [r3, #8]

	bldc_motor_Config_Channel_Init();
 8000cf4:	f000 f846 	bl	8000d84 <bldc_motor_Config_Channel_Init>

	__HAL_TIM_SET_AUTORELOAD(bldc.tim_com, ARR_TIM3_VALUE);
 8000cf8:	4b12      	ldr	r3, [pc, #72]	; (8000d44 <bldc_motor_init+0x78>)
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	2264      	movs	r2, #100	; 0x64
 8000d00:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d02:	4b10      	ldr	r3, [pc, #64]	; (8000d44 <bldc_motor_init+0x78>)
 8000d04:	68db      	ldr	r3, [r3, #12]
 8000d06:	2264      	movs	r2, #100	; 0x64
 8000d08:	60da      	str	r2, [r3, #12]

	HAL_TIM_Base_Start(bldc.tim_com);
 8000d0a:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <bldc_motor_init+0x78>)
 8000d0c:	68db      	ldr	r3, [r3, #12]
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f002 f842 	bl	8002d98 <HAL_TIM_Base_Start>
	HAL_TIMEx_ConfigCommutationEvent_IT(bldc.tim_pwm, TIM_TS_ITR2, TIM_COMMUTATION_TRGI);
 8000d14:	4b0b      	ldr	r3, [pc, #44]	; (8000d44 <bldc_motor_init+0x78>)
 8000d16:	691b      	ldr	r3, [r3, #16]
 8000d18:	2204      	movs	r2, #4
 8000d1a:	2120      	movs	r1, #32
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f002 ffce 	bl	8003cbe <HAL_TIMEx_ConfigCommutEvent_IT>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000d22:	2100      	movs	r1, #0
 8000d24:	4808      	ldr	r0, [pc, #32]	; (8000d48 <bldc_motor_init+0x7c>)
 8000d26:	f002 f92f 	bl	8002f88 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000d2a:	210c      	movs	r1, #12
 8000d2c:	4806      	ldr	r0, [pc, #24]	; (8000d48 <bldc_motor_init+0x7c>)
 8000d2e:	f002 f92b 	bl	8002f88 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000d32:	2108      	movs	r1, #8
 8000d34:	4804      	ldr	r0, [pc, #16]	; (8000d48 <bldc_motor_init+0x7c>)
 8000d36:	f002 f927 	bl	8002f88 <HAL_TIM_PWM_Start>
	// ???
//	bldc_motor_PWM_Config_Channel(bldc.speed_pulse, TIM_CHANNEL_1);
//	bldc_motor_PWM_Config_Channel(bldc.speed_pulse, TIM_CHANNEL_4);
//	bldc_motor_PWM_Config_Channel(bldc.speed_pulse, TIM_CHANNEL_3);

}
 8000d3a:	bf00      	nop
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	200001f4 	.word	0x200001f4
 8000d48:	200000d4 	.word	0x200000d4

08000d4c <bldc_motor_set_speed>:



void bldc_motor_set_speed(uint32_t speed, direction dir)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	460b      	mov	r3, r1
 8000d56:	70fb      	strb	r3, [r7, #3]
	if(speed > BLDC_MOTOR_MAX_SPEED)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2b64      	cmp	r3, #100	; 0x64
 8000d5c:	d903      	bls.n	8000d66 <bldc_motor_set_speed+0x1a>
	{
		bldc.speed_pulse = BLDC_MOTOR_MAX_SPEED;
 8000d5e:	4b08      	ldr	r3, [pc, #32]	; (8000d80 <bldc_motor_set_speed+0x34>)
 8000d60:	2264      	movs	r2, #100	; 0x64
 8000d62:	605a      	str	r2, [r3, #4]
 8000d64:	e002      	b.n	8000d6c <bldc_motor_set_speed+0x20>
	}
	else
	{
		bldc.speed_pulse = speed;
 8000d66:	4a06      	ldr	r2, [pc, #24]	; (8000d80 <bldc_motor_set_speed+0x34>)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6053      	str	r3, [r2, #4]
	}

	bldc.dir = dir;
 8000d6c:	78fb      	ldrb	r3, [r7, #3]
 8000d6e:	4a04      	ldr	r2, [pc, #16]	; (8000d80 <bldc_motor_set_speed+0x34>)
 8000d70:	6093      	str	r3, [r2, #8]
}
 8000d72:	bf00      	nop
 8000d74:	370c      	adds	r7, #12
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	200001f4 	.word	0x200001f4

08000d84 <bldc_motor_Config_Channel_Init>:
//}



void bldc_motor_Config_Channel_Init(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
	bldc.sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d88:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <bldc_motor_Config_Channel_Init+0x38>)
 8000d8a:	2260      	movs	r2, #96	; 0x60
 8000d8c:	615a      	str	r2, [r3, #20]
	bldc.sConfigOC.Pulse = 0;
 8000d8e:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <bldc_motor_Config_Channel_Init+0x38>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	619a      	str	r2, [r3, #24]
	bldc.sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d94:	4b09      	ldr	r3, [pc, #36]	; (8000dbc <bldc_motor_Config_Channel_Init+0x38>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	61da      	str	r2, [r3, #28]
	bldc.sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d9a:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <bldc_motor_Config_Channel_Init+0x38>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	621a      	str	r2, [r3, #32]
	bldc.sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <bldc_motor_Config_Channel_Init+0x38>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	625a      	str	r2, [r3, #36]	; 0x24
	bldc.sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000da6:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <bldc_motor_Config_Channel_Init+0x38>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	629a      	str	r2, [r3, #40]	; 0x28
	bldc.sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000dac:	4b03      	ldr	r3, [pc, #12]	; (8000dbc <bldc_motor_Config_Channel_Init+0x38>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	62da      	str	r2, [r3, #44]	; 0x2c

//	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1|TIM_IT_CC3|TIM_IT_CC4);

}
 8000db2:	bf00      	nop
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	200001f4 	.word	0x200001f4

08000dc0 <bldc_motor_set_pwm>:
//	HAL_TIMEx_OCN_Start(bldc.tim_pwm, channel);
}


void bldc_motor_set_pwm(uint16_t speedA, uint16_t speedB, uint16_t speedC)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	80fb      	strh	r3, [r7, #6]
 8000dca:	460b      	mov	r3, r1
 8000dcc:	80bb      	strh	r3, [r7, #4]
 8000dce:	4613      	mov	r3, r2
 8000dd0:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speedA);
 8000dd2:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <bldc_motor_set_pwm+0x38>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	88fa      	ldrh	r2, [r7, #6]
 8000dd8:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, speedB);
 8000dda:	4b07      	ldr	r3, [pc, #28]	; (8000df8 <bldc_motor_set_pwm+0x38>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	88ba      	ldrh	r2, [r7, #4]
 8000de0:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, speedC);
 8000de2:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <bldc_motor_set_pwm+0x38>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	887a      	ldrh	r2, [r7, #2]
 8000de8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000dea:	bf00      	nop
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	200000d4 	.word	0x200000d4

08000dfc <bldc_motor_six_step_algorithm>:



void bldc_motor_six_step_algorithm(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
    switch (bldc.step_number)
 8000e00:	4ba6      	ldr	r3, [pc, #664]	; (800109c <bldc_motor_six_step_algorithm+0x2a0>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	3b01      	subs	r3, #1
 8000e06:	2b05      	cmp	r3, #5
 8000e08:	f200 8122 	bhi.w	8001050 <bldc_motor_six_step_algorithm+0x254>
 8000e0c:	a201      	add	r2, pc, #4	; (adr r2, 8000e14 <bldc_motor_six_step_algorithm+0x18>)
 8000e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e12:	bf00      	nop
 8000e14:	08000e2d 	.word	0x08000e2d
 8000e18:	08000e87 	.word	0x08000e87
 8000e1c:	08000ee1 	.word	0x08000ee1
 8000e20:	08000f3b 	.word	0x08000f3b
 8000e24:	08000f99 	.word	0x08000f99
 8000e28:	08000ff7 	.word	0x08000ff7
    {
        case 1:
        	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, SET);
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e32:	489b      	ldr	r0, [pc, #620]	; (80010a0 <bldc_motor_six_step_algorithm+0x2a4>)
 8000e34:	f001 fad4 	bl	80023e0 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, RESET);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e3e:	4898      	ldr	r0, [pc, #608]	; (80010a0 <bldc_motor_six_step_algorithm+0x2a4>)
 8000e40:	f001 face 	bl	80023e0 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, RESET);
 8000e44:	2200      	movs	r2, #0
 8000e46:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e4a:	4895      	ldr	r0, [pc, #596]	; (80010a0 <bldc_motor_six_step_algorithm+0x2a4>)
 8000e4c:	f001 fac8 	bl	80023e0 <HAL_GPIO_WritePin>

        	HAL_GPIO_WritePin(PWM1EN_GPIO_Port, PWM1EN_Pin, GPIO_PIN_SET);
 8000e50:	2201      	movs	r2, #1
 8000e52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e56:	4893      	ldr	r0, [pc, #588]	; (80010a4 <bldc_motor_six_step_algorithm+0x2a8>)
 8000e58:	f001 fac2 	bl	80023e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PWM2EN_GPIO_Port, PWM2EN_Pin, GPIO_PIN_SET);
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e62:	4890      	ldr	r0, [pc, #576]	; (80010a4 <bldc_motor_six_step_algorithm+0x2a8>)
 8000e64:	f001 fabc 	bl	80023e0 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(PWM3EN_GPIO_Port, PWM3EN_Pin, GPIO_PIN_RESET);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e6e:	488d      	ldr	r0, [pc, #564]	; (80010a4 <bldc_motor_six_step_algorithm+0x2a8>)
 8000e70:	f001 fab6 	bl	80023e0 <HAL_GPIO_WritePin>

        	bldc_motor_set_pwm(bldc.speed_pulse, 0, 0);
 8000e74:	4b89      	ldr	r3, [pc, #548]	; (800109c <bldc_motor_six_step_algorithm+0x2a0>)
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	b29b      	uxth	r3, r3
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff ff9e 	bl	8000dc0 <bldc_motor_set_pwm>

//            bldc_motor_PWM_Config_Channel(bldc.speed_pulse, TIM_CHANNEL_1);
//            bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_ACTIVE, TIM_CHANNEL_1);
//            bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_ACTIVE, TIM_CHANNEL_4);
//            bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_INACTIVE, TIM_CHANNEL_3);
            break;
 8000e84:	e0e4      	b.n	8001050 <bldc_motor_six_step_algorithm+0x254>
        case 2:
        	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, SET);
 8000e86:	2201      	movs	r2, #1
 8000e88:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e8c:	4884      	ldr	r0, [pc, #528]	; (80010a0 <bldc_motor_six_step_algorithm+0x2a4>)
 8000e8e:	f001 faa7 	bl	80023e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, RESET);
 8000e92:	2200      	movs	r2, #0
 8000e94:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e98:	4881      	ldr	r0, [pc, #516]	; (80010a0 <bldc_motor_six_step_algorithm+0x2a4>)
 8000e9a:	f001 faa1 	bl	80023e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, RESET);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ea4:	487e      	ldr	r0, [pc, #504]	; (80010a0 <bldc_motor_six_step_algorithm+0x2a4>)
 8000ea6:	f001 fa9b 	bl	80023e0 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(PWM1EN_GPIO_Port, PWM1EN_Pin, GPIO_PIN_SET);
 8000eaa:	2201      	movs	r2, #1
 8000eac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000eb0:	487c      	ldr	r0, [pc, #496]	; (80010a4 <bldc_motor_six_step_algorithm+0x2a8>)
 8000eb2:	f001 fa95 	bl	80023e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PWM2EN_GPIO_Port, PWM2EN_Pin, GPIO_PIN_RESET);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ebc:	4879      	ldr	r0, [pc, #484]	; (80010a4 <bldc_motor_six_step_algorithm+0x2a8>)
 8000ebe:	f001 fa8f 	bl	80023e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PWM3EN_GPIO_Port, PWM3EN_Pin, GPIO_PIN_SET);
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ec8:	4876      	ldr	r0, [pc, #472]	; (80010a4 <bldc_motor_six_step_algorithm+0x2a8>)
 8000eca:	f001 fa89 	bl	80023e0 <HAL_GPIO_WritePin>

        	bldc_motor_set_pwm(bldc.speed_pulse, 0, 0);
 8000ece:	4b73      	ldr	r3, [pc, #460]	; (800109c <bldc_motor_six_step_algorithm+0x2a0>)
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	b29b      	uxth	r3, r3
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff ff71 	bl	8000dc0 <bldc_motor_set_pwm>
//			bldc_motor_PWM_Config_Channel(bldc.speed_pulse, TIM_CHANNEL_1);
//			bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_ACTIVE, TIM_CHANNEL_1);
//			bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_INACTIVE, TIM_CHANNEL_4);
//			bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_INACTIVE, TIM_CHANNEL_3);

            break;
 8000ede:	e0b7      	b.n	8001050 <bldc_motor_six_step_algorithm+0x254>
        case 3:
        	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, RESET);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ee6:	486e      	ldr	r0, [pc, #440]	; (80010a0 <bldc_motor_six_step_algorithm+0x2a4>)
 8000ee8:	f001 fa7a 	bl	80023e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, SET);
 8000eec:	2201      	movs	r2, #1
 8000eee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ef2:	486b      	ldr	r0, [pc, #428]	; (80010a0 <bldc_motor_six_step_algorithm+0x2a4>)
 8000ef4:	f001 fa74 	bl	80023e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, RESET);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000efe:	4868      	ldr	r0, [pc, #416]	; (80010a0 <bldc_motor_six_step_algorithm+0x2a4>)
 8000f00:	f001 fa6e 	bl	80023e0 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(PWM1EN_GPIO_Port, PWM1EN_Pin, GPIO_PIN_RESET);
 8000f04:	2200      	movs	r2, #0
 8000f06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f0a:	4866      	ldr	r0, [pc, #408]	; (80010a4 <bldc_motor_six_step_algorithm+0x2a8>)
 8000f0c:	f001 fa68 	bl	80023e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PWM2EN_GPIO_Port, PWM2EN_Pin, GPIO_PIN_SET);
 8000f10:	2201      	movs	r2, #1
 8000f12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f16:	4863      	ldr	r0, [pc, #396]	; (80010a4 <bldc_motor_six_step_algorithm+0x2a8>)
 8000f18:	f001 fa62 	bl	80023e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PWM3EN_GPIO_Port, PWM3EN_Pin, GPIO_PIN_SET);
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f22:	4860      	ldr	r0, [pc, #384]	; (80010a4 <bldc_motor_six_step_algorithm+0x2a8>)
 8000f24:	f001 fa5c 	bl	80023e0 <HAL_GPIO_WritePin>


        	bldc_motor_set_pwm(0, bldc.speed_pulse, 0);
 8000f28:	4b5c      	ldr	r3, [pc, #368]	; (800109c <bldc_motor_six_step_algorithm+0x2a0>)
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	b29b      	uxth	r3, r3
 8000f2e:	2200      	movs	r2, #0
 8000f30:	4619      	mov	r1, r3
 8000f32:	2000      	movs	r0, #0
 8000f34:	f7ff ff44 	bl	8000dc0 <bldc_motor_set_pwm>
////			bldc_motor_PWM_Config_Channel(bldc.speed_pulse, TIM_CHANNEL_4);
//			bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_INACTIVE, TIM_CHANNEL_4);
//			bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_ACTIVE, TIM_CHANNEL_3);


            break;
 8000f38:	e08a      	b.n	8001050 <bldc_motor_six_step_algorithm+0x254>
        case 4:
        	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, RESET);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f40:	4857      	ldr	r0, [pc, #348]	; (80010a0 <bldc_motor_six_step_algorithm+0x2a4>)
 8000f42:	f001 fa4d 	bl	80023e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, SET);
 8000f46:	2201      	movs	r2, #1
 8000f48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f4c:	4854      	ldr	r0, [pc, #336]	; (80010a0 <bldc_motor_six_step_algorithm+0x2a4>)
 8000f4e:	f001 fa47 	bl	80023e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, SET);
 8000f52:	2201      	movs	r2, #1
 8000f54:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f58:	4851      	ldr	r0, [pc, #324]	; (80010a0 <bldc_motor_six_step_algorithm+0x2a4>)
 8000f5a:	f001 fa41 	bl	80023e0 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(PWM1EN_GPIO_Port, PWM1EN_Pin, GPIO_PIN_SET);
 8000f5e:	2201      	movs	r2, #1
 8000f60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f64:	484f      	ldr	r0, [pc, #316]	; (80010a4 <bldc_motor_six_step_algorithm+0x2a8>)
 8000f66:	f001 fa3b 	bl	80023e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PWM2EN_GPIO_Port, PWM2EN_Pin, GPIO_PIN_SET);
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f70:	484c      	ldr	r0, [pc, #304]	; (80010a4 <bldc_motor_six_step_algorithm+0x2a8>)
 8000f72:	f001 fa35 	bl	80023e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PWM3EN_GPIO_Port, PWM3EN_Pin, GPIO_PIN_RESET);
 8000f76:	2200      	movs	r2, #0
 8000f78:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f7c:	4849      	ldr	r0, [pc, #292]	; (80010a4 <bldc_motor_six_step_algorithm+0x2a8>)
 8000f7e:	f001 fa2f 	bl	80023e0 <HAL_GPIO_WritePin>

        	bldc_motor_set_pwm(0, bldc.speed_pulse, bldc.speed_pulse);
 8000f82:	4b46      	ldr	r3, [pc, #280]	; (800109c <bldc_motor_six_step_algorithm+0x2a0>)
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	4a44      	ldr	r2, [pc, #272]	; (800109c <bldc_motor_six_step_algorithm+0x2a0>)
 8000f8a:	6852      	ldr	r2, [r2, #4]
 8000f8c:	b292      	uxth	r2, r2
 8000f8e:	4619      	mov	r1, r3
 8000f90:	2000      	movs	r0, #0
 8000f92:	f7ff ff15 	bl	8000dc0 <bldc_motor_set_pwm>

//			bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_INACTIVE, TIM_CHANNEL_1);
//			bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_INACTIVE, TIM_CHANNEL_4);
//			bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_ACTIVE, TIM_CHANNEL_3);

            break;
 8000f96:	e05b      	b.n	8001050 <bldc_motor_six_step_algorithm+0x254>
        case 5:
        	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, RESET);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f9e:	4840      	ldr	r0, [pc, #256]	; (80010a0 <bldc_motor_six_step_algorithm+0x2a4>)
 8000fa0:	f001 fa1e 	bl	80023e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, SET);
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000faa:	483d      	ldr	r0, [pc, #244]	; (80010a0 <bldc_motor_six_step_algorithm+0x2a4>)
 8000fac:	f001 fa18 	bl	80023e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, SET);
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fb6:	483a      	ldr	r0, [pc, #232]	; (80010a0 <bldc_motor_six_step_algorithm+0x2a4>)
 8000fb8:	f001 fa12 	bl	80023e0 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(PWM1EN_GPIO_Port, PWM1EN_Pin, GPIO_PIN_SET);
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fc2:	4838      	ldr	r0, [pc, #224]	; (80010a4 <bldc_motor_six_step_algorithm+0x2a8>)
 8000fc4:	f001 fa0c 	bl	80023e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PWM2EN_GPIO_Port, PWM2EN_Pin, GPIO_PIN_RESET);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fce:	4835      	ldr	r0, [pc, #212]	; (80010a4 <bldc_motor_six_step_algorithm+0x2a8>)
 8000fd0:	f001 fa06 	bl	80023e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PWM3EN_GPIO_Port, PWM3EN_Pin, GPIO_PIN_SET);
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fda:	4832      	ldr	r0, [pc, #200]	; (80010a4 <bldc_motor_six_step_algorithm+0x2a8>)
 8000fdc:	f001 fa00 	bl	80023e0 <HAL_GPIO_WritePin>


        	bldc_motor_set_pwm(0, bldc.speed_pulse, bldc.speed_pulse);
 8000fe0:	4b2e      	ldr	r3, [pc, #184]	; (800109c <bldc_motor_six_step_algorithm+0x2a0>)
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	b29b      	uxth	r3, r3
 8000fe6:	4a2d      	ldr	r2, [pc, #180]	; (800109c <bldc_motor_six_step_algorithm+0x2a0>)
 8000fe8:	6852      	ldr	r2, [r2, #4]
 8000fea:	b292      	uxth	r2, r2
 8000fec:	4619      	mov	r1, r3
 8000fee:	2000      	movs	r0, #0
 8000ff0:	f7ff fee6 	bl	8000dc0 <bldc_motor_set_pwm>
//			bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_INACTIVE, TIM_CHANNEL_1);
//			bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_ACTIVE, TIM_CHANNEL_4);
//			bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_ACTIVE, TIM_CHANNEL_3);


            break;
 8000ff4:	e02c      	b.n	8001050 <bldc_motor_six_step_algorithm+0x254>
        case 6:
        	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, RESET);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ffc:	4828      	ldr	r0, [pc, #160]	; (80010a0 <bldc_motor_six_step_algorithm+0x2a4>)
 8000ffe:	f001 f9ef 	bl	80023e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, RESET);
 8001002:	2200      	movs	r2, #0
 8001004:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001008:	4825      	ldr	r0, [pc, #148]	; (80010a0 <bldc_motor_six_step_algorithm+0x2a4>)
 800100a:	f001 f9e9 	bl	80023e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, SET);
 800100e:	2201      	movs	r2, #1
 8001010:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001014:	4822      	ldr	r0, [pc, #136]	; (80010a0 <bldc_motor_six_step_algorithm+0x2a4>)
 8001016:	f001 f9e3 	bl	80023e0 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(PWM1EN_GPIO_Port, PWM1EN_Pin, GPIO_PIN_RESET);
 800101a:	2200      	movs	r2, #0
 800101c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001020:	4820      	ldr	r0, [pc, #128]	; (80010a4 <bldc_motor_six_step_algorithm+0x2a8>)
 8001022:	f001 f9dd 	bl	80023e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PWM2EN_GPIO_Port, PWM2EN_Pin, GPIO_PIN_SET);
 8001026:	2201      	movs	r2, #1
 8001028:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800102c:	481d      	ldr	r0, [pc, #116]	; (80010a4 <bldc_motor_six_step_algorithm+0x2a8>)
 800102e:	f001 f9d7 	bl	80023e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PWM3EN_GPIO_Port, PWM3EN_Pin, GPIO_PIN_SET);
 8001032:	2201      	movs	r2, #1
 8001034:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001038:	481a      	ldr	r0, [pc, #104]	; (80010a4 <bldc_motor_six_step_algorithm+0x2a8>)
 800103a:	f001 f9d1 	bl	80023e0 <HAL_GPIO_WritePin>

        	bldc_motor_set_pwm(0, 0, bldc.speed_pulse);
 800103e:	4b17      	ldr	r3, [pc, #92]	; (800109c <bldc_motor_six_step_algorithm+0x2a0>)
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	b29b      	uxth	r3, r3
 8001044:	461a      	mov	r2, r3
 8001046:	2100      	movs	r1, #0
 8001048:	2000      	movs	r0, #0
 800104a:	f7ff feb9 	bl	8000dc0 <bldc_motor_set_pwm>

//			bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_INACTIVE, TIM_CHANNEL_1);
//			bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_ACTIVE, TIM_CHANNEL_4);
//			bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_INACTIVE, TIM_CHANNEL_3);
            break;
 800104e:	bf00      	nop
    }

    if (bldc.dir == 1)  // CW direction
 8001050:	4b12      	ldr	r3, [pc, #72]	; (800109c <bldc_motor_six_step_algorithm+0x2a0>)
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d10d      	bne.n	8001074 <bldc_motor_six_step_algorithm+0x278>
    {
        bldc.step_number++;
 8001058:	4b10      	ldr	r3, [pc, #64]	; (800109c <bldc_motor_six_step_algorithm+0x2a0>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	3301      	adds	r3, #1
 800105e:	b2da      	uxtb	r2, r3
 8001060:	4b0e      	ldr	r3, [pc, #56]	; (800109c <bldc_motor_six_step_algorithm+0x2a0>)
 8001062:	701a      	strb	r2, [r3, #0]
        if (bldc.step_number > 6)
 8001064:	4b0d      	ldr	r3, [pc, #52]	; (800109c <bldc_motor_six_step_algorithm+0x2a0>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b06      	cmp	r3, #6
 800106a:	d914      	bls.n	8001096 <bldc_motor_six_step_algorithm+0x29a>
            bldc.step_number = 1;
 800106c:	4b0b      	ldr	r3, [pc, #44]	; (800109c <bldc_motor_six_step_algorithm+0x2a0>)
 800106e:	2201      	movs	r2, #1
 8001070:	701a      	strb	r2, [r3, #0]
    {
        bldc.step_number--;
        if (bldc.step_number < 1)
            bldc.step_number = 6;
    }
}
 8001072:	e010      	b.n	8001096 <bldc_motor_six_step_algorithm+0x29a>
    else if (bldc.dir == 0)  // CCW direction
 8001074:	4b09      	ldr	r3, [pc, #36]	; (800109c <bldc_motor_six_step_algorithm+0x2a0>)
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d10c      	bne.n	8001096 <bldc_motor_six_step_algorithm+0x29a>
        bldc.step_number--;
 800107c:	4b07      	ldr	r3, [pc, #28]	; (800109c <bldc_motor_six_step_algorithm+0x2a0>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	3b01      	subs	r3, #1
 8001082:	b2da      	uxtb	r2, r3
 8001084:	4b05      	ldr	r3, [pc, #20]	; (800109c <bldc_motor_six_step_algorithm+0x2a0>)
 8001086:	701a      	strb	r2, [r3, #0]
        if (bldc.step_number < 1)
 8001088:	4b04      	ldr	r3, [pc, #16]	; (800109c <bldc_motor_six_step_algorithm+0x2a0>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d102      	bne.n	8001096 <bldc_motor_six_step_algorithm+0x29a>
            bldc.step_number = 6;
 8001090:	4b02      	ldr	r3, [pc, #8]	; (800109c <bldc_motor_six_step_algorithm+0x2a0>)
 8001092:	2206      	movs	r2, #6
 8001094:	701a      	strb	r2, [r3, #0]
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	200001f4 	.word	0x200001f4
 80010a0:	40020c00 	.word	0x40020c00
 80010a4:	40020400 	.word	0x40020400

080010a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	607b      	str	r3, [r7, #4]
 80010b2:	4b10      	ldr	r3, [pc, #64]	; (80010f4 <HAL_MspInit+0x4c>)
 80010b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b6:	4a0f      	ldr	r2, [pc, #60]	; (80010f4 <HAL_MspInit+0x4c>)
 80010b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010bc:	6453      	str	r3, [r2, #68]	; 0x44
 80010be:	4b0d      	ldr	r3, [pc, #52]	; (80010f4 <HAL_MspInit+0x4c>)
 80010c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010c6:	607b      	str	r3, [r7, #4]
 80010c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	603b      	str	r3, [r7, #0]
 80010ce:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <HAL_MspInit+0x4c>)
 80010d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d2:	4a08      	ldr	r2, [pc, #32]	; (80010f4 <HAL_MspInit+0x4c>)
 80010d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010d8:	6413      	str	r3, [r2, #64]	; 0x40
 80010da:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <HAL_MspInit+0x4c>)
 80010dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e2:	603b      	str	r3, [r7, #0]
 80010e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010e6:	bf00      	nop
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	40023800 	.word	0x40023800

080010f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b08a      	sub	sp, #40	; 0x28
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001100:	f107 0314 	add.w	r3, r7, #20
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a17      	ldr	r2, [pc, #92]	; (8001174 <HAL_ADC_MspInit+0x7c>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d127      	bne.n	800116a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	613b      	str	r3, [r7, #16]
 800111e:	4b16      	ldr	r3, [pc, #88]	; (8001178 <HAL_ADC_MspInit+0x80>)
 8001120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001122:	4a15      	ldr	r2, [pc, #84]	; (8001178 <HAL_ADC_MspInit+0x80>)
 8001124:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001128:	6453      	str	r3, [r2, #68]	; 0x44
 800112a:	4b13      	ldr	r3, [pc, #76]	; (8001178 <HAL_ADC_MspInit+0x80>)
 800112c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001132:	613b      	str	r3, [r7, #16]
 8001134:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	4b0f      	ldr	r3, [pc, #60]	; (8001178 <HAL_ADC_MspInit+0x80>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	4a0e      	ldr	r2, [pc, #56]	; (8001178 <HAL_ADC_MspInit+0x80>)
 8001140:	f043 0301 	orr.w	r3, r3, #1
 8001144:	6313      	str	r3, [r2, #48]	; 0x30
 8001146:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <HAL_ADC_MspInit+0x80>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001152:	2301      	movs	r3, #1
 8001154:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001156:	2303      	movs	r3, #3
 8001158:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115e:	f107 0314 	add.w	r3, r7, #20
 8001162:	4619      	mov	r1, r3
 8001164:	4805      	ldr	r0, [pc, #20]	; (800117c <HAL_ADC_MspInit+0x84>)
 8001166:	f000 ffb7 	bl	80020d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800116a:	bf00      	nop
 800116c:	3728      	adds	r7, #40	; 0x28
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40012000 	.word	0x40012000
 8001178:	40023800 	.word	0x40023800
 800117c:	40020000 	.word	0x40020000

08001180 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a0e      	ldr	r2, [pc, #56]	; (80011c8 <HAL_TIM_PWM_MspInit+0x48>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d115      	bne.n	80011be <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	4b0d      	ldr	r3, [pc, #52]	; (80011cc <HAL_TIM_PWM_MspInit+0x4c>)
 8001198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119a:	4a0c      	ldr	r2, [pc, #48]	; (80011cc <HAL_TIM_PWM_MspInit+0x4c>)
 800119c:	f043 0301 	orr.w	r3, r3, #1
 80011a0:	6453      	str	r3, [r2, #68]	; 0x44
 80011a2:	4b0a      	ldr	r3, [pc, #40]	; (80011cc <HAL_TIM_PWM_MspInit+0x4c>)
 80011a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80011ae:	2200      	movs	r2, #0
 80011b0:	2100      	movs	r1, #0
 80011b2:	201a      	movs	r0, #26
 80011b4:	f000 ff59 	bl	800206a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80011b8:	201a      	movs	r0, #26
 80011ba:	f000 ff72 	bl	80020a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80011be:	bf00      	nop
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40010000 	.word	0x40010000
 80011cc:	40023800 	.word	0x40023800

080011d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011e0:	d10d      	bne.n	80011fe <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	4b09      	ldr	r3, [pc, #36]	; (800120c <HAL_TIM_Base_MspInit+0x3c>)
 80011e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ea:	4a08      	ldr	r2, [pc, #32]	; (800120c <HAL_TIM_Base_MspInit+0x3c>)
 80011ec:	f043 0301 	orr.w	r3, r3, #1
 80011f0:	6413      	str	r3, [r2, #64]	; 0x40
 80011f2:	4b06      	ldr	r3, [pc, #24]	; (800120c <HAL_TIM_Base_MspInit+0x3c>)
 80011f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80011fe:	bf00      	nop
 8001200:	3714      	adds	r7, #20
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	40023800 	.word	0x40023800

08001210 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a0b      	ldr	r2, [pc, #44]	; (800124c <HAL_TIM_OC_MspInit+0x3c>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d10d      	bne.n	800123e <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	4b0a      	ldr	r3, [pc, #40]	; (8001250 <HAL_TIM_OC_MspInit+0x40>)
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	4a09      	ldr	r2, [pc, #36]	; (8001250 <HAL_TIM_OC_MspInit+0x40>)
 800122c:	f043 0302 	orr.w	r3, r3, #2
 8001230:	6413      	str	r3, [r2, #64]	; 0x40
 8001232:	4b07      	ldr	r3, [pc, #28]	; (8001250 <HAL_TIM_OC_MspInit+0x40>)
 8001234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800123e:	bf00      	nop
 8001240:	3714      	adds	r7, #20
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	40000400 	.word	0x40000400
 8001250:	40023800 	.word	0x40023800

08001254 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08a      	sub	sp, #40	; 0x28
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125c:	f107 0314 	add.w	r3, r7, #20
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
 800126a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a34      	ldr	r2, [pc, #208]	; (8001344 <HAL_TIM_MspPostInit+0xf0>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d13e      	bne.n	80012f4 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	613b      	str	r3, [r7, #16]
 800127a:	4b33      	ldr	r3, [pc, #204]	; (8001348 <HAL_TIM_MspPostInit+0xf4>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	4a32      	ldr	r2, [pc, #200]	; (8001348 <HAL_TIM_MspPostInit+0xf4>)
 8001280:	f043 0310 	orr.w	r3, r3, #16
 8001284:	6313      	str	r3, [r2, #48]	; 0x30
 8001286:	4b30      	ldr	r3, [pc, #192]	; (8001348 <HAL_TIM_MspPostInit+0xf4>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	f003 0310 	and.w	r3, r3, #16
 800128e:	613b      	str	r3, [r7, #16]
 8001290:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	60fb      	str	r3, [r7, #12]
 8001296:	4b2c      	ldr	r3, [pc, #176]	; (8001348 <HAL_TIM_MspPostInit+0xf4>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	4a2b      	ldr	r2, [pc, #172]	; (8001348 <HAL_TIM_MspPostInit+0xf4>)
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	6313      	str	r3, [r2, #48]	; 0x30
 80012a2:	4b29      	ldr	r3, [pc, #164]	; (8001348 <HAL_TIM_MspPostInit+0xf4>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80012ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b4:	2302      	movs	r3, #2
 80012b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012bc:	2300      	movs	r3, #0
 80012be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80012c0:	2301      	movs	r3, #1
 80012c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012c4:	f107 0314 	add.w	r3, r7, #20
 80012c8:	4619      	mov	r1, r3
 80012ca:	4820      	ldr	r0, [pc, #128]	; (800134c <HAL_TIM_MspPostInit+0xf8>)
 80012cc:	f000 ff04 	bl	80020d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 80012d0:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80012d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d6:	2302      	movs	r3, #2
 80012d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012de:	2300      	movs	r3, #0
 80012e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80012e2:	2301      	movs	r3, #1
 80012e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e6:	f107 0314 	add.w	r3, r7, #20
 80012ea:	4619      	mov	r1, r3
 80012ec:	4818      	ldr	r0, [pc, #96]	; (8001350 <HAL_TIM_MspPostInit+0xfc>)
 80012ee:	f000 fef3 	bl	80020d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80012f2:	e022      	b.n	800133a <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM2)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012fc:	d11d      	bne.n	800133a <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	60bb      	str	r3, [r7, #8]
 8001302:	4b11      	ldr	r3, [pc, #68]	; (8001348 <HAL_TIM_MspPostInit+0xf4>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	4a10      	ldr	r2, [pc, #64]	; (8001348 <HAL_TIM_MspPostInit+0xf4>)
 8001308:	f043 0301 	orr.w	r3, r3, #1
 800130c:	6313      	str	r3, [r2, #48]	; 0x30
 800130e:	4b0e      	ldr	r3, [pc, #56]	; (8001348 <HAL_TIM_MspPostInit+0xf4>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	60bb      	str	r3, [r7, #8]
 8001318:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_5;
 800131a:	2326      	movs	r3, #38	; 0x26
 800131c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131e:	2302      	movs	r3, #2
 8001320:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001322:	2300      	movs	r3, #0
 8001324:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001326:	2300      	movs	r3, #0
 8001328:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800132a:	2301      	movs	r3, #1
 800132c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132e:	f107 0314 	add.w	r3, r7, #20
 8001332:	4619      	mov	r1, r3
 8001334:	4806      	ldr	r0, [pc, #24]	; (8001350 <HAL_TIM_MspPostInit+0xfc>)
 8001336:	f000 fecf 	bl	80020d8 <HAL_GPIO_Init>
}
 800133a:	bf00      	nop
 800133c:	3728      	adds	r7, #40	; 0x28
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40010000 	.word	0x40010000
 8001348:	40023800 	.word	0x40023800
 800134c:	40021000 	.word	0x40021000
 8001350:	40020000 	.word	0x40020000

08001354 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b08a      	sub	sp, #40	; 0x28
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135c:	f107 0314 	add.w	r3, r7, #20
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a19      	ldr	r2, [pc, #100]	; (80013d8 <HAL_UART_MspInit+0x84>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d12b      	bne.n	80013ce <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	613b      	str	r3, [r7, #16]
 800137a:	4b18      	ldr	r3, [pc, #96]	; (80013dc <HAL_UART_MspInit+0x88>)
 800137c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137e:	4a17      	ldr	r2, [pc, #92]	; (80013dc <HAL_UART_MspInit+0x88>)
 8001380:	f043 0320 	orr.w	r3, r3, #32
 8001384:	6453      	str	r3, [r2, #68]	; 0x44
 8001386:	4b15      	ldr	r3, [pc, #84]	; (80013dc <HAL_UART_MspInit+0x88>)
 8001388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138a:	f003 0320 	and.w	r3, r3, #32
 800138e:	613b      	str	r3, [r7, #16]
 8001390:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	4b11      	ldr	r3, [pc, #68]	; (80013dc <HAL_UART_MspInit+0x88>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	4a10      	ldr	r2, [pc, #64]	; (80013dc <HAL_UART_MspInit+0x88>)
 800139c:	f043 0304 	orr.w	r3, r3, #4
 80013a0:	6313      	str	r3, [r2, #48]	; 0x30
 80013a2:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <HAL_UART_MspInit+0x88>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	f003 0304 	and.w	r3, r3, #4
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013ae:	23c0      	movs	r3, #192	; 0xc0
 80013b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b2:	2302      	movs	r3, #2
 80013b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ba:	2303      	movs	r3, #3
 80013bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80013be:	2308      	movs	r3, #8
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013c2:	f107 0314 	add.w	r3, r7, #20
 80013c6:	4619      	mov	r1, r3
 80013c8:	4805      	ldr	r0, [pc, #20]	; (80013e0 <HAL_UART_MspInit+0x8c>)
 80013ca:	f000 fe85 	bl	80020d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80013ce:	bf00      	nop
 80013d0:	3728      	adds	r7, #40	; 0x28
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40011400 	.word	0x40011400
 80013dc:	40023800 	.word	0x40023800
 80013e0:	40020800 	.word	0x40020800

080013e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013e8:	e7fe      	b.n	80013e8 <NMI_Handler+0x4>

080013ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ea:	b480      	push	{r7}
 80013ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ee:	e7fe      	b.n	80013ee <HardFault_Handler+0x4>

080013f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f4:	e7fe      	b.n	80013f4 <MemManage_Handler+0x4>

080013f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013fa:	e7fe      	b.n	80013fa <BusFault_Handler+0x4>

080013fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001400:	e7fe      	b.n	8001400 <UsageFault_Handler+0x4>

08001402 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr

0800141e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001430:	f000 f93e 	bl	80016b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001434:	bf00      	nop
 8001436:	bd80      	pop	{r7, pc}

08001438 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800143c:	4802      	ldr	r0, [pc, #8]	; (8001448 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800143e:	f001 fe53 	bl	80030e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	200000d4 	.word	0x200000d4

0800144c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]
 800145c:	e00a      	b.n	8001474 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800145e:	f3af 8000 	nop.w
 8001462:	4601      	mov	r1, r0
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	1c5a      	adds	r2, r3, #1
 8001468:	60ba      	str	r2, [r7, #8]
 800146a:	b2ca      	uxtb	r2, r1
 800146c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	3301      	adds	r3, #1
 8001472:	617b      	str	r3, [r7, #20]
 8001474:	697a      	ldr	r2, [r7, #20]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	429a      	cmp	r2, r3
 800147a:	dbf0      	blt.n	800145e <_read+0x12>
  }

  return len;
 800147c:	687b      	ldr	r3, [r7, #4]
}
 800147e:	4618      	mov	r0, r3
 8001480:	3718      	adds	r7, #24
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b086      	sub	sp, #24
 800148a:	af00      	add	r7, sp, #0
 800148c:	60f8      	str	r0, [r7, #12]
 800148e:	60b9      	str	r1, [r7, #8]
 8001490:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001492:	2300      	movs	r3, #0
 8001494:	617b      	str	r3, [r7, #20]
 8001496:	e009      	b.n	80014ac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	1c5a      	adds	r2, r3, #1
 800149c:	60ba      	str	r2, [r7, #8]
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff fbed 	bl	8000c80 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	3301      	adds	r3, #1
 80014aa:	617b      	str	r3, [r7, #20]
 80014ac:	697a      	ldr	r2, [r7, #20]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	dbf1      	blt.n	8001498 <_write+0x12>
  }
  return len;
 80014b4:	687b      	ldr	r3, [r7, #4]
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3718      	adds	r7, #24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <_close>:

int _close(int file)
{
 80014be:	b480      	push	{r7}
 80014c0:	b083      	sub	sp, #12
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014d6:	b480      	push	{r7}
 80014d8:	b083      	sub	sp, #12
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
 80014de:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014e6:	605a      	str	r2, [r3, #4]
  return 0;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <_isatty>:

int _isatty(int file)
{
 80014f6:	b480      	push	{r7}
 80014f8:	b083      	sub	sp, #12
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014fe:	2301      	movs	r3, #1
}
 8001500:	4618      	mov	r0, r3
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	3714      	adds	r7, #20
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
	...

08001528 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001530:	4a14      	ldr	r2, [pc, #80]	; (8001584 <_sbrk+0x5c>)
 8001532:	4b15      	ldr	r3, [pc, #84]	; (8001588 <_sbrk+0x60>)
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800153c:	4b13      	ldr	r3, [pc, #76]	; (800158c <_sbrk+0x64>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d102      	bne.n	800154a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001544:	4b11      	ldr	r3, [pc, #68]	; (800158c <_sbrk+0x64>)
 8001546:	4a12      	ldr	r2, [pc, #72]	; (8001590 <_sbrk+0x68>)
 8001548:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800154a:	4b10      	ldr	r3, [pc, #64]	; (800158c <_sbrk+0x64>)
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4413      	add	r3, r2
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	429a      	cmp	r2, r3
 8001556:	d207      	bcs.n	8001568 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001558:	f003 f89e 	bl	8004698 <__errno>
 800155c:	4603      	mov	r3, r0
 800155e:	220c      	movs	r2, #12
 8001560:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001562:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001566:	e009      	b.n	800157c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001568:	4b08      	ldr	r3, [pc, #32]	; (800158c <_sbrk+0x64>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800156e:	4b07      	ldr	r3, [pc, #28]	; (800158c <_sbrk+0x64>)
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4413      	add	r3, r2
 8001576:	4a05      	ldr	r2, [pc, #20]	; (800158c <_sbrk+0x64>)
 8001578:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800157a:	68fb      	ldr	r3, [r7, #12]
}
 800157c:	4618      	mov	r0, r3
 800157e:	3718      	adds	r7, #24
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20020000 	.word	0x20020000
 8001588:	00000400 	.word	0x00000400
 800158c:	20000224 	.word	0x20000224
 8001590:	20000240 	.word	0x20000240

08001594 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001598:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <SystemInit+0x20>)
 800159a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800159e:	4a05      	ldr	r2, [pc, #20]	; (80015b4 <SystemInit+0x20>)
 80015a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	e000ed00 	.word	0xe000ed00

080015b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80015b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015bc:	480d      	ldr	r0, [pc, #52]	; (80015f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015be:	490e      	ldr	r1, [pc, #56]	; (80015f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015c0:	4a0e      	ldr	r2, [pc, #56]	; (80015fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015c4:	e002      	b.n	80015cc <LoopCopyDataInit>

080015c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ca:	3304      	adds	r3, #4

080015cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015d0:	d3f9      	bcc.n	80015c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015d2:	4a0b      	ldr	r2, [pc, #44]	; (8001600 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015d4:	4c0b      	ldr	r4, [pc, #44]	; (8001604 <LoopFillZerobss+0x26>)
  movs r3, #0
 80015d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015d8:	e001      	b.n	80015de <LoopFillZerobss>

080015da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015dc:	3204      	adds	r2, #4

080015de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015e0:	d3fb      	bcc.n	80015da <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015e2:	f7ff ffd7 	bl	8001594 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015e6:	f003 f85d 	bl	80046a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015ea:	f7fe ffcb 	bl	8000584 <main>
  bx  lr    
 80015ee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80015f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015f8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80015fc:	08005820 	.word	0x08005820
  ldr r2, =_sbss
 8001600:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001604:	2000023c 	.word	0x2000023c

08001608 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001608:	e7fe      	b.n	8001608 <ADC_IRQHandler>
	...

0800160c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001610:	4b0e      	ldr	r3, [pc, #56]	; (800164c <HAL_Init+0x40>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a0d      	ldr	r2, [pc, #52]	; (800164c <HAL_Init+0x40>)
 8001616:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800161a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800161c:	4b0b      	ldr	r3, [pc, #44]	; (800164c <HAL_Init+0x40>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a0a      	ldr	r2, [pc, #40]	; (800164c <HAL_Init+0x40>)
 8001622:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001626:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001628:	4b08      	ldr	r3, [pc, #32]	; (800164c <HAL_Init+0x40>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a07      	ldr	r2, [pc, #28]	; (800164c <HAL_Init+0x40>)
 800162e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001632:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001634:	2003      	movs	r0, #3
 8001636:	f000 fd0d 	bl	8002054 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800163a:	200f      	movs	r0, #15
 800163c:	f000 f808 	bl	8001650 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001640:	f7ff fd32 	bl	80010a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40023c00 	.word	0x40023c00

08001650 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001658:	4b12      	ldr	r3, [pc, #72]	; (80016a4 <HAL_InitTick+0x54>)
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	4b12      	ldr	r3, [pc, #72]	; (80016a8 <HAL_InitTick+0x58>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	4619      	mov	r1, r3
 8001662:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001666:	fbb3 f3f1 	udiv	r3, r3, r1
 800166a:	fbb2 f3f3 	udiv	r3, r2, r3
 800166e:	4618      	mov	r0, r3
 8001670:	f000 fd25 	bl	80020be <HAL_SYSTICK_Config>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e00e      	b.n	800169c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2b0f      	cmp	r3, #15
 8001682:	d80a      	bhi.n	800169a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001684:	2200      	movs	r2, #0
 8001686:	6879      	ldr	r1, [r7, #4]
 8001688:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800168c:	f000 fced 	bl	800206a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001690:	4a06      	ldr	r2, [pc, #24]	; (80016ac <HAL_InitTick+0x5c>)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001696:	2300      	movs	r3, #0
 8001698:	e000      	b.n	800169c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
}
 800169c:	4618      	mov	r0, r3
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	20000000 	.word	0x20000000
 80016a8:	20000008 	.word	0x20000008
 80016ac:	20000004 	.word	0x20000004

080016b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016b4:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <HAL_IncTick+0x20>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	461a      	mov	r2, r3
 80016ba:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <HAL_IncTick+0x24>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4413      	add	r3, r2
 80016c0:	4a04      	ldr	r2, [pc, #16]	; (80016d4 <HAL_IncTick+0x24>)
 80016c2:	6013      	str	r3, [r2, #0]
}
 80016c4:	bf00      	nop
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	20000008 	.word	0x20000008
 80016d4:	20000228 	.word	0x20000228

080016d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  return uwTick;
 80016dc:	4b03      	ldr	r3, [pc, #12]	; (80016ec <HAL_GetTick+0x14>)
 80016de:	681b      	ldr	r3, [r3, #0]
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	20000228 	.word	0x20000228

080016f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016f8:	f7ff ffee 	bl	80016d8 <HAL_GetTick>
 80016fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001708:	d005      	beq.n	8001716 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800170a:	4b0a      	ldr	r3, [pc, #40]	; (8001734 <HAL_Delay+0x44>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	461a      	mov	r2, r3
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	4413      	add	r3, r2
 8001714:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001716:	bf00      	nop
 8001718:	f7ff ffde 	bl	80016d8 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	68fa      	ldr	r2, [r7, #12]
 8001724:	429a      	cmp	r2, r3
 8001726:	d8f7      	bhi.n	8001718 <HAL_Delay+0x28>
  {
  }
}
 8001728:	bf00      	nop
 800172a:	bf00      	nop
 800172c:	3710      	adds	r7, #16
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	20000008 	.word	0x20000008

08001738 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001740:	2300      	movs	r3, #0
 8001742:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d101      	bne.n	800174e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e033      	b.n	80017b6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001752:	2b00      	cmp	r3, #0
 8001754:	d109      	bne.n	800176a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f7ff fcce 	bl	80010f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2200      	movs	r2, #0
 8001766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176e:	f003 0310 	and.w	r3, r3, #16
 8001772:	2b00      	cmp	r3, #0
 8001774:	d118      	bne.n	80017a8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800177e:	f023 0302 	bic.w	r3, r3, #2
 8001782:	f043 0202 	orr.w	r2, r3, #2
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f000 fa96 	bl	8001cbc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	f023 0303 	bic.w	r3, r3, #3
 800179e:	f043 0201 	orr.w	r2, r3, #1
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	641a      	str	r2, [r3, #64]	; 0x40
 80017a6:	e001      	b.n	80017ac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2200      	movs	r2, #0
 80017b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80017b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
	...

080017c0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80017c8:	2300      	movs	r3, #0
 80017ca:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d101      	bne.n	80017da <HAL_ADC_Start+0x1a>
 80017d6:	2302      	movs	r3, #2
 80017d8:	e097      	b.n	800190a <HAL_ADC_Start+0x14a>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2201      	movs	r2, #1
 80017de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	f003 0301 	and.w	r3, r3, #1
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d018      	beq.n	8001822 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	689a      	ldr	r2, [r3, #8]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f042 0201 	orr.w	r2, r2, #1
 80017fe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001800:	4b45      	ldr	r3, [pc, #276]	; (8001918 <HAL_ADC_Start+0x158>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a45      	ldr	r2, [pc, #276]	; (800191c <HAL_ADC_Start+0x15c>)
 8001806:	fba2 2303 	umull	r2, r3, r2, r3
 800180a:	0c9a      	lsrs	r2, r3, #18
 800180c:	4613      	mov	r3, r2
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	4413      	add	r3, r2
 8001812:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001814:	e002      	b.n	800181c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	3b01      	subs	r3, #1
 800181a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d1f9      	bne.n	8001816 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	f003 0301 	and.w	r3, r3, #1
 800182c:	2b01      	cmp	r3, #1
 800182e:	d15f      	bne.n	80018f0 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001834:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001838:	f023 0301 	bic.w	r3, r3, #1
 800183c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800184e:	2b00      	cmp	r3, #0
 8001850:	d007      	beq.n	8001862 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800185a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800186a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800186e:	d106      	bne.n	800187e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001874:	f023 0206 	bic.w	r2, r3, #6
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	645a      	str	r2, [r3, #68]	; 0x44
 800187c:	e002      	b.n	8001884 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2200      	movs	r2, #0
 8001888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800188c:	4b24      	ldr	r3, [pc, #144]	; (8001920 <HAL_ADC_Start+0x160>)
 800188e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001898:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f003 031f 	and.w	r3, r3, #31
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d10f      	bne.n	80018c6 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d129      	bne.n	8001908 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	689a      	ldr	r2, [r3, #8]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80018c2:	609a      	str	r2, [r3, #8]
 80018c4:	e020      	b.n	8001908 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a16      	ldr	r2, [pc, #88]	; (8001924 <HAL_ADC_Start+0x164>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d11b      	bne.n	8001908 <HAL_ADC_Start+0x148>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d114      	bne.n	8001908 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	689a      	ldr	r2, [r3, #8]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80018ec:	609a      	str	r2, [r3, #8]
 80018ee:	e00b      	b.n	8001908 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f4:	f043 0210 	orr.w	r2, r3, #16
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001900:	f043 0201 	orr.w	r2, r3, #1
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3714      	adds	r7, #20
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	20000000 	.word	0x20000000
 800191c:	431bde83 	.word	0x431bde83
 8001920:	40012300 	.word	0x40012300
 8001924:	40012000 	.word	0x40012000

08001928 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001932:	2300      	movs	r3, #0
 8001934:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001940:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001944:	d113      	bne.n	800196e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001950:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001954:	d10b      	bne.n	800196e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195a:	f043 0220 	orr.w	r2, r3, #32
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e063      	b.n	8001a36 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800196e:	f7ff feb3 	bl	80016d8 <HAL_GetTick>
 8001972:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001974:	e021      	b.n	80019ba <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800197c:	d01d      	beq.n	80019ba <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d007      	beq.n	8001994 <HAL_ADC_PollForConversion+0x6c>
 8001984:	f7ff fea8 	bl	80016d8 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	683a      	ldr	r2, [r7, #0]
 8001990:	429a      	cmp	r2, r3
 8001992:	d212      	bcs.n	80019ba <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d00b      	beq.n	80019ba <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a6:	f043 0204 	orr.w	r2, r3, #4
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2200      	movs	r2, #0
 80019b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e03d      	b.n	8001a36 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d1d6      	bne.n	8001976 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f06f 0212 	mvn.w	r2, #18
 80019d0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d123      	bne.n	8001a34 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d11f      	bne.n	8001a34 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019fa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d006      	beq.n	8001a10 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d111      	bne.n	8001a34 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d105      	bne.n	8001a34 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2c:	f043 0201 	orr.w	r2, r3, #1
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001a3e:	b480      	push	{r7}
 8001a40:	b083      	sub	sp, #12
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001a62:	2300      	movs	r3, #0
 8001a64:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d101      	bne.n	8001a74 <HAL_ADC_ConfigChannel+0x1c>
 8001a70:	2302      	movs	r3, #2
 8001a72:	e113      	b.n	8001c9c <HAL_ADC_ConfigChannel+0x244>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2b09      	cmp	r3, #9
 8001a82:	d925      	bls.n	8001ad0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	68d9      	ldr	r1, [r3, #12]
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	461a      	mov	r2, r3
 8001a92:	4613      	mov	r3, r2
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	4413      	add	r3, r2
 8001a98:	3b1e      	subs	r3, #30
 8001a9a:	2207      	movs	r2, #7
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	43da      	mvns	r2, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	400a      	ands	r2, r1
 8001aa8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	68d9      	ldr	r1, [r3, #12]
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	689a      	ldr	r2, [r3, #8]
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	4618      	mov	r0, r3
 8001abc:	4603      	mov	r3, r0
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	4403      	add	r3, r0
 8001ac2:	3b1e      	subs	r3, #30
 8001ac4:	409a      	lsls	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	430a      	orrs	r2, r1
 8001acc:	60da      	str	r2, [r3, #12]
 8001ace:	e022      	b.n	8001b16 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	6919      	ldr	r1, [r3, #16]
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	461a      	mov	r2, r3
 8001ade:	4613      	mov	r3, r2
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	4413      	add	r3, r2
 8001ae4:	2207      	movs	r2, #7
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	43da      	mvns	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	400a      	ands	r2, r1
 8001af2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	6919      	ldr	r1, [r3, #16]
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	689a      	ldr	r2, [r3, #8]
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	4618      	mov	r0, r3
 8001b06:	4603      	mov	r3, r0
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	4403      	add	r3, r0
 8001b0c:	409a      	lsls	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	430a      	orrs	r2, r1
 8001b14:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	2b06      	cmp	r3, #6
 8001b1c:	d824      	bhi.n	8001b68 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685a      	ldr	r2, [r3, #4]
 8001b28:	4613      	mov	r3, r2
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	4413      	add	r3, r2
 8001b2e:	3b05      	subs	r3, #5
 8001b30:	221f      	movs	r2, #31
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	43da      	mvns	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	400a      	ands	r2, r1
 8001b3e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685a      	ldr	r2, [r3, #4]
 8001b52:	4613      	mov	r3, r2
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	4413      	add	r3, r2
 8001b58:	3b05      	subs	r3, #5
 8001b5a:	fa00 f203 	lsl.w	r2, r0, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	430a      	orrs	r2, r1
 8001b64:	635a      	str	r2, [r3, #52]	; 0x34
 8001b66:	e04c      	b.n	8001c02 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	2b0c      	cmp	r3, #12
 8001b6e:	d824      	bhi.n	8001bba <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685a      	ldr	r2, [r3, #4]
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	4413      	add	r3, r2
 8001b80:	3b23      	subs	r3, #35	; 0x23
 8001b82:	221f      	movs	r2, #31
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	43da      	mvns	r2, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	400a      	ands	r2, r1
 8001b90:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685a      	ldr	r2, [r3, #4]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	4413      	add	r3, r2
 8001baa:	3b23      	subs	r3, #35	; 0x23
 8001bac:	fa00 f203 	lsl.w	r2, r0, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	631a      	str	r2, [r3, #48]	; 0x30
 8001bb8:	e023      	b.n	8001c02 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685a      	ldr	r2, [r3, #4]
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	4413      	add	r3, r2
 8001bca:	3b41      	subs	r3, #65	; 0x41
 8001bcc:	221f      	movs	r2, #31
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	43da      	mvns	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	400a      	ands	r2, r1
 8001bda:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	4618      	mov	r0, r3
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685a      	ldr	r2, [r3, #4]
 8001bee:	4613      	mov	r3, r2
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	4413      	add	r3, r2
 8001bf4:	3b41      	subs	r3, #65	; 0x41
 8001bf6:	fa00 f203 	lsl.w	r2, r0, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c02:	4b29      	ldr	r3, [pc, #164]	; (8001ca8 <HAL_ADC_ConfigChannel+0x250>)
 8001c04:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a28      	ldr	r2, [pc, #160]	; (8001cac <HAL_ADC_ConfigChannel+0x254>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d10f      	bne.n	8001c30 <HAL_ADC_ConfigChannel+0x1d8>
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2b12      	cmp	r3, #18
 8001c16:	d10b      	bne.n	8001c30 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a1d      	ldr	r2, [pc, #116]	; (8001cac <HAL_ADC_ConfigChannel+0x254>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d12b      	bne.n	8001c92 <HAL_ADC_ConfigChannel+0x23a>
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a1c      	ldr	r2, [pc, #112]	; (8001cb0 <HAL_ADC_ConfigChannel+0x258>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d003      	beq.n	8001c4c <HAL_ADC_ConfigChannel+0x1f4>
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2b11      	cmp	r3, #17
 8001c4a:	d122      	bne.n	8001c92 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a11      	ldr	r2, [pc, #68]	; (8001cb0 <HAL_ADC_ConfigChannel+0x258>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d111      	bne.n	8001c92 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c6e:	4b11      	ldr	r3, [pc, #68]	; (8001cb4 <HAL_ADC_ConfigChannel+0x25c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a11      	ldr	r2, [pc, #68]	; (8001cb8 <HAL_ADC_ConfigChannel+0x260>)
 8001c74:	fba2 2303 	umull	r2, r3, r2, r3
 8001c78:	0c9a      	lsrs	r2, r3, #18
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	4413      	add	r3, r2
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c84:	e002      	b.n	8001c8c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	3b01      	subs	r3, #1
 8001c8a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d1f9      	bne.n	8001c86 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001c9a:	2300      	movs	r3, #0
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3714      	adds	r7, #20
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	40012300 	.word	0x40012300
 8001cac:	40012000 	.word	0x40012000
 8001cb0:	10000012 	.word	0x10000012
 8001cb4:	20000000 	.word	0x20000000
 8001cb8:	431bde83 	.word	0x431bde83

08001cbc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cc4:	4b79      	ldr	r3, [pc, #484]	; (8001eac <ADC_Init+0x1f0>)
 8001cc6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	685a      	ldr	r2, [r3, #4]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	431a      	orrs	r2, r3
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	685a      	ldr	r2, [r3, #4]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001cf0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	6859      	ldr	r1, [r3, #4]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	691b      	ldr	r3, [r3, #16]
 8001cfc:	021a      	lsls	r2, r3, #8
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	430a      	orrs	r2, r1
 8001d04:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	685a      	ldr	r2, [r3, #4]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001d14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	6859      	ldr	r1, [r3, #4]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689a      	ldr	r2, [r3, #8]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	430a      	orrs	r2, r1
 8001d26:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	689a      	ldr	r2, [r3, #8]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d36:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	6899      	ldr	r1, [r3, #8]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	68da      	ldr	r2, [r3, #12]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	430a      	orrs	r2, r1
 8001d48:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d4e:	4a58      	ldr	r2, [pc, #352]	; (8001eb0 <ADC_Init+0x1f4>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d022      	beq.n	8001d9a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	689a      	ldr	r2, [r3, #8]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d62:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	6899      	ldr	r1, [r3, #8]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	430a      	orrs	r2, r1
 8001d74:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	689a      	ldr	r2, [r3, #8]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	6899      	ldr	r1, [r3, #8]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	430a      	orrs	r2, r1
 8001d96:	609a      	str	r2, [r3, #8]
 8001d98:	e00f      	b.n	8001dba <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	689a      	ldr	r2, [r3, #8]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001da8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	689a      	ldr	r2, [r3, #8]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001db8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	689a      	ldr	r2, [r3, #8]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f022 0202 	bic.w	r2, r2, #2
 8001dc8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	6899      	ldr	r1, [r3, #8]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	7e1b      	ldrb	r3, [r3, #24]
 8001dd4:	005a      	lsls	r2, r3, #1
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d01b      	beq.n	8001e20 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	685a      	ldr	r2, [r3, #4]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001df6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	685a      	ldr	r2, [r3, #4]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001e06:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	6859      	ldr	r1, [r3, #4]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e12:	3b01      	subs	r3, #1
 8001e14:	035a      	lsls	r2, r3, #13
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	605a      	str	r2, [r3, #4]
 8001e1e:	e007      	b.n	8001e30 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	685a      	ldr	r2, [r3, #4]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e2e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001e3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	69db      	ldr	r3, [r3, #28]
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	051a      	lsls	r2, r3, #20
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	430a      	orrs	r2, r1
 8001e54:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	689a      	ldr	r2, [r3, #8]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e64:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	6899      	ldr	r1, [r3, #8]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e72:	025a      	lsls	r2, r3, #9
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	689a      	ldr	r2, [r3, #8]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	6899      	ldr	r1, [r3, #8]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	695b      	ldr	r3, [r3, #20]
 8001e96:	029a      	lsls	r2, r3, #10
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	609a      	str	r2, [r3, #8]
}
 8001ea0:	bf00      	nop
 8001ea2:	3714      	adds	r7, #20
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr
 8001eac:	40012300 	.word	0x40012300
 8001eb0:	0f000001 	.word	0x0f000001

08001eb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b085      	sub	sp, #20
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f003 0307 	and.w	r3, r3, #7
 8001ec2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ec4:	4b0c      	ldr	r3, [pc, #48]	; (8001ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eca:	68ba      	ldr	r2, [r7, #8]
 8001ecc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001edc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ee0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ee4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ee6:	4a04      	ldr	r2, [pc, #16]	; (8001ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	60d3      	str	r3, [r2, #12]
}
 8001eec:	bf00      	nop
 8001eee:	3714      	adds	r7, #20
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr
 8001ef8:	e000ed00 	.word	0xe000ed00

08001efc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f00:	4b04      	ldr	r3, [pc, #16]	; (8001f14 <__NVIC_GetPriorityGrouping+0x18>)
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	0a1b      	lsrs	r3, r3, #8
 8001f06:	f003 0307 	and.w	r3, r3, #7
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	e000ed00 	.word	0xe000ed00

08001f18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	db0b      	blt.n	8001f42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f2a:	79fb      	ldrb	r3, [r7, #7]
 8001f2c:	f003 021f 	and.w	r2, r3, #31
 8001f30:	4907      	ldr	r1, [pc, #28]	; (8001f50 <__NVIC_EnableIRQ+0x38>)
 8001f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f36:	095b      	lsrs	r3, r3, #5
 8001f38:	2001      	movs	r0, #1
 8001f3a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f42:	bf00      	nop
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	e000e100 	.word	0xe000e100

08001f54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	6039      	str	r1, [r7, #0]
 8001f5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	db0a      	blt.n	8001f7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	b2da      	uxtb	r2, r3
 8001f6c:	490c      	ldr	r1, [pc, #48]	; (8001fa0 <__NVIC_SetPriority+0x4c>)
 8001f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f72:	0112      	lsls	r2, r2, #4
 8001f74:	b2d2      	uxtb	r2, r2
 8001f76:	440b      	add	r3, r1
 8001f78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f7c:	e00a      	b.n	8001f94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	b2da      	uxtb	r2, r3
 8001f82:	4908      	ldr	r1, [pc, #32]	; (8001fa4 <__NVIC_SetPriority+0x50>)
 8001f84:	79fb      	ldrb	r3, [r7, #7]
 8001f86:	f003 030f 	and.w	r3, r3, #15
 8001f8a:	3b04      	subs	r3, #4
 8001f8c:	0112      	lsls	r2, r2, #4
 8001f8e:	b2d2      	uxtb	r2, r2
 8001f90:	440b      	add	r3, r1
 8001f92:	761a      	strb	r2, [r3, #24]
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr
 8001fa0:	e000e100 	.word	0xe000e100
 8001fa4:	e000ed00 	.word	0xe000ed00

08001fa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b089      	sub	sp, #36	; 0x24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f003 0307 	and.w	r3, r3, #7
 8001fba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	f1c3 0307 	rsb	r3, r3, #7
 8001fc2:	2b04      	cmp	r3, #4
 8001fc4:	bf28      	it	cs
 8001fc6:	2304      	movcs	r3, #4
 8001fc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	3304      	adds	r3, #4
 8001fce:	2b06      	cmp	r3, #6
 8001fd0:	d902      	bls.n	8001fd8 <NVIC_EncodePriority+0x30>
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	3b03      	subs	r3, #3
 8001fd6:	e000      	b.n	8001fda <NVIC_EncodePriority+0x32>
 8001fd8:	2300      	movs	r3, #0
 8001fda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe6:	43da      	mvns	r2, r3
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	401a      	ands	r2, r3
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ff0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8001ffa:	43d9      	mvns	r1, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002000:	4313      	orrs	r3, r2
         );
}
 8002002:	4618      	mov	r0, r3
 8002004:	3724      	adds	r7, #36	; 0x24
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
	...

08002010 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	3b01      	subs	r3, #1
 800201c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002020:	d301      	bcc.n	8002026 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002022:	2301      	movs	r3, #1
 8002024:	e00f      	b.n	8002046 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002026:	4a0a      	ldr	r2, [pc, #40]	; (8002050 <SysTick_Config+0x40>)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3b01      	subs	r3, #1
 800202c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800202e:	210f      	movs	r1, #15
 8002030:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002034:	f7ff ff8e 	bl	8001f54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002038:	4b05      	ldr	r3, [pc, #20]	; (8002050 <SysTick_Config+0x40>)
 800203a:	2200      	movs	r2, #0
 800203c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800203e:	4b04      	ldr	r3, [pc, #16]	; (8002050 <SysTick_Config+0x40>)
 8002040:	2207      	movs	r2, #7
 8002042:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	e000e010 	.word	0xe000e010

08002054 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f7ff ff29 	bl	8001eb4 <__NVIC_SetPriorityGrouping>
}
 8002062:	bf00      	nop
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800206a:	b580      	push	{r7, lr}
 800206c:	b086      	sub	sp, #24
 800206e:	af00      	add	r7, sp, #0
 8002070:	4603      	mov	r3, r0
 8002072:	60b9      	str	r1, [r7, #8]
 8002074:	607a      	str	r2, [r7, #4]
 8002076:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002078:	2300      	movs	r3, #0
 800207a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800207c:	f7ff ff3e 	bl	8001efc <__NVIC_GetPriorityGrouping>
 8002080:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	68b9      	ldr	r1, [r7, #8]
 8002086:	6978      	ldr	r0, [r7, #20]
 8002088:	f7ff ff8e 	bl	8001fa8 <NVIC_EncodePriority>
 800208c:	4602      	mov	r2, r0
 800208e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002092:	4611      	mov	r1, r2
 8002094:	4618      	mov	r0, r3
 8002096:	f7ff ff5d 	bl	8001f54 <__NVIC_SetPriority>
}
 800209a:	bf00      	nop
 800209c:	3718      	adds	r7, #24
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b082      	sub	sp, #8
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	4603      	mov	r3, r0
 80020aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7ff ff31 	bl	8001f18 <__NVIC_EnableIRQ>
}
 80020b6:	bf00      	nop
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b082      	sub	sp, #8
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f7ff ffa2 	bl	8002010 <SysTick_Config>
 80020cc:	4603      	mov	r3, r0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
	...

080020d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020d8:	b480      	push	{r7}
 80020da:	b089      	sub	sp, #36	; 0x24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020e2:	2300      	movs	r3, #0
 80020e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020e6:	2300      	movs	r3, #0
 80020e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020ea:	2300      	movs	r3, #0
 80020ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020ee:	2300      	movs	r3, #0
 80020f0:	61fb      	str	r3, [r7, #28]
 80020f2:	e159      	b.n	80023a8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020f4:	2201      	movs	r2, #1
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	697a      	ldr	r2, [r7, #20]
 8002104:	4013      	ands	r3, r2
 8002106:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002108:	693a      	ldr	r2, [r7, #16]
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	429a      	cmp	r2, r3
 800210e:	f040 8148 	bne.w	80023a2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f003 0303 	and.w	r3, r3, #3
 800211a:	2b01      	cmp	r3, #1
 800211c:	d005      	beq.n	800212a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002126:	2b02      	cmp	r3, #2
 8002128:	d130      	bne.n	800218c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	2203      	movs	r2, #3
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	43db      	mvns	r3, r3
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	4013      	ands	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	68da      	ldr	r2, [r3, #12]
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	4313      	orrs	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002160:	2201      	movs	r2, #1
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	43db      	mvns	r3, r3
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	4013      	ands	r3, r2
 800216e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	091b      	lsrs	r3, r3, #4
 8002176:	f003 0201 	and.w	r2, r3, #1
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	4313      	orrs	r3, r2
 8002184:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f003 0303 	and.w	r3, r3, #3
 8002194:	2b03      	cmp	r3, #3
 8002196:	d017      	beq.n	80021c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	2203      	movs	r2, #3
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	43db      	mvns	r3, r3
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	4013      	ands	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	689a      	ldr	r2, [r3, #8]
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	4313      	orrs	r3, r2
 80021c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f003 0303 	and.w	r3, r3, #3
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d123      	bne.n	800221c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	08da      	lsrs	r2, r3, #3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	3208      	adds	r2, #8
 80021dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	f003 0307 	and.w	r3, r3, #7
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	220f      	movs	r2, #15
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	43db      	mvns	r3, r3
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	4013      	ands	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	691a      	ldr	r2, [r3, #16]
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	f003 0307 	and.w	r3, r3, #7
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	4313      	orrs	r3, r2
 800220c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	08da      	lsrs	r2, r3, #3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	3208      	adds	r2, #8
 8002216:	69b9      	ldr	r1, [r7, #24]
 8002218:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	2203      	movs	r2, #3
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	43db      	mvns	r3, r3
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	4013      	ands	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f003 0203 	and.w	r2, r3, #3
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4313      	orrs	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002258:	2b00      	cmp	r3, #0
 800225a:	f000 80a2 	beq.w	80023a2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800225e:	2300      	movs	r3, #0
 8002260:	60fb      	str	r3, [r7, #12]
 8002262:	4b57      	ldr	r3, [pc, #348]	; (80023c0 <HAL_GPIO_Init+0x2e8>)
 8002264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002266:	4a56      	ldr	r2, [pc, #344]	; (80023c0 <HAL_GPIO_Init+0x2e8>)
 8002268:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800226c:	6453      	str	r3, [r2, #68]	; 0x44
 800226e:	4b54      	ldr	r3, [pc, #336]	; (80023c0 <HAL_GPIO_Init+0x2e8>)
 8002270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002272:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002276:	60fb      	str	r3, [r7, #12]
 8002278:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800227a:	4a52      	ldr	r2, [pc, #328]	; (80023c4 <HAL_GPIO_Init+0x2ec>)
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	089b      	lsrs	r3, r3, #2
 8002280:	3302      	adds	r3, #2
 8002282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002286:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	f003 0303 	and.w	r3, r3, #3
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	220f      	movs	r2, #15
 8002292:	fa02 f303 	lsl.w	r3, r2, r3
 8002296:	43db      	mvns	r3, r3
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	4013      	ands	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a49      	ldr	r2, [pc, #292]	; (80023c8 <HAL_GPIO_Init+0x2f0>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d019      	beq.n	80022da <HAL_GPIO_Init+0x202>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a48      	ldr	r2, [pc, #288]	; (80023cc <HAL_GPIO_Init+0x2f4>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d013      	beq.n	80022d6 <HAL_GPIO_Init+0x1fe>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a47      	ldr	r2, [pc, #284]	; (80023d0 <HAL_GPIO_Init+0x2f8>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d00d      	beq.n	80022d2 <HAL_GPIO_Init+0x1fa>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a46      	ldr	r2, [pc, #280]	; (80023d4 <HAL_GPIO_Init+0x2fc>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d007      	beq.n	80022ce <HAL_GPIO_Init+0x1f6>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a45      	ldr	r2, [pc, #276]	; (80023d8 <HAL_GPIO_Init+0x300>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d101      	bne.n	80022ca <HAL_GPIO_Init+0x1f2>
 80022c6:	2304      	movs	r3, #4
 80022c8:	e008      	b.n	80022dc <HAL_GPIO_Init+0x204>
 80022ca:	2307      	movs	r3, #7
 80022cc:	e006      	b.n	80022dc <HAL_GPIO_Init+0x204>
 80022ce:	2303      	movs	r3, #3
 80022d0:	e004      	b.n	80022dc <HAL_GPIO_Init+0x204>
 80022d2:	2302      	movs	r3, #2
 80022d4:	e002      	b.n	80022dc <HAL_GPIO_Init+0x204>
 80022d6:	2301      	movs	r3, #1
 80022d8:	e000      	b.n	80022dc <HAL_GPIO_Init+0x204>
 80022da:	2300      	movs	r3, #0
 80022dc:	69fa      	ldr	r2, [r7, #28]
 80022de:	f002 0203 	and.w	r2, r2, #3
 80022e2:	0092      	lsls	r2, r2, #2
 80022e4:	4093      	lsls	r3, r2
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022ec:	4935      	ldr	r1, [pc, #212]	; (80023c4 <HAL_GPIO_Init+0x2ec>)
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	089b      	lsrs	r3, r3, #2
 80022f2:	3302      	adds	r3, #2
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022fa:	4b38      	ldr	r3, [pc, #224]	; (80023dc <HAL_GPIO_Init+0x304>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	43db      	mvns	r3, r3
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	4013      	ands	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d003      	beq.n	800231e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	4313      	orrs	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800231e:	4a2f      	ldr	r2, [pc, #188]	; (80023dc <HAL_GPIO_Init+0x304>)
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002324:	4b2d      	ldr	r3, [pc, #180]	; (80023dc <HAL_GPIO_Init+0x304>)
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	43db      	mvns	r3, r3
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	4013      	ands	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d003      	beq.n	8002348 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	4313      	orrs	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002348:	4a24      	ldr	r2, [pc, #144]	; (80023dc <HAL_GPIO_Init+0x304>)
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800234e:	4b23      	ldr	r3, [pc, #140]	; (80023dc <HAL_GPIO_Init+0x304>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	43db      	mvns	r3, r3
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	4013      	ands	r3, r2
 800235c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d003      	beq.n	8002372 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	4313      	orrs	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002372:	4a1a      	ldr	r2, [pc, #104]	; (80023dc <HAL_GPIO_Init+0x304>)
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002378:	4b18      	ldr	r3, [pc, #96]	; (80023dc <HAL_GPIO_Init+0x304>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	43db      	mvns	r3, r3
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	4013      	ands	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d003      	beq.n	800239c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	4313      	orrs	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800239c:	4a0f      	ldr	r2, [pc, #60]	; (80023dc <HAL_GPIO_Init+0x304>)
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	3301      	adds	r3, #1
 80023a6:	61fb      	str	r3, [r7, #28]
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	2b0f      	cmp	r3, #15
 80023ac:	f67f aea2 	bls.w	80020f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023b0:	bf00      	nop
 80023b2:	bf00      	nop
 80023b4:	3724      	adds	r7, #36	; 0x24
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	40023800 	.word	0x40023800
 80023c4:	40013800 	.word	0x40013800
 80023c8:	40020000 	.word	0x40020000
 80023cc:	40020400 	.word	0x40020400
 80023d0:	40020800 	.word	0x40020800
 80023d4:	40020c00 	.word	0x40020c00
 80023d8:	40021000 	.word	0x40021000
 80023dc:	40013c00 	.word	0x40013c00

080023e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	460b      	mov	r3, r1
 80023ea:	807b      	strh	r3, [r7, #2]
 80023ec:	4613      	mov	r3, r2
 80023ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023f0:	787b      	ldrb	r3, [r7, #1]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d003      	beq.n	80023fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023f6:	887a      	ldrh	r2, [r7, #2]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023fc:	e003      	b.n	8002406 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023fe:	887b      	ldrh	r3, [r7, #2]
 8002400:	041a      	lsls	r2, r3, #16
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	619a      	str	r2, [r3, #24]
}
 8002406:	bf00      	nop
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr

08002412 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002412:	b480      	push	{r7}
 8002414:	b085      	sub	sp, #20
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
 800241a:	460b      	mov	r3, r1
 800241c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002424:	887a      	ldrh	r2, [r7, #2]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	4013      	ands	r3, r2
 800242a:	041a      	lsls	r2, r3, #16
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	43d9      	mvns	r1, r3
 8002430:	887b      	ldrh	r3, [r7, #2]
 8002432:	400b      	ands	r3, r1
 8002434:	431a      	orrs	r2, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	619a      	str	r2, [r3, #24]
}
 800243a:	bf00      	nop
 800243c:	3714      	adds	r7, #20
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
	...

08002448 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e267      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	2b00      	cmp	r3, #0
 8002464:	d075      	beq.n	8002552 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002466:	4b88      	ldr	r3, [pc, #544]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f003 030c 	and.w	r3, r3, #12
 800246e:	2b04      	cmp	r3, #4
 8002470:	d00c      	beq.n	800248c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002472:	4b85      	ldr	r3, [pc, #532]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800247a:	2b08      	cmp	r3, #8
 800247c:	d112      	bne.n	80024a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800247e:	4b82      	ldr	r3, [pc, #520]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002486:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800248a:	d10b      	bne.n	80024a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800248c:	4b7e      	ldr	r3, [pc, #504]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d05b      	beq.n	8002550 <HAL_RCC_OscConfig+0x108>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d157      	bne.n	8002550 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e242      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024ac:	d106      	bne.n	80024bc <HAL_RCC_OscConfig+0x74>
 80024ae:	4b76      	ldr	r3, [pc, #472]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a75      	ldr	r2, [pc, #468]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 80024b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024b8:	6013      	str	r3, [r2, #0]
 80024ba:	e01d      	b.n	80024f8 <HAL_RCC_OscConfig+0xb0>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024c4:	d10c      	bne.n	80024e0 <HAL_RCC_OscConfig+0x98>
 80024c6:	4b70      	ldr	r3, [pc, #448]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a6f      	ldr	r2, [pc, #444]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 80024cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024d0:	6013      	str	r3, [r2, #0]
 80024d2:	4b6d      	ldr	r3, [pc, #436]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a6c      	ldr	r2, [pc, #432]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 80024d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024dc:	6013      	str	r3, [r2, #0]
 80024de:	e00b      	b.n	80024f8 <HAL_RCC_OscConfig+0xb0>
 80024e0:	4b69      	ldr	r3, [pc, #420]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a68      	ldr	r2, [pc, #416]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 80024e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ea:	6013      	str	r3, [r2, #0]
 80024ec:	4b66      	ldr	r3, [pc, #408]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a65      	ldr	r2, [pc, #404]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 80024f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d013      	beq.n	8002528 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002500:	f7ff f8ea 	bl	80016d8 <HAL_GetTick>
 8002504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002506:	e008      	b.n	800251a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002508:	f7ff f8e6 	bl	80016d8 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b64      	cmp	r3, #100	; 0x64
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e207      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800251a:	4b5b      	ldr	r3, [pc, #364]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d0f0      	beq.n	8002508 <HAL_RCC_OscConfig+0xc0>
 8002526:	e014      	b.n	8002552 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002528:	f7ff f8d6 	bl	80016d8 <HAL_GetTick>
 800252c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800252e:	e008      	b.n	8002542 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002530:	f7ff f8d2 	bl	80016d8 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b64      	cmp	r3, #100	; 0x64
 800253c:	d901      	bls.n	8002542 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e1f3      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002542:	4b51      	ldr	r3, [pc, #324]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1f0      	bne.n	8002530 <HAL_RCC_OscConfig+0xe8>
 800254e:	e000      	b.n	8002552 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002550:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d063      	beq.n	8002626 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800255e:	4b4a      	ldr	r3, [pc, #296]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f003 030c 	and.w	r3, r3, #12
 8002566:	2b00      	cmp	r3, #0
 8002568:	d00b      	beq.n	8002582 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800256a:	4b47      	ldr	r3, [pc, #284]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002572:	2b08      	cmp	r3, #8
 8002574:	d11c      	bne.n	80025b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002576:	4b44      	ldr	r3, [pc, #272]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d116      	bne.n	80025b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002582:	4b41      	ldr	r3, [pc, #260]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d005      	beq.n	800259a <HAL_RCC_OscConfig+0x152>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d001      	beq.n	800259a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e1c7      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800259a:	4b3b      	ldr	r3, [pc, #236]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	691b      	ldr	r3, [r3, #16]
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	4937      	ldr	r1, [pc, #220]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ae:	e03a      	b.n	8002626 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d020      	beq.n	80025fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025b8:	4b34      	ldr	r3, [pc, #208]	; (800268c <HAL_RCC_OscConfig+0x244>)
 80025ba:	2201      	movs	r2, #1
 80025bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025be:	f7ff f88b 	bl	80016d8 <HAL_GetTick>
 80025c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025c4:	e008      	b.n	80025d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025c6:	f7ff f887 	bl	80016d8 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d901      	bls.n	80025d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e1a8      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d8:	4b2b      	ldr	r3, [pc, #172]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d0f0      	beq.n	80025c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025e4:	4b28      	ldr	r3, [pc, #160]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	4925      	ldr	r1, [pc, #148]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	600b      	str	r3, [r1, #0]
 80025f8:	e015      	b.n	8002626 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025fa:	4b24      	ldr	r3, [pc, #144]	; (800268c <HAL_RCC_OscConfig+0x244>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002600:	f7ff f86a 	bl	80016d8 <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002608:	f7ff f866 	bl	80016d8 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e187      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800261a:	4b1b      	ldr	r3, [pc, #108]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1f0      	bne.n	8002608 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0308 	and.w	r3, r3, #8
 800262e:	2b00      	cmp	r3, #0
 8002630:	d036      	beq.n	80026a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d016      	beq.n	8002668 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800263a:	4b15      	ldr	r3, [pc, #84]	; (8002690 <HAL_RCC_OscConfig+0x248>)
 800263c:	2201      	movs	r2, #1
 800263e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002640:	f7ff f84a 	bl	80016d8 <HAL_GetTick>
 8002644:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002646:	e008      	b.n	800265a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002648:	f7ff f846 	bl	80016d8 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e167      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800265a:	4b0b      	ldr	r3, [pc, #44]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 800265c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d0f0      	beq.n	8002648 <HAL_RCC_OscConfig+0x200>
 8002666:	e01b      	b.n	80026a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002668:	4b09      	ldr	r3, [pc, #36]	; (8002690 <HAL_RCC_OscConfig+0x248>)
 800266a:	2200      	movs	r2, #0
 800266c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800266e:	f7ff f833 	bl	80016d8 <HAL_GetTick>
 8002672:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002674:	e00e      	b.n	8002694 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002676:	f7ff f82f 	bl	80016d8 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d907      	bls.n	8002694 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e150      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
 8002688:	40023800 	.word	0x40023800
 800268c:	42470000 	.word	0x42470000
 8002690:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002694:	4b88      	ldr	r3, [pc, #544]	; (80028b8 <HAL_RCC_OscConfig+0x470>)
 8002696:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002698:	f003 0302 	and.w	r3, r3, #2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d1ea      	bne.n	8002676 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0304 	and.w	r3, r3, #4
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f000 8097 	beq.w	80027dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026ae:	2300      	movs	r3, #0
 80026b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026b2:	4b81      	ldr	r3, [pc, #516]	; (80028b8 <HAL_RCC_OscConfig+0x470>)
 80026b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d10f      	bne.n	80026de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026be:	2300      	movs	r3, #0
 80026c0:	60bb      	str	r3, [r7, #8]
 80026c2:	4b7d      	ldr	r3, [pc, #500]	; (80028b8 <HAL_RCC_OscConfig+0x470>)
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	4a7c      	ldr	r2, [pc, #496]	; (80028b8 <HAL_RCC_OscConfig+0x470>)
 80026c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026cc:	6413      	str	r3, [r2, #64]	; 0x40
 80026ce:	4b7a      	ldr	r3, [pc, #488]	; (80028b8 <HAL_RCC_OscConfig+0x470>)
 80026d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d6:	60bb      	str	r3, [r7, #8]
 80026d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026da:	2301      	movs	r3, #1
 80026dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026de:	4b77      	ldr	r3, [pc, #476]	; (80028bc <HAL_RCC_OscConfig+0x474>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d118      	bne.n	800271c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026ea:	4b74      	ldr	r3, [pc, #464]	; (80028bc <HAL_RCC_OscConfig+0x474>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a73      	ldr	r2, [pc, #460]	; (80028bc <HAL_RCC_OscConfig+0x474>)
 80026f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026f6:	f7fe ffef 	bl	80016d8 <HAL_GetTick>
 80026fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026fc:	e008      	b.n	8002710 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026fe:	f7fe ffeb 	bl	80016d8 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d901      	bls.n	8002710 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e10c      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002710:	4b6a      	ldr	r3, [pc, #424]	; (80028bc <HAL_RCC_OscConfig+0x474>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002718:	2b00      	cmp	r3, #0
 800271a:	d0f0      	beq.n	80026fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d106      	bne.n	8002732 <HAL_RCC_OscConfig+0x2ea>
 8002724:	4b64      	ldr	r3, [pc, #400]	; (80028b8 <HAL_RCC_OscConfig+0x470>)
 8002726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002728:	4a63      	ldr	r2, [pc, #396]	; (80028b8 <HAL_RCC_OscConfig+0x470>)
 800272a:	f043 0301 	orr.w	r3, r3, #1
 800272e:	6713      	str	r3, [r2, #112]	; 0x70
 8002730:	e01c      	b.n	800276c <HAL_RCC_OscConfig+0x324>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	2b05      	cmp	r3, #5
 8002738:	d10c      	bne.n	8002754 <HAL_RCC_OscConfig+0x30c>
 800273a:	4b5f      	ldr	r3, [pc, #380]	; (80028b8 <HAL_RCC_OscConfig+0x470>)
 800273c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800273e:	4a5e      	ldr	r2, [pc, #376]	; (80028b8 <HAL_RCC_OscConfig+0x470>)
 8002740:	f043 0304 	orr.w	r3, r3, #4
 8002744:	6713      	str	r3, [r2, #112]	; 0x70
 8002746:	4b5c      	ldr	r3, [pc, #368]	; (80028b8 <HAL_RCC_OscConfig+0x470>)
 8002748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800274a:	4a5b      	ldr	r2, [pc, #364]	; (80028b8 <HAL_RCC_OscConfig+0x470>)
 800274c:	f043 0301 	orr.w	r3, r3, #1
 8002750:	6713      	str	r3, [r2, #112]	; 0x70
 8002752:	e00b      	b.n	800276c <HAL_RCC_OscConfig+0x324>
 8002754:	4b58      	ldr	r3, [pc, #352]	; (80028b8 <HAL_RCC_OscConfig+0x470>)
 8002756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002758:	4a57      	ldr	r2, [pc, #348]	; (80028b8 <HAL_RCC_OscConfig+0x470>)
 800275a:	f023 0301 	bic.w	r3, r3, #1
 800275e:	6713      	str	r3, [r2, #112]	; 0x70
 8002760:	4b55      	ldr	r3, [pc, #340]	; (80028b8 <HAL_RCC_OscConfig+0x470>)
 8002762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002764:	4a54      	ldr	r2, [pc, #336]	; (80028b8 <HAL_RCC_OscConfig+0x470>)
 8002766:	f023 0304 	bic.w	r3, r3, #4
 800276a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d015      	beq.n	80027a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002774:	f7fe ffb0 	bl	80016d8 <HAL_GetTick>
 8002778:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800277a:	e00a      	b.n	8002792 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800277c:	f7fe ffac 	bl	80016d8 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	f241 3288 	movw	r2, #5000	; 0x1388
 800278a:	4293      	cmp	r3, r2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e0cb      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002792:	4b49      	ldr	r3, [pc, #292]	; (80028b8 <HAL_RCC_OscConfig+0x470>)
 8002794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d0ee      	beq.n	800277c <HAL_RCC_OscConfig+0x334>
 800279e:	e014      	b.n	80027ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027a0:	f7fe ff9a 	bl	80016d8 <HAL_GetTick>
 80027a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027a6:	e00a      	b.n	80027be <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027a8:	f7fe ff96 	bl	80016d8 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e0b5      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027be:	4b3e      	ldr	r3, [pc, #248]	; (80028b8 <HAL_RCC_OscConfig+0x470>)
 80027c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1ee      	bne.n	80027a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027ca:	7dfb      	ldrb	r3, [r7, #23]
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d105      	bne.n	80027dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027d0:	4b39      	ldr	r3, [pc, #228]	; (80028b8 <HAL_RCC_OscConfig+0x470>)
 80027d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d4:	4a38      	ldr	r2, [pc, #224]	; (80028b8 <HAL_RCC_OscConfig+0x470>)
 80027d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	f000 80a1 	beq.w	8002928 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027e6:	4b34      	ldr	r3, [pc, #208]	; (80028b8 <HAL_RCC_OscConfig+0x470>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f003 030c 	and.w	r3, r3, #12
 80027ee:	2b08      	cmp	r3, #8
 80027f0:	d05c      	beq.n	80028ac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d141      	bne.n	800287e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027fa:	4b31      	ldr	r3, [pc, #196]	; (80028c0 <HAL_RCC_OscConfig+0x478>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002800:	f7fe ff6a 	bl	80016d8 <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002806:	e008      	b.n	800281a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002808:	f7fe ff66 	bl	80016d8 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e087      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800281a:	4b27      	ldr	r3, [pc, #156]	; (80028b8 <HAL_RCC_OscConfig+0x470>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1f0      	bne.n	8002808 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	69da      	ldr	r2, [r3, #28]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a1b      	ldr	r3, [r3, #32]
 800282e:	431a      	orrs	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002834:	019b      	lsls	r3, r3, #6
 8002836:	431a      	orrs	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800283c:	085b      	lsrs	r3, r3, #1
 800283e:	3b01      	subs	r3, #1
 8002840:	041b      	lsls	r3, r3, #16
 8002842:	431a      	orrs	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002848:	061b      	lsls	r3, r3, #24
 800284a:	491b      	ldr	r1, [pc, #108]	; (80028b8 <HAL_RCC_OscConfig+0x470>)
 800284c:	4313      	orrs	r3, r2
 800284e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002850:	4b1b      	ldr	r3, [pc, #108]	; (80028c0 <HAL_RCC_OscConfig+0x478>)
 8002852:	2201      	movs	r2, #1
 8002854:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002856:	f7fe ff3f 	bl	80016d8 <HAL_GetTick>
 800285a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800285c:	e008      	b.n	8002870 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800285e:	f7fe ff3b 	bl	80016d8 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b02      	cmp	r3, #2
 800286a:	d901      	bls.n	8002870 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e05c      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002870:	4b11      	ldr	r3, [pc, #68]	; (80028b8 <HAL_RCC_OscConfig+0x470>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d0f0      	beq.n	800285e <HAL_RCC_OscConfig+0x416>
 800287c:	e054      	b.n	8002928 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800287e:	4b10      	ldr	r3, [pc, #64]	; (80028c0 <HAL_RCC_OscConfig+0x478>)
 8002880:	2200      	movs	r2, #0
 8002882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002884:	f7fe ff28 	bl	80016d8 <HAL_GetTick>
 8002888:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800288a:	e008      	b.n	800289e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800288c:	f7fe ff24 	bl	80016d8 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b02      	cmp	r3, #2
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e045      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800289e:	4b06      	ldr	r3, [pc, #24]	; (80028b8 <HAL_RCC_OscConfig+0x470>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d1f0      	bne.n	800288c <HAL_RCC_OscConfig+0x444>
 80028aa:	e03d      	b.n	8002928 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d107      	bne.n	80028c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e038      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
 80028b8:	40023800 	.word	0x40023800
 80028bc:	40007000 	.word	0x40007000
 80028c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028c4:	4b1b      	ldr	r3, [pc, #108]	; (8002934 <HAL_RCC_OscConfig+0x4ec>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d028      	beq.n	8002924 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028dc:	429a      	cmp	r2, r3
 80028de:	d121      	bne.n	8002924 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d11a      	bne.n	8002924 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028f4:	4013      	ands	r3, r2
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d111      	bne.n	8002924 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800290a:	085b      	lsrs	r3, r3, #1
 800290c:	3b01      	subs	r3, #1
 800290e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002910:	429a      	cmp	r2, r3
 8002912:	d107      	bne.n	8002924 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002920:	429a      	cmp	r2, r3
 8002922:	d001      	beq.n	8002928 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e000      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3718      	adds	r7, #24
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	40023800 	.word	0x40023800

08002938 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d101      	bne.n	800294c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e0cc      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800294c:	4b68      	ldr	r3, [pc, #416]	; (8002af0 <HAL_RCC_ClockConfig+0x1b8>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0307 	and.w	r3, r3, #7
 8002954:	683a      	ldr	r2, [r7, #0]
 8002956:	429a      	cmp	r2, r3
 8002958:	d90c      	bls.n	8002974 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800295a:	4b65      	ldr	r3, [pc, #404]	; (8002af0 <HAL_RCC_ClockConfig+0x1b8>)
 800295c:	683a      	ldr	r2, [r7, #0]
 800295e:	b2d2      	uxtb	r2, r2
 8002960:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002962:	4b63      	ldr	r3, [pc, #396]	; (8002af0 <HAL_RCC_ClockConfig+0x1b8>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0307 	and.w	r3, r3, #7
 800296a:	683a      	ldr	r2, [r7, #0]
 800296c:	429a      	cmp	r2, r3
 800296e:	d001      	beq.n	8002974 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e0b8      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0302 	and.w	r3, r3, #2
 800297c:	2b00      	cmp	r3, #0
 800297e:	d020      	beq.n	80029c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0304 	and.w	r3, r3, #4
 8002988:	2b00      	cmp	r3, #0
 800298a:	d005      	beq.n	8002998 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800298c:	4b59      	ldr	r3, [pc, #356]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	4a58      	ldr	r2, [pc, #352]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002992:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002996:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0308 	and.w	r3, r3, #8
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d005      	beq.n	80029b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029a4:	4b53      	ldr	r3, [pc, #332]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	4a52      	ldr	r2, [pc, #328]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 80029aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029b0:	4b50      	ldr	r3, [pc, #320]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	494d      	ldr	r1, [pc, #308]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d044      	beq.n	8002a58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d107      	bne.n	80029e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029d6:	4b47      	ldr	r3, [pc, #284]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d119      	bne.n	8002a16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e07f      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d003      	beq.n	80029f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029f2:	2b03      	cmp	r3, #3
 80029f4:	d107      	bne.n	8002a06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029f6:	4b3f      	ldr	r3, [pc, #252]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d109      	bne.n	8002a16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e06f      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a06:	4b3b      	ldr	r3, [pc, #236]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e067      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a16:	4b37      	ldr	r3, [pc, #220]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f023 0203 	bic.w	r2, r3, #3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	4934      	ldr	r1, [pc, #208]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a28:	f7fe fe56 	bl	80016d8 <HAL_GetTick>
 8002a2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a2e:	e00a      	b.n	8002a46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a30:	f7fe fe52 	bl	80016d8 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e04f      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a46:	4b2b      	ldr	r3, [pc, #172]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f003 020c 	and.w	r2, r3, #12
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d1eb      	bne.n	8002a30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a58:	4b25      	ldr	r3, [pc, #148]	; (8002af0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0307 	and.w	r3, r3, #7
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d20c      	bcs.n	8002a80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a66:	4b22      	ldr	r3, [pc, #136]	; (8002af0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	b2d2      	uxtb	r2, r2
 8002a6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a6e:	4b20      	ldr	r3, [pc, #128]	; (8002af0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0307 	and.w	r3, r3, #7
 8002a76:	683a      	ldr	r2, [r7, #0]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d001      	beq.n	8002a80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e032      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0304 	and.w	r3, r3, #4
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d008      	beq.n	8002a9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a8c:	4b19      	ldr	r3, [pc, #100]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	4916      	ldr	r1, [pc, #88]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0308 	and.w	r3, r3, #8
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d009      	beq.n	8002abe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002aaa:	4b12      	ldr	r3, [pc, #72]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	490e      	ldr	r1, [pc, #56]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002abe:	f000 f821 	bl	8002b04 <HAL_RCC_GetSysClockFreq>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	4b0b      	ldr	r3, [pc, #44]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	091b      	lsrs	r3, r3, #4
 8002aca:	f003 030f 	and.w	r3, r3, #15
 8002ace:	490a      	ldr	r1, [pc, #40]	; (8002af8 <HAL_RCC_ClockConfig+0x1c0>)
 8002ad0:	5ccb      	ldrb	r3, [r1, r3]
 8002ad2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ad6:	4a09      	ldr	r2, [pc, #36]	; (8002afc <HAL_RCC_ClockConfig+0x1c4>)
 8002ad8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ada:	4b09      	ldr	r3, [pc, #36]	; (8002b00 <HAL_RCC_ClockConfig+0x1c8>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7fe fdb6 	bl	8001650 <HAL_InitTick>

  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	40023c00 	.word	0x40023c00
 8002af4:	40023800 	.word	0x40023800
 8002af8:	08005760 	.word	0x08005760
 8002afc:	20000000 	.word	0x20000000
 8002b00:	20000004 	.word	0x20000004

08002b04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b08:	b090      	sub	sp, #64	; 0x40
 8002b0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	637b      	str	r3, [r7, #52]	; 0x34
 8002b10:	2300      	movs	r3, #0
 8002b12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b14:	2300      	movs	r3, #0
 8002b16:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b1c:	4b59      	ldr	r3, [pc, #356]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f003 030c 	and.w	r3, r3, #12
 8002b24:	2b08      	cmp	r3, #8
 8002b26:	d00d      	beq.n	8002b44 <HAL_RCC_GetSysClockFreq+0x40>
 8002b28:	2b08      	cmp	r3, #8
 8002b2a:	f200 80a1 	bhi.w	8002c70 <HAL_RCC_GetSysClockFreq+0x16c>
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d002      	beq.n	8002b38 <HAL_RCC_GetSysClockFreq+0x34>
 8002b32:	2b04      	cmp	r3, #4
 8002b34:	d003      	beq.n	8002b3e <HAL_RCC_GetSysClockFreq+0x3a>
 8002b36:	e09b      	b.n	8002c70 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b38:	4b53      	ldr	r3, [pc, #332]	; (8002c88 <HAL_RCC_GetSysClockFreq+0x184>)
 8002b3a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002b3c:	e09b      	b.n	8002c76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b3e:	4b53      	ldr	r3, [pc, #332]	; (8002c8c <HAL_RCC_GetSysClockFreq+0x188>)
 8002b40:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002b42:	e098      	b.n	8002c76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b44:	4b4f      	ldr	r3, [pc, #316]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b4c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b4e:	4b4d      	ldr	r3, [pc, #308]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d028      	beq.n	8002bac <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b5a:	4b4a      	ldr	r3, [pc, #296]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	099b      	lsrs	r3, r3, #6
 8002b60:	2200      	movs	r2, #0
 8002b62:	623b      	str	r3, [r7, #32]
 8002b64:	627a      	str	r2, [r7, #36]	; 0x24
 8002b66:	6a3b      	ldr	r3, [r7, #32]
 8002b68:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	4b47      	ldr	r3, [pc, #284]	; (8002c8c <HAL_RCC_GetSysClockFreq+0x188>)
 8002b70:	fb03 f201 	mul.w	r2, r3, r1
 8002b74:	2300      	movs	r3, #0
 8002b76:	fb00 f303 	mul.w	r3, r0, r3
 8002b7a:	4413      	add	r3, r2
 8002b7c:	4a43      	ldr	r2, [pc, #268]	; (8002c8c <HAL_RCC_GetSysClockFreq+0x188>)
 8002b7e:	fba0 1202 	umull	r1, r2, r0, r2
 8002b82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b84:	460a      	mov	r2, r1
 8002b86:	62ba      	str	r2, [r7, #40]	; 0x28
 8002b88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b8a:	4413      	add	r3, r2
 8002b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b90:	2200      	movs	r2, #0
 8002b92:	61bb      	str	r3, [r7, #24]
 8002b94:	61fa      	str	r2, [r7, #28]
 8002b96:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b9a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002b9e:	f7fd fb6f 	bl	8000280 <__aeabi_uldivmod>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002baa:	e053      	b.n	8002c54 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bac:	4b35      	ldr	r3, [pc, #212]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	099b      	lsrs	r3, r3, #6
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	613b      	str	r3, [r7, #16]
 8002bb6:	617a      	str	r2, [r7, #20]
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002bbe:	f04f 0b00 	mov.w	fp, #0
 8002bc2:	4652      	mov	r2, sl
 8002bc4:	465b      	mov	r3, fp
 8002bc6:	f04f 0000 	mov.w	r0, #0
 8002bca:	f04f 0100 	mov.w	r1, #0
 8002bce:	0159      	lsls	r1, r3, #5
 8002bd0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bd4:	0150      	lsls	r0, r2, #5
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	460b      	mov	r3, r1
 8002bda:	ebb2 080a 	subs.w	r8, r2, sl
 8002bde:	eb63 090b 	sbc.w	r9, r3, fp
 8002be2:	f04f 0200 	mov.w	r2, #0
 8002be6:	f04f 0300 	mov.w	r3, #0
 8002bea:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002bee:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002bf2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002bf6:	ebb2 0408 	subs.w	r4, r2, r8
 8002bfa:	eb63 0509 	sbc.w	r5, r3, r9
 8002bfe:	f04f 0200 	mov.w	r2, #0
 8002c02:	f04f 0300 	mov.w	r3, #0
 8002c06:	00eb      	lsls	r3, r5, #3
 8002c08:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c0c:	00e2      	lsls	r2, r4, #3
 8002c0e:	4614      	mov	r4, r2
 8002c10:	461d      	mov	r5, r3
 8002c12:	eb14 030a 	adds.w	r3, r4, sl
 8002c16:	603b      	str	r3, [r7, #0]
 8002c18:	eb45 030b 	adc.w	r3, r5, fp
 8002c1c:	607b      	str	r3, [r7, #4]
 8002c1e:	f04f 0200 	mov.w	r2, #0
 8002c22:	f04f 0300 	mov.w	r3, #0
 8002c26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c2a:	4629      	mov	r1, r5
 8002c2c:	028b      	lsls	r3, r1, #10
 8002c2e:	4621      	mov	r1, r4
 8002c30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c34:	4621      	mov	r1, r4
 8002c36:	028a      	lsls	r2, r1, #10
 8002c38:	4610      	mov	r0, r2
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c3e:	2200      	movs	r2, #0
 8002c40:	60bb      	str	r3, [r7, #8]
 8002c42:	60fa      	str	r2, [r7, #12]
 8002c44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c48:	f7fd fb1a 	bl	8000280 <__aeabi_uldivmod>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	460b      	mov	r3, r1
 8002c50:	4613      	mov	r3, r2
 8002c52:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c54:	4b0b      	ldr	r3, [pc, #44]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	0c1b      	lsrs	r3, r3, #16
 8002c5a:	f003 0303 	and.w	r3, r3, #3
 8002c5e:	3301      	adds	r3, #1
 8002c60:	005b      	lsls	r3, r3, #1
 8002c62:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002c64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c6c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c6e:	e002      	b.n	8002c76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c70:	4b05      	ldr	r3, [pc, #20]	; (8002c88 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c72:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3740      	adds	r7, #64	; 0x40
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c82:	bf00      	nop
 8002c84:	40023800 	.word	0x40023800
 8002c88:	00f42400 	.word	0x00f42400
 8002c8c:	017d7840 	.word	0x017d7840

08002c90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c94:	4b03      	ldr	r3, [pc, #12]	; (8002ca4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c96:	681b      	ldr	r3, [r3, #0]
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	20000000 	.word	0x20000000

08002ca8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002cac:	f7ff fff0 	bl	8002c90 <HAL_RCC_GetHCLKFreq>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	4b05      	ldr	r3, [pc, #20]	; (8002cc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	0a9b      	lsrs	r3, r3, #10
 8002cb8:	f003 0307 	and.w	r3, r3, #7
 8002cbc:	4903      	ldr	r1, [pc, #12]	; (8002ccc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cbe:	5ccb      	ldrb	r3, [r1, r3]
 8002cc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	40023800 	.word	0x40023800
 8002ccc:	08005770 	.word	0x08005770

08002cd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002cd4:	f7ff ffdc 	bl	8002c90 <HAL_RCC_GetHCLKFreq>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	4b05      	ldr	r3, [pc, #20]	; (8002cf0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	0b5b      	lsrs	r3, r3, #13
 8002ce0:	f003 0307 	and.w	r3, r3, #7
 8002ce4:	4903      	ldr	r1, [pc, #12]	; (8002cf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ce6:	5ccb      	ldrb	r3, [r1, r3]
 8002ce8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	40023800 	.word	0x40023800
 8002cf4:	08005770 	.word	0x08005770

08002cf8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d101      	bne.n	8002d0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e041      	b.n	8002d8e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d106      	bne.n	8002d24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f7fe fa56 	bl	80011d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2202      	movs	r2, #2
 8002d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	3304      	adds	r3, #4
 8002d34:	4619      	mov	r1, r3
 8002d36:	4610      	mov	r0, r2
 8002d38:	f000 fcf6 	bl	8003728 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3708      	adds	r7, #8
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
	...

08002d98 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d001      	beq.n	8002db0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e03c      	b.n	8002e2a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2202      	movs	r2, #2
 8002db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a1e      	ldr	r2, [pc, #120]	; (8002e38 <HAL_TIM_Base_Start+0xa0>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d018      	beq.n	8002df4 <HAL_TIM_Base_Start+0x5c>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dca:	d013      	beq.n	8002df4 <HAL_TIM_Base_Start+0x5c>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a1a      	ldr	r2, [pc, #104]	; (8002e3c <HAL_TIM_Base_Start+0xa4>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d00e      	beq.n	8002df4 <HAL_TIM_Base_Start+0x5c>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a19      	ldr	r2, [pc, #100]	; (8002e40 <HAL_TIM_Base_Start+0xa8>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d009      	beq.n	8002df4 <HAL_TIM_Base_Start+0x5c>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a17      	ldr	r2, [pc, #92]	; (8002e44 <HAL_TIM_Base_Start+0xac>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d004      	beq.n	8002df4 <HAL_TIM_Base_Start+0x5c>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a16      	ldr	r2, [pc, #88]	; (8002e48 <HAL_TIM_Base_Start+0xb0>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d111      	bne.n	8002e18 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f003 0307 	and.w	r3, r3, #7
 8002dfe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2b06      	cmp	r3, #6
 8002e04:	d010      	beq.n	8002e28 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f042 0201 	orr.w	r2, r2, #1
 8002e14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e16:	e007      	b.n	8002e28 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f042 0201 	orr.w	r2, r2, #1
 8002e26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3714      	adds	r7, #20
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	40010000 	.word	0x40010000
 8002e3c:	40000400 	.word	0x40000400
 8002e40:	40000800 	.word	0x40000800
 8002e44:	40000c00 	.word	0x40000c00
 8002e48:	40014000 	.word	0x40014000

08002e4c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e041      	b.n	8002ee2 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d106      	bne.n	8002e78 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f7fe f9cc 	bl	8001210 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2202      	movs	r2, #2
 8002e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	3304      	adds	r3, #4
 8002e88:	4619      	mov	r1, r3
 8002e8a:	4610      	mov	r0, r2
 8002e8c:	f000 fc4c 	bl	8003728 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3708      	adds	r7, #8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b082      	sub	sp, #8
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d101      	bne.n	8002efc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e041      	b.n	8002f80 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d106      	bne.n	8002f16 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f7fe f935 	bl	8001180 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2202      	movs	r2, #2
 8002f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	3304      	adds	r3, #4
 8002f26:	4619      	mov	r1, r3
 8002f28:	4610      	mov	r0, r2
 8002f2a:	f000 fbfd 	bl	8003728 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2201      	movs	r2, #1
 8002f32:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2201      	movs	r2, #1
 8002f42:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2201      	movs	r2, #1
 8002f52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2201      	movs	r2, #1
 8002f62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2201      	movs	r2, #1
 8002f72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3708      	adds	r7, #8
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d109      	bne.n	8002fac <HAL_TIM_PWM_Start+0x24>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	bf14      	ite	ne
 8002fa4:	2301      	movne	r3, #1
 8002fa6:	2300      	moveq	r3, #0
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	e022      	b.n	8002ff2 <HAL_TIM_PWM_Start+0x6a>
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	2b04      	cmp	r3, #4
 8002fb0:	d109      	bne.n	8002fc6 <HAL_TIM_PWM_Start+0x3e>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	bf14      	ite	ne
 8002fbe:	2301      	movne	r3, #1
 8002fc0:	2300      	moveq	r3, #0
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	e015      	b.n	8002ff2 <HAL_TIM_PWM_Start+0x6a>
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	2b08      	cmp	r3, #8
 8002fca:	d109      	bne.n	8002fe0 <HAL_TIM_PWM_Start+0x58>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	bf14      	ite	ne
 8002fd8:	2301      	movne	r3, #1
 8002fda:	2300      	moveq	r3, #0
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	e008      	b.n	8002ff2 <HAL_TIM_PWM_Start+0x6a>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	bf14      	ite	ne
 8002fec:	2301      	movne	r3, #1
 8002fee:	2300      	moveq	r3, #0
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e068      	b.n	80030cc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d104      	bne.n	800300a <HAL_TIM_PWM_Start+0x82>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2202      	movs	r2, #2
 8003004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003008:	e013      	b.n	8003032 <HAL_TIM_PWM_Start+0xaa>
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	2b04      	cmp	r3, #4
 800300e:	d104      	bne.n	800301a <HAL_TIM_PWM_Start+0x92>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2202      	movs	r2, #2
 8003014:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003018:	e00b      	b.n	8003032 <HAL_TIM_PWM_Start+0xaa>
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	2b08      	cmp	r3, #8
 800301e:	d104      	bne.n	800302a <HAL_TIM_PWM_Start+0xa2>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2202      	movs	r2, #2
 8003024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003028:	e003      	b.n	8003032 <HAL_TIM_PWM_Start+0xaa>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2202      	movs	r2, #2
 800302e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2201      	movs	r2, #1
 8003038:	6839      	ldr	r1, [r7, #0]
 800303a:	4618      	mov	r0, r3
 800303c:	f000 fe1a 	bl	8003c74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a23      	ldr	r2, [pc, #140]	; (80030d4 <HAL_TIM_PWM_Start+0x14c>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d107      	bne.n	800305a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003058:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a1d      	ldr	r2, [pc, #116]	; (80030d4 <HAL_TIM_PWM_Start+0x14c>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d018      	beq.n	8003096 <HAL_TIM_PWM_Start+0x10e>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800306c:	d013      	beq.n	8003096 <HAL_TIM_PWM_Start+0x10e>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a19      	ldr	r2, [pc, #100]	; (80030d8 <HAL_TIM_PWM_Start+0x150>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d00e      	beq.n	8003096 <HAL_TIM_PWM_Start+0x10e>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a17      	ldr	r2, [pc, #92]	; (80030dc <HAL_TIM_PWM_Start+0x154>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d009      	beq.n	8003096 <HAL_TIM_PWM_Start+0x10e>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a16      	ldr	r2, [pc, #88]	; (80030e0 <HAL_TIM_PWM_Start+0x158>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d004      	beq.n	8003096 <HAL_TIM_PWM_Start+0x10e>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a14      	ldr	r2, [pc, #80]	; (80030e4 <HAL_TIM_PWM_Start+0x15c>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d111      	bne.n	80030ba <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f003 0307 	and.w	r3, r3, #7
 80030a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2b06      	cmp	r3, #6
 80030a6:	d010      	beq.n	80030ca <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f042 0201 	orr.w	r2, r2, #1
 80030b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030b8:	e007      	b.n	80030ca <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f042 0201 	orr.w	r2, r2, #1
 80030c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030ca:	2300      	movs	r3, #0
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3710      	adds	r7, #16
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	40010000 	.word	0x40010000
 80030d8:	40000400 	.word	0x40000400
 80030dc:	40000800 	.word	0x40000800
 80030e0:	40000c00 	.word	0x40000c00
 80030e4:	40014000 	.word	0x40014000

080030e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d122      	bne.n	8003144 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	f003 0302 	and.w	r3, r3, #2
 8003108:	2b02      	cmp	r3, #2
 800310a:	d11b      	bne.n	8003144 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f06f 0202 	mvn.w	r2, #2
 8003114:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	f003 0303 	and.w	r3, r3, #3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d003      	beq.n	8003132 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 fadd 	bl	80036ea <HAL_TIM_IC_CaptureCallback>
 8003130:	e005      	b.n	800313e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 facf 	bl	80036d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f000 fae0 	bl	80036fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	f003 0304 	and.w	r3, r3, #4
 800314e:	2b04      	cmp	r3, #4
 8003150:	d122      	bne.n	8003198 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	f003 0304 	and.w	r3, r3, #4
 800315c:	2b04      	cmp	r3, #4
 800315e:	d11b      	bne.n	8003198 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f06f 0204 	mvn.w	r2, #4
 8003168:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2202      	movs	r2, #2
 800316e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800317a:	2b00      	cmp	r3, #0
 800317c:	d003      	beq.n	8003186 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 fab3 	bl	80036ea <HAL_TIM_IC_CaptureCallback>
 8003184:	e005      	b.n	8003192 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 faa5 	bl	80036d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f000 fab6 	bl	80036fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	f003 0308 	and.w	r3, r3, #8
 80031a2:	2b08      	cmp	r3, #8
 80031a4:	d122      	bne.n	80031ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	f003 0308 	and.w	r3, r3, #8
 80031b0:	2b08      	cmp	r3, #8
 80031b2:	d11b      	bne.n	80031ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f06f 0208 	mvn.w	r2, #8
 80031bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2204      	movs	r2, #4
 80031c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	69db      	ldr	r3, [r3, #28]
 80031ca:	f003 0303 	and.w	r3, r3, #3
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d003      	beq.n	80031da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 fa89 	bl	80036ea <HAL_TIM_IC_CaptureCallback>
 80031d8:	e005      	b.n	80031e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 fa7b 	bl	80036d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f000 fa8c 	bl	80036fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	f003 0310 	and.w	r3, r3, #16
 80031f6:	2b10      	cmp	r3, #16
 80031f8:	d122      	bne.n	8003240 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	f003 0310 	and.w	r3, r3, #16
 8003204:	2b10      	cmp	r3, #16
 8003206:	d11b      	bne.n	8003240 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f06f 0210 	mvn.w	r2, #16
 8003210:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2208      	movs	r2, #8
 8003216:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	69db      	ldr	r3, [r3, #28]
 800321e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003222:	2b00      	cmp	r3, #0
 8003224:	d003      	beq.n	800322e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 fa5f 	bl	80036ea <HAL_TIM_IC_CaptureCallback>
 800322c:	e005      	b.n	800323a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 fa51 	bl	80036d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f000 fa62 	bl	80036fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	2b01      	cmp	r3, #1
 800324c:	d10e      	bne.n	800326c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	f003 0301 	and.w	r3, r3, #1
 8003258:	2b01      	cmp	r3, #1
 800325a:	d107      	bne.n	800326c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f06f 0201 	mvn.w	r2, #1
 8003264:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 fa2b 	bl	80036c2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003276:	2b80      	cmp	r3, #128	; 0x80
 8003278:	d10e      	bne.n	8003298 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003284:	2b80      	cmp	r3, #128	; 0x80
 8003286:	d107      	bne.n	8003298 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003290:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 fe34 	bl	8003f00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a2:	2b40      	cmp	r3, #64	; 0x40
 80032a4:	d10e      	bne.n	80032c4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b0:	2b40      	cmp	r3, #64	; 0x40
 80032b2:	d107      	bne.n	80032c4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 fa27 	bl	8003712 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	f003 0320 	and.w	r3, r3, #32
 80032ce:	2b20      	cmp	r3, #32
 80032d0:	d10e      	bne.n	80032f0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	f003 0320 	and.w	r3, r3, #32
 80032dc:	2b20      	cmp	r3, #32
 80032de:	d107      	bne.n	80032f0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f06f 0220 	mvn.w	r2, #32
 80032e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f7fd fcbe 	bl	8000c6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032f0:	bf00      	nop
 80032f2:	3708      	adds	r7, #8
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b086      	sub	sp, #24
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003304:	2300      	movs	r3, #0
 8003306:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800330e:	2b01      	cmp	r3, #1
 8003310:	d101      	bne.n	8003316 <HAL_TIM_OC_ConfigChannel+0x1e>
 8003312:	2302      	movs	r3, #2
 8003314:	e048      	b.n	80033a8 <HAL_TIM_OC_ConfigChannel+0xb0>
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2201      	movs	r2, #1
 800331a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2b0c      	cmp	r3, #12
 8003322:	d839      	bhi.n	8003398 <HAL_TIM_OC_ConfigChannel+0xa0>
 8003324:	a201      	add	r2, pc, #4	; (adr r2, 800332c <HAL_TIM_OC_ConfigChannel+0x34>)
 8003326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800332a:	bf00      	nop
 800332c:	08003361 	.word	0x08003361
 8003330:	08003399 	.word	0x08003399
 8003334:	08003399 	.word	0x08003399
 8003338:	08003399 	.word	0x08003399
 800333c:	0800336f 	.word	0x0800336f
 8003340:	08003399 	.word	0x08003399
 8003344:	08003399 	.word	0x08003399
 8003348:	08003399 	.word	0x08003399
 800334c:	0800337d 	.word	0x0800337d
 8003350:	08003399 	.word	0x08003399
 8003354:	08003399 	.word	0x08003399
 8003358:	08003399 	.word	0x08003399
 800335c:	0800338b 	.word	0x0800338b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68b9      	ldr	r1, [r7, #8]
 8003366:	4618      	mov	r0, r3
 8003368:	f000 fa5e 	bl	8003828 <TIM_OC1_SetConfig>
      break;
 800336c:	e017      	b.n	800339e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68b9      	ldr	r1, [r7, #8]
 8003374:	4618      	mov	r0, r3
 8003376:	f000 fabd 	bl	80038f4 <TIM_OC2_SetConfig>
      break;
 800337a:	e010      	b.n	800339e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68b9      	ldr	r1, [r7, #8]
 8003382:	4618      	mov	r0, r3
 8003384:	f000 fb22 	bl	80039cc <TIM_OC3_SetConfig>
      break;
 8003388:	e009      	b.n	800339e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68b9      	ldr	r1, [r7, #8]
 8003390:	4618      	mov	r0, r3
 8003392:	f000 fb85 	bl	8003aa0 <TIM_OC4_SetConfig>
      break;
 8003396:	e002      	b.n	800339e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	75fb      	strb	r3, [r7, #23]
      break;
 800339c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80033a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3718      	adds	r7, #24
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b086      	sub	sp, #24
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033bc:	2300      	movs	r3, #0
 80033be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d101      	bne.n	80033ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80033ca:	2302      	movs	r3, #2
 80033cc:	e0ae      	b.n	800352c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2201      	movs	r2, #1
 80033d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2b0c      	cmp	r3, #12
 80033da:	f200 809f 	bhi.w	800351c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80033de:	a201      	add	r2, pc, #4	; (adr r2, 80033e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80033e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e4:	08003419 	.word	0x08003419
 80033e8:	0800351d 	.word	0x0800351d
 80033ec:	0800351d 	.word	0x0800351d
 80033f0:	0800351d 	.word	0x0800351d
 80033f4:	08003459 	.word	0x08003459
 80033f8:	0800351d 	.word	0x0800351d
 80033fc:	0800351d 	.word	0x0800351d
 8003400:	0800351d 	.word	0x0800351d
 8003404:	0800349b 	.word	0x0800349b
 8003408:	0800351d 	.word	0x0800351d
 800340c:	0800351d 	.word	0x0800351d
 8003410:	0800351d 	.word	0x0800351d
 8003414:	080034db 	.word	0x080034db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68b9      	ldr	r1, [r7, #8]
 800341e:	4618      	mov	r0, r3
 8003420:	f000 fa02 	bl	8003828 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	699a      	ldr	r2, [r3, #24]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f042 0208 	orr.w	r2, r2, #8
 8003432:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	699a      	ldr	r2, [r3, #24]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f022 0204 	bic.w	r2, r2, #4
 8003442:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6999      	ldr	r1, [r3, #24]
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	691a      	ldr	r2, [r3, #16]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	430a      	orrs	r2, r1
 8003454:	619a      	str	r2, [r3, #24]
      break;
 8003456:	e064      	b.n	8003522 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68b9      	ldr	r1, [r7, #8]
 800345e:	4618      	mov	r0, r3
 8003460:	f000 fa48 	bl	80038f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	699a      	ldr	r2, [r3, #24]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003472:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	699a      	ldr	r2, [r3, #24]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003482:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6999      	ldr	r1, [r3, #24]
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	021a      	lsls	r2, r3, #8
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	430a      	orrs	r2, r1
 8003496:	619a      	str	r2, [r3, #24]
      break;
 8003498:	e043      	b.n	8003522 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68b9      	ldr	r1, [r7, #8]
 80034a0:	4618      	mov	r0, r3
 80034a2:	f000 fa93 	bl	80039cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	69da      	ldr	r2, [r3, #28]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f042 0208 	orr.w	r2, r2, #8
 80034b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	69da      	ldr	r2, [r3, #28]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f022 0204 	bic.w	r2, r2, #4
 80034c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	69d9      	ldr	r1, [r3, #28]
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	691a      	ldr	r2, [r3, #16]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	430a      	orrs	r2, r1
 80034d6:	61da      	str	r2, [r3, #28]
      break;
 80034d8:	e023      	b.n	8003522 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68b9      	ldr	r1, [r7, #8]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f000 fadd 	bl	8003aa0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	69da      	ldr	r2, [r3, #28]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	69da      	ldr	r2, [r3, #28]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003504:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	69d9      	ldr	r1, [r3, #28]
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	021a      	lsls	r2, r3, #8
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	430a      	orrs	r2, r1
 8003518:	61da      	str	r2, [r3, #28]
      break;
 800351a:	e002      	b.n	8003522 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	75fb      	strb	r3, [r7, #23]
      break;
 8003520:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800352a:	7dfb      	ldrb	r3, [r7, #23]
}
 800352c:	4618      	mov	r0, r3
 800352e:	3718      	adds	r7, #24
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}

08003534 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800353e:	2300      	movs	r3, #0
 8003540:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003548:	2b01      	cmp	r3, #1
 800354a:	d101      	bne.n	8003550 <HAL_TIM_ConfigClockSource+0x1c>
 800354c:	2302      	movs	r3, #2
 800354e:	e0b4      	b.n	80036ba <HAL_TIM_ConfigClockSource+0x186>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2202      	movs	r2, #2
 800355c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800356e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003576:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68ba      	ldr	r2, [r7, #8]
 800357e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003588:	d03e      	beq.n	8003608 <HAL_TIM_ConfigClockSource+0xd4>
 800358a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800358e:	f200 8087 	bhi.w	80036a0 <HAL_TIM_ConfigClockSource+0x16c>
 8003592:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003596:	f000 8086 	beq.w	80036a6 <HAL_TIM_ConfigClockSource+0x172>
 800359a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800359e:	d87f      	bhi.n	80036a0 <HAL_TIM_ConfigClockSource+0x16c>
 80035a0:	2b70      	cmp	r3, #112	; 0x70
 80035a2:	d01a      	beq.n	80035da <HAL_TIM_ConfigClockSource+0xa6>
 80035a4:	2b70      	cmp	r3, #112	; 0x70
 80035a6:	d87b      	bhi.n	80036a0 <HAL_TIM_ConfigClockSource+0x16c>
 80035a8:	2b60      	cmp	r3, #96	; 0x60
 80035aa:	d050      	beq.n	800364e <HAL_TIM_ConfigClockSource+0x11a>
 80035ac:	2b60      	cmp	r3, #96	; 0x60
 80035ae:	d877      	bhi.n	80036a0 <HAL_TIM_ConfigClockSource+0x16c>
 80035b0:	2b50      	cmp	r3, #80	; 0x50
 80035b2:	d03c      	beq.n	800362e <HAL_TIM_ConfigClockSource+0xfa>
 80035b4:	2b50      	cmp	r3, #80	; 0x50
 80035b6:	d873      	bhi.n	80036a0 <HAL_TIM_ConfigClockSource+0x16c>
 80035b8:	2b40      	cmp	r3, #64	; 0x40
 80035ba:	d058      	beq.n	800366e <HAL_TIM_ConfigClockSource+0x13a>
 80035bc:	2b40      	cmp	r3, #64	; 0x40
 80035be:	d86f      	bhi.n	80036a0 <HAL_TIM_ConfigClockSource+0x16c>
 80035c0:	2b30      	cmp	r3, #48	; 0x30
 80035c2:	d064      	beq.n	800368e <HAL_TIM_ConfigClockSource+0x15a>
 80035c4:	2b30      	cmp	r3, #48	; 0x30
 80035c6:	d86b      	bhi.n	80036a0 <HAL_TIM_ConfigClockSource+0x16c>
 80035c8:	2b20      	cmp	r3, #32
 80035ca:	d060      	beq.n	800368e <HAL_TIM_ConfigClockSource+0x15a>
 80035cc:	2b20      	cmp	r3, #32
 80035ce:	d867      	bhi.n	80036a0 <HAL_TIM_ConfigClockSource+0x16c>
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d05c      	beq.n	800368e <HAL_TIM_ConfigClockSource+0x15a>
 80035d4:	2b10      	cmp	r3, #16
 80035d6:	d05a      	beq.n	800368e <HAL_TIM_ConfigClockSource+0x15a>
 80035d8:	e062      	b.n	80036a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6818      	ldr	r0, [r3, #0]
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	6899      	ldr	r1, [r3, #8]
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685a      	ldr	r2, [r3, #4]
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	f000 fb23 	bl	8003c34 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80035fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68ba      	ldr	r2, [r7, #8]
 8003604:	609a      	str	r2, [r3, #8]
      break;
 8003606:	e04f      	b.n	80036a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6818      	ldr	r0, [r3, #0]
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	6899      	ldr	r1, [r3, #8]
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	685a      	ldr	r2, [r3, #4]
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	f000 fb0c 	bl	8003c34 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	689a      	ldr	r2, [r3, #8]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800362a:	609a      	str	r2, [r3, #8]
      break;
 800362c:	e03c      	b.n	80036a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6818      	ldr	r0, [r3, #0]
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	6859      	ldr	r1, [r3, #4]
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	461a      	mov	r2, r3
 800363c:	f000 fa80 	bl	8003b40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2150      	movs	r1, #80	; 0x50
 8003646:	4618      	mov	r0, r3
 8003648:	f000 fad9 	bl	8003bfe <TIM_ITRx_SetConfig>
      break;
 800364c:	e02c      	b.n	80036a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6818      	ldr	r0, [r3, #0]
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	6859      	ldr	r1, [r3, #4]
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	461a      	mov	r2, r3
 800365c:	f000 fa9f 	bl	8003b9e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2160      	movs	r1, #96	; 0x60
 8003666:	4618      	mov	r0, r3
 8003668:	f000 fac9 	bl	8003bfe <TIM_ITRx_SetConfig>
      break;
 800366c:	e01c      	b.n	80036a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6818      	ldr	r0, [r3, #0]
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	6859      	ldr	r1, [r3, #4]
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	461a      	mov	r2, r3
 800367c:	f000 fa60 	bl	8003b40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2140      	movs	r1, #64	; 0x40
 8003686:	4618      	mov	r0, r3
 8003688:	f000 fab9 	bl	8003bfe <TIM_ITRx_SetConfig>
      break;
 800368c:	e00c      	b.n	80036a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4619      	mov	r1, r3
 8003698:	4610      	mov	r0, r2
 800369a:	f000 fab0 	bl	8003bfe <TIM_ITRx_SetConfig>
      break;
 800369e:	e003      	b.n	80036a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	73fb      	strb	r3, [r7, #15]
      break;
 80036a4:	e000      	b.n	80036a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80036a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80036b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036c2:	b480      	push	{r7}
 80036c4:	b083      	sub	sp, #12
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80036ca:	bf00      	nop
 80036cc:	370c      	adds	r7, #12
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr

080036d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036d6:	b480      	push	{r7}
 80036d8:	b083      	sub	sp, #12
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036de:	bf00      	nop
 80036e0:	370c      	adds	r7, #12
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr

080036ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036ea:	b480      	push	{r7}
 80036ec:	b083      	sub	sp, #12
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036f2:	bf00      	nop
 80036f4:	370c      	adds	r7, #12
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr

080036fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036fe:	b480      	push	{r7}
 8003700:	b083      	sub	sp, #12
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003706:	bf00      	nop
 8003708:	370c      	adds	r7, #12
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr

08003712 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003712:	b480      	push	{r7}
 8003714:	b083      	sub	sp, #12
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800371a:	bf00      	nop
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
	...

08003728 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003728:	b480      	push	{r7}
 800372a:	b085      	sub	sp, #20
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a34      	ldr	r2, [pc, #208]	; (800380c <TIM_Base_SetConfig+0xe4>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d00f      	beq.n	8003760 <TIM_Base_SetConfig+0x38>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003746:	d00b      	beq.n	8003760 <TIM_Base_SetConfig+0x38>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4a31      	ldr	r2, [pc, #196]	; (8003810 <TIM_Base_SetConfig+0xe8>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d007      	beq.n	8003760 <TIM_Base_SetConfig+0x38>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a30      	ldr	r2, [pc, #192]	; (8003814 <TIM_Base_SetConfig+0xec>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d003      	beq.n	8003760 <TIM_Base_SetConfig+0x38>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a2f      	ldr	r2, [pc, #188]	; (8003818 <TIM_Base_SetConfig+0xf0>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d108      	bne.n	8003772 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003766:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	68fa      	ldr	r2, [r7, #12]
 800376e:	4313      	orrs	r3, r2
 8003770:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a25      	ldr	r2, [pc, #148]	; (800380c <TIM_Base_SetConfig+0xe4>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d01b      	beq.n	80037b2 <TIM_Base_SetConfig+0x8a>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003780:	d017      	beq.n	80037b2 <TIM_Base_SetConfig+0x8a>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a22      	ldr	r2, [pc, #136]	; (8003810 <TIM_Base_SetConfig+0xe8>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d013      	beq.n	80037b2 <TIM_Base_SetConfig+0x8a>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a21      	ldr	r2, [pc, #132]	; (8003814 <TIM_Base_SetConfig+0xec>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d00f      	beq.n	80037b2 <TIM_Base_SetConfig+0x8a>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a20      	ldr	r2, [pc, #128]	; (8003818 <TIM_Base_SetConfig+0xf0>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d00b      	beq.n	80037b2 <TIM_Base_SetConfig+0x8a>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a1f      	ldr	r2, [pc, #124]	; (800381c <TIM_Base_SetConfig+0xf4>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d007      	beq.n	80037b2 <TIM_Base_SetConfig+0x8a>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a1e      	ldr	r2, [pc, #120]	; (8003820 <TIM_Base_SetConfig+0xf8>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d003      	beq.n	80037b2 <TIM_Base_SetConfig+0x8a>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a1d      	ldr	r2, [pc, #116]	; (8003824 <TIM_Base_SetConfig+0xfc>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d108      	bne.n	80037c4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	689a      	ldr	r2, [r3, #8]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a08      	ldr	r2, [pc, #32]	; (800380c <TIM_Base_SetConfig+0xe4>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d103      	bne.n	80037f8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	691a      	ldr	r2, [r3, #16]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	615a      	str	r2, [r3, #20]
}
 80037fe:	bf00      	nop
 8003800:	3714      	adds	r7, #20
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	40010000 	.word	0x40010000
 8003810:	40000400 	.word	0x40000400
 8003814:	40000800 	.word	0x40000800
 8003818:	40000c00 	.word	0x40000c00
 800381c:	40014000 	.word	0x40014000
 8003820:	40014400 	.word	0x40014400
 8003824:	40014800 	.word	0x40014800

08003828 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003828:	b480      	push	{r7}
 800382a:	b087      	sub	sp, #28
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	f023 0201 	bic.w	r2, r3, #1
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a1b      	ldr	r3, [r3, #32]
 8003842:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f023 0303 	bic.w	r3, r3, #3
 800385e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	4313      	orrs	r3, r2
 8003868:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	f023 0302 	bic.w	r3, r3, #2
 8003870:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	697a      	ldr	r2, [r7, #20]
 8003878:	4313      	orrs	r3, r2
 800387a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a1c      	ldr	r2, [pc, #112]	; (80038f0 <TIM_OC1_SetConfig+0xc8>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d10c      	bne.n	800389e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	f023 0308 	bic.w	r3, r3, #8
 800388a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	697a      	ldr	r2, [r7, #20]
 8003892:	4313      	orrs	r3, r2
 8003894:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	f023 0304 	bic.w	r3, r3, #4
 800389c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a13      	ldr	r2, [pc, #76]	; (80038f0 <TIM_OC1_SetConfig+0xc8>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d111      	bne.n	80038ca <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	695b      	ldr	r3, [r3, #20]
 80038ba:	693a      	ldr	r2, [r7, #16]
 80038bc:	4313      	orrs	r3, r2
 80038be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	693a      	ldr	r2, [r7, #16]
 80038ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	685a      	ldr	r2, [r3, #4]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	621a      	str	r2, [r3, #32]
}
 80038e4:	bf00      	nop
 80038e6:	371c      	adds	r7, #28
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr
 80038f0:	40010000 	.word	0x40010000

080038f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b087      	sub	sp, #28
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	f023 0210 	bic.w	r2, r3, #16
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a1b      	ldr	r3, [r3, #32]
 800390e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003922:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800392a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	021b      	lsls	r3, r3, #8
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	4313      	orrs	r3, r2
 8003936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	f023 0320 	bic.w	r3, r3, #32
 800393e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	011b      	lsls	r3, r3, #4
 8003946:	697a      	ldr	r2, [r7, #20]
 8003948:	4313      	orrs	r3, r2
 800394a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4a1e      	ldr	r2, [pc, #120]	; (80039c8 <TIM_OC2_SetConfig+0xd4>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d10d      	bne.n	8003970 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800395a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	011b      	lsls	r3, r3, #4
 8003962:	697a      	ldr	r2, [r7, #20]
 8003964:	4313      	orrs	r3, r2
 8003966:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800396e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a15      	ldr	r2, [pc, #84]	; (80039c8 <TIM_OC2_SetConfig+0xd4>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d113      	bne.n	80039a0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800397e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003986:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	695b      	ldr	r3, [r3, #20]
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	4313      	orrs	r3, r2
 8003992:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	699b      	ldr	r3, [r3, #24]
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	693a      	ldr	r2, [r7, #16]
 800399c:	4313      	orrs	r3, r2
 800399e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	693a      	ldr	r2, [r7, #16]
 80039a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	68fa      	ldr	r2, [r7, #12]
 80039aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	685a      	ldr	r2, [r3, #4]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	621a      	str	r2, [r3, #32]
}
 80039ba:	bf00      	nop
 80039bc:	371c      	adds	r7, #28
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	40010000 	.word	0x40010000

080039cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b087      	sub	sp, #28
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a1b      	ldr	r3, [r3, #32]
 80039da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a1b      	ldr	r3, [r3, #32]
 80039e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	69db      	ldr	r3, [r3, #28]
 80039f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f023 0303 	bic.w	r3, r3, #3
 8003a02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	021b      	lsls	r3, r3, #8
 8003a1c:	697a      	ldr	r2, [r7, #20]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a1d      	ldr	r2, [pc, #116]	; (8003a9c <TIM_OC3_SetConfig+0xd0>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d10d      	bne.n	8003a46 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	021b      	lsls	r3, r3, #8
 8003a38:	697a      	ldr	r2, [r7, #20]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a14      	ldr	r2, [pc, #80]	; (8003a9c <TIM_OC3_SetConfig+0xd0>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d113      	bne.n	8003a76 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	695b      	ldr	r3, [r3, #20]
 8003a62:	011b      	lsls	r3, r3, #4
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	699b      	ldr	r3, [r3, #24]
 8003a6e:	011b      	lsls	r3, r3, #4
 8003a70:	693a      	ldr	r2, [r7, #16]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	693a      	ldr	r2, [r7, #16]
 8003a7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	685a      	ldr	r2, [r3, #4]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	697a      	ldr	r2, [r7, #20]
 8003a8e:	621a      	str	r2, [r3, #32]
}
 8003a90:	bf00      	nop
 8003a92:	371c      	adds	r7, #28
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr
 8003a9c:	40010000 	.word	0x40010000

08003aa0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b087      	sub	sp, #28
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a1b      	ldr	r3, [r3, #32]
 8003aba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	69db      	ldr	r3, [r3, #28]
 8003ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ace:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ad6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	021b      	lsls	r3, r3, #8
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003aea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	031b      	lsls	r3, r3, #12
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a10      	ldr	r2, [pc, #64]	; (8003b3c <TIM_OC4_SetConfig+0x9c>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d109      	bne.n	8003b14 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	695b      	ldr	r3, [r3, #20]
 8003b0c:	019b      	lsls	r3, r3, #6
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	697a      	ldr	r2, [r7, #20]
 8003b18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	68fa      	ldr	r2, [r7, #12]
 8003b1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	685a      	ldr	r2, [r3, #4]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	621a      	str	r2, [r3, #32]
}
 8003b2e:	bf00      	nop
 8003b30:	371c      	adds	r7, #28
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	40010000 	.word	0x40010000

08003b40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b087      	sub	sp, #28
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6a1b      	ldr	r3, [r3, #32]
 8003b50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6a1b      	ldr	r3, [r3, #32]
 8003b56:	f023 0201 	bic.w	r2, r3, #1
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	011b      	lsls	r3, r3, #4
 8003b70:	693a      	ldr	r2, [r7, #16]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	f023 030a 	bic.w	r3, r3, #10
 8003b7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b7e:	697a      	ldr	r2, [r7, #20]
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	693a      	ldr	r2, [r7, #16]
 8003b8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	697a      	ldr	r2, [r7, #20]
 8003b90:	621a      	str	r2, [r3, #32]
}
 8003b92:	bf00      	nop
 8003b94:	371c      	adds	r7, #28
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr

08003b9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b9e:	b480      	push	{r7}
 8003ba0:	b087      	sub	sp, #28
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	60f8      	str	r0, [r7, #12]
 8003ba6:	60b9      	str	r1, [r7, #8]
 8003ba8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	f023 0210 	bic.w	r2, r3, #16
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6a1b      	ldr	r3, [r3, #32]
 8003bc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003bc8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	031b      	lsls	r3, r3, #12
 8003bce:	697a      	ldr	r2, [r7, #20]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003bda:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	011b      	lsls	r3, r3, #4
 8003be0:	693a      	ldr	r2, [r7, #16]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	693a      	ldr	r2, [r7, #16]
 8003bf0:	621a      	str	r2, [r3, #32]
}
 8003bf2:	bf00      	nop
 8003bf4:	371c      	adds	r7, #28
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr

08003bfe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003bfe:	b480      	push	{r7}
 8003c00:	b085      	sub	sp, #20
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
 8003c06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c16:	683a      	ldr	r2, [r7, #0]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	f043 0307 	orr.w	r3, r3, #7
 8003c20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	68fa      	ldr	r2, [r7, #12]
 8003c26:	609a      	str	r2, [r3, #8]
}
 8003c28:	bf00      	nop
 8003c2a:	3714      	adds	r7, #20
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b087      	sub	sp, #28
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]
 8003c40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	021a      	lsls	r2, r3, #8
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	431a      	orrs	r2, r3
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	697a      	ldr	r2, [r7, #20]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	697a      	ldr	r2, [r7, #20]
 8003c66:	609a      	str	r2, [r3, #8]
}
 8003c68:	bf00      	nop
 8003c6a:	371c      	adds	r7, #28
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b087      	sub	sp, #28
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	f003 031f 	and.w	r3, r3, #31
 8003c86:	2201      	movs	r2, #1
 8003c88:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6a1a      	ldr	r2, [r3, #32]
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	43db      	mvns	r3, r3
 8003c96:	401a      	ands	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6a1a      	ldr	r2, [r3, #32]
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	f003 031f 	and.w	r3, r3, #31
 8003ca6:	6879      	ldr	r1, [r7, #4]
 8003ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8003cac:	431a      	orrs	r2, r3
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	621a      	str	r2, [r3, #32]
}
 8003cb2:	bf00      	nop
 8003cb4:	371c      	adds	r7, #28
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr

08003cbe <HAL_TIMEx_ConfigCommutEvent_IT>:
  *            @arg TIM_COMMUTATION_SOFTWARE:  Commutation source is set by software using the COMG bit
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigCommutEvent_IT(TIM_HandleTypeDef *htim, uint32_t  InputTrigger,
                                                 uint32_t  CommutationSource)
{
 8003cbe:	b480      	push	{r7}
 8003cc0:	b085      	sub	sp, #20
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	60f8      	str	r0, [r7, #12]
 8003cc6:	60b9      	str	r1, [r7, #8]
 8003cc8:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_COMMUTATION_EVENT_INSTANCE(htim->Instance));
  assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));

  __HAL_LOCK(htim);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d101      	bne.n	8003cd8 <HAL_TIMEx_ConfigCommutEvent_IT+0x1a>
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	e04c      	b.n	8003d72 <HAL_TIMEx_ConfigCommutEvent_IT+0xb4>
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d008      	beq.n	8003cf8 <HAL_TIMEx_ConfigCommutEvent_IT+0x3a>
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	2b10      	cmp	r3, #16
 8003cea:	d005      	beq.n	8003cf8 <HAL_TIMEx_ConfigCommutEvent_IT+0x3a>
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	2b20      	cmp	r3, #32
 8003cf0:	d002      	beq.n	8003cf8 <HAL_TIMEx_ConfigCommutEvent_IT+0x3a>
      (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	2b30      	cmp	r3, #48	; 0x30
 8003cf6:	d10f      	bne.n	8003d18 <HAL_TIMEx_ConfigCommutEvent_IT+0x5a>
  {
    /* Select the Input trigger */
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	689a      	ldr	r2, [r3, #8]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003d06:	609a      	str	r2, [r3, #8]
    htim->Instance->SMCR |= InputTrigger;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	6899      	ldr	r1, [r3, #8]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68ba      	ldr	r2, [r7, #8]
 8003d14:	430a      	orrs	r2, r1
 8003d16:	609a      	str	r2, [r3, #8]
  }

  /* Select the Capture Compare preload feature */
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	685a      	ldr	r2, [r3, #4]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f042 0201 	orr.w	r2, r2, #1
 8003d26:	605a      	str	r2, [r3, #4]
  /* Select the Commutation event source */
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	685a      	ldr	r2, [r3, #4]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f022 0204 	bic.w	r2, r2, #4
 8003d36:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= CommutationSource;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	6859      	ldr	r1, [r3, #4]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	430a      	orrs	r2, r1
 8003d46:	605a      	str	r2, [r3, #4]

  /* Disable Commutation DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_COM);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68da      	ldr	r2, [r3, #12]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d56:	60da      	str	r2, [r3, #12]

  /* Enable the Commutation Interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_COM);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68da      	ldr	r2, [r3, #12]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f042 0220 	orr.w	r2, r2, #32
 8003d66:	60da      	str	r2, [r3, #12]

  __HAL_UNLOCK(htim);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3714      	adds	r7, #20
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
	...

08003d80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d101      	bne.n	8003d98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d94:	2302      	movs	r3, #2
 8003d96:	e050      	b.n	8003e3a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2202      	movs	r2, #2
 8003da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dbe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	68fa      	ldr	r2, [r7, #12]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68fa      	ldr	r2, [r7, #12]
 8003dd0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a1c      	ldr	r2, [pc, #112]	; (8003e48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d018      	beq.n	8003e0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003de4:	d013      	beq.n	8003e0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a18      	ldr	r2, [pc, #96]	; (8003e4c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d00e      	beq.n	8003e0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a16      	ldr	r2, [pc, #88]	; (8003e50 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d009      	beq.n	8003e0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a15      	ldr	r2, [pc, #84]	; (8003e54 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d004      	beq.n	8003e0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a13      	ldr	r2, [pc, #76]	; (8003e58 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d10c      	bne.n	8003e28 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	68ba      	ldr	r2, [r7, #8]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68ba      	ldr	r2, [r7, #8]
 8003e26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3714      	adds	r7, #20
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	40010000 	.word	0x40010000
 8003e4c:	40000400 	.word	0x40000400
 8003e50:	40000800 	.word	0x40000800
 8003e54:	40000c00 	.word	0x40000c00
 8003e58:	40014000 	.word	0x40014000

08003e5c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b085      	sub	sp, #20
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003e66:	2300      	movs	r3, #0
 8003e68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d101      	bne.n	8003e78 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003e74:	2302      	movs	r3, #2
 8003e76:	e03d      	b.n	8003ef4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	695b      	ldr	r3, [r3, #20]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	69db      	ldr	r3, [r3, #28]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ef2:	2300      	movs	r3, #0
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3714      	adds	r7, #20
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f08:	bf00      	nop
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d101      	bne.n	8003f26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e03f      	b.n	8003fa6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d106      	bne.n	8003f40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f7fd fa0a 	bl	8001354 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2224      	movs	r2, #36	; 0x24
 8003f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68da      	ldr	r2, [r3, #12]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f000 f929 	bl	80041b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	691a      	ldr	r2, [r3, #16]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	695a      	ldr	r2, [r3, #20]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68da      	ldr	r2, [r3, #12]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2220      	movs	r2, #32
 8003f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2220      	movs	r2, #32
 8003fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3708      	adds	r7, #8
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}

08003fae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fae:	b580      	push	{r7, lr}
 8003fb0:	b08a      	sub	sp, #40	; 0x28
 8003fb2:	af02      	add	r7, sp, #8
 8003fb4:	60f8      	str	r0, [r7, #12]
 8003fb6:	60b9      	str	r1, [r7, #8]
 8003fb8:	603b      	str	r3, [r7, #0]
 8003fba:	4613      	mov	r3, r2
 8003fbc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	2b20      	cmp	r3, #32
 8003fcc:	d17c      	bne.n	80040c8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d002      	beq.n	8003fda <HAL_UART_Transmit+0x2c>
 8003fd4:	88fb      	ldrh	r3, [r7, #6]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d101      	bne.n	8003fde <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e075      	b.n	80040ca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d101      	bne.n	8003fec <HAL_UART_Transmit+0x3e>
 8003fe8:	2302      	movs	r3, #2
 8003fea:	e06e      	b.n	80040ca <HAL_UART_Transmit+0x11c>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2221      	movs	r2, #33	; 0x21
 8003ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004002:	f7fd fb69 	bl	80016d8 <HAL_GetTick>
 8004006:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	88fa      	ldrh	r2, [r7, #6]
 800400c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	88fa      	ldrh	r2, [r7, #6]
 8004012:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800401c:	d108      	bne.n	8004030 <HAL_UART_Transmit+0x82>
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d104      	bne.n	8004030 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004026:	2300      	movs	r3, #0
 8004028:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	61bb      	str	r3, [r7, #24]
 800402e:	e003      	b.n	8004038 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004034:	2300      	movs	r3, #0
 8004036:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004040:	e02a      	b.n	8004098 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	9300      	str	r3, [sp, #0]
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	2200      	movs	r2, #0
 800404a:	2180      	movs	r1, #128	; 0x80
 800404c:	68f8      	ldr	r0, [r7, #12]
 800404e:	f000 f840 	bl	80040d2 <UART_WaitOnFlagUntilTimeout>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d001      	beq.n	800405c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e036      	b.n	80040ca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d10b      	bne.n	800407a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	881b      	ldrh	r3, [r3, #0]
 8004066:	461a      	mov	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004070:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	3302      	adds	r3, #2
 8004076:	61bb      	str	r3, [r7, #24]
 8004078:	e007      	b.n	800408a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	781a      	ldrb	r2, [r3, #0]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	3301      	adds	r3, #1
 8004088:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800408e:	b29b      	uxth	r3, r3
 8004090:	3b01      	subs	r3, #1
 8004092:	b29a      	uxth	r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800409c:	b29b      	uxth	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1cf      	bne.n	8004042 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	9300      	str	r3, [sp, #0]
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	2200      	movs	r2, #0
 80040aa:	2140      	movs	r1, #64	; 0x40
 80040ac:	68f8      	ldr	r0, [r7, #12]
 80040ae:	f000 f810 	bl	80040d2 <UART_WaitOnFlagUntilTimeout>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d001      	beq.n	80040bc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e006      	b.n	80040ca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2220      	movs	r2, #32
 80040c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80040c4:	2300      	movs	r3, #0
 80040c6:	e000      	b.n	80040ca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80040c8:	2302      	movs	r3, #2
  }
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3720      	adds	r7, #32
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}

080040d2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80040d2:	b580      	push	{r7, lr}
 80040d4:	b090      	sub	sp, #64	; 0x40
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	60f8      	str	r0, [r7, #12]
 80040da:	60b9      	str	r1, [r7, #8]
 80040dc:	603b      	str	r3, [r7, #0]
 80040de:	4613      	mov	r3, r2
 80040e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040e2:	e050      	b.n	8004186 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040ea:	d04c      	beq.n	8004186 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80040ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d007      	beq.n	8004102 <UART_WaitOnFlagUntilTimeout+0x30>
 80040f2:	f7fd faf1 	bl	80016d8 <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040fe:	429a      	cmp	r2, r3
 8004100:	d241      	bcs.n	8004186 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	330c      	adds	r3, #12
 8004108:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800410a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800410c:	e853 3f00 	ldrex	r3, [r3]
 8004110:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004114:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004118:	63fb      	str	r3, [r7, #60]	; 0x3c
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	330c      	adds	r3, #12
 8004120:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004122:	637a      	str	r2, [r7, #52]	; 0x34
 8004124:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004126:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004128:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800412a:	e841 2300 	strex	r3, r2, [r1]
 800412e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1e5      	bne.n	8004102 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	3314      	adds	r3, #20
 800413c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	e853 3f00 	ldrex	r3, [r3]
 8004144:	613b      	str	r3, [r7, #16]
   return(result);
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	f023 0301 	bic.w	r3, r3, #1
 800414c:	63bb      	str	r3, [r7, #56]	; 0x38
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	3314      	adds	r3, #20
 8004154:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004156:	623a      	str	r2, [r7, #32]
 8004158:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415a:	69f9      	ldr	r1, [r7, #28]
 800415c:	6a3a      	ldr	r2, [r7, #32]
 800415e:	e841 2300 	strex	r3, r2, [r1]
 8004162:	61bb      	str	r3, [r7, #24]
   return(result);
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d1e5      	bne.n	8004136 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2220      	movs	r2, #32
 800416e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2220      	movs	r2, #32
 8004176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2200      	movs	r2, #0
 800417e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e00f      	b.n	80041a6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	4013      	ands	r3, r2
 8004190:	68ba      	ldr	r2, [r7, #8]
 8004192:	429a      	cmp	r2, r3
 8004194:	bf0c      	ite	eq
 8004196:	2301      	moveq	r3, #1
 8004198:	2300      	movne	r3, #0
 800419a:	b2db      	uxtb	r3, r3
 800419c:	461a      	mov	r2, r3
 800419e:	79fb      	ldrb	r3, [r7, #7]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d09f      	beq.n	80040e4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3740      	adds	r7, #64	; 0x40
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
	...

080041b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041b4:	b0c0      	sub	sp, #256	; 0x100
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	691b      	ldr	r3, [r3, #16]
 80041c4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80041c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041cc:	68d9      	ldr	r1, [r3, #12]
 80041ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	ea40 0301 	orr.w	r3, r0, r1
 80041d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80041da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041de:	689a      	ldr	r2, [r3, #8]
 80041e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	431a      	orrs	r2, r3
 80041e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	431a      	orrs	r2, r3
 80041f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041f4:	69db      	ldr	r3, [r3, #28]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80041fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004208:	f021 010c 	bic.w	r1, r1, #12
 800420c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004216:	430b      	orrs	r3, r1
 8004218:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800421a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800422a:	6999      	ldr	r1, [r3, #24]
 800422c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	ea40 0301 	orr.w	r3, r0, r1
 8004236:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	4b8f      	ldr	r3, [pc, #572]	; (800447c <UART_SetConfig+0x2cc>)
 8004240:	429a      	cmp	r2, r3
 8004242:	d005      	beq.n	8004250 <UART_SetConfig+0xa0>
 8004244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	4b8d      	ldr	r3, [pc, #564]	; (8004480 <UART_SetConfig+0x2d0>)
 800424c:	429a      	cmp	r2, r3
 800424e:	d104      	bne.n	800425a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004250:	f7fe fd3e 	bl	8002cd0 <HAL_RCC_GetPCLK2Freq>
 8004254:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004258:	e003      	b.n	8004262 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800425a:	f7fe fd25 	bl	8002ca8 <HAL_RCC_GetPCLK1Freq>
 800425e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004266:	69db      	ldr	r3, [r3, #28]
 8004268:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800426c:	f040 810c 	bne.w	8004488 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004270:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004274:	2200      	movs	r2, #0
 8004276:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800427a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800427e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004282:	4622      	mov	r2, r4
 8004284:	462b      	mov	r3, r5
 8004286:	1891      	adds	r1, r2, r2
 8004288:	65b9      	str	r1, [r7, #88]	; 0x58
 800428a:	415b      	adcs	r3, r3
 800428c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800428e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004292:	4621      	mov	r1, r4
 8004294:	eb12 0801 	adds.w	r8, r2, r1
 8004298:	4629      	mov	r1, r5
 800429a:	eb43 0901 	adc.w	r9, r3, r1
 800429e:	f04f 0200 	mov.w	r2, #0
 80042a2:	f04f 0300 	mov.w	r3, #0
 80042a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042b2:	4690      	mov	r8, r2
 80042b4:	4699      	mov	r9, r3
 80042b6:	4623      	mov	r3, r4
 80042b8:	eb18 0303 	adds.w	r3, r8, r3
 80042bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80042c0:	462b      	mov	r3, r5
 80042c2:	eb49 0303 	adc.w	r3, r9, r3
 80042c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80042ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80042d6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80042da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80042de:	460b      	mov	r3, r1
 80042e0:	18db      	adds	r3, r3, r3
 80042e2:	653b      	str	r3, [r7, #80]	; 0x50
 80042e4:	4613      	mov	r3, r2
 80042e6:	eb42 0303 	adc.w	r3, r2, r3
 80042ea:	657b      	str	r3, [r7, #84]	; 0x54
 80042ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80042f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80042f4:	f7fb ffc4 	bl	8000280 <__aeabi_uldivmod>
 80042f8:	4602      	mov	r2, r0
 80042fa:	460b      	mov	r3, r1
 80042fc:	4b61      	ldr	r3, [pc, #388]	; (8004484 <UART_SetConfig+0x2d4>)
 80042fe:	fba3 2302 	umull	r2, r3, r3, r2
 8004302:	095b      	lsrs	r3, r3, #5
 8004304:	011c      	lsls	r4, r3, #4
 8004306:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800430a:	2200      	movs	r2, #0
 800430c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004310:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004314:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004318:	4642      	mov	r2, r8
 800431a:	464b      	mov	r3, r9
 800431c:	1891      	adds	r1, r2, r2
 800431e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004320:	415b      	adcs	r3, r3
 8004322:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004324:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004328:	4641      	mov	r1, r8
 800432a:	eb12 0a01 	adds.w	sl, r2, r1
 800432e:	4649      	mov	r1, r9
 8004330:	eb43 0b01 	adc.w	fp, r3, r1
 8004334:	f04f 0200 	mov.w	r2, #0
 8004338:	f04f 0300 	mov.w	r3, #0
 800433c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004340:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004344:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004348:	4692      	mov	sl, r2
 800434a:	469b      	mov	fp, r3
 800434c:	4643      	mov	r3, r8
 800434e:	eb1a 0303 	adds.w	r3, sl, r3
 8004352:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004356:	464b      	mov	r3, r9
 8004358:	eb4b 0303 	adc.w	r3, fp, r3
 800435c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800436c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004370:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004374:	460b      	mov	r3, r1
 8004376:	18db      	adds	r3, r3, r3
 8004378:	643b      	str	r3, [r7, #64]	; 0x40
 800437a:	4613      	mov	r3, r2
 800437c:	eb42 0303 	adc.w	r3, r2, r3
 8004380:	647b      	str	r3, [r7, #68]	; 0x44
 8004382:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004386:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800438a:	f7fb ff79 	bl	8000280 <__aeabi_uldivmod>
 800438e:	4602      	mov	r2, r0
 8004390:	460b      	mov	r3, r1
 8004392:	4611      	mov	r1, r2
 8004394:	4b3b      	ldr	r3, [pc, #236]	; (8004484 <UART_SetConfig+0x2d4>)
 8004396:	fba3 2301 	umull	r2, r3, r3, r1
 800439a:	095b      	lsrs	r3, r3, #5
 800439c:	2264      	movs	r2, #100	; 0x64
 800439e:	fb02 f303 	mul.w	r3, r2, r3
 80043a2:	1acb      	subs	r3, r1, r3
 80043a4:	00db      	lsls	r3, r3, #3
 80043a6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80043aa:	4b36      	ldr	r3, [pc, #216]	; (8004484 <UART_SetConfig+0x2d4>)
 80043ac:	fba3 2302 	umull	r2, r3, r3, r2
 80043b0:	095b      	lsrs	r3, r3, #5
 80043b2:	005b      	lsls	r3, r3, #1
 80043b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80043b8:	441c      	add	r4, r3
 80043ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043be:	2200      	movs	r2, #0
 80043c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80043c4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80043c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80043cc:	4642      	mov	r2, r8
 80043ce:	464b      	mov	r3, r9
 80043d0:	1891      	adds	r1, r2, r2
 80043d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80043d4:	415b      	adcs	r3, r3
 80043d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80043dc:	4641      	mov	r1, r8
 80043de:	1851      	adds	r1, r2, r1
 80043e0:	6339      	str	r1, [r7, #48]	; 0x30
 80043e2:	4649      	mov	r1, r9
 80043e4:	414b      	adcs	r3, r1
 80043e6:	637b      	str	r3, [r7, #52]	; 0x34
 80043e8:	f04f 0200 	mov.w	r2, #0
 80043ec:	f04f 0300 	mov.w	r3, #0
 80043f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80043f4:	4659      	mov	r1, fp
 80043f6:	00cb      	lsls	r3, r1, #3
 80043f8:	4651      	mov	r1, sl
 80043fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043fe:	4651      	mov	r1, sl
 8004400:	00ca      	lsls	r2, r1, #3
 8004402:	4610      	mov	r0, r2
 8004404:	4619      	mov	r1, r3
 8004406:	4603      	mov	r3, r0
 8004408:	4642      	mov	r2, r8
 800440a:	189b      	adds	r3, r3, r2
 800440c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004410:	464b      	mov	r3, r9
 8004412:	460a      	mov	r2, r1
 8004414:	eb42 0303 	adc.w	r3, r2, r3
 8004418:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800441c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004428:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800442c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004430:	460b      	mov	r3, r1
 8004432:	18db      	adds	r3, r3, r3
 8004434:	62bb      	str	r3, [r7, #40]	; 0x28
 8004436:	4613      	mov	r3, r2
 8004438:	eb42 0303 	adc.w	r3, r2, r3
 800443c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800443e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004442:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004446:	f7fb ff1b 	bl	8000280 <__aeabi_uldivmod>
 800444a:	4602      	mov	r2, r0
 800444c:	460b      	mov	r3, r1
 800444e:	4b0d      	ldr	r3, [pc, #52]	; (8004484 <UART_SetConfig+0x2d4>)
 8004450:	fba3 1302 	umull	r1, r3, r3, r2
 8004454:	095b      	lsrs	r3, r3, #5
 8004456:	2164      	movs	r1, #100	; 0x64
 8004458:	fb01 f303 	mul.w	r3, r1, r3
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	00db      	lsls	r3, r3, #3
 8004460:	3332      	adds	r3, #50	; 0x32
 8004462:	4a08      	ldr	r2, [pc, #32]	; (8004484 <UART_SetConfig+0x2d4>)
 8004464:	fba2 2303 	umull	r2, r3, r2, r3
 8004468:	095b      	lsrs	r3, r3, #5
 800446a:	f003 0207 	and.w	r2, r3, #7
 800446e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4422      	add	r2, r4
 8004476:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004478:	e105      	b.n	8004686 <UART_SetConfig+0x4d6>
 800447a:	bf00      	nop
 800447c:	40011000 	.word	0x40011000
 8004480:	40011400 	.word	0x40011400
 8004484:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004488:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800448c:	2200      	movs	r2, #0
 800448e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004492:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004496:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800449a:	4642      	mov	r2, r8
 800449c:	464b      	mov	r3, r9
 800449e:	1891      	adds	r1, r2, r2
 80044a0:	6239      	str	r1, [r7, #32]
 80044a2:	415b      	adcs	r3, r3
 80044a4:	627b      	str	r3, [r7, #36]	; 0x24
 80044a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80044aa:	4641      	mov	r1, r8
 80044ac:	1854      	adds	r4, r2, r1
 80044ae:	4649      	mov	r1, r9
 80044b0:	eb43 0501 	adc.w	r5, r3, r1
 80044b4:	f04f 0200 	mov.w	r2, #0
 80044b8:	f04f 0300 	mov.w	r3, #0
 80044bc:	00eb      	lsls	r3, r5, #3
 80044be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044c2:	00e2      	lsls	r2, r4, #3
 80044c4:	4614      	mov	r4, r2
 80044c6:	461d      	mov	r5, r3
 80044c8:	4643      	mov	r3, r8
 80044ca:	18e3      	adds	r3, r4, r3
 80044cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80044d0:	464b      	mov	r3, r9
 80044d2:	eb45 0303 	adc.w	r3, r5, r3
 80044d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80044da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80044e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80044ea:	f04f 0200 	mov.w	r2, #0
 80044ee:	f04f 0300 	mov.w	r3, #0
 80044f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80044f6:	4629      	mov	r1, r5
 80044f8:	008b      	lsls	r3, r1, #2
 80044fa:	4621      	mov	r1, r4
 80044fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004500:	4621      	mov	r1, r4
 8004502:	008a      	lsls	r2, r1, #2
 8004504:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004508:	f7fb feba 	bl	8000280 <__aeabi_uldivmod>
 800450c:	4602      	mov	r2, r0
 800450e:	460b      	mov	r3, r1
 8004510:	4b60      	ldr	r3, [pc, #384]	; (8004694 <UART_SetConfig+0x4e4>)
 8004512:	fba3 2302 	umull	r2, r3, r3, r2
 8004516:	095b      	lsrs	r3, r3, #5
 8004518:	011c      	lsls	r4, r3, #4
 800451a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800451e:	2200      	movs	r2, #0
 8004520:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004524:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004528:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800452c:	4642      	mov	r2, r8
 800452e:	464b      	mov	r3, r9
 8004530:	1891      	adds	r1, r2, r2
 8004532:	61b9      	str	r1, [r7, #24]
 8004534:	415b      	adcs	r3, r3
 8004536:	61fb      	str	r3, [r7, #28]
 8004538:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800453c:	4641      	mov	r1, r8
 800453e:	1851      	adds	r1, r2, r1
 8004540:	6139      	str	r1, [r7, #16]
 8004542:	4649      	mov	r1, r9
 8004544:	414b      	adcs	r3, r1
 8004546:	617b      	str	r3, [r7, #20]
 8004548:	f04f 0200 	mov.w	r2, #0
 800454c:	f04f 0300 	mov.w	r3, #0
 8004550:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004554:	4659      	mov	r1, fp
 8004556:	00cb      	lsls	r3, r1, #3
 8004558:	4651      	mov	r1, sl
 800455a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800455e:	4651      	mov	r1, sl
 8004560:	00ca      	lsls	r2, r1, #3
 8004562:	4610      	mov	r0, r2
 8004564:	4619      	mov	r1, r3
 8004566:	4603      	mov	r3, r0
 8004568:	4642      	mov	r2, r8
 800456a:	189b      	adds	r3, r3, r2
 800456c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004570:	464b      	mov	r3, r9
 8004572:	460a      	mov	r2, r1
 8004574:	eb42 0303 	adc.w	r3, r2, r3
 8004578:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800457c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	67bb      	str	r3, [r7, #120]	; 0x78
 8004586:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004588:	f04f 0200 	mov.w	r2, #0
 800458c:	f04f 0300 	mov.w	r3, #0
 8004590:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004594:	4649      	mov	r1, r9
 8004596:	008b      	lsls	r3, r1, #2
 8004598:	4641      	mov	r1, r8
 800459a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800459e:	4641      	mov	r1, r8
 80045a0:	008a      	lsls	r2, r1, #2
 80045a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80045a6:	f7fb fe6b 	bl	8000280 <__aeabi_uldivmod>
 80045aa:	4602      	mov	r2, r0
 80045ac:	460b      	mov	r3, r1
 80045ae:	4b39      	ldr	r3, [pc, #228]	; (8004694 <UART_SetConfig+0x4e4>)
 80045b0:	fba3 1302 	umull	r1, r3, r3, r2
 80045b4:	095b      	lsrs	r3, r3, #5
 80045b6:	2164      	movs	r1, #100	; 0x64
 80045b8:	fb01 f303 	mul.w	r3, r1, r3
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	011b      	lsls	r3, r3, #4
 80045c0:	3332      	adds	r3, #50	; 0x32
 80045c2:	4a34      	ldr	r2, [pc, #208]	; (8004694 <UART_SetConfig+0x4e4>)
 80045c4:	fba2 2303 	umull	r2, r3, r2, r3
 80045c8:	095b      	lsrs	r3, r3, #5
 80045ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045ce:	441c      	add	r4, r3
 80045d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045d4:	2200      	movs	r2, #0
 80045d6:	673b      	str	r3, [r7, #112]	; 0x70
 80045d8:	677a      	str	r2, [r7, #116]	; 0x74
 80045da:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80045de:	4642      	mov	r2, r8
 80045e0:	464b      	mov	r3, r9
 80045e2:	1891      	adds	r1, r2, r2
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	415b      	adcs	r3, r3
 80045e8:	60fb      	str	r3, [r7, #12]
 80045ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045ee:	4641      	mov	r1, r8
 80045f0:	1851      	adds	r1, r2, r1
 80045f2:	6039      	str	r1, [r7, #0]
 80045f4:	4649      	mov	r1, r9
 80045f6:	414b      	adcs	r3, r1
 80045f8:	607b      	str	r3, [r7, #4]
 80045fa:	f04f 0200 	mov.w	r2, #0
 80045fe:	f04f 0300 	mov.w	r3, #0
 8004602:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004606:	4659      	mov	r1, fp
 8004608:	00cb      	lsls	r3, r1, #3
 800460a:	4651      	mov	r1, sl
 800460c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004610:	4651      	mov	r1, sl
 8004612:	00ca      	lsls	r2, r1, #3
 8004614:	4610      	mov	r0, r2
 8004616:	4619      	mov	r1, r3
 8004618:	4603      	mov	r3, r0
 800461a:	4642      	mov	r2, r8
 800461c:	189b      	adds	r3, r3, r2
 800461e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004620:	464b      	mov	r3, r9
 8004622:	460a      	mov	r2, r1
 8004624:	eb42 0303 	adc.w	r3, r2, r3
 8004628:	66fb      	str	r3, [r7, #108]	; 0x6c
 800462a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	663b      	str	r3, [r7, #96]	; 0x60
 8004634:	667a      	str	r2, [r7, #100]	; 0x64
 8004636:	f04f 0200 	mov.w	r2, #0
 800463a:	f04f 0300 	mov.w	r3, #0
 800463e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004642:	4649      	mov	r1, r9
 8004644:	008b      	lsls	r3, r1, #2
 8004646:	4641      	mov	r1, r8
 8004648:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800464c:	4641      	mov	r1, r8
 800464e:	008a      	lsls	r2, r1, #2
 8004650:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004654:	f7fb fe14 	bl	8000280 <__aeabi_uldivmod>
 8004658:	4602      	mov	r2, r0
 800465a:	460b      	mov	r3, r1
 800465c:	4b0d      	ldr	r3, [pc, #52]	; (8004694 <UART_SetConfig+0x4e4>)
 800465e:	fba3 1302 	umull	r1, r3, r3, r2
 8004662:	095b      	lsrs	r3, r3, #5
 8004664:	2164      	movs	r1, #100	; 0x64
 8004666:	fb01 f303 	mul.w	r3, r1, r3
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	011b      	lsls	r3, r3, #4
 800466e:	3332      	adds	r3, #50	; 0x32
 8004670:	4a08      	ldr	r2, [pc, #32]	; (8004694 <UART_SetConfig+0x4e4>)
 8004672:	fba2 2303 	umull	r2, r3, r2, r3
 8004676:	095b      	lsrs	r3, r3, #5
 8004678:	f003 020f 	and.w	r2, r3, #15
 800467c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4422      	add	r2, r4
 8004684:	609a      	str	r2, [r3, #8]
}
 8004686:	bf00      	nop
 8004688:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800468c:	46bd      	mov	sp, r7
 800468e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004692:	bf00      	nop
 8004694:	51eb851f 	.word	0x51eb851f

08004698 <__errno>:
 8004698:	4b01      	ldr	r3, [pc, #4]	; (80046a0 <__errno+0x8>)
 800469a:	6818      	ldr	r0, [r3, #0]
 800469c:	4770      	bx	lr
 800469e:	bf00      	nop
 80046a0:	2000000c 	.word	0x2000000c

080046a4 <__libc_init_array>:
 80046a4:	b570      	push	{r4, r5, r6, lr}
 80046a6:	4d0d      	ldr	r5, [pc, #52]	; (80046dc <__libc_init_array+0x38>)
 80046a8:	4c0d      	ldr	r4, [pc, #52]	; (80046e0 <__libc_init_array+0x3c>)
 80046aa:	1b64      	subs	r4, r4, r5
 80046ac:	10a4      	asrs	r4, r4, #2
 80046ae:	2600      	movs	r6, #0
 80046b0:	42a6      	cmp	r6, r4
 80046b2:	d109      	bne.n	80046c8 <__libc_init_array+0x24>
 80046b4:	4d0b      	ldr	r5, [pc, #44]	; (80046e4 <__libc_init_array+0x40>)
 80046b6:	4c0c      	ldr	r4, [pc, #48]	; (80046e8 <__libc_init_array+0x44>)
 80046b8:	f001 f824 	bl	8005704 <_init>
 80046bc:	1b64      	subs	r4, r4, r5
 80046be:	10a4      	asrs	r4, r4, #2
 80046c0:	2600      	movs	r6, #0
 80046c2:	42a6      	cmp	r6, r4
 80046c4:	d105      	bne.n	80046d2 <__libc_init_array+0x2e>
 80046c6:	bd70      	pop	{r4, r5, r6, pc}
 80046c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80046cc:	4798      	blx	r3
 80046ce:	3601      	adds	r6, #1
 80046d0:	e7ee      	b.n	80046b0 <__libc_init_array+0xc>
 80046d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80046d6:	4798      	blx	r3
 80046d8:	3601      	adds	r6, #1
 80046da:	e7f2      	b.n	80046c2 <__libc_init_array+0x1e>
 80046dc:	08005818 	.word	0x08005818
 80046e0:	08005818 	.word	0x08005818
 80046e4:	08005818 	.word	0x08005818
 80046e8:	0800581c 	.word	0x0800581c

080046ec <memset>:
 80046ec:	4402      	add	r2, r0
 80046ee:	4603      	mov	r3, r0
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d100      	bne.n	80046f6 <memset+0xa>
 80046f4:	4770      	bx	lr
 80046f6:	f803 1b01 	strb.w	r1, [r3], #1
 80046fa:	e7f9      	b.n	80046f0 <memset+0x4>

080046fc <iprintf>:
 80046fc:	b40f      	push	{r0, r1, r2, r3}
 80046fe:	4b0a      	ldr	r3, [pc, #40]	; (8004728 <iprintf+0x2c>)
 8004700:	b513      	push	{r0, r1, r4, lr}
 8004702:	681c      	ldr	r4, [r3, #0]
 8004704:	b124      	cbz	r4, 8004710 <iprintf+0x14>
 8004706:	69a3      	ldr	r3, [r4, #24]
 8004708:	b913      	cbnz	r3, 8004710 <iprintf+0x14>
 800470a:	4620      	mov	r0, r4
 800470c:	f000 fa5e 	bl	8004bcc <__sinit>
 8004710:	ab05      	add	r3, sp, #20
 8004712:	9a04      	ldr	r2, [sp, #16]
 8004714:	68a1      	ldr	r1, [r4, #8]
 8004716:	9301      	str	r3, [sp, #4]
 8004718:	4620      	mov	r0, r4
 800471a:	f000 fc67 	bl	8004fec <_vfiprintf_r>
 800471e:	b002      	add	sp, #8
 8004720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004724:	b004      	add	sp, #16
 8004726:	4770      	bx	lr
 8004728:	2000000c 	.word	0x2000000c

0800472c <_puts_r>:
 800472c:	b570      	push	{r4, r5, r6, lr}
 800472e:	460e      	mov	r6, r1
 8004730:	4605      	mov	r5, r0
 8004732:	b118      	cbz	r0, 800473c <_puts_r+0x10>
 8004734:	6983      	ldr	r3, [r0, #24]
 8004736:	b90b      	cbnz	r3, 800473c <_puts_r+0x10>
 8004738:	f000 fa48 	bl	8004bcc <__sinit>
 800473c:	69ab      	ldr	r3, [r5, #24]
 800473e:	68ac      	ldr	r4, [r5, #8]
 8004740:	b913      	cbnz	r3, 8004748 <_puts_r+0x1c>
 8004742:	4628      	mov	r0, r5
 8004744:	f000 fa42 	bl	8004bcc <__sinit>
 8004748:	4b2c      	ldr	r3, [pc, #176]	; (80047fc <_puts_r+0xd0>)
 800474a:	429c      	cmp	r4, r3
 800474c:	d120      	bne.n	8004790 <_puts_r+0x64>
 800474e:	686c      	ldr	r4, [r5, #4]
 8004750:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004752:	07db      	lsls	r3, r3, #31
 8004754:	d405      	bmi.n	8004762 <_puts_r+0x36>
 8004756:	89a3      	ldrh	r3, [r4, #12]
 8004758:	0598      	lsls	r0, r3, #22
 800475a:	d402      	bmi.n	8004762 <_puts_r+0x36>
 800475c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800475e:	f000 fad3 	bl	8004d08 <__retarget_lock_acquire_recursive>
 8004762:	89a3      	ldrh	r3, [r4, #12]
 8004764:	0719      	lsls	r1, r3, #28
 8004766:	d51d      	bpl.n	80047a4 <_puts_r+0x78>
 8004768:	6923      	ldr	r3, [r4, #16]
 800476a:	b1db      	cbz	r3, 80047a4 <_puts_r+0x78>
 800476c:	3e01      	subs	r6, #1
 800476e:	68a3      	ldr	r3, [r4, #8]
 8004770:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004774:	3b01      	subs	r3, #1
 8004776:	60a3      	str	r3, [r4, #8]
 8004778:	bb39      	cbnz	r1, 80047ca <_puts_r+0x9e>
 800477a:	2b00      	cmp	r3, #0
 800477c:	da38      	bge.n	80047f0 <_puts_r+0xc4>
 800477e:	4622      	mov	r2, r4
 8004780:	210a      	movs	r1, #10
 8004782:	4628      	mov	r0, r5
 8004784:	f000 f848 	bl	8004818 <__swbuf_r>
 8004788:	3001      	adds	r0, #1
 800478a:	d011      	beq.n	80047b0 <_puts_r+0x84>
 800478c:	250a      	movs	r5, #10
 800478e:	e011      	b.n	80047b4 <_puts_r+0x88>
 8004790:	4b1b      	ldr	r3, [pc, #108]	; (8004800 <_puts_r+0xd4>)
 8004792:	429c      	cmp	r4, r3
 8004794:	d101      	bne.n	800479a <_puts_r+0x6e>
 8004796:	68ac      	ldr	r4, [r5, #8]
 8004798:	e7da      	b.n	8004750 <_puts_r+0x24>
 800479a:	4b1a      	ldr	r3, [pc, #104]	; (8004804 <_puts_r+0xd8>)
 800479c:	429c      	cmp	r4, r3
 800479e:	bf08      	it	eq
 80047a0:	68ec      	ldreq	r4, [r5, #12]
 80047a2:	e7d5      	b.n	8004750 <_puts_r+0x24>
 80047a4:	4621      	mov	r1, r4
 80047a6:	4628      	mov	r0, r5
 80047a8:	f000 f888 	bl	80048bc <__swsetup_r>
 80047ac:	2800      	cmp	r0, #0
 80047ae:	d0dd      	beq.n	800476c <_puts_r+0x40>
 80047b0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80047b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80047b6:	07da      	lsls	r2, r3, #31
 80047b8:	d405      	bmi.n	80047c6 <_puts_r+0x9a>
 80047ba:	89a3      	ldrh	r3, [r4, #12]
 80047bc:	059b      	lsls	r3, r3, #22
 80047be:	d402      	bmi.n	80047c6 <_puts_r+0x9a>
 80047c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80047c2:	f000 faa2 	bl	8004d0a <__retarget_lock_release_recursive>
 80047c6:	4628      	mov	r0, r5
 80047c8:	bd70      	pop	{r4, r5, r6, pc}
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	da04      	bge.n	80047d8 <_puts_r+0xac>
 80047ce:	69a2      	ldr	r2, [r4, #24]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	dc06      	bgt.n	80047e2 <_puts_r+0xb6>
 80047d4:	290a      	cmp	r1, #10
 80047d6:	d004      	beq.n	80047e2 <_puts_r+0xb6>
 80047d8:	6823      	ldr	r3, [r4, #0]
 80047da:	1c5a      	adds	r2, r3, #1
 80047dc:	6022      	str	r2, [r4, #0]
 80047de:	7019      	strb	r1, [r3, #0]
 80047e0:	e7c5      	b.n	800476e <_puts_r+0x42>
 80047e2:	4622      	mov	r2, r4
 80047e4:	4628      	mov	r0, r5
 80047e6:	f000 f817 	bl	8004818 <__swbuf_r>
 80047ea:	3001      	adds	r0, #1
 80047ec:	d1bf      	bne.n	800476e <_puts_r+0x42>
 80047ee:	e7df      	b.n	80047b0 <_puts_r+0x84>
 80047f0:	6823      	ldr	r3, [r4, #0]
 80047f2:	250a      	movs	r5, #10
 80047f4:	1c5a      	adds	r2, r3, #1
 80047f6:	6022      	str	r2, [r4, #0]
 80047f8:	701d      	strb	r5, [r3, #0]
 80047fa:	e7db      	b.n	80047b4 <_puts_r+0x88>
 80047fc:	0800579c 	.word	0x0800579c
 8004800:	080057bc 	.word	0x080057bc
 8004804:	0800577c 	.word	0x0800577c

08004808 <puts>:
 8004808:	4b02      	ldr	r3, [pc, #8]	; (8004814 <puts+0xc>)
 800480a:	4601      	mov	r1, r0
 800480c:	6818      	ldr	r0, [r3, #0]
 800480e:	f7ff bf8d 	b.w	800472c <_puts_r>
 8004812:	bf00      	nop
 8004814:	2000000c 	.word	0x2000000c

08004818 <__swbuf_r>:
 8004818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800481a:	460e      	mov	r6, r1
 800481c:	4614      	mov	r4, r2
 800481e:	4605      	mov	r5, r0
 8004820:	b118      	cbz	r0, 800482a <__swbuf_r+0x12>
 8004822:	6983      	ldr	r3, [r0, #24]
 8004824:	b90b      	cbnz	r3, 800482a <__swbuf_r+0x12>
 8004826:	f000 f9d1 	bl	8004bcc <__sinit>
 800482a:	4b21      	ldr	r3, [pc, #132]	; (80048b0 <__swbuf_r+0x98>)
 800482c:	429c      	cmp	r4, r3
 800482e:	d12b      	bne.n	8004888 <__swbuf_r+0x70>
 8004830:	686c      	ldr	r4, [r5, #4]
 8004832:	69a3      	ldr	r3, [r4, #24]
 8004834:	60a3      	str	r3, [r4, #8]
 8004836:	89a3      	ldrh	r3, [r4, #12]
 8004838:	071a      	lsls	r2, r3, #28
 800483a:	d52f      	bpl.n	800489c <__swbuf_r+0x84>
 800483c:	6923      	ldr	r3, [r4, #16]
 800483e:	b36b      	cbz	r3, 800489c <__swbuf_r+0x84>
 8004840:	6923      	ldr	r3, [r4, #16]
 8004842:	6820      	ldr	r0, [r4, #0]
 8004844:	1ac0      	subs	r0, r0, r3
 8004846:	6963      	ldr	r3, [r4, #20]
 8004848:	b2f6      	uxtb	r6, r6
 800484a:	4283      	cmp	r3, r0
 800484c:	4637      	mov	r7, r6
 800484e:	dc04      	bgt.n	800485a <__swbuf_r+0x42>
 8004850:	4621      	mov	r1, r4
 8004852:	4628      	mov	r0, r5
 8004854:	f000 f926 	bl	8004aa4 <_fflush_r>
 8004858:	bb30      	cbnz	r0, 80048a8 <__swbuf_r+0x90>
 800485a:	68a3      	ldr	r3, [r4, #8]
 800485c:	3b01      	subs	r3, #1
 800485e:	60a3      	str	r3, [r4, #8]
 8004860:	6823      	ldr	r3, [r4, #0]
 8004862:	1c5a      	adds	r2, r3, #1
 8004864:	6022      	str	r2, [r4, #0]
 8004866:	701e      	strb	r6, [r3, #0]
 8004868:	6963      	ldr	r3, [r4, #20]
 800486a:	3001      	adds	r0, #1
 800486c:	4283      	cmp	r3, r0
 800486e:	d004      	beq.n	800487a <__swbuf_r+0x62>
 8004870:	89a3      	ldrh	r3, [r4, #12]
 8004872:	07db      	lsls	r3, r3, #31
 8004874:	d506      	bpl.n	8004884 <__swbuf_r+0x6c>
 8004876:	2e0a      	cmp	r6, #10
 8004878:	d104      	bne.n	8004884 <__swbuf_r+0x6c>
 800487a:	4621      	mov	r1, r4
 800487c:	4628      	mov	r0, r5
 800487e:	f000 f911 	bl	8004aa4 <_fflush_r>
 8004882:	b988      	cbnz	r0, 80048a8 <__swbuf_r+0x90>
 8004884:	4638      	mov	r0, r7
 8004886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004888:	4b0a      	ldr	r3, [pc, #40]	; (80048b4 <__swbuf_r+0x9c>)
 800488a:	429c      	cmp	r4, r3
 800488c:	d101      	bne.n	8004892 <__swbuf_r+0x7a>
 800488e:	68ac      	ldr	r4, [r5, #8]
 8004890:	e7cf      	b.n	8004832 <__swbuf_r+0x1a>
 8004892:	4b09      	ldr	r3, [pc, #36]	; (80048b8 <__swbuf_r+0xa0>)
 8004894:	429c      	cmp	r4, r3
 8004896:	bf08      	it	eq
 8004898:	68ec      	ldreq	r4, [r5, #12]
 800489a:	e7ca      	b.n	8004832 <__swbuf_r+0x1a>
 800489c:	4621      	mov	r1, r4
 800489e:	4628      	mov	r0, r5
 80048a0:	f000 f80c 	bl	80048bc <__swsetup_r>
 80048a4:	2800      	cmp	r0, #0
 80048a6:	d0cb      	beq.n	8004840 <__swbuf_r+0x28>
 80048a8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80048ac:	e7ea      	b.n	8004884 <__swbuf_r+0x6c>
 80048ae:	bf00      	nop
 80048b0:	0800579c 	.word	0x0800579c
 80048b4:	080057bc 	.word	0x080057bc
 80048b8:	0800577c 	.word	0x0800577c

080048bc <__swsetup_r>:
 80048bc:	4b32      	ldr	r3, [pc, #200]	; (8004988 <__swsetup_r+0xcc>)
 80048be:	b570      	push	{r4, r5, r6, lr}
 80048c0:	681d      	ldr	r5, [r3, #0]
 80048c2:	4606      	mov	r6, r0
 80048c4:	460c      	mov	r4, r1
 80048c6:	b125      	cbz	r5, 80048d2 <__swsetup_r+0x16>
 80048c8:	69ab      	ldr	r3, [r5, #24]
 80048ca:	b913      	cbnz	r3, 80048d2 <__swsetup_r+0x16>
 80048cc:	4628      	mov	r0, r5
 80048ce:	f000 f97d 	bl	8004bcc <__sinit>
 80048d2:	4b2e      	ldr	r3, [pc, #184]	; (800498c <__swsetup_r+0xd0>)
 80048d4:	429c      	cmp	r4, r3
 80048d6:	d10f      	bne.n	80048f8 <__swsetup_r+0x3c>
 80048d8:	686c      	ldr	r4, [r5, #4]
 80048da:	89a3      	ldrh	r3, [r4, #12]
 80048dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80048e0:	0719      	lsls	r1, r3, #28
 80048e2:	d42c      	bmi.n	800493e <__swsetup_r+0x82>
 80048e4:	06dd      	lsls	r5, r3, #27
 80048e6:	d411      	bmi.n	800490c <__swsetup_r+0x50>
 80048e8:	2309      	movs	r3, #9
 80048ea:	6033      	str	r3, [r6, #0]
 80048ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80048f0:	81a3      	strh	r3, [r4, #12]
 80048f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048f6:	e03e      	b.n	8004976 <__swsetup_r+0xba>
 80048f8:	4b25      	ldr	r3, [pc, #148]	; (8004990 <__swsetup_r+0xd4>)
 80048fa:	429c      	cmp	r4, r3
 80048fc:	d101      	bne.n	8004902 <__swsetup_r+0x46>
 80048fe:	68ac      	ldr	r4, [r5, #8]
 8004900:	e7eb      	b.n	80048da <__swsetup_r+0x1e>
 8004902:	4b24      	ldr	r3, [pc, #144]	; (8004994 <__swsetup_r+0xd8>)
 8004904:	429c      	cmp	r4, r3
 8004906:	bf08      	it	eq
 8004908:	68ec      	ldreq	r4, [r5, #12]
 800490a:	e7e6      	b.n	80048da <__swsetup_r+0x1e>
 800490c:	0758      	lsls	r0, r3, #29
 800490e:	d512      	bpl.n	8004936 <__swsetup_r+0x7a>
 8004910:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004912:	b141      	cbz	r1, 8004926 <__swsetup_r+0x6a>
 8004914:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004918:	4299      	cmp	r1, r3
 800491a:	d002      	beq.n	8004922 <__swsetup_r+0x66>
 800491c:	4630      	mov	r0, r6
 800491e:	f000 fa5b 	bl	8004dd8 <_free_r>
 8004922:	2300      	movs	r3, #0
 8004924:	6363      	str	r3, [r4, #52]	; 0x34
 8004926:	89a3      	ldrh	r3, [r4, #12]
 8004928:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800492c:	81a3      	strh	r3, [r4, #12]
 800492e:	2300      	movs	r3, #0
 8004930:	6063      	str	r3, [r4, #4]
 8004932:	6923      	ldr	r3, [r4, #16]
 8004934:	6023      	str	r3, [r4, #0]
 8004936:	89a3      	ldrh	r3, [r4, #12]
 8004938:	f043 0308 	orr.w	r3, r3, #8
 800493c:	81a3      	strh	r3, [r4, #12]
 800493e:	6923      	ldr	r3, [r4, #16]
 8004940:	b94b      	cbnz	r3, 8004956 <__swsetup_r+0x9a>
 8004942:	89a3      	ldrh	r3, [r4, #12]
 8004944:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004948:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800494c:	d003      	beq.n	8004956 <__swsetup_r+0x9a>
 800494e:	4621      	mov	r1, r4
 8004950:	4630      	mov	r0, r6
 8004952:	f000 fa01 	bl	8004d58 <__smakebuf_r>
 8004956:	89a0      	ldrh	r0, [r4, #12]
 8004958:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800495c:	f010 0301 	ands.w	r3, r0, #1
 8004960:	d00a      	beq.n	8004978 <__swsetup_r+0xbc>
 8004962:	2300      	movs	r3, #0
 8004964:	60a3      	str	r3, [r4, #8]
 8004966:	6963      	ldr	r3, [r4, #20]
 8004968:	425b      	negs	r3, r3
 800496a:	61a3      	str	r3, [r4, #24]
 800496c:	6923      	ldr	r3, [r4, #16]
 800496e:	b943      	cbnz	r3, 8004982 <__swsetup_r+0xc6>
 8004970:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004974:	d1ba      	bne.n	80048ec <__swsetup_r+0x30>
 8004976:	bd70      	pop	{r4, r5, r6, pc}
 8004978:	0781      	lsls	r1, r0, #30
 800497a:	bf58      	it	pl
 800497c:	6963      	ldrpl	r3, [r4, #20]
 800497e:	60a3      	str	r3, [r4, #8]
 8004980:	e7f4      	b.n	800496c <__swsetup_r+0xb0>
 8004982:	2000      	movs	r0, #0
 8004984:	e7f7      	b.n	8004976 <__swsetup_r+0xba>
 8004986:	bf00      	nop
 8004988:	2000000c 	.word	0x2000000c
 800498c:	0800579c 	.word	0x0800579c
 8004990:	080057bc 	.word	0x080057bc
 8004994:	0800577c 	.word	0x0800577c

08004998 <__sflush_r>:
 8004998:	898a      	ldrh	r2, [r1, #12]
 800499a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800499e:	4605      	mov	r5, r0
 80049a0:	0710      	lsls	r0, r2, #28
 80049a2:	460c      	mov	r4, r1
 80049a4:	d458      	bmi.n	8004a58 <__sflush_r+0xc0>
 80049a6:	684b      	ldr	r3, [r1, #4]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	dc05      	bgt.n	80049b8 <__sflush_r+0x20>
 80049ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	dc02      	bgt.n	80049b8 <__sflush_r+0x20>
 80049b2:	2000      	movs	r0, #0
 80049b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80049ba:	2e00      	cmp	r6, #0
 80049bc:	d0f9      	beq.n	80049b2 <__sflush_r+0x1a>
 80049be:	2300      	movs	r3, #0
 80049c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80049c4:	682f      	ldr	r7, [r5, #0]
 80049c6:	602b      	str	r3, [r5, #0]
 80049c8:	d032      	beq.n	8004a30 <__sflush_r+0x98>
 80049ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80049cc:	89a3      	ldrh	r3, [r4, #12]
 80049ce:	075a      	lsls	r2, r3, #29
 80049d0:	d505      	bpl.n	80049de <__sflush_r+0x46>
 80049d2:	6863      	ldr	r3, [r4, #4]
 80049d4:	1ac0      	subs	r0, r0, r3
 80049d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80049d8:	b10b      	cbz	r3, 80049de <__sflush_r+0x46>
 80049da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80049dc:	1ac0      	subs	r0, r0, r3
 80049de:	2300      	movs	r3, #0
 80049e0:	4602      	mov	r2, r0
 80049e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80049e4:	6a21      	ldr	r1, [r4, #32]
 80049e6:	4628      	mov	r0, r5
 80049e8:	47b0      	blx	r6
 80049ea:	1c43      	adds	r3, r0, #1
 80049ec:	89a3      	ldrh	r3, [r4, #12]
 80049ee:	d106      	bne.n	80049fe <__sflush_r+0x66>
 80049f0:	6829      	ldr	r1, [r5, #0]
 80049f2:	291d      	cmp	r1, #29
 80049f4:	d82c      	bhi.n	8004a50 <__sflush_r+0xb8>
 80049f6:	4a2a      	ldr	r2, [pc, #168]	; (8004aa0 <__sflush_r+0x108>)
 80049f8:	40ca      	lsrs	r2, r1
 80049fa:	07d6      	lsls	r6, r2, #31
 80049fc:	d528      	bpl.n	8004a50 <__sflush_r+0xb8>
 80049fe:	2200      	movs	r2, #0
 8004a00:	6062      	str	r2, [r4, #4]
 8004a02:	04d9      	lsls	r1, r3, #19
 8004a04:	6922      	ldr	r2, [r4, #16]
 8004a06:	6022      	str	r2, [r4, #0]
 8004a08:	d504      	bpl.n	8004a14 <__sflush_r+0x7c>
 8004a0a:	1c42      	adds	r2, r0, #1
 8004a0c:	d101      	bne.n	8004a12 <__sflush_r+0x7a>
 8004a0e:	682b      	ldr	r3, [r5, #0]
 8004a10:	b903      	cbnz	r3, 8004a14 <__sflush_r+0x7c>
 8004a12:	6560      	str	r0, [r4, #84]	; 0x54
 8004a14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a16:	602f      	str	r7, [r5, #0]
 8004a18:	2900      	cmp	r1, #0
 8004a1a:	d0ca      	beq.n	80049b2 <__sflush_r+0x1a>
 8004a1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a20:	4299      	cmp	r1, r3
 8004a22:	d002      	beq.n	8004a2a <__sflush_r+0x92>
 8004a24:	4628      	mov	r0, r5
 8004a26:	f000 f9d7 	bl	8004dd8 <_free_r>
 8004a2a:	2000      	movs	r0, #0
 8004a2c:	6360      	str	r0, [r4, #52]	; 0x34
 8004a2e:	e7c1      	b.n	80049b4 <__sflush_r+0x1c>
 8004a30:	6a21      	ldr	r1, [r4, #32]
 8004a32:	2301      	movs	r3, #1
 8004a34:	4628      	mov	r0, r5
 8004a36:	47b0      	blx	r6
 8004a38:	1c41      	adds	r1, r0, #1
 8004a3a:	d1c7      	bne.n	80049cc <__sflush_r+0x34>
 8004a3c:	682b      	ldr	r3, [r5, #0]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d0c4      	beq.n	80049cc <__sflush_r+0x34>
 8004a42:	2b1d      	cmp	r3, #29
 8004a44:	d001      	beq.n	8004a4a <__sflush_r+0xb2>
 8004a46:	2b16      	cmp	r3, #22
 8004a48:	d101      	bne.n	8004a4e <__sflush_r+0xb6>
 8004a4a:	602f      	str	r7, [r5, #0]
 8004a4c:	e7b1      	b.n	80049b2 <__sflush_r+0x1a>
 8004a4e:	89a3      	ldrh	r3, [r4, #12]
 8004a50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a54:	81a3      	strh	r3, [r4, #12]
 8004a56:	e7ad      	b.n	80049b4 <__sflush_r+0x1c>
 8004a58:	690f      	ldr	r7, [r1, #16]
 8004a5a:	2f00      	cmp	r7, #0
 8004a5c:	d0a9      	beq.n	80049b2 <__sflush_r+0x1a>
 8004a5e:	0793      	lsls	r3, r2, #30
 8004a60:	680e      	ldr	r6, [r1, #0]
 8004a62:	bf08      	it	eq
 8004a64:	694b      	ldreq	r3, [r1, #20]
 8004a66:	600f      	str	r7, [r1, #0]
 8004a68:	bf18      	it	ne
 8004a6a:	2300      	movne	r3, #0
 8004a6c:	eba6 0807 	sub.w	r8, r6, r7
 8004a70:	608b      	str	r3, [r1, #8]
 8004a72:	f1b8 0f00 	cmp.w	r8, #0
 8004a76:	dd9c      	ble.n	80049b2 <__sflush_r+0x1a>
 8004a78:	6a21      	ldr	r1, [r4, #32]
 8004a7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004a7c:	4643      	mov	r3, r8
 8004a7e:	463a      	mov	r2, r7
 8004a80:	4628      	mov	r0, r5
 8004a82:	47b0      	blx	r6
 8004a84:	2800      	cmp	r0, #0
 8004a86:	dc06      	bgt.n	8004a96 <__sflush_r+0xfe>
 8004a88:	89a3      	ldrh	r3, [r4, #12]
 8004a8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a8e:	81a3      	strh	r3, [r4, #12]
 8004a90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a94:	e78e      	b.n	80049b4 <__sflush_r+0x1c>
 8004a96:	4407      	add	r7, r0
 8004a98:	eba8 0800 	sub.w	r8, r8, r0
 8004a9c:	e7e9      	b.n	8004a72 <__sflush_r+0xda>
 8004a9e:	bf00      	nop
 8004aa0:	20400001 	.word	0x20400001

08004aa4 <_fflush_r>:
 8004aa4:	b538      	push	{r3, r4, r5, lr}
 8004aa6:	690b      	ldr	r3, [r1, #16]
 8004aa8:	4605      	mov	r5, r0
 8004aaa:	460c      	mov	r4, r1
 8004aac:	b913      	cbnz	r3, 8004ab4 <_fflush_r+0x10>
 8004aae:	2500      	movs	r5, #0
 8004ab0:	4628      	mov	r0, r5
 8004ab2:	bd38      	pop	{r3, r4, r5, pc}
 8004ab4:	b118      	cbz	r0, 8004abe <_fflush_r+0x1a>
 8004ab6:	6983      	ldr	r3, [r0, #24]
 8004ab8:	b90b      	cbnz	r3, 8004abe <_fflush_r+0x1a>
 8004aba:	f000 f887 	bl	8004bcc <__sinit>
 8004abe:	4b14      	ldr	r3, [pc, #80]	; (8004b10 <_fflush_r+0x6c>)
 8004ac0:	429c      	cmp	r4, r3
 8004ac2:	d11b      	bne.n	8004afc <_fflush_r+0x58>
 8004ac4:	686c      	ldr	r4, [r5, #4]
 8004ac6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d0ef      	beq.n	8004aae <_fflush_r+0xa>
 8004ace:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004ad0:	07d0      	lsls	r0, r2, #31
 8004ad2:	d404      	bmi.n	8004ade <_fflush_r+0x3a>
 8004ad4:	0599      	lsls	r1, r3, #22
 8004ad6:	d402      	bmi.n	8004ade <_fflush_r+0x3a>
 8004ad8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ada:	f000 f915 	bl	8004d08 <__retarget_lock_acquire_recursive>
 8004ade:	4628      	mov	r0, r5
 8004ae0:	4621      	mov	r1, r4
 8004ae2:	f7ff ff59 	bl	8004998 <__sflush_r>
 8004ae6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ae8:	07da      	lsls	r2, r3, #31
 8004aea:	4605      	mov	r5, r0
 8004aec:	d4e0      	bmi.n	8004ab0 <_fflush_r+0xc>
 8004aee:	89a3      	ldrh	r3, [r4, #12]
 8004af0:	059b      	lsls	r3, r3, #22
 8004af2:	d4dd      	bmi.n	8004ab0 <_fflush_r+0xc>
 8004af4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004af6:	f000 f908 	bl	8004d0a <__retarget_lock_release_recursive>
 8004afa:	e7d9      	b.n	8004ab0 <_fflush_r+0xc>
 8004afc:	4b05      	ldr	r3, [pc, #20]	; (8004b14 <_fflush_r+0x70>)
 8004afe:	429c      	cmp	r4, r3
 8004b00:	d101      	bne.n	8004b06 <_fflush_r+0x62>
 8004b02:	68ac      	ldr	r4, [r5, #8]
 8004b04:	e7df      	b.n	8004ac6 <_fflush_r+0x22>
 8004b06:	4b04      	ldr	r3, [pc, #16]	; (8004b18 <_fflush_r+0x74>)
 8004b08:	429c      	cmp	r4, r3
 8004b0a:	bf08      	it	eq
 8004b0c:	68ec      	ldreq	r4, [r5, #12]
 8004b0e:	e7da      	b.n	8004ac6 <_fflush_r+0x22>
 8004b10:	0800579c 	.word	0x0800579c
 8004b14:	080057bc 	.word	0x080057bc
 8004b18:	0800577c 	.word	0x0800577c

08004b1c <std>:
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	b510      	push	{r4, lr}
 8004b20:	4604      	mov	r4, r0
 8004b22:	e9c0 3300 	strd	r3, r3, [r0]
 8004b26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004b2a:	6083      	str	r3, [r0, #8]
 8004b2c:	8181      	strh	r1, [r0, #12]
 8004b2e:	6643      	str	r3, [r0, #100]	; 0x64
 8004b30:	81c2      	strh	r2, [r0, #14]
 8004b32:	6183      	str	r3, [r0, #24]
 8004b34:	4619      	mov	r1, r3
 8004b36:	2208      	movs	r2, #8
 8004b38:	305c      	adds	r0, #92	; 0x5c
 8004b3a:	f7ff fdd7 	bl	80046ec <memset>
 8004b3e:	4b05      	ldr	r3, [pc, #20]	; (8004b54 <std+0x38>)
 8004b40:	6263      	str	r3, [r4, #36]	; 0x24
 8004b42:	4b05      	ldr	r3, [pc, #20]	; (8004b58 <std+0x3c>)
 8004b44:	62a3      	str	r3, [r4, #40]	; 0x28
 8004b46:	4b05      	ldr	r3, [pc, #20]	; (8004b5c <std+0x40>)
 8004b48:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004b4a:	4b05      	ldr	r3, [pc, #20]	; (8004b60 <std+0x44>)
 8004b4c:	6224      	str	r4, [r4, #32]
 8004b4e:	6323      	str	r3, [r4, #48]	; 0x30
 8004b50:	bd10      	pop	{r4, pc}
 8004b52:	bf00      	nop
 8004b54:	08005595 	.word	0x08005595
 8004b58:	080055b7 	.word	0x080055b7
 8004b5c:	080055ef 	.word	0x080055ef
 8004b60:	08005613 	.word	0x08005613

08004b64 <_cleanup_r>:
 8004b64:	4901      	ldr	r1, [pc, #4]	; (8004b6c <_cleanup_r+0x8>)
 8004b66:	f000 b8af 	b.w	8004cc8 <_fwalk_reent>
 8004b6a:	bf00      	nop
 8004b6c:	08004aa5 	.word	0x08004aa5

08004b70 <__sfmoreglue>:
 8004b70:	b570      	push	{r4, r5, r6, lr}
 8004b72:	2268      	movs	r2, #104	; 0x68
 8004b74:	1e4d      	subs	r5, r1, #1
 8004b76:	4355      	muls	r5, r2
 8004b78:	460e      	mov	r6, r1
 8004b7a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004b7e:	f000 f997 	bl	8004eb0 <_malloc_r>
 8004b82:	4604      	mov	r4, r0
 8004b84:	b140      	cbz	r0, 8004b98 <__sfmoreglue+0x28>
 8004b86:	2100      	movs	r1, #0
 8004b88:	e9c0 1600 	strd	r1, r6, [r0]
 8004b8c:	300c      	adds	r0, #12
 8004b8e:	60a0      	str	r0, [r4, #8]
 8004b90:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004b94:	f7ff fdaa 	bl	80046ec <memset>
 8004b98:	4620      	mov	r0, r4
 8004b9a:	bd70      	pop	{r4, r5, r6, pc}

08004b9c <__sfp_lock_acquire>:
 8004b9c:	4801      	ldr	r0, [pc, #4]	; (8004ba4 <__sfp_lock_acquire+0x8>)
 8004b9e:	f000 b8b3 	b.w	8004d08 <__retarget_lock_acquire_recursive>
 8004ba2:	bf00      	nop
 8004ba4:	2000022d 	.word	0x2000022d

08004ba8 <__sfp_lock_release>:
 8004ba8:	4801      	ldr	r0, [pc, #4]	; (8004bb0 <__sfp_lock_release+0x8>)
 8004baa:	f000 b8ae 	b.w	8004d0a <__retarget_lock_release_recursive>
 8004bae:	bf00      	nop
 8004bb0:	2000022d 	.word	0x2000022d

08004bb4 <__sinit_lock_acquire>:
 8004bb4:	4801      	ldr	r0, [pc, #4]	; (8004bbc <__sinit_lock_acquire+0x8>)
 8004bb6:	f000 b8a7 	b.w	8004d08 <__retarget_lock_acquire_recursive>
 8004bba:	bf00      	nop
 8004bbc:	2000022e 	.word	0x2000022e

08004bc0 <__sinit_lock_release>:
 8004bc0:	4801      	ldr	r0, [pc, #4]	; (8004bc8 <__sinit_lock_release+0x8>)
 8004bc2:	f000 b8a2 	b.w	8004d0a <__retarget_lock_release_recursive>
 8004bc6:	bf00      	nop
 8004bc8:	2000022e 	.word	0x2000022e

08004bcc <__sinit>:
 8004bcc:	b510      	push	{r4, lr}
 8004bce:	4604      	mov	r4, r0
 8004bd0:	f7ff fff0 	bl	8004bb4 <__sinit_lock_acquire>
 8004bd4:	69a3      	ldr	r3, [r4, #24]
 8004bd6:	b11b      	cbz	r3, 8004be0 <__sinit+0x14>
 8004bd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bdc:	f7ff bff0 	b.w	8004bc0 <__sinit_lock_release>
 8004be0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004be4:	6523      	str	r3, [r4, #80]	; 0x50
 8004be6:	4b13      	ldr	r3, [pc, #76]	; (8004c34 <__sinit+0x68>)
 8004be8:	4a13      	ldr	r2, [pc, #76]	; (8004c38 <__sinit+0x6c>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	62a2      	str	r2, [r4, #40]	; 0x28
 8004bee:	42a3      	cmp	r3, r4
 8004bf0:	bf04      	itt	eq
 8004bf2:	2301      	moveq	r3, #1
 8004bf4:	61a3      	streq	r3, [r4, #24]
 8004bf6:	4620      	mov	r0, r4
 8004bf8:	f000 f820 	bl	8004c3c <__sfp>
 8004bfc:	6060      	str	r0, [r4, #4]
 8004bfe:	4620      	mov	r0, r4
 8004c00:	f000 f81c 	bl	8004c3c <__sfp>
 8004c04:	60a0      	str	r0, [r4, #8]
 8004c06:	4620      	mov	r0, r4
 8004c08:	f000 f818 	bl	8004c3c <__sfp>
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	60e0      	str	r0, [r4, #12]
 8004c10:	2104      	movs	r1, #4
 8004c12:	6860      	ldr	r0, [r4, #4]
 8004c14:	f7ff ff82 	bl	8004b1c <std>
 8004c18:	68a0      	ldr	r0, [r4, #8]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	2109      	movs	r1, #9
 8004c1e:	f7ff ff7d 	bl	8004b1c <std>
 8004c22:	68e0      	ldr	r0, [r4, #12]
 8004c24:	2202      	movs	r2, #2
 8004c26:	2112      	movs	r1, #18
 8004c28:	f7ff ff78 	bl	8004b1c <std>
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	61a3      	str	r3, [r4, #24]
 8004c30:	e7d2      	b.n	8004bd8 <__sinit+0xc>
 8004c32:	bf00      	nop
 8004c34:	08005778 	.word	0x08005778
 8004c38:	08004b65 	.word	0x08004b65

08004c3c <__sfp>:
 8004c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c3e:	4607      	mov	r7, r0
 8004c40:	f7ff ffac 	bl	8004b9c <__sfp_lock_acquire>
 8004c44:	4b1e      	ldr	r3, [pc, #120]	; (8004cc0 <__sfp+0x84>)
 8004c46:	681e      	ldr	r6, [r3, #0]
 8004c48:	69b3      	ldr	r3, [r6, #24]
 8004c4a:	b913      	cbnz	r3, 8004c52 <__sfp+0x16>
 8004c4c:	4630      	mov	r0, r6
 8004c4e:	f7ff ffbd 	bl	8004bcc <__sinit>
 8004c52:	3648      	adds	r6, #72	; 0x48
 8004c54:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004c58:	3b01      	subs	r3, #1
 8004c5a:	d503      	bpl.n	8004c64 <__sfp+0x28>
 8004c5c:	6833      	ldr	r3, [r6, #0]
 8004c5e:	b30b      	cbz	r3, 8004ca4 <__sfp+0x68>
 8004c60:	6836      	ldr	r6, [r6, #0]
 8004c62:	e7f7      	b.n	8004c54 <__sfp+0x18>
 8004c64:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004c68:	b9d5      	cbnz	r5, 8004ca0 <__sfp+0x64>
 8004c6a:	4b16      	ldr	r3, [pc, #88]	; (8004cc4 <__sfp+0x88>)
 8004c6c:	60e3      	str	r3, [r4, #12]
 8004c6e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004c72:	6665      	str	r5, [r4, #100]	; 0x64
 8004c74:	f000 f847 	bl	8004d06 <__retarget_lock_init_recursive>
 8004c78:	f7ff ff96 	bl	8004ba8 <__sfp_lock_release>
 8004c7c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004c80:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004c84:	6025      	str	r5, [r4, #0]
 8004c86:	61a5      	str	r5, [r4, #24]
 8004c88:	2208      	movs	r2, #8
 8004c8a:	4629      	mov	r1, r5
 8004c8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004c90:	f7ff fd2c 	bl	80046ec <memset>
 8004c94:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004c98:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004c9c:	4620      	mov	r0, r4
 8004c9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ca0:	3468      	adds	r4, #104	; 0x68
 8004ca2:	e7d9      	b.n	8004c58 <__sfp+0x1c>
 8004ca4:	2104      	movs	r1, #4
 8004ca6:	4638      	mov	r0, r7
 8004ca8:	f7ff ff62 	bl	8004b70 <__sfmoreglue>
 8004cac:	4604      	mov	r4, r0
 8004cae:	6030      	str	r0, [r6, #0]
 8004cb0:	2800      	cmp	r0, #0
 8004cb2:	d1d5      	bne.n	8004c60 <__sfp+0x24>
 8004cb4:	f7ff ff78 	bl	8004ba8 <__sfp_lock_release>
 8004cb8:	230c      	movs	r3, #12
 8004cba:	603b      	str	r3, [r7, #0]
 8004cbc:	e7ee      	b.n	8004c9c <__sfp+0x60>
 8004cbe:	bf00      	nop
 8004cc0:	08005778 	.word	0x08005778
 8004cc4:	ffff0001 	.word	0xffff0001

08004cc8 <_fwalk_reent>:
 8004cc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ccc:	4606      	mov	r6, r0
 8004cce:	4688      	mov	r8, r1
 8004cd0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004cd4:	2700      	movs	r7, #0
 8004cd6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004cda:	f1b9 0901 	subs.w	r9, r9, #1
 8004cde:	d505      	bpl.n	8004cec <_fwalk_reent+0x24>
 8004ce0:	6824      	ldr	r4, [r4, #0]
 8004ce2:	2c00      	cmp	r4, #0
 8004ce4:	d1f7      	bne.n	8004cd6 <_fwalk_reent+0xe>
 8004ce6:	4638      	mov	r0, r7
 8004ce8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cec:	89ab      	ldrh	r3, [r5, #12]
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d907      	bls.n	8004d02 <_fwalk_reent+0x3a>
 8004cf2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004cf6:	3301      	adds	r3, #1
 8004cf8:	d003      	beq.n	8004d02 <_fwalk_reent+0x3a>
 8004cfa:	4629      	mov	r1, r5
 8004cfc:	4630      	mov	r0, r6
 8004cfe:	47c0      	blx	r8
 8004d00:	4307      	orrs	r7, r0
 8004d02:	3568      	adds	r5, #104	; 0x68
 8004d04:	e7e9      	b.n	8004cda <_fwalk_reent+0x12>

08004d06 <__retarget_lock_init_recursive>:
 8004d06:	4770      	bx	lr

08004d08 <__retarget_lock_acquire_recursive>:
 8004d08:	4770      	bx	lr

08004d0a <__retarget_lock_release_recursive>:
 8004d0a:	4770      	bx	lr

08004d0c <__swhatbuf_r>:
 8004d0c:	b570      	push	{r4, r5, r6, lr}
 8004d0e:	460e      	mov	r6, r1
 8004d10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d14:	2900      	cmp	r1, #0
 8004d16:	b096      	sub	sp, #88	; 0x58
 8004d18:	4614      	mov	r4, r2
 8004d1a:	461d      	mov	r5, r3
 8004d1c:	da08      	bge.n	8004d30 <__swhatbuf_r+0x24>
 8004d1e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004d22:	2200      	movs	r2, #0
 8004d24:	602a      	str	r2, [r5, #0]
 8004d26:	061a      	lsls	r2, r3, #24
 8004d28:	d410      	bmi.n	8004d4c <__swhatbuf_r+0x40>
 8004d2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d2e:	e00e      	b.n	8004d4e <__swhatbuf_r+0x42>
 8004d30:	466a      	mov	r2, sp
 8004d32:	f000 fc95 	bl	8005660 <_fstat_r>
 8004d36:	2800      	cmp	r0, #0
 8004d38:	dbf1      	blt.n	8004d1e <__swhatbuf_r+0x12>
 8004d3a:	9a01      	ldr	r2, [sp, #4]
 8004d3c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004d40:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004d44:	425a      	negs	r2, r3
 8004d46:	415a      	adcs	r2, r3
 8004d48:	602a      	str	r2, [r5, #0]
 8004d4a:	e7ee      	b.n	8004d2a <__swhatbuf_r+0x1e>
 8004d4c:	2340      	movs	r3, #64	; 0x40
 8004d4e:	2000      	movs	r0, #0
 8004d50:	6023      	str	r3, [r4, #0]
 8004d52:	b016      	add	sp, #88	; 0x58
 8004d54:	bd70      	pop	{r4, r5, r6, pc}
	...

08004d58 <__smakebuf_r>:
 8004d58:	898b      	ldrh	r3, [r1, #12]
 8004d5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004d5c:	079d      	lsls	r5, r3, #30
 8004d5e:	4606      	mov	r6, r0
 8004d60:	460c      	mov	r4, r1
 8004d62:	d507      	bpl.n	8004d74 <__smakebuf_r+0x1c>
 8004d64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004d68:	6023      	str	r3, [r4, #0]
 8004d6a:	6123      	str	r3, [r4, #16]
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	6163      	str	r3, [r4, #20]
 8004d70:	b002      	add	sp, #8
 8004d72:	bd70      	pop	{r4, r5, r6, pc}
 8004d74:	ab01      	add	r3, sp, #4
 8004d76:	466a      	mov	r2, sp
 8004d78:	f7ff ffc8 	bl	8004d0c <__swhatbuf_r>
 8004d7c:	9900      	ldr	r1, [sp, #0]
 8004d7e:	4605      	mov	r5, r0
 8004d80:	4630      	mov	r0, r6
 8004d82:	f000 f895 	bl	8004eb0 <_malloc_r>
 8004d86:	b948      	cbnz	r0, 8004d9c <__smakebuf_r+0x44>
 8004d88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d8c:	059a      	lsls	r2, r3, #22
 8004d8e:	d4ef      	bmi.n	8004d70 <__smakebuf_r+0x18>
 8004d90:	f023 0303 	bic.w	r3, r3, #3
 8004d94:	f043 0302 	orr.w	r3, r3, #2
 8004d98:	81a3      	strh	r3, [r4, #12]
 8004d9a:	e7e3      	b.n	8004d64 <__smakebuf_r+0xc>
 8004d9c:	4b0d      	ldr	r3, [pc, #52]	; (8004dd4 <__smakebuf_r+0x7c>)
 8004d9e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004da0:	89a3      	ldrh	r3, [r4, #12]
 8004da2:	6020      	str	r0, [r4, #0]
 8004da4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004da8:	81a3      	strh	r3, [r4, #12]
 8004daa:	9b00      	ldr	r3, [sp, #0]
 8004dac:	6163      	str	r3, [r4, #20]
 8004dae:	9b01      	ldr	r3, [sp, #4]
 8004db0:	6120      	str	r0, [r4, #16]
 8004db2:	b15b      	cbz	r3, 8004dcc <__smakebuf_r+0x74>
 8004db4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004db8:	4630      	mov	r0, r6
 8004dba:	f000 fc63 	bl	8005684 <_isatty_r>
 8004dbe:	b128      	cbz	r0, 8004dcc <__smakebuf_r+0x74>
 8004dc0:	89a3      	ldrh	r3, [r4, #12]
 8004dc2:	f023 0303 	bic.w	r3, r3, #3
 8004dc6:	f043 0301 	orr.w	r3, r3, #1
 8004dca:	81a3      	strh	r3, [r4, #12]
 8004dcc:	89a0      	ldrh	r0, [r4, #12]
 8004dce:	4305      	orrs	r5, r0
 8004dd0:	81a5      	strh	r5, [r4, #12]
 8004dd2:	e7cd      	b.n	8004d70 <__smakebuf_r+0x18>
 8004dd4:	08004b65 	.word	0x08004b65

08004dd8 <_free_r>:
 8004dd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004dda:	2900      	cmp	r1, #0
 8004ddc:	d044      	beq.n	8004e68 <_free_r+0x90>
 8004dde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004de2:	9001      	str	r0, [sp, #4]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	f1a1 0404 	sub.w	r4, r1, #4
 8004dea:	bfb8      	it	lt
 8004dec:	18e4      	addlt	r4, r4, r3
 8004dee:	f000 fc6b 	bl	80056c8 <__malloc_lock>
 8004df2:	4a1e      	ldr	r2, [pc, #120]	; (8004e6c <_free_r+0x94>)
 8004df4:	9801      	ldr	r0, [sp, #4]
 8004df6:	6813      	ldr	r3, [r2, #0]
 8004df8:	b933      	cbnz	r3, 8004e08 <_free_r+0x30>
 8004dfa:	6063      	str	r3, [r4, #4]
 8004dfc:	6014      	str	r4, [r2, #0]
 8004dfe:	b003      	add	sp, #12
 8004e00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e04:	f000 bc66 	b.w	80056d4 <__malloc_unlock>
 8004e08:	42a3      	cmp	r3, r4
 8004e0a:	d908      	bls.n	8004e1e <_free_r+0x46>
 8004e0c:	6825      	ldr	r5, [r4, #0]
 8004e0e:	1961      	adds	r1, r4, r5
 8004e10:	428b      	cmp	r3, r1
 8004e12:	bf01      	itttt	eq
 8004e14:	6819      	ldreq	r1, [r3, #0]
 8004e16:	685b      	ldreq	r3, [r3, #4]
 8004e18:	1949      	addeq	r1, r1, r5
 8004e1a:	6021      	streq	r1, [r4, #0]
 8004e1c:	e7ed      	b.n	8004dfa <_free_r+0x22>
 8004e1e:	461a      	mov	r2, r3
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	b10b      	cbz	r3, 8004e28 <_free_r+0x50>
 8004e24:	42a3      	cmp	r3, r4
 8004e26:	d9fa      	bls.n	8004e1e <_free_r+0x46>
 8004e28:	6811      	ldr	r1, [r2, #0]
 8004e2a:	1855      	adds	r5, r2, r1
 8004e2c:	42a5      	cmp	r5, r4
 8004e2e:	d10b      	bne.n	8004e48 <_free_r+0x70>
 8004e30:	6824      	ldr	r4, [r4, #0]
 8004e32:	4421      	add	r1, r4
 8004e34:	1854      	adds	r4, r2, r1
 8004e36:	42a3      	cmp	r3, r4
 8004e38:	6011      	str	r1, [r2, #0]
 8004e3a:	d1e0      	bne.n	8004dfe <_free_r+0x26>
 8004e3c:	681c      	ldr	r4, [r3, #0]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	6053      	str	r3, [r2, #4]
 8004e42:	4421      	add	r1, r4
 8004e44:	6011      	str	r1, [r2, #0]
 8004e46:	e7da      	b.n	8004dfe <_free_r+0x26>
 8004e48:	d902      	bls.n	8004e50 <_free_r+0x78>
 8004e4a:	230c      	movs	r3, #12
 8004e4c:	6003      	str	r3, [r0, #0]
 8004e4e:	e7d6      	b.n	8004dfe <_free_r+0x26>
 8004e50:	6825      	ldr	r5, [r4, #0]
 8004e52:	1961      	adds	r1, r4, r5
 8004e54:	428b      	cmp	r3, r1
 8004e56:	bf04      	itt	eq
 8004e58:	6819      	ldreq	r1, [r3, #0]
 8004e5a:	685b      	ldreq	r3, [r3, #4]
 8004e5c:	6063      	str	r3, [r4, #4]
 8004e5e:	bf04      	itt	eq
 8004e60:	1949      	addeq	r1, r1, r5
 8004e62:	6021      	streq	r1, [r4, #0]
 8004e64:	6054      	str	r4, [r2, #4]
 8004e66:	e7ca      	b.n	8004dfe <_free_r+0x26>
 8004e68:	b003      	add	sp, #12
 8004e6a:	bd30      	pop	{r4, r5, pc}
 8004e6c:	20000230 	.word	0x20000230

08004e70 <sbrk_aligned>:
 8004e70:	b570      	push	{r4, r5, r6, lr}
 8004e72:	4e0e      	ldr	r6, [pc, #56]	; (8004eac <sbrk_aligned+0x3c>)
 8004e74:	460c      	mov	r4, r1
 8004e76:	6831      	ldr	r1, [r6, #0]
 8004e78:	4605      	mov	r5, r0
 8004e7a:	b911      	cbnz	r1, 8004e82 <sbrk_aligned+0x12>
 8004e7c:	f000 fb7a 	bl	8005574 <_sbrk_r>
 8004e80:	6030      	str	r0, [r6, #0]
 8004e82:	4621      	mov	r1, r4
 8004e84:	4628      	mov	r0, r5
 8004e86:	f000 fb75 	bl	8005574 <_sbrk_r>
 8004e8a:	1c43      	adds	r3, r0, #1
 8004e8c:	d00a      	beq.n	8004ea4 <sbrk_aligned+0x34>
 8004e8e:	1cc4      	adds	r4, r0, #3
 8004e90:	f024 0403 	bic.w	r4, r4, #3
 8004e94:	42a0      	cmp	r0, r4
 8004e96:	d007      	beq.n	8004ea8 <sbrk_aligned+0x38>
 8004e98:	1a21      	subs	r1, r4, r0
 8004e9a:	4628      	mov	r0, r5
 8004e9c:	f000 fb6a 	bl	8005574 <_sbrk_r>
 8004ea0:	3001      	adds	r0, #1
 8004ea2:	d101      	bne.n	8004ea8 <sbrk_aligned+0x38>
 8004ea4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004ea8:	4620      	mov	r0, r4
 8004eaa:	bd70      	pop	{r4, r5, r6, pc}
 8004eac:	20000234 	.word	0x20000234

08004eb0 <_malloc_r>:
 8004eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004eb4:	1ccd      	adds	r5, r1, #3
 8004eb6:	f025 0503 	bic.w	r5, r5, #3
 8004eba:	3508      	adds	r5, #8
 8004ebc:	2d0c      	cmp	r5, #12
 8004ebe:	bf38      	it	cc
 8004ec0:	250c      	movcc	r5, #12
 8004ec2:	2d00      	cmp	r5, #0
 8004ec4:	4607      	mov	r7, r0
 8004ec6:	db01      	blt.n	8004ecc <_malloc_r+0x1c>
 8004ec8:	42a9      	cmp	r1, r5
 8004eca:	d905      	bls.n	8004ed8 <_malloc_r+0x28>
 8004ecc:	230c      	movs	r3, #12
 8004ece:	603b      	str	r3, [r7, #0]
 8004ed0:	2600      	movs	r6, #0
 8004ed2:	4630      	mov	r0, r6
 8004ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ed8:	4e2e      	ldr	r6, [pc, #184]	; (8004f94 <_malloc_r+0xe4>)
 8004eda:	f000 fbf5 	bl	80056c8 <__malloc_lock>
 8004ede:	6833      	ldr	r3, [r6, #0]
 8004ee0:	461c      	mov	r4, r3
 8004ee2:	bb34      	cbnz	r4, 8004f32 <_malloc_r+0x82>
 8004ee4:	4629      	mov	r1, r5
 8004ee6:	4638      	mov	r0, r7
 8004ee8:	f7ff ffc2 	bl	8004e70 <sbrk_aligned>
 8004eec:	1c43      	adds	r3, r0, #1
 8004eee:	4604      	mov	r4, r0
 8004ef0:	d14d      	bne.n	8004f8e <_malloc_r+0xde>
 8004ef2:	6834      	ldr	r4, [r6, #0]
 8004ef4:	4626      	mov	r6, r4
 8004ef6:	2e00      	cmp	r6, #0
 8004ef8:	d140      	bne.n	8004f7c <_malloc_r+0xcc>
 8004efa:	6823      	ldr	r3, [r4, #0]
 8004efc:	4631      	mov	r1, r6
 8004efe:	4638      	mov	r0, r7
 8004f00:	eb04 0803 	add.w	r8, r4, r3
 8004f04:	f000 fb36 	bl	8005574 <_sbrk_r>
 8004f08:	4580      	cmp	r8, r0
 8004f0a:	d13a      	bne.n	8004f82 <_malloc_r+0xd2>
 8004f0c:	6821      	ldr	r1, [r4, #0]
 8004f0e:	3503      	adds	r5, #3
 8004f10:	1a6d      	subs	r5, r5, r1
 8004f12:	f025 0503 	bic.w	r5, r5, #3
 8004f16:	3508      	adds	r5, #8
 8004f18:	2d0c      	cmp	r5, #12
 8004f1a:	bf38      	it	cc
 8004f1c:	250c      	movcc	r5, #12
 8004f1e:	4629      	mov	r1, r5
 8004f20:	4638      	mov	r0, r7
 8004f22:	f7ff ffa5 	bl	8004e70 <sbrk_aligned>
 8004f26:	3001      	adds	r0, #1
 8004f28:	d02b      	beq.n	8004f82 <_malloc_r+0xd2>
 8004f2a:	6823      	ldr	r3, [r4, #0]
 8004f2c:	442b      	add	r3, r5
 8004f2e:	6023      	str	r3, [r4, #0]
 8004f30:	e00e      	b.n	8004f50 <_malloc_r+0xa0>
 8004f32:	6822      	ldr	r2, [r4, #0]
 8004f34:	1b52      	subs	r2, r2, r5
 8004f36:	d41e      	bmi.n	8004f76 <_malloc_r+0xc6>
 8004f38:	2a0b      	cmp	r2, #11
 8004f3a:	d916      	bls.n	8004f6a <_malloc_r+0xba>
 8004f3c:	1961      	adds	r1, r4, r5
 8004f3e:	42a3      	cmp	r3, r4
 8004f40:	6025      	str	r5, [r4, #0]
 8004f42:	bf18      	it	ne
 8004f44:	6059      	strne	r1, [r3, #4]
 8004f46:	6863      	ldr	r3, [r4, #4]
 8004f48:	bf08      	it	eq
 8004f4a:	6031      	streq	r1, [r6, #0]
 8004f4c:	5162      	str	r2, [r4, r5]
 8004f4e:	604b      	str	r3, [r1, #4]
 8004f50:	4638      	mov	r0, r7
 8004f52:	f104 060b 	add.w	r6, r4, #11
 8004f56:	f000 fbbd 	bl	80056d4 <__malloc_unlock>
 8004f5a:	f026 0607 	bic.w	r6, r6, #7
 8004f5e:	1d23      	adds	r3, r4, #4
 8004f60:	1af2      	subs	r2, r6, r3
 8004f62:	d0b6      	beq.n	8004ed2 <_malloc_r+0x22>
 8004f64:	1b9b      	subs	r3, r3, r6
 8004f66:	50a3      	str	r3, [r4, r2]
 8004f68:	e7b3      	b.n	8004ed2 <_malloc_r+0x22>
 8004f6a:	6862      	ldr	r2, [r4, #4]
 8004f6c:	42a3      	cmp	r3, r4
 8004f6e:	bf0c      	ite	eq
 8004f70:	6032      	streq	r2, [r6, #0]
 8004f72:	605a      	strne	r2, [r3, #4]
 8004f74:	e7ec      	b.n	8004f50 <_malloc_r+0xa0>
 8004f76:	4623      	mov	r3, r4
 8004f78:	6864      	ldr	r4, [r4, #4]
 8004f7a:	e7b2      	b.n	8004ee2 <_malloc_r+0x32>
 8004f7c:	4634      	mov	r4, r6
 8004f7e:	6876      	ldr	r6, [r6, #4]
 8004f80:	e7b9      	b.n	8004ef6 <_malloc_r+0x46>
 8004f82:	230c      	movs	r3, #12
 8004f84:	603b      	str	r3, [r7, #0]
 8004f86:	4638      	mov	r0, r7
 8004f88:	f000 fba4 	bl	80056d4 <__malloc_unlock>
 8004f8c:	e7a1      	b.n	8004ed2 <_malloc_r+0x22>
 8004f8e:	6025      	str	r5, [r4, #0]
 8004f90:	e7de      	b.n	8004f50 <_malloc_r+0xa0>
 8004f92:	bf00      	nop
 8004f94:	20000230 	.word	0x20000230

08004f98 <__sfputc_r>:
 8004f98:	6893      	ldr	r3, [r2, #8]
 8004f9a:	3b01      	subs	r3, #1
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	b410      	push	{r4}
 8004fa0:	6093      	str	r3, [r2, #8]
 8004fa2:	da08      	bge.n	8004fb6 <__sfputc_r+0x1e>
 8004fa4:	6994      	ldr	r4, [r2, #24]
 8004fa6:	42a3      	cmp	r3, r4
 8004fa8:	db01      	blt.n	8004fae <__sfputc_r+0x16>
 8004faa:	290a      	cmp	r1, #10
 8004fac:	d103      	bne.n	8004fb6 <__sfputc_r+0x1e>
 8004fae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004fb2:	f7ff bc31 	b.w	8004818 <__swbuf_r>
 8004fb6:	6813      	ldr	r3, [r2, #0]
 8004fb8:	1c58      	adds	r0, r3, #1
 8004fba:	6010      	str	r0, [r2, #0]
 8004fbc:	7019      	strb	r1, [r3, #0]
 8004fbe:	4608      	mov	r0, r1
 8004fc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004fc4:	4770      	bx	lr

08004fc6 <__sfputs_r>:
 8004fc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fc8:	4606      	mov	r6, r0
 8004fca:	460f      	mov	r7, r1
 8004fcc:	4614      	mov	r4, r2
 8004fce:	18d5      	adds	r5, r2, r3
 8004fd0:	42ac      	cmp	r4, r5
 8004fd2:	d101      	bne.n	8004fd8 <__sfputs_r+0x12>
 8004fd4:	2000      	movs	r0, #0
 8004fd6:	e007      	b.n	8004fe8 <__sfputs_r+0x22>
 8004fd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fdc:	463a      	mov	r2, r7
 8004fde:	4630      	mov	r0, r6
 8004fe0:	f7ff ffda 	bl	8004f98 <__sfputc_r>
 8004fe4:	1c43      	adds	r3, r0, #1
 8004fe6:	d1f3      	bne.n	8004fd0 <__sfputs_r+0xa>
 8004fe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004fec <_vfiprintf_r>:
 8004fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ff0:	460d      	mov	r5, r1
 8004ff2:	b09d      	sub	sp, #116	; 0x74
 8004ff4:	4614      	mov	r4, r2
 8004ff6:	4698      	mov	r8, r3
 8004ff8:	4606      	mov	r6, r0
 8004ffa:	b118      	cbz	r0, 8005004 <_vfiprintf_r+0x18>
 8004ffc:	6983      	ldr	r3, [r0, #24]
 8004ffe:	b90b      	cbnz	r3, 8005004 <_vfiprintf_r+0x18>
 8005000:	f7ff fde4 	bl	8004bcc <__sinit>
 8005004:	4b89      	ldr	r3, [pc, #548]	; (800522c <_vfiprintf_r+0x240>)
 8005006:	429d      	cmp	r5, r3
 8005008:	d11b      	bne.n	8005042 <_vfiprintf_r+0x56>
 800500a:	6875      	ldr	r5, [r6, #4]
 800500c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800500e:	07d9      	lsls	r1, r3, #31
 8005010:	d405      	bmi.n	800501e <_vfiprintf_r+0x32>
 8005012:	89ab      	ldrh	r3, [r5, #12]
 8005014:	059a      	lsls	r2, r3, #22
 8005016:	d402      	bmi.n	800501e <_vfiprintf_r+0x32>
 8005018:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800501a:	f7ff fe75 	bl	8004d08 <__retarget_lock_acquire_recursive>
 800501e:	89ab      	ldrh	r3, [r5, #12]
 8005020:	071b      	lsls	r3, r3, #28
 8005022:	d501      	bpl.n	8005028 <_vfiprintf_r+0x3c>
 8005024:	692b      	ldr	r3, [r5, #16]
 8005026:	b9eb      	cbnz	r3, 8005064 <_vfiprintf_r+0x78>
 8005028:	4629      	mov	r1, r5
 800502a:	4630      	mov	r0, r6
 800502c:	f7ff fc46 	bl	80048bc <__swsetup_r>
 8005030:	b1c0      	cbz	r0, 8005064 <_vfiprintf_r+0x78>
 8005032:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005034:	07dc      	lsls	r4, r3, #31
 8005036:	d50e      	bpl.n	8005056 <_vfiprintf_r+0x6a>
 8005038:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800503c:	b01d      	add	sp, #116	; 0x74
 800503e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005042:	4b7b      	ldr	r3, [pc, #492]	; (8005230 <_vfiprintf_r+0x244>)
 8005044:	429d      	cmp	r5, r3
 8005046:	d101      	bne.n	800504c <_vfiprintf_r+0x60>
 8005048:	68b5      	ldr	r5, [r6, #8]
 800504a:	e7df      	b.n	800500c <_vfiprintf_r+0x20>
 800504c:	4b79      	ldr	r3, [pc, #484]	; (8005234 <_vfiprintf_r+0x248>)
 800504e:	429d      	cmp	r5, r3
 8005050:	bf08      	it	eq
 8005052:	68f5      	ldreq	r5, [r6, #12]
 8005054:	e7da      	b.n	800500c <_vfiprintf_r+0x20>
 8005056:	89ab      	ldrh	r3, [r5, #12]
 8005058:	0598      	lsls	r0, r3, #22
 800505a:	d4ed      	bmi.n	8005038 <_vfiprintf_r+0x4c>
 800505c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800505e:	f7ff fe54 	bl	8004d0a <__retarget_lock_release_recursive>
 8005062:	e7e9      	b.n	8005038 <_vfiprintf_r+0x4c>
 8005064:	2300      	movs	r3, #0
 8005066:	9309      	str	r3, [sp, #36]	; 0x24
 8005068:	2320      	movs	r3, #32
 800506a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800506e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005072:	2330      	movs	r3, #48	; 0x30
 8005074:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005238 <_vfiprintf_r+0x24c>
 8005078:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800507c:	f04f 0901 	mov.w	r9, #1
 8005080:	4623      	mov	r3, r4
 8005082:	469a      	mov	sl, r3
 8005084:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005088:	b10a      	cbz	r2, 800508e <_vfiprintf_r+0xa2>
 800508a:	2a25      	cmp	r2, #37	; 0x25
 800508c:	d1f9      	bne.n	8005082 <_vfiprintf_r+0x96>
 800508e:	ebba 0b04 	subs.w	fp, sl, r4
 8005092:	d00b      	beq.n	80050ac <_vfiprintf_r+0xc0>
 8005094:	465b      	mov	r3, fp
 8005096:	4622      	mov	r2, r4
 8005098:	4629      	mov	r1, r5
 800509a:	4630      	mov	r0, r6
 800509c:	f7ff ff93 	bl	8004fc6 <__sfputs_r>
 80050a0:	3001      	adds	r0, #1
 80050a2:	f000 80aa 	beq.w	80051fa <_vfiprintf_r+0x20e>
 80050a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80050a8:	445a      	add	r2, fp
 80050aa:	9209      	str	r2, [sp, #36]	; 0x24
 80050ac:	f89a 3000 	ldrb.w	r3, [sl]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	f000 80a2 	beq.w	80051fa <_vfiprintf_r+0x20e>
 80050b6:	2300      	movs	r3, #0
 80050b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80050bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80050c0:	f10a 0a01 	add.w	sl, sl, #1
 80050c4:	9304      	str	r3, [sp, #16]
 80050c6:	9307      	str	r3, [sp, #28]
 80050c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80050cc:	931a      	str	r3, [sp, #104]	; 0x68
 80050ce:	4654      	mov	r4, sl
 80050d0:	2205      	movs	r2, #5
 80050d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050d6:	4858      	ldr	r0, [pc, #352]	; (8005238 <_vfiprintf_r+0x24c>)
 80050d8:	f7fb f882 	bl	80001e0 <memchr>
 80050dc:	9a04      	ldr	r2, [sp, #16]
 80050de:	b9d8      	cbnz	r0, 8005118 <_vfiprintf_r+0x12c>
 80050e0:	06d1      	lsls	r1, r2, #27
 80050e2:	bf44      	itt	mi
 80050e4:	2320      	movmi	r3, #32
 80050e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050ea:	0713      	lsls	r3, r2, #28
 80050ec:	bf44      	itt	mi
 80050ee:	232b      	movmi	r3, #43	; 0x2b
 80050f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050f4:	f89a 3000 	ldrb.w	r3, [sl]
 80050f8:	2b2a      	cmp	r3, #42	; 0x2a
 80050fa:	d015      	beq.n	8005128 <_vfiprintf_r+0x13c>
 80050fc:	9a07      	ldr	r2, [sp, #28]
 80050fe:	4654      	mov	r4, sl
 8005100:	2000      	movs	r0, #0
 8005102:	f04f 0c0a 	mov.w	ip, #10
 8005106:	4621      	mov	r1, r4
 8005108:	f811 3b01 	ldrb.w	r3, [r1], #1
 800510c:	3b30      	subs	r3, #48	; 0x30
 800510e:	2b09      	cmp	r3, #9
 8005110:	d94e      	bls.n	80051b0 <_vfiprintf_r+0x1c4>
 8005112:	b1b0      	cbz	r0, 8005142 <_vfiprintf_r+0x156>
 8005114:	9207      	str	r2, [sp, #28]
 8005116:	e014      	b.n	8005142 <_vfiprintf_r+0x156>
 8005118:	eba0 0308 	sub.w	r3, r0, r8
 800511c:	fa09 f303 	lsl.w	r3, r9, r3
 8005120:	4313      	orrs	r3, r2
 8005122:	9304      	str	r3, [sp, #16]
 8005124:	46a2      	mov	sl, r4
 8005126:	e7d2      	b.n	80050ce <_vfiprintf_r+0xe2>
 8005128:	9b03      	ldr	r3, [sp, #12]
 800512a:	1d19      	adds	r1, r3, #4
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	9103      	str	r1, [sp, #12]
 8005130:	2b00      	cmp	r3, #0
 8005132:	bfbb      	ittet	lt
 8005134:	425b      	neglt	r3, r3
 8005136:	f042 0202 	orrlt.w	r2, r2, #2
 800513a:	9307      	strge	r3, [sp, #28]
 800513c:	9307      	strlt	r3, [sp, #28]
 800513e:	bfb8      	it	lt
 8005140:	9204      	strlt	r2, [sp, #16]
 8005142:	7823      	ldrb	r3, [r4, #0]
 8005144:	2b2e      	cmp	r3, #46	; 0x2e
 8005146:	d10c      	bne.n	8005162 <_vfiprintf_r+0x176>
 8005148:	7863      	ldrb	r3, [r4, #1]
 800514a:	2b2a      	cmp	r3, #42	; 0x2a
 800514c:	d135      	bne.n	80051ba <_vfiprintf_r+0x1ce>
 800514e:	9b03      	ldr	r3, [sp, #12]
 8005150:	1d1a      	adds	r2, r3, #4
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	9203      	str	r2, [sp, #12]
 8005156:	2b00      	cmp	r3, #0
 8005158:	bfb8      	it	lt
 800515a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800515e:	3402      	adds	r4, #2
 8005160:	9305      	str	r3, [sp, #20]
 8005162:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005248 <_vfiprintf_r+0x25c>
 8005166:	7821      	ldrb	r1, [r4, #0]
 8005168:	2203      	movs	r2, #3
 800516a:	4650      	mov	r0, sl
 800516c:	f7fb f838 	bl	80001e0 <memchr>
 8005170:	b140      	cbz	r0, 8005184 <_vfiprintf_r+0x198>
 8005172:	2340      	movs	r3, #64	; 0x40
 8005174:	eba0 000a 	sub.w	r0, r0, sl
 8005178:	fa03 f000 	lsl.w	r0, r3, r0
 800517c:	9b04      	ldr	r3, [sp, #16]
 800517e:	4303      	orrs	r3, r0
 8005180:	3401      	adds	r4, #1
 8005182:	9304      	str	r3, [sp, #16]
 8005184:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005188:	482c      	ldr	r0, [pc, #176]	; (800523c <_vfiprintf_r+0x250>)
 800518a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800518e:	2206      	movs	r2, #6
 8005190:	f7fb f826 	bl	80001e0 <memchr>
 8005194:	2800      	cmp	r0, #0
 8005196:	d03f      	beq.n	8005218 <_vfiprintf_r+0x22c>
 8005198:	4b29      	ldr	r3, [pc, #164]	; (8005240 <_vfiprintf_r+0x254>)
 800519a:	bb1b      	cbnz	r3, 80051e4 <_vfiprintf_r+0x1f8>
 800519c:	9b03      	ldr	r3, [sp, #12]
 800519e:	3307      	adds	r3, #7
 80051a0:	f023 0307 	bic.w	r3, r3, #7
 80051a4:	3308      	adds	r3, #8
 80051a6:	9303      	str	r3, [sp, #12]
 80051a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051aa:	443b      	add	r3, r7
 80051ac:	9309      	str	r3, [sp, #36]	; 0x24
 80051ae:	e767      	b.n	8005080 <_vfiprintf_r+0x94>
 80051b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80051b4:	460c      	mov	r4, r1
 80051b6:	2001      	movs	r0, #1
 80051b8:	e7a5      	b.n	8005106 <_vfiprintf_r+0x11a>
 80051ba:	2300      	movs	r3, #0
 80051bc:	3401      	adds	r4, #1
 80051be:	9305      	str	r3, [sp, #20]
 80051c0:	4619      	mov	r1, r3
 80051c2:	f04f 0c0a 	mov.w	ip, #10
 80051c6:	4620      	mov	r0, r4
 80051c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051cc:	3a30      	subs	r2, #48	; 0x30
 80051ce:	2a09      	cmp	r2, #9
 80051d0:	d903      	bls.n	80051da <_vfiprintf_r+0x1ee>
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d0c5      	beq.n	8005162 <_vfiprintf_r+0x176>
 80051d6:	9105      	str	r1, [sp, #20]
 80051d8:	e7c3      	b.n	8005162 <_vfiprintf_r+0x176>
 80051da:	fb0c 2101 	mla	r1, ip, r1, r2
 80051de:	4604      	mov	r4, r0
 80051e0:	2301      	movs	r3, #1
 80051e2:	e7f0      	b.n	80051c6 <_vfiprintf_r+0x1da>
 80051e4:	ab03      	add	r3, sp, #12
 80051e6:	9300      	str	r3, [sp, #0]
 80051e8:	462a      	mov	r2, r5
 80051ea:	4b16      	ldr	r3, [pc, #88]	; (8005244 <_vfiprintf_r+0x258>)
 80051ec:	a904      	add	r1, sp, #16
 80051ee:	4630      	mov	r0, r6
 80051f0:	f3af 8000 	nop.w
 80051f4:	4607      	mov	r7, r0
 80051f6:	1c78      	adds	r0, r7, #1
 80051f8:	d1d6      	bne.n	80051a8 <_vfiprintf_r+0x1bc>
 80051fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80051fc:	07d9      	lsls	r1, r3, #31
 80051fe:	d405      	bmi.n	800520c <_vfiprintf_r+0x220>
 8005200:	89ab      	ldrh	r3, [r5, #12]
 8005202:	059a      	lsls	r2, r3, #22
 8005204:	d402      	bmi.n	800520c <_vfiprintf_r+0x220>
 8005206:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005208:	f7ff fd7f 	bl	8004d0a <__retarget_lock_release_recursive>
 800520c:	89ab      	ldrh	r3, [r5, #12]
 800520e:	065b      	lsls	r3, r3, #25
 8005210:	f53f af12 	bmi.w	8005038 <_vfiprintf_r+0x4c>
 8005214:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005216:	e711      	b.n	800503c <_vfiprintf_r+0x50>
 8005218:	ab03      	add	r3, sp, #12
 800521a:	9300      	str	r3, [sp, #0]
 800521c:	462a      	mov	r2, r5
 800521e:	4b09      	ldr	r3, [pc, #36]	; (8005244 <_vfiprintf_r+0x258>)
 8005220:	a904      	add	r1, sp, #16
 8005222:	4630      	mov	r0, r6
 8005224:	f000 f880 	bl	8005328 <_printf_i>
 8005228:	e7e4      	b.n	80051f4 <_vfiprintf_r+0x208>
 800522a:	bf00      	nop
 800522c:	0800579c 	.word	0x0800579c
 8005230:	080057bc 	.word	0x080057bc
 8005234:	0800577c 	.word	0x0800577c
 8005238:	080057dc 	.word	0x080057dc
 800523c:	080057e6 	.word	0x080057e6
 8005240:	00000000 	.word	0x00000000
 8005244:	08004fc7 	.word	0x08004fc7
 8005248:	080057e2 	.word	0x080057e2

0800524c <_printf_common>:
 800524c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005250:	4616      	mov	r6, r2
 8005252:	4699      	mov	r9, r3
 8005254:	688a      	ldr	r2, [r1, #8]
 8005256:	690b      	ldr	r3, [r1, #16]
 8005258:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800525c:	4293      	cmp	r3, r2
 800525e:	bfb8      	it	lt
 8005260:	4613      	movlt	r3, r2
 8005262:	6033      	str	r3, [r6, #0]
 8005264:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005268:	4607      	mov	r7, r0
 800526a:	460c      	mov	r4, r1
 800526c:	b10a      	cbz	r2, 8005272 <_printf_common+0x26>
 800526e:	3301      	adds	r3, #1
 8005270:	6033      	str	r3, [r6, #0]
 8005272:	6823      	ldr	r3, [r4, #0]
 8005274:	0699      	lsls	r1, r3, #26
 8005276:	bf42      	ittt	mi
 8005278:	6833      	ldrmi	r3, [r6, #0]
 800527a:	3302      	addmi	r3, #2
 800527c:	6033      	strmi	r3, [r6, #0]
 800527e:	6825      	ldr	r5, [r4, #0]
 8005280:	f015 0506 	ands.w	r5, r5, #6
 8005284:	d106      	bne.n	8005294 <_printf_common+0x48>
 8005286:	f104 0a19 	add.w	sl, r4, #25
 800528a:	68e3      	ldr	r3, [r4, #12]
 800528c:	6832      	ldr	r2, [r6, #0]
 800528e:	1a9b      	subs	r3, r3, r2
 8005290:	42ab      	cmp	r3, r5
 8005292:	dc26      	bgt.n	80052e2 <_printf_common+0x96>
 8005294:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005298:	1e13      	subs	r3, r2, #0
 800529a:	6822      	ldr	r2, [r4, #0]
 800529c:	bf18      	it	ne
 800529e:	2301      	movne	r3, #1
 80052a0:	0692      	lsls	r2, r2, #26
 80052a2:	d42b      	bmi.n	80052fc <_printf_common+0xb0>
 80052a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052a8:	4649      	mov	r1, r9
 80052aa:	4638      	mov	r0, r7
 80052ac:	47c0      	blx	r8
 80052ae:	3001      	adds	r0, #1
 80052b0:	d01e      	beq.n	80052f0 <_printf_common+0xa4>
 80052b2:	6823      	ldr	r3, [r4, #0]
 80052b4:	68e5      	ldr	r5, [r4, #12]
 80052b6:	6832      	ldr	r2, [r6, #0]
 80052b8:	f003 0306 	and.w	r3, r3, #6
 80052bc:	2b04      	cmp	r3, #4
 80052be:	bf08      	it	eq
 80052c0:	1aad      	subeq	r5, r5, r2
 80052c2:	68a3      	ldr	r3, [r4, #8]
 80052c4:	6922      	ldr	r2, [r4, #16]
 80052c6:	bf0c      	ite	eq
 80052c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052cc:	2500      	movne	r5, #0
 80052ce:	4293      	cmp	r3, r2
 80052d0:	bfc4      	itt	gt
 80052d2:	1a9b      	subgt	r3, r3, r2
 80052d4:	18ed      	addgt	r5, r5, r3
 80052d6:	2600      	movs	r6, #0
 80052d8:	341a      	adds	r4, #26
 80052da:	42b5      	cmp	r5, r6
 80052dc:	d11a      	bne.n	8005314 <_printf_common+0xc8>
 80052de:	2000      	movs	r0, #0
 80052e0:	e008      	b.n	80052f4 <_printf_common+0xa8>
 80052e2:	2301      	movs	r3, #1
 80052e4:	4652      	mov	r2, sl
 80052e6:	4649      	mov	r1, r9
 80052e8:	4638      	mov	r0, r7
 80052ea:	47c0      	blx	r8
 80052ec:	3001      	adds	r0, #1
 80052ee:	d103      	bne.n	80052f8 <_printf_common+0xac>
 80052f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80052f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052f8:	3501      	adds	r5, #1
 80052fa:	e7c6      	b.n	800528a <_printf_common+0x3e>
 80052fc:	18e1      	adds	r1, r4, r3
 80052fe:	1c5a      	adds	r2, r3, #1
 8005300:	2030      	movs	r0, #48	; 0x30
 8005302:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005306:	4422      	add	r2, r4
 8005308:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800530c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005310:	3302      	adds	r3, #2
 8005312:	e7c7      	b.n	80052a4 <_printf_common+0x58>
 8005314:	2301      	movs	r3, #1
 8005316:	4622      	mov	r2, r4
 8005318:	4649      	mov	r1, r9
 800531a:	4638      	mov	r0, r7
 800531c:	47c0      	blx	r8
 800531e:	3001      	adds	r0, #1
 8005320:	d0e6      	beq.n	80052f0 <_printf_common+0xa4>
 8005322:	3601      	adds	r6, #1
 8005324:	e7d9      	b.n	80052da <_printf_common+0x8e>
	...

08005328 <_printf_i>:
 8005328:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800532c:	7e0f      	ldrb	r7, [r1, #24]
 800532e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005330:	2f78      	cmp	r7, #120	; 0x78
 8005332:	4691      	mov	r9, r2
 8005334:	4680      	mov	r8, r0
 8005336:	460c      	mov	r4, r1
 8005338:	469a      	mov	sl, r3
 800533a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800533e:	d807      	bhi.n	8005350 <_printf_i+0x28>
 8005340:	2f62      	cmp	r7, #98	; 0x62
 8005342:	d80a      	bhi.n	800535a <_printf_i+0x32>
 8005344:	2f00      	cmp	r7, #0
 8005346:	f000 80d8 	beq.w	80054fa <_printf_i+0x1d2>
 800534a:	2f58      	cmp	r7, #88	; 0x58
 800534c:	f000 80a3 	beq.w	8005496 <_printf_i+0x16e>
 8005350:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005354:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005358:	e03a      	b.n	80053d0 <_printf_i+0xa8>
 800535a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800535e:	2b15      	cmp	r3, #21
 8005360:	d8f6      	bhi.n	8005350 <_printf_i+0x28>
 8005362:	a101      	add	r1, pc, #4	; (adr r1, 8005368 <_printf_i+0x40>)
 8005364:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005368:	080053c1 	.word	0x080053c1
 800536c:	080053d5 	.word	0x080053d5
 8005370:	08005351 	.word	0x08005351
 8005374:	08005351 	.word	0x08005351
 8005378:	08005351 	.word	0x08005351
 800537c:	08005351 	.word	0x08005351
 8005380:	080053d5 	.word	0x080053d5
 8005384:	08005351 	.word	0x08005351
 8005388:	08005351 	.word	0x08005351
 800538c:	08005351 	.word	0x08005351
 8005390:	08005351 	.word	0x08005351
 8005394:	080054e1 	.word	0x080054e1
 8005398:	08005405 	.word	0x08005405
 800539c:	080054c3 	.word	0x080054c3
 80053a0:	08005351 	.word	0x08005351
 80053a4:	08005351 	.word	0x08005351
 80053a8:	08005503 	.word	0x08005503
 80053ac:	08005351 	.word	0x08005351
 80053b0:	08005405 	.word	0x08005405
 80053b4:	08005351 	.word	0x08005351
 80053b8:	08005351 	.word	0x08005351
 80053bc:	080054cb 	.word	0x080054cb
 80053c0:	682b      	ldr	r3, [r5, #0]
 80053c2:	1d1a      	adds	r2, r3, #4
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	602a      	str	r2, [r5, #0]
 80053c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053d0:	2301      	movs	r3, #1
 80053d2:	e0a3      	b.n	800551c <_printf_i+0x1f4>
 80053d4:	6820      	ldr	r0, [r4, #0]
 80053d6:	6829      	ldr	r1, [r5, #0]
 80053d8:	0606      	lsls	r6, r0, #24
 80053da:	f101 0304 	add.w	r3, r1, #4
 80053de:	d50a      	bpl.n	80053f6 <_printf_i+0xce>
 80053e0:	680e      	ldr	r6, [r1, #0]
 80053e2:	602b      	str	r3, [r5, #0]
 80053e4:	2e00      	cmp	r6, #0
 80053e6:	da03      	bge.n	80053f0 <_printf_i+0xc8>
 80053e8:	232d      	movs	r3, #45	; 0x2d
 80053ea:	4276      	negs	r6, r6
 80053ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053f0:	485e      	ldr	r0, [pc, #376]	; (800556c <_printf_i+0x244>)
 80053f2:	230a      	movs	r3, #10
 80053f4:	e019      	b.n	800542a <_printf_i+0x102>
 80053f6:	680e      	ldr	r6, [r1, #0]
 80053f8:	602b      	str	r3, [r5, #0]
 80053fa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80053fe:	bf18      	it	ne
 8005400:	b236      	sxthne	r6, r6
 8005402:	e7ef      	b.n	80053e4 <_printf_i+0xbc>
 8005404:	682b      	ldr	r3, [r5, #0]
 8005406:	6820      	ldr	r0, [r4, #0]
 8005408:	1d19      	adds	r1, r3, #4
 800540a:	6029      	str	r1, [r5, #0]
 800540c:	0601      	lsls	r1, r0, #24
 800540e:	d501      	bpl.n	8005414 <_printf_i+0xec>
 8005410:	681e      	ldr	r6, [r3, #0]
 8005412:	e002      	b.n	800541a <_printf_i+0xf2>
 8005414:	0646      	lsls	r6, r0, #25
 8005416:	d5fb      	bpl.n	8005410 <_printf_i+0xe8>
 8005418:	881e      	ldrh	r6, [r3, #0]
 800541a:	4854      	ldr	r0, [pc, #336]	; (800556c <_printf_i+0x244>)
 800541c:	2f6f      	cmp	r7, #111	; 0x6f
 800541e:	bf0c      	ite	eq
 8005420:	2308      	moveq	r3, #8
 8005422:	230a      	movne	r3, #10
 8005424:	2100      	movs	r1, #0
 8005426:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800542a:	6865      	ldr	r5, [r4, #4]
 800542c:	60a5      	str	r5, [r4, #8]
 800542e:	2d00      	cmp	r5, #0
 8005430:	bfa2      	ittt	ge
 8005432:	6821      	ldrge	r1, [r4, #0]
 8005434:	f021 0104 	bicge.w	r1, r1, #4
 8005438:	6021      	strge	r1, [r4, #0]
 800543a:	b90e      	cbnz	r6, 8005440 <_printf_i+0x118>
 800543c:	2d00      	cmp	r5, #0
 800543e:	d04d      	beq.n	80054dc <_printf_i+0x1b4>
 8005440:	4615      	mov	r5, r2
 8005442:	fbb6 f1f3 	udiv	r1, r6, r3
 8005446:	fb03 6711 	mls	r7, r3, r1, r6
 800544a:	5dc7      	ldrb	r7, [r0, r7]
 800544c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005450:	4637      	mov	r7, r6
 8005452:	42bb      	cmp	r3, r7
 8005454:	460e      	mov	r6, r1
 8005456:	d9f4      	bls.n	8005442 <_printf_i+0x11a>
 8005458:	2b08      	cmp	r3, #8
 800545a:	d10b      	bne.n	8005474 <_printf_i+0x14c>
 800545c:	6823      	ldr	r3, [r4, #0]
 800545e:	07de      	lsls	r6, r3, #31
 8005460:	d508      	bpl.n	8005474 <_printf_i+0x14c>
 8005462:	6923      	ldr	r3, [r4, #16]
 8005464:	6861      	ldr	r1, [r4, #4]
 8005466:	4299      	cmp	r1, r3
 8005468:	bfde      	ittt	le
 800546a:	2330      	movle	r3, #48	; 0x30
 800546c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005470:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005474:	1b52      	subs	r2, r2, r5
 8005476:	6122      	str	r2, [r4, #16]
 8005478:	f8cd a000 	str.w	sl, [sp]
 800547c:	464b      	mov	r3, r9
 800547e:	aa03      	add	r2, sp, #12
 8005480:	4621      	mov	r1, r4
 8005482:	4640      	mov	r0, r8
 8005484:	f7ff fee2 	bl	800524c <_printf_common>
 8005488:	3001      	adds	r0, #1
 800548a:	d14c      	bne.n	8005526 <_printf_i+0x1fe>
 800548c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005490:	b004      	add	sp, #16
 8005492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005496:	4835      	ldr	r0, [pc, #212]	; (800556c <_printf_i+0x244>)
 8005498:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800549c:	6829      	ldr	r1, [r5, #0]
 800549e:	6823      	ldr	r3, [r4, #0]
 80054a0:	f851 6b04 	ldr.w	r6, [r1], #4
 80054a4:	6029      	str	r1, [r5, #0]
 80054a6:	061d      	lsls	r5, r3, #24
 80054a8:	d514      	bpl.n	80054d4 <_printf_i+0x1ac>
 80054aa:	07df      	lsls	r7, r3, #31
 80054ac:	bf44      	itt	mi
 80054ae:	f043 0320 	orrmi.w	r3, r3, #32
 80054b2:	6023      	strmi	r3, [r4, #0]
 80054b4:	b91e      	cbnz	r6, 80054be <_printf_i+0x196>
 80054b6:	6823      	ldr	r3, [r4, #0]
 80054b8:	f023 0320 	bic.w	r3, r3, #32
 80054bc:	6023      	str	r3, [r4, #0]
 80054be:	2310      	movs	r3, #16
 80054c0:	e7b0      	b.n	8005424 <_printf_i+0xfc>
 80054c2:	6823      	ldr	r3, [r4, #0]
 80054c4:	f043 0320 	orr.w	r3, r3, #32
 80054c8:	6023      	str	r3, [r4, #0]
 80054ca:	2378      	movs	r3, #120	; 0x78
 80054cc:	4828      	ldr	r0, [pc, #160]	; (8005570 <_printf_i+0x248>)
 80054ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80054d2:	e7e3      	b.n	800549c <_printf_i+0x174>
 80054d4:	0659      	lsls	r1, r3, #25
 80054d6:	bf48      	it	mi
 80054d8:	b2b6      	uxthmi	r6, r6
 80054da:	e7e6      	b.n	80054aa <_printf_i+0x182>
 80054dc:	4615      	mov	r5, r2
 80054de:	e7bb      	b.n	8005458 <_printf_i+0x130>
 80054e0:	682b      	ldr	r3, [r5, #0]
 80054e2:	6826      	ldr	r6, [r4, #0]
 80054e4:	6961      	ldr	r1, [r4, #20]
 80054e6:	1d18      	adds	r0, r3, #4
 80054e8:	6028      	str	r0, [r5, #0]
 80054ea:	0635      	lsls	r5, r6, #24
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	d501      	bpl.n	80054f4 <_printf_i+0x1cc>
 80054f0:	6019      	str	r1, [r3, #0]
 80054f2:	e002      	b.n	80054fa <_printf_i+0x1d2>
 80054f4:	0670      	lsls	r0, r6, #25
 80054f6:	d5fb      	bpl.n	80054f0 <_printf_i+0x1c8>
 80054f8:	8019      	strh	r1, [r3, #0]
 80054fa:	2300      	movs	r3, #0
 80054fc:	6123      	str	r3, [r4, #16]
 80054fe:	4615      	mov	r5, r2
 8005500:	e7ba      	b.n	8005478 <_printf_i+0x150>
 8005502:	682b      	ldr	r3, [r5, #0]
 8005504:	1d1a      	adds	r2, r3, #4
 8005506:	602a      	str	r2, [r5, #0]
 8005508:	681d      	ldr	r5, [r3, #0]
 800550a:	6862      	ldr	r2, [r4, #4]
 800550c:	2100      	movs	r1, #0
 800550e:	4628      	mov	r0, r5
 8005510:	f7fa fe66 	bl	80001e0 <memchr>
 8005514:	b108      	cbz	r0, 800551a <_printf_i+0x1f2>
 8005516:	1b40      	subs	r0, r0, r5
 8005518:	6060      	str	r0, [r4, #4]
 800551a:	6863      	ldr	r3, [r4, #4]
 800551c:	6123      	str	r3, [r4, #16]
 800551e:	2300      	movs	r3, #0
 8005520:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005524:	e7a8      	b.n	8005478 <_printf_i+0x150>
 8005526:	6923      	ldr	r3, [r4, #16]
 8005528:	462a      	mov	r2, r5
 800552a:	4649      	mov	r1, r9
 800552c:	4640      	mov	r0, r8
 800552e:	47d0      	blx	sl
 8005530:	3001      	adds	r0, #1
 8005532:	d0ab      	beq.n	800548c <_printf_i+0x164>
 8005534:	6823      	ldr	r3, [r4, #0]
 8005536:	079b      	lsls	r3, r3, #30
 8005538:	d413      	bmi.n	8005562 <_printf_i+0x23a>
 800553a:	68e0      	ldr	r0, [r4, #12]
 800553c:	9b03      	ldr	r3, [sp, #12]
 800553e:	4298      	cmp	r0, r3
 8005540:	bfb8      	it	lt
 8005542:	4618      	movlt	r0, r3
 8005544:	e7a4      	b.n	8005490 <_printf_i+0x168>
 8005546:	2301      	movs	r3, #1
 8005548:	4632      	mov	r2, r6
 800554a:	4649      	mov	r1, r9
 800554c:	4640      	mov	r0, r8
 800554e:	47d0      	blx	sl
 8005550:	3001      	adds	r0, #1
 8005552:	d09b      	beq.n	800548c <_printf_i+0x164>
 8005554:	3501      	adds	r5, #1
 8005556:	68e3      	ldr	r3, [r4, #12]
 8005558:	9903      	ldr	r1, [sp, #12]
 800555a:	1a5b      	subs	r3, r3, r1
 800555c:	42ab      	cmp	r3, r5
 800555e:	dcf2      	bgt.n	8005546 <_printf_i+0x21e>
 8005560:	e7eb      	b.n	800553a <_printf_i+0x212>
 8005562:	2500      	movs	r5, #0
 8005564:	f104 0619 	add.w	r6, r4, #25
 8005568:	e7f5      	b.n	8005556 <_printf_i+0x22e>
 800556a:	bf00      	nop
 800556c:	080057ed 	.word	0x080057ed
 8005570:	080057fe 	.word	0x080057fe

08005574 <_sbrk_r>:
 8005574:	b538      	push	{r3, r4, r5, lr}
 8005576:	4d06      	ldr	r5, [pc, #24]	; (8005590 <_sbrk_r+0x1c>)
 8005578:	2300      	movs	r3, #0
 800557a:	4604      	mov	r4, r0
 800557c:	4608      	mov	r0, r1
 800557e:	602b      	str	r3, [r5, #0]
 8005580:	f7fb ffd2 	bl	8001528 <_sbrk>
 8005584:	1c43      	adds	r3, r0, #1
 8005586:	d102      	bne.n	800558e <_sbrk_r+0x1a>
 8005588:	682b      	ldr	r3, [r5, #0]
 800558a:	b103      	cbz	r3, 800558e <_sbrk_r+0x1a>
 800558c:	6023      	str	r3, [r4, #0]
 800558e:	bd38      	pop	{r3, r4, r5, pc}
 8005590:	20000238 	.word	0x20000238

08005594 <__sread>:
 8005594:	b510      	push	{r4, lr}
 8005596:	460c      	mov	r4, r1
 8005598:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800559c:	f000 f8a0 	bl	80056e0 <_read_r>
 80055a0:	2800      	cmp	r0, #0
 80055a2:	bfab      	itete	ge
 80055a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80055a6:	89a3      	ldrhlt	r3, [r4, #12]
 80055a8:	181b      	addge	r3, r3, r0
 80055aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80055ae:	bfac      	ite	ge
 80055b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80055b2:	81a3      	strhlt	r3, [r4, #12]
 80055b4:	bd10      	pop	{r4, pc}

080055b6 <__swrite>:
 80055b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055ba:	461f      	mov	r7, r3
 80055bc:	898b      	ldrh	r3, [r1, #12]
 80055be:	05db      	lsls	r3, r3, #23
 80055c0:	4605      	mov	r5, r0
 80055c2:	460c      	mov	r4, r1
 80055c4:	4616      	mov	r6, r2
 80055c6:	d505      	bpl.n	80055d4 <__swrite+0x1e>
 80055c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055cc:	2302      	movs	r3, #2
 80055ce:	2200      	movs	r2, #0
 80055d0:	f000 f868 	bl	80056a4 <_lseek_r>
 80055d4:	89a3      	ldrh	r3, [r4, #12]
 80055d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80055da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055de:	81a3      	strh	r3, [r4, #12]
 80055e0:	4632      	mov	r2, r6
 80055e2:	463b      	mov	r3, r7
 80055e4:	4628      	mov	r0, r5
 80055e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80055ea:	f000 b817 	b.w	800561c <_write_r>

080055ee <__sseek>:
 80055ee:	b510      	push	{r4, lr}
 80055f0:	460c      	mov	r4, r1
 80055f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055f6:	f000 f855 	bl	80056a4 <_lseek_r>
 80055fa:	1c43      	adds	r3, r0, #1
 80055fc:	89a3      	ldrh	r3, [r4, #12]
 80055fe:	bf15      	itete	ne
 8005600:	6560      	strne	r0, [r4, #84]	; 0x54
 8005602:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005606:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800560a:	81a3      	strheq	r3, [r4, #12]
 800560c:	bf18      	it	ne
 800560e:	81a3      	strhne	r3, [r4, #12]
 8005610:	bd10      	pop	{r4, pc}

08005612 <__sclose>:
 8005612:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005616:	f000 b813 	b.w	8005640 <_close_r>
	...

0800561c <_write_r>:
 800561c:	b538      	push	{r3, r4, r5, lr}
 800561e:	4d07      	ldr	r5, [pc, #28]	; (800563c <_write_r+0x20>)
 8005620:	4604      	mov	r4, r0
 8005622:	4608      	mov	r0, r1
 8005624:	4611      	mov	r1, r2
 8005626:	2200      	movs	r2, #0
 8005628:	602a      	str	r2, [r5, #0]
 800562a:	461a      	mov	r2, r3
 800562c:	f7fb ff2b 	bl	8001486 <_write>
 8005630:	1c43      	adds	r3, r0, #1
 8005632:	d102      	bne.n	800563a <_write_r+0x1e>
 8005634:	682b      	ldr	r3, [r5, #0]
 8005636:	b103      	cbz	r3, 800563a <_write_r+0x1e>
 8005638:	6023      	str	r3, [r4, #0]
 800563a:	bd38      	pop	{r3, r4, r5, pc}
 800563c:	20000238 	.word	0x20000238

08005640 <_close_r>:
 8005640:	b538      	push	{r3, r4, r5, lr}
 8005642:	4d06      	ldr	r5, [pc, #24]	; (800565c <_close_r+0x1c>)
 8005644:	2300      	movs	r3, #0
 8005646:	4604      	mov	r4, r0
 8005648:	4608      	mov	r0, r1
 800564a:	602b      	str	r3, [r5, #0]
 800564c:	f7fb ff37 	bl	80014be <_close>
 8005650:	1c43      	adds	r3, r0, #1
 8005652:	d102      	bne.n	800565a <_close_r+0x1a>
 8005654:	682b      	ldr	r3, [r5, #0]
 8005656:	b103      	cbz	r3, 800565a <_close_r+0x1a>
 8005658:	6023      	str	r3, [r4, #0]
 800565a:	bd38      	pop	{r3, r4, r5, pc}
 800565c:	20000238 	.word	0x20000238

08005660 <_fstat_r>:
 8005660:	b538      	push	{r3, r4, r5, lr}
 8005662:	4d07      	ldr	r5, [pc, #28]	; (8005680 <_fstat_r+0x20>)
 8005664:	2300      	movs	r3, #0
 8005666:	4604      	mov	r4, r0
 8005668:	4608      	mov	r0, r1
 800566a:	4611      	mov	r1, r2
 800566c:	602b      	str	r3, [r5, #0]
 800566e:	f7fb ff32 	bl	80014d6 <_fstat>
 8005672:	1c43      	adds	r3, r0, #1
 8005674:	d102      	bne.n	800567c <_fstat_r+0x1c>
 8005676:	682b      	ldr	r3, [r5, #0]
 8005678:	b103      	cbz	r3, 800567c <_fstat_r+0x1c>
 800567a:	6023      	str	r3, [r4, #0]
 800567c:	bd38      	pop	{r3, r4, r5, pc}
 800567e:	bf00      	nop
 8005680:	20000238 	.word	0x20000238

08005684 <_isatty_r>:
 8005684:	b538      	push	{r3, r4, r5, lr}
 8005686:	4d06      	ldr	r5, [pc, #24]	; (80056a0 <_isatty_r+0x1c>)
 8005688:	2300      	movs	r3, #0
 800568a:	4604      	mov	r4, r0
 800568c:	4608      	mov	r0, r1
 800568e:	602b      	str	r3, [r5, #0]
 8005690:	f7fb ff31 	bl	80014f6 <_isatty>
 8005694:	1c43      	adds	r3, r0, #1
 8005696:	d102      	bne.n	800569e <_isatty_r+0x1a>
 8005698:	682b      	ldr	r3, [r5, #0]
 800569a:	b103      	cbz	r3, 800569e <_isatty_r+0x1a>
 800569c:	6023      	str	r3, [r4, #0]
 800569e:	bd38      	pop	{r3, r4, r5, pc}
 80056a0:	20000238 	.word	0x20000238

080056a4 <_lseek_r>:
 80056a4:	b538      	push	{r3, r4, r5, lr}
 80056a6:	4d07      	ldr	r5, [pc, #28]	; (80056c4 <_lseek_r+0x20>)
 80056a8:	4604      	mov	r4, r0
 80056aa:	4608      	mov	r0, r1
 80056ac:	4611      	mov	r1, r2
 80056ae:	2200      	movs	r2, #0
 80056b0:	602a      	str	r2, [r5, #0]
 80056b2:	461a      	mov	r2, r3
 80056b4:	f7fb ff2a 	bl	800150c <_lseek>
 80056b8:	1c43      	adds	r3, r0, #1
 80056ba:	d102      	bne.n	80056c2 <_lseek_r+0x1e>
 80056bc:	682b      	ldr	r3, [r5, #0]
 80056be:	b103      	cbz	r3, 80056c2 <_lseek_r+0x1e>
 80056c0:	6023      	str	r3, [r4, #0]
 80056c2:	bd38      	pop	{r3, r4, r5, pc}
 80056c4:	20000238 	.word	0x20000238

080056c8 <__malloc_lock>:
 80056c8:	4801      	ldr	r0, [pc, #4]	; (80056d0 <__malloc_lock+0x8>)
 80056ca:	f7ff bb1d 	b.w	8004d08 <__retarget_lock_acquire_recursive>
 80056ce:	bf00      	nop
 80056d0:	2000022c 	.word	0x2000022c

080056d4 <__malloc_unlock>:
 80056d4:	4801      	ldr	r0, [pc, #4]	; (80056dc <__malloc_unlock+0x8>)
 80056d6:	f7ff bb18 	b.w	8004d0a <__retarget_lock_release_recursive>
 80056da:	bf00      	nop
 80056dc:	2000022c 	.word	0x2000022c

080056e0 <_read_r>:
 80056e0:	b538      	push	{r3, r4, r5, lr}
 80056e2:	4d07      	ldr	r5, [pc, #28]	; (8005700 <_read_r+0x20>)
 80056e4:	4604      	mov	r4, r0
 80056e6:	4608      	mov	r0, r1
 80056e8:	4611      	mov	r1, r2
 80056ea:	2200      	movs	r2, #0
 80056ec:	602a      	str	r2, [r5, #0]
 80056ee:	461a      	mov	r2, r3
 80056f0:	f7fb feac 	bl	800144c <_read>
 80056f4:	1c43      	adds	r3, r0, #1
 80056f6:	d102      	bne.n	80056fe <_read_r+0x1e>
 80056f8:	682b      	ldr	r3, [r5, #0]
 80056fa:	b103      	cbz	r3, 80056fe <_read_r+0x1e>
 80056fc:	6023      	str	r3, [r4, #0]
 80056fe:	bd38      	pop	{r3, r4, r5, pc}
 8005700:	20000238 	.word	0x20000238

08005704 <_init>:
 8005704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005706:	bf00      	nop
 8005708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800570a:	bc08      	pop	{r3}
 800570c:	469e      	mov	lr, r3
 800570e:	4770      	bx	lr

08005710 <_fini>:
 8005710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005712:	bf00      	nop
 8005714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005716:	bc08      	pop	{r3}
 8005718:	469e      	mov	lr, r3
 800571a:	4770      	bx	lr
