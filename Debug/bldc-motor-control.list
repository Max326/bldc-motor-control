
bldc-motor-control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f04  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  0800409c  0800409c  0001409c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800412c  0800412c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800412c  0800412c  0001412c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004134  08004134  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004134  08004134  00014134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004138  08004138  00014138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800413c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  20000070  080041ac  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001a4  080041ac  000201a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e7ad  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e88  00000000  00000000  0002e84d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d88  00000000  00000000  000306d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc0  00000000  00000000  00031460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000184bc  00000000  00000000  00032120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000efa5  00000000  00000000  0004a5dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b0a1  00000000  00000000  00059581  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f4622  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f50  00000000  00000000  000f4674  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004084 	.word	0x08004084

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	08004084 	.word	0x08004084

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 fd6c 	bl	8000fbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f822 	bl	800052c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e8:	f000 f99e 	bl	8000828 <MX_GPIO_Init>
  MX_ADC1_Init();
 80004ec:	f000 f886 	bl	80005fc <MX_ADC1_Init>
  MX_USART6_UART_Init();
 80004f0:	f000 f970 	bl	80007d4 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 80004f4:	f000 f8d4 	bl	80006a0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */


  Motor_Start();
 80004f8:	f000 fa34 	bl	8000964 <Motor_Start>
  printf("Motor_Start called\n");
 80004fc:	4809      	ldr	r0, [pc, #36]	; (8000524 <main+0x48>)
 80004fe:	f003 f931 	bl	8003764 <puts>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000502:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000506:	4808      	ldr	r0, [pc, #32]	; (8000528 <main+0x4c>)
 8000508:	f001 fae3 	bl	8001ad2 <HAL_GPIO_TogglePin>

	HAL_GPIO_TogglePin(LDN_GPIO_Port, LDN_Pin);
 800050c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000510:	4805      	ldr	r0, [pc, #20]	; (8000528 <main+0x4c>)
 8000512:	f001 fade 	bl	8001ad2 <HAL_GPIO_TogglePin>
//	} else {
//		printf("ADC PollForConversion failed\n");
//	}
//
//
	HAL_Delay(1000);
 8000516:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800051a:	f000 fdc1 	bl	80010a0 <HAL_Delay>

	Spin_Motor();
 800051e:	f000 fa55 	bl	80009cc <Spin_Motor>
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000522:	e7ee      	b.n	8000502 <main+0x26>
 8000524:	0800409c 	.word	0x0800409c
 8000528:	40020c00 	.word	0x40020c00

0800052c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b094      	sub	sp, #80	; 0x50
 8000530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000532:	f107 0320 	add.w	r3, r7, #32
 8000536:	2230      	movs	r2, #48	; 0x30
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f003 f89c 	bl	8003678 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000540:	f107 030c 	add.w	r3, r7, #12
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000550:	2300      	movs	r3, #0
 8000552:	60bb      	str	r3, [r7, #8]
 8000554:	4b27      	ldr	r3, [pc, #156]	; (80005f4 <SystemClock_Config+0xc8>)
 8000556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000558:	4a26      	ldr	r2, [pc, #152]	; (80005f4 <SystemClock_Config+0xc8>)
 800055a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800055e:	6413      	str	r3, [r2, #64]	; 0x40
 8000560:	4b24      	ldr	r3, [pc, #144]	; (80005f4 <SystemClock_Config+0xc8>)
 8000562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000568:	60bb      	str	r3, [r7, #8]
 800056a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800056c:	2300      	movs	r3, #0
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	4b21      	ldr	r3, [pc, #132]	; (80005f8 <SystemClock_Config+0xcc>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a20      	ldr	r2, [pc, #128]	; (80005f8 <SystemClock_Config+0xcc>)
 8000576:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800057a:	6013      	str	r3, [r2, #0]
 800057c:	4b1e      	ldr	r3, [pc, #120]	; (80005f8 <SystemClock_Config+0xcc>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000584:	607b      	str	r3, [r7, #4]
 8000586:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000588:	2302      	movs	r3, #2
 800058a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800058c:	2301      	movs	r3, #1
 800058e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000590:	2310      	movs	r3, #16
 8000592:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000594:	2302      	movs	r3, #2
 8000596:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000598:	2300      	movs	r3, #0
 800059a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800059c:	2308      	movs	r3, #8
 800059e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80005a0:	2354      	movs	r3, #84	; 0x54
 80005a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a4:	2302      	movs	r3, #2
 80005a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005a8:	2304      	movs	r3, #4
 80005aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ac:	f107 0320 	add.w	r3, r7, #32
 80005b0:	4618      	mov	r0, r3
 80005b2:	f001 faa9 	bl	8001b08 <HAL_RCC_OscConfig>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005bc:	f000 f9cc 	bl	8000958 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c0:	230f      	movs	r3, #15
 80005c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c4:	2302      	movs	r3, #2
 80005c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005d6:	f107 030c 	add.w	r3, r7, #12
 80005da:	2102      	movs	r1, #2
 80005dc:	4618      	mov	r0, r3
 80005de:	f001 fd0b 	bl	8001ff8 <HAL_RCC_ClockConfig>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005e8:	f000 f9b6 	bl	8000958 <Error_Handler>
  }
}
 80005ec:	bf00      	nop
 80005ee:	3750      	adds	r7, #80	; 0x50
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	40023800 	.word	0x40023800
 80005f8:	40007000 	.word	0x40007000

080005fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000602:	463b      	mov	r3, r7
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800060e:	4b21      	ldr	r3, [pc, #132]	; (8000694 <MX_ADC1_Init+0x98>)
 8000610:	4a21      	ldr	r2, [pc, #132]	; (8000698 <MX_ADC1_Init+0x9c>)
 8000612:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000614:	4b1f      	ldr	r3, [pc, #124]	; (8000694 <MX_ADC1_Init+0x98>)
 8000616:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800061a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800061c:	4b1d      	ldr	r3, [pc, #116]	; (8000694 <MX_ADC1_Init+0x98>)
 800061e:	2200      	movs	r2, #0
 8000620:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000622:	4b1c      	ldr	r3, [pc, #112]	; (8000694 <MX_ADC1_Init+0x98>)
 8000624:	2200      	movs	r2, #0
 8000626:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000628:	4b1a      	ldr	r3, [pc, #104]	; (8000694 <MX_ADC1_Init+0x98>)
 800062a:	2201      	movs	r2, #1
 800062c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800062e:	4b19      	ldr	r3, [pc, #100]	; (8000694 <MX_ADC1_Init+0x98>)
 8000630:	2200      	movs	r2, #0
 8000632:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000636:	4b17      	ldr	r3, [pc, #92]	; (8000694 <MX_ADC1_Init+0x98>)
 8000638:	2200      	movs	r2, #0
 800063a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800063c:	4b15      	ldr	r3, [pc, #84]	; (8000694 <MX_ADC1_Init+0x98>)
 800063e:	4a17      	ldr	r2, [pc, #92]	; (800069c <MX_ADC1_Init+0xa0>)
 8000640:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000642:	4b14      	ldr	r3, [pc, #80]	; (8000694 <MX_ADC1_Init+0x98>)
 8000644:	2200      	movs	r2, #0
 8000646:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000648:	4b12      	ldr	r3, [pc, #72]	; (8000694 <MX_ADC1_Init+0x98>)
 800064a:	2201      	movs	r2, #1
 800064c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800064e:	4b11      	ldr	r3, [pc, #68]	; (8000694 <MX_ADC1_Init+0x98>)
 8000650:	2200      	movs	r2, #0
 8000652:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000656:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <MX_ADC1_Init+0x98>)
 8000658:	2201      	movs	r2, #1
 800065a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800065c:	480d      	ldr	r0, [pc, #52]	; (8000694 <MX_ADC1_Init+0x98>)
 800065e:	f000 fd43 	bl	80010e8 <HAL_ADC_Init>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000668:	f000 f976 	bl	8000958 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800066c:	2300      	movs	r3, #0
 800066e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000670:	2301      	movs	r3, #1
 8000672:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000674:	2300      	movs	r3, #0
 8000676:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000678:	463b      	mov	r3, r7
 800067a:	4619      	mov	r1, r3
 800067c:	4805      	ldr	r0, [pc, #20]	; (8000694 <MX_ADC1_Init+0x98>)
 800067e:	f000 fd77 	bl	8001170 <HAL_ADC_ConfigChannel>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000688:	f000 f966 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800068c:	bf00      	nop
 800068e:	3710      	adds	r7, #16
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	2000008c 	.word	0x2000008c
 8000698:	40012000 	.word	0x40012000
 800069c:	0f000001 	.word	0x0f000001

080006a0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b092      	sub	sp, #72	; 0x48
 80006a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]
 80006c0:	615a      	str	r2, [r3, #20]
 80006c2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006c4:	1d3b      	adds	r3, r7, #4
 80006c6:	2220      	movs	r2, #32
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f002 ffd4 	bl	8003678 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006d0:	4b3e      	ldr	r3, [pc, #248]	; (80007cc <MX_TIM1_Init+0x12c>)
 80006d2:	4a3f      	ldr	r2, [pc, #252]	; (80007d0 <MX_TIM1_Init+0x130>)
 80006d4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 42-1;
 80006d6:	4b3d      	ldr	r3, [pc, #244]	; (80007cc <MX_TIM1_Init+0x12c>)
 80006d8:	2229      	movs	r2, #41	; 0x29
 80006da:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006dc:	4b3b      	ldr	r3, [pc, #236]	; (80007cc <MX_TIM1_Init+0x12c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 80006e2:	4b3a      	ldr	r3, [pc, #232]	; (80007cc <MX_TIM1_Init+0x12c>)
 80006e4:	2263      	movs	r2, #99	; 0x63
 80006e6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006e8:	4b38      	ldr	r3, [pc, #224]	; (80007cc <MX_TIM1_Init+0x12c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006ee:	4b37      	ldr	r3, [pc, #220]	; (80007cc <MX_TIM1_Init+0x12c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006f4:	4b35      	ldr	r3, [pc, #212]	; (80007cc <MX_TIM1_Init+0x12c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80006fa:	4834      	ldr	r0, [pc, #208]	; (80007cc <MX_TIM1_Init+0x12c>)
 80006fc:	f001 fe5c 	bl	80023b8 <HAL_TIM_OC_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8000706:	f000 f927 	bl	8000958 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800070a:	2300      	movs	r3, #0
 800070c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800070e:	2300      	movs	r3, #0
 8000710:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000712:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000716:	4619      	mov	r1, r3
 8000718:	482c      	ldr	r0, [pc, #176]	; (80007cc <MX_TIM1_Init+0x12c>)
 800071a:	f002 fb01 	bl	8002d20 <HAL_TIMEx_MasterConfigSynchronization>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8000724:	f000 f918 	bl	8000958 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000728:	2300      	movs	r3, #0
 800072a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800072c:	2300      	movs	r3, #0
 800072e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000730:	2300      	movs	r3, #0
 8000732:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000734:	2300      	movs	r3, #0
 8000736:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000738:	2300      	movs	r3, #0
 800073a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800073c:	2300      	movs	r3, #0
 800073e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000740:	2300      	movs	r3, #0
 8000742:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000744:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000748:	2200      	movs	r2, #0
 800074a:	4619      	mov	r1, r3
 800074c:	481f      	ldr	r0, [pc, #124]	; (80007cc <MX_TIM1_Init+0x12c>)
 800074e:	f001 ff97 	bl	8002680 <HAL_TIM_OC_ConfigChannel>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8000758:	f000 f8fe 	bl	8000958 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800075c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000760:	2204      	movs	r2, #4
 8000762:	4619      	mov	r1, r3
 8000764:	4819      	ldr	r0, [pc, #100]	; (80007cc <MX_TIM1_Init+0x12c>)
 8000766:	f001 ff8b 	bl	8002680 <HAL_TIM_OC_ConfigChannel>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000770:	f000 f8f2 	bl	8000958 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000774:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000778:	2208      	movs	r2, #8
 800077a:	4619      	mov	r1, r3
 800077c:	4813      	ldr	r0, [pc, #76]	; (80007cc <MX_TIM1_Init+0x12c>)
 800077e:	f001 ff7f 	bl	8002680 <HAL_TIM_OC_ConfigChannel>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8000788:	f000 f8e6 	bl	8000958 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800078c:	2300      	movs	r3, #0
 800078e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000790:	2300      	movs	r3, #0
 8000792:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000794:	2300      	movs	r3, #0
 8000796:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000798:	2300      	movs	r3, #0
 800079a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800079c:	2300      	movs	r3, #0
 800079e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007a4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007a6:	2300      	movs	r3, #0
 80007a8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	4619      	mov	r1, r3
 80007ae:	4807      	ldr	r0, [pc, #28]	; (80007cc <MX_TIM1_Init+0x12c>)
 80007b0:	f002 fb24 	bl	8002dfc <HAL_TIMEx_ConfigBreakDeadTime>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 80007ba:	f000 f8cd 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007be:	4803      	ldr	r0, [pc, #12]	; (80007cc <MX_TIM1_Init+0x12c>)
 80007c0:	f000 fa70 	bl	8000ca4 <HAL_TIM_MspPostInit>

}
 80007c4:	bf00      	nop
 80007c6:	3748      	adds	r7, #72	; 0x48
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	200000d4 	.word	0x200000d4
 80007d0:	40010000 	.word	0x40010000

080007d4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80007d8:	4b11      	ldr	r3, [pc, #68]	; (8000820 <MX_USART6_UART_Init+0x4c>)
 80007da:	4a12      	ldr	r2, [pc, #72]	; (8000824 <MX_USART6_UART_Init+0x50>)
 80007dc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80007de:	4b10      	ldr	r3, [pc, #64]	; (8000820 <MX_USART6_UART_Init+0x4c>)
 80007e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007e4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80007e6:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <MX_USART6_UART_Init+0x4c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80007ec:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <MX_USART6_UART_Init+0x4c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80007f2:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <MX_USART6_UART_Init+0x4c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80007f8:	4b09      	ldr	r3, [pc, #36]	; (8000820 <MX_USART6_UART_Init+0x4c>)
 80007fa:	220c      	movs	r2, #12
 80007fc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fe:	4b08      	ldr	r3, [pc, #32]	; (8000820 <MX_USART6_UART_Init+0x4c>)
 8000800:	2200      	movs	r2, #0
 8000802:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000804:	4b06      	ldr	r3, [pc, #24]	; (8000820 <MX_USART6_UART_Init+0x4c>)
 8000806:	2200      	movs	r2, #0
 8000808:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800080a:	4805      	ldr	r0, [pc, #20]	; (8000820 <MX_USART6_UART_Init+0x4c>)
 800080c:	f002 fb48 	bl	8002ea0 <HAL_UART_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000816:	f000 f89f 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	2000011c 	.word	0x2000011c
 8000824:	40011400 	.word	0x40011400

08000828 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b08a      	sub	sp, #40	; 0x28
 800082c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082e:	f107 0314 	add.w	r3, r7, #20
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]
 8000838:	609a      	str	r2, [r3, #8]
 800083a:	60da      	str	r2, [r3, #12]
 800083c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	613b      	str	r3, [r7, #16]
 8000842:	4b32      	ldr	r3, [pc, #200]	; (800090c <MX_GPIO_Init+0xe4>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a31      	ldr	r2, [pc, #196]	; (800090c <MX_GPIO_Init+0xe4>)
 8000848:	f043 0301 	orr.w	r3, r3, #1
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b2f      	ldr	r3, [pc, #188]	; (800090c <MX_GPIO_Init+0xe4>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	613b      	str	r3, [r7, #16]
 8000858:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	4b2b      	ldr	r3, [pc, #172]	; (800090c <MX_GPIO_Init+0xe4>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a2a      	ldr	r2, [pc, #168]	; (800090c <MX_GPIO_Init+0xe4>)
 8000864:	f043 0302 	orr.w	r3, r3, #2
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b28      	ldr	r3, [pc, #160]	; (800090c <MX_GPIO_Init+0xe4>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0302 	and.w	r3, r3, #2
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	60bb      	str	r3, [r7, #8]
 800087a:	4b24      	ldr	r3, [pc, #144]	; (800090c <MX_GPIO_Init+0xe4>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a23      	ldr	r2, [pc, #140]	; (800090c <MX_GPIO_Init+0xe4>)
 8000880:	f043 0308 	orr.w	r3, r3, #8
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b21      	ldr	r3, [pc, #132]	; (800090c <MX_GPIO_Init+0xe4>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0308 	and.w	r3, r3, #8
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	4b1d      	ldr	r3, [pc, #116]	; (800090c <MX_GPIO_Init+0xe4>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a1c      	ldr	r2, [pc, #112]	; (800090c <MX_GPIO_Init+0xe4>)
 800089c:	f043 0304 	orr.w	r3, r3, #4
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b1a      	ldr	r3, [pc, #104]	; (800090c <MX_GPIO_Init+0xe4>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0304 	and.w	r3, r3, #4
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PWM1EN_Pin|PWM2EN_Pin|PWM3EN_Pin, GPIO_PIN_RESET);
 80008ae:	2200      	movs	r2, #0
 80008b0:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 80008b4:	4816      	ldr	r0, [pc, #88]	; (8000910 <MX_GPIO_Init+0xe8>)
 80008b6:	f001 f8f3 	bl	8001aa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD3_Pin|LDN_Pin, GPIO_PIN_RESET);
 80008ba:	2200      	movs	r2, #0
 80008bc:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 80008c0:	4814      	ldr	r0, [pc, #80]	; (8000914 <MX_GPIO_Init+0xec>)
 80008c2:	f001 f8ed 	bl	8001aa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PWM1EN_Pin PWM2EN_Pin PWM3EN_Pin */
  GPIO_InitStruct.Pin = PWM1EN_Pin|PWM2EN_Pin|PWM3EN_Pin;
 80008c6:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80008ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008cc:	2301      	movs	r3, #1
 80008ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d4:	2300      	movs	r3, #0
 80008d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d8:	f107 0314 	add.w	r3, r7, #20
 80008dc:	4619      	mov	r1, r3
 80008de:	480c      	ldr	r0, [pc, #48]	; (8000910 <MX_GPIO_Init+0xe8>)
 80008e0:	f000 ff5a 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LDN_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LDN_Pin;
 80008e4:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 80008e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ea:	2301      	movs	r3, #1
 80008ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	2300      	movs	r3, #0
 80008f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008f6:	f107 0314 	add.w	r3, r7, #20
 80008fa:	4619      	mov	r1, r3
 80008fc:	4805      	ldr	r0, [pc, #20]	; (8000914 <MX_GPIO_Init+0xec>)
 80008fe:	f000 ff4b 	bl	8001798 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000902:	bf00      	nop
 8000904:	3728      	adds	r7, #40	; 0x28
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40023800 	.word	0x40023800
 8000910:	40020400 	.word	0x40020400
 8000914:	40020c00 	.word	0x40020c00

08000918 <__io_putchar>:

/* USER CODE BEGIN 4 */

int __io_putchar(int ch)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
    if (ch == '\n') {
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	2b0a      	cmp	r3, #10
 8000924:	d109      	bne.n	800093a <__io_putchar+0x22>
        uint8_t ch6 = '\r';
 8000926:	230d      	movs	r3, #13
 8000928:	73fb      	strb	r3, [r7, #15]
        HAL_UART_Transmit(&huart6, &ch6, 1, HAL_MAX_DELAY);
 800092a:	f107 010f 	add.w	r1, r7, #15
 800092e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000932:	2201      	movs	r2, #1
 8000934:	4807      	ldr	r0, [pc, #28]	; (8000954 <__io_putchar+0x3c>)
 8000936:	f002 fb00 	bl	8002f3a <HAL_UART_Transmit>
    }

    HAL_UART_Transmit(&huart6, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 800093a:	1d39      	adds	r1, r7, #4
 800093c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000940:	2201      	movs	r2, #1
 8000942:	4804      	ldr	r0, [pc, #16]	; (8000954 <__io_putchar+0x3c>)
 8000944:	f002 faf9 	bl	8002f3a <HAL_UART_Transmit>
    return 1;
 8000948:	2301      	movs	r3, #1
}
 800094a:	4618      	mov	r0, r3
 800094c:	3710      	adds	r7, #16
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	2000011c 	.word	0x2000011c

08000958 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800095c:	b672      	cpsid	i
}
 800095e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000960:	e7fe      	b.n	8000960 <Error_Handler+0x8>
	...

08000964 <Motor_Start>:
// from tutorial

BLDC_Motor bldc;

void Motor_Start(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
    // Enabling PWM
    HAL_GPIO_WritePin(PWM1EN_GPIO_Port, PWM1EN_Pin, GPIO_PIN_SET);
 8000968:	2201      	movs	r2, #1
 800096a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800096e:	4814      	ldr	r0, [pc, #80]	; (80009c0 <Motor_Start+0x5c>)
 8000970:	f001 f896 	bl	8001aa0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PWM2EN_GPIO_Port, PWM2EN_Pin, GPIO_PIN_SET);
 8000974:	2201      	movs	r2, #1
 8000976:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800097a:	4811      	ldr	r0, [pc, #68]	; (80009c0 <Motor_Start+0x5c>)
 800097c:	f001 f890 	bl	8001aa0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PWM3EN_GPIO_Port, PWM3EN_Pin, GPIO_PIN_SET);
 8000980:	2201      	movs	r2, #1
 8000982:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000986:	480e      	ldr	r0, [pc, #56]	; (80009c0 <Motor_Start+0x5c>)
 8000988:	f001 f88a 	bl	8001aa0 <HAL_GPIO_WritePin>

    // Initialize BLDC motor control parameters
    bldc.step_number = 1;
 800098c:	4b0d      	ldr	r3, [pc, #52]	; (80009c4 <Motor_Start+0x60>)
 800098e:	2201      	movs	r2, #1
 8000990:	701a      	strb	r2, [r3, #0]
    bldc.speed_pulse = 50;  // Example initial speed (duty cycle)
 8000992:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <Motor_Start+0x60>)
 8000994:	2232      	movs	r2, #50	; 0x32
 8000996:	605a      	str	r2, [r3, #4]
    bldc.dir = 1;  // Set direction to CW
 8000998:	4b0a      	ldr	r3, [pc, #40]	; (80009c4 <Motor_Start+0x60>)
 800099a:	2201      	movs	r2, #1
 800099c:	609a      	str	r2, [r3, #8]
    bldc.tim_pwm = &htim1;
 800099e:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <Motor_Start+0x60>)
 80009a0:	4a09      	ldr	r2, [pc, #36]	; (80009c8 <Motor_Start+0x64>)
 80009a2:	60da      	str	r2, [r3, #12]

    // Start PWM signals
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80009a4:	2100      	movs	r1, #0
 80009a6:	4808      	ldr	r0, [pc, #32]	; (80009c8 <Motor_Start+0x64>)
 80009a8:	f001 fdba 	bl	8002520 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80009ac:	2104      	movs	r1, #4
 80009ae:	4806      	ldr	r0, [pc, #24]	; (80009c8 <Motor_Start+0x64>)
 80009b0:	f001 fdb6 	bl	8002520 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80009b4:	2108      	movs	r1, #8
 80009b6:	4804      	ldr	r0, [pc, #16]	; (80009c8 <Motor_Start+0x64>)
 80009b8:	f001 fdb2 	bl	8002520 <HAL_TIM_PWM_Start>

    //fucking around
//    HAL_GPIO_WritePin(PH1_GPIO_Port, PH1_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(PH2_GPIO_Port, PH2_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(PWM3EN_GPIO_Port, PWM3EN_Pin, GPIO_PIN_SET);
}
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	40020400 	.word	0x40020400
 80009c4:	20000160 	.word	0x20000160
 80009c8:	200000d4 	.word	0x200000d4

080009cc <Spin_Motor>:
    while (delay--) {
        __asm("nop");
    }
}

void Spin_Motor(void) {
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
    while (1) {
        bldc_motor_six_step_algorithm();
 80009d0:	f000 f842 	bl	8000a58 <bldc_motor_six_step_algorithm>
        HAL_Delay(1); // Adjust the delay for the desired motor speed
 80009d4:	2001      	movs	r0, #1
 80009d6:	f000 fb63 	bl	80010a0 <HAL_Delay>
        bldc_motor_six_step_algorithm();
 80009da:	e7f9      	b.n	80009d0 <Spin_Motor+0x4>

080009dc <bldc_motor_PWM_Config_Channel>:
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, speed);
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, speed);
}

void bldc_motor_PWM_Config_Channel(uint32_t pulse, uint32_t channel)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	6039      	str	r1, [r7, #0]
    bldc.sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009e6:	4b0b      	ldr	r3, [pc, #44]	; (8000a14 <bldc_motor_PWM_Config_Channel+0x38>)
 80009e8:	2260      	movs	r2, #96	; 0x60
 80009ea:	611a      	str	r2, [r3, #16]
    bldc.sConfigOC.Pulse = pulse;
 80009ec:	4a09      	ldr	r2, [pc, #36]	; (8000a14 <bldc_motor_PWM_Config_Channel+0x38>)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	6153      	str	r3, [r2, #20]
    HAL_TIM_PWM_ConfigChannel(bldc.tim_pwm, &bldc.sConfigOC, channel);
 80009f2:	4b08      	ldr	r3, [pc, #32]	; (8000a14 <bldc_motor_PWM_Config_Channel+0x38>)
 80009f4:	68db      	ldr	r3, [r3, #12]
 80009f6:	683a      	ldr	r2, [r7, #0]
 80009f8:	4907      	ldr	r1, [pc, #28]	; (8000a18 <bldc_motor_PWM_Config_Channel+0x3c>)
 80009fa:	4618      	mov	r0, r3
 80009fc:	f001 fe9c 	bl	8002738 <HAL_TIM_PWM_ConfigChannel>

    HAL_TIM_PWM_Start(bldc.tim_pwm, channel);
 8000a00:	4b04      	ldr	r3, [pc, #16]	; (8000a14 <bldc_motor_PWM_Config_Channel+0x38>)
 8000a02:	68db      	ldr	r3, [r3, #12]
 8000a04:	6839      	ldr	r1, [r7, #0]
 8000a06:	4618      	mov	r0, r3
 8000a08:	f001 fd8a 	bl	8002520 <HAL_TIM_PWM_Start>
}
 8000a0c:	bf00      	nop
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	20000160 	.word	0x20000160
 8000a18:	20000170 	.word	0x20000170

08000a1c <bldc_motor_OC_Config_Channel>:

void bldc_motor_OC_Config_Channel(uint32_t mode, uint32_t channel)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	6039      	str	r1, [r7, #0]
    bldc.sConfigOC.OCMode = mode;
 8000a26:	4a0a      	ldr	r2, [pc, #40]	; (8000a50 <bldc_motor_OC_Config_Channel+0x34>)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	6113      	str	r3, [r2, #16]
    HAL_TIM_OC_ConfigChannel(bldc.tim_pwm, &bldc.sConfigOC, channel);
 8000a2c:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <bldc_motor_OC_Config_Channel+0x34>)
 8000a2e:	68db      	ldr	r3, [r3, #12]
 8000a30:	683a      	ldr	r2, [r7, #0]
 8000a32:	4908      	ldr	r1, [pc, #32]	; (8000a54 <bldc_motor_OC_Config_Channel+0x38>)
 8000a34:	4618      	mov	r0, r3
 8000a36:	f001 fe23 	bl	8002680 <HAL_TIM_OC_ConfigChannel>

    HAL_TIM_OC_Stop(bldc.tim_pwm, channel);
 8000a3a:	4b05      	ldr	r3, [pc, #20]	; (8000a50 <bldc_motor_OC_Config_Channel+0x34>)
 8000a3c:	68db      	ldr	r3, [r3, #12]
 8000a3e:	6839      	ldr	r1, [r7, #0]
 8000a40:	4618      	mov	r0, r3
 8000a42:	f001 fd09 	bl	8002458 <HAL_TIM_OC_Stop>
}
 8000a46:	bf00      	nop
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20000160 	.word	0x20000160
 8000a54:	20000170 	.word	0x20000170

08000a58 <bldc_motor_six_step_algorithm>:

void bldc_motor_six_step_algorithm(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
    switch (bldc.step_number)
 8000a5c:	4b49      	ldr	r3, [pc, #292]	; (8000b84 <bldc_motor_six_step_algorithm+0x12c>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	3b01      	subs	r3, #1
 8000a62:	2b05      	cmp	r3, #5
 8000a64:	d868      	bhi.n	8000b38 <bldc_motor_six_step_algorithm+0xe0>
 8000a66:	a201      	add	r2, pc, #4	; (adr r2, 8000a6c <bldc_motor_six_step_algorithm+0x14>)
 8000a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a6c:	08000a85 	.word	0x08000a85
 8000a70:	08000aa3 	.word	0x08000aa3
 8000a74:	08000ac1 	.word	0x08000ac1
 8000a78:	08000adf 	.word	0x08000adf
 8000a7c:	08000afd 	.word	0x08000afd
 8000a80:	08000b1b 	.word	0x08000b1b
    {
        case 1:
            bldc_motor_PWM_Config_Channel(bldc.speed_pulse, TIM_CHANNEL_1);
 8000a84:	4b3f      	ldr	r3, [pc, #252]	; (8000b84 <bldc_motor_six_step_algorithm+0x12c>)
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	2100      	movs	r1, #0
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f7ff ffa6 	bl	80009dc <bldc_motor_PWM_Config_Channel>
            bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_ACTIVE, TIM_CHANNEL_2);
 8000a90:	2104      	movs	r1, #4
 8000a92:	2050      	movs	r0, #80	; 0x50
 8000a94:	f7ff ffc2 	bl	8000a1c <bldc_motor_OC_Config_Channel>
            bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_INACTIVE, TIM_CHANNEL_3);
 8000a98:	2108      	movs	r1, #8
 8000a9a:	2040      	movs	r0, #64	; 0x40
 8000a9c:	f7ff ffbe 	bl	8000a1c <bldc_motor_OC_Config_Channel>
            break;
 8000aa0:	e04a      	b.n	8000b38 <bldc_motor_six_step_algorithm+0xe0>
        case 2:
            bldc_motor_PWM_Config_Channel(bldc.speed_pulse, TIM_CHANNEL_1);
 8000aa2:	4b38      	ldr	r3, [pc, #224]	; (8000b84 <bldc_motor_six_step_algorithm+0x12c>)
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff ff97 	bl	80009dc <bldc_motor_PWM_Config_Channel>
            bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_INACTIVE, TIM_CHANNEL_2);
 8000aae:	2104      	movs	r1, #4
 8000ab0:	2040      	movs	r0, #64	; 0x40
 8000ab2:	f7ff ffb3 	bl	8000a1c <bldc_motor_OC_Config_Channel>
            bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_ACTIVE, TIM_CHANNEL_3);
 8000ab6:	2108      	movs	r1, #8
 8000ab8:	2050      	movs	r0, #80	; 0x50
 8000aba:	f7ff ffaf 	bl	8000a1c <bldc_motor_OC_Config_Channel>
            break;
 8000abe:	e03b      	b.n	8000b38 <bldc_motor_six_step_algorithm+0xe0>
        case 3:
            bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_INACTIVE, TIM_CHANNEL_1);
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	2040      	movs	r0, #64	; 0x40
 8000ac4:	f7ff ffaa 	bl	8000a1c <bldc_motor_OC_Config_Channel>
            bldc_motor_PWM_Config_Channel(bldc.speed_pulse, TIM_CHANNEL_2);
 8000ac8:	4b2e      	ldr	r3, [pc, #184]	; (8000b84 <bldc_motor_six_step_algorithm+0x12c>)
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	2104      	movs	r1, #4
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f7ff ff84 	bl	80009dc <bldc_motor_PWM_Config_Channel>
            bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_ACTIVE, TIM_CHANNEL_3);
 8000ad4:	2108      	movs	r1, #8
 8000ad6:	2050      	movs	r0, #80	; 0x50
 8000ad8:	f7ff ffa0 	bl	8000a1c <bldc_motor_OC_Config_Channel>
            break;
 8000adc:	e02c      	b.n	8000b38 <bldc_motor_six_step_algorithm+0xe0>
        case 4:
            bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_ACTIVE, TIM_CHANNEL_1);
 8000ade:	2100      	movs	r1, #0
 8000ae0:	2050      	movs	r0, #80	; 0x50
 8000ae2:	f7ff ff9b 	bl	8000a1c <bldc_motor_OC_Config_Channel>
            bldc_motor_PWM_Config_Channel(bldc.speed_pulse, TIM_CHANNEL_2);
 8000ae6:	4b27      	ldr	r3, [pc, #156]	; (8000b84 <bldc_motor_six_step_algorithm+0x12c>)
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	2104      	movs	r1, #4
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff ff75 	bl	80009dc <bldc_motor_PWM_Config_Channel>
            bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_INACTIVE, TIM_CHANNEL_3);
 8000af2:	2108      	movs	r1, #8
 8000af4:	2040      	movs	r0, #64	; 0x40
 8000af6:	f7ff ff91 	bl	8000a1c <bldc_motor_OC_Config_Channel>
            break;
 8000afa:	e01d      	b.n	8000b38 <bldc_motor_six_step_algorithm+0xe0>
        case 5:
            bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_ACTIVE, TIM_CHANNEL_1);
 8000afc:	2100      	movs	r1, #0
 8000afe:	2050      	movs	r0, #80	; 0x50
 8000b00:	f7ff ff8c 	bl	8000a1c <bldc_motor_OC_Config_Channel>
            bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_INACTIVE, TIM_CHANNEL_2);
 8000b04:	2104      	movs	r1, #4
 8000b06:	2040      	movs	r0, #64	; 0x40
 8000b08:	f7ff ff88 	bl	8000a1c <bldc_motor_OC_Config_Channel>
            bldc_motor_PWM_Config_Channel(bldc.speed_pulse, TIM_CHANNEL_3);
 8000b0c:	4b1d      	ldr	r3, [pc, #116]	; (8000b84 <bldc_motor_six_step_algorithm+0x12c>)
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	2108      	movs	r1, #8
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff ff62 	bl	80009dc <bldc_motor_PWM_Config_Channel>
            break;
 8000b18:	e00e      	b.n	8000b38 <bldc_motor_six_step_algorithm+0xe0>
        case 6:
            bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_INACTIVE, TIM_CHANNEL_1);
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	2040      	movs	r0, #64	; 0x40
 8000b1e:	f7ff ff7d 	bl	8000a1c <bldc_motor_OC_Config_Channel>
            bldc_motor_OC_Config_Channel(TIM_OCMODE_FORCED_ACTIVE, TIM_CHANNEL_2);
 8000b22:	2104      	movs	r1, #4
 8000b24:	2050      	movs	r0, #80	; 0x50
 8000b26:	f7ff ff79 	bl	8000a1c <bldc_motor_OC_Config_Channel>
            bldc_motor_PWM_Config_Channel(bldc.speed_pulse, TIM_CHANNEL_3);
 8000b2a:	4b16      	ldr	r3, [pc, #88]	; (8000b84 <bldc_motor_six_step_algorithm+0x12c>)
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	2108      	movs	r1, #8
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff ff53 	bl	80009dc <bldc_motor_PWM_Config_Channel>
            break;
 8000b36:	bf00      	nop
    }

    if (bldc.dir == 1)  // CW direction
 8000b38:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <bldc_motor_six_step_algorithm+0x12c>)
 8000b3a:	689b      	ldr	r3, [r3, #8]
 8000b3c:	2b01      	cmp	r3, #1
 8000b3e:	d10d      	bne.n	8000b5c <bldc_motor_six_step_algorithm+0x104>
    {
        bldc.step_number++;
 8000b40:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <bldc_motor_six_step_algorithm+0x12c>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	3301      	adds	r3, #1
 8000b46:	b2da      	uxtb	r2, r3
 8000b48:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <bldc_motor_six_step_algorithm+0x12c>)
 8000b4a:	701a      	strb	r2, [r3, #0]
        if (bldc.step_number > 6)
 8000b4c:	4b0d      	ldr	r3, [pc, #52]	; (8000b84 <bldc_motor_six_step_algorithm+0x12c>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	2b06      	cmp	r3, #6
 8000b52:	d914      	bls.n	8000b7e <bldc_motor_six_step_algorithm+0x126>
            bldc.step_number = 1;
 8000b54:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <bldc_motor_six_step_algorithm+0x12c>)
 8000b56:	2201      	movs	r2, #1
 8000b58:	701a      	strb	r2, [r3, #0]
    {
        bldc.step_number--;
        if (bldc.step_number < 1)
            bldc.step_number = 6;
    }
}
 8000b5a:	e010      	b.n	8000b7e <bldc_motor_six_step_algorithm+0x126>
    else if (bldc.dir == 0)  // CCW direction
 8000b5c:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <bldc_motor_six_step_algorithm+0x12c>)
 8000b5e:	689b      	ldr	r3, [r3, #8]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d10c      	bne.n	8000b7e <bldc_motor_six_step_algorithm+0x126>
        bldc.step_number--;
 8000b64:	4b07      	ldr	r3, [pc, #28]	; (8000b84 <bldc_motor_six_step_algorithm+0x12c>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	3b01      	subs	r3, #1
 8000b6a:	b2da      	uxtb	r2, r3
 8000b6c:	4b05      	ldr	r3, [pc, #20]	; (8000b84 <bldc_motor_six_step_algorithm+0x12c>)
 8000b6e:	701a      	strb	r2, [r3, #0]
        if (bldc.step_number < 1)
 8000b70:	4b04      	ldr	r3, [pc, #16]	; (8000b84 <bldc_motor_six_step_algorithm+0x12c>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d102      	bne.n	8000b7e <bldc_motor_six_step_algorithm+0x126>
            bldc.step_number = 6;
 8000b78:	4b02      	ldr	r3, [pc, #8]	; (8000b84 <bldc_motor_six_step_algorithm+0x12c>)
 8000b7a:	2206      	movs	r2, #6
 8000b7c:	701a      	strb	r2, [r3, #0]
}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	20000160 	.word	0x20000160

08000b88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	607b      	str	r3, [r7, #4]
 8000b92:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <HAL_MspInit+0x4c>)
 8000b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b96:	4a0f      	ldr	r2, [pc, #60]	; (8000bd4 <HAL_MspInit+0x4c>)
 8000b98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b9e:	4b0d      	ldr	r3, [pc, #52]	; (8000bd4 <HAL_MspInit+0x4c>)
 8000ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	603b      	str	r3, [r7, #0]
 8000bae:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <HAL_MspInit+0x4c>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb2:	4a08      	ldr	r2, [pc, #32]	; (8000bd4 <HAL_MspInit+0x4c>)
 8000bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bba:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <HAL_MspInit+0x4c>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc2:	603b      	str	r3, [r7, #0]
 8000bc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	40023800 	.word	0x40023800

08000bd8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08a      	sub	sp, #40	; 0x28
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a17      	ldr	r2, [pc, #92]	; (8000c54 <HAL_ADC_MspInit+0x7c>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d127      	bne.n	8000c4a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	613b      	str	r3, [r7, #16]
 8000bfe:	4b16      	ldr	r3, [pc, #88]	; (8000c58 <HAL_ADC_MspInit+0x80>)
 8000c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c02:	4a15      	ldr	r2, [pc, #84]	; (8000c58 <HAL_ADC_MspInit+0x80>)
 8000c04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c08:	6453      	str	r3, [r2, #68]	; 0x44
 8000c0a:	4b13      	ldr	r3, [pc, #76]	; (8000c58 <HAL_ADC_MspInit+0x80>)
 8000c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c12:	613b      	str	r3, [r7, #16]
 8000c14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	4b0f      	ldr	r3, [pc, #60]	; (8000c58 <HAL_ADC_MspInit+0x80>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	4a0e      	ldr	r2, [pc, #56]	; (8000c58 <HAL_ADC_MspInit+0x80>)
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	6313      	str	r3, [r2, #48]	; 0x30
 8000c26:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <HAL_ADC_MspInit+0x80>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c32:	2301      	movs	r3, #1
 8000c34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c36:	2303      	movs	r3, #3
 8000c38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3e:	f107 0314 	add.w	r3, r7, #20
 8000c42:	4619      	mov	r1, r3
 8000c44:	4805      	ldr	r0, [pc, #20]	; (8000c5c <HAL_ADC_MspInit+0x84>)
 8000c46:	f000 fda7 	bl	8001798 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c4a:	bf00      	nop
 8000c4c:	3728      	adds	r7, #40	; 0x28
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40012000 	.word	0x40012000
 8000c58:	40023800 	.word	0x40023800
 8000c5c:	40020000 	.word	0x40020000

08000c60 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b085      	sub	sp, #20
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM1)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a0b      	ldr	r2, [pc, #44]	; (8000c9c <HAL_TIM_OC_MspInit+0x3c>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d10d      	bne.n	8000c8e <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	4b0a      	ldr	r3, [pc, #40]	; (8000ca0 <HAL_TIM_OC_MspInit+0x40>)
 8000c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7a:	4a09      	ldr	r2, [pc, #36]	; (8000ca0 <HAL_TIM_OC_MspInit+0x40>)
 8000c7c:	f043 0301 	orr.w	r3, r3, #1
 8000c80:	6453      	str	r3, [r2, #68]	; 0x44
 8000c82:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <HAL_TIM_OC_MspInit+0x40>)
 8000c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c86:	f003 0301 	and.w	r3, r3, #1
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000c8e:	bf00      	nop
 8000c90:	3714      	adds	r7, #20
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	40010000 	.word	0x40010000
 8000ca0:	40023800 	.word	0x40023800

08000ca4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b088      	sub	sp, #32
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cac:	f107 030c 	add.w	r3, r7, #12
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
 8000cba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a12      	ldr	r2, [pc, #72]	; (8000d0c <HAL_TIM_MspPostInit+0x68>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d11e      	bne.n	8000d04 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60bb      	str	r3, [r7, #8]
 8000cca:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <HAL_TIM_MspPostInit+0x6c>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	4a10      	ldr	r2, [pc, #64]	; (8000d10 <HAL_TIM_MspPostInit+0x6c>)
 8000cd0:	f043 0301 	orr.w	r3, r3, #1
 8000cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <HAL_TIM_MspPostInit+0x6c>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	60bb      	str	r3, [r7, #8]
 8000ce0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000ce2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000ce6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf8:	f107 030c 	add.w	r3, r7, #12
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4805      	ldr	r0, [pc, #20]	; (8000d14 <HAL_TIM_MspPostInit+0x70>)
 8000d00:	f000 fd4a 	bl	8001798 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000d04:	bf00      	nop
 8000d06:	3720      	adds	r7, #32
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	40010000 	.word	0x40010000
 8000d10:	40023800 	.word	0x40023800
 8000d14:	40020000 	.word	0x40020000

08000d18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b08a      	sub	sp, #40	; 0x28
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d20:	f107 0314 	add.w	r3, r7, #20
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]
 8000d2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a19      	ldr	r2, [pc, #100]	; (8000d9c <HAL_UART_MspInit+0x84>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d12b      	bne.n	8000d92 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	613b      	str	r3, [r7, #16]
 8000d3e:	4b18      	ldr	r3, [pc, #96]	; (8000da0 <HAL_UART_MspInit+0x88>)
 8000d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d42:	4a17      	ldr	r2, [pc, #92]	; (8000da0 <HAL_UART_MspInit+0x88>)
 8000d44:	f043 0320 	orr.w	r3, r3, #32
 8000d48:	6453      	str	r3, [r2, #68]	; 0x44
 8000d4a:	4b15      	ldr	r3, [pc, #84]	; (8000da0 <HAL_UART_MspInit+0x88>)
 8000d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4e:	f003 0320 	and.w	r3, r3, #32
 8000d52:	613b      	str	r3, [r7, #16]
 8000d54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	60fb      	str	r3, [r7, #12]
 8000d5a:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <HAL_UART_MspInit+0x88>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	4a10      	ldr	r2, [pc, #64]	; (8000da0 <HAL_UART_MspInit+0x88>)
 8000d60:	f043 0304 	orr.w	r3, r3, #4
 8000d64:	6313      	str	r3, [r2, #48]	; 0x30
 8000d66:	4b0e      	ldr	r3, [pc, #56]	; (8000da0 <HAL_UART_MspInit+0x88>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	f003 0304 	and.w	r3, r3, #4
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d72:	23c0      	movs	r3, #192	; 0xc0
 8000d74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d76:	2302      	movs	r3, #2
 8000d78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000d82:	2308      	movs	r3, #8
 8000d84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d86:	f107 0314 	add.w	r3, r7, #20
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4805      	ldr	r0, [pc, #20]	; (8000da4 <HAL_UART_MspInit+0x8c>)
 8000d8e:	f000 fd03 	bl	8001798 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000d92:	bf00      	nop
 8000d94:	3728      	adds	r7, #40	; 0x28
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40011400 	.word	0x40011400
 8000da0:	40023800 	.word	0x40023800
 8000da4:	40020800 	.word	0x40020800

08000da8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dac:	e7fe      	b.n	8000dac <NMI_Handler+0x4>

08000dae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dae:	b480      	push	{r7}
 8000db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000db2:	e7fe      	b.n	8000db2 <HardFault_Handler+0x4>

08000db4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db8:	e7fe      	b.n	8000db8 <MemManage_Handler+0x4>

08000dba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dbe:	e7fe      	b.n	8000dbe <BusFault_Handler+0x4>

08000dc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dc4:	e7fe      	b.n	8000dc4 <UsageFault_Handler+0x4>

08000dc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr

08000de2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000df4:	f000 f934 	bl	8001060 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000df8:	bf00      	nop
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <_read>:
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b086      	sub	sp, #24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	607a      	str	r2, [r7, #4]
 8000e08:	2300      	movs	r3, #0
 8000e0a:	617b      	str	r3, [r7, #20]
 8000e0c:	e00a      	b.n	8000e24 <_read+0x28>
 8000e0e:	f3af 8000 	nop.w
 8000e12:	4601      	mov	r1, r0
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	1c5a      	adds	r2, r3, #1
 8000e18:	60ba      	str	r2, [r7, #8]
 8000e1a:	b2ca      	uxtb	r2, r1
 8000e1c:	701a      	strb	r2, [r3, #0]
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	3301      	adds	r3, #1
 8000e22:	617b      	str	r3, [r7, #20]
 8000e24:	697a      	ldr	r2, [r7, #20]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	dbf0      	blt.n	8000e0e <_read+0x12>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3718      	adds	r7, #24
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <_write>:
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b086      	sub	sp, #24
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	60f8      	str	r0, [r7, #12]
 8000e3e:	60b9      	str	r1, [r7, #8]
 8000e40:	607a      	str	r2, [r7, #4]
 8000e42:	2300      	movs	r3, #0
 8000e44:	617b      	str	r3, [r7, #20]
 8000e46:	e009      	b.n	8000e5c <_write+0x26>
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	1c5a      	adds	r2, r3, #1
 8000e4c:	60ba      	str	r2, [r7, #8]
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff fd61 	bl	8000918 <__io_putchar>
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	3301      	adds	r3, #1
 8000e5a:	617b      	str	r3, [r7, #20]
 8000e5c:	697a      	ldr	r2, [r7, #20]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	dbf1      	blt.n	8000e48 <_write+0x12>
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	4618      	mov	r0, r3
 8000e68:	3718      	adds	r7, #24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <_close>:
 8000e6e:	b480      	push	{r7}
 8000e70:	b083      	sub	sp, #12
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
 8000e76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr

08000e86 <_fstat>:
 8000e86:	b480      	push	{r7}
 8000e88:	b083      	sub	sp, #12
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
 8000e8e:	6039      	str	r1, [r7, #0]
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e96:	605a      	str	r2, [r3, #4]
 8000e98:	2300      	movs	r3, #0
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr

08000ea6 <_isatty>:
 8000ea6:	b480      	push	{r7}
 8000ea8:	b083      	sub	sp, #12
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
 8000eae:	2301      	movs	r3, #1
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <_lseek>:
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
 8000ec8:	2300      	movs	r3, #0
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3714      	adds	r7, #20
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
	...

08000ed8 <_sbrk>:
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b086      	sub	sp, #24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	4a14      	ldr	r2, [pc, #80]	; (8000f34 <_sbrk+0x5c>)
 8000ee2:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <_sbrk+0x60>)
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	617b      	str	r3, [r7, #20]
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	613b      	str	r3, [r7, #16]
 8000eec:	4b13      	ldr	r3, [pc, #76]	; (8000f3c <_sbrk+0x64>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d102      	bne.n	8000efa <_sbrk+0x22>
 8000ef4:	4b11      	ldr	r3, [pc, #68]	; (8000f3c <_sbrk+0x64>)
 8000ef6:	4a12      	ldr	r2, [pc, #72]	; (8000f40 <_sbrk+0x68>)
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	4b10      	ldr	r3, [pc, #64]	; (8000f3c <_sbrk+0x64>)
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4413      	add	r3, r2
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d207      	bcs.n	8000f18 <_sbrk+0x40>
 8000f08:	f002 fb8c 	bl	8003624 <__errno>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	220c      	movs	r2, #12
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f16:	e009      	b.n	8000f2c <_sbrk+0x54>
 8000f18:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <_sbrk+0x64>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	4b07      	ldr	r3, [pc, #28]	; (8000f3c <_sbrk+0x64>)
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4413      	add	r3, r2
 8000f26:	4a05      	ldr	r2, [pc, #20]	; (8000f3c <_sbrk+0x64>)
 8000f28:	6013      	str	r3, [r2, #0]
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3718      	adds	r7, #24
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	20020000 	.word	0x20020000
 8000f38:	00000400 	.word	0x00000400
 8000f3c:	2000018c 	.word	0x2000018c
 8000f40:	200001a8 	.word	0x200001a8

08000f44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <SystemInit+0x20>)
 8000f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f4e:	4a05      	ldr	r2, [pc, #20]	; (8000f64 <SystemInit+0x20>)
 8000f50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <Reset_Handler>:
 8000f68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fa0 <LoopFillZerobss+0x12>
 8000f6c:	480d      	ldr	r0, [pc, #52]	; (8000fa4 <LoopFillZerobss+0x16>)
 8000f6e:	490e      	ldr	r1, [pc, #56]	; (8000fa8 <LoopFillZerobss+0x1a>)
 8000f70:	4a0e      	ldr	r2, [pc, #56]	; (8000fac <LoopFillZerobss+0x1e>)
 8000f72:	2300      	movs	r3, #0
 8000f74:	e002      	b.n	8000f7c <LoopCopyDataInit>

08000f76 <CopyDataInit>:
 8000f76:	58d4      	ldr	r4, [r2, r3]
 8000f78:	50c4      	str	r4, [r0, r3]
 8000f7a:	3304      	adds	r3, #4

08000f7c <LoopCopyDataInit>:
 8000f7c:	18c4      	adds	r4, r0, r3
 8000f7e:	428c      	cmp	r4, r1
 8000f80:	d3f9      	bcc.n	8000f76 <CopyDataInit>
 8000f82:	4a0b      	ldr	r2, [pc, #44]	; (8000fb0 <LoopFillZerobss+0x22>)
 8000f84:	4c0b      	ldr	r4, [pc, #44]	; (8000fb4 <LoopFillZerobss+0x26>)
 8000f86:	2300      	movs	r3, #0
 8000f88:	e001      	b.n	8000f8e <LoopFillZerobss>

08000f8a <FillZerobss>:
 8000f8a:	6013      	str	r3, [r2, #0]
 8000f8c:	3204      	adds	r2, #4

08000f8e <LoopFillZerobss>:
 8000f8e:	42a2      	cmp	r2, r4
 8000f90:	d3fb      	bcc.n	8000f8a <FillZerobss>
 8000f92:	f7ff ffd7 	bl	8000f44 <SystemInit>
 8000f96:	f002 fb4b 	bl	8003630 <__libc_init_array>
 8000f9a:	f7ff fa9f 	bl	80004dc <main>
 8000f9e:	4770      	bx	lr
 8000fa0:	20020000 	.word	0x20020000
 8000fa4:	20000000 	.word	0x20000000
 8000fa8:	20000070 	.word	0x20000070
 8000fac:	0800413c 	.word	0x0800413c
 8000fb0:	20000070 	.word	0x20000070
 8000fb4:	200001a4 	.word	0x200001a4

08000fb8 <ADC_IRQHandler>:
 8000fb8:	e7fe      	b.n	8000fb8 <ADC_IRQHandler>
	...

08000fbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fc0:	4b0e      	ldr	r3, [pc, #56]	; (8000ffc <HAL_Init+0x40>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a0d      	ldr	r2, [pc, #52]	; (8000ffc <HAL_Init+0x40>)
 8000fc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fcc:	4b0b      	ldr	r3, [pc, #44]	; (8000ffc <HAL_Init+0x40>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a0a      	ldr	r2, [pc, #40]	; (8000ffc <HAL_Init+0x40>)
 8000fd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fd8:	4b08      	ldr	r3, [pc, #32]	; (8000ffc <HAL_Init+0x40>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a07      	ldr	r2, [pc, #28]	; (8000ffc <HAL_Init+0x40>)
 8000fde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fe2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fe4:	2003      	movs	r0, #3
 8000fe6:	f000 fba3 	bl	8001730 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fea:	200f      	movs	r0, #15
 8000fec:	f000 f808 	bl	8001000 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ff0:	f7ff fdca 	bl	8000b88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ff4:	2300      	movs	r3, #0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40023c00 	.word	0x40023c00

08001000 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001008:	4b12      	ldr	r3, [pc, #72]	; (8001054 <HAL_InitTick+0x54>)
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	4b12      	ldr	r3, [pc, #72]	; (8001058 <HAL_InitTick+0x58>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	4619      	mov	r1, r3
 8001012:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001016:	fbb3 f3f1 	udiv	r3, r3, r1
 800101a:	fbb2 f3f3 	udiv	r3, r2, r3
 800101e:	4618      	mov	r0, r3
 8001020:	f000 fbad 	bl	800177e <HAL_SYSTICK_Config>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	e00e      	b.n	800104c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2b0f      	cmp	r3, #15
 8001032:	d80a      	bhi.n	800104a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001034:	2200      	movs	r2, #0
 8001036:	6879      	ldr	r1, [r7, #4]
 8001038:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800103c:	f000 fb83 	bl	8001746 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001040:	4a06      	ldr	r2, [pc, #24]	; (800105c <HAL_InitTick+0x5c>)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001046:	2300      	movs	r3, #0
 8001048:	e000      	b.n	800104c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
}
 800104c:	4618      	mov	r0, r3
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20000000 	.word	0x20000000
 8001058:	20000008 	.word	0x20000008
 800105c:	20000004 	.word	0x20000004

08001060 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001064:	4b06      	ldr	r3, [pc, #24]	; (8001080 <HAL_IncTick+0x20>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	461a      	mov	r2, r3
 800106a:	4b06      	ldr	r3, [pc, #24]	; (8001084 <HAL_IncTick+0x24>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4413      	add	r3, r2
 8001070:	4a04      	ldr	r2, [pc, #16]	; (8001084 <HAL_IncTick+0x24>)
 8001072:	6013      	str	r3, [r2, #0]
}
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	20000008 	.word	0x20000008
 8001084:	20000190 	.word	0x20000190

08001088 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  return uwTick;
 800108c:	4b03      	ldr	r3, [pc, #12]	; (800109c <HAL_GetTick+0x14>)
 800108e:	681b      	ldr	r3, [r3, #0]
}
 8001090:	4618      	mov	r0, r3
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	20000190 	.word	0x20000190

080010a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010a8:	f7ff ffee 	bl	8001088 <HAL_GetTick>
 80010ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010b8:	d005      	beq.n	80010c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ba:	4b0a      	ldr	r3, [pc, #40]	; (80010e4 <HAL_Delay+0x44>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	461a      	mov	r2, r3
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	4413      	add	r3, r2
 80010c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010c6:	bf00      	nop
 80010c8:	f7ff ffde 	bl	8001088 <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	68fa      	ldr	r2, [r7, #12]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d8f7      	bhi.n	80010c8 <HAL_Delay+0x28>
  {
  }
}
 80010d8:	bf00      	nop
 80010da:	bf00      	nop
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20000008 	.word	0x20000008

080010e8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010f0:	2300      	movs	r3, #0
 80010f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d101      	bne.n	80010fe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e033      	b.n	8001166 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001102:	2b00      	cmp	r3, #0
 8001104:	d109      	bne.n	800111a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f7ff fd66 	bl	8000bd8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2200      	movs	r2, #0
 8001110:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2200      	movs	r2, #0
 8001116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111e:	f003 0310 	and.w	r3, r3, #16
 8001122:	2b00      	cmp	r3, #0
 8001124:	d118      	bne.n	8001158 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800112e:	f023 0302 	bic.w	r3, r3, #2
 8001132:	f043 0202 	orr.w	r2, r3, #2
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f000 f94a 	bl	80013d4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2200      	movs	r2, #0
 8001144:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114a:	f023 0303 	bic.w	r3, r3, #3
 800114e:	f043 0201 	orr.w	r2, r3, #1
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	641a      	str	r2, [r3, #64]	; 0x40
 8001156:	e001      	b.n	800115c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001158:	2301      	movs	r3, #1
 800115a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2200      	movs	r2, #0
 8001160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001164:	7bfb      	ldrb	r3, [r7, #15]
}
 8001166:	4618      	mov	r0, r3
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
	...

08001170 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800117a:	2300      	movs	r3, #0
 800117c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001184:	2b01      	cmp	r3, #1
 8001186:	d101      	bne.n	800118c <HAL_ADC_ConfigChannel+0x1c>
 8001188:	2302      	movs	r3, #2
 800118a:	e113      	b.n	80013b4 <HAL_ADC_ConfigChannel+0x244>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2201      	movs	r2, #1
 8001190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2b09      	cmp	r3, #9
 800119a:	d925      	bls.n	80011e8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	68d9      	ldr	r1, [r3, #12]
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	461a      	mov	r2, r3
 80011aa:	4613      	mov	r3, r2
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	4413      	add	r3, r2
 80011b0:	3b1e      	subs	r3, #30
 80011b2:	2207      	movs	r2, #7
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	43da      	mvns	r2, r3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	400a      	ands	r2, r1
 80011c0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	68d9      	ldr	r1, [r3, #12]
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	689a      	ldr	r2, [r3, #8]
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	4618      	mov	r0, r3
 80011d4:	4603      	mov	r3, r0
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	4403      	add	r3, r0
 80011da:	3b1e      	subs	r3, #30
 80011dc:	409a      	lsls	r2, r3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	430a      	orrs	r2, r1
 80011e4:	60da      	str	r2, [r3, #12]
 80011e6:	e022      	b.n	800122e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	6919      	ldr	r1, [r3, #16]
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	461a      	mov	r2, r3
 80011f6:	4613      	mov	r3, r2
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	4413      	add	r3, r2
 80011fc:	2207      	movs	r2, #7
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43da      	mvns	r2, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	400a      	ands	r2, r1
 800120a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	6919      	ldr	r1, [r3, #16]
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	689a      	ldr	r2, [r3, #8]
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	b29b      	uxth	r3, r3
 800121c:	4618      	mov	r0, r3
 800121e:	4603      	mov	r3, r0
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	4403      	add	r3, r0
 8001224:	409a      	lsls	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	430a      	orrs	r2, r1
 800122c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	2b06      	cmp	r3, #6
 8001234:	d824      	bhi.n	8001280 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685a      	ldr	r2, [r3, #4]
 8001240:	4613      	mov	r3, r2
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	4413      	add	r3, r2
 8001246:	3b05      	subs	r3, #5
 8001248:	221f      	movs	r2, #31
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	43da      	mvns	r2, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	400a      	ands	r2, r1
 8001256:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	b29b      	uxth	r3, r3
 8001264:	4618      	mov	r0, r3
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685a      	ldr	r2, [r3, #4]
 800126a:	4613      	mov	r3, r2
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	4413      	add	r3, r2
 8001270:	3b05      	subs	r3, #5
 8001272:	fa00 f203 	lsl.w	r2, r0, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	430a      	orrs	r2, r1
 800127c:	635a      	str	r2, [r3, #52]	; 0x34
 800127e:	e04c      	b.n	800131a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	2b0c      	cmp	r3, #12
 8001286:	d824      	bhi.n	80012d2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685a      	ldr	r2, [r3, #4]
 8001292:	4613      	mov	r3, r2
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	4413      	add	r3, r2
 8001298:	3b23      	subs	r3, #35	; 0x23
 800129a:	221f      	movs	r2, #31
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	43da      	mvns	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	400a      	ands	r2, r1
 80012a8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	4618      	mov	r0, r3
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685a      	ldr	r2, [r3, #4]
 80012bc:	4613      	mov	r3, r2
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	4413      	add	r3, r2
 80012c2:	3b23      	subs	r3, #35	; 0x23
 80012c4:	fa00 f203 	lsl.w	r2, r0, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	430a      	orrs	r2, r1
 80012ce:	631a      	str	r2, [r3, #48]	; 0x30
 80012d0:	e023      	b.n	800131a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685a      	ldr	r2, [r3, #4]
 80012dc:	4613      	mov	r3, r2
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	4413      	add	r3, r2
 80012e2:	3b41      	subs	r3, #65	; 0x41
 80012e4:	221f      	movs	r2, #31
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	43da      	mvns	r2, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	400a      	ands	r2, r1
 80012f2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	b29b      	uxth	r3, r3
 8001300:	4618      	mov	r0, r3
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685a      	ldr	r2, [r3, #4]
 8001306:	4613      	mov	r3, r2
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	4413      	add	r3, r2
 800130c:	3b41      	subs	r3, #65	; 0x41
 800130e:	fa00 f203 	lsl.w	r2, r0, r3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	430a      	orrs	r2, r1
 8001318:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800131a:	4b29      	ldr	r3, [pc, #164]	; (80013c0 <HAL_ADC_ConfigChannel+0x250>)
 800131c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a28      	ldr	r2, [pc, #160]	; (80013c4 <HAL_ADC_ConfigChannel+0x254>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d10f      	bne.n	8001348 <HAL_ADC_ConfigChannel+0x1d8>
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2b12      	cmp	r3, #18
 800132e:	d10b      	bne.n	8001348 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a1d      	ldr	r2, [pc, #116]	; (80013c4 <HAL_ADC_ConfigChannel+0x254>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d12b      	bne.n	80013aa <HAL_ADC_ConfigChannel+0x23a>
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a1c      	ldr	r2, [pc, #112]	; (80013c8 <HAL_ADC_ConfigChannel+0x258>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d003      	beq.n	8001364 <HAL_ADC_ConfigChannel+0x1f4>
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b11      	cmp	r3, #17
 8001362:	d122      	bne.n	80013aa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a11      	ldr	r2, [pc, #68]	; (80013c8 <HAL_ADC_ConfigChannel+0x258>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d111      	bne.n	80013aa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001386:	4b11      	ldr	r3, [pc, #68]	; (80013cc <HAL_ADC_ConfigChannel+0x25c>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a11      	ldr	r2, [pc, #68]	; (80013d0 <HAL_ADC_ConfigChannel+0x260>)
 800138c:	fba2 2303 	umull	r2, r3, r2, r3
 8001390:	0c9a      	lsrs	r2, r3, #18
 8001392:	4613      	mov	r3, r2
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	4413      	add	r3, r2
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800139c:	e002      	b.n	80013a4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	3b01      	subs	r3, #1
 80013a2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d1f9      	bne.n	800139e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2200      	movs	r2, #0
 80013ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80013b2:	2300      	movs	r3, #0
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3714      	adds	r7, #20
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	40012300 	.word	0x40012300
 80013c4:	40012000 	.word	0x40012000
 80013c8:	10000012 	.word	0x10000012
 80013cc:	20000000 	.word	0x20000000
 80013d0:	431bde83 	.word	0x431bde83

080013d4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013dc:	4b79      	ldr	r3, [pc, #484]	; (80015c4 <ADC_Init+0x1f0>)
 80013de:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	685a      	ldr	r2, [r3, #4]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	431a      	orrs	r2, r3
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	685a      	ldr	r2, [r3, #4]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001408:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	6859      	ldr	r1, [r3, #4]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	691b      	ldr	r3, [r3, #16]
 8001414:	021a      	lsls	r2, r3, #8
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	430a      	orrs	r2, r1
 800141c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	685a      	ldr	r2, [r3, #4]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800142c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	6859      	ldr	r1, [r3, #4]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	689a      	ldr	r2, [r3, #8]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	430a      	orrs	r2, r1
 800143e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	689a      	ldr	r2, [r3, #8]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800144e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	6899      	ldr	r1, [r3, #8]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	68da      	ldr	r2, [r3, #12]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	430a      	orrs	r2, r1
 8001460:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001466:	4a58      	ldr	r2, [pc, #352]	; (80015c8 <ADC_Init+0x1f4>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d022      	beq.n	80014b2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	689a      	ldr	r2, [r3, #8]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800147a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	6899      	ldr	r1, [r3, #8]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	430a      	orrs	r2, r1
 800148c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	689a      	ldr	r2, [r3, #8]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800149c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	6899      	ldr	r1, [r3, #8]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	430a      	orrs	r2, r1
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	e00f      	b.n	80014d2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	689a      	ldr	r2, [r3, #8]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	689a      	ldr	r2, [r3, #8]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80014d0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	689a      	ldr	r2, [r3, #8]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f022 0202 	bic.w	r2, r2, #2
 80014e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	6899      	ldr	r1, [r3, #8]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	7e1b      	ldrb	r3, [r3, #24]
 80014ec:	005a      	lsls	r2, r3, #1
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	430a      	orrs	r2, r1
 80014f4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d01b      	beq.n	8001538 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	685a      	ldr	r2, [r3, #4]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800150e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	685a      	ldr	r2, [r3, #4]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800151e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	6859      	ldr	r1, [r3, #4]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152a:	3b01      	subs	r3, #1
 800152c:	035a      	lsls	r2, r3, #13
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	430a      	orrs	r2, r1
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	e007      	b.n	8001548 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	685a      	ldr	r2, [r3, #4]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001546:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001556:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	69db      	ldr	r3, [r3, #28]
 8001562:	3b01      	subs	r3, #1
 8001564:	051a      	lsls	r2, r3, #20
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	430a      	orrs	r2, r1
 800156c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	689a      	ldr	r2, [r3, #8]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800157c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	6899      	ldr	r1, [r3, #8]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800158a:	025a      	lsls	r2, r3, #9
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	430a      	orrs	r2, r1
 8001592:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	689a      	ldr	r2, [r3, #8]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	6899      	ldr	r1, [r3, #8]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	695b      	ldr	r3, [r3, #20]
 80015ae:	029a      	lsls	r2, r3, #10
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	430a      	orrs	r2, r1
 80015b6:	609a      	str	r2, [r3, #8]
}
 80015b8:	bf00      	nop
 80015ba:	3714      	adds	r7, #20
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	40012300 	.word	0x40012300
 80015c8:	0f000001 	.word	0x0f000001

080015cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f003 0307 	and.w	r3, r3, #7
 80015da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015dc:	4b0c      	ldr	r3, [pc, #48]	; (8001610 <__NVIC_SetPriorityGrouping+0x44>)
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015e2:	68ba      	ldr	r2, [r7, #8]
 80015e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015e8:	4013      	ands	r3, r2
 80015ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015fe:	4a04      	ldr	r2, [pc, #16]	; (8001610 <__NVIC_SetPriorityGrouping+0x44>)
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	60d3      	str	r3, [r2, #12]
}
 8001604:	bf00      	nop
 8001606:	3714      	adds	r7, #20
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001618:	4b04      	ldr	r3, [pc, #16]	; (800162c <__NVIC_GetPriorityGrouping+0x18>)
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	0a1b      	lsrs	r3, r3, #8
 800161e:	f003 0307 	and.w	r3, r3, #7
}
 8001622:	4618      	mov	r0, r3
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	e000ed00 	.word	0xe000ed00

08001630 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	6039      	str	r1, [r7, #0]
 800163a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800163c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001640:	2b00      	cmp	r3, #0
 8001642:	db0a      	blt.n	800165a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	b2da      	uxtb	r2, r3
 8001648:	490c      	ldr	r1, [pc, #48]	; (800167c <__NVIC_SetPriority+0x4c>)
 800164a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164e:	0112      	lsls	r2, r2, #4
 8001650:	b2d2      	uxtb	r2, r2
 8001652:	440b      	add	r3, r1
 8001654:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001658:	e00a      	b.n	8001670 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	b2da      	uxtb	r2, r3
 800165e:	4908      	ldr	r1, [pc, #32]	; (8001680 <__NVIC_SetPriority+0x50>)
 8001660:	79fb      	ldrb	r3, [r7, #7]
 8001662:	f003 030f 	and.w	r3, r3, #15
 8001666:	3b04      	subs	r3, #4
 8001668:	0112      	lsls	r2, r2, #4
 800166a:	b2d2      	uxtb	r2, r2
 800166c:	440b      	add	r3, r1
 800166e:	761a      	strb	r2, [r3, #24]
}
 8001670:	bf00      	nop
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	e000e100 	.word	0xe000e100
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001684:	b480      	push	{r7}
 8001686:	b089      	sub	sp, #36	; 0x24
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f003 0307 	and.w	r3, r3, #7
 8001696:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	f1c3 0307 	rsb	r3, r3, #7
 800169e:	2b04      	cmp	r3, #4
 80016a0:	bf28      	it	cs
 80016a2:	2304      	movcs	r3, #4
 80016a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	3304      	adds	r3, #4
 80016aa:	2b06      	cmp	r3, #6
 80016ac:	d902      	bls.n	80016b4 <NVIC_EncodePriority+0x30>
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	3b03      	subs	r3, #3
 80016b2:	e000      	b.n	80016b6 <NVIC_EncodePriority+0x32>
 80016b4:	2300      	movs	r3, #0
 80016b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	43da      	mvns	r2, r3
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	401a      	ands	r2, r3
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	fa01 f303 	lsl.w	r3, r1, r3
 80016d6:	43d9      	mvns	r1, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016dc:	4313      	orrs	r3, r2
         );
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3724      	adds	r7, #36	; 0x24
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
	...

080016ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	3b01      	subs	r3, #1
 80016f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016fc:	d301      	bcc.n	8001702 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016fe:	2301      	movs	r3, #1
 8001700:	e00f      	b.n	8001722 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001702:	4a0a      	ldr	r2, [pc, #40]	; (800172c <SysTick_Config+0x40>)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3b01      	subs	r3, #1
 8001708:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800170a:	210f      	movs	r1, #15
 800170c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001710:	f7ff ff8e 	bl	8001630 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001714:	4b05      	ldr	r3, [pc, #20]	; (800172c <SysTick_Config+0x40>)
 8001716:	2200      	movs	r2, #0
 8001718:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800171a:	4b04      	ldr	r3, [pc, #16]	; (800172c <SysTick_Config+0x40>)
 800171c:	2207      	movs	r2, #7
 800171e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	e000e010 	.word	0xe000e010

08001730 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f7ff ff47 	bl	80015cc <__NVIC_SetPriorityGrouping>
}
 800173e:	bf00      	nop
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001746:	b580      	push	{r7, lr}
 8001748:	b086      	sub	sp, #24
 800174a:	af00      	add	r7, sp, #0
 800174c:	4603      	mov	r3, r0
 800174e:	60b9      	str	r1, [r7, #8]
 8001750:	607a      	str	r2, [r7, #4]
 8001752:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001754:	2300      	movs	r3, #0
 8001756:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001758:	f7ff ff5c 	bl	8001614 <__NVIC_GetPriorityGrouping>
 800175c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	68b9      	ldr	r1, [r7, #8]
 8001762:	6978      	ldr	r0, [r7, #20]
 8001764:	f7ff ff8e 	bl	8001684 <NVIC_EncodePriority>
 8001768:	4602      	mov	r2, r0
 800176a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800176e:	4611      	mov	r1, r2
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff ff5d 	bl	8001630 <__NVIC_SetPriority>
}
 8001776:	bf00      	nop
 8001778:	3718      	adds	r7, #24
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b082      	sub	sp, #8
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f7ff ffb0 	bl	80016ec <SysTick_Config>
 800178c:	4603      	mov	r3, r0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
	...

08001798 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001798:	b480      	push	{r7}
 800179a:	b089      	sub	sp, #36	; 0x24
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017a2:	2300      	movs	r3, #0
 80017a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017a6:	2300      	movs	r3, #0
 80017a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017aa:	2300      	movs	r3, #0
 80017ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ae:	2300      	movs	r3, #0
 80017b0:	61fb      	str	r3, [r7, #28]
 80017b2:	e159      	b.n	8001a68 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017b4:	2201      	movs	r2, #1
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	697a      	ldr	r2, [r7, #20]
 80017c4:	4013      	ands	r3, r2
 80017c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	f040 8148 	bne.w	8001a62 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f003 0303 	and.w	r3, r3, #3
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d005      	beq.n	80017ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d130      	bne.n	800184c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	2203      	movs	r2, #3
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	43db      	mvns	r3, r3
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	4013      	ands	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	68da      	ldr	r2, [r3, #12]
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	4313      	orrs	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001820:	2201      	movs	r2, #1
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	43db      	mvns	r3, r3
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	4013      	ands	r3, r2
 800182e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	091b      	lsrs	r3, r3, #4
 8001836:	f003 0201 	and.w	r2, r3, #1
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	4313      	orrs	r3, r2
 8001844:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f003 0303 	and.w	r3, r3, #3
 8001854:	2b03      	cmp	r3, #3
 8001856:	d017      	beq.n	8001888 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	2203      	movs	r2, #3
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	43db      	mvns	r3, r3
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	4013      	ands	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	689a      	ldr	r2, [r3, #8]
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	4313      	orrs	r3, r2
 8001880:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f003 0303 	and.w	r3, r3, #3
 8001890:	2b02      	cmp	r3, #2
 8001892:	d123      	bne.n	80018dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	08da      	lsrs	r2, r3, #3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	3208      	adds	r2, #8
 800189c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	f003 0307 	and.w	r3, r3, #7
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	220f      	movs	r2, #15
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	43db      	mvns	r3, r3
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	4013      	ands	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	691a      	ldr	r2, [r3, #16]
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	f003 0307 	and.w	r3, r3, #7
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	08da      	lsrs	r2, r3, #3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	3208      	adds	r2, #8
 80018d6:	69b9      	ldr	r1, [r7, #24]
 80018d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	2203      	movs	r2, #3
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	43db      	mvns	r3, r3
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	4013      	ands	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f003 0203 	and.w	r2, r3, #3
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	4313      	orrs	r3, r2
 8001908:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001918:	2b00      	cmp	r3, #0
 800191a:	f000 80a2 	beq.w	8001a62 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	60fb      	str	r3, [r7, #12]
 8001922:	4b57      	ldr	r3, [pc, #348]	; (8001a80 <HAL_GPIO_Init+0x2e8>)
 8001924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001926:	4a56      	ldr	r2, [pc, #344]	; (8001a80 <HAL_GPIO_Init+0x2e8>)
 8001928:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800192c:	6453      	str	r3, [r2, #68]	; 0x44
 800192e:	4b54      	ldr	r3, [pc, #336]	; (8001a80 <HAL_GPIO_Init+0x2e8>)
 8001930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001932:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800193a:	4a52      	ldr	r2, [pc, #328]	; (8001a84 <HAL_GPIO_Init+0x2ec>)
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	089b      	lsrs	r3, r3, #2
 8001940:	3302      	adds	r3, #2
 8001942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001946:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	f003 0303 	and.w	r3, r3, #3
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	220f      	movs	r2, #15
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	43db      	mvns	r3, r3
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	4013      	ands	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a49      	ldr	r2, [pc, #292]	; (8001a88 <HAL_GPIO_Init+0x2f0>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d019      	beq.n	800199a <HAL_GPIO_Init+0x202>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a48      	ldr	r2, [pc, #288]	; (8001a8c <HAL_GPIO_Init+0x2f4>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d013      	beq.n	8001996 <HAL_GPIO_Init+0x1fe>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a47      	ldr	r2, [pc, #284]	; (8001a90 <HAL_GPIO_Init+0x2f8>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d00d      	beq.n	8001992 <HAL_GPIO_Init+0x1fa>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a46      	ldr	r2, [pc, #280]	; (8001a94 <HAL_GPIO_Init+0x2fc>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d007      	beq.n	800198e <HAL_GPIO_Init+0x1f6>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a45      	ldr	r2, [pc, #276]	; (8001a98 <HAL_GPIO_Init+0x300>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d101      	bne.n	800198a <HAL_GPIO_Init+0x1f2>
 8001986:	2304      	movs	r3, #4
 8001988:	e008      	b.n	800199c <HAL_GPIO_Init+0x204>
 800198a:	2307      	movs	r3, #7
 800198c:	e006      	b.n	800199c <HAL_GPIO_Init+0x204>
 800198e:	2303      	movs	r3, #3
 8001990:	e004      	b.n	800199c <HAL_GPIO_Init+0x204>
 8001992:	2302      	movs	r3, #2
 8001994:	e002      	b.n	800199c <HAL_GPIO_Init+0x204>
 8001996:	2301      	movs	r3, #1
 8001998:	e000      	b.n	800199c <HAL_GPIO_Init+0x204>
 800199a:	2300      	movs	r3, #0
 800199c:	69fa      	ldr	r2, [r7, #28]
 800199e:	f002 0203 	and.w	r2, r2, #3
 80019a2:	0092      	lsls	r2, r2, #2
 80019a4:	4093      	lsls	r3, r2
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019ac:	4935      	ldr	r1, [pc, #212]	; (8001a84 <HAL_GPIO_Init+0x2ec>)
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	089b      	lsrs	r3, r3, #2
 80019b2:	3302      	adds	r3, #2
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019ba:	4b38      	ldr	r3, [pc, #224]	; (8001a9c <HAL_GPIO_Init+0x304>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	43db      	mvns	r3, r3
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	4013      	ands	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d003      	beq.n	80019de <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	4313      	orrs	r3, r2
 80019dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019de:	4a2f      	ldr	r2, [pc, #188]	; (8001a9c <HAL_GPIO_Init+0x304>)
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019e4:	4b2d      	ldr	r3, [pc, #180]	; (8001a9c <HAL_GPIO_Init+0x304>)
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	43db      	mvns	r3, r3
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	4013      	ands	r3, r2
 80019f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d003      	beq.n	8001a08 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a08:	4a24      	ldr	r2, [pc, #144]	; (8001a9c <HAL_GPIO_Init+0x304>)
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a0e:	4b23      	ldr	r3, [pc, #140]	; (8001a9c <HAL_GPIO_Init+0x304>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	43db      	mvns	r3, r3
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d003      	beq.n	8001a32 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a32:	4a1a      	ldr	r2, [pc, #104]	; (8001a9c <HAL_GPIO_Init+0x304>)
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a38:	4b18      	ldr	r3, [pc, #96]	; (8001a9c <HAL_GPIO_Init+0x304>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	43db      	mvns	r3, r3
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	4013      	ands	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d003      	beq.n	8001a5c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a5c:	4a0f      	ldr	r2, [pc, #60]	; (8001a9c <HAL_GPIO_Init+0x304>)
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	3301      	adds	r3, #1
 8001a66:	61fb      	str	r3, [r7, #28]
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	2b0f      	cmp	r3, #15
 8001a6c:	f67f aea2 	bls.w	80017b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a70:	bf00      	nop
 8001a72:	bf00      	nop
 8001a74:	3724      	adds	r7, #36	; 0x24
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	40023800 	.word	0x40023800
 8001a84:	40013800 	.word	0x40013800
 8001a88:	40020000 	.word	0x40020000
 8001a8c:	40020400 	.word	0x40020400
 8001a90:	40020800 	.word	0x40020800
 8001a94:	40020c00 	.word	0x40020c00
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	40013c00 	.word	0x40013c00

08001aa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	807b      	strh	r3, [r7, #2]
 8001aac:	4613      	mov	r3, r2
 8001aae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ab0:	787b      	ldrb	r3, [r7, #1]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d003      	beq.n	8001abe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ab6:	887a      	ldrh	r2, [r7, #2]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001abc:	e003      	b.n	8001ac6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001abe:	887b      	ldrh	r3, [r7, #2]
 8001ac0:	041a      	lsls	r2, r3, #16
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	619a      	str	r2, [r3, #24]
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr

08001ad2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	b085      	sub	sp, #20
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
 8001ada:	460b      	mov	r3, r1
 8001adc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	695b      	ldr	r3, [r3, #20]
 8001ae2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ae4:	887a      	ldrh	r2, [r7, #2]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	041a      	lsls	r2, r3, #16
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	43d9      	mvns	r1, r3
 8001af0:	887b      	ldrh	r3, [r7, #2]
 8001af2:	400b      	ands	r3, r1
 8001af4:	431a      	orrs	r2, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	619a      	str	r2, [r3, #24]
}
 8001afa:	bf00      	nop
 8001afc:	3714      	adds	r7, #20
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
	...

08001b08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d101      	bne.n	8001b1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e267      	b.n	8001fea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d075      	beq.n	8001c12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b26:	4b88      	ldr	r3, [pc, #544]	; (8001d48 <HAL_RCC_OscConfig+0x240>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f003 030c 	and.w	r3, r3, #12
 8001b2e:	2b04      	cmp	r3, #4
 8001b30:	d00c      	beq.n	8001b4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b32:	4b85      	ldr	r3, [pc, #532]	; (8001d48 <HAL_RCC_OscConfig+0x240>)
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b3a:	2b08      	cmp	r3, #8
 8001b3c:	d112      	bne.n	8001b64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b3e:	4b82      	ldr	r3, [pc, #520]	; (8001d48 <HAL_RCC_OscConfig+0x240>)
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b4a:	d10b      	bne.n	8001b64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b4c:	4b7e      	ldr	r3, [pc, #504]	; (8001d48 <HAL_RCC_OscConfig+0x240>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d05b      	beq.n	8001c10 <HAL_RCC_OscConfig+0x108>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d157      	bne.n	8001c10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e242      	b.n	8001fea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b6c:	d106      	bne.n	8001b7c <HAL_RCC_OscConfig+0x74>
 8001b6e:	4b76      	ldr	r3, [pc, #472]	; (8001d48 <HAL_RCC_OscConfig+0x240>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a75      	ldr	r2, [pc, #468]	; (8001d48 <HAL_RCC_OscConfig+0x240>)
 8001b74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b78:	6013      	str	r3, [r2, #0]
 8001b7a:	e01d      	b.n	8001bb8 <HAL_RCC_OscConfig+0xb0>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b84:	d10c      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x98>
 8001b86:	4b70      	ldr	r3, [pc, #448]	; (8001d48 <HAL_RCC_OscConfig+0x240>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a6f      	ldr	r2, [pc, #444]	; (8001d48 <HAL_RCC_OscConfig+0x240>)
 8001b8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b90:	6013      	str	r3, [r2, #0]
 8001b92:	4b6d      	ldr	r3, [pc, #436]	; (8001d48 <HAL_RCC_OscConfig+0x240>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a6c      	ldr	r2, [pc, #432]	; (8001d48 <HAL_RCC_OscConfig+0x240>)
 8001b98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b9c:	6013      	str	r3, [r2, #0]
 8001b9e:	e00b      	b.n	8001bb8 <HAL_RCC_OscConfig+0xb0>
 8001ba0:	4b69      	ldr	r3, [pc, #420]	; (8001d48 <HAL_RCC_OscConfig+0x240>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a68      	ldr	r2, [pc, #416]	; (8001d48 <HAL_RCC_OscConfig+0x240>)
 8001ba6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001baa:	6013      	str	r3, [r2, #0]
 8001bac:	4b66      	ldr	r3, [pc, #408]	; (8001d48 <HAL_RCC_OscConfig+0x240>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a65      	ldr	r2, [pc, #404]	; (8001d48 <HAL_RCC_OscConfig+0x240>)
 8001bb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d013      	beq.n	8001be8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc0:	f7ff fa62 	bl	8001088 <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bc8:	f7ff fa5e 	bl	8001088 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b64      	cmp	r3, #100	; 0x64
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e207      	b.n	8001fea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bda:	4b5b      	ldr	r3, [pc, #364]	; (8001d48 <HAL_RCC_OscConfig+0x240>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d0f0      	beq.n	8001bc8 <HAL_RCC_OscConfig+0xc0>
 8001be6:	e014      	b.n	8001c12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be8:	f7ff fa4e 	bl	8001088 <HAL_GetTick>
 8001bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bee:	e008      	b.n	8001c02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bf0:	f7ff fa4a 	bl	8001088 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b64      	cmp	r3, #100	; 0x64
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e1f3      	b.n	8001fea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c02:	4b51      	ldr	r3, [pc, #324]	; (8001d48 <HAL_RCC_OscConfig+0x240>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1f0      	bne.n	8001bf0 <HAL_RCC_OscConfig+0xe8>
 8001c0e:	e000      	b.n	8001c12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d063      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c1e:	4b4a      	ldr	r3, [pc, #296]	; (8001d48 <HAL_RCC_OscConfig+0x240>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f003 030c 	and.w	r3, r3, #12
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d00b      	beq.n	8001c42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c2a:	4b47      	ldr	r3, [pc, #284]	; (8001d48 <HAL_RCC_OscConfig+0x240>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c32:	2b08      	cmp	r3, #8
 8001c34:	d11c      	bne.n	8001c70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c36:	4b44      	ldr	r3, [pc, #272]	; (8001d48 <HAL_RCC_OscConfig+0x240>)
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d116      	bne.n	8001c70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c42:	4b41      	ldr	r3, [pc, #260]	; (8001d48 <HAL_RCC_OscConfig+0x240>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d005      	beq.n	8001c5a <HAL_RCC_OscConfig+0x152>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d001      	beq.n	8001c5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e1c7      	b.n	8001fea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c5a:	4b3b      	ldr	r3, [pc, #236]	; (8001d48 <HAL_RCC_OscConfig+0x240>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	691b      	ldr	r3, [r3, #16]
 8001c66:	00db      	lsls	r3, r3, #3
 8001c68:	4937      	ldr	r1, [pc, #220]	; (8001d48 <HAL_RCC_OscConfig+0x240>)
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c6e:	e03a      	b.n	8001ce6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d020      	beq.n	8001cba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c78:	4b34      	ldr	r3, [pc, #208]	; (8001d4c <HAL_RCC_OscConfig+0x244>)
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c7e:	f7ff fa03 	bl	8001088 <HAL_GetTick>
 8001c82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c84:	e008      	b.n	8001c98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c86:	f7ff f9ff 	bl	8001088 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d901      	bls.n	8001c98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e1a8      	b.n	8001fea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c98:	4b2b      	ldr	r3, [pc, #172]	; (8001d48 <HAL_RCC_OscConfig+0x240>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0302 	and.w	r3, r3, #2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d0f0      	beq.n	8001c86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ca4:	4b28      	ldr	r3, [pc, #160]	; (8001d48 <HAL_RCC_OscConfig+0x240>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	691b      	ldr	r3, [r3, #16]
 8001cb0:	00db      	lsls	r3, r3, #3
 8001cb2:	4925      	ldr	r1, [pc, #148]	; (8001d48 <HAL_RCC_OscConfig+0x240>)
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	600b      	str	r3, [r1, #0]
 8001cb8:	e015      	b.n	8001ce6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cba:	4b24      	ldr	r3, [pc, #144]	; (8001d4c <HAL_RCC_OscConfig+0x244>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc0:	f7ff f9e2 	bl	8001088 <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cc8:	f7ff f9de 	bl	8001088 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e187      	b.n	8001fea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cda:	4b1b      	ldr	r3, [pc, #108]	; (8001d48 <HAL_RCC_OscConfig+0x240>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1f0      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0308 	and.w	r3, r3, #8
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d036      	beq.n	8001d60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	695b      	ldr	r3, [r3, #20]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d016      	beq.n	8001d28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cfa:	4b15      	ldr	r3, [pc, #84]	; (8001d50 <HAL_RCC_OscConfig+0x248>)
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d00:	f7ff f9c2 	bl	8001088 <HAL_GetTick>
 8001d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d06:	e008      	b.n	8001d1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d08:	f7ff f9be 	bl	8001088 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e167      	b.n	8001fea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d1a:	4b0b      	ldr	r3, [pc, #44]	; (8001d48 <HAL_RCC_OscConfig+0x240>)
 8001d1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d0f0      	beq.n	8001d08 <HAL_RCC_OscConfig+0x200>
 8001d26:	e01b      	b.n	8001d60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d28:	4b09      	ldr	r3, [pc, #36]	; (8001d50 <HAL_RCC_OscConfig+0x248>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d2e:	f7ff f9ab 	bl	8001088 <HAL_GetTick>
 8001d32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d34:	e00e      	b.n	8001d54 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d36:	f7ff f9a7 	bl	8001088 <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d907      	bls.n	8001d54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e150      	b.n	8001fea <HAL_RCC_OscConfig+0x4e2>
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	42470000 	.word	0x42470000
 8001d50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d54:	4b88      	ldr	r3, [pc, #544]	; (8001f78 <HAL_RCC_OscConfig+0x470>)
 8001d56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d58:	f003 0302 	and.w	r3, r3, #2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d1ea      	bne.n	8001d36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0304 	and.w	r3, r3, #4
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	f000 8097 	beq.w	8001e9c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d72:	4b81      	ldr	r3, [pc, #516]	; (8001f78 <HAL_RCC_OscConfig+0x470>)
 8001d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d10f      	bne.n	8001d9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60bb      	str	r3, [r7, #8]
 8001d82:	4b7d      	ldr	r3, [pc, #500]	; (8001f78 <HAL_RCC_OscConfig+0x470>)
 8001d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d86:	4a7c      	ldr	r2, [pc, #496]	; (8001f78 <HAL_RCC_OscConfig+0x470>)
 8001d88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d8e:	4b7a      	ldr	r3, [pc, #488]	; (8001f78 <HAL_RCC_OscConfig+0x470>)
 8001d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d96:	60bb      	str	r3, [r7, #8]
 8001d98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d9e:	4b77      	ldr	r3, [pc, #476]	; (8001f7c <HAL_RCC_OscConfig+0x474>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d118      	bne.n	8001ddc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001daa:	4b74      	ldr	r3, [pc, #464]	; (8001f7c <HAL_RCC_OscConfig+0x474>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a73      	ldr	r2, [pc, #460]	; (8001f7c <HAL_RCC_OscConfig+0x474>)
 8001db0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001db4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001db6:	f7ff f967 	bl	8001088 <HAL_GetTick>
 8001dba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dbc:	e008      	b.n	8001dd0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dbe:	f7ff f963 	bl	8001088 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d901      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e10c      	b.n	8001fea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dd0:	4b6a      	ldr	r3, [pc, #424]	; (8001f7c <HAL_RCC_OscConfig+0x474>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d0f0      	beq.n	8001dbe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d106      	bne.n	8001df2 <HAL_RCC_OscConfig+0x2ea>
 8001de4:	4b64      	ldr	r3, [pc, #400]	; (8001f78 <HAL_RCC_OscConfig+0x470>)
 8001de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de8:	4a63      	ldr	r2, [pc, #396]	; (8001f78 <HAL_RCC_OscConfig+0x470>)
 8001dea:	f043 0301 	orr.w	r3, r3, #1
 8001dee:	6713      	str	r3, [r2, #112]	; 0x70
 8001df0:	e01c      	b.n	8001e2c <HAL_RCC_OscConfig+0x324>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	2b05      	cmp	r3, #5
 8001df8:	d10c      	bne.n	8001e14 <HAL_RCC_OscConfig+0x30c>
 8001dfa:	4b5f      	ldr	r3, [pc, #380]	; (8001f78 <HAL_RCC_OscConfig+0x470>)
 8001dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dfe:	4a5e      	ldr	r2, [pc, #376]	; (8001f78 <HAL_RCC_OscConfig+0x470>)
 8001e00:	f043 0304 	orr.w	r3, r3, #4
 8001e04:	6713      	str	r3, [r2, #112]	; 0x70
 8001e06:	4b5c      	ldr	r3, [pc, #368]	; (8001f78 <HAL_RCC_OscConfig+0x470>)
 8001e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e0a:	4a5b      	ldr	r2, [pc, #364]	; (8001f78 <HAL_RCC_OscConfig+0x470>)
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	6713      	str	r3, [r2, #112]	; 0x70
 8001e12:	e00b      	b.n	8001e2c <HAL_RCC_OscConfig+0x324>
 8001e14:	4b58      	ldr	r3, [pc, #352]	; (8001f78 <HAL_RCC_OscConfig+0x470>)
 8001e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e18:	4a57      	ldr	r2, [pc, #348]	; (8001f78 <HAL_RCC_OscConfig+0x470>)
 8001e1a:	f023 0301 	bic.w	r3, r3, #1
 8001e1e:	6713      	str	r3, [r2, #112]	; 0x70
 8001e20:	4b55      	ldr	r3, [pc, #340]	; (8001f78 <HAL_RCC_OscConfig+0x470>)
 8001e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e24:	4a54      	ldr	r2, [pc, #336]	; (8001f78 <HAL_RCC_OscConfig+0x470>)
 8001e26:	f023 0304 	bic.w	r3, r3, #4
 8001e2a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d015      	beq.n	8001e60 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e34:	f7ff f928 	bl	8001088 <HAL_GetTick>
 8001e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e3a:	e00a      	b.n	8001e52 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e3c:	f7ff f924 	bl	8001088 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e0cb      	b.n	8001fea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e52:	4b49      	ldr	r3, [pc, #292]	; (8001f78 <HAL_RCC_OscConfig+0x470>)
 8001e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d0ee      	beq.n	8001e3c <HAL_RCC_OscConfig+0x334>
 8001e5e:	e014      	b.n	8001e8a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e60:	f7ff f912 	bl	8001088 <HAL_GetTick>
 8001e64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e66:	e00a      	b.n	8001e7e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e68:	f7ff f90e 	bl	8001088 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e0b5      	b.n	8001fea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e7e:	4b3e      	ldr	r3, [pc, #248]	; (8001f78 <HAL_RCC_OscConfig+0x470>)
 8001e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1ee      	bne.n	8001e68 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e8a:	7dfb      	ldrb	r3, [r7, #23]
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d105      	bne.n	8001e9c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e90:	4b39      	ldr	r3, [pc, #228]	; (8001f78 <HAL_RCC_OscConfig+0x470>)
 8001e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e94:	4a38      	ldr	r2, [pc, #224]	; (8001f78 <HAL_RCC_OscConfig+0x470>)
 8001e96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e9a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	f000 80a1 	beq.w	8001fe8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ea6:	4b34      	ldr	r3, [pc, #208]	; (8001f78 <HAL_RCC_OscConfig+0x470>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f003 030c 	and.w	r3, r3, #12
 8001eae:	2b08      	cmp	r3, #8
 8001eb0:	d05c      	beq.n	8001f6c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d141      	bne.n	8001f3e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eba:	4b31      	ldr	r3, [pc, #196]	; (8001f80 <HAL_RCC_OscConfig+0x478>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec0:	f7ff f8e2 	bl	8001088 <HAL_GetTick>
 8001ec4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ec6:	e008      	b.n	8001eda <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ec8:	f7ff f8de 	bl	8001088 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e087      	b.n	8001fea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eda:	4b27      	ldr	r3, [pc, #156]	; (8001f78 <HAL_RCC_OscConfig+0x470>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1f0      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	69da      	ldr	r2, [r3, #28]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a1b      	ldr	r3, [r3, #32]
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef4:	019b      	lsls	r3, r3, #6
 8001ef6:	431a      	orrs	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001efc:	085b      	lsrs	r3, r3, #1
 8001efe:	3b01      	subs	r3, #1
 8001f00:	041b      	lsls	r3, r3, #16
 8001f02:	431a      	orrs	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f08:	061b      	lsls	r3, r3, #24
 8001f0a:	491b      	ldr	r1, [pc, #108]	; (8001f78 <HAL_RCC_OscConfig+0x470>)
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f10:	4b1b      	ldr	r3, [pc, #108]	; (8001f80 <HAL_RCC_OscConfig+0x478>)
 8001f12:	2201      	movs	r2, #1
 8001f14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f16:	f7ff f8b7 	bl	8001088 <HAL_GetTick>
 8001f1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f1c:	e008      	b.n	8001f30 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f1e:	f7ff f8b3 	bl	8001088 <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e05c      	b.n	8001fea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f30:	4b11      	ldr	r3, [pc, #68]	; (8001f78 <HAL_RCC_OscConfig+0x470>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d0f0      	beq.n	8001f1e <HAL_RCC_OscConfig+0x416>
 8001f3c:	e054      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f3e:	4b10      	ldr	r3, [pc, #64]	; (8001f80 <HAL_RCC_OscConfig+0x478>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f44:	f7ff f8a0 	bl	8001088 <HAL_GetTick>
 8001f48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f4a:	e008      	b.n	8001f5e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f4c:	f7ff f89c 	bl	8001088 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e045      	b.n	8001fea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f5e:	4b06      	ldr	r3, [pc, #24]	; (8001f78 <HAL_RCC_OscConfig+0x470>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1f0      	bne.n	8001f4c <HAL_RCC_OscConfig+0x444>
 8001f6a:	e03d      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d107      	bne.n	8001f84 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e038      	b.n	8001fea <HAL_RCC_OscConfig+0x4e2>
 8001f78:	40023800 	.word	0x40023800
 8001f7c:	40007000 	.word	0x40007000
 8001f80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f84:	4b1b      	ldr	r3, [pc, #108]	; (8001ff4 <HAL_RCC_OscConfig+0x4ec>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d028      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d121      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d11a      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001fba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d111      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fca:	085b      	lsrs	r3, r3, #1
 8001fcc:	3b01      	subs	r3, #1
 8001fce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d107      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fde:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d001      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e000      	b.n	8001fea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3718      	adds	r7, #24
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	40023800 	.word	0x40023800

08001ff8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d101      	bne.n	800200c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e0cc      	b.n	80021a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800200c:	4b68      	ldr	r3, [pc, #416]	; (80021b0 <HAL_RCC_ClockConfig+0x1b8>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0307 	and.w	r3, r3, #7
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	429a      	cmp	r2, r3
 8002018:	d90c      	bls.n	8002034 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800201a:	4b65      	ldr	r3, [pc, #404]	; (80021b0 <HAL_RCC_ClockConfig+0x1b8>)
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	b2d2      	uxtb	r2, r2
 8002020:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002022:	4b63      	ldr	r3, [pc, #396]	; (80021b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0307 	and.w	r3, r3, #7
 800202a:	683a      	ldr	r2, [r7, #0]
 800202c:	429a      	cmp	r2, r3
 800202e:	d001      	beq.n	8002034 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e0b8      	b.n	80021a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0302 	and.w	r3, r3, #2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d020      	beq.n	8002082 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0304 	and.w	r3, r3, #4
 8002048:	2b00      	cmp	r3, #0
 800204a:	d005      	beq.n	8002058 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800204c:	4b59      	ldr	r3, [pc, #356]	; (80021b4 <HAL_RCC_ClockConfig+0x1bc>)
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	4a58      	ldr	r2, [pc, #352]	; (80021b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002052:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002056:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0308 	and.w	r3, r3, #8
 8002060:	2b00      	cmp	r3, #0
 8002062:	d005      	beq.n	8002070 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002064:	4b53      	ldr	r3, [pc, #332]	; (80021b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	4a52      	ldr	r2, [pc, #328]	; (80021b4 <HAL_RCC_ClockConfig+0x1bc>)
 800206a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800206e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002070:	4b50      	ldr	r3, [pc, #320]	; (80021b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	494d      	ldr	r1, [pc, #308]	; (80021b4 <HAL_RCC_ClockConfig+0x1bc>)
 800207e:	4313      	orrs	r3, r2
 8002080:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	2b00      	cmp	r3, #0
 800208c:	d044      	beq.n	8002118 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d107      	bne.n	80020a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002096:	4b47      	ldr	r3, [pc, #284]	; (80021b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d119      	bne.n	80020d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e07f      	b.n	80021a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d003      	beq.n	80020b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020b2:	2b03      	cmp	r3, #3
 80020b4:	d107      	bne.n	80020c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020b6:	4b3f      	ldr	r3, [pc, #252]	; (80021b4 <HAL_RCC_ClockConfig+0x1bc>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d109      	bne.n	80020d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e06f      	b.n	80021a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020c6:	4b3b      	ldr	r3, [pc, #236]	; (80021b4 <HAL_RCC_ClockConfig+0x1bc>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e067      	b.n	80021a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020d6:	4b37      	ldr	r3, [pc, #220]	; (80021b4 <HAL_RCC_ClockConfig+0x1bc>)
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f023 0203 	bic.w	r2, r3, #3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	4934      	ldr	r1, [pc, #208]	; (80021b4 <HAL_RCC_ClockConfig+0x1bc>)
 80020e4:	4313      	orrs	r3, r2
 80020e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020e8:	f7fe ffce 	bl	8001088 <HAL_GetTick>
 80020ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ee:	e00a      	b.n	8002106 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020f0:	f7fe ffca 	bl	8001088 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80020fe:	4293      	cmp	r3, r2
 8002100:	d901      	bls.n	8002106 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e04f      	b.n	80021a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002106:	4b2b      	ldr	r3, [pc, #172]	; (80021b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f003 020c 	and.w	r2, r3, #12
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	429a      	cmp	r2, r3
 8002116:	d1eb      	bne.n	80020f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002118:	4b25      	ldr	r3, [pc, #148]	; (80021b0 <HAL_RCC_ClockConfig+0x1b8>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0307 	and.w	r3, r3, #7
 8002120:	683a      	ldr	r2, [r7, #0]
 8002122:	429a      	cmp	r2, r3
 8002124:	d20c      	bcs.n	8002140 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002126:	4b22      	ldr	r3, [pc, #136]	; (80021b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	b2d2      	uxtb	r2, r2
 800212c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800212e:	4b20      	ldr	r3, [pc, #128]	; (80021b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0307 	and.w	r3, r3, #7
 8002136:	683a      	ldr	r2, [r7, #0]
 8002138:	429a      	cmp	r2, r3
 800213a:	d001      	beq.n	8002140 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e032      	b.n	80021a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0304 	and.w	r3, r3, #4
 8002148:	2b00      	cmp	r3, #0
 800214a:	d008      	beq.n	800215e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800214c:	4b19      	ldr	r3, [pc, #100]	; (80021b4 <HAL_RCC_ClockConfig+0x1bc>)
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	4916      	ldr	r1, [pc, #88]	; (80021b4 <HAL_RCC_ClockConfig+0x1bc>)
 800215a:	4313      	orrs	r3, r2
 800215c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0308 	and.w	r3, r3, #8
 8002166:	2b00      	cmp	r3, #0
 8002168:	d009      	beq.n	800217e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800216a:	4b12      	ldr	r3, [pc, #72]	; (80021b4 <HAL_RCC_ClockConfig+0x1bc>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	00db      	lsls	r3, r3, #3
 8002178:	490e      	ldr	r1, [pc, #56]	; (80021b4 <HAL_RCC_ClockConfig+0x1bc>)
 800217a:	4313      	orrs	r3, r2
 800217c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800217e:	f000 f821 	bl	80021c4 <HAL_RCC_GetSysClockFreq>
 8002182:	4602      	mov	r2, r0
 8002184:	4b0b      	ldr	r3, [pc, #44]	; (80021b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	091b      	lsrs	r3, r3, #4
 800218a:	f003 030f 	and.w	r3, r3, #15
 800218e:	490a      	ldr	r1, [pc, #40]	; (80021b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002190:	5ccb      	ldrb	r3, [r1, r3]
 8002192:	fa22 f303 	lsr.w	r3, r2, r3
 8002196:	4a09      	ldr	r2, [pc, #36]	; (80021bc <HAL_RCC_ClockConfig+0x1c4>)
 8002198:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800219a:	4b09      	ldr	r3, [pc, #36]	; (80021c0 <HAL_RCC_ClockConfig+0x1c8>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4618      	mov	r0, r3
 80021a0:	f7fe ff2e 	bl	8001000 <HAL_InitTick>

  return HAL_OK;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	40023c00 	.word	0x40023c00
 80021b4:	40023800 	.word	0x40023800
 80021b8:	080040b0 	.word	0x080040b0
 80021bc:	20000000 	.word	0x20000000
 80021c0:	20000004 	.word	0x20000004

080021c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021c8:	b090      	sub	sp, #64	; 0x40
 80021ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80021cc:	2300      	movs	r3, #0
 80021ce:	637b      	str	r3, [r7, #52]	; 0x34
 80021d0:	2300      	movs	r3, #0
 80021d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021d4:	2300      	movs	r3, #0
 80021d6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80021d8:	2300      	movs	r3, #0
 80021da:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021dc:	4b59      	ldr	r3, [pc, #356]	; (8002344 <HAL_RCC_GetSysClockFreq+0x180>)
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	f003 030c 	and.w	r3, r3, #12
 80021e4:	2b08      	cmp	r3, #8
 80021e6:	d00d      	beq.n	8002204 <HAL_RCC_GetSysClockFreq+0x40>
 80021e8:	2b08      	cmp	r3, #8
 80021ea:	f200 80a1 	bhi.w	8002330 <HAL_RCC_GetSysClockFreq+0x16c>
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d002      	beq.n	80021f8 <HAL_RCC_GetSysClockFreq+0x34>
 80021f2:	2b04      	cmp	r3, #4
 80021f4:	d003      	beq.n	80021fe <HAL_RCC_GetSysClockFreq+0x3a>
 80021f6:	e09b      	b.n	8002330 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021f8:	4b53      	ldr	r3, [pc, #332]	; (8002348 <HAL_RCC_GetSysClockFreq+0x184>)
 80021fa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80021fc:	e09b      	b.n	8002336 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021fe:	4b53      	ldr	r3, [pc, #332]	; (800234c <HAL_RCC_GetSysClockFreq+0x188>)
 8002200:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002202:	e098      	b.n	8002336 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002204:	4b4f      	ldr	r3, [pc, #316]	; (8002344 <HAL_RCC_GetSysClockFreq+0x180>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800220c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800220e:	4b4d      	ldr	r3, [pc, #308]	; (8002344 <HAL_RCC_GetSysClockFreq+0x180>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d028      	beq.n	800226c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800221a:	4b4a      	ldr	r3, [pc, #296]	; (8002344 <HAL_RCC_GetSysClockFreq+0x180>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	099b      	lsrs	r3, r3, #6
 8002220:	2200      	movs	r2, #0
 8002222:	623b      	str	r3, [r7, #32]
 8002224:	627a      	str	r2, [r7, #36]	; 0x24
 8002226:	6a3b      	ldr	r3, [r7, #32]
 8002228:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800222c:	2100      	movs	r1, #0
 800222e:	4b47      	ldr	r3, [pc, #284]	; (800234c <HAL_RCC_GetSysClockFreq+0x188>)
 8002230:	fb03 f201 	mul.w	r2, r3, r1
 8002234:	2300      	movs	r3, #0
 8002236:	fb00 f303 	mul.w	r3, r0, r3
 800223a:	4413      	add	r3, r2
 800223c:	4a43      	ldr	r2, [pc, #268]	; (800234c <HAL_RCC_GetSysClockFreq+0x188>)
 800223e:	fba0 1202 	umull	r1, r2, r0, r2
 8002242:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002244:	460a      	mov	r2, r1
 8002246:	62ba      	str	r2, [r7, #40]	; 0x28
 8002248:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800224a:	4413      	add	r3, r2
 800224c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800224e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002250:	2200      	movs	r2, #0
 8002252:	61bb      	str	r3, [r7, #24]
 8002254:	61fa      	str	r2, [r7, #28]
 8002256:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800225a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800225e:	f7fd ffbb 	bl	80001d8 <__aeabi_uldivmod>
 8002262:	4602      	mov	r2, r0
 8002264:	460b      	mov	r3, r1
 8002266:	4613      	mov	r3, r2
 8002268:	63fb      	str	r3, [r7, #60]	; 0x3c
 800226a:	e053      	b.n	8002314 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800226c:	4b35      	ldr	r3, [pc, #212]	; (8002344 <HAL_RCC_GetSysClockFreq+0x180>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	099b      	lsrs	r3, r3, #6
 8002272:	2200      	movs	r2, #0
 8002274:	613b      	str	r3, [r7, #16]
 8002276:	617a      	str	r2, [r7, #20]
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800227e:	f04f 0b00 	mov.w	fp, #0
 8002282:	4652      	mov	r2, sl
 8002284:	465b      	mov	r3, fp
 8002286:	f04f 0000 	mov.w	r0, #0
 800228a:	f04f 0100 	mov.w	r1, #0
 800228e:	0159      	lsls	r1, r3, #5
 8002290:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002294:	0150      	lsls	r0, r2, #5
 8002296:	4602      	mov	r2, r0
 8002298:	460b      	mov	r3, r1
 800229a:	ebb2 080a 	subs.w	r8, r2, sl
 800229e:	eb63 090b 	sbc.w	r9, r3, fp
 80022a2:	f04f 0200 	mov.w	r2, #0
 80022a6:	f04f 0300 	mov.w	r3, #0
 80022aa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80022ae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80022b2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80022b6:	ebb2 0408 	subs.w	r4, r2, r8
 80022ba:	eb63 0509 	sbc.w	r5, r3, r9
 80022be:	f04f 0200 	mov.w	r2, #0
 80022c2:	f04f 0300 	mov.w	r3, #0
 80022c6:	00eb      	lsls	r3, r5, #3
 80022c8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022cc:	00e2      	lsls	r2, r4, #3
 80022ce:	4614      	mov	r4, r2
 80022d0:	461d      	mov	r5, r3
 80022d2:	eb14 030a 	adds.w	r3, r4, sl
 80022d6:	603b      	str	r3, [r7, #0]
 80022d8:	eb45 030b 	adc.w	r3, r5, fp
 80022dc:	607b      	str	r3, [r7, #4]
 80022de:	f04f 0200 	mov.w	r2, #0
 80022e2:	f04f 0300 	mov.w	r3, #0
 80022e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80022ea:	4629      	mov	r1, r5
 80022ec:	028b      	lsls	r3, r1, #10
 80022ee:	4621      	mov	r1, r4
 80022f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022f4:	4621      	mov	r1, r4
 80022f6:	028a      	lsls	r2, r1, #10
 80022f8:	4610      	mov	r0, r2
 80022fa:	4619      	mov	r1, r3
 80022fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022fe:	2200      	movs	r2, #0
 8002300:	60bb      	str	r3, [r7, #8]
 8002302:	60fa      	str	r2, [r7, #12]
 8002304:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002308:	f7fd ff66 	bl	80001d8 <__aeabi_uldivmod>
 800230c:	4602      	mov	r2, r0
 800230e:	460b      	mov	r3, r1
 8002310:	4613      	mov	r3, r2
 8002312:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002314:	4b0b      	ldr	r3, [pc, #44]	; (8002344 <HAL_RCC_GetSysClockFreq+0x180>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	0c1b      	lsrs	r3, r3, #16
 800231a:	f003 0303 	and.w	r3, r3, #3
 800231e:	3301      	adds	r3, #1
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002324:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002328:	fbb2 f3f3 	udiv	r3, r2, r3
 800232c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800232e:	e002      	b.n	8002336 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002330:	4b05      	ldr	r3, [pc, #20]	; (8002348 <HAL_RCC_GetSysClockFreq+0x184>)
 8002332:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002334:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002338:	4618      	mov	r0, r3
 800233a:	3740      	adds	r7, #64	; 0x40
 800233c:	46bd      	mov	sp, r7
 800233e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002342:	bf00      	nop
 8002344:	40023800 	.word	0x40023800
 8002348:	00f42400 	.word	0x00f42400
 800234c:	017d7840 	.word	0x017d7840

08002350 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002354:	4b03      	ldr	r3, [pc, #12]	; (8002364 <HAL_RCC_GetHCLKFreq+0x14>)
 8002356:	681b      	ldr	r3, [r3, #0]
}
 8002358:	4618      	mov	r0, r3
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	20000000 	.word	0x20000000

08002368 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800236c:	f7ff fff0 	bl	8002350 <HAL_RCC_GetHCLKFreq>
 8002370:	4602      	mov	r2, r0
 8002372:	4b05      	ldr	r3, [pc, #20]	; (8002388 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	0a9b      	lsrs	r3, r3, #10
 8002378:	f003 0307 	and.w	r3, r3, #7
 800237c:	4903      	ldr	r1, [pc, #12]	; (800238c <HAL_RCC_GetPCLK1Freq+0x24>)
 800237e:	5ccb      	ldrb	r3, [r1, r3]
 8002380:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002384:	4618      	mov	r0, r3
 8002386:	bd80      	pop	{r7, pc}
 8002388:	40023800 	.word	0x40023800
 800238c:	080040c0 	.word	0x080040c0

08002390 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002394:	f7ff ffdc 	bl	8002350 <HAL_RCC_GetHCLKFreq>
 8002398:	4602      	mov	r2, r0
 800239a:	4b05      	ldr	r3, [pc, #20]	; (80023b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	0b5b      	lsrs	r3, r3, #13
 80023a0:	f003 0307 	and.w	r3, r3, #7
 80023a4:	4903      	ldr	r1, [pc, #12]	; (80023b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023a6:	5ccb      	ldrb	r3, [r1, r3]
 80023a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	40023800 	.word	0x40023800
 80023b4:	080040c0 	.word	0x080040c0

080023b8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e041      	b.n	800244e <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d106      	bne.n	80023e4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f7fe fc3e 	bl	8000c60 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2202      	movs	r2, #2
 80023e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	3304      	adds	r3, #4
 80023f4:	4619      	mov	r1, r3
 80023f6:	4610      	mov	r0, r2
 80023f8:	f000 fa60 	bl	80028bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
	...

08002458 <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2200      	movs	r2, #0
 8002468:	6839      	ldr	r1, [r7, #0]
 800246a:	4618      	mov	r0, r3
 800246c:	f000 fc32 	bl	8002cd4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a29      	ldr	r2, [pc, #164]	; (800251c <HAL_TIM_OC_Stop+0xc4>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d117      	bne.n	80024aa <HAL_TIM_OC_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	6a1a      	ldr	r2, [r3, #32]
 8002480:	f241 1311 	movw	r3, #4369	; 0x1111
 8002484:	4013      	ands	r3, r2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d10f      	bne.n	80024aa <HAL_TIM_OC_Stop+0x52>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	6a1a      	ldr	r2, [r3, #32]
 8002490:	f240 4344 	movw	r3, #1092	; 0x444
 8002494:	4013      	ands	r3, r2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d107      	bne.n	80024aa <HAL_TIM_OC_Stop+0x52>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	6a1a      	ldr	r2, [r3, #32]
 80024b0:	f241 1311 	movw	r3, #4369	; 0x1111
 80024b4:	4013      	ands	r3, r2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d10f      	bne.n	80024da <HAL_TIM_OC_Stop+0x82>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	6a1a      	ldr	r2, [r3, #32]
 80024c0:	f240 4344 	movw	r3, #1092	; 0x444
 80024c4:	4013      	ands	r3, r2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d107      	bne.n	80024da <HAL_TIM_OC_Stop+0x82>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f022 0201 	bic.w	r2, r2, #1
 80024d8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d104      	bne.n	80024ea <HAL_TIM_OC_Stop+0x92>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024e8:	e013      	b.n	8002512 <HAL_TIM_OC_Stop+0xba>
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	2b04      	cmp	r3, #4
 80024ee:	d104      	bne.n	80024fa <HAL_TIM_OC_Stop+0xa2>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024f8:	e00b      	b.n	8002512 <HAL_TIM_OC_Stop+0xba>
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	2b08      	cmp	r3, #8
 80024fe:	d104      	bne.n	800250a <HAL_TIM_OC_Stop+0xb2>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002508:	e003      	b.n	8002512 <HAL_TIM_OC_Stop+0xba>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2201      	movs	r2, #1
 800250e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8002512:	2300      	movs	r3, #0
}
 8002514:	4618      	mov	r0, r3
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	40010000 	.word	0x40010000

08002520 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d109      	bne.n	8002544 <HAL_TIM_PWM_Start+0x24>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002536:	b2db      	uxtb	r3, r3
 8002538:	2b01      	cmp	r3, #1
 800253a:	bf14      	ite	ne
 800253c:	2301      	movne	r3, #1
 800253e:	2300      	moveq	r3, #0
 8002540:	b2db      	uxtb	r3, r3
 8002542:	e022      	b.n	800258a <HAL_TIM_PWM_Start+0x6a>
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	2b04      	cmp	r3, #4
 8002548:	d109      	bne.n	800255e <HAL_TIM_PWM_Start+0x3e>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b01      	cmp	r3, #1
 8002554:	bf14      	ite	ne
 8002556:	2301      	movne	r3, #1
 8002558:	2300      	moveq	r3, #0
 800255a:	b2db      	uxtb	r3, r3
 800255c:	e015      	b.n	800258a <HAL_TIM_PWM_Start+0x6a>
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	2b08      	cmp	r3, #8
 8002562:	d109      	bne.n	8002578 <HAL_TIM_PWM_Start+0x58>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800256a:	b2db      	uxtb	r3, r3
 800256c:	2b01      	cmp	r3, #1
 800256e:	bf14      	ite	ne
 8002570:	2301      	movne	r3, #1
 8002572:	2300      	moveq	r3, #0
 8002574:	b2db      	uxtb	r3, r3
 8002576:	e008      	b.n	800258a <HAL_TIM_PWM_Start+0x6a>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800257e:	b2db      	uxtb	r3, r3
 8002580:	2b01      	cmp	r3, #1
 8002582:	bf14      	ite	ne
 8002584:	2301      	movne	r3, #1
 8002586:	2300      	moveq	r3, #0
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e068      	b.n	8002664 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d104      	bne.n	80025a2 <HAL_TIM_PWM_Start+0x82>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2202      	movs	r2, #2
 800259c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025a0:	e013      	b.n	80025ca <HAL_TIM_PWM_Start+0xaa>
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	2b04      	cmp	r3, #4
 80025a6:	d104      	bne.n	80025b2 <HAL_TIM_PWM_Start+0x92>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2202      	movs	r2, #2
 80025ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025b0:	e00b      	b.n	80025ca <HAL_TIM_PWM_Start+0xaa>
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	2b08      	cmp	r3, #8
 80025b6:	d104      	bne.n	80025c2 <HAL_TIM_PWM_Start+0xa2>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2202      	movs	r2, #2
 80025bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025c0:	e003      	b.n	80025ca <HAL_TIM_PWM_Start+0xaa>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2202      	movs	r2, #2
 80025c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2201      	movs	r2, #1
 80025d0:	6839      	ldr	r1, [r7, #0]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f000 fb7e 	bl	8002cd4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a23      	ldr	r2, [pc, #140]	; (800266c <HAL_TIM_PWM_Start+0x14c>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d107      	bne.n	80025f2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a1d      	ldr	r2, [pc, #116]	; (800266c <HAL_TIM_PWM_Start+0x14c>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d018      	beq.n	800262e <HAL_TIM_PWM_Start+0x10e>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002604:	d013      	beq.n	800262e <HAL_TIM_PWM_Start+0x10e>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a19      	ldr	r2, [pc, #100]	; (8002670 <HAL_TIM_PWM_Start+0x150>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d00e      	beq.n	800262e <HAL_TIM_PWM_Start+0x10e>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a17      	ldr	r2, [pc, #92]	; (8002674 <HAL_TIM_PWM_Start+0x154>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d009      	beq.n	800262e <HAL_TIM_PWM_Start+0x10e>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a16      	ldr	r2, [pc, #88]	; (8002678 <HAL_TIM_PWM_Start+0x158>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d004      	beq.n	800262e <HAL_TIM_PWM_Start+0x10e>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a14      	ldr	r2, [pc, #80]	; (800267c <HAL_TIM_PWM_Start+0x15c>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d111      	bne.n	8002652 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f003 0307 	and.w	r3, r3, #7
 8002638:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2b06      	cmp	r3, #6
 800263e:	d010      	beq.n	8002662 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f042 0201 	orr.w	r2, r2, #1
 800264e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002650:	e007      	b.n	8002662 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f042 0201 	orr.w	r2, r2, #1
 8002660:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002662:	2300      	movs	r3, #0
}
 8002664:	4618      	mov	r0, r3
 8002666:	3710      	adds	r7, #16
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	40010000 	.word	0x40010000
 8002670:	40000400 	.word	0x40000400
 8002674:	40000800 	.word	0x40000800
 8002678:	40000c00 	.word	0x40000c00
 800267c:	40014000 	.word	0x40014000

08002680 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800268c:	2300      	movs	r3, #0
 800268e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002696:	2b01      	cmp	r3, #1
 8002698:	d101      	bne.n	800269e <HAL_TIM_OC_ConfigChannel+0x1e>
 800269a:	2302      	movs	r3, #2
 800269c:	e048      	b.n	8002730 <HAL_TIM_OC_ConfigChannel+0xb0>
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2201      	movs	r2, #1
 80026a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2b0c      	cmp	r3, #12
 80026aa:	d839      	bhi.n	8002720 <HAL_TIM_OC_ConfigChannel+0xa0>
 80026ac:	a201      	add	r2, pc, #4	; (adr r2, 80026b4 <HAL_TIM_OC_ConfigChannel+0x34>)
 80026ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026b2:	bf00      	nop
 80026b4:	080026e9 	.word	0x080026e9
 80026b8:	08002721 	.word	0x08002721
 80026bc:	08002721 	.word	0x08002721
 80026c0:	08002721 	.word	0x08002721
 80026c4:	080026f7 	.word	0x080026f7
 80026c8:	08002721 	.word	0x08002721
 80026cc:	08002721 	.word	0x08002721
 80026d0:	08002721 	.word	0x08002721
 80026d4:	08002705 	.word	0x08002705
 80026d8:	08002721 	.word	0x08002721
 80026dc:	08002721 	.word	0x08002721
 80026e0:	08002721 	.word	0x08002721
 80026e4:	08002713 	.word	0x08002713
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	68b9      	ldr	r1, [r7, #8]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f000 f964 	bl	80029bc <TIM_OC1_SetConfig>
      break;
 80026f4:	e017      	b.n	8002726 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68b9      	ldr	r1, [r7, #8]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f000 f9c3 	bl	8002a88 <TIM_OC2_SetConfig>
      break;
 8002702:	e010      	b.n	8002726 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	68b9      	ldr	r1, [r7, #8]
 800270a:	4618      	mov	r0, r3
 800270c:	f000 fa28 	bl	8002b60 <TIM_OC3_SetConfig>
      break;
 8002710:	e009      	b.n	8002726 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68b9      	ldr	r1, [r7, #8]
 8002718:	4618      	mov	r0, r3
 800271a:	f000 fa8b 	bl	8002c34 <TIM_OC4_SetConfig>
      break;
 800271e:	e002      	b.n	8002726 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	75fb      	strb	r3, [r7, #23]
      break;
 8002724:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800272e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002730:	4618      	mov	r0, r3
 8002732:	3718      	adds	r7, #24
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002744:	2300      	movs	r3, #0
 8002746:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800274e:	2b01      	cmp	r3, #1
 8002750:	d101      	bne.n	8002756 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002752:	2302      	movs	r3, #2
 8002754:	e0ae      	b.n	80028b4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2201      	movs	r2, #1
 800275a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2b0c      	cmp	r3, #12
 8002762:	f200 809f 	bhi.w	80028a4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002766:	a201      	add	r2, pc, #4	; (adr r2, 800276c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800276c:	080027a1 	.word	0x080027a1
 8002770:	080028a5 	.word	0x080028a5
 8002774:	080028a5 	.word	0x080028a5
 8002778:	080028a5 	.word	0x080028a5
 800277c:	080027e1 	.word	0x080027e1
 8002780:	080028a5 	.word	0x080028a5
 8002784:	080028a5 	.word	0x080028a5
 8002788:	080028a5 	.word	0x080028a5
 800278c:	08002823 	.word	0x08002823
 8002790:	080028a5 	.word	0x080028a5
 8002794:	080028a5 	.word	0x080028a5
 8002798:	080028a5 	.word	0x080028a5
 800279c:	08002863 	.word	0x08002863
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68b9      	ldr	r1, [r7, #8]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f000 f908 	bl	80029bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	699a      	ldr	r2, [r3, #24]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f042 0208 	orr.w	r2, r2, #8
 80027ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	699a      	ldr	r2, [r3, #24]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f022 0204 	bic.w	r2, r2, #4
 80027ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	6999      	ldr	r1, [r3, #24]
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	691a      	ldr	r2, [r3, #16]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	430a      	orrs	r2, r1
 80027dc:	619a      	str	r2, [r3, #24]
      break;
 80027de:	e064      	b.n	80028aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	68b9      	ldr	r1, [r7, #8]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f000 f94e 	bl	8002a88 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	699a      	ldr	r2, [r3, #24]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	699a      	ldr	r2, [r3, #24]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800280a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6999      	ldr	r1, [r3, #24]
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	021a      	lsls	r2, r3, #8
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	430a      	orrs	r2, r1
 800281e:	619a      	str	r2, [r3, #24]
      break;
 8002820:	e043      	b.n	80028aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68b9      	ldr	r1, [r7, #8]
 8002828:	4618      	mov	r0, r3
 800282a:	f000 f999 	bl	8002b60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	69da      	ldr	r2, [r3, #28]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f042 0208 	orr.w	r2, r2, #8
 800283c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	69da      	ldr	r2, [r3, #28]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f022 0204 	bic.w	r2, r2, #4
 800284c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	69d9      	ldr	r1, [r3, #28]
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	691a      	ldr	r2, [r3, #16]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	430a      	orrs	r2, r1
 800285e:	61da      	str	r2, [r3, #28]
      break;
 8002860:	e023      	b.n	80028aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	68b9      	ldr	r1, [r7, #8]
 8002868:	4618      	mov	r0, r3
 800286a:	f000 f9e3 	bl	8002c34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	69da      	ldr	r2, [r3, #28]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800287c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	69da      	ldr	r2, [r3, #28]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800288c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	69d9      	ldr	r1, [r3, #28]
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	691b      	ldr	r3, [r3, #16]
 8002898:	021a      	lsls	r2, r3, #8
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	430a      	orrs	r2, r1
 80028a0:	61da      	str	r2, [r3, #28]
      break;
 80028a2:	e002      	b.n	80028aa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	75fb      	strb	r3, [r7, #23]
      break;
 80028a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80028b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3718      	adds	r7, #24
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80028bc:	b480      	push	{r7}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a34      	ldr	r2, [pc, #208]	; (80029a0 <TIM_Base_SetConfig+0xe4>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d00f      	beq.n	80028f4 <TIM_Base_SetConfig+0x38>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028da:	d00b      	beq.n	80028f4 <TIM_Base_SetConfig+0x38>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	4a31      	ldr	r2, [pc, #196]	; (80029a4 <TIM_Base_SetConfig+0xe8>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d007      	beq.n	80028f4 <TIM_Base_SetConfig+0x38>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a30      	ldr	r2, [pc, #192]	; (80029a8 <TIM_Base_SetConfig+0xec>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d003      	beq.n	80028f4 <TIM_Base_SetConfig+0x38>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a2f      	ldr	r2, [pc, #188]	; (80029ac <TIM_Base_SetConfig+0xf0>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d108      	bne.n	8002906 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	68fa      	ldr	r2, [r7, #12]
 8002902:	4313      	orrs	r3, r2
 8002904:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a25      	ldr	r2, [pc, #148]	; (80029a0 <TIM_Base_SetConfig+0xe4>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d01b      	beq.n	8002946 <TIM_Base_SetConfig+0x8a>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002914:	d017      	beq.n	8002946 <TIM_Base_SetConfig+0x8a>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a22      	ldr	r2, [pc, #136]	; (80029a4 <TIM_Base_SetConfig+0xe8>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d013      	beq.n	8002946 <TIM_Base_SetConfig+0x8a>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a21      	ldr	r2, [pc, #132]	; (80029a8 <TIM_Base_SetConfig+0xec>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d00f      	beq.n	8002946 <TIM_Base_SetConfig+0x8a>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a20      	ldr	r2, [pc, #128]	; (80029ac <TIM_Base_SetConfig+0xf0>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d00b      	beq.n	8002946 <TIM_Base_SetConfig+0x8a>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a1f      	ldr	r2, [pc, #124]	; (80029b0 <TIM_Base_SetConfig+0xf4>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d007      	beq.n	8002946 <TIM_Base_SetConfig+0x8a>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a1e      	ldr	r2, [pc, #120]	; (80029b4 <TIM_Base_SetConfig+0xf8>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d003      	beq.n	8002946 <TIM_Base_SetConfig+0x8a>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a1d      	ldr	r2, [pc, #116]	; (80029b8 <TIM_Base_SetConfig+0xfc>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d108      	bne.n	8002958 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800294c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	4313      	orrs	r3, r2
 8002956:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	695b      	ldr	r3, [r3, #20]
 8002962:	4313      	orrs	r3, r2
 8002964:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	689a      	ldr	r2, [r3, #8]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4a08      	ldr	r2, [pc, #32]	; (80029a0 <TIM_Base_SetConfig+0xe4>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d103      	bne.n	800298c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	691a      	ldr	r2, [r3, #16]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	615a      	str	r2, [r3, #20]
}
 8002992:	bf00      	nop
 8002994:	3714      	adds	r7, #20
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	40010000 	.word	0x40010000
 80029a4:	40000400 	.word	0x40000400
 80029a8:	40000800 	.word	0x40000800
 80029ac:	40000c00 	.word	0x40000c00
 80029b0:	40014000 	.word	0x40014000
 80029b4:	40014400 	.word	0x40014400
 80029b8:	40014800 	.word	0x40014800

080029bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029bc:	b480      	push	{r7}
 80029be:	b087      	sub	sp, #28
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	f023 0201 	bic.w	r2, r3, #1
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a1b      	ldr	r3, [r3, #32]
 80029d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f023 0303 	bic.w	r3, r3, #3
 80029f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68fa      	ldr	r2, [r7, #12]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	f023 0302 	bic.w	r3, r3, #2
 8002a04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	697a      	ldr	r2, [r7, #20]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4a1c      	ldr	r2, [pc, #112]	; (8002a84 <TIM_OC1_SetConfig+0xc8>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d10c      	bne.n	8002a32 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	f023 0308 	bic.w	r3, r3, #8
 8002a1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	697a      	ldr	r2, [r7, #20]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	f023 0304 	bic.w	r3, r3, #4
 8002a30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a13      	ldr	r2, [pc, #76]	; (8002a84 <TIM_OC1_SetConfig+0xc8>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d111      	bne.n	8002a5e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	695b      	ldr	r3, [r3, #20]
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	699b      	ldr	r3, [r3, #24]
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	693a      	ldr	r2, [r7, #16]
 8002a62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685a      	ldr	r2, [r3, #4]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	697a      	ldr	r2, [r7, #20]
 8002a76:	621a      	str	r2, [r3, #32]
}
 8002a78:	bf00      	nop
 8002a7a:	371c      	adds	r7, #28
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr
 8002a84:	40010000 	.word	0x40010000

08002a88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b087      	sub	sp, #28
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	f023 0210 	bic.w	r2, r3, #16
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
 8002aa2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ab6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002abe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	021b      	lsls	r3, r3, #8
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	f023 0320 	bic.w	r3, r3, #32
 8002ad2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	011b      	lsls	r3, r3, #4
 8002ada:	697a      	ldr	r2, [r7, #20]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	4a1e      	ldr	r2, [pc, #120]	; (8002b5c <TIM_OC2_SetConfig+0xd4>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d10d      	bne.n	8002b04 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002aee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	011b      	lsls	r3, r3, #4
 8002af6:	697a      	ldr	r2, [r7, #20]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b02:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4a15      	ldr	r2, [pc, #84]	; (8002b5c <TIM_OC2_SetConfig+0xd4>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d113      	bne.n	8002b34 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	695b      	ldr	r3, [r3, #20]
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	693a      	ldr	r2, [r7, #16]
 8002b38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	68fa      	ldr	r2, [r7, #12]
 8002b3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685a      	ldr	r2, [r3, #4]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	697a      	ldr	r2, [r7, #20]
 8002b4c:	621a      	str	r2, [r3, #32]
}
 8002b4e:	bf00      	nop
 8002b50:	371c      	adds	r7, #28
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	40010000 	.word	0x40010000

08002b60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b087      	sub	sp, #28
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a1b      	ldr	r3, [r3, #32]
 8002b6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a1b      	ldr	r3, [r3, #32]
 8002b7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	69db      	ldr	r3, [r3, #28]
 8002b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f023 0303 	bic.w	r3, r3, #3
 8002b96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ba8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	021b      	lsls	r3, r3, #8
 8002bb0:	697a      	ldr	r2, [r7, #20]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a1d      	ldr	r2, [pc, #116]	; (8002c30 <TIM_OC3_SetConfig+0xd0>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d10d      	bne.n	8002bda <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002bc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	021b      	lsls	r3, r3, #8
 8002bcc:	697a      	ldr	r2, [r7, #20]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002bd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a14      	ldr	r2, [pc, #80]	; (8002c30 <TIM_OC3_SetConfig+0xd0>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d113      	bne.n	8002c0a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002be8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002bf0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	011b      	lsls	r3, r3, #4
 8002bf8:	693a      	ldr	r2, [r7, #16]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	011b      	lsls	r3, r3, #4
 8002c04:	693a      	ldr	r2, [r7, #16]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	685a      	ldr	r2, [r3, #4]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	697a      	ldr	r2, [r7, #20]
 8002c22:	621a      	str	r2, [r3, #32]
}
 8002c24:	bf00      	nop
 8002c26:	371c      	adds	r7, #28
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr
 8002c30:	40010000 	.word	0x40010000

08002c34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b087      	sub	sp, #28
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a1b      	ldr	r3, [r3, #32]
 8002c42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a1b      	ldr	r3, [r3, #32]
 8002c4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	69db      	ldr	r3, [r3, #28]
 8002c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	021b      	lsls	r3, r3, #8
 8002c72:	68fa      	ldr	r2, [r7, #12]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	031b      	lsls	r3, r3, #12
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a10      	ldr	r2, [pc, #64]	; (8002cd0 <TIM_OC4_SetConfig+0x9c>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d109      	bne.n	8002ca8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	695b      	ldr	r3, [r3, #20]
 8002ca0:	019b      	lsls	r3, r3, #6
 8002ca2:	697a      	ldr	r2, [r7, #20]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	697a      	ldr	r2, [r7, #20]
 8002cac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	685a      	ldr	r2, [r3, #4]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	621a      	str	r2, [r3, #32]
}
 8002cc2:	bf00      	nop
 8002cc4:	371c      	adds	r7, #28
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	40010000 	.word	0x40010000

08002cd4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b087      	sub	sp, #28
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	f003 031f 	and.w	r3, r3, #31
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6a1a      	ldr	r2, [r3, #32]
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	43db      	mvns	r3, r3
 8002cf6:	401a      	ands	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6a1a      	ldr	r2, [r3, #32]
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	f003 031f 	and.w	r3, r3, #31
 8002d06:	6879      	ldr	r1, [r7, #4]
 8002d08:	fa01 f303 	lsl.w	r3, r1, r3
 8002d0c:	431a      	orrs	r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	621a      	str	r2, [r3, #32]
}
 8002d12:	bf00      	nop
 8002d14:	371c      	adds	r7, #28
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
	...

08002d20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b085      	sub	sp, #20
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d101      	bne.n	8002d38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d34:	2302      	movs	r3, #2
 8002d36:	e050      	b.n	8002dda <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2202      	movs	r2, #2
 8002d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a1c      	ldr	r2, [pc, #112]	; (8002de8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d018      	beq.n	8002dae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d84:	d013      	beq.n	8002dae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a18      	ldr	r2, [pc, #96]	; (8002dec <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d00e      	beq.n	8002dae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a16      	ldr	r2, [pc, #88]	; (8002df0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d009      	beq.n	8002dae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a15      	ldr	r2, [pc, #84]	; (8002df4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d004      	beq.n	8002dae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a13      	ldr	r2, [pc, #76]	; (8002df8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d10c      	bne.n	8002dc8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002db4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	68ba      	ldr	r2, [r7, #8]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68ba      	ldr	r2, [r7, #8]
 8002dc6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3714      	adds	r7, #20
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	40010000 	.word	0x40010000
 8002dec:	40000400 	.word	0x40000400
 8002df0:	40000800 	.word	0x40000800
 8002df4:	40000c00 	.word	0x40000c00
 8002df8:	40014000 	.word	0x40014000

08002dfc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002e06:	2300      	movs	r3, #0
 8002e08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d101      	bne.n	8002e18 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002e14:	2302      	movs	r3, #2
 8002e16:	e03d      	b.n	8002e94 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	695b      	ldr	r3, [r3, #20]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	69db      	ldr	r3, [r3, #28]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68fa      	ldr	r2, [r7, #12]
 8002e88:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e92:	2300      	movs	r3, #0
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3714      	adds	r7, #20
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e03f      	b.n	8002f32 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d106      	bne.n	8002ecc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f7fd ff26 	bl	8000d18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2224      	movs	r2, #36	; 0x24
 8002ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68da      	ldr	r2, [r3, #12]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ee2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f000 f929 	bl	800313c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	691a      	ldr	r2, [r3, #16]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ef8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	695a      	ldr	r2, [r3, #20]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68da      	ldr	r2, [r3, #12]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2220      	movs	r2, #32
 8002f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2220      	movs	r2, #32
 8002f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3708      	adds	r7, #8
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b08a      	sub	sp, #40	; 0x28
 8002f3e:	af02      	add	r7, sp, #8
 8002f40:	60f8      	str	r0, [r7, #12]
 8002f42:	60b9      	str	r1, [r7, #8]
 8002f44:	603b      	str	r3, [r7, #0]
 8002f46:	4613      	mov	r3, r2
 8002f48:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b20      	cmp	r3, #32
 8002f58:	d17c      	bne.n	8003054 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d002      	beq.n	8002f66 <HAL_UART_Transmit+0x2c>
 8002f60:	88fb      	ldrh	r3, [r7, #6]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e075      	b.n	8003056 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d101      	bne.n	8002f78 <HAL_UART_Transmit+0x3e>
 8002f74:	2302      	movs	r3, #2
 8002f76:	e06e      	b.n	8003056 <HAL_UART_Transmit+0x11c>
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2200      	movs	r2, #0
 8002f84:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2221      	movs	r2, #33	; 0x21
 8002f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f8e:	f7fe f87b 	bl	8001088 <HAL_GetTick>
 8002f92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	88fa      	ldrh	r2, [r7, #6]
 8002f98:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	88fa      	ldrh	r2, [r7, #6]
 8002f9e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fa8:	d108      	bne.n	8002fbc <HAL_UART_Transmit+0x82>
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d104      	bne.n	8002fbc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	61bb      	str	r3, [r7, #24]
 8002fba:	e003      	b.n	8002fc4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002fcc:	e02a      	b.n	8003024 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	9300      	str	r3, [sp, #0]
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	2180      	movs	r1, #128	; 0x80
 8002fd8:	68f8      	ldr	r0, [r7, #12]
 8002fda:	f000 f840 	bl	800305e <UART_WaitOnFlagUntilTimeout>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d001      	beq.n	8002fe8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e036      	b.n	8003056 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d10b      	bne.n	8003006 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	881b      	ldrh	r3, [r3, #0]
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ffc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	3302      	adds	r3, #2
 8003002:	61bb      	str	r3, [r7, #24]
 8003004:	e007      	b.n	8003016 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	781a      	ldrb	r2, [r3, #0]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	3301      	adds	r3, #1
 8003014:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800301a:	b29b      	uxth	r3, r3
 800301c:	3b01      	subs	r3, #1
 800301e:	b29a      	uxth	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003028:	b29b      	uxth	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1cf      	bne.n	8002fce <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	9300      	str	r3, [sp, #0]
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	2200      	movs	r2, #0
 8003036:	2140      	movs	r1, #64	; 0x40
 8003038:	68f8      	ldr	r0, [r7, #12]
 800303a:	f000 f810 	bl	800305e <UART_WaitOnFlagUntilTimeout>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d001      	beq.n	8003048 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e006      	b.n	8003056 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2220      	movs	r2, #32
 800304c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003050:	2300      	movs	r3, #0
 8003052:	e000      	b.n	8003056 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003054:	2302      	movs	r3, #2
  }
}
 8003056:	4618      	mov	r0, r3
 8003058:	3720      	adds	r7, #32
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b090      	sub	sp, #64	; 0x40
 8003062:	af00      	add	r7, sp, #0
 8003064:	60f8      	str	r0, [r7, #12]
 8003066:	60b9      	str	r1, [r7, #8]
 8003068:	603b      	str	r3, [r7, #0]
 800306a:	4613      	mov	r3, r2
 800306c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800306e:	e050      	b.n	8003112 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003070:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003072:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003076:	d04c      	beq.n	8003112 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003078:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800307a:	2b00      	cmp	r3, #0
 800307c:	d007      	beq.n	800308e <UART_WaitOnFlagUntilTimeout+0x30>
 800307e:	f7fe f803 	bl	8001088 <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800308a:	429a      	cmp	r2, r3
 800308c:	d241      	bcs.n	8003112 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	330c      	adds	r3, #12
 8003094:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003098:	e853 3f00 	ldrex	r3, [r3]
 800309c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800309e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80030a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	330c      	adds	r3, #12
 80030ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80030ae:	637a      	str	r2, [r7, #52]	; 0x34
 80030b0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030b6:	e841 2300 	strex	r3, r2, [r1]
 80030ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80030bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1e5      	bne.n	800308e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	3314      	adds	r3, #20
 80030c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	e853 3f00 	ldrex	r3, [r3]
 80030d0:	613b      	str	r3, [r7, #16]
   return(result);
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	f023 0301 	bic.w	r3, r3, #1
 80030d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	3314      	adds	r3, #20
 80030e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030e2:	623a      	str	r2, [r7, #32]
 80030e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030e6:	69f9      	ldr	r1, [r7, #28]
 80030e8:	6a3a      	ldr	r2, [r7, #32]
 80030ea:	e841 2300 	strex	r3, r2, [r1]
 80030ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1e5      	bne.n	80030c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2220      	movs	r2, #32
 80030fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2220      	movs	r2, #32
 8003102:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e00f      	b.n	8003132 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	4013      	ands	r3, r2
 800311c:	68ba      	ldr	r2, [r7, #8]
 800311e:	429a      	cmp	r2, r3
 8003120:	bf0c      	ite	eq
 8003122:	2301      	moveq	r3, #1
 8003124:	2300      	movne	r3, #0
 8003126:	b2db      	uxtb	r3, r3
 8003128:	461a      	mov	r2, r3
 800312a:	79fb      	ldrb	r3, [r7, #7]
 800312c:	429a      	cmp	r2, r3
 800312e:	d09f      	beq.n	8003070 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	3740      	adds	r7, #64	; 0x40
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
	...

0800313c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800313c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003140:	b0c0      	sub	sp, #256	; 0x100
 8003142:	af00      	add	r7, sp, #0
 8003144:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	691b      	ldr	r3, [r3, #16]
 8003150:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003158:	68d9      	ldr	r1, [r3, #12]
 800315a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	ea40 0301 	orr.w	r3, r0, r1
 8003164:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800316a:	689a      	ldr	r2, [r3, #8]
 800316c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	431a      	orrs	r2, r3
 8003174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	431a      	orrs	r2, r3
 800317c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003180:	69db      	ldr	r3, [r3, #28]
 8003182:	4313      	orrs	r3, r2
 8003184:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003194:	f021 010c 	bic.w	r1, r1, #12
 8003198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80031a2:	430b      	orrs	r3, r1
 80031a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80031b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031b6:	6999      	ldr	r1, [r3, #24]
 80031b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	ea40 0301 	orr.w	r3, r0, r1
 80031c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80031c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	4b8f      	ldr	r3, [pc, #572]	; (8003408 <UART_SetConfig+0x2cc>)
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d005      	beq.n	80031dc <UART_SetConfig+0xa0>
 80031d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	4b8d      	ldr	r3, [pc, #564]	; (800340c <UART_SetConfig+0x2d0>)
 80031d8:	429a      	cmp	r2, r3
 80031da:	d104      	bne.n	80031e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80031dc:	f7ff f8d8 	bl	8002390 <HAL_RCC_GetPCLK2Freq>
 80031e0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80031e4:	e003      	b.n	80031ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80031e6:	f7ff f8bf 	bl	8002368 <HAL_RCC_GetPCLK1Freq>
 80031ea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031f2:	69db      	ldr	r3, [r3, #28]
 80031f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031f8:	f040 810c 	bne.w	8003414 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80031fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003200:	2200      	movs	r2, #0
 8003202:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003206:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800320a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800320e:	4622      	mov	r2, r4
 8003210:	462b      	mov	r3, r5
 8003212:	1891      	adds	r1, r2, r2
 8003214:	65b9      	str	r1, [r7, #88]	; 0x58
 8003216:	415b      	adcs	r3, r3
 8003218:	65fb      	str	r3, [r7, #92]	; 0x5c
 800321a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800321e:	4621      	mov	r1, r4
 8003220:	eb12 0801 	adds.w	r8, r2, r1
 8003224:	4629      	mov	r1, r5
 8003226:	eb43 0901 	adc.w	r9, r3, r1
 800322a:	f04f 0200 	mov.w	r2, #0
 800322e:	f04f 0300 	mov.w	r3, #0
 8003232:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003236:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800323a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800323e:	4690      	mov	r8, r2
 8003240:	4699      	mov	r9, r3
 8003242:	4623      	mov	r3, r4
 8003244:	eb18 0303 	adds.w	r3, r8, r3
 8003248:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800324c:	462b      	mov	r3, r5
 800324e:	eb49 0303 	adc.w	r3, r9, r3
 8003252:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003262:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003266:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800326a:	460b      	mov	r3, r1
 800326c:	18db      	adds	r3, r3, r3
 800326e:	653b      	str	r3, [r7, #80]	; 0x50
 8003270:	4613      	mov	r3, r2
 8003272:	eb42 0303 	adc.w	r3, r2, r3
 8003276:	657b      	str	r3, [r7, #84]	; 0x54
 8003278:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800327c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003280:	f7fc ffaa 	bl	80001d8 <__aeabi_uldivmod>
 8003284:	4602      	mov	r2, r0
 8003286:	460b      	mov	r3, r1
 8003288:	4b61      	ldr	r3, [pc, #388]	; (8003410 <UART_SetConfig+0x2d4>)
 800328a:	fba3 2302 	umull	r2, r3, r3, r2
 800328e:	095b      	lsrs	r3, r3, #5
 8003290:	011c      	lsls	r4, r3, #4
 8003292:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003296:	2200      	movs	r2, #0
 8003298:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800329c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80032a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80032a4:	4642      	mov	r2, r8
 80032a6:	464b      	mov	r3, r9
 80032a8:	1891      	adds	r1, r2, r2
 80032aa:	64b9      	str	r1, [r7, #72]	; 0x48
 80032ac:	415b      	adcs	r3, r3
 80032ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80032b4:	4641      	mov	r1, r8
 80032b6:	eb12 0a01 	adds.w	sl, r2, r1
 80032ba:	4649      	mov	r1, r9
 80032bc:	eb43 0b01 	adc.w	fp, r3, r1
 80032c0:	f04f 0200 	mov.w	r2, #0
 80032c4:	f04f 0300 	mov.w	r3, #0
 80032c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80032cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80032d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032d4:	4692      	mov	sl, r2
 80032d6:	469b      	mov	fp, r3
 80032d8:	4643      	mov	r3, r8
 80032da:	eb1a 0303 	adds.w	r3, sl, r3
 80032de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80032e2:	464b      	mov	r3, r9
 80032e4:	eb4b 0303 	adc.w	r3, fp, r3
 80032e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80032ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80032f8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80032fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003300:	460b      	mov	r3, r1
 8003302:	18db      	adds	r3, r3, r3
 8003304:	643b      	str	r3, [r7, #64]	; 0x40
 8003306:	4613      	mov	r3, r2
 8003308:	eb42 0303 	adc.w	r3, r2, r3
 800330c:	647b      	str	r3, [r7, #68]	; 0x44
 800330e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003312:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003316:	f7fc ff5f 	bl	80001d8 <__aeabi_uldivmod>
 800331a:	4602      	mov	r2, r0
 800331c:	460b      	mov	r3, r1
 800331e:	4611      	mov	r1, r2
 8003320:	4b3b      	ldr	r3, [pc, #236]	; (8003410 <UART_SetConfig+0x2d4>)
 8003322:	fba3 2301 	umull	r2, r3, r3, r1
 8003326:	095b      	lsrs	r3, r3, #5
 8003328:	2264      	movs	r2, #100	; 0x64
 800332a:	fb02 f303 	mul.w	r3, r2, r3
 800332e:	1acb      	subs	r3, r1, r3
 8003330:	00db      	lsls	r3, r3, #3
 8003332:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003336:	4b36      	ldr	r3, [pc, #216]	; (8003410 <UART_SetConfig+0x2d4>)
 8003338:	fba3 2302 	umull	r2, r3, r3, r2
 800333c:	095b      	lsrs	r3, r3, #5
 800333e:	005b      	lsls	r3, r3, #1
 8003340:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003344:	441c      	add	r4, r3
 8003346:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800334a:	2200      	movs	r2, #0
 800334c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003350:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003354:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003358:	4642      	mov	r2, r8
 800335a:	464b      	mov	r3, r9
 800335c:	1891      	adds	r1, r2, r2
 800335e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003360:	415b      	adcs	r3, r3
 8003362:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003364:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003368:	4641      	mov	r1, r8
 800336a:	1851      	adds	r1, r2, r1
 800336c:	6339      	str	r1, [r7, #48]	; 0x30
 800336e:	4649      	mov	r1, r9
 8003370:	414b      	adcs	r3, r1
 8003372:	637b      	str	r3, [r7, #52]	; 0x34
 8003374:	f04f 0200 	mov.w	r2, #0
 8003378:	f04f 0300 	mov.w	r3, #0
 800337c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003380:	4659      	mov	r1, fp
 8003382:	00cb      	lsls	r3, r1, #3
 8003384:	4651      	mov	r1, sl
 8003386:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800338a:	4651      	mov	r1, sl
 800338c:	00ca      	lsls	r2, r1, #3
 800338e:	4610      	mov	r0, r2
 8003390:	4619      	mov	r1, r3
 8003392:	4603      	mov	r3, r0
 8003394:	4642      	mov	r2, r8
 8003396:	189b      	adds	r3, r3, r2
 8003398:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800339c:	464b      	mov	r3, r9
 800339e:	460a      	mov	r2, r1
 80033a0:	eb42 0303 	adc.w	r3, r2, r3
 80033a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80033a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80033b4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80033b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80033bc:	460b      	mov	r3, r1
 80033be:	18db      	adds	r3, r3, r3
 80033c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80033c2:	4613      	mov	r3, r2
 80033c4:	eb42 0303 	adc.w	r3, r2, r3
 80033c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80033ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80033d2:	f7fc ff01 	bl	80001d8 <__aeabi_uldivmod>
 80033d6:	4602      	mov	r2, r0
 80033d8:	460b      	mov	r3, r1
 80033da:	4b0d      	ldr	r3, [pc, #52]	; (8003410 <UART_SetConfig+0x2d4>)
 80033dc:	fba3 1302 	umull	r1, r3, r3, r2
 80033e0:	095b      	lsrs	r3, r3, #5
 80033e2:	2164      	movs	r1, #100	; 0x64
 80033e4:	fb01 f303 	mul.w	r3, r1, r3
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	00db      	lsls	r3, r3, #3
 80033ec:	3332      	adds	r3, #50	; 0x32
 80033ee:	4a08      	ldr	r2, [pc, #32]	; (8003410 <UART_SetConfig+0x2d4>)
 80033f0:	fba2 2303 	umull	r2, r3, r2, r3
 80033f4:	095b      	lsrs	r3, r3, #5
 80033f6:	f003 0207 	and.w	r2, r3, #7
 80033fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4422      	add	r2, r4
 8003402:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003404:	e105      	b.n	8003612 <UART_SetConfig+0x4d6>
 8003406:	bf00      	nop
 8003408:	40011000 	.word	0x40011000
 800340c:	40011400 	.word	0x40011400
 8003410:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003414:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003418:	2200      	movs	r2, #0
 800341a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800341e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003422:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003426:	4642      	mov	r2, r8
 8003428:	464b      	mov	r3, r9
 800342a:	1891      	adds	r1, r2, r2
 800342c:	6239      	str	r1, [r7, #32]
 800342e:	415b      	adcs	r3, r3
 8003430:	627b      	str	r3, [r7, #36]	; 0x24
 8003432:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003436:	4641      	mov	r1, r8
 8003438:	1854      	adds	r4, r2, r1
 800343a:	4649      	mov	r1, r9
 800343c:	eb43 0501 	adc.w	r5, r3, r1
 8003440:	f04f 0200 	mov.w	r2, #0
 8003444:	f04f 0300 	mov.w	r3, #0
 8003448:	00eb      	lsls	r3, r5, #3
 800344a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800344e:	00e2      	lsls	r2, r4, #3
 8003450:	4614      	mov	r4, r2
 8003452:	461d      	mov	r5, r3
 8003454:	4643      	mov	r3, r8
 8003456:	18e3      	adds	r3, r4, r3
 8003458:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800345c:	464b      	mov	r3, r9
 800345e:	eb45 0303 	adc.w	r3, r5, r3
 8003462:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003472:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003476:	f04f 0200 	mov.w	r2, #0
 800347a:	f04f 0300 	mov.w	r3, #0
 800347e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003482:	4629      	mov	r1, r5
 8003484:	008b      	lsls	r3, r1, #2
 8003486:	4621      	mov	r1, r4
 8003488:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800348c:	4621      	mov	r1, r4
 800348e:	008a      	lsls	r2, r1, #2
 8003490:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003494:	f7fc fea0 	bl	80001d8 <__aeabi_uldivmod>
 8003498:	4602      	mov	r2, r0
 800349a:	460b      	mov	r3, r1
 800349c:	4b60      	ldr	r3, [pc, #384]	; (8003620 <UART_SetConfig+0x4e4>)
 800349e:	fba3 2302 	umull	r2, r3, r3, r2
 80034a2:	095b      	lsrs	r3, r3, #5
 80034a4:	011c      	lsls	r4, r3, #4
 80034a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034aa:	2200      	movs	r2, #0
 80034ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80034b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80034b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80034b8:	4642      	mov	r2, r8
 80034ba:	464b      	mov	r3, r9
 80034bc:	1891      	adds	r1, r2, r2
 80034be:	61b9      	str	r1, [r7, #24]
 80034c0:	415b      	adcs	r3, r3
 80034c2:	61fb      	str	r3, [r7, #28]
 80034c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034c8:	4641      	mov	r1, r8
 80034ca:	1851      	adds	r1, r2, r1
 80034cc:	6139      	str	r1, [r7, #16]
 80034ce:	4649      	mov	r1, r9
 80034d0:	414b      	adcs	r3, r1
 80034d2:	617b      	str	r3, [r7, #20]
 80034d4:	f04f 0200 	mov.w	r2, #0
 80034d8:	f04f 0300 	mov.w	r3, #0
 80034dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034e0:	4659      	mov	r1, fp
 80034e2:	00cb      	lsls	r3, r1, #3
 80034e4:	4651      	mov	r1, sl
 80034e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034ea:	4651      	mov	r1, sl
 80034ec:	00ca      	lsls	r2, r1, #3
 80034ee:	4610      	mov	r0, r2
 80034f0:	4619      	mov	r1, r3
 80034f2:	4603      	mov	r3, r0
 80034f4:	4642      	mov	r2, r8
 80034f6:	189b      	adds	r3, r3, r2
 80034f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80034fc:	464b      	mov	r3, r9
 80034fe:	460a      	mov	r2, r1
 8003500:	eb42 0303 	adc.w	r3, r2, r3
 8003504:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	67bb      	str	r3, [r7, #120]	; 0x78
 8003512:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003514:	f04f 0200 	mov.w	r2, #0
 8003518:	f04f 0300 	mov.w	r3, #0
 800351c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003520:	4649      	mov	r1, r9
 8003522:	008b      	lsls	r3, r1, #2
 8003524:	4641      	mov	r1, r8
 8003526:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800352a:	4641      	mov	r1, r8
 800352c:	008a      	lsls	r2, r1, #2
 800352e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003532:	f7fc fe51 	bl	80001d8 <__aeabi_uldivmod>
 8003536:	4602      	mov	r2, r0
 8003538:	460b      	mov	r3, r1
 800353a:	4b39      	ldr	r3, [pc, #228]	; (8003620 <UART_SetConfig+0x4e4>)
 800353c:	fba3 1302 	umull	r1, r3, r3, r2
 8003540:	095b      	lsrs	r3, r3, #5
 8003542:	2164      	movs	r1, #100	; 0x64
 8003544:	fb01 f303 	mul.w	r3, r1, r3
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	011b      	lsls	r3, r3, #4
 800354c:	3332      	adds	r3, #50	; 0x32
 800354e:	4a34      	ldr	r2, [pc, #208]	; (8003620 <UART_SetConfig+0x4e4>)
 8003550:	fba2 2303 	umull	r2, r3, r2, r3
 8003554:	095b      	lsrs	r3, r3, #5
 8003556:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800355a:	441c      	add	r4, r3
 800355c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003560:	2200      	movs	r2, #0
 8003562:	673b      	str	r3, [r7, #112]	; 0x70
 8003564:	677a      	str	r2, [r7, #116]	; 0x74
 8003566:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800356a:	4642      	mov	r2, r8
 800356c:	464b      	mov	r3, r9
 800356e:	1891      	adds	r1, r2, r2
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	415b      	adcs	r3, r3
 8003574:	60fb      	str	r3, [r7, #12]
 8003576:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800357a:	4641      	mov	r1, r8
 800357c:	1851      	adds	r1, r2, r1
 800357e:	6039      	str	r1, [r7, #0]
 8003580:	4649      	mov	r1, r9
 8003582:	414b      	adcs	r3, r1
 8003584:	607b      	str	r3, [r7, #4]
 8003586:	f04f 0200 	mov.w	r2, #0
 800358a:	f04f 0300 	mov.w	r3, #0
 800358e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003592:	4659      	mov	r1, fp
 8003594:	00cb      	lsls	r3, r1, #3
 8003596:	4651      	mov	r1, sl
 8003598:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800359c:	4651      	mov	r1, sl
 800359e:	00ca      	lsls	r2, r1, #3
 80035a0:	4610      	mov	r0, r2
 80035a2:	4619      	mov	r1, r3
 80035a4:	4603      	mov	r3, r0
 80035a6:	4642      	mov	r2, r8
 80035a8:	189b      	adds	r3, r3, r2
 80035aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80035ac:	464b      	mov	r3, r9
 80035ae:	460a      	mov	r2, r1
 80035b0:	eb42 0303 	adc.w	r3, r2, r3
 80035b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80035b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	663b      	str	r3, [r7, #96]	; 0x60
 80035c0:	667a      	str	r2, [r7, #100]	; 0x64
 80035c2:	f04f 0200 	mov.w	r2, #0
 80035c6:	f04f 0300 	mov.w	r3, #0
 80035ca:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80035ce:	4649      	mov	r1, r9
 80035d0:	008b      	lsls	r3, r1, #2
 80035d2:	4641      	mov	r1, r8
 80035d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035d8:	4641      	mov	r1, r8
 80035da:	008a      	lsls	r2, r1, #2
 80035dc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80035e0:	f7fc fdfa 	bl	80001d8 <__aeabi_uldivmod>
 80035e4:	4602      	mov	r2, r0
 80035e6:	460b      	mov	r3, r1
 80035e8:	4b0d      	ldr	r3, [pc, #52]	; (8003620 <UART_SetConfig+0x4e4>)
 80035ea:	fba3 1302 	umull	r1, r3, r3, r2
 80035ee:	095b      	lsrs	r3, r3, #5
 80035f0:	2164      	movs	r1, #100	; 0x64
 80035f2:	fb01 f303 	mul.w	r3, r1, r3
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	011b      	lsls	r3, r3, #4
 80035fa:	3332      	adds	r3, #50	; 0x32
 80035fc:	4a08      	ldr	r2, [pc, #32]	; (8003620 <UART_SetConfig+0x4e4>)
 80035fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003602:	095b      	lsrs	r3, r3, #5
 8003604:	f003 020f 	and.w	r2, r3, #15
 8003608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4422      	add	r2, r4
 8003610:	609a      	str	r2, [r3, #8]
}
 8003612:	bf00      	nop
 8003614:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003618:	46bd      	mov	sp, r7
 800361a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800361e:	bf00      	nop
 8003620:	51eb851f 	.word	0x51eb851f

08003624 <__errno>:
 8003624:	4b01      	ldr	r3, [pc, #4]	; (800362c <__errno+0x8>)
 8003626:	6818      	ldr	r0, [r3, #0]
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	2000000c 	.word	0x2000000c

08003630 <__libc_init_array>:
 8003630:	b570      	push	{r4, r5, r6, lr}
 8003632:	4d0d      	ldr	r5, [pc, #52]	; (8003668 <__libc_init_array+0x38>)
 8003634:	4c0d      	ldr	r4, [pc, #52]	; (800366c <__libc_init_array+0x3c>)
 8003636:	1b64      	subs	r4, r4, r5
 8003638:	10a4      	asrs	r4, r4, #2
 800363a:	2600      	movs	r6, #0
 800363c:	42a6      	cmp	r6, r4
 800363e:	d109      	bne.n	8003654 <__libc_init_array+0x24>
 8003640:	4d0b      	ldr	r5, [pc, #44]	; (8003670 <__libc_init_array+0x40>)
 8003642:	4c0c      	ldr	r4, [pc, #48]	; (8003674 <__libc_init_array+0x44>)
 8003644:	f000 fd1e 	bl	8004084 <_init>
 8003648:	1b64      	subs	r4, r4, r5
 800364a:	10a4      	asrs	r4, r4, #2
 800364c:	2600      	movs	r6, #0
 800364e:	42a6      	cmp	r6, r4
 8003650:	d105      	bne.n	800365e <__libc_init_array+0x2e>
 8003652:	bd70      	pop	{r4, r5, r6, pc}
 8003654:	f855 3b04 	ldr.w	r3, [r5], #4
 8003658:	4798      	blx	r3
 800365a:	3601      	adds	r6, #1
 800365c:	e7ee      	b.n	800363c <__libc_init_array+0xc>
 800365e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003662:	4798      	blx	r3
 8003664:	3601      	adds	r6, #1
 8003666:	e7f2      	b.n	800364e <__libc_init_array+0x1e>
 8003668:	08004134 	.word	0x08004134
 800366c:	08004134 	.word	0x08004134
 8003670:	08004134 	.word	0x08004134
 8003674:	08004138 	.word	0x08004138

08003678 <memset>:
 8003678:	4402      	add	r2, r0
 800367a:	4603      	mov	r3, r0
 800367c:	4293      	cmp	r3, r2
 800367e:	d100      	bne.n	8003682 <memset+0xa>
 8003680:	4770      	bx	lr
 8003682:	f803 1b01 	strb.w	r1, [r3], #1
 8003686:	e7f9      	b.n	800367c <memset+0x4>

08003688 <_puts_r>:
 8003688:	b570      	push	{r4, r5, r6, lr}
 800368a:	460e      	mov	r6, r1
 800368c:	4605      	mov	r5, r0
 800368e:	b118      	cbz	r0, 8003698 <_puts_r+0x10>
 8003690:	6983      	ldr	r3, [r0, #24]
 8003692:	b90b      	cbnz	r3, 8003698 <_puts_r+0x10>
 8003694:	f000 fa48 	bl	8003b28 <__sinit>
 8003698:	69ab      	ldr	r3, [r5, #24]
 800369a:	68ac      	ldr	r4, [r5, #8]
 800369c:	b913      	cbnz	r3, 80036a4 <_puts_r+0x1c>
 800369e:	4628      	mov	r0, r5
 80036a0:	f000 fa42 	bl	8003b28 <__sinit>
 80036a4:	4b2c      	ldr	r3, [pc, #176]	; (8003758 <_puts_r+0xd0>)
 80036a6:	429c      	cmp	r4, r3
 80036a8:	d120      	bne.n	80036ec <_puts_r+0x64>
 80036aa:	686c      	ldr	r4, [r5, #4]
 80036ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80036ae:	07db      	lsls	r3, r3, #31
 80036b0:	d405      	bmi.n	80036be <_puts_r+0x36>
 80036b2:	89a3      	ldrh	r3, [r4, #12]
 80036b4:	0598      	lsls	r0, r3, #22
 80036b6:	d402      	bmi.n	80036be <_puts_r+0x36>
 80036b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036ba:	f000 fad3 	bl	8003c64 <__retarget_lock_acquire_recursive>
 80036be:	89a3      	ldrh	r3, [r4, #12]
 80036c0:	0719      	lsls	r1, r3, #28
 80036c2:	d51d      	bpl.n	8003700 <_puts_r+0x78>
 80036c4:	6923      	ldr	r3, [r4, #16]
 80036c6:	b1db      	cbz	r3, 8003700 <_puts_r+0x78>
 80036c8:	3e01      	subs	r6, #1
 80036ca:	68a3      	ldr	r3, [r4, #8]
 80036cc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80036d0:	3b01      	subs	r3, #1
 80036d2:	60a3      	str	r3, [r4, #8]
 80036d4:	bb39      	cbnz	r1, 8003726 <_puts_r+0x9e>
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	da38      	bge.n	800374c <_puts_r+0xc4>
 80036da:	4622      	mov	r2, r4
 80036dc:	210a      	movs	r1, #10
 80036de:	4628      	mov	r0, r5
 80036e0:	f000 f848 	bl	8003774 <__swbuf_r>
 80036e4:	3001      	adds	r0, #1
 80036e6:	d011      	beq.n	800370c <_puts_r+0x84>
 80036e8:	250a      	movs	r5, #10
 80036ea:	e011      	b.n	8003710 <_puts_r+0x88>
 80036ec:	4b1b      	ldr	r3, [pc, #108]	; (800375c <_puts_r+0xd4>)
 80036ee:	429c      	cmp	r4, r3
 80036f0:	d101      	bne.n	80036f6 <_puts_r+0x6e>
 80036f2:	68ac      	ldr	r4, [r5, #8]
 80036f4:	e7da      	b.n	80036ac <_puts_r+0x24>
 80036f6:	4b1a      	ldr	r3, [pc, #104]	; (8003760 <_puts_r+0xd8>)
 80036f8:	429c      	cmp	r4, r3
 80036fa:	bf08      	it	eq
 80036fc:	68ec      	ldreq	r4, [r5, #12]
 80036fe:	e7d5      	b.n	80036ac <_puts_r+0x24>
 8003700:	4621      	mov	r1, r4
 8003702:	4628      	mov	r0, r5
 8003704:	f000 f888 	bl	8003818 <__swsetup_r>
 8003708:	2800      	cmp	r0, #0
 800370a:	d0dd      	beq.n	80036c8 <_puts_r+0x40>
 800370c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003710:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003712:	07da      	lsls	r2, r3, #31
 8003714:	d405      	bmi.n	8003722 <_puts_r+0x9a>
 8003716:	89a3      	ldrh	r3, [r4, #12]
 8003718:	059b      	lsls	r3, r3, #22
 800371a:	d402      	bmi.n	8003722 <_puts_r+0x9a>
 800371c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800371e:	f000 faa2 	bl	8003c66 <__retarget_lock_release_recursive>
 8003722:	4628      	mov	r0, r5
 8003724:	bd70      	pop	{r4, r5, r6, pc}
 8003726:	2b00      	cmp	r3, #0
 8003728:	da04      	bge.n	8003734 <_puts_r+0xac>
 800372a:	69a2      	ldr	r2, [r4, #24]
 800372c:	429a      	cmp	r2, r3
 800372e:	dc06      	bgt.n	800373e <_puts_r+0xb6>
 8003730:	290a      	cmp	r1, #10
 8003732:	d004      	beq.n	800373e <_puts_r+0xb6>
 8003734:	6823      	ldr	r3, [r4, #0]
 8003736:	1c5a      	adds	r2, r3, #1
 8003738:	6022      	str	r2, [r4, #0]
 800373a:	7019      	strb	r1, [r3, #0]
 800373c:	e7c5      	b.n	80036ca <_puts_r+0x42>
 800373e:	4622      	mov	r2, r4
 8003740:	4628      	mov	r0, r5
 8003742:	f000 f817 	bl	8003774 <__swbuf_r>
 8003746:	3001      	adds	r0, #1
 8003748:	d1bf      	bne.n	80036ca <_puts_r+0x42>
 800374a:	e7df      	b.n	800370c <_puts_r+0x84>
 800374c:	6823      	ldr	r3, [r4, #0]
 800374e:	250a      	movs	r5, #10
 8003750:	1c5a      	adds	r2, r3, #1
 8003752:	6022      	str	r2, [r4, #0]
 8003754:	701d      	strb	r5, [r3, #0]
 8003756:	e7db      	b.n	8003710 <_puts_r+0x88>
 8003758:	080040ec 	.word	0x080040ec
 800375c:	0800410c 	.word	0x0800410c
 8003760:	080040cc 	.word	0x080040cc

08003764 <puts>:
 8003764:	4b02      	ldr	r3, [pc, #8]	; (8003770 <puts+0xc>)
 8003766:	4601      	mov	r1, r0
 8003768:	6818      	ldr	r0, [r3, #0]
 800376a:	f7ff bf8d 	b.w	8003688 <_puts_r>
 800376e:	bf00      	nop
 8003770:	2000000c 	.word	0x2000000c

08003774 <__swbuf_r>:
 8003774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003776:	460e      	mov	r6, r1
 8003778:	4614      	mov	r4, r2
 800377a:	4605      	mov	r5, r0
 800377c:	b118      	cbz	r0, 8003786 <__swbuf_r+0x12>
 800377e:	6983      	ldr	r3, [r0, #24]
 8003780:	b90b      	cbnz	r3, 8003786 <__swbuf_r+0x12>
 8003782:	f000 f9d1 	bl	8003b28 <__sinit>
 8003786:	4b21      	ldr	r3, [pc, #132]	; (800380c <__swbuf_r+0x98>)
 8003788:	429c      	cmp	r4, r3
 800378a:	d12b      	bne.n	80037e4 <__swbuf_r+0x70>
 800378c:	686c      	ldr	r4, [r5, #4]
 800378e:	69a3      	ldr	r3, [r4, #24]
 8003790:	60a3      	str	r3, [r4, #8]
 8003792:	89a3      	ldrh	r3, [r4, #12]
 8003794:	071a      	lsls	r2, r3, #28
 8003796:	d52f      	bpl.n	80037f8 <__swbuf_r+0x84>
 8003798:	6923      	ldr	r3, [r4, #16]
 800379a:	b36b      	cbz	r3, 80037f8 <__swbuf_r+0x84>
 800379c:	6923      	ldr	r3, [r4, #16]
 800379e:	6820      	ldr	r0, [r4, #0]
 80037a0:	1ac0      	subs	r0, r0, r3
 80037a2:	6963      	ldr	r3, [r4, #20]
 80037a4:	b2f6      	uxtb	r6, r6
 80037a6:	4283      	cmp	r3, r0
 80037a8:	4637      	mov	r7, r6
 80037aa:	dc04      	bgt.n	80037b6 <__swbuf_r+0x42>
 80037ac:	4621      	mov	r1, r4
 80037ae:	4628      	mov	r0, r5
 80037b0:	f000 f926 	bl	8003a00 <_fflush_r>
 80037b4:	bb30      	cbnz	r0, 8003804 <__swbuf_r+0x90>
 80037b6:	68a3      	ldr	r3, [r4, #8]
 80037b8:	3b01      	subs	r3, #1
 80037ba:	60a3      	str	r3, [r4, #8]
 80037bc:	6823      	ldr	r3, [r4, #0]
 80037be:	1c5a      	adds	r2, r3, #1
 80037c0:	6022      	str	r2, [r4, #0]
 80037c2:	701e      	strb	r6, [r3, #0]
 80037c4:	6963      	ldr	r3, [r4, #20]
 80037c6:	3001      	adds	r0, #1
 80037c8:	4283      	cmp	r3, r0
 80037ca:	d004      	beq.n	80037d6 <__swbuf_r+0x62>
 80037cc:	89a3      	ldrh	r3, [r4, #12]
 80037ce:	07db      	lsls	r3, r3, #31
 80037d0:	d506      	bpl.n	80037e0 <__swbuf_r+0x6c>
 80037d2:	2e0a      	cmp	r6, #10
 80037d4:	d104      	bne.n	80037e0 <__swbuf_r+0x6c>
 80037d6:	4621      	mov	r1, r4
 80037d8:	4628      	mov	r0, r5
 80037da:	f000 f911 	bl	8003a00 <_fflush_r>
 80037de:	b988      	cbnz	r0, 8003804 <__swbuf_r+0x90>
 80037e0:	4638      	mov	r0, r7
 80037e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037e4:	4b0a      	ldr	r3, [pc, #40]	; (8003810 <__swbuf_r+0x9c>)
 80037e6:	429c      	cmp	r4, r3
 80037e8:	d101      	bne.n	80037ee <__swbuf_r+0x7a>
 80037ea:	68ac      	ldr	r4, [r5, #8]
 80037ec:	e7cf      	b.n	800378e <__swbuf_r+0x1a>
 80037ee:	4b09      	ldr	r3, [pc, #36]	; (8003814 <__swbuf_r+0xa0>)
 80037f0:	429c      	cmp	r4, r3
 80037f2:	bf08      	it	eq
 80037f4:	68ec      	ldreq	r4, [r5, #12]
 80037f6:	e7ca      	b.n	800378e <__swbuf_r+0x1a>
 80037f8:	4621      	mov	r1, r4
 80037fa:	4628      	mov	r0, r5
 80037fc:	f000 f80c 	bl	8003818 <__swsetup_r>
 8003800:	2800      	cmp	r0, #0
 8003802:	d0cb      	beq.n	800379c <__swbuf_r+0x28>
 8003804:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003808:	e7ea      	b.n	80037e0 <__swbuf_r+0x6c>
 800380a:	bf00      	nop
 800380c:	080040ec 	.word	0x080040ec
 8003810:	0800410c 	.word	0x0800410c
 8003814:	080040cc 	.word	0x080040cc

08003818 <__swsetup_r>:
 8003818:	4b32      	ldr	r3, [pc, #200]	; (80038e4 <__swsetup_r+0xcc>)
 800381a:	b570      	push	{r4, r5, r6, lr}
 800381c:	681d      	ldr	r5, [r3, #0]
 800381e:	4606      	mov	r6, r0
 8003820:	460c      	mov	r4, r1
 8003822:	b125      	cbz	r5, 800382e <__swsetup_r+0x16>
 8003824:	69ab      	ldr	r3, [r5, #24]
 8003826:	b913      	cbnz	r3, 800382e <__swsetup_r+0x16>
 8003828:	4628      	mov	r0, r5
 800382a:	f000 f97d 	bl	8003b28 <__sinit>
 800382e:	4b2e      	ldr	r3, [pc, #184]	; (80038e8 <__swsetup_r+0xd0>)
 8003830:	429c      	cmp	r4, r3
 8003832:	d10f      	bne.n	8003854 <__swsetup_r+0x3c>
 8003834:	686c      	ldr	r4, [r5, #4]
 8003836:	89a3      	ldrh	r3, [r4, #12]
 8003838:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800383c:	0719      	lsls	r1, r3, #28
 800383e:	d42c      	bmi.n	800389a <__swsetup_r+0x82>
 8003840:	06dd      	lsls	r5, r3, #27
 8003842:	d411      	bmi.n	8003868 <__swsetup_r+0x50>
 8003844:	2309      	movs	r3, #9
 8003846:	6033      	str	r3, [r6, #0]
 8003848:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800384c:	81a3      	strh	r3, [r4, #12]
 800384e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003852:	e03e      	b.n	80038d2 <__swsetup_r+0xba>
 8003854:	4b25      	ldr	r3, [pc, #148]	; (80038ec <__swsetup_r+0xd4>)
 8003856:	429c      	cmp	r4, r3
 8003858:	d101      	bne.n	800385e <__swsetup_r+0x46>
 800385a:	68ac      	ldr	r4, [r5, #8]
 800385c:	e7eb      	b.n	8003836 <__swsetup_r+0x1e>
 800385e:	4b24      	ldr	r3, [pc, #144]	; (80038f0 <__swsetup_r+0xd8>)
 8003860:	429c      	cmp	r4, r3
 8003862:	bf08      	it	eq
 8003864:	68ec      	ldreq	r4, [r5, #12]
 8003866:	e7e6      	b.n	8003836 <__swsetup_r+0x1e>
 8003868:	0758      	lsls	r0, r3, #29
 800386a:	d512      	bpl.n	8003892 <__swsetup_r+0x7a>
 800386c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800386e:	b141      	cbz	r1, 8003882 <__swsetup_r+0x6a>
 8003870:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003874:	4299      	cmp	r1, r3
 8003876:	d002      	beq.n	800387e <__swsetup_r+0x66>
 8003878:	4630      	mov	r0, r6
 800387a:	f000 fa5b 	bl	8003d34 <_free_r>
 800387e:	2300      	movs	r3, #0
 8003880:	6363      	str	r3, [r4, #52]	; 0x34
 8003882:	89a3      	ldrh	r3, [r4, #12]
 8003884:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003888:	81a3      	strh	r3, [r4, #12]
 800388a:	2300      	movs	r3, #0
 800388c:	6063      	str	r3, [r4, #4]
 800388e:	6923      	ldr	r3, [r4, #16]
 8003890:	6023      	str	r3, [r4, #0]
 8003892:	89a3      	ldrh	r3, [r4, #12]
 8003894:	f043 0308 	orr.w	r3, r3, #8
 8003898:	81a3      	strh	r3, [r4, #12]
 800389a:	6923      	ldr	r3, [r4, #16]
 800389c:	b94b      	cbnz	r3, 80038b2 <__swsetup_r+0x9a>
 800389e:	89a3      	ldrh	r3, [r4, #12]
 80038a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80038a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038a8:	d003      	beq.n	80038b2 <__swsetup_r+0x9a>
 80038aa:	4621      	mov	r1, r4
 80038ac:	4630      	mov	r0, r6
 80038ae:	f000 fa01 	bl	8003cb4 <__smakebuf_r>
 80038b2:	89a0      	ldrh	r0, [r4, #12]
 80038b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80038b8:	f010 0301 	ands.w	r3, r0, #1
 80038bc:	d00a      	beq.n	80038d4 <__swsetup_r+0xbc>
 80038be:	2300      	movs	r3, #0
 80038c0:	60a3      	str	r3, [r4, #8]
 80038c2:	6963      	ldr	r3, [r4, #20]
 80038c4:	425b      	negs	r3, r3
 80038c6:	61a3      	str	r3, [r4, #24]
 80038c8:	6923      	ldr	r3, [r4, #16]
 80038ca:	b943      	cbnz	r3, 80038de <__swsetup_r+0xc6>
 80038cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80038d0:	d1ba      	bne.n	8003848 <__swsetup_r+0x30>
 80038d2:	bd70      	pop	{r4, r5, r6, pc}
 80038d4:	0781      	lsls	r1, r0, #30
 80038d6:	bf58      	it	pl
 80038d8:	6963      	ldrpl	r3, [r4, #20]
 80038da:	60a3      	str	r3, [r4, #8]
 80038dc:	e7f4      	b.n	80038c8 <__swsetup_r+0xb0>
 80038de:	2000      	movs	r0, #0
 80038e0:	e7f7      	b.n	80038d2 <__swsetup_r+0xba>
 80038e2:	bf00      	nop
 80038e4:	2000000c 	.word	0x2000000c
 80038e8:	080040ec 	.word	0x080040ec
 80038ec:	0800410c 	.word	0x0800410c
 80038f0:	080040cc 	.word	0x080040cc

080038f4 <__sflush_r>:
 80038f4:	898a      	ldrh	r2, [r1, #12]
 80038f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038fa:	4605      	mov	r5, r0
 80038fc:	0710      	lsls	r0, r2, #28
 80038fe:	460c      	mov	r4, r1
 8003900:	d458      	bmi.n	80039b4 <__sflush_r+0xc0>
 8003902:	684b      	ldr	r3, [r1, #4]
 8003904:	2b00      	cmp	r3, #0
 8003906:	dc05      	bgt.n	8003914 <__sflush_r+0x20>
 8003908:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800390a:	2b00      	cmp	r3, #0
 800390c:	dc02      	bgt.n	8003914 <__sflush_r+0x20>
 800390e:	2000      	movs	r0, #0
 8003910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003914:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003916:	2e00      	cmp	r6, #0
 8003918:	d0f9      	beq.n	800390e <__sflush_r+0x1a>
 800391a:	2300      	movs	r3, #0
 800391c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003920:	682f      	ldr	r7, [r5, #0]
 8003922:	602b      	str	r3, [r5, #0]
 8003924:	d032      	beq.n	800398c <__sflush_r+0x98>
 8003926:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003928:	89a3      	ldrh	r3, [r4, #12]
 800392a:	075a      	lsls	r2, r3, #29
 800392c:	d505      	bpl.n	800393a <__sflush_r+0x46>
 800392e:	6863      	ldr	r3, [r4, #4]
 8003930:	1ac0      	subs	r0, r0, r3
 8003932:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003934:	b10b      	cbz	r3, 800393a <__sflush_r+0x46>
 8003936:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003938:	1ac0      	subs	r0, r0, r3
 800393a:	2300      	movs	r3, #0
 800393c:	4602      	mov	r2, r0
 800393e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003940:	6a21      	ldr	r1, [r4, #32]
 8003942:	4628      	mov	r0, r5
 8003944:	47b0      	blx	r6
 8003946:	1c43      	adds	r3, r0, #1
 8003948:	89a3      	ldrh	r3, [r4, #12]
 800394a:	d106      	bne.n	800395a <__sflush_r+0x66>
 800394c:	6829      	ldr	r1, [r5, #0]
 800394e:	291d      	cmp	r1, #29
 8003950:	d82c      	bhi.n	80039ac <__sflush_r+0xb8>
 8003952:	4a2a      	ldr	r2, [pc, #168]	; (80039fc <__sflush_r+0x108>)
 8003954:	40ca      	lsrs	r2, r1
 8003956:	07d6      	lsls	r6, r2, #31
 8003958:	d528      	bpl.n	80039ac <__sflush_r+0xb8>
 800395a:	2200      	movs	r2, #0
 800395c:	6062      	str	r2, [r4, #4]
 800395e:	04d9      	lsls	r1, r3, #19
 8003960:	6922      	ldr	r2, [r4, #16]
 8003962:	6022      	str	r2, [r4, #0]
 8003964:	d504      	bpl.n	8003970 <__sflush_r+0x7c>
 8003966:	1c42      	adds	r2, r0, #1
 8003968:	d101      	bne.n	800396e <__sflush_r+0x7a>
 800396a:	682b      	ldr	r3, [r5, #0]
 800396c:	b903      	cbnz	r3, 8003970 <__sflush_r+0x7c>
 800396e:	6560      	str	r0, [r4, #84]	; 0x54
 8003970:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003972:	602f      	str	r7, [r5, #0]
 8003974:	2900      	cmp	r1, #0
 8003976:	d0ca      	beq.n	800390e <__sflush_r+0x1a>
 8003978:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800397c:	4299      	cmp	r1, r3
 800397e:	d002      	beq.n	8003986 <__sflush_r+0x92>
 8003980:	4628      	mov	r0, r5
 8003982:	f000 f9d7 	bl	8003d34 <_free_r>
 8003986:	2000      	movs	r0, #0
 8003988:	6360      	str	r0, [r4, #52]	; 0x34
 800398a:	e7c1      	b.n	8003910 <__sflush_r+0x1c>
 800398c:	6a21      	ldr	r1, [r4, #32]
 800398e:	2301      	movs	r3, #1
 8003990:	4628      	mov	r0, r5
 8003992:	47b0      	blx	r6
 8003994:	1c41      	adds	r1, r0, #1
 8003996:	d1c7      	bne.n	8003928 <__sflush_r+0x34>
 8003998:	682b      	ldr	r3, [r5, #0]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d0c4      	beq.n	8003928 <__sflush_r+0x34>
 800399e:	2b1d      	cmp	r3, #29
 80039a0:	d001      	beq.n	80039a6 <__sflush_r+0xb2>
 80039a2:	2b16      	cmp	r3, #22
 80039a4:	d101      	bne.n	80039aa <__sflush_r+0xb6>
 80039a6:	602f      	str	r7, [r5, #0]
 80039a8:	e7b1      	b.n	800390e <__sflush_r+0x1a>
 80039aa:	89a3      	ldrh	r3, [r4, #12]
 80039ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039b0:	81a3      	strh	r3, [r4, #12]
 80039b2:	e7ad      	b.n	8003910 <__sflush_r+0x1c>
 80039b4:	690f      	ldr	r7, [r1, #16]
 80039b6:	2f00      	cmp	r7, #0
 80039b8:	d0a9      	beq.n	800390e <__sflush_r+0x1a>
 80039ba:	0793      	lsls	r3, r2, #30
 80039bc:	680e      	ldr	r6, [r1, #0]
 80039be:	bf08      	it	eq
 80039c0:	694b      	ldreq	r3, [r1, #20]
 80039c2:	600f      	str	r7, [r1, #0]
 80039c4:	bf18      	it	ne
 80039c6:	2300      	movne	r3, #0
 80039c8:	eba6 0807 	sub.w	r8, r6, r7
 80039cc:	608b      	str	r3, [r1, #8]
 80039ce:	f1b8 0f00 	cmp.w	r8, #0
 80039d2:	dd9c      	ble.n	800390e <__sflush_r+0x1a>
 80039d4:	6a21      	ldr	r1, [r4, #32]
 80039d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80039d8:	4643      	mov	r3, r8
 80039da:	463a      	mov	r2, r7
 80039dc:	4628      	mov	r0, r5
 80039de:	47b0      	blx	r6
 80039e0:	2800      	cmp	r0, #0
 80039e2:	dc06      	bgt.n	80039f2 <__sflush_r+0xfe>
 80039e4:	89a3      	ldrh	r3, [r4, #12]
 80039e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039ea:	81a3      	strh	r3, [r4, #12]
 80039ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80039f0:	e78e      	b.n	8003910 <__sflush_r+0x1c>
 80039f2:	4407      	add	r7, r0
 80039f4:	eba8 0800 	sub.w	r8, r8, r0
 80039f8:	e7e9      	b.n	80039ce <__sflush_r+0xda>
 80039fa:	bf00      	nop
 80039fc:	20400001 	.word	0x20400001

08003a00 <_fflush_r>:
 8003a00:	b538      	push	{r3, r4, r5, lr}
 8003a02:	690b      	ldr	r3, [r1, #16]
 8003a04:	4605      	mov	r5, r0
 8003a06:	460c      	mov	r4, r1
 8003a08:	b913      	cbnz	r3, 8003a10 <_fflush_r+0x10>
 8003a0a:	2500      	movs	r5, #0
 8003a0c:	4628      	mov	r0, r5
 8003a0e:	bd38      	pop	{r3, r4, r5, pc}
 8003a10:	b118      	cbz	r0, 8003a1a <_fflush_r+0x1a>
 8003a12:	6983      	ldr	r3, [r0, #24]
 8003a14:	b90b      	cbnz	r3, 8003a1a <_fflush_r+0x1a>
 8003a16:	f000 f887 	bl	8003b28 <__sinit>
 8003a1a:	4b14      	ldr	r3, [pc, #80]	; (8003a6c <_fflush_r+0x6c>)
 8003a1c:	429c      	cmp	r4, r3
 8003a1e:	d11b      	bne.n	8003a58 <_fflush_r+0x58>
 8003a20:	686c      	ldr	r4, [r5, #4]
 8003a22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d0ef      	beq.n	8003a0a <_fflush_r+0xa>
 8003a2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003a2c:	07d0      	lsls	r0, r2, #31
 8003a2e:	d404      	bmi.n	8003a3a <_fflush_r+0x3a>
 8003a30:	0599      	lsls	r1, r3, #22
 8003a32:	d402      	bmi.n	8003a3a <_fflush_r+0x3a>
 8003a34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a36:	f000 f915 	bl	8003c64 <__retarget_lock_acquire_recursive>
 8003a3a:	4628      	mov	r0, r5
 8003a3c:	4621      	mov	r1, r4
 8003a3e:	f7ff ff59 	bl	80038f4 <__sflush_r>
 8003a42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003a44:	07da      	lsls	r2, r3, #31
 8003a46:	4605      	mov	r5, r0
 8003a48:	d4e0      	bmi.n	8003a0c <_fflush_r+0xc>
 8003a4a:	89a3      	ldrh	r3, [r4, #12]
 8003a4c:	059b      	lsls	r3, r3, #22
 8003a4e:	d4dd      	bmi.n	8003a0c <_fflush_r+0xc>
 8003a50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a52:	f000 f908 	bl	8003c66 <__retarget_lock_release_recursive>
 8003a56:	e7d9      	b.n	8003a0c <_fflush_r+0xc>
 8003a58:	4b05      	ldr	r3, [pc, #20]	; (8003a70 <_fflush_r+0x70>)
 8003a5a:	429c      	cmp	r4, r3
 8003a5c:	d101      	bne.n	8003a62 <_fflush_r+0x62>
 8003a5e:	68ac      	ldr	r4, [r5, #8]
 8003a60:	e7df      	b.n	8003a22 <_fflush_r+0x22>
 8003a62:	4b04      	ldr	r3, [pc, #16]	; (8003a74 <_fflush_r+0x74>)
 8003a64:	429c      	cmp	r4, r3
 8003a66:	bf08      	it	eq
 8003a68:	68ec      	ldreq	r4, [r5, #12]
 8003a6a:	e7da      	b.n	8003a22 <_fflush_r+0x22>
 8003a6c:	080040ec 	.word	0x080040ec
 8003a70:	0800410c 	.word	0x0800410c
 8003a74:	080040cc 	.word	0x080040cc

08003a78 <std>:
 8003a78:	2300      	movs	r3, #0
 8003a7a:	b510      	push	{r4, lr}
 8003a7c:	4604      	mov	r4, r0
 8003a7e:	e9c0 3300 	strd	r3, r3, [r0]
 8003a82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003a86:	6083      	str	r3, [r0, #8]
 8003a88:	8181      	strh	r1, [r0, #12]
 8003a8a:	6643      	str	r3, [r0, #100]	; 0x64
 8003a8c:	81c2      	strh	r2, [r0, #14]
 8003a8e:	6183      	str	r3, [r0, #24]
 8003a90:	4619      	mov	r1, r3
 8003a92:	2208      	movs	r2, #8
 8003a94:	305c      	adds	r0, #92	; 0x5c
 8003a96:	f7ff fdef 	bl	8003678 <memset>
 8003a9a:	4b05      	ldr	r3, [pc, #20]	; (8003ab0 <std+0x38>)
 8003a9c:	6263      	str	r3, [r4, #36]	; 0x24
 8003a9e:	4b05      	ldr	r3, [pc, #20]	; (8003ab4 <std+0x3c>)
 8003aa0:	62a3      	str	r3, [r4, #40]	; 0x28
 8003aa2:	4b05      	ldr	r3, [pc, #20]	; (8003ab8 <std+0x40>)
 8003aa4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003aa6:	4b05      	ldr	r3, [pc, #20]	; (8003abc <std+0x44>)
 8003aa8:	6224      	str	r4, [r4, #32]
 8003aaa:	6323      	str	r3, [r4, #48]	; 0x30
 8003aac:	bd10      	pop	{r4, pc}
 8003aae:	bf00      	nop
 8003ab0:	08003f15 	.word	0x08003f15
 8003ab4:	08003f37 	.word	0x08003f37
 8003ab8:	08003f6f 	.word	0x08003f6f
 8003abc:	08003f93 	.word	0x08003f93

08003ac0 <_cleanup_r>:
 8003ac0:	4901      	ldr	r1, [pc, #4]	; (8003ac8 <_cleanup_r+0x8>)
 8003ac2:	f000 b8af 	b.w	8003c24 <_fwalk_reent>
 8003ac6:	bf00      	nop
 8003ac8:	08003a01 	.word	0x08003a01

08003acc <__sfmoreglue>:
 8003acc:	b570      	push	{r4, r5, r6, lr}
 8003ace:	2268      	movs	r2, #104	; 0x68
 8003ad0:	1e4d      	subs	r5, r1, #1
 8003ad2:	4355      	muls	r5, r2
 8003ad4:	460e      	mov	r6, r1
 8003ad6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003ada:	f000 f997 	bl	8003e0c <_malloc_r>
 8003ade:	4604      	mov	r4, r0
 8003ae0:	b140      	cbz	r0, 8003af4 <__sfmoreglue+0x28>
 8003ae2:	2100      	movs	r1, #0
 8003ae4:	e9c0 1600 	strd	r1, r6, [r0]
 8003ae8:	300c      	adds	r0, #12
 8003aea:	60a0      	str	r0, [r4, #8]
 8003aec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003af0:	f7ff fdc2 	bl	8003678 <memset>
 8003af4:	4620      	mov	r0, r4
 8003af6:	bd70      	pop	{r4, r5, r6, pc}

08003af8 <__sfp_lock_acquire>:
 8003af8:	4801      	ldr	r0, [pc, #4]	; (8003b00 <__sfp_lock_acquire+0x8>)
 8003afa:	f000 b8b3 	b.w	8003c64 <__retarget_lock_acquire_recursive>
 8003afe:	bf00      	nop
 8003b00:	20000195 	.word	0x20000195

08003b04 <__sfp_lock_release>:
 8003b04:	4801      	ldr	r0, [pc, #4]	; (8003b0c <__sfp_lock_release+0x8>)
 8003b06:	f000 b8ae 	b.w	8003c66 <__retarget_lock_release_recursive>
 8003b0a:	bf00      	nop
 8003b0c:	20000195 	.word	0x20000195

08003b10 <__sinit_lock_acquire>:
 8003b10:	4801      	ldr	r0, [pc, #4]	; (8003b18 <__sinit_lock_acquire+0x8>)
 8003b12:	f000 b8a7 	b.w	8003c64 <__retarget_lock_acquire_recursive>
 8003b16:	bf00      	nop
 8003b18:	20000196 	.word	0x20000196

08003b1c <__sinit_lock_release>:
 8003b1c:	4801      	ldr	r0, [pc, #4]	; (8003b24 <__sinit_lock_release+0x8>)
 8003b1e:	f000 b8a2 	b.w	8003c66 <__retarget_lock_release_recursive>
 8003b22:	bf00      	nop
 8003b24:	20000196 	.word	0x20000196

08003b28 <__sinit>:
 8003b28:	b510      	push	{r4, lr}
 8003b2a:	4604      	mov	r4, r0
 8003b2c:	f7ff fff0 	bl	8003b10 <__sinit_lock_acquire>
 8003b30:	69a3      	ldr	r3, [r4, #24]
 8003b32:	b11b      	cbz	r3, 8003b3c <__sinit+0x14>
 8003b34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b38:	f7ff bff0 	b.w	8003b1c <__sinit_lock_release>
 8003b3c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003b40:	6523      	str	r3, [r4, #80]	; 0x50
 8003b42:	4b13      	ldr	r3, [pc, #76]	; (8003b90 <__sinit+0x68>)
 8003b44:	4a13      	ldr	r2, [pc, #76]	; (8003b94 <__sinit+0x6c>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	62a2      	str	r2, [r4, #40]	; 0x28
 8003b4a:	42a3      	cmp	r3, r4
 8003b4c:	bf04      	itt	eq
 8003b4e:	2301      	moveq	r3, #1
 8003b50:	61a3      	streq	r3, [r4, #24]
 8003b52:	4620      	mov	r0, r4
 8003b54:	f000 f820 	bl	8003b98 <__sfp>
 8003b58:	6060      	str	r0, [r4, #4]
 8003b5a:	4620      	mov	r0, r4
 8003b5c:	f000 f81c 	bl	8003b98 <__sfp>
 8003b60:	60a0      	str	r0, [r4, #8]
 8003b62:	4620      	mov	r0, r4
 8003b64:	f000 f818 	bl	8003b98 <__sfp>
 8003b68:	2200      	movs	r2, #0
 8003b6a:	60e0      	str	r0, [r4, #12]
 8003b6c:	2104      	movs	r1, #4
 8003b6e:	6860      	ldr	r0, [r4, #4]
 8003b70:	f7ff ff82 	bl	8003a78 <std>
 8003b74:	68a0      	ldr	r0, [r4, #8]
 8003b76:	2201      	movs	r2, #1
 8003b78:	2109      	movs	r1, #9
 8003b7a:	f7ff ff7d 	bl	8003a78 <std>
 8003b7e:	68e0      	ldr	r0, [r4, #12]
 8003b80:	2202      	movs	r2, #2
 8003b82:	2112      	movs	r1, #18
 8003b84:	f7ff ff78 	bl	8003a78 <std>
 8003b88:	2301      	movs	r3, #1
 8003b8a:	61a3      	str	r3, [r4, #24]
 8003b8c:	e7d2      	b.n	8003b34 <__sinit+0xc>
 8003b8e:	bf00      	nop
 8003b90:	080040c8 	.word	0x080040c8
 8003b94:	08003ac1 	.word	0x08003ac1

08003b98 <__sfp>:
 8003b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b9a:	4607      	mov	r7, r0
 8003b9c:	f7ff ffac 	bl	8003af8 <__sfp_lock_acquire>
 8003ba0:	4b1e      	ldr	r3, [pc, #120]	; (8003c1c <__sfp+0x84>)
 8003ba2:	681e      	ldr	r6, [r3, #0]
 8003ba4:	69b3      	ldr	r3, [r6, #24]
 8003ba6:	b913      	cbnz	r3, 8003bae <__sfp+0x16>
 8003ba8:	4630      	mov	r0, r6
 8003baa:	f7ff ffbd 	bl	8003b28 <__sinit>
 8003bae:	3648      	adds	r6, #72	; 0x48
 8003bb0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003bb4:	3b01      	subs	r3, #1
 8003bb6:	d503      	bpl.n	8003bc0 <__sfp+0x28>
 8003bb8:	6833      	ldr	r3, [r6, #0]
 8003bba:	b30b      	cbz	r3, 8003c00 <__sfp+0x68>
 8003bbc:	6836      	ldr	r6, [r6, #0]
 8003bbe:	e7f7      	b.n	8003bb0 <__sfp+0x18>
 8003bc0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003bc4:	b9d5      	cbnz	r5, 8003bfc <__sfp+0x64>
 8003bc6:	4b16      	ldr	r3, [pc, #88]	; (8003c20 <__sfp+0x88>)
 8003bc8:	60e3      	str	r3, [r4, #12]
 8003bca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003bce:	6665      	str	r5, [r4, #100]	; 0x64
 8003bd0:	f000 f847 	bl	8003c62 <__retarget_lock_init_recursive>
 8003bd4:	f7ff ff96 	bl	8003b04 <__sfp_lock_release>
 8003bd8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003bdc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003be0:	6025      	str	r5, [r4, #0]
 8003be2:	61a5      	str	r5, [r4, #24]
 8003be4:	2208      	movs	r2, #8
 8003be6:	4629      	mov	r1, r5
 8003be8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003bec:	f7ff fd44 	bl	8003678 <memset>
 8003bf0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003bf4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003bf8:	4620      	mov	r0, r4
 8003bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bfc:	3468      	adds	r4, #104	; 0x68
 8003bfe:	e7d9      	b.n	8003bb4 <__sfp+0x1c>
 8003c00:	2104      	movs	r1, #4
 8003c02:	4638      	mov	r0, r7
 8003c04:	f7ff ff62 	bl	8003acc <__sfmoreglue>
 8003c08:	4604      	mov	r4, r0
 8003c0a:	6030      	str	r0, [r6, #0]
 8003c0c:	2800      	cmp	r0, #0
 8003c0e:	d1d5      	bne.n	8003bbc <__sfp+0x24>
 8003c10:	f7ff ff78 	bl	8003b04 <__sfp_lock_release>
 8003c14:	230c      	movs	r3, #12
 8003c16:	603b      	str	r3, [r7, #0]
 8003c18:	e7ee      	b.n	8003bf8 <__sfp+0x60>
 8003c1a:	bf00      	nop
 8003c1c:	080040c8 	.word	0x080040c8
 8003c20:	ffff0001 	.word	0xffff0001

08003c24 <_fwalk_reent>:
 8003c24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c28:	4606      	mov	r6, r0
 8003c2a:	4688      	mov	r8, r1
 8003c2c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003c30:	2700      	movs	r7, #0
 8003c32:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003c36:	f1b9 0901 	subs.w	r9, r9, #1
 8003c3a:	d505      	bpl.n	8003c48 <_fwalk_reent+0x24>
 8003c3c:	6824      	ldr	r4, [r4, #0]
 8003c3e:	2c00      	cmp	r4, #0
 8003c40:	d1f7      	bne.n	8003c32 <_fwalk_reent+0xe>
 8003c42:	4638      	mov	r0, r7
 8003c44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c48:	89ab      	ldrh	r3, [r5, #12]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d907      	bls.n	8003c5e <_fwalk_reent+0x3a>
 8003c4e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003c52:	3301      	adds	r3, #1
 8003c54:	d003      	beq.n	8003c5e <_fwalk_reent+0x3a>
 8003c56:	4629      	mov	r1, r5
 8003c58:	4630      	mov	r0, r6
 8003c5a:	47c0      	blx	r8
 8003c5c:	4307      	orrs	r7, r0
 8003c5e:	3568      	adds	r5, #104	; 0x68
 8003c60:	e7e9      	b.n	8003c36 <_fwalk_reent+0x12>

08003c62 <__retarget_lock_init_recursive>:
 8003c62:	4770      	bx	lr

08003c64 <__retarget_lock_acquire_recursive>:
 8003c64:	4770      	bx	lr

08003c66 <__retarget_lock_release_recursive>:
 8003c66:	4770      	bx	lr

08003c68 <__swhatbuf_r>:
 8003c68:	b570      	push	{r4, r5, r6, lr}
 8003c6a:	460e      	mov	r6, r1
 8003c6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c70:	2900      	cmp	r1, #0
 8003c72:	b096      	sub	sp, #88	; 0x58
 8003c74:	4614      	mov	r4, r2
 8003c76:	461d      	mov	r5, r3
 8003c78:	da08      	bge.n	8003c8c <__swhatbuf_r+0x24>
 8003c7a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	602a      	str	r2, [r5, #0]
 8003c82:	061a      	lsls	r2, r3, #24
 8003c84:	d410      	bmi.n	8003ca8 <__swhatbuf_r+0x40>
 8003c86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c8a:	e00e      	b.n	8003caa <__swhatbuf_r+0x42>
 8003c8c:	466a      	mov	r2, sp
 8003c8e:	f000 f9a7 	bl	8003fe0 <_fstat_r>
 8003c92:	2800      	cmp	r0, #0
 8003c94:	dbf1      	blt.n	8003c7a <__swhatbuf_r+0x12>
 8003c96:	9a01      	ldr	r2, [sp, #4]
 8003c98:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003c9c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003ca0:	425a      	negs	r2, r3
 8003ca2:	415a      	adcs	r2, r3
 8003ca4:	602a      	str	r2, [r5, #0]
 8003ca6:	e7ee      	b.n	8003c86 <__swhatbuf_r+0x1e>
 8003ca8:	2340      	movs	r3, #64	; 0x40
 8003caa:	2000      	movs	r0, #0
 8003cac:	6023      	str	r3, [r4, #0]
 8003cae:	b016      	add	sp, #88	; 0x58
 8003cb0:	bd70      	pop	{r4, r5, r6, pc}
	...

08003cb4 <__smakebuf_r>:
 8003cb4:	898b      	ldrh	r3, [r1, #12]
 8003cb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003cb8:	079d      	lsls	r5, r3, #30
 8003cba:	4606      	mov	r6, r0
 8003cbc:	460c      	mov	r4, r1
 8003cbe:	d507      	bpl.n	8003cd0 <__smakebuf_r+0x1c>
 8003cc0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003cc4:	6023      	str	r3, [r4, #0]
 8003cc6:	6123      	str	r3, [r4, #16]
 8003cc8:	2301      	movs	r3, #1
 8003cca:	6163      	str	r3, [r4, #20]
 8003ccc:	b002      	add	sp, #8
 8003cce:	bd70      	pop	{r4, r5, r6, pc}
 8003cd0:	ab01      	add	r3, sp, #4
 8003cd2:	466a      	mov	r2, sp
 8003cd4:	f7ff ffc8 	bl	8003c68 <__swhatbuf_r>
 8003cd8:	9900      	ldr	r1, [sp, #0]
 8003cda:	4605      	mov	r5, r0
 8003cdc:	4630      	mov	r0, r6
 8003cde:	f000 f895 	bl	8003e0c <_malloc_r>
 8003ce2:	b948      	cbnz	r0, 8003cf8 <__smakebuf_r+0x44>
 8003ce4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ce8:	059a      	lsls	r2, r3, #22
 8003cea:	d4ef      	bmi.n	8003ccc <__smakebuf_r+0x18>
 8003cec:	f023 0303 	bic.w	r3, r3, #3
 8003cf0:	f043 0302 	orr.w	r3, r3, #2
 8003cf4:	81a3      	strh	r3, [r4, #12]
 8003cf6:	e7e3      	b.n	8003cc0 <__smakebuf_r+0xc>
 8003cf8:	4b0d      	ldr	r3, [pc, #52]	; (8003d30 <__smakebuf_r+0x7c>)
 8003cfa:	62b3      	str	r3, [r6, #40]	; 0x28
 8003cfc:	89a3      	ldrh	r3, [r4, #12]
 8003cfe:	6020      	str	r0, [r4, #0]
 8003d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d04:	81a3      	strh	r3, [r4, #12]
 8003d06:	9b00      	ldr	r3, [sp, #0]
 8003d08:	6163      	str	r3, [r4, #20]
 8003d0a:	9b01      	ldr	r3, [sp, #4]
 8003d0c:	6120      	str	r0, [r4, #16]
 8003d0e:	b15b      	cbz	r3, 8003d28 <__smakebuf_r+0x74>
 8003d10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d14:	4630      	mov	r0, r6
 8003d16:	f000 f975 	bl	8004004 <_isatty_r>
 8003d1a:	b128      	cbz	r0, 8003d28 <__smakebuf_r+0x74>
 8003d1c:	89a3      	ldrh	r3, [r4, #12]
 8003d1e:	f023 0303 	bic.w	r3, r3, #3
 8003d22:	f043 0301 	orr.w	r3, r3, #1
 8003d26:	81a3      	strh	r3, [r4, #12]
 8003d28:	89a0      	ldrh	r0, [r4, #12]
 8003d2a:	4305      	orrs	r5, r0
 8003d2c:	81a5      	strh	r5, [r4, #12]
 8003d2e:	e7cd      	b.n	8003ccc <__smakebuf_r+0x18>
 8003d30:	08003ac1 	.word	0x08003ac1

08003d34 <_free_r>:
 8003d34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003d36:	2900      	cmp	r1, #0
 8003d38:	d044      	beq.n	8003dc4 <_free_r+0x90>
 8003d3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d3e:	9001      	str	r0, [sp, #4]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f1a1 0404 	sub.w	r4, r1, #4
 8003d46:	bfb8      	it	lt
 8003d48:	18e4      	addlt	r4, r4, r3
 8003d4a:	f000 f97d 	bl	8004048 <__malloc_lock>
 8003d4e:	4a1e      	ldr	r2, [pc, #120]	; (8003dc8 <_free_r+0x94>)
 8003d50:	9801      	ldr	r0, [sp, #4]
 8003d52:	6813      	ldr	r3, [r2, #0]
 8003d54:	b933      	cbnz	r3, 8003d64 <_free_r+0x30>
 8003d56:	6063      	str	r3, [r4, #4]
 8003d58:	6014      	str	r4, [r2, #0]
 8003d5a:	b003      	add	sp, #12
 8003d5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003d60:	f000 b978 	b.w	8004054 <__malloc_unlock>
 8003d64:	42a3      	cmp	r3, r4
 8003d66:	d908      	bls.n	8003d7a <_free_r+0x46>
 8003d68:	6825      	ldr	r5, [r4, #0]
 8003d6a:	1961      	adds	r1, r4, r5
 8003d6c:	428b      	cmp	r3, r1
 8003d6e:	bf01      	itttt	eq
 8003d70:	6819      	ldreq	r1, [r3, #0]
 8003d72:	685b      	ldreq	r3, [r3, #4]
 8003d74:	1949      	addeq	r1, r1, r5
 8003d76:	6021      	streq	r1, [r4, #0]
 8003d78:	e7ed      	b.n	8003d56 <_free_r+0x22>
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	b10b      	cbz	r3, 8003d84 <_free_r+0x50>
 8003d80:	42a3      	cmp	r3, r4
 8003d82:	d9fa      	bls.n	8003d7a <_free_r+0x46>
 8003d84:	6811      	ldr	r1, [r2, #0]
 8003d86:	1855      	adds	r5, r2, r1
 8003d88:	42a5      	cmp	r5, r4
 8003d8a:	d10b      	bne.n	8003da4 <_free_r+0x70>
 8003d8c:	6824      	ldr	r4, [r4, #0]
 8003d8e:	4421      	add	r1, r4
 8003d90:	1854      	adds	r4, r2, r1
 8003d92:	42a3      	cmp	r3, r4
 8003d94:	6011      	str	r1, [r2, #0]
 8003d96:	d1e0      	bne.n	8003d5a <_free_r+0x26>
 8003d98:	681c      	ldr	r4, [r3, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	6053      	str	r3, [r2, #4]
 8003d9e:	4421      	add	r1, r4
 8003da0:	6011      	str	r1, [r2, #0]
 8003da2:	e7da      	b.n	8003d5a <_free_r+0x26>
 8003da4:	d902      	bls.n	8003dac <_free_r+0x78>
 8003da6:	230c      	movs	r3, #12
 8003da8:	6003      	str	r3, [r0, #0]
 8003daa:	e7d6      	b.n	8003d5a <_free_r+0x26>
 8003dac:	6825      	ldr	r5, [r4, #0]
 8003dae:	1961      	adds	r1, r4, r5
 8003db0:	428b      	cmp	r3, r1
 8003db2:	bf04      	itt	eq
 8003db4:	6819      	ldreq	r1, [r3, #0]
 8003db6:	685b      	ldreq	r3, [r3, #4]
 8003db8:	6063      	str	r3, [r4, #4]
 8003dba:	bf04      	itt	eq
 8003dbc:	1949      	addeq	r1, r1, r5
 8003dbe:	6021      	streq	r1, [r4, #0]
 8003dc0:	6054      	str	r4, [r2, #4]
 8003dc2:	e7ca      	b.n	8003d5a <_free_r+0x26>
 8003dc4:	b003      	add	sp, #12
 8003dc6:	bd30      	pop	{r4, r5, pc}
 8003dc8:	20000198 	.word	0x20000198

08003dcc <sbrk_aligned>:
 8003dcc:	b570      	push	{r4, r5, r6, lr}
 8003dce:	4e0e      	ldr	r6, [pc, #56]	; (8003e08 <sbrk_aligned+0x3c>)
 8003dd0:	460c      	mov	r4, r1
 8003dd2:	6831      	ldr	r1, [r6, #0]
 8003dd4:	4605      	mov	r5, r0
 8003dd6:	b911      	cbnz	r1, 8003dde <sbrk_aligned+0x12>
 8003dd8:	f000 f88c 	bl	8003ef4 <_sbrk_r>
 8003ddc:	6030      	str	r0, [r6, #0]
 8003dde:	4621      	mov	r1, r4
 8003de0:	4628      	mov	r0, r5
 8003de2:	f000 f887 	bl	8003ef4 <_sbrk_r>
 8003de6:	1c43      	adds	r3, r0, #1
 8003de8:	d00a      	beq.n	8003e00 <sbrk_aligned+0x34>
 8003dea:	1cc4      	adds	r4, r0, #3
 8003dec:	f024 0403 	bic.w	r4, r4, #3
 8003df0:	42a0      	cmp	r0, r4
 8003df2:	d007      	beq.n	8003e04 <sbrk_aligned+0x38>
 8003df4:	1a21      	subs	r1, r4, r0
 8003df6:	4628      	mov	r0, r5
 8003df8:	f000 f87c 	bl	8003ef4 <_sbrk_r>
 8003dfc:	3001      	adds	r0, #1
 8003dfe:	d101      	bne.n	8003e04 <sbrk_aligned+0x38>
 8003e00:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003e04:	4620      	mov	r0, r4
 8003e06:	bd70      	pop	{r4, r5, r6, pc}
 8003e08:	2000019c 	.word	0x2000019c

08003e0c <_malloc_r>:
 8003e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e10:	1ccd      	adds	r5, r1, #3
 8003e12:	f025 0503 	bic.w	r5, r5, #3
 8003e16:	3508      	adds	r5, #8
 8003e18:	2d0c      	cmp	r5, #12
 8003e1a:	bf38      	it	cc
 8003e1c:	250c      	movcc	r5, #12
 8003e1e:	2d00      	cmp	r5, #0
 8003e20:	4607      	mov	r7, r0
 8003e22:	db01      	blt.n	8003e28 <_malloc_r+0x1c>
 8003e24:	42a9      	cmp	r1, r5
 8003e26:	d905      	bls.n	8003e34 <_malloc_r+0x28>
 8003e28:	230c      	movs	r3, #12
 8003e2a:	603b      	str	r3, [r7, #0]
 8003e2c:	2600      	movs	r6, #0
 8003e2e:	4630      	mov	r0, r6
 8003e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e34:	4e2e      	ldr	r6, [pc, #184]	; (8003ef0 <_malloc_r+0xe4>)
 8003e36:	f000 f907 	bl	8004048 <__malloc_lock>
 8003e3a:	6833      	ldr	r3, [r6, #0]
 8003e3c:	461c      	mov	r4, r3
 8003e3e:	bb34      	cbnz	r4, 8003e8e <_malloc_r+0x82>
 8003e40:	4629      	mov	r1, r5
 8003e42:	4638      	mov	r0, r7
 8003e44:	f7ff ffc2 	bl	8003dcc <sbrk_aligned>
 8003e48:	1c43      	adds	r3, r0, #1
 8003e4a:	4604      	mov	r4, r0
 8003e4c:	d14d      	bne.n	8003eea <_malloc_r+0xde>
 8003e4e:	6834      	ldr	r4, [r6, #0]
 8003e50:	4626      	mov	r6, r4
 8003e52:	2e00      	cmp	r6, #0
 8003e54:	d140      	bne.n	8003ed8 <_malloc_r+0xcc>
 8003e56:	6823      	ldr	r3, [r4, #0]
 8003e58:	4631      	mov	r1, r6
 8003e5a:	4638      	mov	r0, r7
 8003e5c:	eb04 0803 	add.w	r8, r4, r3
 8003e60:	f000 f848 	bl	8003ef4 <_sbrk_r>
 8003e64:	4580      	cmp	r8, r0
 8003e66:	d13a      	bne.n	8003ede <_malloc_r+0xd2>
 8003e68:	6821      	ldr	r1, [r4, #0]
 8003e6a:	3503      	adds	r5, #3
 8003e6c:	1a6d      	subs	r5, r5, r1
 8003e6e:	f025 0503 	bic.w	r5, r5, #3
 8003e72:	3508      	adds	r5, #8
 8003e74:	2d0c      	cmp	r5, #12
 8003e76:	bf38      	it	cc
 8003e78:	250c      	movcc	r5, #12
 8003e7a:	4629      	mov	r1, r5
 8003e7c:	4638      	mov	r0, r7
 8003e7e:	f7ff ffa5 	bl	8003dcc <sbrk_aligned>
 8003e82:	3001      	adds	r0, #1
 8003e84:	d02b      	beq.n	8003ede <_malloc_r+0xd2>
 8003e86:	6823      	ldr	r3, [r4, #0]
 8003e88:	442b      	add	r3, r5
 8003e8a:	6023      	str	r3, [r4, #0]
 8003e8c:	e00e      	b.n	8003eac <_malloc_r+0xa0>
 8003e8e:	6822      	ldr	r2, [r4, #0]
 8003e90:	1b52      	subs	r2, r2, r5
 8003e92:	d41e      	bmi.n	8003ed2 <_malloc_r+0xc6>
 8003e94:	2a0b      	cmp	r2, #11
 8003e96:	d916      	bls.n	8003ec6 <_malloc_r+0xba>
 8003e98:	1961      	adds	r1, r4, r5
 8003e9a:	42a3      	cmp	r3, r4
 8003e9c:	6025      	str	r5, [r4, #0]
 8003e9e:	bf18      	it	ne
 8003ea0:	6059      	strne	r1, [r3, #4]
 8003ea2:	6863      	ldr	r3, [r4, #4]
 8003ea4:	bf08      	it	eq
 8003ea6:	6031      	streq	r1, [r6, #0]
 8003ea8:	5162      	str	r2, [r4, r5]
 8003eaa:	604b      	str	r3, [r1, #4]
 8003eac:	4638      	mov	r0, r7
 8003eae:	f104 060b 	add.w	r6, r4, #11
 8003eb2:	f000 f8cf 	bl	8004054 <__malloc_unlock>
 8003eb6:	f026 0607 	bic.w	r6, r6, #7
 8003eba:	1d23      	adds	r3, r4, #4
 8003ebc:	1af2      	subs	r2, r6, r3
 8003ebe:	d0b6      	beq.n	8003e2e <_malloc_r+0x22>
 8003ec0:	1b9b      	subs	r3, r3, r6
 8003ec2:	50a3      	str	r3, [r4, r2]
 8003ec4:	e7b3      	b.n	8003e2e <_malloc_r+0x22>
 8003ec6:	6862      	ldr	r2, [r4, #4]
 8003ec8:	42a3      	cmp	r3, r4
 8003eca:	bf0c      	ite	eq
 8003ecc:	6032      	streq	r2, [r6, #0]
 8003ece:	605a      	strne	r2, [r3, #4]
 8003ed0:	e7ec      	b.n	8003eac <_malloc_r+0xa0>
 8003ed2:	4623      	mov	r3, r4
 8003ed4:	6864      	ldr	r4, [r4, #4]
 8003ed6:	e7b2      	b.n	8003e3e <_malloc_r+0x32>
 8003ed8:	4634      	mov	r4, r6
 8003eda:	6876      	ldr	r6, [r6, #4]
 8003edc:	e7b9      	b.n	8003e52 <_malloc_r+0x46>
 8003ede:	230c      	movs	r3, #12
 8003ee0:	603b      	str	r3, [r7, #0]
 8003ee2:	4638      	mov	r0, r7
 8003ee4:	f000 f8b6 	bl	8004054 <__malloc_unlock>
 8003ee8:	e7a1      	b.n	8003e2e <_malloc_r+0x22>
 8003eea:	6025      	str	r5, [r4, #0]
 8003eec:	e7de      	b.n	8003eac <_malloc_r+0xa0>
 8003eee:	bf00      	nop
 8003ef0:	20000198 	.word	0x20000198

08003ef4 <_sbrk_r>:
 8003ef4:	b538      	push	{r3, r4, r5, lr}
 8003ef6:	4d06      	ldr	r5, [pc, #24]	; (8003f10 <_sbrk_r+0x1c>)
 8003ef8:	2300      	movs	r3, #0
 8003efa:	4604      	mov	r4, r0
 8003efc:	4608      	mov	r0, r1
 8003efe:	602b      	str	r3, [r5, #0]
 8003f00:	f7fc ffea 	bl	8000ed8 <_sbrk>
 8003f04:	1c43      	adds	r3, r0, #1
 8003f06:	d102      	bne.n	8003f0e <_sbrk_r+0x1a>
 8003f08:	682b      	ldr	r3, [r5, #0]
 8003f0a:	b103      	cbz	r3, 8003f0e <_sbrk_r+0x1a>
 8003f0c:	6023      	str	r3, [r4, #0]
 8003f0e:	bd38      	pop	{r3, r4, r5, pc}
 8003f10:	200001a0 	.word	0x200001a0

08003f14 <__sread>:
 8003f14:	b510      	push	{r4, lr}
 8003f16:	460c      	mov	r4, r1
 8003f18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f1c:	f000 f8a0 	bl	8004060 <_read_r>
 8003f20:	2800      	cmp	r0, #0
 8003f22:	bfab      	itete	ge
 8003f24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003f26:	89a3      	ldrhlt	r3, [r4, #12]
 8003f28:	181b      	addge	r3, r3, r0
 8003f2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003f2e:	bfac      	ite	ge
 8003f30:	6563      	strge	r3, [r4, #84]	; 0x54
 8003f32:	81a3      	strhlt	r3, [r4, #12]
 8003f34:	bd10      	pop	{r4, pc}

08003f36 <__swrite>:
 8003f36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f3a:	461f      	mov	r7, r3
 8003f3c:	898b      	ldrh	r3, [r1, #12]
 8003f3e:	05db      	lsls	r3, r3, #23
 8003f40:	4605      	mov	r5, r0
 8003f42:	460c      	mov	r4, r1
 8003f44:	4616      	mov	r6, r2
 8003f46:	d505      	bpl.n	8003f54 <__swrite+0x1e>
 8003f48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f000 f868 	bl	8004024 <_lseek_r>
 8003f54:	89a3      	ldrh	r3, [r4, #12]
 8003f56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f5e:	81a3      	strh	r3, [r4, #12]
 8003f60:	4632      	mov	r2, r6
 8003f62:	463b      	mov	r3, r7
 8003f64:	4628      	mov	r0, r5
 8003f66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f6a:	f000 b817 	b.w	8003f9c <_write_r>

08003f6e <__sseek>:
 8003f6e:	b510      	push	{r4, lr}
 8003f70:	460c      	mov	r4, r1
 8003f72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f76:	f000 f855 	bl	8004024 <_lseek_r>
 8003f7a:	1c43      	adds	r3, r0, #1
 8003f7c:	89a3      	ldrh	r3, [r4, #12]
 8003f7e:	bf15      	itete	ne
 8003f80:	6560      	strne	r0, [r4, #84]	; 0x54
 8003f82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003f86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003f8a:	81a3      	strheq	r3, [r4, #12]
 8003f8c:	bf18      	it	ne
 8003f8e:	81a3      	strhne	r3, [r4, #12]
 8003f90:	bd10      	pop	{r4, pc}

08003f92 <__sclose>:
 8003f92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f96:	f000 b813 	b.w	8003fc0 <_close_r>
	...

08003f9c <_write_r>:
 8003f9c:	b538      	push	{r3, r4, r5, lr}
 8003f9e:	4d07      	ldr	r5, [pc, #28]	; (8003fbc <_write_r+0x20>)
 8003fa0:	4604      	mov	r4, r0
 8003fa2:	4608      	mov	r0, r1
 8003fa4:	4611      	mov	r1, r2
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	602a      	str	r2, [r5, #0]
 8003faa:	461a      	mov	r2, r3
 8003fac:	f7fc ff43 	bl	8000e36 <_write>
 8003fb0:	1c43      	adds	r3, r0, #1
 8003fb2:	d102      	bne.n	8003fba <_write_r+0x1e>
 8003fb4:	682b      	ldr	r3, [r5, #0]
 8003fb6:	b103      	cbz	r3, 8003fba <_write_r+0x1e>
 8003fb8:	6023      	str	r3, [r4, #0]
 8003fba:	bd38      	pop	{r3, r4, r5, pc}
 8003fbc:	200001a0 	.word	0x200001a0

08003fc0 <_close_r>:
 8003fc0:	b538      	push	{r3, r4, r5, lr}
 8003fc2:	4d06      	ldr	r5, [pc, #24]	; (8003fdc <_close_r+0x1c>)
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	4604      	mov	r4, r0
 8003fc8:	4608      	mov	r0, r1
 8003fca:	602b      	str	r3, [r5, #0]
 8003fcc:	f7fc ff4f 	bl	8000e6e <_close>
 8003fd0:	1c43      	adds	r3, r0, #1
 8003fd2:	d102      	bne.n	8003fda <_close_r+0x1a>
 8003fd4:	682b      	ldr	r3, [r5, #0]
 8003fd6:	b103      	cbz	r3, 8003fda <_close_r+0x1a>
 8003fd8:	6023      	str	r3, [r4, #0]
 8003fda:	bd38      	pop	{r3, r4, r5, pc}
 8003fdc:	200001a0 	.word	0x200001a0

08003fe0 <_fstat_r>:
 8003fe0:	b538      	push	{r3, r4, r5, lr}
 8003fe2:	4d07      	ldr	r5, [pc, #28]	; (8004000 <_fstat_r+0x20>)
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	4604      	mov	r4, r0
 8003fe8:	4608      	mov	r0, r1
 8003fea:	4611      	mov	r1, r2
 8003fec:	602b      	str	r3, [r5, #0]
 8003fee:	f7fc ff4a 	bl	8000e86 <_fstat>
 8003ff2:	1c43      	adds	r3, r0, #1
 8003ff4:	d102      	bne.n	8003ffc <_fstat_r+0x1c>
 8003ff6:	682b      	ldr	r3, [r5, #0]
 8003ff8:	b103      	cbz	r3, 8003ffc <_fstat_r+0x1c>
 8003ffa:	6023      	str	r3, [r4, #0]
 8003ffc:	bd38      	pop	{r3, r4, r5, pc}
 8003ffe:	bf00      	nop
 8004000:	200001a0 	.word	0x200001a0

08004004 <_isatty_r>:
 8004004:	b538      	push	{r3, r4, r5, lr}
 8004006:	4d06      	ldr	r5, [pc, #24]	; (8004020 <_isatty_r+0x1c>)
 8004008:	2300      	movs	r3, #0
 800400a:	4604      	mov	r4, r0
 800400c:	4608      	mov	r0, r1
 800400e:	602b      	str	r3, [r5, #0]
 8004010:	f7fc ff49 	bl	8000ea6 <_isatty>
 8004014:	1c43      	adds	r3, r0, #1
 8004016:	d102      	bne.n	800401e <_isatty_r+0x1a>
 8004018:	682b      	ldr	r3, [r5, #0]
 800401a:	b103      	cbz	r3, 800401e <_isatty_r+0x1a>
 800401c:	6023      	str	r3, [r4, #0]
 800401e:	bd38      	pop	{r3, r4, r5, pc}
 8004020:	200001a0 	.word	0x200001a0

08004024 <_lseek_r>:
 8004024:	b538      	push	{r3, r4, r5, lr}
 8004026:	4d07      	ldr	r5, [pc, #28]	; (8004044 <_lseek_r+0x20>)
 8004028:	4604      	mov	r4, r0
 800402a:	4608      	mov	r0, r1
 800402c:	4611      	mov	r1, r2
 800402e:	2200      	movs	r2, #0
 8004030:	602a      	str	r2, [r5, #0]
 8004032:	461a      	mov	r2, r3
 8004034:	f7fc ff42 	bl	8000ebc <_lseek>
 8004038:	1c43      	adds	r3, r0, #1
 800403a:	d102      	bne.n	8004042 <_lseek_r+0x1e>
 800403c:	682b      	ldr	r3, [r5, #0]
 800403e:	b103      	cbz	r3, 8004042 <_lseek_r+0x1e>
 8004040:	6023      	str	r3, [r4, #0]
 8004042:	bd38      	pop	{r3, r4, r5, pc}
 8004044:	200001a0 	.word	0x200001a0

08004048 <__malloc_lock>:
 8004048:	4801      	ldr	r0, [pc, #4]	; (8004050 <__malloc_lock+0x8>)
 800404a:	f7ff be0b 	b.w	8003c64 <__retarget_lock_acquire_recursive>
 800404e:	bf00      	nop
 8004050:	20000194 	.word	0x20000194

08004054 <__malloc_unlock>:
 8004054:	4801      	ldr	r0, [pc, #4]	; (800405c <__malloc_unlock+0x8>)
 8004056:	f7ff be06 	b.w	8003c66 <__retarget_lock_release_recursive>
 800405a:	bf00      	nop
 800405c:	20000194 	.word	0x20000194

08004060 <_read_r>:
 8004060:	b538      	push	{r3, r4, r5, lr}
 8004062:	4d07      	ldr	r5, [pc, #28]	; (8004080 <_read_r+0x20>)
 8004064:	4604      	mov	r4, r0
 8004066:	4608      	mov	r0, r1
 8004068:	4611      	mov	r1, r2
 800406a:	2200      	movs	r2, #0
 800406c:	602a      	str	r2, [r5, #0]
 800406e:	461a      	mov	r2, r3
 8004070:	f7fc fec4 	bl	8000dfc <_read>
 8004074:	1c43      	adds	r3, r0, #1
 8004076:	d102      	bne.n	800407e <_read_r+0x1e>
 8004078:	682b      	ldr	r3, [r5, #0]
 800407a:	b103      	cbz	r3, 800407e <_read_r+0x1e>
 800407c:	6023      	str	r3, [r4, #0]
 800407e:	bd38      	pop	{r3, r4, r5, pc}
 8004080:	200001a0 	.word	0x200001a0

08004084 <_init>:
 8004084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004086:	bf00      	nop
 8004088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800408a:	bc08      	pop	{r3}
 800408c:	469e      	mov	lr, r3
 800408e:	4770      	bx	lr

08004090 <_fini>:
 8004090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004092:	bf00      	nop
 8004094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004096:	bc08      	pop	{r3}
 8004098:	469e      	mov	lr, r3
 800409a:	4770      	bx	lr
